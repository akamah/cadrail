{"version":3,"sources":["webpack:///webpack/bootstrap 1f49af59cc7524ddd874","webpack:///../librail/build/End.js","webpack:///../librail/build/Rot.js","webpack:///../librail/build/Point.js","webpack:///./node_modules/three/build/three.module.js","webpack:///../librail/build/Dir.js","webpack:///../librail/build/Pole.js","webpack:///../librail/build/index.js","webpack:///../librail/build/Flip.js","webpack:///./src/model/ModelManager.ts","webpack:///./src/index.ts","webpack:///./src/Main.ts","webpack:///./src/RailView.ts","webpack:///./node_modules/three/examples/js/controls/OrbitControls.js","webpack:///../librail/build/Rail.js","webpack:///../librail/build/Transform.js","webpack:///../librail/build/Pier.js","webpack:///./src/rail/Layout.ts","webpack:///./build/models.json","webpack:///./src/model/Model.ts","webpack:///./src/rail/FrontierManager.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnDA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnFA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA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A,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA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AAEH;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,0BAA0B;AAC1B,0BAA0B;AAC1B,0BAA0B;AAC1B;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;A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A;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,CAAC;;AAED;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF,CAAC;;AAED;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA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AAEA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,qCAAqC,OAAO;;AAE5C;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,qCAAqC,OAAO;;AAE5C;AACA;AACA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA,iDAAiD,OAAO;;AAExD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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AEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,qBAAqB;AACrB,qBAAqB;;AAErB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6DAA6D;;AAE7D;AACA;;AAEA;;AAEA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;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EA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,0CAA0C,OAAO;;AAEjD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA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ACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,yBAAyB,yBAAyB;;AAElD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,cAAc,qBAAqB;;AAEnC;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,cAAc,qBAAqB;;AAEnC;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,cAAc,sBAAsB;;AAEpC,eAAe,qBAAqB;;AAEpC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,cAAc,sBAAsB;;AAEpC,eAAe,qBAAqB;;AAEpC;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,aAAa,sBAAsB;;AAEnC;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;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;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,oBAAoB,eAAe;;AAEnC;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,aAAa,eAAe;;AAE5B;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,iBAAiB;;AAEjB;;AAEA,oCAAoC;AACpC;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,iBAAiB;;AAEjB;;AAEA,yBAAyB;;AAEzB;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,iBAAiB;;AAEjB;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,oCAAoC;AACpC;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,iBAAiB;;AA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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF,CAAC;;AAED;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,qCAAqC,QAAQ;;AAE7C;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,GAAG;;AAEH,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA,gBAAgB,qBAAqB;;AAErC;;AAEA;;AAEA,gBAAgB,eAAe;;AAE/B;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AA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E;AACF;;AAEA;;AAEA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA;;AAEA,CAAC;;AAED;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA;;AAEA,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;;AAEA,GAAG;AACH;;AAEA;;AAEA;AACA;;AAEA,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;;AAEA,EAAE;AACF;;AAEA;;AAEA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;;AAEA;;AAEA,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;AACA;;AAEA;;AAEA,GAAG;AACH;;AAEA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;;AAEA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;;AAEA;;AAEA;AACA;;AAEA,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;;AAEA,EAAE;AACF;;AAEA;;AAEA;;AAEA,CAAC;;AAED;;AAEA;AACA;;AAEA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;;AAEA;;AAEA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,CAAC;;AAED;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,CAAC;;AAED;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,EAAE;AACF;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEQ;;;;;;;;ACph5CR;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvFA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxDA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACZA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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;AAEA,IAAI;;AAEJ;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,oCAAoC;AACpC;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,+CAA+C;;AAE/C;;AAEA;;AAEA;;AAEA;AACA,8CAA8C;;AAE9C;;AAEA;;AAEA;;AAEA;AACA,4CAA4C;;AAE5C;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;AACA;;AAEA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA;;AAEA,CAAC;;;;;;;;;ACphCD;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7JA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;AC5CA;IAAA;QACY,cAAS,GAAmB,IAAI,CAAC;QACjC,WAAM,GAAc,IAAI,GAAG,EAAQ,CAAC;IAqChD,CAAC;IAnCG,IAAI,QAAQ;QACR,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,IAAI,QAAQ,CAAC,EAAkB;QAC3B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACxB,CAAC;IAED,IAAI,KAAK;QACL,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAGO,mBAAmB,CAAC,GAAQ;IAEpC,CAAC;IAEO,aAAa,CAAC,IAAU;QACpC,wGAAwG;QAChG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC;IAEM,GAAG,CAAC,IAAU;QACjB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACrB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAEO,gBAAgB,CAAC,IAAU;QAC/B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAEM,MAAM,CAAC,IAAU;QACpB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;CACJ;AAvCD,wBAuCC;;;;;;;ACnDD,kBAAkB,SAAS,kzxCAAkzxC,uGAAuG,wBAAwB,q7NAAq7N,sGAAsG,i5bAAi5b,eAAe,8vfAA8vf,uGAAuG,gBAAgB,gwKAAgwK,sGAAsG,k0HAAk0H,gBAAgB,iupBAAiupB,uGAAuG,kBAAkB,qBAAqB,sGAAsG,q9pCAAq9pC,eAAe,mvJAAmvJ,qGAAqG,eAAe,02EAA02E,oGAAoG,i6EAAi6E,eAAe,2jCAA2jC,oGAAoG,woHAAwoH,uBAAuB,qtIAAqtI,sGAAsG,42RAA42R,wBAAwB,i9HAAi9H,sGAAsG,ygQAAygQ,uBAAuB,27MAA27M,sGAAsG,2wOAA2wO,kBAAkB,q8oBAAq8oB,uGAAuG,8/2CAA8/2C,cAAc,mrBAAmrB,mGAAmG,6gCAA6gC,gBAAgB,6zLAA6zL,sGAAsG,syaAAsya,gBAAgB,0jDAA0jD,mGAAmG,i4FAAi4F,gBAAgB,4pLAA4pL,sGAAsG,6lYAA6lY,sBAAsB,09DAA09D,mGAAmG,27EAA27E,iBAAiB,wm2BAAwm2B,uGAAuG,sBAAsB,g4CAAg4C,mGAAmG,+/FAA+/F,sBAAsB,irLAAirL,sGAAsG,yxbAAyxb,kBAAkB,oqTAAoqT,sGAAsG,o12BAAo12B,eAAe,qBAAqB,sGAAsG,kwyBAAkwyB,iBAAiB,6rGAA6rG,qGAAqG,4hKAA4hK,gBAAgB,4zJAA4zJ,sGAAsG,shgBAAshgB,eAAe,kxEAAkxE,oGAAoG,u1EAAu1E,eAAe,muJAAmuJ,qGAAqG,WAAW,2UAA2U,iGAAiG,SAAS,u8DAAu8D,qGAAqG,06KAA06K,iBAAiB,kvFAAkvF,qGAAqG,0hKAA0hK,yBAAyB,s5BAAs5B,mGAAmG,upDAAupD,YAAY,mjkCAAmjkC,uGAAuG,gBAAgB,s6/BAAs6/B,sGAAsG,8uPAA8uP,wBAAwB,24JAA24J,sGAAsG,mkUAAmkU,gBAAgB,u0WAAu0W,sGAAsG,2gTAA2gT,SAAS,ogCAAogC,mGAAmG,ytBAAytB,cAAc,qBAAqB,sGAAsG,2ugBAA2ugB,cAAc,qBAAqB,sGAAsG,km0BAAkm0B,YAAY,+jhEAA+jhE,uGAAuG,eAAe,qBAAqB,oGAAoG,utJAAutJ,iBAAiB,68RAA68R,sGAAsG,muOAAmuO,kBAAkB,25LAA25L,sGAAsG,m+VAAm+V,gBAAgB,mkSAAmkS,uGAAuG,sBAAsB,y2SAAy2S,sGAAsG,0sUAA0sU,uBAAuB,kmHAAkmH,sGAAsG,qmOAAqmO,uBAAuB,mqDAAmqD,oGAAoG,i5GAAi5G,uBAAuB,wwcAAwwc,sGAAsG,2y+BAA2y+B,cAAc,sn0BAAsn0B,uGAAuG,uBAAuB,qhfAAqhf,sGAAsG,4gkCAA4gkC,cAAc,sxyBAAsxyB,wG;;;;;;;;;ACA3zk6B,qCAA+B;AAE/B,8CAA8C;AAE9C,sBAAsB;AACtB,qBAAqB;AACrB,0BAA0B;AAC1B,8BAA8B;AAC9B,cAAc;AACd,8BAA8B;AAC9B,KAAK;AAEL;IACI,kCAAkC;IAC3B,MAAM,CAAC,WAAW,CAAC,CAAQ;QAC9B,MAAM,CAAC,GAAG,EAAE,CAAC;QACb,MAAM,CAAC,GAAG,EAAE,CAAC;QACb,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAEjB,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QACjC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QAEjC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;QAEjB,8CAA8C;QAC9C,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC;IAES,SAAS,CAAC,IAAgB,EAAE,MAAW;QAC7C,eAAe;QACf,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAEpD,uBAAuB;QACvB,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC;QACvC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;CACJ;AA1BD,sBA0BC;AAED,eAAuB,SAAQ,KAAK;IAChC,YAA2B,MAAoB,EAAU,IAAU;QAC/D,KAAK,EAAE,CAAC;QADe,WAAM,GAAN,MAAM,CAAc;QAAU,SAAI,GAAJ,IAAI,CAAM;QAE/D,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CACf,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC,CAClC,CAAC;IACN,CAAC;IAES,iBAAiB,CAAC,IAAgB,EAAE,IAAU;QACpD,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5C,6CAA6C;QAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC1B,CAAC;IACL,CAAC;IAEM,UAAU,CAAC,KAAkB;QAChC,IAAI,GAAG,GAAG,IAAI,KAAK,CAAC,iBAAiB,EAAE,CAAC;QACxC,IAAI,GAAG,GAAG,IAAI,KAAK,CAAC,cAAc,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7C,IAAI,GAAG,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACnC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAChE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CACpB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CACf,CAAC;IACN,CAAC;IAEM,eAAe,CAAC,KAAkB;QACrC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CACpB,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAClB,CAAC;IACN,CAAC;CACJ;AAjCD,8BAiCC;AAED,mBAA2B,SAAQ,SAAS;IACxC,YAAY,IAAU;QAClB,KAAK,CAAC,CAAC,2BAAY,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;CACJ;AAJD,sCAIC;AAED,gBAAwB,SAAQ,SAAS;IACrC,YAAY,IAAU;QAClB,KAAK,CAAC,CAAC,2BAAY,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;CACJ;AAJD,gCAIC;AACD,gBAAwB,SAAQ,SAAS;IACrC,YAAY,IAAU;QAClB,KAAK,CAAC,CAAC,2BAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;CACJ;AAJD,gCAIC;AACD,kBAA0B,SAAQ,SAAS;IACvC,YAAY,IAAU;QAClB,IAAI,MAAM,GAAG,EAAE;QACf,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACrC,MAAM,GAAG,CAAC,aAAa,EAAE,aAAa,EAAE,cAAc,CAAC;QAC3D,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,GAAG,CAAC,aAAa,EAAE,aAAa,EAAE,cAAc,CAAC;QAC3D,CAAC;QACD,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,2BAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAC/D,CAAC;CACJ;AAVD,oCAUC;AACD;;;;;;;;;;;;;EAaE;;;;;;;;;;ACnHF,yCAA2E;AAM3E;IAAA;QACY,cAAS,GAA4B,IAAI,CAAC;QAC1C,eAAU,GAAG,CAAC,IAAI,aAAG,CAAC,eAAK,CAAC,IAAI,EAAE,EAAE,aAAG,CAAC,IAAI,EAAE,cAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAqDvE,CAAC;IAnDG,IAAI,QAAQ;QACR,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,IAAI,QAAQ,CAAC,EAA2B;QACpC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACxB,CAAC;IAED,IAAW,SAAS;QAChB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACrD,CAAC;IAEO,sBAAsB;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YACzD,CAAC;QACL,CAAC;IACL,CAAC;IAEM,UAAU;QACb,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACrD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAEhC,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAClC,CAAC;IAEO,aAAa,CAAC,GAAQ;QAC1B,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,GAAQ;QAClB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAClC,CAAC;IAEM,SAAS,CAAC,GAAQ;QACrB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAClC,CAAC;CACJ;AAvDD,0CAuDC","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1f49af59cc7524ddd874","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Pole_1 = require(\"./Pole\");\n/**\n * レールの端点を表す．\n * 変換としては，回転を行ったのち平行移動を行う．\n */\nclass End {\n    constructor(point, dir, pole) {\n        this.point = point;\n        this.dir = dir;\n        this.pole = pole;\n    }\n    static of(point, dir, pole) {\n        return new this(point, dir, pole);\n    }\n    static plus(point, dir) {\n        return new this(point, dir, Pole_1.Pole.Plus);\n    }\n    static minus(point, dir) {\n        return new this(point, dir, Pole_1.Pole.Minus);\n    }\n    /**\n     * 2つのレールの端点として見たとき，カチっとはまるかどうか\n     * @param other もう片方の端点\n     */\n    match(other) {\n        return this.equal(other.opposite());\n    }\n    opposite() {\n        return End.of(this.point, this.dir.opposite(), this.pole.opposite());\n    }\n    /**\n     * thisが意味する座標変換を行う．つまり，ローカルからグローバル\n     * @param target ローカル座標\n     */\n    apply(local) {\n        return End.of(this.point.apply(this.dir.apply(local.point)), this.dir.apply(local.dir), this.pole.apply(local.pole));\n    }\n    equal(other) {\n        return this.point.equal(other.point) &&\n            this.dir.equal(other.dir) &&\n            this.pole.equal(other.pole);\n    }\n    valueOf() {\n        return this.point.valueOf() + \",\" + this.dir.valueOf() + \",\" + this.pole.valueOf();\n    }\n    toString() {\n        return this.valueOf();\n    }\n}\nexports.End = End;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../librail/build/End.js\n// module id = 0\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Expresses a point in the `Rot45' coordinate system.\n * Rot45 has four basis vectors (➡️, ↗️, ⬆️, ↖️), and its coeffcients are integers.\n * the values have no unit.\n */\nclass Rot {\n    constructor(a, b = 0, c = 0, d = 0) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n    }\n    static zero() {\n        return new this(0, 0, 0, 0);\n    }\n    static of(a, b = 0, c = 0, d = 0) {\n        return new this(a, b, c, d);\n    }\n    toReal() {\n        return [this.a + Math.SQRT1_2 * (this.b - this.d),\n            this.c + Math.SQRT1_2 * (this.b + this.d)];\n    }\n    add(that) {\n        return new Rot(this.a + that.a, this.b + that.b, this.c + that.c, this.d + that.d);\n    }\n    sub(that) {\n        return this.add(that.neg());\n    }\n    /**\n     * negate the point, rotate 180 degree around the origin\n     */\n    neg() {\n        return new Rot(-this.a, -this.b, -this.c, -this.d);\n    }\n    mul(that) {\n        return new Rot(this.a * that.a - this.b * that.d - this.c * that.c - this.d * that.b, this.a * that.b + this.b * that.a - this.c * that.d - this.d * that.c, this.a * that.c + this.b * that.b + this.c * that.a - this.d * that.d, this.a * that.d + this.b * that.c + this.c * that.b + this.d * that.a);\n    }\n    /**\n     * apply transform operation\n     * @param target the operand\n     */\n    apply(target) {\n        return this.add(target);\n    }\n    hasEffect() {\n        return !this.isZero();\n    }\n    isZero() {\n        return this.a === 0 && this.b === 0 && this.c === 0 && this.d === 0;\n    }\n    equal(other) {\n        return this.a === other.a &&\n            this.b === other.b &&\n            this.c === other.c &&\n            this.d === other.d;\n    }\n    stringifyWithSign(n) {\n        if (n < 0) {\n            return n.toString();\n        }\n        else {\n            return \"+\" + n.toString();\n        }\n    }\n    valueOf() {\n        var s = this.a.toString();\n        if (this.b === 0 && this.c === 0 && this.d === 0) {\n            return s;\n        }\n        s += this.stringifyWithSign(this.b);\n        if (this.c === 0 && this.d === 0) {\n            return s;\n        }\n        s += this.stringifyWithSign(this.c);\n        if (this.d === 0) {\n            return s;\n        }\n        s += this.stringifyWithSign(this.d);\n        return s;\n    }\n}\nexports.Rot = Rot;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../librail/build/Rot.js\n// module id = 1\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Rot_1 = require(\"./Rot\");\nclass Point {\n    /**\n     * @param single 単線\n     * @param double 複線\n     * @param up 段差，1はミニ橋脚の高さ，4はブロック橋脚の高さ\n     */\n    constructor(single, double, up) {\n        this.single = single;\n        this.double = double;\n        this.up = up;\n    }\n    static zero() {\n        return new Point(Rot_1.Rot.zero(), Rot_1.Rot.zero(), 0);\n    }\n    static of(s, d = Rot_1.Rot.zero(), u = 0) {\n        return new Point(s, d, u);\n    }\n    // blenderの世界からthree.jsの世界のベクトルに移す\n    // なのでx軸周りで回転している\n    /*\n        public toVector3(): Vector3 {\n            const SINGLE = 54;\n            const DOUBLE = 60;\n            const HEIGHT = 66 / 4;\n    \n            const [sx, sy] = this.single.toReal();\n            const [dx, dy] = this.double.toReal();\n    \n            return new Vector3(\n                SINGLE * sx + DOUBLE * dx,\n                HEIGHT * this.up,\n                -(SINGLE * sy + DOUBLE * dy)\n            )\n        }\n    */\n    add(other) {\n        return new Point(this.single.add(other.single), this.double.add(other.double), this.up + other.up);\n    }\n    sub(other) {\n        return this.add(other.neg());\n    }\n    neg() {\n        return new Point(this.single.neg(), this.double.neg(), -this.up);\n    }\n    apply(target) {\n        return this.add(target);\n    }\n    equal(other) {\n        return this.single.equal(other.single) &&\n            this.double.equal(other.double) &&\n            this.up === other.up;\n    }\n    hasEffect() {\n        return !this.isZero();\n    }\n    isZero() {\n        return this.single.isZero() && this.double.isZero() && this.up === 0;\n    }\n    valueOf() {\n        return this.single.valueOf() + \":\" + this.double.valueOf() + \":\" + this.up.toString();\n    }\n}\nexports.Point = Point;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../librail/build/Point.js\n// module id = 2\n// module chunks = 0","// Polyfills\n\nif ( Number.EPSILON === undefined ) {\n\n\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n}\n\nif ( Number.isInteger === undefined ) {\n\n\t// Missing in IE\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\tNumber.isInteger = function ( value ) {\n\n\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t};\n\n}\n\n//\n\nif ( Math.sign === undefined ) {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\tMath.sign = function ( x ) {\n\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t};\n\n}\n\nif ( 'name' in Function.prototype === false ) {\n\n\t// Missing in IE\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\tget: function () {\n\n\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t}\n\n\t} );\n\n}\n\nif ( Object.assign === undefined ) {\n\n\t// Missing in IE\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t( function () {\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t} )();\n\n}\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nfunction EventDispatcher() {}\n\nObject.assign( EventDispatcher.prototype, {\n\n\taddEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t},\n\n\thasEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tvar listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t},\n\n\tremoveEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tdispatchEvent: function ( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n} );\n\nvar REVISION = '89';\nvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\nvar CullFaceNone = 0;\nvar CullFaceBack = 1;\nvar CullFaceFront = 2;\nvar CullFaceFrontBack = 3;\nvar FrontFaceDirectionCW = 0;\nvar FrontFaceDirectionCCW = 1;\nvar BasicShadowMap = 0;\nvar PCFShadowMap = 1;\nvar PCFSoftShadowMap = 2;\nvar FrontSide = 0;\nvar BackSide = 1;\nvar DoubleSide = 2;\nvar FlatShading = 1;\nvar SmoothShading = 2;\nvar NoColors = 0;\nvar FaceColors = 1;\nvar VertexColors = 2;\nvar NoBlending = 0;\nvar NormalBlending = 1;\nvar AdditiveBlending = 2;\nvar SubtractiveBlending = 3;\nvar MultiplyBlending = 4;\nvar CustomBlending = 5;\nvar AddEquation = 100;\nvar SubtractEquation = 101;\nvar ReverseSubtractEquation = 102;\nvar MinEquation = 103;\nvar MaxEquation = 104;\nvar ZeroFactor = 200;\nvar OneFactor = 201;\nvar SrcColorFactor = 202;\nvar OneMinusSrcColorFactor = 203;\nvar SrcAlphaFactor = 204;\nvar OneMinusSrcAlphaFactor = 205;\nvar DstAlphaFactor = 206;\nvar OneMinusDstAlphaFactor = 207;\nvar DstColorFactor = 208;\nvar OneMinusDstColorFactor = 209;\nvar SrcAlphaSaturateFactor = 210;\nvar NeverDepth = 0;\nvar AlwaysDepth = 1;\nvar LessDepth = 2;\nvar LessEqualDepth = 3;\nvar EqualDepth = 4;\nvar GreaterEqualDepth = 5;\nvar GreaterDepth = 6;\nvar NotEqualDepth = 7;\nvar MultiplyOperation = 0;\nvar MixOperation = 1;\nvar AddOperation = 2;\nvar NoToneMapping = 0;\nvar LinearToneMapping = 1;\nvar ReinhardToneMapping = 2;\nvar Uncharted2ToneMapping = 3;\nvar CineonToneMapping = 4;\nvar UVMapping = 300;\nvar CubeReflectionMapping = 301;\nvar CubeRefractionMapping = 302;\nvar EquirectangularReflectionMapping = 303;\nvar EquirectangularRefractionMapping = 304;\nvar SphericalReflectionMapping = 305;\nvar CubeUVReflectionMapping = 306;\nvar CubeUVRefractionMapping = 307;\nvar RepeatWrapping = 1000;\nvar ClampToEdgeWrapping = 1001;\nvar MirroredRepeatWrapping = 1002;\nvar NearestFilter = 1003;\nvar NearestMipMapNearestFilter = 1004;\nvar NearestMipMapLinearFilter = 1005;\nvar LinearFilter = 1006;\nvar LinearMipMapNearestFilter = 1007;\nvar LinearMipMapLinearFilter = 1008;\nvar UnsignedByteType = 1009;\nvar ByteType = 1010;\nvar ShortType = 1011;\nvar UnsignedShortType = 1012;\nvar IntType = 1013;\nvar UnsignedIntType = 1014;\nvar FloatType = 1015;\nvar HalfFloatType = 1016;\nvar UnsignedShort4444Type = 1017;\nvar UnsignedShort5551Type = 1018;\nvar UnsignedShort565Type = 1019;\nvar UnsignedInt248Type = 1020;\nvar AlphaFormat = 1021;\nvar RGBFormat = 1022;\nvar RGBAFormat = 1023;\nvar LuminanceFormat = 1024;\nvar LuminanceAlphaFormat = 1025;\nvar RGBEFormat = RGBAFormat;\nvar DepthFormat = 1026;\nvar DepthStencilFormat = 1027;\nvar RGB_S3TC_DXT1_Format = 2001;\nvar RGBA_S3TC_DXT1_Format = 2002;\nvar RGBA_S3TC_DXT3_Format = 2003;\nvar RGBA_S3TC_DXT5_Format = 2004;\nvar RGB_PVRTC_4BPPV1_Format = 2100;\nvar RGB_PVRTC_2BPPV1_Format = 2101;\nvar RGBA_PVRTC_4BPPV1_Format = 2102;\nvar RGBA_PVRTC_2BPPV1_Format = 2103;\nvar RGB_ETC1_Format = 2151;\nvar LoopOnce = 2200;\nvar LoopRepeat = 2201;\nvar LoopPingPong = 2202;\nvar InterpolateDiscrete = 2300;\nvar InterpolateLinear = 2301;\nvar InterpolateSmooth = 2302;\nvar ZeroCurvatureEnding = 2400;\nvar ZeroSlopeEnding = 2401;\nvar WrapAroundEnding = 2402;\nvar TrianglesDrawMode = 0;\nvar TriangleStripDrawMode = 1;\nvar TriangleFanDrawMode = 2;\nvar LinearEncoding = 3000;\nvar sRGBEncoding = 3001;\nvar GammaEncoding = 3007;\nvar RGBEEncoding = 3002;\nvar LogLuvEncoding = 3003;\nvar RGBM7Encoding = 3004;\nvar RGBM16Encoding = 3005;\nvar RGBDEncoding = 3006;\nvar BasicDepthPacking = 3200;\nvar RGBADepthPacking = 3201;\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _Math = {\n\n\tDEG2RAD: Math.PI / 180,\n\tRAD2DEG: 180 / Math.PI,\n\n\tgenerateUUID: ( function () {\n\n\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\tvar lut = [];\n\n\t\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t\tlut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 ).toUpperCase();\n\n\t\t}\n\n\t\treturn function () {\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\treturn lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\tlut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\tlut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +\n\t\t\t\tlut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];\n\n\t\t};\n\n\t} )(),\n\n\tclamp: function ( value, min, max ) {\n\n\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t},\n\n\t// compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\teuclideanModulo: function ( n, m ) {\n\n\t\treturn ( ( n % m ) + m ) % m;\n\n\t},\n\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t},\n\n\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\tlerp: function ( x, y, t ) {\n\n\t\treturn ( 1 - t ) * x + t * y;\n\n\t},\n\n\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\tsmoothstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * ( 3 - 2 * x );\n\n\t},\n\n\tsmootherstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t},\n\n\t// Random integer from <low, high> interval\n\n\trandInt: function ( low, high ) {\n\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t},\n\n\t// Random float from <low, high> interval\n\n\trandFloat: function ( low, high ) {\n\n\t\treturn low + Math.random() * ( high - low );\n\n\t},\n\n\t// Random float from <-range/2, range/2> interval\n\n\trandFloatSpread: function ( range ) {\n\n\t\treturn range * ( 0.5 - Math.random() );\n\n\t},\n\n\tdegToRad: function ( degrees ) {\n\n\t\treturn degrees * _Math.DEG2RAD;\n\n\t},\n\n\tradToDeg: function ( radians ) {\n\n\t\treturn radians * _Math.RAD2DEG;\n\n\t},\n\n\tisPowerOfTwo: function ( value ) {\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t},\n\n\tceilPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t},\n\n\tfloorPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nfunction Vector2( x, y ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\n}\n\nObject.defineProperties( Vector2.prototype, {\n\n\t\"width\": {\n\n\t\tget: function () {\n\n\t\t\treturn this.x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.x = value;\n\n\t\t}\n\n\t},\n\n\t\"height\": {\n\n\t\tget: function () {\n\n\t\t\treturn this.y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.y = value;\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Vector2.prototype, {\n\n\tisVector2: true,\n\n\tset: function ( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x, y = this.y;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min = new Vector2();\n\t\tvar max = new Vector2();\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tmin.set( minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t},\n\n\tmanhattanLength: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t},\n\n\tangle: function () {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\treturn angle;\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t},\n\n\tmanhattanDistanceTo: function ( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t},\n\n\trotateAround: function ( center, angle ) {\n\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tvar x = this.x - center.x;\n\t\tvar y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Matrix4() {\n\n\tthis.elements = [\n\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1\n\n\t];\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n}\n\nObject.assign( Matrix4.prototype, {\n\n\tisMatrix4: true,\n\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t},\n\n\tcopyPosition: function ( m ) {\n\n\t\tvar te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\textractRotation: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function extractRotation( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeRotationFromEuler: function ( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\tvar te = this.elements;\n\n\t\tvar x = q._x, y = q._y, z = q._z, w = q._w;\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\tte[ 4 ] = xy - wz;\n\t\tte[ 8 ] = xz + wy;\n\n\t\tte[ 1 ] = xy + wz;\n\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\tte[ 9 ] = yz - wx;\n\n\t\tte[ 2 ] = xz - wy;\n\t\tte[ 6 ] = yz + wx;\n\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tlookAt: function () {\n\n\t\tvar x = new Vector3();\n\t\tvar y = new Vector3();\n\t\tvar z = new Vector3();\n\n\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tz.subVectors( eye, target );\n\n\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\t// eye and target are in the same position\n\n\t\t\t\tz.z = 1;\n\n\t\t\t}\n\n\t\t\tz.normalize();\n\t\t\tx.crossVectors( up, z );\n\n\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\t// up and z are parallel\n\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\tz.x += 0.0001;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz.z += 0.0001;\n\n\t\t\t\t}\n\n\t\t\t\tz.normalize();\n\t\t\t\tx.crossVectors( up, z );\n\n\t\t\t}\n\n\t\t\tx.normalize();\n\t\t\ty.crossVectors( z, x );\n\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmultiply: function ( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tpremultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tapplyToBufferAttribute: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn attribute;\n\n\t\t};\n\n\t}(),\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar te = this.elements;\n\t\tvar tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tsetPosition: function ( v ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 12 ] = v.x;\n\t\tte[ 13 ] = v.y;\n\t\tte[ 14 ] = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tvar te = this.elements,\n\t\t\tme = m.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\n\t\t}\n\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\tscale: function ( v ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t},\n\n\tgetMaxScaleOnAxis: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t},\n\n\tmakeTranslation: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationX: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationY: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationZ: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tvar c = Math.cos( angle );\n\t\tvar s = Math.sin( angle );\n\t\tvar t = 1 - c;\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\tvar tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\t return this;\n\n\t},\n\n\tmakeScale: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeShear: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, y, z, 0,\n\t\t\tx, 1, z, 0,\n\t\t\tx, y, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tcompose: function ( position, quaternion, scale ) {\n\n\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\tthis.scale( scale );\n\t\tthis.setPosition( position );\n\n\t\treturn this;\n\n\t},\n\n\tdecompose: function () {\n\n\t\tvar vector = new Vector3();\n\t\tvar matrix = new Matrix4();\n\n\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) sx = - sx;\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\t\t\tmatrix.copy( this );\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\tif ( far === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\t\tvar x = 2 * near / ( right - left );\n\t\tvar y = 2 * near / ( top - bottom );\n\n\t\tvar a = ( right + left ) / ( right - left );\n\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\tvar c = - ( far + near ) / ( far - near );\n\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t},\n\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar w = 1.0 / ( right - left );\n\t\tvar h = 1.0 / ( top - bottom );\n\t\tvar p = 1.0 / ( far - near );\n\n\t\tvar x = ( right + left ) * w;\n\t\tvar y = ( top + bottom ) * h;\n\t\tvar z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nfunction Quaternion( x, y, z, w ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._w = ( w !== undefined ) ? w : 1;\n\n}\n\nObject.assign( Quaternion, {\n\n\tslerp: function ( qa, qb, qm, t ) {\n\n\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t},\n\n\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tvar s = 1 - t,\n\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tvar tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n} );\n\nObject.defineProperties( Quaternion.prototype, {\n\n\tx: {\n\n\t\tget: function () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\ty: {\n\n\t\tget: function () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tz: {\n\n\t\tget: function () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tw: {\n\n\t\tget: function () {\n\n\t\t\treturn this._w;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._w = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Quaternion.prototype, {\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t},\n\n\tcopy: function ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromEuler: function ( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tvar cos = Math.cos;\n\t\tvar sin = Math.sin;\n\n\t\tvar c1 = cos( x / 2 );\n\t\tvar c2 = cos( y / 2 );\n\t\tvar c3 = cos( z / 2 );\n\n\t\tvar s1 = sin( x / 2 );\n\t\tvar s2 = sin( y / 2 );\n\t\tvar s3 = sin( z / 2 );\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t}\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33,\n\t\t\ts;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromUnitVectors: function () {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar v1 = new Vector3();\n\t\tvar r;\n\n\t\tvar EPS = 0.000001;\n\n\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t}\n\n\t\t\tthis._x = v1.x;\n\t\t\tthis._y = v1.y;\n\t\t\tthis._z = v1.z;\n\t\t\tthis._w = r;\n\n\t\t\treturn this.normalize();\n\n\t\t};\n\n\t}(),\n\n\tinverse: function () {\n\n\t\treturn this.conjugate().normalize();\n\n\t},\n\n\tconjugate: function () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t},\n\n\tpremultiply: function ( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t},\n\n\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tslerp: function ( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Vector3( x, y, z ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\n}\n\nObject.assign( Vector3.prototype, {\n\n\tisVector3: true,\n\n\tset: function ( x, y, z ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVectors: function ( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyEuler: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function applyEuler( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyAxisAngle: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tvar ix = qw * x + qy * z - qz * y;\n\t\tvar iy = qw * y + qz * x - qx * z;\n\t\tvar iz = qw * z + qx * y - qy * x;\n\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t},\n\n\tproject: function () {\n\n\t\tvar matrix = new Matrix4();\n\n\t\treturn function project( camera ) {\n\n\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t};\n\n\t}(),\n\n\tunproject: function () {\n\n\t\tvar matrix = new Matrix4();\n\n\t\treturn function unproject( camera ) {\n\n\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t};\n\n\t}(),\n\n\ttransformDirection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min = new Vector3();\n\t\tvar max = new Vector3();\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t},\n\n\t// TODO lengthSquared?\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t},\n\n\tmanhattanLength: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tcross: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\treturn this.crossVectors( this, v );\n\n\t},\n\n\tcrossVectors: function ( a, b ) {\n\n\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t},\n\n\tprojectOnVector: function ( vector ) {\n\n\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n\t},\n\n\tprojectOnPlane: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( v1 );\n\n\t\t};\n\n\t}(),\n\n\treflect: function () {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function reflect( normal ) {\n\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t};\n\n\t}(),\n\n\tangleTo: function ( v ) {\n\n\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t},\n\n\tmanhattanDistanceTo: function ( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t},\n\n\tsetFromSpherical: function ( s ) {\n\n\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCylindrical: function ( c ) {\n\n\t\tthis.x = c.radius * Math.sin( c.theta );\n\t\tthis.y = c.y;\n\t\tthis.z = c.radius * Math.cos( c.theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixPosition: function ( m ) {\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixScale: function ( m ) {\n\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n * @author tschw\n */\n\nfunction Matrix3() {\n\n\tthis.elements = [\n\n\t\t1, 0, 0,\n\t\t0, 1, 0,\n\t\t0, 0, 1\n\n\t];\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n}\n\nObject.assign( Matrix3.prototype, {\n\n\tisMatrix3: true,\n\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix4: function ( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tapplyToBufferAttribute: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn attribute;\n\n\t\t};\n\n\t}(),\n\n\tmultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tpremultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t},\n\n\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\tif ( matrix && matrix.isMatrix4 ) {\n\n\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\n\n\t\t}\n\n\t\tvar me = matrix.elements,\n\t\t\tte = this.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\n\t\t}\n\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar tmp, m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t},\n\n\ttransposeIntoArray: function ( r ) {\n\n\t\tvar m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tvar c = Math.cos( rotation );\n\t\tvar s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t},\n\n\tscale: function ( sx, sy ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\treturn this;\n\n\t},\n\n\trotate: function ( theta ) {\n\n\t\tvar c = Math.cos( theta );\n\t\tvar s = Math.sin( theta );\n\n\t\tvar te = this.elements;\n\n\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\tte[ 0 ] = c * a11 + s * a21;\n\t\tte[ 3 ] = c * a12 + s * a22;\n\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( tx, ty ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nvar textureId = 0;\n\nfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\n\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\tthis.mipmaps = [];\n\n\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\tthis.format = format !== undefined ? format : RGBAFormat;\n\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\tthis.offset = new Vector2( 0, 0 );\n\tthis.repeat = new Vector2( 1, 1 );\n\tthis.center = new Vector2( 0, 0 );\n\tthis.rotation = 0;\n\n\tthis.matrixAutoUpdate = true;\n\tthis.matrix = new Matrix3();\n\n\tthis.generateMipmaps = true;\n\tthis.premultiplyAlpha = false;\n\tthis.flipY = true;\n\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t//\n\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\tthis.version = 0;\n\tthis.onUpdate = null;\n\n}\n\nTexture.DEFAULT_IMAGE = undefined;\nTexture.DEFAULT_MAPPING = UVMapping;\n\nTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Texture,\n\n\tisTexture: true,\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.image = source.image;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tfunction getDataURL( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = image.width;\n\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY\n\t\t};\n\n\t\tif ( this.image !== undefined ) {\n\n\t\t\t// TODO: Move to THREE.Image\n\n\t\t\tvar image = this.image;\n\n\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\toutput.image = image.uuid;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t},\n\n\ttransformUv: function ( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t}\n\n} );\n\nObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\tset: function ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n} );\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Vector4( x, y, z, w ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\tthis.w = ( w !== undefined ) ? w : 1;\n\n}\n\nObject.assign( Vector4.prototype, {\n\n\tisVector4: true,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new Vector4();\n\t\t\t\tmax = new Vector4();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t},\n\n\tmanhattanLength: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n * @author Marius Kintel / https://github.com/kintel\n */\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nfunction WebGLRenderTarget( width, height, options ) {\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.width = width;\n\tthis.height = height;\n\n\tthis.scissor = new Vector4( 0, 0, width, height );\n\tthis.scissorTest = false;\n\n\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\toptions = options || {};\n\n\tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n}\n\nWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: WebGLRenderTarget,\n\n\tisWebGLRenderTarget: true,\n\n\tsetSize: function ( width, height ) {\n\n\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com\n */\n\nfunction WebGLRenderTargetCube( width, height, options ) {\n\n\tWebGLRenderTarget.call( this, width, height, options );\n\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\tthis.activeMipMapLevel = 0;\n\n}\n\nWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\nWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\nWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { data: data, width: width, height: height };\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\tthis.generateMipmaps = false;\n\tthis.flipY = false;\n\tthis.unpackAlignment = 1;\n\n}\n\nDataTexture.prototype = Object.create( Texture.prototype );\nDataTexture.prototype.constructor = DataTexture;\n\nDataTexture.prototype.isDataTexture = true;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\timages = images !== undefined ? images : [];\n\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.flipY = false;\n\n}\n\nCubeTexture.prototype = Object.create( Texture.prototype );\nCubeTexture.prototype.constructor = CubeTexture;\n\nCubeTexture.prototype.isCubeTexture = true;\n\nObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\tget: function () {\n\n\t\treturn this.image;\n\n\t},\n\n\tset: function ( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n} );\n\n/**\n * @author tschw\n *\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [renderer] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'renderer' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (renderer factorizations):\n *\n * .upload( gl, seq, values, renderer )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (renderer factorizations):\n *\n * .setValue( gl, name, value )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .set( gl, obj, prop )\n *\n * \t\tsets uniform from object and property with same name than uniform\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\nvar emptyTexture = new Texture();\nvar emptyCubeTexture = new CubeTexture();\n\n// --- Base for inner nodes (including the root) ---\n\nfunction UniformContainer() {\n\n\tthis.seq = [];\n\tthis.map = {};\n\n}\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nvar arrayCacheF32 = [];\nvar arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nvar mat4array = new Float32Array( 16 );\nvar mat3array = new Float32Array( 9 );\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten( array, nBlocks, blockSize ) {\n\n\tvar firstElem = array[ 0 ];\n\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t// unoptimized: ! isNaN( firstElem )\n\t// see http://jacksondunstan.com/articles/983\n\n\tvar n = nBlocks * blockSize,\n\t\tr = arrayCacheF32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Float32Array( n );\n\t\tarrayCacheF32[ n ] = r;\n\n\t}\n\n\tif ( nBlocks !== 0 ) {\n\n\t\tfirstElem.toArray( r, 0 );\n\n\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\toffset += blockSize;\n\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t}\n\n\t}\n\n\treturn r;\n\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits( renderer, n ) {\n\n\tvar r = arrayCacheI32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Int32Array( n );\n\t\tarrayCacheI32[ n ] = r;\n\n\t}\n\n\tfor ( var i = 0; i !== n; ++ i )\n\t\tr[ i ] = renderer.allocTextureUnit();\n\n\treturn r;\n\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValue1f( gl, v ) {\n\n\tgl.uniform1f( this.addr, v );\n\n}\n\nfunction setValue1i( gl, v ) {\n\n\tgl.uniform1i( this.addr, v );\n\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValue2fv( gl, v ) {\n\n\tif ( v.x === undefined ) {\n\n\t\tgl.uniform2fv( this.addr, v );\n\n\t} else {\n\n\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t}\n\n}\n\nfunction setValue3fv( gl, v ) {\n\n\tif ( v.x !== undefined ) {\n\n\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t} else if ( v.r !== undefined ) {\n\n\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t} else {\n\n\t\tgl.uniform3fv( this.addr, v );\n\n\t}\n\n}\n\nfunction setValue4fv( gl, v ) {\n\n\tif ( v.x === undefined ) {\n\n\t\tgl.uniform4fv( this.addr, v );\n\n\t} else {\n\n\t\t gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t}\n\n}\n\n// Single matrix (from flat array or MatrixN)\n\nfunction setValue2fm( gl, v ) {\n\n\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n}\n\nfunction setValue3fm( gl, v ) {\n\n\tif ( v.elements === undefined ) {\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t} else {\n\n\t\tmat3array.set( v.elements );\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t}\n\n}\n\nfunction setValue4fm( gl, v ) {\n\n\tif ( v.elements === undefined ) {\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t} else {\n\n\t\tmat4array.set( v.elements );\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t}\n\n}\n\n// Single texture (2D / Cube)\n\nfunction setValueT1( gl, v, renderer ) {\n\n\tvar unit = renderer.allocTextureUnit();\n\tgl.uniform1i( this.addr, unit );\n\trenderer.setTexture2D( v || emptyTexture, unit );\n\n}\n\nfunction setValueT6( gl, v, renderer ) {\n\n\tvar unit = renderer.allocTextureUnit();\n\tgl.uniform1i( this.addr, unit );\n\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n}\n\n// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\nfunction setValue2iv( gl, v ) {\n\n\tgl.uniform2iv( this.addr, v );\n\n}\n\nfunction setValue3iv( gl, v ) {\n\n\tgl.uniform3iv( this.addr, v );\n\n}\n\nfunction setValue4iv( gl, v ) {\n\n\tgl.uniform4iv( this.addr, v );\n\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t}\n\n}\n\n// Array of scalars\n\nfunction setValue1fv( gl, v ) {\n\n\tgl.uniform1fv( this.addr, v );\n\n}\nfunction setValue1iv( gl, v ) {\n\n\tgl.uniform1iv( this.addr, v );\n\n}\n\n// Array of vectors (flat or from THREE classes)\n\nfunction setValueV2a( gl, v ) {\n\n\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n}\n\nfunction setValueV3a( gl, v ) {\n\n\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n}\n\nfunction setValueV4a( gl, v ) {\n\n\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n}\n\n// Array of matrices (flat or from THREE clases)\n\nfunction setValueM2a( gl, v ) {\n\n\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n}\n\nfunction setValueM3a( gl, v ) {\n\n\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n}\n\nfunction setValueM4a( gl, v ) {\n\n\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n}\n\n// Array of textures (2D / Cube)\n\nfunction setValueT1a( gl, v, renderer ) {\n\n\tvar n = v.length,\n\t\tunits = allocTexUnits( renderer, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT6a( gl, v, renderer ) {\n\n\tvar n = v.length,\n\t\tunits = allocTexUnits( renderer, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t}\n\n}\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t}\n\n}\n\n// --- Uniform Classes ---\n\nfunction SingleUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.size = activeInfo.size;\n\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nfunction StructuredUniform( id ) {\n\n\tthis.id = id;\n\n\tUniformContainer.call( this ); // mix-in\n\n}\n\nStructuredUniform.prototype.setValue = function ( gl, value ) {\n\n\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t// are not allowed in structured uniforms.\n\n\tvar seq = this.seq;\n\n\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tvar u = seq[ i ];\n\t\tu.setValue( gl, value[ u.id ] );\n\n\t}\n\n};\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform( container, uniformObject ) {\n\n\tcontainer.seq.push( uniformObject );\n\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n}\n\nfunction parseUniform( activeInfo, addr, container ) {\n\n\tvar path = activeInfo.name,\n\t\tpathLength = path.length;\n\n\t// reset RegExp object, because of the early exit of a previous run\n\tRePathPart.lastIndex = 0;\n\n\tfor ( ; ; ) {\n\n\t\tvar match = RePathPart.exec( path ),\n\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\tid = match[ 1 ],\n\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\tsubscript = match[ 3 ];\n\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\tbreak;\n\n\t\t} else {\n\n\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\tif ( next === undefined ) {\n\n\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\taddUniform( container, next );\n\n\t\t\t}\n\n\t\t\tcontainer = next;\n\n\t\t}\n\n\t}\n\n}\n\n// Root Container\n\nfunction WebGLUniforms( gl, program, renderer ) {\n\n\tUniformContainer.call( this );\n\n\tthis.renderer = renderer;\n\n\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\tpath = info.name,\n\t\t\taddr = gl.getUniformLocation( program, path );\n\n\t\tparseUniform( info, addr, this );\n\n\t}\n\n}\n\nWebGLUniforms.prototype.setValue = function ( gl, name, value ) {\n\n\tvar u = this.map[ name ];\n\n\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n};\n\nWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\tvar v = object[ name ];\n\n\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n};\n\n\n// Static interface\n\nWebGLUniforms.upload = function ( gl, seq, values, renderer ) {\n\n\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tvar u = seq[ i ],\n\t\t\tv = values[ u.id ];\n\n\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t}\n\n\t}\n\n};\n\nWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\tvar r = [];\n\n\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tvar u = seq[ i ];\n\t\tif ( u.id in values ) r.push( u );\n\n\t}\n\n\treturn r;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nfunction Color( r, g, b ) {\n\n\tif ( g === undefined && b === undefined ) {\n\n\t\t// r is THREE.Color, hex or string\n\t\treturn this.set( r );\n\n\t}\n\n\treturn this.setRGB( r, g, b );\n\n}\n\nObject.assign( Color.prototype, {\n\n\tisColor: true,\n\n\tr: 1, g: 1, b: 1,\n\n\tset: function ( value ) {\n\n\t\tif ( value && value.isColor ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetHex: function ( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t},\n\n\tsetRGB: function ( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t},\n\n\tsetHSL: function () {\n\n\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\tif ( t < 0 ) t += 1;\n\t\t\tif ( t > 1 ) t -= 1;\n\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\treturn p;\n\n\t\t}\n\n\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = _Math.euclideanModulo( h, 1 );\n\t\t\ts = _Math.clamp( s, 0, 1 );\n\t\t\tl = _Math.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetStyle: function ( style ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tvar color;\n\t\t\tvar name = m[ 1 ];\n\t\t\tvar components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tvar hex = m[ 1 ];\n\t\t\tvar size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = ColorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t},\n\n\tcopy: function ( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t},\n\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\treturn this;\n\n\t},\n\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\treturn this;\n\n\t},\n\n\tconvertGammaToLinear: function () {\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tthis.r = r * r;\n\t\tthis.g = g * g;\n\t\tthis.b = b * b;\n\n\t\treturn this;\n\n\t},\n\n\tconvertLinearToGamma: function () {\n\n\t\tthis.r = Math.sqrt( this.r );\n\t\tthis.g = Math.sqrt( this.g );\n\t\tthis.b = Math.sqrt( this.b );\n\n\t\treturn this;\n\n\t},\n\n\tgetHex: function () {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t},\n\n\tgetHexString: function () {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t},\n\n\tgetHSL: function ( optionalTarget ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tvar max = Math.max( r, g, b );\n\t\tvar min = Math.min( r, g, b );\n\n\t\tvar hue, saturation;\n\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tvar delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\thsl.h = hue;\n\t\thsl.s = saturation;\n\t\thsl.l = lightness;\n\n\t\treturn hsl;\n\n\t},\n\n\tgetStyle: function () {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t},\n\n\toffsetHSL: function ( h, s, l ) {\n\n\t\tvar hsl = this.getHSL();\n\n\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t},\n\n\taddColors: function ( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\treturn this.getHex();\n\n\t}\n\n} );\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nvar UniformsLib = {\n\n\tcommon: {\n\n\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\topacity: { value: 1.0 },\n\n\t\tmap: { value: null },\n\t\tuvTransform: { value: new Matrix3() },\n\n\t\talphaMap: { value: null },\n\n\t},\n\n\tspecularmap: {\n\n\t\tspecularMap: { value: null },\n\n\t},\n\n\tenvmap: {\n\n\t\tenvMap: { value: null },\n\t\tflipEnvMap: { value: - 1 },\n\t\treflectivity: { value: 1.0 },\n\t\trefractionRatio: { value: 0.98 }\n\n\t},\n\n\taomap: {\n\n\t\taoMap: { value: null },\n\t\taoMapIntensity: { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\tlightMap: { value: null },\n\t\tlightMapIntensity: { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\temissiveMap: { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\tbumpMap: { value: null },\n\t\tbumpScale: { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\tnormalMap: { value: null },\n\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\tdisplacementMap: { value: null },\n\t\tdisplacementScale: { value: 1 },\n\t\tdisplacementBias: { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\troughnessMap: { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\tmetalnessMap: { value: null }\n\n\t},\n\n\tgradientmap: {\n\n\t\tgradientMap: { value: null }\n\n\t},\n\n\tfog: {\n\n\t\tfogDensity: { value: 0.00025 },\n\t\tfogNear: { value: 1 },\n\t\tfogFar: { value: 2000 },\n\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\tambientLightColor: { value: [] },\n\n\t\tdirectionalLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tcolor: {},\n\n\t\t\tshadow: {},\n\t\t\tshadowBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tdirectionalShadowMap: { value: [] },\n\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\tspotLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdirection: {},\n\t\t\tdistance: {},\n\t\t\tconeCos: {},\n\t\t\tpenumbraCos: {},\n\t\t\tdecay: {},\n\n\t\t\tshadow: {},\n\t\t\tshadowBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tspotShadowMap: { value: [] },\n\t\tspotShadowMatrix: { value: [] },\n\n\t\tpointLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdecay: {},\n\t\t\tdistance: {},\n\n\t\t\tshadow: {},\n\t\t\tshadowBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {},\n\t\t\tshadowCameraNear: {},\n\t\t\tshadowCameraFar: {}\n\t\t} },\n\n\t\tpointShadowMap: { value: [] },\n\t\tpointShadowMatrix: { value: [] },\n\n\t\themisphereLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tskyColor: {},\n\t\t\tgroundColor: {}\n\t\t} },\n\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\trectAreaLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\twidth: {},\n\t\t\theight: {}\n\t\t} }\n\n\t},\n\n\tpoints: {\n\n\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\topacity: { value: 1.0 },\n\t\tsize: { value: 1.0 },\n\t\tscale: { value: 1.0 },\n\t\tmap: { value: null },\n\t\tuvTransform: { value: new Matrix3() }\n\n\t}\n\n};\n\n/**\n * Uniform Utilities\n */\n\nvar UniformsUtils = {\n\n\tmerge: function ( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t},\n\n\tclone: function ( uniforms_src ) {\n\n\t\tvar uniforms_dst = {};\n\n\t\tfor ( var u in uniforms_src ) {\n\n\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\tif ( parameter_src && ( parameter_src.isColor ||\n\t\t\t\t\tparameter_src.isMatrix3 || parameter_src.isMatrix4 ||\n\t\t\t\t\tparameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||\n\t\t\t\t\tparameter_src.isTexture ) ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uniforms_dst;\n\n\t}\n\n};\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\nvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\nvar beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\nvar bsdfs = \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat theta = acos( dot( N, V ) );\\n\\tvec2 uv = vec2(\\n\\t\\tsqrt( saturate( roughness ) ),\\n\\t\\tsaturate( theta / ( 0.5 * PI ) ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\\n\\tfloat b = 3.45068 + (4.18814 + y) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\\n\\treturn result;\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t\\t\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t\\n\\t#endif\\n#endif\\n\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\nvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\nvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\n\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\nvar encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\nvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\nvar envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\nvar fog_vertex = \"\\n#ifdef USE_FOG\\nfogDepth = -mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n  varying float fogDepth;\\n#endif\\n\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\";\n\nvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\nvar lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltcMat;\\tuniform sampler2D ltcMag;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tfloat norm = texture2D( ltcMag, uv ).a;\\n\\t\\tvec4 t = texture2D( ltcMat, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3(   1,   0, t.y ),\\n\\t\\t\\tvec3(   0, t.z,   0 ),\\n\\t\\t\\tvec3( t.w,   0, t.x )\\n\\t\\t);\\n\\t\\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\nvar lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\tgl_Position.z *= gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\nvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\nvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\nvar normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\nvar project_vertex = \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\nvar dithering_fragment = \"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\";\n\nvar dithering_pars_fragment = \"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\nvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\nvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\nvar uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\n\";\n\nvar uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\nvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\";\n\nvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\nvar cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\\n\";\n\nvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\nvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\nvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\\n\";\n\nvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\";\n\nvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\nvar equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\nvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\nvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\nvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\nvar meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\";\n\nvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\";\n\nvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar ShaderChunk = {\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tencodings_fragment: encodings_fragment,\n\tencodings_pars_fragment: encodings_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_vertex: lights_lambert_vertex,\n\tlights_pars: lights_pars,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_template: lights_template,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment: normal_fragment,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tuv2_pars_fragment: uv2_pars_fragment,\n\tuv2_pars_vertex: uv2_pars_vertex,\n\tuv2_vertex: uv2_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tcube_frag: cube_frag,\n\tcube_vert: cube_vert,\n\tdepth_frag: depth_frag,\n\tdepth_vert: depth_vert,\n\tdistanceRGBA_frag: distanceRGBA_frag,\n\tdistanceRGBA_vert: distanceRGBA_vert,\n\tequirect_frag: equirect_frag,\n\tequirect_vert: equirect_vert,\n\tlinedashed_frag: linedashed_frag,\n\tlinedashed_vert: linedashed_vert,\n\tmeshbasic_frag: meshbasic_frag,\n\tmeshbasic_vert: meshbasic_vert,\n\tmeshlambert_frag: meshlambert_frag,\n\tmeshlambert_vert: meshlambert_vert,\n\tmeshphong_frag: meshphong_frag,\n\tmeshphong_vert: meshphong_vert,\n\tmeshphysical_frag: meshphysical_frag,\n\tmeshphysical_vert: meshphysical_vert,\n\tnormal_frag: normal_frag,\n\tnormal_vert: normal_vert,\n\tpoints_frag: points_frag,\n\tpoints_vert: points_vert,\n\tshadow_frag: shadow_frag,\n\tshadow_vert: shadow_vert\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n */\n\nvar ShaderLib = {\n\n\tbasic: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t},\n\n\tlambert: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t},\n\n\tphong: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.gradientmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\tshininess: { value: 30 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t},\n\n\tstandard: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.roughnessmap,\n\t\t\tUniformsLib.metalnessmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\troughness: { value: 0.5 },\n\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t},\n\n\tpoints: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.points,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.points_vert,\n\t\tfragmentShader: ShaderChunk.points_frag\n\n\t},\n\n\tdashed: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tscale: { value: 1 },\n\t\t\t\tdashSize: { value: 1 },\n\t\t\t\ttotalSize: { value: 2 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t},\n\n\tdepth: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.depth_vert,\n\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t},\n\n\tnormal: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.normal_vert,\n\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\tcube: {\n\n\t\tuniforms: {\n\t\t\ttCube: { value: null },\n\t\t\ttFlip: { value: - 1 },\n\t\t\topacity: { value: 1.0 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.cube_vert,\n\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t},\n\n\tequirect: {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t},\n\n\tdistanceRGBA: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t},\n\n\tshadow: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.lights,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t}\n\n};\n\nShaderLib.physical = {\n\n\tuniforms: UniformsUtils.merge( [\n\t\tShaderLib.standard.uniforms,\n\t\t{\n\t\t\tclearCoat: { value: 0 },\n\t\t\tclearCoatRoughness: { value: 0 }\n\t\t}\n\t] ),\n\n\tvertexShader: ShaderChunk.meshphysical_vert,\n\tfragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\n/**\n * @author bhouston / http://clara.io\n */\n\nfunction Box2( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n}\n\nObject.assign( Box2.prototype, {\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new Vector2();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t},\n\n\tgetCenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector2();\n\t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tgetSize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector2();\n\t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new Vector2();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector2();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new Vector2();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction WebGLFlareRenderer( renderer, gl, state, textures, capabilities ) {\n\n\tvar vertexBuffer, elementBuffer;\n\tvar shader, program, attributes, uniforms;\n\n\tvar tempTexture, occlusionTexture;\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 1, - 1, 0, 0,\n\t\t\t  1, - 1, 1, 0,\n\t\t\t  1, 1, 1, 1,\n\t\t\t- 1, 1, 0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\t// buffers\n\n\t\tvertexBuffer = gl.createBuffer();\n\t\telementBuffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t// textures\n\n\t\ttempTexture = gl.createTexture();\n\t\tocclusionTexture = gl.createTexture();\n\n\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\tshader = {\n\n\t\t\tvertexShader: [\n\n\t\t\t\t'uniform lowp int renderType;',\n\n\t\t\t\t'uniform vec3 screenPosition;',\n\t\t\t\t'uniform vec2 scale;',\n\t\t\t\t'uniform float rotation;',\n\n\t\t\t\t'uniform sampler2D occlusionMap;',\n\n\t\t\t\t'attribute vec2 position;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'varying vec2 vUV;',\n\t\t\t\t'varying float vVisibility;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvUV = uv;',\n\n\t\t\t\t'\tvec2 pos = position;',\n\n\t\t\t\t'\tif ( renderType == 2 ) {',\n\n\t\t\t\t'\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );',\n\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );',\n\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );',\n\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );',\n\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );',\n\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );',\n\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );',\n\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );',\n\t\t\t\t'\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );',\n\n\t\t\t\t'\t\tvVisibility =        visibility.r / 9.0;',\n\t\t\t\t'\t\tvVisibility *= 1.0 - visibility.g / 9.0;',\n\t\t\t\t'\t\tvVisibility *=       visibility.b / 9.0;',\n\t\t\t\t'\t\tvVisibility *= 1.0 - visibility.a / 9.0;',\n\n\t\t\t\t'\t\tpos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;',\n\t\t\t\t'\t\tpos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;',\n\n\t\t\t\t'\t}',\n\n\t\t\t\t'\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t'uniform lowp int renderType;',\n\n\t\t\t\t'uniform sampler2D map;',\n\t\t\t\t'uniform float opacity;',\n\t\t\t\t'uniform vec3 color;',\n\n\t\t\t\t'varying vec2 vUV;',\n\t\t\t\t'varying float vVisibility;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t// pink square\n\n\t\t\t\t'\tif ( renderType == 0 ) {',\n\n\t\t\t\t'\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );',\n\n\t\t\t\t// restore\n\n\t\t\t\t'\t} else if ( renderType == 1 ) {',\n\n\t\t\t\t'\t\tgl_FragColor = texture2D( map, vUV );',\n\n\t\t\t\t// flare\n\n\t\t\t\t'\t} else {',\n\n\t\t\t\t'\t\tvec4 texture = texture2D( map, vUV );',\n\t\t\t\t'\t\ttexture.a *= opacity * vVisibility;',\n\t\t\t\t'\t\tgl_FragColor = texture;',\n\t\t\t\t'\t\tgl_FragColor.rgb *= color;',\n\n\t\t\t\t'\t}',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' )\n\n\t\t};\n\n\t\tprogram = createProgram( shader );\n\n\t\tattributes = {\n\t\t\tvertex: gl.getAttribLocation( program, 'position' ),\n\t\t\tuv: gl.getAttribLocation( program, 'uv' )\n\t\t};\n\n\t\tuniforms = {\n\t\t\trenderType: gl.getUniformLocation( program, 'renderType' ),\n\t\t\tmap: gl.getUniformLocation( program, 'map' ),\n\t\t\tocclusionMap: gl.getUniformLocation( program, 'occlusionMap' ),\n\t\t\topacity: gl.getUniformLocation( program, 'opacity' ),\n\t\t\tcolor: gl.getUniformLocation( program, 'color' ),\n\t\t\tscale: gl.getUniformLocation( program, 'scale' ),\n\t\t\trotation: gl.getUniformLocation( program, 'rotation' ),\n\t\t\tscreenPosition: gl.getUniformLocation( program, 'screenPosition' )\n\t\t};\n\n\t}\n\n\t/*\n\t * Render lens flares\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t *         reads these back and calculates occlusion.\n\t */\n\n\tthis.render = function ( flares, scene, camera, viewport ) {\n\n\t\tif ( flares.length === 0 ) return;\n\n\t\tvar tempPosition = new Vector3();\n\n\t\tvar invAspect = viewport.w / viewport.z,\n\t\t\thalfViewportWidth = viewport.z * 0.5,\n\t\t\thalfViewportHeight = viewport.w * 0.5;\n\n\t\tvar size = 16 / viewport.w,\n\t\t\tscale = new Vector2( size * invAspect, size );\n\n\t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n\t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\n\t\tvar validArea = new Box2();\n\n\t\tvalidArea.min.set( viewport.x, viewport.y );\n\t\tvalidArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tstate.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.vertex );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\t// loop through all lens flares to update their occlusion and positions\n\t\t// setup gl and common used attribs/uniforms\n\n\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\tgl.uniform1i( uniforms.map, 1 );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n\t\t\tsize = 16 / viewport.w;\n\t\t\tscale.set( size * invAspect, size );\n\n\t\t\t// calc object screen position\n\n\t\t\tvar flare = flares[ i ];\n\n\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\ttempPosition.applyMatrix4( camera.projectionMatrix );\n\n\t\t\t// setup arrays for gl programs\n\n\t\t\tscreenPosition.copy( tempPosition );\n\n\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t\t// screen cull\n\n\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t// render pink quad\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n\t\t\t\tstate.disable( gl.BLEND );\n\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t// restore graphics\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// update object positions\n\n\t\t\t\tflare.positionScreen.copy( screenPosition );\n\n\t\t\t\tif ( flare.customUpdateCallback ) {\n\n\t\t\t\t\tflare.customUpdateCallback( flare );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tflare.updateLensFlares();\n\n\t\t\t\t}\n\n\t\t\t\t// render flares\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\tstate.enable( gl.BLEND );\n\n\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\tscale.y = size;\n\n\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\n\t\t\t\t\t\ttextures.setTexture2D( sprite.texture, 1 );\n\n\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\t\tstate.enable( gl.DEPTH_TEST );\n\t\tstate.buffers.depth.setMask( true );\n\n\t\tstate.reset();\n\n\t};\n\n\tfunction createProgram( shader ) {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n\t\tvar prefix = 'precision ' + capabilities.precision + ' float;\\n';\n\n\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n\t\tgl.compileShader( fragmentShader );\n\t\tgl.compileShader( vertexShader );\n\n\t\tgl.attachShader( program, fragmentShader );\n\t\tgl.attachShader( program, vertexShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.needsUpdate = true;\n\n}\n\nCanvasTexture.prototype = Object.create( Texture.prototype );\nCanvasTexture.prototype.constructor = CanvasTexture;\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction WebGLSpriteRenderer( renderer, gl, state, textures, capabilities ) {\n\n\tvar vertexBuffer, elementBuffer;\n\tvar program, attributes, uniforms;\n\n\tvar texture;\n\n\t// decompose matrixWorld\n\n\tvar spritePosition = new Vector3();\n\tvar spriteRotation = new Quaternion();\n\tvar spriteScale = new Vector3();\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 0.5, - 0.5, 0, 0,\n\t\t\t  0.5, - 0.5, 1, 0,\n\t\t\t  0.5, 0.5, 1, 1,\n\t\t\t- 0.5, 0.5, 0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\tvertexBuffer = gl.createBuffer();\n\t\telementBuffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\tprogram = createProgram();\n\n\t\tattributes = {\n\t\t\tposition: gl.getAttribLocation( program, 'position' ),\n\t\t\tuv: gl.getAttribLocation( program, 'uv' )\n\t\t};\n\n\t\tuniforms = {\n\t\t\tuvOffset: gl.getUniformLocation( program, 'uvOffset' ),\n\t\t\tuvScale: gl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\trotation: gl.getUniformLocation( program, 'rotation' ),\n\t\t\tscale: gl.getUniformLocation( program, 'scale' ),\n\n\t\t\tcolor: gl.getUniformLocation( program, 'color' ),\n\t\t\tmap: gl.getUniformLocation( program, 'map' ),\n\t\t\topacity: gl.getUniformLocation( program, 'opacity' ),\n\n\t\t\tmodelViewMatrix: gl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\tprojectionMatrix: gl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\tfogType: gl.getUniformLocation( program, 'fogType' ),\n\t\t\tfogDensity: gl.getUniformLocation( program, 'fogDensity' ),\n\t\t\tfogNear: gl.getUniformLocation( program, 'fogNear' ),\n\t\t\tfogFar: gl.getUniformLocation( program, 'fogFar' ),\n\t\t\tfogColor: gl.getUniformLocation( program, 'fogColor' ),\n\t\t\tfogDepth: gl.getUniformLocation( program, 'fogDepth' ),\n\n\t\t\talphaTest: gl.getUniformLocation( program, 'alphaTest' )\n\t\t};\n\n\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tcanvas.width = 8;\n\t\tcanvas.height = 8;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.fillStyle = 'white';\n\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\ttexture = new CanvasTexture( canvas );\n\n\t}\n\n\tthis.render = function ( sprites, scene, camera ) {\n\n\t\tif ( sprites.length === 0 ) return;\n\n\t\t// setup gl\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tstate.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.position );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tstate.enable( gl.BLEND );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\tvar oldFogType = 0;\n\t\tvar sceneFogType = 0;\n\t\tvar fog = scene.fog;\n\n\t\tif ( fog ) {\n\n\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\toldFogType = 1;\n\t\t\t\tsceneFogType = 1;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\toldFogType = 2;\n\t\t\t\tsceneFogType = 2;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\toldFogType = 0;\n\t\t\tsceneFogType = 0;\n\n\t\t}\n\n\n\t\t// update positions and sort\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\n\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n\t\t}\n\n\t\tsprites.sort( painterSortStable );\n\n\t\t// render all sprites\n\n\t\tvar scale = [];\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\t\t\tvar material = sprite.material;\n\n\t\t\tif ( material.visible === false ) continue;\n\n\t\t\tsprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );\n\n\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\tscale[ 1 ] = spriteScale.y;\n\n\t\t\tvar fogType = 0;\n\n\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\tfogType = sceneFogType;\n\n\t\t\t}\n\n\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\toldFogType = fogType;\n\n\t\t\t}\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t}\n\n\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\t\t\tstate.buffers.depth.setTest( material.depthTest );\n\t\t\tstate.buffers.depth.setMask( material.depthWrite );\n\t\t\tstate.buffers.color.setMask( material.colorWrite );\n\n\t\t\ttextures.setTexture2D( material.map || texture, 0 );\n\n\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\tsprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\n\t\tstate.reset();\n\n\t};\n\n\tfunction createProgram() {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t'precision ' + capabilities.precision + ' float;',\n\n\t\t\t'#define SHADER_NAME ' + 'SpriteMaterial',\n\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform float rotation;',\n\t\t\t'uniform vec2 scale;',\n\t\t\t'uniform vec2 uvOffset;',\n\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t'attribute vec2 position;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'varying vec2 vUV;',\n\t\t\t'varying float fogDepth;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvUV = uvOffset + uv * uvScale;',\n\n\t\t\t'\tvec2 alignedPosition = position * scale;',\n\n\t\t\t'\tvec2 rotatedPosition;',\n\t\t\t'\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t'\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t'\tvec4 mvPosition;',\n\n\t\t\t'\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t'\tmvPosition.xy += rotatedPosition;',\n\n\t\t\t'\tgl_Position = projectionMatrix * mvPosition;',\n\n\t\t\t'\tfogDepth = - mvPosition.z;',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t'precision ' + capabilities.precision + ' float;',\n\n\t\t\t'#define SHADER_NAME ' + 'SpriteMaterial',\n\n\t\t\t'uniform vec3 color;',\n\t\t\t'uniform sampler2D map;',\n\t\t\t'uniform float opacity;',\n\n\t\t\t'uniform int fogType;',\n\t\t\t'uniform vec3 fogColor;',\n\t\t\t'uniform float fogDensity;',\n\t\t\t'uniform float fogNear;',\n\t\t\t'uniform float fogFar;',\n\t\t\t'uniform float alphaTest;',\n\n\t\t\t'varying vec2 vUV;',\n\t\t\t'varying float fogDepth;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvec4 texture = texture2D( map, vUV );',\n\n\t\t\t'\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t'\tif ( gl_FragColor.a < alphaTest ) discard;',\n\n\t\t\t'\tif ( fogType > 0 ) {',\n\n\t\t\t'\t\tfloat fogFactor = 0.0;',\n\n\t\t\t'\t\tif ( fogType == 1 ) {',\n\n\t\t\t'\t\t\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n\n\t\t\t'\t\t} else {',\n\n\t\t\t'\t\t\tconst float LOG2 = 1.442695;',\n\t\t\t'\t\t\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );',\n\t\t\t'\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t'\t\t}',\n\n\t\t\t'\t\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );',\n\n\t\t\t'\t}',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.compileShader( vertexShader );\n\t\tgl.compileShader( fragmentShader );\n\n\t\tgl.attachShader( program, vertexShader );\n\t\tgl.attachShader( program, fragmentShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn b.id - a.id;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar materialId = 0;\n\nfunction Material() {\n\n\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Material';\n\n\tthis.fog = true;\n\tthis.lights = true;\n\n\tthis.blending = NormalBlending;\n\tthis.side = FrontSide;\n\tthis.flatShading = false;\n\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\tthis.opacity = 1;\n\tthis.transparent = false;\n\n\tthis.blendSrc = SrcAlphaFactor;\n\tthis.blendDst = OneMinusSrcAlphaFactor;\n\tthis.blendEquation = AddEquation;\n\tthis.blendSrcAlpha = null;\n\tthis.blendDstAlpha = null;\n\tthis.blendEquationAlpha = null;\n\n\tthis.depthFunc = LessEqualDepth;\n\tthis.depthTest = true;\n\tthis.depthWrite = true;\n\n\tthis.clippingPlanes = null;\n\tthis.clipIntersection = false;\n\tthis.clipShadows = false;\n\n\tthis.colorWrite = true;\n\n\tthis.precision = null; // override the renderer's default precision for this material\n\n\tthis.polygonOffset = false;\n\tthis.polygonOffsetFactor = 0;\n\tthis.polygonOffsetUnits = 0;\n\n\tthis.dithering = false;\n\n\tthis.alphaTest = 0;\n\tthis.premultipliedAlpha = false;\n\n\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\tthis.visible = true;\n\n\tthis.userData = {};\n\n\tthis.needsUpdate = true;\n\n}\n\nMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Material,\n\n\tisMaterial: true,\n\n\tonBeforeCompile: function () {},\n\n\tsetValues: function ( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( var key in values ) {\n\n\t\t\tvar newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;\n\t\tif ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\tif ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t}\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.morphTargets === true ) data.morphTargets = true;\n\t\tif ( this.skinning === true ) data.skinning = true;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.flatShading = source.flatShading;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.overdraw = source.overdraw;\n\n\t\tthis.visible = source.visible;\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tthis.clipShadows = source.clipShadows;\n\t\tthis.clipIntersection = source.clipIntersection;\n\n\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\tdstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tvar n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / https://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nfunction MeshDepthMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshDepthMaterial';\n\n\tthis.depthPacking = BasicDepthPacking;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.map = null;\n\n\tthis.alphaMap = null;\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshDepthMaterial.prototype = Object.create( Material.prototype );\nMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\nMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\nMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.depthPacking = source.depthPacking;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\tthis.map = source.map;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  referencePosition: <float>,\n *  nearDistance: <float>,\n *  farDistance: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>\n *\n * }\n */\n\nfunction MeshDistanceMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshDistanceMaterial';\n\n\tthis.referencePosition = new Vector3();\n\tthis.nearDistance = 1;\n\tthis.farDistance = 1000;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.map = null;\n\n\tthis.alphaMap = null;\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshDistanceMaterial.prototype = Object.create( Material.prototype );\nMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\nMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\nMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.referencePosition.copy( source.referencePosition );\n\tthis.nearDistance = source.nearDistance;\n\tthis.farDistance = source.farDistance;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\tthis.map = source.map;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\treturn this;\n\n};\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Box3( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n}\n\nObject.assign( Box3.prototype, {\n\n\tisBox3: true,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromArray: function ( array ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tvar x = array[ i ];\n\t\t\tvar y = array[ i + 1 ];\n\t\t\tvar z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tvar x = attribute.getX( i );\n\t\t\tvar y = attribute.getY( i );\n\t\t\tvar z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetFromObject: function ( object ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t},\n\n\tgetCenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector3();\n\t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tgetSize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector3();\n\t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\texpandByObject: function () {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tvar scope, i, l;\n\n\t\tvar v1 = new Vector3();\n\n\t\tfunction traverse( node ) {\n\n\t\t\tvar geometry = node.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tv1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn function expandByObject( object ) {\n\n\t\t\tscope = this;\n\n\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\tobject.traverse( traverse );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new Vector3();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t},\n\n\tintersectsSphere: ( function () {\n\n\t\tvar closestPoint = new Vector3();\n\n\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t};\n\n\t} )(),\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tvar min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector3();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tgetBoundingSphere: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function getBoundingSphere( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Sphere();\n\n\t\t\tthis.getCenter( result.center );\n\n\t\t\tresult.radius = this.getSize( v1 ).length() * 0.5;\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar points = [\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3()\n\t\t];\n\n\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif ( this.isEmpty() ) return this;\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Sphere( center, radius ) {\n\n\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n}\n\nObject.assign( Sphere.prototype, {\n\n\tset: function ( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function () {\n\n\t\tvar box = new Box3();\n\n\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\treturn ( this.radius <= 0 );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\tvar result = optionalTarget || new Vector3();\n\n\t\tresult.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tresult.sub( this.center ).normalize();\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\tgetBoundingBox: function ( optionalTarget ) {\n\n\t\tvar box = optionalTarget || new Box3();\n\n\t\tbox.set( this.center, this.center );\n\t\tbox.expandByScalar( this.radius );\n\n\t\treturn box;\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n */\n\nfunction Plane( normal, constant ) {\n\n\t// normal is assumed to be normalized\n\n\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n}\n\nObject.assign( Plane.prototype, {\n\n\tset: function ( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponents: function ( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCoplanarPoints: function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\n\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t},\n\n\tnormalize: function () {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t},\n\n\tdistanceToSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t},\n\n\tprojectPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector3();\n\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t},\n\n\tintersectLine: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function intersectLine( line, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tvar direction = line.delta( v1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn result.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t};\n\n\t}(),\n\n\tintersectsLine: function ( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tvar startSign = this.distanceToPoint( line.start );\n\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t},\n\n\tcoplanarPoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector3();\n\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar m1 = new Matrix3();\n\n\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\n\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://clara.io\n */\n\nfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\tthis.planes = [\n\n\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t];\n\n}\n\nObject.assign( Frustum.prototype, {\n\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tvar planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( frustum ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix: function ( m ) {\n\n\t\tvar planes = this.planes;\n\t\tvar me = m.elements;\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\tintersectsObject: function () {\n\n\t\tvar sphere = new Sphere();\n\n\t\treturn function intersectsObject( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSprite: function () {\n\n\t\tvar sphere = new Sphere();\n\n\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar planes = this.planes;\n\t\tvar center = sphere.center;\n\t\tvar negRadius = - sphere.radius;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsBox: function () {\n\n\t\tvar p1 = new Vector3(),\n\t\t\tp2 = new Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t};\n\n\t}(),\n\n\tcontainsPoint: function ( point ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\tvar _frustum = new Frustum(),\n\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t_shadowMapSize = new Vector2(),\n\t\t_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),\n\n\t\t_lookTarget = new Vector3(),\n\t\t_lightPositionWorld = new Vector3(),\n\n\t\t_MorphingFlag = 1,\n\t\t_SkinningFlag = 2,\n\n\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t\t_materialCache = {};\n\n\tvar cubeDirections = [\n\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t];\n\n\tvar cubeUps = [\n\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t];\n\n\tvar cube2DViewPorts = [\n\t\tnew Vector4(), new Vector4(), new Vector4(),\n\t\tnew Vector4(), new Vector4(), new Vector4()\n\t];\n\n\t// init\n\n\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\tvar depthMaterial = new MeshDepthMaterial( {\n\n\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning\n\n\t\t} );\n\n\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\t//\n\n\t\tvar distanceMaterial = new MeshDistanceMaterial( {\n\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning\n\n\t\t} );\n\n\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t}\n\n\t//\n\n\tvar scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = PCFShadowMap;\n\n\tthis.renderReverseSided = true;\n\tthis.renderSingleSided = true;\n\n\tthis.render = function ( lights, scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( lights.length === 0 ) return;\n\n\t\t// TODO Clean up (needed in case of contextlost)\n\t\tvar _gl = _renderer.context;\n\t\tvar _state = _renderer.state;\n\n\t\t// Set GL state for depth map.\n\t\t_state.disable( _gl.BLEND );\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t_state.buffers.depth.setTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tvar faceCount;\n\n\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\t\t\tvar shadow = light.shadow;\n\t\t\tvar isPointLight = light && light.isPointLight;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n\t\t\tif ( isPointLight ) {\n\n\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t// following orientation:\n\t\t\t\t//\n\t\t\t\t//  xzXZ\n\t\t\t\t//   y Y\n\t\t\t\t//\n\t\t\t\t// X - Positive x direction\n\t\t\t\t// x - Negative x direction\n\t\t\t\t// Y - Positive y direction\n\t\t\t\t// y - Negative y direction\n\t\t\t\t// Z - Positive z direction\n\t\t\t\t// z - Negative z direction\n\n\t\t\t\t// positive X\n\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative X\n\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Z\n\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative Z\n\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Y\n\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t// negative Y\n\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tif ( shadow.isSpotLightShadow ) {\n\n\t\t\t\tshadow.update( light );\n\n\t\t\t}\n\n\t\t\tvar shadowMap = shadow.map;\n\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\tif ( isPointLight ) {\n\n\t\t\t\tfaceCount = 6;\n\n\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t// equal to inverse of the light's position\n\n\t\t\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t\t} else {\n\n\t\t\t\tfaceCount = 1;\n\n\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t// compute shadow matrix\n\n\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t);\n\n\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t_renderer.clear();\n\n\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t// run a single pass if not\n\n\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t}\n\n\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\trenderObject( scene, camera, shadowCamera, isPointLight );\n\n\t\t\t}\n\n\t\t}\n\n\t\tscope.needsUpdate = false;\n\n\t};\n\n\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tvar result = null;\n\n\t\tvar materialVariants = _depthMaterials;\n\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\tif ( isPointLight ) {\n\n\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t}\n\n\t\tif ( ! customMaterial ) {\n\n\t\t\tvar useMorphing = false;\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tif ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t} else if ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( object.isSkinnedMesh && material.skinning === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t}\n\n\t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n\t\t\tvar variantIndex = 0;\n\n\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t} else {\n\n\t\t\tresult = customMaterial;\n\n\t\t}\n\n\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t// appropriate state\n\n\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t}\n\n\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult = cachedMaterial;\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tvar side = material.side;\n\n\t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\n\t\t\tside = FrontSide;\n\n\t\t}\n\n\t\tif ( scope.renderReverseSided ) {\n\n\t\t\tif ( side === FrontSide ) side = BackSide;\n\t\t\telse if ( side === BackSide ) side = FrontSide;\n\n\t\t}\n\n\t\tresult.side = side;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( isPointLight && result.isMeshDistanceMaterial ) {\n\n\t\t\tresult.referencePosition.copy( lightPositionWorld );\n\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction renderObject( object, camera, shadowCamera, isPointLight ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tvar visible = object.layers.test( camera.layers );\n\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\tif ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\n\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( children[ i ], camera, shadowCamera, isPointLight );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLAttributes( gl ) {\n\n\tvar buffers = {};\n\n\tfunction createBuffer( attribute, bufferType ) {\n\n\t\tvar array = attribute.array;\n\t\tvar usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\tvar buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\t\tgl.bufferData( bufferType, array, usage );\n\n\t\tattribute.onUploadCallback();\n\n\t\tvar type = gl.FLOAT;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = gl.FLOAT;\n\n\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = gl.SHORT;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = gl.INT;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = gl.BYTE;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t}\n\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\ttype: type,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version\n\t\t};\n\n\t}\n\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\tvar array = attribute.array;\n\t\tvar updateRange = attribute.updateRange;\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\tif ( attribute.dynamic === false ) {\n\n\t\t\tgl.bufferData( bufferType, array, gl.STATIC_DRAW );\n\n\t\t} else if ( updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else if ( updateRange.count === 0 ) {\n\n\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t} else {\n\n\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction get( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn buffers[ attribute.uuid ];\n\n\t}\n\n\tfunction remove( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tvar data = buffers[ attribute.uuid ];\n\n\t\tif ( data ) {\n\n\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\tdelete buffers[ attribute.uuid ];\n\n\t\t}\n\n\t}\n\n\tfunction update( attribute, bufferType ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tvar data = buffers[ attribute.uuid ];\n\n\t\tif ( data === undefined ) {\n\n\t\t\tbuffers[ attribute.uuid ] = createBuffer( attribute, bufferType );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nfunction Euler( x, y, z, order ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._order = order || Euler.DefaultOrder;\n\n}\n\nEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nEuler.DefaultOrder = 'XYZ';\n\nObject.defineProperties( Euler.prototype, {\n\n\tx: {\n\n\t\tget: function () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\ty: {\n\n\t\tget: function () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tz: {\n\n\t\tget: function () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\torder: {\n\n\t\tget: function () {\n\n\t\t\treturn this._order;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._order = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Euler.prototype, {\n\n\tisEuler: true,\n\n\tset: function ( x, y, z, order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order || this._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t},\n\n\tcopy: function ( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\tvar clamp = _Math.clamp;\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements;\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\torder = order || this._order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._y = 0;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromQuaternion: function () {\n\n\t\tvar matrix = new Matrix4();\n\n\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t};\n\n\t}(),\n\n\tsetFromVector3: function ( v, order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t},\n\n\treorder: function () {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\tvar q = new Quaternion();\n\n\t\treturn function reorder( newOrder ) {\n\n\t\t\tq.setFromEuler( this );\n\n\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t},\n\n\ttoVector3: function ( optionalResult ) {\n\n\t\tif ( optionalResult ) {\n\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t} else {\n\n\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t}\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Layers() {\n\n\tthis.mask = 1 | 0;\n\n}\n\nObject.assign( Layers.prototype, {\n\n\tset: function ( channel ) {\n\n\t\tthis.mask = 1 << channel | 0;\n\n\t},\n\n\tenable: function ( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t},\n\n\ttoggle: function ( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t},\n\n\tdisable: function ( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t},\n\n\ttest: function ( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author elephantatwork / www.elephantatwork.ch\n */\n\nvar object3DId = 0;\n\nfunction Object3D() {\n\n\tObject.defineProperty( this, 'id', { value: object3DId ++ } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Object3D';\n\n\tthis.parent = null;\n\tthis.children = [];\n\n\tthis.up = Object3D.DefaultUp.clone();\n\n\tvar position = new Vector3();\n\tvar rotation = new Euler();\n\tvar quaternion = new Quaternion();\n\tvar scale = new Vector3( 1, 1, 1 );\n\n\tfunction onRotationChange() {\n\n\t\tquaternion.setFromEuler( rotation, false );\n\n\t}\n\n\tfunction onQuaternionChange() {\n\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t}\n\n\trotation.onChange( onRotationChange );\n\tquaternion.onChange( onQuaternionChange );\n\n\tObject.defineProperties( this, {\n\t\tposition: {\n\t\t\tenumerable: true,\n\t\t\tvalue: position\n\t\t},\n\t\trotation: {\n\t\t\tenumerable: true,\n\t\t\tvalue: rotation\n\t\t},\n\t\tquaternion: {\n\t\t\tenumerable: true,\n\t\t\tvalue: quaternion\n\t\t},\n\t\tscale: {\n\t\t\tenumerable: true,\n\t\t\tvalue: scale\n\t\t},\n\t\tmodelViewMatrix: {\n\t\t\tvalue: new Matrix4()\n\t\t},\n\t\tnormalMatrix: {\n\t\t\tvalue: new Matrix3()\n\t\t}\n\t} );\n\n\tthis.matrix = new Matrix4();\n\tthis.matrixWorld = new Matrix4();\n\n\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\tthis.matrixWorldNeedsUpdate = false;\n\n\tthis.layers = new Layers();\n\tthis.visible = true;\n\n\tthis.castShadow = false;\n\tthis.receiveShadow = false;\n\n\tthis.frustumCulled = true;\n\tthis.renderOrder = 0;\n\n\tthis.userData = {};\n\n}\n\nObject3D.DefaultUp = new Vector3( 0, 1, 0 );\nObject3D.DefaultMatrixAutoUpdate = true;\n\nObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Object3D,\n\n\tisObject3D: true,\n\n\tonBeforeRender: function () {},\n\tonAfterRender: function () {},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t},\n\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t},\n\n\tsetRotationFromEuler: function ( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t},\n\n\tsetRotationFromMatrix: function ( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t},\n\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t},\n\n\trotateOnAxis: function () {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar q1 = new Quaternion();\n\n\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateOnWorldAxis: function () {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\tvar q1 = new Quaternion();\n\n\t\treturn function rotateOnWorldAxis( axis, angle ) {\n\n\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.premultiply( q1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateX: function () {\n\n\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\ttranslateOnAxis: function () {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslateX: function () {\n\n\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\treturn function translateX( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateY: function () {\n\n\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\treturn function translateY( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateZ: function () {\n\n\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\treturn function translateZ( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\tlocalToWorld: function ( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t},\n\n\tworldToLocal: function () {\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function worldToLocal( vector ) {\n\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\t// This method does not support objects with rotated and/or translated parent(s)\n\n\t\tvar m1 = new Matrix4();\n\t\tvar vector = new Vector3();\n\n\t\treturn function lookAt( x, y, z ) {\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\tvector.copy( x );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( x, y, z );\n\n\t\t\t}\n\n\t\t\tif ( this.isCamera ) {\n\n\t\t\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\t\t} else {\n\n\t\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t};\n\n\t}(),\n\n\tadd: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\tthis.children.push( object );\n\n\t\t} else {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tremove: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetObjectById: function ( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t},\n\n\tgetObjectByName: function ( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t},\n\n\tgetObjectByProperty: function ( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tvar child = this.children[ i ];\n\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t},\n\n\tgetWorldPosition: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector3();\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n\t},\n\n\tgetWorldQuaternion: function () {\n\n\t\tvar position = new Vector3();\n\t\tvar scale = new Vector3();\n\n\t\treturn function getWorldQuaternion( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Quaternion();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldRotation: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function getWorldRotation( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Euler();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n\t\t};\n\n\t}(),\n\n\tgetWorldScale: function () {\n\n\t\tvar position = new Vector3();\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function getWorldScale( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldDirection: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t};\n\n\t}(),\n\n\traycast: function () {},\n\n\ttraverse: function ( callback ) {\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseVisible: function ( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseAncestors: function ( callback ) {\n\n\t\tvar parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t},\n\n\tupdateMatrix: function () {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tvar output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tvar object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.geometry !== undefined ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tvar uuids = [];\n\n\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\t\t\tvar shapes = extractFromCache( meta.shapes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tvar values = [];\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\t\t\treturn values;\n\n\t\t}\n\n\t},\n\n\tclone: function ( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t},\n\n\tcopy: function ( source, recursive ) {\n\n\t\tif ( recursive === undefined ) recursive = true;\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tvar child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nfunction Camera() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Camera';\n\n\tthis.matrixWorldInverse = new Matrix4();\n\tthis.projectionMatrix = new Matrix4();\n\n}\n\nCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Camera,\n\n\tisCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\n\t\treturn this;\n\n\t},\n\n\tgetWorldDirection: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t};\n\n\t}(),\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author arose / http://github.com/arose\n */\n\nfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\tCamera.call( this );\n\n\tthis.type = 'OrthographicCamera';\n\n\tthis.zoom = 1;\n\tthis.view = null;\n\n\tthis.left = left;\n\tthis.right = right;\n\tthis.top = top;\n\tthis.bottom = bottom;\n\n\tthis.near = ( near !== undefined ) ? near : 0.1;\n\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\tthis.updateProjectionMatrix();\n\n}\n\nOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\tconstructor: OrthographicCamera,\n\n\tisOrthographicCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t},\n\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function () {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tvar cx = ( this.right + this.left ) / 2;\n\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\tvar left = cx - dx;\n\t\tvar right = cx + dx;\n\t\tvar top = cy + dy;\n\t\tvar bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\tthis.a = a;\n\tthis.b = b;\n\tthis.c = c;\n\n\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\tthis.color = ( color && color.isColor ) ? color : new Color();\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n}\n\nObject.assign( Face3.prototype, {\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\t\tthis.c = source.c;\n\n\t\tthis.normal.copy( source.normal );\n\t\tthis.color.copy( source.color );\n\n\t\tthis.materialIndex = source.materialIndex;\n\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author bhouston / http://clara.io\n */\n\nvar geometryId = 0; // Geometry uses even numbers as Id\n\nfunction Geometry() {\n\n\tObject.defineProperty( this, 'id', { value: geometryId += 2 } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Geometry';\n\n\tthis.vertices = [];\n\tthis.colors = [];\n\tthis.faces = [];\n\tthis.faceVertexUvs = [[]];\n\n\tthis.morphTargets = [];\n\tthis.morphNormals = [];\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\tthis.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.elementsNeedUpdate = false;\n\tthis.verticesNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.lineDistancesNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n}\n\nGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Geometry,\n\n\tisGeometry: true,\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.verticesNeedUpdate = true;\n\t\tthis.normalsNeedUpdate = true;\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj = new Object3D();\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tfromBufferGeometry: function ( geometry ) {\n\n\t\tvar scope = this;\n\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\tvar attributes = geometry.attributes;\n\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\tvar tempNormals = [];\n\t\tvar tempUVs = [];\n\t\tvar tempUVs2 = [];\n\n\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\tscope.faces.push( face );\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar groups = geometry.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\tvar start = group.start;\n\t\t\t\tvar count = group.count;\n\n\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeFaceNormals();\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tvar offset = this.boundingBox.getCenter().negate();\n\n\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\treturn offset;\n\n\t},\n\n\tnormalize: function () {\n\n\t\tthis.computeBoundingSphere();\n\n\t\tvar center = this.boundingSphere.center;\n\t\tvar radius = this.boundingSphere.radius;\n\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\tvar matrix = new Matrix4();\n\t\tmatrix.set(\n\t\t\ts, 0, 0, - s * center.x,\n\t\t\t0, s, 0, - s * center.y,\n\t\t\t0, 0, s, - s * center.z,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\tthis.applyMatrix( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tcomputeFaceNormals: function () {\n\n\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tvar face = this.faces[ f ];\n\n\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\tcb.subVectors( vC, vB );\n\t\t\tab.subVectors( vA, vB );\n\t\t\tcb.cross( ab );\n\n\t\t\tcb.normalize();\n\n\t\t\tface.normal.copy( cb );\n\n\t\t}\n\n\t},\n\n\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\tvar v, vl, f, fl, face, vertices;\n\n\t\tvertices = new Array( this.vertices.length );\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ] = new Vector3();\n\n\t\t}\n\n\t\tif ( areaWeighted ) {\n\n\t\t\t// vertex normals weighted by triangle areas\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\tvar vA, vB, vC;\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ].normalize();\n\n\t\t}\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeFlatVertexNormals: function () {\n\n\t\tvar f, fl, face;\n\n\t\tthis.computeFaceNormals();\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeMorphNormals: function () {\n\n\t\tvar i, il, f, fl, face;\n\n\t\t// save original normals\n\t\t// - create temp variables on first access\n\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t} else {\n\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t}\n\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\tvar tmpGeo = new Geometry();\n\t\ttmpGeo.faces = this.faces;\n\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t// create on first access\n\n\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t// set vertices to morph target\n\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t// compute morph normals\n\n\t\t\ttmpGeo.computeFaceNormals();\n\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t// store morph normals\n\n\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore original normals\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t}\n\n\t},\n\n\tcomputeLineDistances: function () {\n\n\t\tvar d = 0;\n\t\tvar vertices = this.vertices;\n\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tif ( i > 0 ) {\n\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.lineDistances[ i ] = d;\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t},\n\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar normalMatrix,\n\t\t\tvertexOffset = this.vertices.length,\n\t\t\tvertices1 = this.vertices,\n\t\t\tvertices2 = geometry.vertices,\n\t\t\tfaces1 = this.faces,\n\t\t\tfaces2 = geometry.faces,\n\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t\t\tcolors1 = this.colors,\n\t\t\tcolors2 = geometry.colors;\n\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\tif ( matrix !== undefined ) {\n\n\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t}\n\n\t\t// vertices\n\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\tvertices1.push( vertexCopy );\n\n\t\t}\n\n\t\t// colors\n\n\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t}\n\n\t\t// faces\n\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t}\n\n\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t}\n\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\tfaces1.push( faceCopy );\n\n\t\t}\n\n\t\t// uvs\n\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\tif ( uv === undefined ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t}\n\n\t\t\tuvs1.push( uvCopy );\n\n\t\t}\n\n\t},\n\n\tmergeMesh: function ( mesh ) {\n\n\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\treturn;\n\n\t\t}\n\n\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t},\n\n\t/*\n\t * Checks for duplicate vertices with hashmap.\n\t * Duplicated vertices are removed\n\t * and faces' vertices are updated.\n\t */\n\n\tmergeVertices: function () {\n\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\tvar unique = [], changes = [];\n\n\t\tvar v, key;\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\tvar i, il, face;\n\t\tvar indices, j, jl;\n\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tv = this.vertices[ i ];\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if faces are completely degenerate after merging vertices, we\n\t\t// have to remove them from the geometry.\n\t\tvar faceIndicesToRemove = [];\n\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tface = this.faces[ i ];\n\n\t\t\tface.a = changes[ face.a ];\n\t\t\tface.b = changes[ face.b ];\n\t\t\tface.c = changes[ face.c ];\n\n\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t// we have to remove the face as nothing can be saved\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Use unique set of vertices\n\n\t\tvar diff = this.vertices.length - unique.length;\n\t\tthis.vertices = unique;\n\t\treturn diff;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.vertices = [];\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsortFacesByMaterialIndex: function () {\n\n\t\tvar faces = this.faces;\n\t\tvar length = faces.length;\n\n\t\t// tag faces\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tfaces[ i ]._id = i;\n\n\t\t}\n\n\t\t// sort faces\n\n\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t}\n\n\t\tfaces.sort( materialIndexSort );\n\n\t\t// sort uvs\n\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\tvar newUvs1, newUvs2;\n\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar id = faces[ i ]._id;\n\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t}\n\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Geometry',\n\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Geometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tvar vertices = [];\n\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tvar faces = [];\n\t\tvar normals = [];\n\t\tvar normalsHash = {};\n\t\tvar colors = [];\n\t\tvar colorsHash = {};\n\t\tvar uvs = [];\n\t\tvar uvsHash = {};\n\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\n\t\t\tvar hasMaterial = true;\n\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\tvar faceType = 0;\n\n\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\tfaces.push( faceType );\n\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\tfaces.push( face.materialIndex );\n\n\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t}\n\n\t\tfunction getNormalIndex( normal ) {\n\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\treturn normalsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getColorIndex( color ) {\n\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\tcolors.push( color.getHex() );\n\n\t\t\treturn colorsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getUvIndex( uv ) {\n\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\treturn uvsHash[ hash ];\n\n\t\t}\n\n\t\tdata.data = {};\n\n\t\tdata.data.vertices = vertices;\n\t\tdata.data.normals = normals;\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\tdata.data.faces = faces;\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t // Handle primitives\n\n\t\t var parameters = this.parameters;\n\n\t\t if ( parameters !== undefined ) {\n\n\t\t var values = [];\n\n\t\t for ( var key in parameters ) {\n\n\t\t values.push( parameters[ key ] );\n\n\t\t }\n\n\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t this.constructor.apply( geometry, values );\n\t\t return geometry;\n\n\t\t }\n\n\t\t return new this.constructor().copy( this );\n\t\t */\n\n\t\treturn new Geometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tvar i, il, j, jl, k, kl;\n\n\t\t// reset\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\t\tthis.lineDistances = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// vertices\n\n\t\tvar vertices = source.vertices;\n\n\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t}\n\n\t\t// colors\n\n\t\tvar colors = source.colors;\n\n\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t}\n\n\t\t// faces\n\n\t\tvar faces = source.faces;\n\n\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t}\n\n\t\t// face vertex uvs\n\n\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphTargets = source.morphTargets;\n\n\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tvar morphTarget = {};\n\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t// vertices\n\n\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// normals\n\n\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t}\n\n\t\t// morph normals\n\n\t\tvar morphNormals = source.morphNormals;\n\n\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\tvar morphNormal = {};\n\n\t\t\t// vertex normals\n\n\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// face normals\n\n\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t}\n\n\t\t// skin weights\n\n\t\tvar skinWeights = source.skinWeights;\n\n\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t}\n\n\t\t// skin indices\n\n\t\tvar skinIndices = source.skinIndices;\n\n\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t}\n\n\t\t// line distances\n\n\t\tvar lineDistances = source.lineDistances;\n\n\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tvar boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tvar boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction BufferAttribute( array, itemSize, normalized ) {\n\n\tif ( Array.isArray( array ) ) {\n\n\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t}\n\n\tthis.uuid = _Math.generateUUID();\n\tthis.name = '';\n\n\tthis.array = array;\n\tthis.itemSize = itemSize;\n\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\tthis.normalized = normalized === true;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.onUploadCallback = function () {};\n\n\tthis.version = 0;\n\n}\n\nObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\tset: function ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n} );\n\nObject.assign( BufferAttribute.prototype, {\n\n\tisBufferAttribute: true,\n\n\tsetArray: function ( array ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\n\t\tthis.array = array;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyArray: function ( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t},\n\n\tcopyColorsArray: function ( colors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\tvar color = colors[ i ];\n\n\t\t\tif ( color === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\tcolor = new Color();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = color.r;\n\t\t\tarray[ offset ++ ] = color.g;\n\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyIndicesArray: function ( indices ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\tvar index = indices[ i ];\n\n\t\t\tarray[ offset ++ ] = index.a;\n\t\t\tarray[ offset ++ ] = index.b;\n\t\t\tarray[ offset ++ ] = index.c;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector2sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector2();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector3sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector3();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector4sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector4();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize ];\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tonUpload: function ( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n} );\n\n//\n\nfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n}\n\nInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\nfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n}\n\nUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\nfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n}\n\nUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\nfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n}\n\nInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\nfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n}\n\nUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\nfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n}\n\nInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\nfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n}\n\nUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\nfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n}\n\nFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\nfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n}\n\nFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction DirectGeometry() {\n\n\tthis.indices = [];\n\tthis.vertices = [];\n\tthis.normals = [];\n\tthis.colors = [];\n\tthis.uvs = [];\n\tthis.uvs2 = [];\n\n\tthis.groups = [];\n\n\tthis.morphTargets = {};\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\t// this.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n}\n\nObject.assign( DirectGeometry.prototype, {\n\n\tcomputeGroups: function ( geometry ) {\n\n\t\tvar group;\n\t\tvar groups = [];\n\t\tvar materialIndex = undefined;\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// materials\n\n\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t}\n\n\t\t\t\tgroup = {\n\t\t\t\t\tstart: i * 3,\n\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( group !== undefined ) {\n\n\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\tgroups.push( group );\n\n\t\t}\n\n\t\tthis.groups = groups;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tvar faces = geometry.faces;\n\t\tvar vertices = geometry.vertices;\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t// morphs\n\n\t\tvar morphTargets = geometry.morphTargets;\n\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\tvar morphTargetsPosition;\n\n\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\tmorphTargetsPosition = [];\n\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsPosition[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t}\n\n\t\tvar morphNormals = geometry.morphNormals;\n\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\tvar morphTargetsNormal;\n\n\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\tmorphTargetsNormal = [];\n\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsNormal[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t}\n\n\t\t// skins\n\n\t\tvar skinIndices = geometry.skinIndices;\n\t\tvar skinWeights = geometry.skinWeights;\n\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t//\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t}\n\n\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar color = face.color;\n\n\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morphs\n\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t}\n\n\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeGroups( geometry );\n\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction arrayMax( array ) {\n\n\tif ( array.length === 0 ) return - Infinity;\n\n\tvar max = array[ 0 ];\n\n\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\tif ( array[ i ] > max ) max = array[ i ];\n\n\t}\n\n\treturn max;\n\n}\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\nfunction BufferGeometry() {\n\n\tObject.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'BufferGeometry';\n\n\tthis.index = null;\n\tthis.attributes = {};\n\n\tthis.morphAttributes = {};\n\n\tthis.groups = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\tthis.drawRange = { start: 0, count: Infinity };\n\n}\n\nBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: BufferGeometry,\n\n\tisBufferGeometry: true,\n\n\tgetIndex: function () {\n\n\t\treturn this.index;\n\n\t},\n\n\tsetIndex: function ( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t},\n\n\taddAttribute: function ( name, attribute ) {\n\n\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( name === 'index' ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\tthis.setIndex( attribute );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t},\n\n\tgetAttribute: function ( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t},\n\n\tremoveAttribute: function ( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t},\n\n\taddGroup: function ( start, count, materialIndex ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t} );\n\n\t},\n\n\tclearGroups: function () {\n\n\t\tthis.groups = [];\n\n\t},\n\n\tsetDrawRange: function ( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tmatrix.applyToBufferAttribute( position );\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tvar normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormalMatrix.applyToBufferAttribute( normal );\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj = new Object3D();\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tvar offset = this.boundingBox.getCenter().negate();\n\n\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\treturn offset;\n\n\t},\n\n\tsetFromObject: function ( object ) {\n\n\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t} else if ( object.isMesh ) {\n\n\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tvar position = [];\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t}\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\treturn this;\n\n\t},\n\n\tupdateFromObject: function ( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\tdirect = undefined;\n\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( direct === undefined ) {\n\n\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\tgeometry = direct;\n\n\t\t}\n\n\t\tvar attribute;\n\n\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.position;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.normal;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.color;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\tattribute = this.attributes.uv;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t},\n\n\tfromDirectGeometry: function ( geometry ) {\n\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t}\n\n\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t}\n\n\t\tif ( geometry.indices.length > 0 ) {\n\n\t\t\tvar TypeArray = arrayMax( geometry.indices ) > 65535 ? Uint32Array : Uint16Array;\n\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n\t\t}\n\n\t\t// groups\n\n\t\tthis.groups = geometry.groups;\n\n\t\t// morphs\n\n\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\tvar array = [];\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );\n\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// skinning\n\n\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t}\n\n\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tvar position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tvar box = new Box3();\n\t\tvar vector = new Vector3();\n\n\t\treturn function computeBoundingSphere() {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position ) {\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\tbox.setFromBufferAttribute( position );\n\t\t\t\tbox.getCenter( center );\n\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\tvector.x = position.getX( i );\n\t\t\t\t\tvector.y = position.getY( i );\n\t\t\t\t\tvector.z = position.getZ( i );\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\tcomputeFaceNormals: function () {\n\n\t\t// backwards compatibility\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tvar index = this.index;\n\t\tvar attributes = this.attributes;\n\t\tvar groups = this.groups;\n\n\t\tif ( attributes.position ) {\n\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar normals = attributes.normal.array;\n\n\t\t\tvar vA, vB, vC;\n\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tvar indices = index.array;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tthis.addGroup( 0, indices.length );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\t\t\tvar group = groups[ j ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t}\n\n\t},\n\n\tmerge: function ( geometry, offset ) {\n\n\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\tvar attribute1 = attributes[ key ];\n\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tnormalizeNormals: function () {\n\n\t\tvar vector = new Vector3();\n\n\t\treturn function normalizeNormals() {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\tvector.x = normals.getX( i );\n\t\t\t\tvector.y = normals.getY( i );\n\t\t\t\tvector.z = normals.getZ( i );\n\n\t\t\t\tvector.normalize();\n\n\t\t\t\tnormals.setXYZ( i, vector.x, vector.y, vector.z );\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\ttoNonIndexed: function () {\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar geometry2 = new BufferGeometry();\n\n\t\tvar indices = this.index.array;\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tvar index = 0, index2 = 0;\n\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tdata.data = { attributes: {} };\n\n\t\tvar index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: array\n\t\t\t};\n\n\t\t}\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\n\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: attribute.normalized\n\t\t\t};\n\n\t\t}\n\n\t\tvar groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tvar boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t // Handle primitives\n\n\t\t var parameters = this.parameters;\n\n\t\t if ( parameters !== undefined ) {\n\n\t\t var values = [];\n\n\t\t for ( var key in parameters ) {\n\n\t\t values.push( parameters[ key ] );\n\n\t\t }\n\n\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t this.constructor.apply( geometry, values );\n\t\t return geometry;\n\n\t\t }\n\n\t\t return new this.constructor().copy( this );\n\t\t */\n\n\t\treturn new BufferGeometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tvar name, i, l;\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tvar index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone() );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tvar attributes = source.attributes;\n\n\t\tfor ( name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tvar morphAttributes = source.morphAttributes;\n\n\t\tfor ( name in morphAttributes ) {\n\n\t\t\tvar array = [];\n\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// groups\n\n\t\tvar groups = source.groups;\n\n\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tvar boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tvar boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// BoxGeometry\n\nfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'BoxGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\tthis.mergeVertices();\n\n}\n\nBoxGeometry.prototype = Object.create( Geometry.prototype );\nBoxGeometry.prototype.constructor = BoxGeometry;\n\n// BoxBufferGeometry\n\nfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'BoxBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tvar scope = this;\n\n\twidth = width || 1;\n\theight = height || 1;\n\tdepth = depth || 1;\n\n\t// segments\n\n\twidthSegments = Math.floor( widthSegments ) || 1;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar numberOfVertices = 0;\n\tvar groupStart = 0;\n\n\t// build each side of the box geometry\n\n\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\tvar segmentWidth = width / gridX;\n\t\tvar segmentHeight = height / gridY;\n\n\t\tvar widthHalf = width / 2;\n\t\tvar heightHalf = height / 2;\n\t\tvar depthHalf = depth / 2;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar vertexCounter = 0;\n\t\tvar groupCount = 0;\n\n\t\tvar ix, iy;\n\n\t\tvar vector = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t// set values to correct vector component\n\n\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t// set values to correct vector component\n\n\t\t\t\tvector[ u ] = 0;\n\t\t\t\tvector[ v ] = 0;\n\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t// uvs\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t// counters\n\n\t\t\t\tvertexCounter += 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\t// 1. you need three indices to draw a single face\n\t\t// 2. a single segment consists of two faces\n\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t// increase counter\n\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t// calculate new start value for groups\n\n\t\tgroupStart += groupCount;\n\n\t\t// update total number of vertices\n\n\t\tnumberOfVertices += vertexCounter;\n\n\t}\n\n}\n\nBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// PlaneGeometry\n\nfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'PlaneGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\tthis.mergeVertices();\n\n}\n\nPlaneGeometry.prototype = Object.create( Geometry.prototype );\nPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n// PlaneBufferGeometry\n\nfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'PlaneBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\twidth = width || 1;\n\theight = height || 1;\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\n\tvar gridX = Math.floor( widthSegments ) || 1;\n\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\tvar gridX1 = gridX + 1;\n\tvar gridY1 = gridY + 1;\n\n\tvar segment_width = width / gridX;\n\tvar segment_height = height / gridY;\n\n\tvar ix, iy;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// generate vertices, normals and uvs\n\n\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\tvar y = iy * segment_height - height_half;\n\n\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\tuvs.push( ix / gridX );\n\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\tvar a = ix + gridX1 * iy;\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>\n * }\n */\n\nfunction MeshBasicMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshBasicMaterial';\n\n\tthis.color = new Color( 0xffffff ); // emissive\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshBasicMaterial.prototype = Object.create( Material.prototype );\nMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\nMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\nMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction ShaderMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'ShaderMaterial';\n\n\tthis.defines = {};\n\tthis.uniforms = {};\n\n\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\tthis.linewidth = 1;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false; // set to use scene fog\n\tthis.lights = false; // set to use scene lights\n\tthis.clipping = false; // set to use user-defined clipping planes\n\n\tthis.skinning = false; // set to use skinning attribute streams\n\tthis.morphTargets = false; // set to use morph targets\n\tthis.morphNormals = false; // set to use morph normals\n\n\tthis.extensions = {\n\t\tderivatives: false, // set to use derivatives\n\t\tfragDepth: false, // set to use fragment depth values\n\t\tdrawBuffers: false, // set to use draw buffers\n\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t};\n\n\t// When rendered geometry doesn't include these attributes but the material does,\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\tthis.defaultAttributeValues = {\n\t\t'color': [ 1, 1, 1 ],\n\t\t'uv': [ 0, 0 ],\n\t\t'uv2': [ 0, 0 ]\n\t};\n\n\tthis.index0AttributeName = undefined;\n\n\tif ( parameters !== undefined ) {\n\n\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n\nShaderMaterial.prototype = Object.create( Material.prototype );\nShaderMaterial.prototype.constructor = ShaderMaterial;\n\nShaderMaterial.prototype.isShaderMaterial = true;\n\nShaderMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.fragmentShader = source.fragmentShader;\n\tthis.vertexShader = source.vertexShader;\n\n\tthis.uniforms = UniformsUtils.clone( source.uniforms );\n\n\tthis.defines = source.defines;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\tthis.lights = source.lights;\n\tthis.clipping = source.clipping;\n\n\tthis.skinning = source.skinning;\n\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\tthis.extensions = source.extensions;\n\n\treturn this;\n\n};\n\nShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\tdata.uniforms = this.uniforms;\n\tdata.vertexShader = this.vertexShader;\n\tdata.fragmentShader = this.fragmentShader;\n\n\treturn data;\n\n};\n\n/**\n * @author bhouston / http://clara.io\n */\n\nfunction Ray( origin, direction ) {\n\n\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n}\n\nObject.assign( Ray.prototype, {\n\n\tset: function ( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector3();\n\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t},\n\n\tlookAt: function ( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\trecast: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function recast( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector3();\n\t\tresult.subVectors( point, this.origin );\n\t\tvar directionDistance = result.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn result.copy( this.origin );\n\n\t\t}\n\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t},\n\n\tdistanceSqToPoint: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn v1.distanceToSquared( point );\n\n\t\t};\n\n\t}(),\n\n\tdistanceSqToSegment: function () {\n\n\t\tvar segCenter = new Vector3();\n\t\tvar segDir = new Vector3();\n\t\tvar diff = new Vector3();\n\n\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\tvar c = diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t};\n\n\t}(),\n\n\tintersectSphere: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = v1.dot( this.direction );\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, optionalTarget );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t},\n\n\tdistanceToPlane: function ( plane ) {\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t},\n\n\tintersectPlane: function ( plane, optionalTarget ) {\n\n\t\tvar t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, optionalTarget );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t},\n\n\tintersectBox: function ( box, optionalTarget ) {\n\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tvar invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tvar origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n\t},\n\n\tintersectsBox: ( function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t};\n\n\t} )(),\n\n\tintersectTriangle: function () {\n\n\t\t// Compute the offset origin, edges, and normal.\n\t\tvar diff = new Vector3();\n\t\tvar edge1 = new Vector3();\n\t\tvar edge2 = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\tedge1.subVectors( b, a );\n\t\t\tedge2.subVectors( c, a );\n\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tdiff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix4: function ( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n */\n\nfunction Line3( start, end ) {\n\n\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n}\n\nObject.assign( Line3.prototype, {\n\n\tset: function ( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t},\n\n\tgetCenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector3();\n\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t},\n\n\tdelta: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector3();\n\t\treturn result.subVectors( this.end, this.start );\n\n\t},\n\n\tdistanceSq: function () {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t},\n\n\tdistance: function () {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tclosestPointToPointParameter: function () {\n\n\t\tvar startP = new Vector3();\n\t\tvar startEnd = new Vector3();\n\n\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\tstartP.subVectors( point, this.start );\n\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = _Math.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\tvar result = optionalTarget || new Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Triangle( a, b, c ) {\n\n\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n}\n\nObject.assign( Triangle, {\n\n\tnormal: function () {\n\n\t\tvar v0 = new Vector3();\n\n\t\treturn function normal( a, b, c, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tresult.subVectors( c, b );\n\t\t\tv0.subVectors( a, b );\n\t\t\tresult.cross( v0 );\n\n\t\t\tvar resultLengthSq = result.lengthSq();\n\t\t\tif ( resultLengthSq > 0 ) {\n\n\t\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn result.set( 0, 0, 0 );\n\n\t\t};\n\n\t}(),\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tbarycoordFromPoint: function () {\n\n\t\tvar v0 = new Vector3();\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\n\t\treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n\t\t\tv0.subVectors( c, a );\n\t\t\tv1.subVectors( b, a );\n\t\t\tv2.subVectors( point, a );\n\n\t\t\tvar dot00 = v0.dot( v0 );\n\t\t\tvar dot01 = v0.dot( v1 );\n\t\t\tvar dot02 = v0.dot( v2 );\n\t\t\tvar dot11 = v1.dot( v1 );\n\t\t\tvar dot12 = v1.dot( v2 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn result.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn result.set( 1 - u - v, v, u );\n\n\t\t};\n\n\t}(),\n\n\tcontainsPoint: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function containsPoint( point, a, b, c ) {\n\n\t\t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n\t\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n\t\t};\n\n\t}()\n\n} );\n\nObject.assign( Triangle.prototype, {\n\n\tset: function ( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t},\n\n\tarea: function () {\n\n\t\tvar v0 = new Vector3();\n\t\tvar v1 = new Vector3();\n\n\t\treturn function area() {\n\n\t\t\tv0.subVectors( this.c, this.b );\n\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t};\n\n\t}(),\n\n\tmidpoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Vector3();\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t},\n\n\tnormal: function ( optionalTarget ) {\n\n\t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tplane: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new Plane();\n\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t},\n\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n\t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t},\n\n\tclosestPointToPoint: function () {\n\n\t\tvar plane = new Plane();\n\t\tvar edgeList = [ new Line3(), new Line3(), new Line3() ];\n\t\tvar projectedPoint = new Vector3();\n\t\tvar closestPoint = new Vector3();\n\n\t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\tvar minDistance = Infinity;\n\n\t\t\t// project the point onto the plane of the triangle\n\n\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\tplane.projectPoint( point, projectedPoint );\n\n\t\t\t// check if the projection lies within the triangle\n\n\t\t\tif ( this.containsPoint( projectedPoint ) === true ) {\n\n\t\t\t\t// if so, this is the closest point\n\n\t\t\t\tresult.copy( projectedPoint );\n\n\t\t\t} else {\n\n\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n\t\t\t\tfor ( var i = 0; i < edgeList.length; i ++ ) {\n\n\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n\t\t\t\t\tif ( distance < minDistance ) {\n\n\t\t\t\t\t\tminDistance = distance;\n\n\t\t\t\t\t\tresult.copy( closestPoint );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\n\nfunction Mesh( geometry, material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Mesh';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.drawMode = TrianglesDrawMode;\n\n\tthis.updateMorphTargets();\n\n}\n\nMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Mesh,\n\n\tisMesh: true,\n\n\tsetDrawMode: function ( value ) {\n\n\t\tthis.drawMode = value;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tthis.drawMode = source.drawMode;\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tupdateMorphTargets: function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar m, ml, name;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\t\tname = morphTargets[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new Matrix4();\n\t\tvar ray = new Ray();\n\t\tvar sphere = new Sphere();\n\n\t\tvar vA = new Vector3();\n\t\tvar vB = new Vector3();\n\t\tvar vC = new Vector3();\n\n\t\tvar tempA = new Vector3();\n\t\tvar tempB = new Vector3();\n\t\tvar tempC = new Vector3();\n\n\t\tvar uvA = new Vector2();\n\t\tvar uvB = new Vector2();\n\t\tvar uvC = new Vector2();\n\n\t\tvar barycoord = new Vector3();\n\n\t\tvar intersectionPoint = new Vector3();\n\t\tvar intersectionPointWorld = new Vector3();\n\n\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\treturn uv1.clone();\n\n\t\t}\n\n\t\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\tvar intersect;\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t} else {\n\n\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t\t}\n\n\t\t\tif ( intersect === null ) return null;\n\n\t\t\tintersectionPointWorld.copy( point );\n\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\treturn {\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\tobject: object\n\t\t\t};\n\n\t\t}\n\n\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {\n\n\t\t\tvA.fromBufferAttribute( position, a );\n\t\t\tvB.fromBufferAttribute( position, b );\n\t\t\tvC.fromBufferAttribute( position, c );\n\n\t\t\tvar intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\tif ( intersection ) {\n\n\t\t\t\tif ( uv ) {\n\n\t\t\t\t\tuvA.fromBufferAttribute( uv, a );\n\t\t\t\t\tuvB.fromBufferAttribute( uv, b );\n\t\t\t\t\tuvC.fromBufferAttribute( uv, c );\n\n\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );\n\n\t\t\t\t}\n\n\t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n\t\t\t\tintersection.faceIndex = a;\n\n\t\t\t}\n\n\t\t\treturn intersection;\n\n\t\t}\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) return;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar i, l;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\tfor ( i = 0, l = index.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\tfor ( i = 0, l = position.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\ta = i;\n\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLBackground( renderer, state, geometries, premultipliedAlpha ) {\n\n\tvar clearColor = new Color( 0x000000 );\n\tvar clearAlpha = 0;\n\n\tvar planeCamera, planeMesh;\n\tvar boxMesh;\n\n\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\tvar background = scene.background;\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && background.isCubeTexture ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tuniforms: ShaderLib.cube.uniforms,\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: true,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.removeAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.removeAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\tgeometries.update( boxMesh.geometry );\n\n\t\t\t}\n\n\t\t\tboxMesh.material.uniforms.tCube.value = background;\n\n\t\t\trenderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeCamera === undefined ) {\n\n\t\t\t\tplaneCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t\t\t\t);\n\n\t\t\t\tgeometries.update( planeMesh.geometry );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.map = background;\n\n\t\t\t// TODO Push this to renderList\n\n\t\t\trenderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.program && b.program && a.program !== b.program ) {\n\n\t\treturn a.program.id - b.program.id;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction WebGLRenderList() {\n\n\tvar renderItems = [];\n\tvar renderItemsIndex = 0;\n\n\tvar opaque = [];\n\tvar transparent = [];\n\n\tfunction init() {\n\n\t\trenderItemsIndex = 0;\n\n\t\topaque.length = 0;\n\t\ttransparent.length = 0;\n\n\t}\n\n\tfunction push( object, geometry, material, z, group ) {\n\n\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tprogram: material.program,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.program = material.program;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\trenderItemsIndex ++;\n\n\t}\n\n\tfunction sort() {\n\n\t\tif ( opaque.length > 1 ) opaque.sort( painterSortStable );\n\t\tif ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );\n\n\t}\n\n\treturn {\n\t\topaque: opaque,\n\t\ttransparent: transparent,\n\n\t\tinit: init,\n\t\tpush: push,\n\n\t\tsort: sort\n\t};\n\n}\n\nfunction WebGLRenderLists() {\n\n\tvar lists = {};\n\n\tfunction get( scene, camera ) {\n\n\t\tvar hash = scene.id + ',' + camera.id;\n\t\tvar list = lists[ hash ];\n\n\t\tif ( list === undefined ) {\n\n\t\t\t// console.log( 'THREE.WebGLRenderLists:', hash );\n\n\t\t\tlist = new WebGLRenderList();\n\t\t\tlists[ hash ] = list;\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tlists = {};\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction absNumericalSort( a, b ) {\n\n\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n}\n\nfunction WebGLMorphtargets( gl ) {\n\n\tvar influencesList = {};\n\tvar morphInfluences = new Float32Array( 8 );\n\n\tfunction update( object, geometry, material, program ) {\n\n\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\tvar length = objectInfluences.length;\n\n\t\tvar influences = influencesList[ geometry.id ];\n\n\t\tif ( influences === undefined ) {\n\n\t\t\t// initialise list\n\n\t\t\tinfluences = [];\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t}\n\n\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t}\n\n\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t// Remove current morphAttributes\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar influence = influences[ i ];\n\n\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\tif ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\tif ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Collect influences\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar influence = influences[ i ];\n\n\t\t\tinfluence[ 0 ] = i;\n\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t}\n\n\t\tinfluences.sort( absNumericalSort );\n\n\t\t// Add morphAttributes\n\n\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\tvar influence = influences[ i ];\n\n\t\t\tif ( influence ) {\n\n\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\tif ( value ) {\n\n\t\t\t\t\tif ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\t\t\t\t\tif ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t}\n\n\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tvar type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfoRender.calls ++;\n\t\tinfoRender.vertices += count;\n\n\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\telse if ( mode === gl.POINTS ) infoRender.points += count;\n\n\t}\n\n\tfunction renderInstances( geometry, start, count ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\textension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );\n\n\t\tinfoRender.calls ++;\n\t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\telse if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLBufferRenderer( gl, extensions, infoRender ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfoRender.calls ++;\n\t\tinfoRender.vertices += count;\n\n\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\telse if ( mode === gl.POINTS ) infoRender.points += count;\n\n\t}\n\n\tfunction renderInstances( geometry, start, count ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar position = geometry.attributes.position;\n\n\t\tif ( position.isInterleavedBufferAttribute ) {\n\n\t\t\tcount = position.data.count;\n\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t} else {\n\n\t\t\textension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );\n\n\t\t}\n\n\t\tinfoRender.calls ++;\n\t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\telse if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLGeometries( gl, attributes, infoMemory ) {\n\n\tvar geometries = {};\n\tvar wireframeAttributes = {};\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tvar geometry = event.target;\n\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t}\n\n\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t}\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\t// TODO Remove duplicate code\n\n\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\tdelete wireframeAttributes[ geometry.id ];\n\n\t\t}\n\n\t\tattribute = wireframeAttributes[ buffergeometry.id ];\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\tdelete wireframeAttributes[ buffergeometry.id ];\n\n\t\t}\n\n\t\t//\n\n\t\tinfoMemory.geometries --;\n\n\t}\n\n\tfunction get( object, geometry ) {\n\n\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\tif ( buffergeometry ) return buffergeometry;\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tbuffergeometry = geometry;\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t}\n\n\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t}\n\n\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\tinfoMemory.geometries ++;\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction update( geometry ) {\n\n\t\tvar index = geometry.index;\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t}\n\n\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\tif ( attribute ) return attribute;\n\n\t\tvar indices = [];\n\n\t\tvar geometryIndex = geometry.index;\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t// console.time( 'wireframe' );\n\n\t\tif ( geometryIndex !== null ) {\n\n\t\t\tvar array = geometryIndex.array;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar array = geometryAttributes.position.array;\n\n\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tvar a = i + 0;\n\t\t\t\tvar b = i + 1;\n\t\t\t\tvar c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// console.timeEnd( 'wireframe' );\n\n\t\tattribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\n\t\tattributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\twireframeAttributes[ geometry.id ] = attribute;\n\n\t\treturn attribute;\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tupdate: update,\n\n\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction UniformsCache() {\n\n\tvar lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tvar uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLLights() {\n\n\tvar cache = new UniformsCache();\n\n\tvar state = {\n\n\t\thash: '',\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tdirectional: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\trectArea: [],\n\t\tpoint: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: []\n\n\t};\n\n\tvar vector3 = new Vector3();\n\tvar matrix4 = new Matrix4();\n\tvar matrix42 = new Matrix4();\n\n\tfunction setup( lights, shadows, camera ) {\n\n\t\tvar r = 0, g = 0, b = 0;\n\n\t\tvar directionalLength = 0;\n\t\tvar pointLength = 0;\n\t\tvar spotLength = 0;\n\t\tvar rectAreaLength = 0;\n\t\tvar hemiLength = 0;\n\n\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\n\t\t\tvar color = light.color;\n\t\t\tvar intensity = light.intensity;\n\t\t\tvar distance = light.distance;\n\n\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity;\n\t\t\t\tg += color.g * intensity;\n\t\t\t\tb += color.b * intensity;\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t// (a) intensity controls irradiance of entire light\n\t\t\t\tuniforms.color\n\t\t\t\t\t.copy( color )\n\t\t\t\t\t.multiplyScalar( intensity / ( light.width * light.height ) );\n\n\t\t\t\t// (b) intensity controls the radiance per light area\n\t\t\t\t// uniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t}\n\n\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tstate.directional.length = directionalLength;\n\t\tstate.spot.length = spotLength;\n\t\tstate.rectArea.length = rectAreaLength;\n\t\tstate.point.length = pointLength;\n\t\tstate.hemi.length = hemiLength;\n\n\t\t// TODO (sam-g-steel) why aren't we using join\n\t\tstate.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + shadows.length;\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tstate: state\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLObjects( geometries, infoRender ) {\n\n\tvar updateList = {};\n\n\tfunction update( object ) {\n\n\t\tvar frame = infoRender.frame;\n\n\t\tvar geometry = object.geometry;\n\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t// Update once per frame\n\n\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\n\n\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t}\n\n\t\t\tgeometries.update( buffergeometry );\n\n\t\t\tupdateList[ buffergeometry.id ] = frame;\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction clear() {\n\n\t\tupdateList = {};\n\n\t}\n\n\treturn {\n\n\t\tupdate: update,\n\t\tclear: clear\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction addLineNumbers( string ) {\n\n\tvar lines = string.split( '\\n' );\n\n\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t}\n\n\treturn lines.join( '\\n' );\n\n}\n\nfunction WebGLShader( gl, type, string ) {\n\n\tvar shader = gl.createShader( type );\n\n\tgl.shaderSource( shader, string );\n\tgl.compileShader( shader );\n\n\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t}\n\n\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t}\n\n\t// --enable-privileged-webgl-extension\n\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\treturn shader;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar programIdCount = 0;\n\nfunction getEncodingComponents( encoding ) {\n\n\tswitch ( encoding ) {\n\n\t\tcase LinearEncoding:\n\t\t\treturn [ 'Linear', '( value )' ];\n\t\tcase sRGBEncoding:\n\t\t\treturn [ 'sRGB', '( value )' ];\n\t\tcase RGBEEncoding:\n\t\t\treturn [ 'RGBE', '( value )' ];\n\t\tcase RGBM7Encoding:\n\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\tcase RGBM16Encoding:\n\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\tcase RGBDEncoding:\n\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\tcase GammaEncoding:\n\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\tdefault:\n\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t}\n\n}\n\nfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\tvar components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n}\n\nfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\tvar components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n}\n\nfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\tvar toneMappingName;\n\n\tswitch ( toneMapping ) {\n\n\t\tcase LinearToneMapping:\n\t\t\ttoneMappingName = 'Linear';\n\t\t\tbreak;\n\n\t\tcase ReinhardToneMapping:\n\t\t\ttoneMappingName = 'Reinhard';\n\t\t\tbreak;\n\n\t\tcase Uncharted2ToneMapping:\n\t\t\ttoneMappingName = 'Uncharted2';\n\t\t\tbreak;\n\n\t\tcase CineonToneMapping:\n\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t}\n\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n}\n\nfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\textensions = extensions || {};\n\n\tvar chunks = [\n\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t];\n\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n}\n\nfunction generateDefines( defines ) {\n\n\tvar chunks = [];\n\n\tfor ( var name in defines ) {\n\n\t\tvar value = defines[ name ];\n\n\t\tif ( value === false ) continue;\n\n\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t}\n\n\treturn chunks.join( '\\n' );\n\n}\n\nfunction fetchAttributeLocations( gl, program ) {\n\n\tvar attributes = {};\n\n\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\tvar info = gl.getActiveAttrib( program, i );\n\t\tvar name = info.name;\n\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t}\n\n\treturn attributes;\n\n}\n\nfunction filterEmptyLine( string ) {\n\n\treturn string !== '';\n\n}\n\nfunction replaceLightNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n}\n\nfunction parseIncludes( string ) {\n\n\tvar pattern = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n\tfunction replace( match, include ) {\n\n\t\tvar replace = ShaderChunk[ include ];\n\n\t\tif ( replace === undefined ) {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t\treturn parseIncludes( replace );\n\n\t}\n\n\treturn string.replace( pattern, replace );\n\n}\n\nfunction unrollLoops( string ) {\n\n\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\tfunction replace( match, start, end, snippet ) {\n\n\t\tvar unroll = '';\n\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t}\n\n\t\treturn unroll;\n\n\t}\n\n\treturn string.replace( pattern, replace );\n\n}\n\nfunction WebGLProgram( renderer, extensions, code, material, shader, parameters ) {\n\n\tvar gl = renderer.context;\n\n\tvar defines = material.defines;\n\n\tvar vertexShader = shader.vertexShader;\n\tvar fragmentShader = shader.fragmentShader;\n\n\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t}\n\n\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\tcase CubeReflectionMapping:\n\t\t\tcase CubeRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\tbreak;\n\n\t\t\tcase CubeUVReflectionMapping:\n\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\tbreak;\n\n\t\t\tcase EquirectangularReflectionMapping:\n\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\tbreak;\n\n\t\t\tcase SphericalReflectionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\tcase CubeRefractionMapping:\n\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tswitch ( material.combine ) {\n\n\t\t\tcase MultiplyOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\tbreak;\n\n\t\t\tcase MixOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\tbreak;\n\n\t\t\tcase AddOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t// console.log( 'building new program ' );\n\n\t//\n\n\tvar customExtensions = generateExtensions( material.extensions, parameters, extensions );\n\n\tvar customDefines = generateDefines( defines );\n\n\t//\n\n\tvar program = gl.createProgram();\n\n\tvar prefixVertex, prefixFragment;\n\n\tif ( material.isRawShaderMaterial ) {\n\n\t\tprefixVertex = [\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\tprefixVertex += '\\n';\n\n\t\t}\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\tprefixFragment += '\\n';\n\n\t\t}\n\n\t} else {\n\n\t\tprefixVertex = [\n\n\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\tparameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec3 normal;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t'\tattribute vec3 color;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t'\t#else',\n\n\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t'\t#endif',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t'#endif',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\t\t'#define UNION_CLIPPING_PLANES ' + ( parameters.numClippingPlanes - parameters.numClipIntersection ),\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\tparameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\tparameters.envMap && extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\n\n\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tvertexShader = parseIncludes( vertexShader );\n\tvertexShader = replaceLightNums( vertexShader, parameters );\n\n\tfragmentShader = parseIncludes( fragmentShader );\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n\tif ( ! material.isShaderMaterial ) {\n\n\t\tvertexShader = unrollLoops( vertexShader );\n\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t}\n\n\tvar vertexGlsl = prefixVertex + vertexShader;\n\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t// console.log( '*VERTEX*', vertexGlsl );\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\tgl.attachShader( program, glVertexShader );\n\tgl.attachShader( program, glFragmentShader );\n\n\t// Force a particular attribute to index 0.\n\n\tif ( material.index0AttributeName !== undefined ) {\n\n\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t} else if ( parameters.morphTargets === true ) {\n\n\t\t// programs with morphTargets displace position out of attribute 0\n\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t}\n\n\tgl.linkProgram( program );\n\n\tvar programLog = gl.getProgramInfoLog( program );\n\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n\tvar runnable = true;\n\tvar haveDiagnostics = true;\n\n\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\trunnable = false;\n\n\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t} else if ( programLog !== '' ) {\n\n\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\thaveDiagnostics = false;\n\n\t}\n\n\tif ( haveDiagnostics ) {\n\n\t\tthis.diagnostics = {\n\n\t\t\trunnable: runnable,\n\t\t\tmaterial: material,\n\n\t\t\tprogramLog: programLog,\n\n\t\t\tvertexShader: {\n\n\t\t\t\tlog: vertexLog,\n\t\t\t\tprefix: prefixVertex\n\n\t\t\t},\n\n\t\t\tfragmentShader: {\n\n\t\t\t\tlog: fragmentLog,\n\t\t\t\tprefix: prefixFragment\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t// clean up\n\n\tgl.deleteShader( glVertexShader );\n\tgl.deleteShader( glFragmentShader );\n\n\t// set up caching for uniform locations\n\n\tvar cachedUniforms;\n\n\tthis.getUniforms = function () {\n\n\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\tcachedUniforms = new WebGLUniforms( gl, program, renderer );\n\n\t\t}\n\n\t\treturn cachedUniforms;\n\n\t};\n\n\t// set up caching for attribute locations\n\n\tvar cachedAttributes;\n\n\tthis.getAttributes = function () {\n\n\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t}\n\n\t\treturn cachedAttributes;\n\n\t};\n\n\t// free resource\n\n\tthis.destroy = function () {\n\n\t\tgl.deleteProgram( program );\n\t\tthis.program = undefined;\n\n\t};\n\n\t// DEPRECATED\n\n\tObject.defineProperties( this, {\n\n\t\tuniforms: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\treturn this.getUniforms();\n\n\t\t\t}\n\t\t},\n\n\t\tattributes: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\treturn this.getAttributes();\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\n\t//\n\n\tthis.id = programIdCount ++;\n\tthis.code = code;\n\tthis.usedTimes = 1;\n\tthis.program = program;\n\tthis.vertexShader = glVertexShader;\n\tthis.fragmentShader = glFragmentShader;\n\n\treturn this;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\tvar programs = [];\n\n\tvar shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'phong',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow'\n\t};\n\n\tvar parameterNames = [\n\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\"\n\t];\n\n\n\tfunction allocateBones( object ) {\n\n\t\tvar skeleton = object.skeleton;\n\t\tvar bones = skeleton.bones;\n\n\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\tvar encoding;\n\n\t\tif ( ! map ) {\n\n\t\t\tencoding = LinearEncoding;\n\n\t\t} else if ( map.isTexture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t}\n\n\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\tencoding = GammaEncoding;\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\n\n\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\t\tvar precision = capabilities.precision;\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tvar parameters = {\n\n\t\t\tshaderID: shaderID,\n\n\t\t\tprecision: precision,\n\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\tenvMap: !! material.envMap,\n\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexColors: material.vertexColors,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: material.flatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: capabilities.floatVertexTextures,\n\n\t\t\tmorphTargets: material.morphTargets,\n\t\t\tmorphNormals: material.morphNormals,\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\talphaTest: material.alphaTest,\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t};\n\n\t\treturn parameters;\n\n\t};\n\n\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\tvar array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( material.fragmentShader );\n\t\t\tarray.push( material.vertexShader );\n\n\t\t}\n\n\t\tif ( material.defines !== undefined ) {\n\n\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t}\n\n\t\tarray.push( material.onBeforeCompile.toString() );\n\n\t\tarray.push( renderer.gammaOutput );\n\n\t\treturn array.join();\n\n\t};\n\n\tthis.acquireProgram = function ( material, shader, parameters, code ) {\n\n\t\tvar program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tvar programInfo = programs[ p ];\n\n\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\tprogram = programInfo;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, extensions, code, material, shader, parameters );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t};\n\n\tthis.releaseProgram = function ( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tvar i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t};\n\n\t// Exposed for resource monitoring & error feedback via renderer.info:\n\tthis.programs = programs;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, infoMemory ) {\n\n\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof window.WebGL2RenderingContext );\n\tvar _videoTextures = {};\n\n\t//\n\n\tfunction clampToMaxSize( image, maxSize ) {\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t// premultiplied alpha.\n\n\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo( image ) {\n\n\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction makePowerOfTwo( image ) {\n\n\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = _Math.floorPowerOfTwo( image.width );\n\t\t\tcanvas.height = _Math.floorPowerOfTwo( image.height );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {\n\n\t\treturn texture.generateMipmaps && isPowerOfTwo &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tvar texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\tdelete _videoTextures[ texture.id ];\n\n\t\t}\n\n\t\tinfoMemory.textures --;\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tvar renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t\tinfoMemory.textures --;\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t// cube texture\n\n\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t} else {\n\n\t\t\t// 2D texture\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\t// remove all webgl properties\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\tif ( ! renderTarget ) return;\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t}\n\n\t\tproperties.remove( renderTarget.texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tvar image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image.length === 6 ) {\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\tinfoMemory.textures ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\n\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t}\n\n\tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n\t\tvar extension;\n\n\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension ) {\n\n\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\t_videoTextures[ texture.id ] = texture;\n\n\t\t\t}\n\n\t\t\tinfoMemory.textures ++;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\timage = makePowerOfTwo( image );\n\n\t\t}\n\n\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\tglType = utils.convert( texture.type );\n\n\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t// populate depth texture with dummy data\n\n\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\tif ( ! _isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t} else if ( _isWebGL2 ) {\n\n\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t}\n\n\t\t\tif ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t}\n\n\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\tinfoMemory.textures ++;\n\n\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t} else {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tvar texture = renderTarget.texture;\n\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {\n\n\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t_gl.generateMipmap( target );\n\t\t\tstate.bindTexture( target, null );\n\n\t\t}\n\n\t}\n\n\tfunction updateVideoTextures() {\n\n\t\tfor ( var id in _videoTextures ) {\n\n\t\t\t_videoTextures[ id ].update();\n\n\t\t}\n\n\t}\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateVideoTextures = updateVideoTextures;\n\n}\n\n/**\n * @author fordacious / fordacious.github.io\n */\n\nfunction WebGLProperties() {\n\n\tvar properties = {};\n\n\tfunction get( object ) {\n\n\t\tvar uuid = object.uuid;\n\t\tvar map = properties[ uuid ];\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties[ uuid ] = map;\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tfunction remove( object ) {\n\n\t\tdelete properties[ object.uuid ];\n\n\t}\n\n\tfunction clear() {\n\n\t\tproperties = {};\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tremove: remove,\n\t\tclear: clear\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLState( gl, extensions, utils ) {\n\n\tfunction ColorBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar color = new Vector4();\n\t\tvar currentColorMask = null;\n\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar currentDepthMask = null;\n\t\tvar currentDepthFunc = null;\n\t\tvar currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( gl.DEPTH_TEST );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar currentStencilMask = null;\n\t\tvar currentStencilFunc = null;\n\t\tvar currentStencilRef = null;\n\t\tvar currentStencilFuncMask = null;\n\t\tvar currentStencilFail = null;\n\t\tvar currentStencilZFail = null;\n\t\tvar currentStencilZPass = null;\n\t\tvar currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\tenable( gl.STENCIL_TEST );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar colorBuffer = new ColorBuffer();\n\tvar depthBuffer = new DepthBuffer();\n\tvar stencilBuffer = new StencilBuffer();\n\n\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\tvar capabilities = {};\n\n\tvar compressedTextureFormats = null;\n\n\tvar currentProgram = null;\n\n\tvar currentBlending = null;\n\tvar currentBlendEquation = null;\n\tvar currentBlendSrc = null;\n\tvar currentBlendDst = null;\n\tvar currentBlendEquationAlpha = null;\n\tvar currentBlendSrcAlpha = null;\n\tvar currentBlendDstAlpha = null;\n\tvar currentPremultipledAlpha = false;\n\n\tvar currentFlipSided = null;\n\tvar currentCullFace = null;\n\n\tvar currentLineWidth = null;\n\n\tvar currentPolygonOffsetFactor = null;\n\tvar currentPolygonOffsetUnits = null;\n\n\tvar maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\n\n\tvar version = parseFloat( /^WebGL\\ ([0-9])/.exec( gl.getParameter( gl.VERSION ) )[ 1 ] );\n\tvar lineWidthAvailable = parseFloat( version ) >= 1.0;\n\n\tvar currentTextureSlot = null;\n\tvar currentBoundTextures = {};\n\n\tvar currentScissor = new Vector4();\n\tvar currentViewport = new Vector4();\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tvar texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tvar emptyTextures = {};\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( gl.DEPTH_TEST );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( gl.CULL_FACE );\n\n\tenable( gl.BLEND );\n\tsetBlending( NormalBlending );\n\n\t//\n\n\tfunction initAttributes() {\n\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\tattributeDivisors[ attribute ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction enable( id ) {\n\n\t\tif ( capabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tcapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( capabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tcapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction getCompressedTextureFormats() {\n\n\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\tcompressedTextureFormats = [];\n\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn compressedTextureFormats;\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending !== NoBlending ) {\n\n\t\t\tenable( gl.BLEND );\n\n\t\t} else {\n\n\t\t\tdisable( gl.BLEND );\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\tcase AdditiveBlending:\n\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase SubtractiveBlending:\n\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MultiplyBlending:\n\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t} else {\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( gl.CULL_FACE )\n\t\t\t: enable( gl.CULL_FACE );\n\n\t\tvar flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\tmaterial.transparent === true\n\t\t\t? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n\t\t\t: setBlending( NoBlending );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tdisable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === null ) {\n\n\t\t\tactiveTexture();\n\n\t\t}\n\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcapabilities = {};\n\n\t\tcompressedTextureFormats = null;\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlending = null;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\tenable: enable,\n\t\tdisable: disable,\n\t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\ttexImage2D: texImage2D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\tvar maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tvar maxPrecision = getMaxPrecision( precision );\n\n\tif ( maxPrecision !== precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\tprecision = maxPrecision;\n\n\t}\n\n\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\tvar vertexTextures = maxVertexTextures > 0;\n\tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\treturn {\n\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\tprecision: precision,\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\tmaxTextures: maxTextures,\n\t\tmaxVertexTextures: maxVertexTextures,\n\t\tmaxTextureSize: maxTextureSize,\n\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\tmaxAttributes: maxAttributes,\n\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\tmaxVaryings: maxVaryings,\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\tvertexTextures: vertexTextures,\n\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\tfloatVertexTextures: floatVertexTextures\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author tschw\n */\n\nfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\tCamera.call( this );\n\n\tthis.type = 'PerspectiveCamera';\n\n\tthis.fov = fov !== undefined ? fov : 50;\n\tthis.zoom = 1;\n\n\tthis.near = near !== undefined ? near : 0.1;\n\tthis.far = far !== undefined ? far : 2000;\n\tthis.focus = 10;\n\n\tthis.aspect = aspect !== undefined ? aspect : 1;\n\tthis.view = null;\n\n\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\tthis.updateProjectionMatrix();\n\n}\n\nPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\tconstructor: PerspectiveCamera,\n\n\tisPerspectiveCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength: function ( focalLength ) {\n\n\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength: function () {\n\n\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t},\n\n\tgetEffectiveFOV: function () {\n\n\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t},\n\n\tgetFilmWidth: function () {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t},\n\n\tgetFilmHeight: function () {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t},\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   var w = 1920;\n\t *   var h = 1080;\n\t *   var fullWidth = w * 3;\n\t *   var fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function () {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar near = this.near,\n\t\t\ttop = near * Math.tan(\n\t\t\t\t_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\theight = 2 * top,\n\t\t\twidth = this.aspect * height,\n\t\t\tleft = - 0.5 * width,\n\t\t\tview = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tvar skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction ArrayCamera( array ) {\n\n\tPerspectiveCamera.call( this );\n\n\tthis.cameras = array || [];\n\n}\n\nArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\tconstructor: ArrayCamera,\n\n\tisArrayCamera: true\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebVRManager( renderer ) {\n\n\tvar scope = this;\n\n\tvar device = null;\n\tvar frameData = null;\n\n\tvar poseTarget = null;\n\n\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\n\n\t\tframeData = new window.VRFrameData();\n\n\t}\n\n\tvar matrixWorldInverse = new Matrix4();\n\n\tvar cameraL = new PerspectiveCamera();\n\tcameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );\n\tcameraL.layers.enable( 1 );\n\n\tvar cameraR = new PerspectiveCamera();\n\tcameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );\n\tcameraR.layers.enable( 2 );\n\n\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\tcameraVR.layers.enable( 1 );\n\tcameraVR.layers.enable( 2 );\n\n\t//\n\n\tvar currentSize, currentPixelRatio;\n\n\tfunction onVRDisplayPresentChange() {\n\n\t\tif ( device !== null && device.isPresenting ) {\n\n\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\n\t\t\tvar renderWidth = eyeParameters.renderWidth;\n\t\t\tvar renderHeight = eyeParameters.renderHeight;\n\n\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\n\t\t\tcurrentSize = renderer.getSize();\n\n\t\t\trenderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );\n\n\t\t} else if ( scope.enabled ) {\n\n\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\n\n\t\t}\n\n\t}\n\n\tif ( typeof window !== 'undefined' ) {\n\n\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\n\n\t}\n\n\t//\n\n\tthis.enabled = false;\n\n\tthis.getDevice = function () {\n\n\t\treturn device;\n\n\t};\n\n\tthis.setDevice = function ( value ) {\n\n\t\tif ( value !== undefined ) device = value;\n\n\t};\n\n\tthis.setPoseTarget = function ( object ) {\n\n\t\tif ( object !== undefined ) poseTarget = object;\n\n\t};\n\n\tthis.getCamera = function ( camera ) {\n\n\t\tif ( device === null ) return camera;\n\n\t\tdevice.depthNear = camera.near;\n\t\tdevice.depthFar = camera.far;\n\n\t\tdevice.getFrameData( frameData );\n\n\t\t//\n\n\t\tvar pose = frameData.pose;\n\t\tvar poseObject = poseTarget !== null ? poseTarget : camera;\n\n\t\tif ( pose.position !== null ) {\n\n\t\t\tposeObject.position.fromArray( pose.position );\n\n\t\t} else {\n\n\t\t\tposeObject.position.set( 0, 0, 0 );\n\n\t\t}\n\n\t\tif ( pose.orientation !== null ) {\n\n\t\t\tposeObject.quaternion.fromArray( pose.orientation );\n\n\t\t}\n\n\t\tposeObject.updateMatrixWorld();\n\n\t\tif ( device.isPresenting === false ) return camera;\n\n\t\t//\n\n\t\tcameraL.near = camera.near;\n\t\tcameraR.near = camera.near;\n\n\t\tcameraL.far = camera.far;\n\t\tcameraR.far = camera.far;\n\n\t\tcameraVR.matrixWorld.copy( camera.matrixWorld );\n\t\tcameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );\n\n\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\n\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\n\n\t\tvar parent = poseObject.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\n\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\n\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\n\n\t\t}\n\n\t\t// envMap and Mirror needs camera.matrixWorld\n\n\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\n\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\n\n\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\n\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\n\n\t\t// HACK @mrdoob\n\t\t// https://github.com/w3c/webvr/issues/203\n\n\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t//\n\n\t\tvar layers = device.getLayers();\n\n\t\tif ( layers.length ) {\n\n\t\t\tvar layer = layers[ 0 ];\n\n\t\t\tif ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {\n\n\t\t\t\tcameraL.bounds.fromArray( layer.leftBounds );\n\n\t\t\t}\n\n\t\t\tif ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {\n\n\t\t\t\tcameraR.bounds.fromArray( layer.rightBounds );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn cameraVR;\n\n\t};\n\n\tthis.submitFrame = function () {\n\n\t\tif ( device && device.isPresenting ) device.submitFrame();\n\n\t};\n\n\tthis.dispose = function () {\n\n\t\tif ( typeof window !== 'undefined' ) {\n\n\t\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\n\n\t\t}\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLExtensions( gl ) {\n\n\tvar extensions = {};\n\n\treturn {\n\n\t\tget: function ( name ) {\n\n\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\treturn extensions[ name ];\n\n\t\t\t}\n\n\t\t\tvar extension;\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t}\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\textensions[ name ] = extension;\n\n\t\t\treturn extension;\n\n\t\t}\n\n\t};\n\n}\n\n/**\n * @author tschw\n */\n\nfunction WebGLClipping() {\n\n\tvar scope = this,\n\n\t\tglobalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false,\n\n\t\tplane = new Plane(),\n\t\tviewNormalMatrix = new Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\tthis.numIntersection = 0;\n\n\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\tvar enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function () {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function () {\n\n\t\trenderingShadows = false;\n\t\tresetGlobalState();\n\n\t};\n\n\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tcache.clippingState = dstArray;\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\t\tscope.numIntersection = 0;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\tdstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\n\t\treturn dstArray;\n\n\t}\n\n}\n\n/**\n * @author thespite / http://www.twitter.com/thespite\n */\n\nfunction WebGLUtils( gl, extensions ) {\n\n\tfunction convert( p ) {\n\n\t\tvar extension;\n\n\t\tif ( p === RepeatWrapping ) return gl.REPEAT;\n\t\tif ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;\n\t\tif ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;\n\n\t\tif ( p === NearestFilter ) return gl.NEAREST;\n\t\tif ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;\n\t\tif ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;\n\n\t\tif ( p === LinearFilter ) return gl.LINEAR;\n\t\tif ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;\n\t\tif ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;\n\n\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\n\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\tif ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;\n\n\t\tif ( p === ByteType ) return gl.BYTE;\n\t\tif ( p === ShortType ) return gl.SHORT;\n\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\n\t\tif ( p === IntType ) return gl.INT;\n\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\n\t\tif ( p === FloatType ) return gl.FLOAT;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return gl.ALPHA;\n\t\tif ( p === RGBFormat ) return gl.RGB;\n\t\tif ( p === RGBAFormat ) return gl.RGBA;\n\t\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\n\t\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\n\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\n\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\n\n\t\tif ( p === AddEquation ) return gl.FUNC_ADD;\n\t\tif ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;\n\t\tif ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;\n\n\t\tif ( p === ZeroFactor ) return gl.ZERO;\n\t\tif ( p === OneFactor ) return gl.ONE;\n\t\tif ( p === SrcColorFactor ) return gl.SRC_COLOR;\n\t\tif ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;\n\t\tif ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;\n\t\tif ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;\n\t\tif ( p === DstAlphaFactor ) return gl.DST_ALPHA;\n\t\tif ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;\n\n\t\tif ( p === DstColorFactor ) return gl.DST_COLOR;\n\t\tif ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;\n\t\tif ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t}\n\n\t\tif ( p === MinEquation || p === MaxEquation ) {\n\n\t\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t\t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t}\n\n\t\treturn 0;\n\n\t}\n\n\treturn { convert: convert };\n\n}\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n * @author tschw\n */\n\nfunction WebGLRenderer( parameters ) {\n\n\tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';\n\n\tvar lightsArray = [];\n\tvar shadowsArray = [];\n\n\tvar currentRenderList = null;\n\n\tvar spritesArray = [];\n\tvar flaresArray = [];\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\tthis.context = null;\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.gammaInput = false;\n\tthis.gammaOutput = false;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = LinearToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\tthis.toneMappingWhitePoint = 1.0;\n\n\t// morphs\n\n\tthis.maxMorphTargets = 8;\n\tthis.maxMorphNormals = 4;\n\n\t// internal properties\n\n\tvar _this = this,\n\n\t\t_isContextLost = false,\n\n\t\t// internal state cache\n\n\t\t_currentRenderTarget = null,\n\t\t_currentFramebuffer = null,\n\t\t_currentMaterialId = - 1,\n\t\t_currentGeometryProgram = '',\n\n\t\t_currentCamera = null,\n\t\t_currentArrayCamera = null,\n\n\t\t_currentViewport = new Vector4(),\n\t\t_currentScissor = new Vector4(),\n\t\t_currentScissorTest = null,\n\n\t\t//\n\n\t\t_usedTextureUnits = 0,\n\n\t\t//\n\n\t\t_width = _canvas.width,\n\t\t_height = _canvas.height,\n\n\t\t_pixelRatio = 1,\n\n\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t_scissorTest = false,\n\n\t\t// frustum\n\n\t\t_frustum = new Frustum(),\n\n\t\t// clipping\n\n\t\t_clipping = new WebGLClipping(),\n\t\t_clippingEnabled = false,\n\t\t_localClippingEnabled = false,\n\n\t\t// camera matrices cache\n\n\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t_vector3 = new Vector3(),\n\n\t\t// info\n\n\t\t_infoMemory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t},\n\n\t\t_infoRender = {\n\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\tvertices: 0,\n\t\t\tfaces: 0,\n\t\t\tpoints: 0\n\n\t\t};\n\n\tthis.info = {\n\n\t\trender: _infoRender,\n\t\tmemory: _infoMemory,\n\t\tprograms: null\n\n\t};\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\t// initialize\n\n\tvar _gl;\n\n\ttry {\n\n\t\tvar contextAttributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\tpowerPreference: _powerPreference\n\t\t};\n\n\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\n\t}\n\n\tvar extensions, capabilities, state;\n\tvar properties, textures, attributes, geometries, objects, lights;\n\tvar programCache, renderLists;\n\n\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\tvar flareRenderer, spriteRenderer;\n\n\tvar utils;\n\n\tfunction initGLContext() {\n\n\t\textensions = new WebGLExtensions( _gl );\n\t\textensions.get( 'WEBGL_depth_texture' );\n\t\textensions.get( 'OES_texture_float' );\n\t\textensions.get( 'OES_texture_float_linear' );\n\t\textensions.get( 'OES_texture_half_float' );\n\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\textensions.get( 'OES_standard_derivatives' );\n\t\textensions.get( 'OES_element_index_uint' );\n\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tutils = new WebGLUtils( _gl, extensions );\n\n\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\tstate = new WebGLState( _gl, extensions, utils );\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\tproperties = new WebGLProperties();\n\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, _infoMemory );\n\t\tattributes = new WebGLAttributes( _gl );\n\t\tgeometries = new WebGLGeometries( _gl, attributes, _infoMemory );\n\t\tobjects = new WebGLObjects( geometries, _infoRender );\n\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\tlights = new WebGLLights();\n\t\trenderLists = new WebGLRenderLists();\n\n\t\tbackground = new WebGLBackground( _this, state, geometries, _premultipliedAlpha );\n\n\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n\t\tflareRenderer = new WebGLFlareRenderer( _this, _gl, state, textures, capabilities );\n\t\tspriteRenderer = new WebGLSpriteRenderer( _this, _gl, state, textures, capabilities );\n\n\t\t_this.info.programs = programCache.programs;\n\n\t\t_this.context = _gl;\n\t\t_this.capabilities = capabilities;\n\t\t_this.extensions = extensions;\n\t\t_this.properties = properties;\n\t\t_this.renderLists = renderLists;\n\t\t_this.state = state;\n\n\t}\n\n\tinitGLContext();\n\n\t// vr\n\n\tvar vr = new WebVRManager( _this );\n\n\tthis.vr = vr;\n\n\t// shadow map\n\n\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\tthis.shadowMap = shadowMap;\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.loseContext();\n\n\t};\n\n\tthis.forceContextRestore = function () {\n\n\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.restoreContext();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _width, _height, false );\n\n\t};\n\n\tthis.getSize = function () {\n\n\t\treturn {\n\t\t\twidth: _width,\n\t\t\theight: _height\n\t\t};\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\tvar device = vr.getDevice();\n\n\t\tif ( device && device.isPresenting ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = width * _pixelRatio;\n\t\t_canvas.height = height * _pixelRatio;\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getDrawingBufferSize = function () {\n\n\t\treturn {\n\t\t\twidth: _width * _pixelRatio,\n\t\t\theight: _height * _pixelRatio\n\t\t};\n\n\t};\n\n\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_pixelRatio = pixelRatio;\n\n\t\t_canvas.width = width * pixelRatio;\n\t\t_canvas.height = height * pixelRatio;\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t_viewport.set( x, _height - y - height, width, height );\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t_scissor.set( x, _height - y - height, width, height );\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function () {\n\n\t\treturn background.getClearColor();\n\n\t};\n\n\tthis.setClearColor = function () {\n\n\t\tbackground.setClearColor.apply( background, arguments );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn background.getClearAlpha();\n\n\t};\n\n\tthis.setClearAlpha = function () {\n\n\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tvar bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\tthis.setRenderTarget( renderTarget );\n\t\tthis.clear( color, depth, stencil );\n\n\t};\n\n\t//\n\n\tthis.dispose = function () {\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\trenderLists.dispose();\n\n\t\tvr.dispose();\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t_isContextLost = true;\n\n\t}\n\n\tfunction onContextRestore( /* event */ ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t_isContextLost = false;\n\n\t\tinitGLContext();\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tvar material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReference( material );\n\n\t\tproperties.remove( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReference( material ) {\n\n\t\tvar programInfo = properties.get( material ).program;\n\n\t\tmaterial.program = undefined;\n\n\t\tif ( programInfo !== undefined ) {\n\n\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tfunction renderObjectImmediate( object, program, material ) {\n\n\t\tobject.render( function ( object ) {\n\n\t\t\t_this.renderBufferImmediate( object, program, material );\n\n\t\t} );\n\n\t}\n\n\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\tstate.initAttributes();\n\n\t\tvar buffers = properties.get( object );\n\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tif ( object.hasPositions ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasNormals ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n\t\t\tif ( ! material.isMeshPhongMaterial &&\n\t\t\t\t! material.isMeshStandardMaterial &&\n\t\t\t\t! material.isMeshNormalMaterial &&\n\t\t\t\tmaterial.flatShading === true ) {\n\n\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n\t\t\t\t\tvar array = object.normalArray;\n\n\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\tarray[ i + 2 ] = nz;\n\n\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\tarray[ i + 5 ] = nz;\n\n\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\tarray[ i + 8 ] = nz;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.normal );\n\n\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.uv );\n\n\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.color );\n\n\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\tobject.count = 0;\n\n\t};\n\n\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\tvar program = setProgram( camera, fog, material, object );\n\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );\n\n\t\tvar updateBuffers = false;\n\n\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t//\n\n\t\tvar index = geometry.index;\n\t\tvar position = geometry.attributes.position;\n\t\tvar rangeFactor = 1;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\tvar attribute;\n\t\tvar renderer = bufferRenderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattribute = attributes.get( index );\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( attribute );\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar dataCount = 0;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdataCount = index.count;\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\tdataCount = position.count;\n\n\t\t}\n\n\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\t//\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\tcase TrianglesDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TriangleStripDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TriangleFanDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t}\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t}\n\n\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( startIndex === undefined ) startIndex = 0;\n\n\t\tstate.initAttributes();\n\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( var name in programAttributes ) {\n\n\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, ( startIndex * stride + offset ) * bytesPerElement );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t}\n\n\t// Compile\n\n\tthis.compile = function ( scene, camera ) {\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object.isLight ) {\n\n\t\t\t\tlightsArray.push( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tshadowsArray.push( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object.material ) {\n\n\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t};\n\n\t// Animation Loop\n\n\tvar isAnimating = false;\n\tvar onAnimationFrame = null;\n\n\tfunction start() {\n\n\t\tif ( isAnimating ) return;\n\n\t\tvar device = vr.getDevice();\n\n\t\tif ( device && device.isPresenting ) {\n\n\t\t\tdevice.requestAnimationFrame( loop );\n\n\t\t} else {\n\n\t\t\twindow.requestAnimationFrame( loop );\n\n\t\t}\n\n\t\tisAnimating = true;\n\n\t}\n\n\tfunction loop( time ) {\n\n\t\tif ( onAnimationFrame !== null ) onAnimationFrame( time );\n\n\t\tvar device = vr.getDevice();\n\n\t\tif ( device && device.isPresenting ) {\n\n\t\t\tdevice.requestAnimationFrame( loop );\n\n\t\t} else {\n\n\t\t\twindow.requestAnimationFrame( loop );\n\n\t\t}\n\n\t}\n\n\tthis.animate = function ( callback ) {\n\n\t\tonAnimationFrame = callback;\n\t\tstart();\n\n\t};\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( _isContextLost ) return;\n\n\t\t// reset caching for this frame\n\n\t\t_currentGeometryProgram = '';\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tif ( vr.enabled ) {\n\n\t\t\tcamera = vr.getCamera( camera );\n\n\t\t}\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\n\t\tspritesArray.length = 0;\n\t\tflaresArray.length = 0;\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\tcurrentRenderList.init();\n\n\t\tprojectObject( scene, camera, _this.sortObjects );\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\tcurrentRenderList.sort();\n\n\t\t}\n\n\t\t//\n\n\t\ttextures.updateVideoTextures();\n\n\t\t//\n\n\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t//\n\n\t\t_infoRender.frame ++;\n\t\t_infoRender.calls = 0;\n\t\t_infoRender.vertices = 0;\n\t\t_infoRender.faces = 0;\n\t\t_infoRender.points = 0;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\trenderTarget = null;\n\n\t\t}\n\n\t\tthis.setRenderTarget( renderTarget );\n\n\t\t//\n\n\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t// render scene\n\n\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\tif ( scene.overrideMaterial ) {\n\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );\n\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );\n\n\t\t} else {\n\n\t\t\t// opaque pass (front-to-back order)\n\n\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );\n\n\t\t\t// transparent pass (back-to-front order)\n\n\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );\n\n\t\t}\n\n\t\t// custom renderers\n\n\t\tspriteRenderer.render( spritesArray, scene, camera );\n\t\tflareRenderer.render( flaresArray, scene, camera, _currentViewport );\n\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\tif ( renderTarget ) {\n\n\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t}\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.buffers.depth.setTest( true );\n\t\tstate.buffers.depth.setMask( true );\n\t\tstate.buffers.color.setMask( true );\n\n\t\tstate.setPolygonOffset( false );\n\n\t\tif ( vr.enabled ) {\n\n\t\t\tvr.submitFrame();\n\n\t\t}\n\n\t\t// _gl.finish();\n\n\t};\n\n\t/*\n\t// TODO Duplicated code (Frustum)\n\n\tvar _sphere = new Sphere();\n\n\tfunction isObjectViewable( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null )\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere ).\n\t\tapplyMatrix4( object.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSpriteViewable( sprite ) {\n\n\t\t_sphere.center.set( 0, 0, 0 );\n\t\t_sphere.radius = 0.7071067811865476;\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSphereViewable( sphere ) {\n\n\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\tif ( numPlanes === 0 ) return true;\n\n\t\tvar planes = _this.clippingPlanes,\n\n\t\t\tcenter = sphere.center,\n\t\t\tnegRad = - sphere.radius,\n\t\t\ti = 0;\n\n\t\tdo {\n\n\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t} while ( ++ i !== numPlanes );\n\n\t\treturn true;\n\n\t}\n\t*/\n\n\tfunction projectObject( object, camera, sortObjects ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tvar visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isLight ) {\n\n\t\t\t\tlightsArray.push( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tshadowsArray.push( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tspritesArray.push( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLensFlare ) {\n\n\t\t\t\tflaresArray.push( object );\n\n\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentRenderList.push( object, null, object.material, _vector3.z, null );\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, sortObjects );\n\n\t\t}\n\n\t}\n\n\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\tvar object = renderItem.object;\n\t\t\tvar geometry = renderItem.geometry;\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\tvar group = renderItem.group;\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\tvar bounds = camera2.bounds;\n\n\t\t\t\t\t\tvar x = bounds.x * _width;\n\t\t\t\t\t\tvar y = bounds.y * _height;\n\t\t\t\t\t\tvar width = bounds.z * _width;\n\t\t\t\t\t\tvar height = bounds.w * _height;\n\n\t\t\t\t\t\tstate.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );\n\n\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\tvar program = setProgram( camera, scene.fog, material, object );\n\n\t\t\t_currentGeometryProgram = '';\n\n\t\t\trenderObjectImmediate( object, program, material );\n\n\t\t} else {\n\n\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\n\n\t\t}\n\n\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\t}\n\n\tfunction initMaterial( material, fog, object ) {\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tvar parameters = programCache.getParameters(\n\t\t\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\n\n\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\tvar program = materialProperties.program;\n\t\tvar programChange = true;\n\n\t\tif ( program === undefined ) {\n\n\t\t\t// new material\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t} else if ( program.code !== code ) {\n\n\t\t\t// changed glsl or parameters\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t// same glsl and uniform list\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// only rebuild uniform list\n\t\t\tprogramChange = false;\n\n\t\t}\n\n\t\tif ( programChange ) {\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tmaterial.onBeforeCompile( materialProperties.shader );\n\n\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, code );\n\n\t\t\tmaterialProperties.program = program;\n\t\t\tmaterial.program = program;\n\n\t\t}\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tif ( material.morphTargets ) {\n\n\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.morphNormals ) {\n\n\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar uniforms = materialProperties.shader.uniforms;\n\n\t\tif ( ! material.isShaderMaterial &&\n\t\t\t! material.isRawShaderMaterial ||\n\t\t\tmaterial.clipping === true ) {\n\n\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t}\n\n\t\tmaterialProperties.fog = fog;\n\n\t\t// store the light setup it was created for\n\n\t\tmaterialProperties.lightsHash = lights.state.hash;\n\n\t\tif ( material.lights ) {\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t}\n\n\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\tuniformsList =\n\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t}\n\n\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t_usedTextureUnits = 0;\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tif ( _clippingEnabled ) {\n\n\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\tvar useCache =\n\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\t_clipping.setState(\n\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.needsUpdate === false ) {\n\n\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t} else if ( material.lights && materialProperties.lightsHash !== lights.state.hash ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.needsUpdate ) {\n\n\t\t\tinitMaterial( material, fog, object );\n\t\t\tmaterial.needsUpdate = false;\n\n\t\t}\n\n\t\tvar refreshProgram = false;\n\t\tvar refreshMaterial = false;\n\t\tvar refreshLights = false;\n\n\t\tvar program = materialProperties.program,\n\t\t\tp_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.shader.uniforms;\n\n\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\t\t\t// Avoid unneeded uniform updates per ArrayCamera's sub-camera\n\n\t\t\tif ( _currentCamera !== ( _currentArrayCamera || camera ) ) {\n\n\t\t\t\t_currentCamera = ( _currentArrayCamera || camera );\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t// not sure why, but otherwise weird things happen\n\n\t\tif ( material.skinning ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tvar skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\tsize = _Math.ceilPowerOfTwo( size );\n\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\tif ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\tm_uniforms.color.value = material.color;\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t}\n\n\t\t\t// RectAreaLight Texture\n\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\tif ( m_uniforms.ltcMat !== undefined ) m_uniforms.ltcMat.value = UniformsLib.LTC_MAT_TEXTURE;\n\t\t\tif ( m_uniforms.ltcMag !== undefined ) m_uniforms.ltcMag.value = UniformsLib.LTC_MAG_TEXTURE;\n\n\t\t\tWebGLUniforms.upload(\n\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t}\n\n\n\t\t// common matrices\n\n\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\treturn program;\n\n\t}\n\n\t// Uniforms (refresh uniforms objects)\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\tuniforms.envMap.value = material.envMap;\n\n\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. normal map\n\t\t// 4. bump map\n\t\t// 5. alpha map\n\t\t// 6. emissive map\n\n\t\tvar uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tvar offset = uvScaleMap.offset;\n\t\t\t\tvar repeat = uvScaleMap.repeat;\n\t\t\t\tvar rotation = uvScaleMap.rotation;\n\t\t\t\tvar center = uvScaleMap.center;\n\n\t\t\t\tuvScaleMap.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\tuniforms.scale.value = _height * 0.5;\n\n\t\tuniforms.map.value = material.map;\n\n\t\tif ( material.map !== null ) {\n\n\t\t\tif ( material.map.matrixAutoUpdate === true ) {\n\n\t\t\t\tvar offset = material.map.offset;\n\t\t\t\tvar repeat = material.map.repeat;\n\t\t\t\tvar rotation = material.map.rotation;\n\t\t\t\tvar center = material.map.center;\n\n\t\t\t\tmaterial.map.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( material.map.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value = fog.color;\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value = material.specular;\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\trefreshUniformsPhong( uniforms, material );\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\trefreshUniformsStandard( uniforms, material );\n\n\t}\n\n\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\tuniforms.farDistance.value = material.farDistance;\n\n\t}\n\n\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\t// GL state setting\n\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n\t\tstate.setCullFace( cullFace );\n\t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\n\t};\n\n\t// Textures\n\n\tfunction allocTextureUnit() {\n\n\t\tvar textureUnit = _usedTextureUnits;\n\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t}\n\n\t\t_usedTextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tthis.allocTextureUnit = allocTextureUnit;\n\n\t// this.setTexture2D = setTexture2D;\n\tthis.setTexture2D = ( function () {\n\n\t\tvar warned = false;\n\n\t\t// backwards compatibility: peel texture.texture\n\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTexture = ( function () {\n\n\t\tvar warned = false;\n\n\t\treturn function setTexture( texture, slot ) {\n\n\t\t\tif ( ! warned ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\twarned = true;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTextureCube = ( function () {\n\n\t\tvar warned = false;\n\n\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tthis.getRenderTarget = function () {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tvar framebuffer = null;\n\t\tvar isCube = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\tframebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];\n\t\t\t\tisCube = true;\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t} else {\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t}\n\n\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport );\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tif ( isCube ) {\n\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t}\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( framebuffer ) {\n\n\t\t\tvar restore = false;\n\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\trestore = true;\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction FogExp2( color, density ) {\n\n\tthis.name = '';\n\n\tthis.color = new Color( color );\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n}\n\nFogExp2.prototype.isFogExp2 = true;\n\nFogExp2.prototype.clone = function () {\n\n\treturn new FogExp2( this.color.getHex(), this.density );\n\n};\n\nFogExp2.prototype.toJSON = function ( /* meta */ ) {\n\n\treturn {\n\t\ttype: 'FogExp2',\n\t\tcolor: this.color.getHex(),\n\t\tdensity: this.density\n\t};\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Fog( color, near, far ) {\n\n\tthis.name = '';\n\n\tthis.color = new Color( color );\n\n\tthis.near = ( near !== undefined ) ? near : 1;\n\tthis.far = ( far !== undefined ) ? far : 1000;\n\n}\n\nFog.prototype.isFog = true;\n\nFog.prototype.clone = function () {\n\n\treturn new Fog( this.color.getHex(), this.near, this.far );\n\n};\n\nFog.prototype.toJSON = function ( /* meta */ ) {\n\n\treturn {\n\t\ttype: 'Fog',\n\t\tcolor: this.color.getHex(),\n\t\tnear: this.near,\n\t\tfar: this.far\n\t};\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Scene() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Scene';\n\n\tthis.background = null;\n\tthis.fog = null;\n\tthis.overrideMaterial = null;\n\n\tthis.autoUpdate = true; // checked by the renderer\n\n}\n\nScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Scene,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction LensFlare( texture, size, distance, blending, color ) {\n\n\tObject3D.call( this );\n\n\tthis.lensFlares = [];\n\n\tthis.positionScreen = new Vector3();\n\tthis.customUpdateCallback = undefined;\n\n\tif ( texture !== undefined ) {\n\n\t\tthis.add( texture, size, distance, blending, color );\n\n\t}\n\n}\n\nLensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: LensFlare,\n\n\tisLensFlare: true,\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tthis.positionScreen.copy( source.positionScreen );\n\t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n\t\tif ( size === undefined ) size = - 1;\n\t\tif ( distance === undefined ) distance = 0;\n\t\tif ( opacity === undefined ) opacity = 1;\n\t\tif ( color === undefined ) color = new Color( 0xffffff );\n\t\tif ( blending === undefined ) blending = NormalBlending;\n\n\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n\t\tthis.lensFlares.push( {\n\t\t\ttexture: texture,\t// THREE.Texture\n\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t\t\tscale: 1, \t\t// scale\n\t\t\trotation: 0, \t\t// rotation\n\t\t\topacity: opacity,\t// opacity\n\t\t\tcolor: color,\t\t// color\n\t\t\tblending: blending\t// blending\n\t\t} );\n\n\t},\n\n\t/*\n\t * Update lens flares update positions on all flares based on the screen position\n\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t */\n\n\tupdateLensFlares: function () {\n\n\t\tvar f, fl = this.lensFlares.length;\n\t\tvar flare;\n\t\tvar vecX = - this.positionScreen.x * 2;\n\t\tvar vecY = - this.positionScreen.y * 2;\n\n\t\tfor ( f = 0; f < fl; f ++ ) {\n\n\t\t\tflare = this.lensFlares[ f ];\n\n\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *\tuvOffset: new THREE.Vector2(),\n *\tuvScale: new THREE.Vector2()\n * }\n */\n\nfunction SpriteMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'SpriteMaterial';\n\n\tthis.color = new Color( 0xffffff );\n\tthis.map = null;\n\n\tthis.rotation = 0;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nSpriteMaterial.prototype = Object.create( Material.prototype );\nSpriteMaterial.prototype.constructor = SpriteMaterial;\nSpriteMaterial.prototype.isSpriteMaterial = true;\n\nSpriteMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.map = source.map;\n\n\tthis.rotation = source.rotation;\n\n\treturn this;\n\n};\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Sprite( material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Sprite';\n\n\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n}\n\nSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Sprite,\n\n\tisSprite: true,\n\n\traycast: ( function () {\n\n\t\tvar intersectPoint = new Vector3();\n\t\tvar worldPosition = new Vector3();\n\t\tvar worldScale = new Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tworldPosition.setFromMatrixPosition( this.matrixWorld );\n\t\t\traycaster.ray.closestPointToPoint( worldPosition, intersectPoint );\n\n\t\t\tworldScale.setFromMatrixScale( this.matrixWorld );\n\t\t\tvar guessSizeSq = worldScale.x * worldScale.y / 4;\n\n\t\t\tif ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) return;\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LOD() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'LOD';\n\n\tObject.defineProperties( this, {\n\t\tlevels: {\n\t\t\tenumerable: true,\n\t\t\tvalue: []\n\t\t}\n\t} );\n\n}\n\nLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: LOD,\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tvar levels = source.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\taddLevel: function ( object, distance ) {\n\n\t\tif ( distance === undefined ) distance = 0;\n\n\t\tdistance = Math.abs( distance );\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\tthis.add( object );\n\n\t},\n\n\tgetObjectForDistance: function ( distance ) {\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn levels[ i - 1 ].object;\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar matrixPosition = new Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t};\n\n\t}() ),\n\n\tupdate: function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.levels = [];\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author michael guerrero / http://realitymeltdown.com\n * @author ikerr / http://verold.com\n */\n\nfunction Skeleton( bones, boneInverses ) {\n\n\t// copy the bone array\n\n\tbones = bones || [];\n\n\tthis.bones = bones.slice( 0 );\n\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t// use the supplied bone inverses or calculate the inverses\n\n\tif ( boneInverses === undefined ) {\n\n\t\tthis.calculateInverses();\n\n\t} else {\n\n\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nObject.assign( Skeleton.prototype, {\n\n\tcalculateInverses: function () {\n\n\t\tthis.boneInverses = [];\n\n\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tvar inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t},\n\n\tpose: function () {\n\n\t\tvar bone, i, il;\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tbone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tbone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdate: ( function () {\n\n\t\tvar offsetMatrix = new Matrix4();\n\t\tvar identityMatrix = new Matrix4();\n\n\t\treturn function update() {\n\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;\n\n\t\t\t\toffsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\toffsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t};\n\n\t} )(),\n\n\tclone: function () {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nfunction Bone() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Bone';\n\n}\n\nBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Bone,\n\n\tisBone: true\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nfunction SkinnedMesh( geometry, material ) {\n\n\tMesh.call( this, geometry, material );\n\n\tthis.type = 'SkinnedMesh';\n\n\tthis.bindMode = 'attached';\n\tthis.bindMatrix = new Matrix4();\n\tthis.bindMatrixInverse = new Matrix4();\n\n\tvar bones = this.initBones();\n\tvar skeleton = new Skeleton( bones );\n\n\tthis.bind( skeleton, this.matrixWorld );\n\n\tthis.normalizeSkinWeights();\n\n}\n\nSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\tconstructor: SkinnedMesh,\n\n\tisSkinnedMesh: true,\n\n\tinitBones: function () {\n\n\t\tvar bones = [], bone, gbone;\n\t\tvar i, il;\n\n\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\t\t// first, create array of 'Bone' objects from geometry data\n\n\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\t// create new 'Bone' object\n\n\t\t\t\tbone = new Bone();\n\t\t\t\tbones.push( bone );\n\n\t\t\t\t// apply values\n\n\t\t\t\tbone.name = gbone.name;\n\t\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t\t}\n\n\t\t\t// second, create bone hierarchy\n\n\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\tif ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {\n\n\t\t\t\t\t// subsequent bones in the hierarchy\n\n\t\t\t\t\tbones[ gbone.parent ].add( bones[ i ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// topmost bone, immediate child of the skinned mesh\n\n\t\t\t\t\tthis.add( bones[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// now the bones are part of the scene graph and children of the skinned mesh.\n\t\t// let's update the corresponding matrices\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\treturn bones;\n\n\t},\n\n\tbind: function ( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t},\n\n\tpose: function () {\n\n\t\tthis.skeleton.pose();\n\n\t},\n\n\tnormalizeSkinWeights: function () {\n\n\t\tvar scale, i;\n\n\t\tif ( this.geometry && this.geometry.isGeometry ) {\n\n\t\t\tfor ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\tscale = 1.0 / sw.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( this.geometry && this.geometry.isBufferGeometry ) {\n\n\t\t\tvar vec = new Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\tscale = 1.0 / vec.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\"\n * }\n */\n\nfunction LineBasicMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'LineBasicMaterial';\n\n\tthis.color = new Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\tthis.linecap = 'round';\n\tthis.linejoin = 'round';\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nLineBasicMaterial.prototype = Object.create( Material.prototype );\nLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\nLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\nLineBasicMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.linewidth = source.linewidth;\n\tthis.linecap = source.linecap;\n\tthis.linejoin = source.linejoin;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Line( geometry, material, mode ) {\n\n\tif ( mode === 1 ) {\n\n\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\treturn new LineSegments( geometry, material );\n\n\t}\n\n\tObject3D.call( this );\n\n\tthis.type = 'Line';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n}\n\nLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Line,\n\n\tisLine: true,\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new Matrix4();\n\t\tvar ray = new Ray();\n\t\tvar sphere = new Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar precision = raycaster.linePrecision;\n\t\t\tvar precisionSq = precision * precision;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LineSegments( geometry, material ) {\n\n\tLine.call( this, geometry, material );\n\n\tthis.type = 'LineSegments';\n\n}\n\nLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\tconstructor: LineSegments,\n\n\tisLineSegments: true\n\n} );\n\n/**\n * @author mgreter / http://github.com/mgreter\n */\n\nfunction LineLoop( geometry, material ) {\n\n\tLine.call( this, geometry, material );\n\n\tthis.type = 'LineLoop';\n\n}\n\nLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\tconstructor: LineLoop,\n\n\tisLineLoop: true,\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *  sizeAttenuation: <bool>\n * }\n */\n\nfunction PointsMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'PointsMaterial';\n\n\tthis.color = new Color( 0xffffff );\n\n\tthis.map = null;\n\n\tthis.size = 1;\n\tthis.sizeAttenuation = true;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nPointsMaterial.prototype = Object.create( Material.prototype );\nPointsMaterial.prototype.constructor = PointsMaterial;\n\nPointsMaterial.prototype.isPointsMaterial = true;\n\nPointsMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.size = source.size;\n\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Points( geometry, material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Points';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n}\n\nPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Points,\n\n\tisPoints: true,\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new Matrix4();\n\t\tvar ray = new Ray();\n\t\tvar sphere = new Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar object = this;\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\t\tsphere.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\tvar position = new Vector3();\n\n\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Group() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Group';\n\n}\n\nGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Group,\n\n\tisGroup: true\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.generateMipmaps = false;\n\n\t// Set needsUpdate when first frame is ready\n\n\tvar scope = this;\n\n\tfunction onLoaded() {\n\n\t\tvideo.removeEventListener( 'loadeddata', onLoaded, false );\n\t\tscope.needsUpdate = true;\n\n\t}\n\n\tvideo.addEventListener( 'loadeddata', onLoaded, false );\n\n}\n\nVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\tconstructor: VideoTexture,\n\n\tisVideoTexture: true,\n\n\tupdate: function () {\n\n\t\tvar video = this.image;\n\n\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { width: width, height: height };\n\tthis.mipmaps = mipmaps;\n\n\t// no flipping for cube textures\n\t// (also flipping doesn't work for compressed textures )\n\n\tthis.flipY = false;\n\n\t// can't generate mipmaps for compressed textures\n\t// mips must be embedded in DDS files\n\n\tthis.generateMipmaps = false;\n\n}\n\nCompressedTexture.prototype = Object.create( Texture.prototype );\nCompressedTexture.prototype.constructor = CompressedTexture;\n\nCompressedTexture.prototype.isCompressedTexture = true;\n\n/**\n * @author Matt DesLauriers / @mattdesl\n * @author atix / arthursilber.de\n */\n\nfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\tformat = format !== undefined ? format : DepthFormat;\n\n\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t}\n\n\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\n\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.image = { width: width, height: height };\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\tthis.flipY = false;\n\tthis.generateMipmaps\t= false;\n\n}\n\nDepthTexture.prototype = Object.create( Texture.prototype );\nDepthTexture.prototype.constructor = DepthTexture;\nDepthTexture.prototype.isDepthTexture = true;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction WireframeGeometry( geometry ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'WireframeGeometry';\n\n\t// buffer\n\n\tvar vertices = [];\n\n\t// helper variables\n\n\tvar i, j, l, o, ol;\n\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\tvar key, keys = [ 'a', 'b', 'c' ];\n\tvar vertex;\n\n\t// different logic for Geometry and BufferGeometry\n\n\tif ( geometry && geometry.isGeometry ) {\n\n\t\t// create a data structure that contains all edges without duplicates\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\te = edges[ key ];\n\n\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\tvar position, indices, groups;\n\t\tvar group, start, count;\n\t\tvar index1, index2;\n\n\t\tvertex = new Vector3();\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\t// indexed BufferGeometry\n\n\t\t\tposition = geometry.attributes.position;\n\t\t\tindices = geometry.index;\n\t\t\tgroups = geometry.groups;\n\n\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t}\n\n\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\tstart = group.start;\n\t\t\t\tcount = group.count;\n\n\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// non-indexed BufferGeometry\n\n\t\t\tposition = geometry.attributes.position;\n\n\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n}\n\nWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\nWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n/**\n * @author zz85 / https://github.com/zz85\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n */\n\n// ParametricGeometry\n\nfunction ParametricGeometry( func, slices, stacks ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'ParametricGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\tthis.mergeVertices();\n\n}\n\nParametricGeometry.prototype = Object.create( Geometry.prototype );\nParametricGeometry.prototype.constructor = ParametricGeometry;\n\n// ParametricBufferGeometry\n\nfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'ParametricBufferGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\tvar EPS = 0.00001;\n\n\tvar normal = new Vector3();\n\n\tvar p0 = new Vector3(), p1 = new Vector3();\n\tvar pu = new Vector3(), pv = new Vector3();\n\n\tvar i, j;\n\n\t// generate vertices, normals and uvs\n\n\tvar sliceCount = slices + 1;\n\n\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\tvar v = i / stacks;\n\n\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\tvar u = j / slices;\n\n\t\t\t// vertex\n\n\t\t\tp0 = func( u, v, p0 );\n\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t// normal\n\n\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\tp1 = func( u - EPS, v, p1 );\n\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t} else {\n\n\t\t\t\tp1 = func( u + EPS, v, p1 );\n\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t}\n\n\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\tp1 = func( u, v - EPS, p1 );\n\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t} else {\n\n\t\t\t\tp1 = func( u, v + EPS, p1 );\n\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t}\n\n\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( u, v );\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\tvar a = i * sliceCount + j;\n\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t// faces one and two\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n/**\n * @author clockworkgeek / https://github.com/clockworkgeek\n * @author timothypratley / https://github.com/timothypratley\n * @author WestLangley / http://github.com/WestLangley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// PolyhedronGeometry\n\nfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'PolyhedronGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\nPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n// PolyhedronBufferGeometry\n\nfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'PolyhedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tradius = radius || 1;\n\tdetail = detail || 0;\n\n\t// default buffer data\n\n\tvar vertexBuffer = [];\n\tvar uvBuffer = [];\n\n\t// the subdivision creates the vertex buffer data\n\n\tsubdivide( detail );\n\n\t// all vertices should lie on a conceptual sphere with a given radius\n\n\tappplyRadius( radius );\n\n\t// finally, create the uv data\n\n\tgenerateUVs();\n\n\t// build non-indexed geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\tif ( detail === 0 ) {\n\n\t\tthis.computeVertexNormals(); // flat normals\n\n\t} else {\n\n\t\tthis.normalizeNormals(); // smooth normals\n\n\t}\n\n\t// helper functions\n\n\tfunction subdivide( detail ) {\n\n\t\tvar a = new Vector3();\n\t\tvar b = new Vector3();\n\t\tvar c = new Vector3();\n\n\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t// get the vertices of the face\n\n\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t// perform subdivision\n\n\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t}\n\n\t}\n\n\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\tvar cols = Math.pow( 2, detail );\n\n\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\tvar v = [];\n\n\t\tvar i, j;\n\n\t\t// construct all of the vertices for this subdivision\n\n\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\tv[ i ] = [];\n\n\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\tvar rows = cols - i;\n\n\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// construct all of the faces\n\n\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction appplyRadius( radius ) {\n\n\t\tvar vertex = new Vector3();\n\n\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t}\n\n\t}\n\n\tfunction generateUVs() {\n\n\t\tvar vertex = new Vector3();\n\n\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t}\n\n\t\tcorrectUVs();\n\n\t\tcorrectSeam();\n\n\t}\n\n\tfunction correctSeam() {\n\n\t\t// handle case when face straddles the seam, see #3269\n\n\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t// uv data of a single face\n\n\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction pushVertex( vertex ) {\n\n\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t}\n\n\tfunction getVertexByIndex( index, vertex ) {\n\n\t\tvar stride = index * 3;\n\n\t\tvertex.x = vertices[ stride + 0 ];\n\t\tvertex.y = vertices[ stride + 1 ];\n\t\tvertex.z = vertices[ stride + 2 ];\n\n\t}\n\n\tfunction correctUVs() {\n\n\t\tvar a = new Vector3();\n\t\tvar b = new Vector3();\n\t\tvar c = new Vector3();\n\n\t\tvar centroid = new Vector3();\n\n\t\tvar uvA = new Vector2();\n\t\tvar uvB = new Vector2();\n\t\tvar uvC = new Vector2();\n\n\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\tvar azi = azimuth( centroid );\n\n\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t}\n\n\t}\n\n\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t}\n\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t}\n\n\t}\n\n\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\tfunction azimuth( vector ) {\n\n\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t}\n\n\n\t// Angle above the XZ plane.\n\n\tfunction inclination( vector ) {\n\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t}\n\n}\n\nPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// TetrahedronGeometry\n\nfunction TetrahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TetrahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\nTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n// TetrahedronBufferGeometry\n\nfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\tvar vertices = [\n\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t];\n\n\tvar indices = [\n\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'TetrahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// OctahedronGeometry\n\nfunction OctahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'OctahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nOctahedronGeometry.prototype = Object.create( Geometry.prototype );\nOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n// OctahedronBufferGeometry\n\nfunction OctahedronBufferGeometry( radius, detail ) {\n\n\tvar vertices = [\n\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t];\n\n\tvar indices = [\n\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t1, 3, 4,\t1, 4, 2\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'OctahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// IcosahedronGeometry\n\nfunction IcosahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'IcosahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\nIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n// IcosahedronBufferGeometry\n\nfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\tvar vertices = [\n\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t];\n\n\tvar indices = [\n\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'IcosahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n/**\n * @author Abe Pazos / https://hamoid.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// DodecahedronGeometry\n\nfunction DodecahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'DodecahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\nDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n// DodecahedronBufferGeometry\n\nfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar r = 1 / t;\n\n\tvar vertices = [\n\n\t\t// (±1, ±1, ±1)\n\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t// (0, ±1/φ, ±φ)\n\t\t 0, - r, - t, 0, - r, t,\n\t\t 0, r, - t, 0, r, t,\n\n\t\t// (±1/φ, ±φ, 0)\n\t\t- r, - t, 0, - r, t, 0,\n\t\t r, - t, 0, r, t, 0,\n\n\t\t// (±φ, 0, ±1/φ)\n\t\t- t, 0, - r, t, 0, - r,\n\t\t- t, 0, r, t, 0, r\n\t];\n\n\tvar indices = [\n\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'DodecahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n/**\n * @author oosmoxiecode / https://github.com/oosmoxiecode\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n * @author jonobr1 / https://github.com/jonobr1\n * @author Mugen87 / https://github.com/Mugen87\n *\n */\n\n// TubeGeometry\n\nfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TubeGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\ttubularSegments: tubularSegments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed\n\t};\n\n\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\n\n\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t// expose internals\n\n\tthis.tangents = bufferGeometry.tangents;\n\tthis.normals = bufferGeometry.normals;\n\tthis.binormals = bufferGeometry.binormals;\n\n\t// create geometry\n\n\tthis.fromBufferGeometry( bufferGeometry );\n\tthis.mergeVertices();\n\n}\n\nTubeGeometry.prototype = Object.create( Geometry.prototype );\nTubeGeometry.prototype.constructor = TubeGeometry;\n\n// TubeBufferGeometry\n\nfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TubeBufferGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\ttubularSegments: tubularSegments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed\n\t};\n\n\ttubularSegments = tubularSegments || 64;\n\tradius = radius || 1;\n\tradialSegments = radialSegments || 8;\n\tclosed = closed || false;\n\n\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t// expose internals\n\n\tthis.tangents = frames.tangents;\n\tthis.normals = frames.normals;\n\tthis.binormals = frames.binormals;\n\n\t// helper variables\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\tvar uv = new Vector2();\n\tvar P = new Vector3();\n\n\tvar i, j;\n\n\t// buffer\n\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\tvar indices = [];\n\n\t// create buffer data\n\n\tgenerateBufferData();\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t// functions\n\n\tfunction generateBufferData() {\n\n\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\tgenerateSegment( i );\n\n\t\t}\n\n\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t// at the regular position on the given path\n\t\t//\n\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t// uvs are generated in a separate function.\n\t\t// this makes it easy compute correct values for closed geometries\n\n\t\tgenerateUVs();\n\n\t\t// finally create faces\n\n\t\tgenerateIndices();\n\n\t}\n\n\tfunction generateSegment( i ) {\n\n\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t// retrieve corresponding normal and binormal\n\n\t\tvar N = frames.normals[ i ];\n\t\tvar B = frames.binormals[ i ];\n\n\t\t// generate normals and vertices for the current segment\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\tvar sin = Math.sin( v );\n\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t// normal\n\n\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\tnormal.normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t}\n\n\tfunction generateIndices() {\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction generateUVs() {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n/**\n * @author oosmoxiecode\n * @author Mugen87 / https://github.com/Mugen87\n *\n * based on http://www.blackpawn.com/texts/pqtorus/\n */\n\n// TorusKnotGeometry\n\nfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TorusKnotGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tif ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\tthis.mergeVertices();\n\n}\n\nTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\nTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n// TorusKnotBufferGeometry\n\nfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TorusKnotBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tradius = radius || 1;\n\ttube = tube || 0.4;\n\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\tp = p || 2;\n\tq = q || 3;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar i, j;\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\tvar P1 = new Vector3();\n\tvar P2 = new Vector3();\n\n\tvar B = new Vector3();\n\tvar T = new Vector3();\n\tvar N = new Vector3();\n\n\t// generate vertices, normals and uvs\n\n\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t// calculate orthonormal basis\n\n\t\tT.subVectors( P2, P1 );\n\t\tN.addVectors( P2, P1 );\n\t\tB.crossVectors( T, N );\n\t\tN.crossVectors( B, T );\n\n\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\tB.normalize();\n\t\tN.normalize();\n\n\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t// now calculate the final vertex position.\n\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( i / tubularSegments );\n\t\t\tuvs.push( j / radialSegments );\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t// indices\n\n\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t// this function calculates the current position on the torus curve\n\n\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\tvar cu = Math.cos( u );\n\t\tvar su = Math.sin( u );\n\t\tvar quOverP = q / p * u;\n\t\tvar cs = Math.cos( quOverP );\n\n\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t}\n\n}\n\nTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// TorusGeometry\n\nfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TorusGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\tthis.mergeVertices();\n\n}\n\nTorusGeometry.prototype = Object.create( Geometry.prototype );\nTorusGeometry.prototype.constructor = TorusGeometry;\n\n// TorusBufferGeometry\n\nfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TorusBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tradius = radius || 1;\n\ttube = tube || 0.4;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\tarc = arc || Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar center = new Vector3();\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tvar u = i / tubularSegments * arc;\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( i / tubularSegments );\n\t\t\tuvs.push( j / radialSegments );\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t// indices\n\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n * Port from https://github.com/mapbox/earcut (v2.1.2)\n */\n\nvar Earcut = {\n\n\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\tdim = dim || 2;\n\n\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\ttriangles = [];\n\n\t\tif ( ! outerNode ) return triangles;\n\n\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\tif ( data.length > 80 * dim ) {\n\n\t\t\tminX = maxX = data[ 0 ];\n\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\tx = data[ i ];\n\t\t\t\ty = data[ i + 1 ];\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t}\n\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t}\n\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\treturn triangles;\n\n\t}\n\n};\n\n// create a circular doubly linked list from polygon points in the specified winding order\n\nfunction linkedList( data, start, end, dim, clockwise ) {\n\n\tvar i, last;\n\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t} else {\n\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t}\n\n\tif ( last && equals( last, last.next ) ) {\n\n\t\tremoveNode( last );\n\t\tlast = last.next;\n\n\t}\n\n\treturn last;\n\n}\n\n// eliminate colinear or duplicate points\n\nfunction filterPoints( start, end ) {\n\n\tif ( ! start ) return start;\n\tif ( ! end ) end = start;\n\n\tvar p = start, again;\n\n\tdo {\n\n\t\tagain = false;\n\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\tremoveNode( p );\n\t\t\tp = end = p.prev;\n\t\t\tif ( p === p.next ) break;\n\t\t\tagain = true;\n\n\t\t} else {\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t} while ( again || p !== end );\n\n\treturn end;\n\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\n\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\tif ( ! ear ) return;\n\n\t// interlink polygon nodes in z-order\n\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\tvar stop = ear, prev, next;\n\n\t// iterate through ears, slicing them one by one\n\n\twhile ( ear.prev !== ear.next ) {\n\n\t\tprev = ear.prev;\n\t\tnext = ear.next;\n\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t// cut off the triangle\n\t\t\ttriangles.push( prev.i / dim );\n\t\t\ttriangles.push( ear.i / dim );\n\t\t\ttriangles.push( next.i / dim );\n\n\t\t\tremoveNode( ear );\n\n\t\t\t// skipping the next vertice leads to less sliver triangles\n\t\t\tear = next.next;\n\t\t\tstop = next.next;\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tear = next;\n\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\n\t\tif ( ear === stop ) {\n\n\t\t\t// try filtering points and slicing again\n\n\t\t\tif ( ! pass ) {\n\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\n\nfunction isEar( ear ) {\n\n\tvar a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// now make sure we don't have other points inside the potential ear\n\tvar p = ear.next.next;\n\n\twhile ( p !== ear.prev ) {\n\n\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\tvar a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// triangle bbox; min & max are calculated like this for speed\n\n\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t// z-order range for the current triangle bbox;\n\n\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t// first look for points inside the triangle in increasing z-order\n\n\tvar p = ear.nextZ;\n\n\twhile ( p && p.z <= maxZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.nextZ;\n\n\t}\n\n\t// then look for points in decreasing z-order\n\n\tp = ear.prevZ;\n\n\twhile ( p && p.z >= minZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\n\t\tp = p.prevZ;\n\n\t}\n\n\treturn true;\n\n}\n\n// go through all polygon nodes and cure small local self-intersections\n\nfunction cureLocalIntersections( start, triangles, dim ) {\n\n\tvar p = start;\n\n\tdo {\n\n\t\tvar a = p.prev, b = p.next.next;\n\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\ttriangles.push( a.i / dim );\n\t\t\ttriangles.push( p.i / dim );\n\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t// remove two nodes involved\n\n\t\t\tremoveNode( p );\n\t\t\tremoveNode( p.next );\n\n\t\t\tp = start = b;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn p;\n\n}\n\n// try splitting polygon into two and triangulate them independently\n\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t// look for a valid diagonal that divides the polygon into two\n\n\tvar a = start;\n\n\tdo {\n\n\t\tvar b = a.next.next;\n\n\t\twhile ( b !== a.prev ) {\n\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t// split the polygon in two by the diagonal\n\n\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t// filter colinear points around the cuts\n\n\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t// run earcut on each half\n\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tb = b.next;\n\n\t\t}\n\n\t\ta = a.next;\n\n\t} while ( a !== start );\n\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\n\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\tvar queue = [], i, len, start, end, list;\n\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\tstart = holeIndices[ i ] * dim;\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\tlist = linkedList( data, start, end, dim, false );\n\t\tif ( list === list.next ) list.steiner = true;\n\t\tqueue.push( getLeftmost( list ) );\n\n\t}\n\n\tqueue.sort( compareX );\n\n\t// process holes from left to right\n\n\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\teliminateHole( queue[ i ], outerNode );\n\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t}\n\n\treturn outerNode;\n\n}\n\nfunction compareX( a, b ) {\n\n\treturn a.x - b.x;\n\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\n\nfunction eliminateHole( hole, outerNode ) {\n\n\touterNode = findHoleBridge( hole, outerNode );\n\n\tif ( outerNode ) {\n\n\t\tvar b = splitPolygon( outerNode, hole );\n\n\t\tfilterPoints( b, b.next );\n\n\t}\n\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\nfunction findHoleBridge( hole, outerNode ) {\n\n\tvar p = outerNode,\n\t\thx = hole.x,\n\t\thy = hole.y,\n\t\tqx = - Infinity,\n\t\tm;\n\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t// segment's endpoint with lesser x will be potential connection point\n\n\tdo {\n\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\n\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\tqx = x;\n\n\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\tif ( hy === p.y ) return p;\n\t\t\t\t\tif ( hy === p.next.y ) return p.next;\n\n\t\t\t\t}\n\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== outerNode );\n\n\tif ( ! m ) return null;\n\n\tif ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint\n\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t// if there are no points found, we have a valid connection;\n\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\tvar stop = m,\n\t\tmx = m.x,\n\t\tmy = m.y,\n\t\ttanMin = Infinity,\n\t\ttan;\n\n\tp = m.next;\n\n\twhile ( p !== stop ) {\n\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\n\n\t\t\t\tm = p;\n\t\t\t\ttanMin = tan;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t}\n\n\treturn m;\n\n}\n\n// interlink polygon nodes in z-order\n\nfunction indexCurve( start, minX, minY, invSize ) {\n\n\tvar p = start;\n\n\tdo {\n\n\t\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\tp.prevZ = p.prev;\n\t\tp.nextZ = p.next;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\tp.prevZ.nextZ = null;\n\tp.prevZ = null;\n\n\tsortLinked( p );\n\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\nfunction sortLinked( list ) {\n\n\tvar i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;\n\n\tdo {\n\n\t\tp = list;\n\t\tlist = null;\n\t\ttail = null;\n\t\tnumMerges = 0;\n\n\t\twhile ( p ) {\n\n\t\t\tnumMerges ++;\n\t\t\tq = p;\n\t\t\tpSize = 0;\n\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\tpSize ++;\n\t\t\t\tq = q.nextZ;\n\t\t\t\tif ( ! q ) break;\n\n\t\t\t}\n\n\t\t\tqSize = inSize;\n\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\te = p;\n\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\tpSize --;\n\n\t\t\t\t} else {\n\n\t\t\t\t\te = q;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tqSize --;\n\n\t\t\t\t}\n\n\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\telse list = e;\n\n\t\t\t\te.prevZ = tail;\n\t\t\t\ttail = e;\n\n\t\t\t}\n\n\t\t\tp = q;\n\n\t\t}\n\n\t\ttail.nextZ = null;\n\t\tinSize *= 2;\n\n\t} while ( numMerges > 1 );\n\n\treturn list;\n\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\n\nfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t// coords are transformed into non-negative 15-bit integer range\n\n\tx = 32767 * ( x - minX ) * invSize;\n\ty = 32767 * ( y - minY ) * invSize;\n\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\treturn x | ( y << 1 );\n\n}\n\n// find the leftmost node of a polygon ring\n\nfunction getLeftmost( start ) {\n\n\tvar p = start, leftmost = start;\n\n\tdo {\n\n\t\tif ( p.x < leftmost.x ) leftmost = p;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn leftmost;\n\n}\n\n// check if a point lies within a convex triangle\n\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\nfunction isValidDiagonal( a, b ) {\n\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\n\t\tlocallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\n\n}\n\n// signed area of a triangle\n\nfunction area( p, q, r ) {\n\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n}\n\n// check if two points are equal\n\nfunction equals( p1, p2 ) {\n\n\treturn p1.x === p2.x && p1.y === p2.y;\n\n}\n\n// check if two segments intersect\n\nfunction intersects( p1, q1, p2, q2 ) {\n\n\tif ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;\n\n\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\n\t\t\t\t area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\n\n}\n\n// check if a polygon diagonal intersects any polygon segments\n\nfunction intersectsPolygon( a, b ) {\n\n\tvar p = a;\n\n\tdo {\n\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\t\tintersects( p, p.next, a, b ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn false;\n\n}\n\n// check if a polygon diagonal is locally inside the polygon\n\nfunction locallyInside( a, b ) {\n\n\treturn area( a.prev, a, a.next ) < 0 ?\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\n\nfunction middleInside( a, b ) {\n\n\tvar p = a,\n\t\tinside = false,\n\t\tpx = ( a.x + b.x ) / 2,\n\t\tpy = ( a.y + b.y ) / 2;\n\n\tdo {\n\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {\n\n\t\t\tinside = ! inside;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn inside;\n\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\nfunction splitPolygon( a, b ) {\n\n\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\tan = a.next,\n\t\tbp = b.prev;\n\n\ta.next = b;\n\tb.prev = a;\n\n\ta2.next = an;\n\tan.prev = a2;\n\n\tb2.next = a2;\n\ta2.prev = b2;\n\n\tbp.next = b2;\n\tb2.prev = bp;\n\n\treturn b2;\n\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\n\nfunction insertNode( i, x, y, last ) {\n\n\tvar p = new Node( i, x, y );\n\n\tif ( ! last ) {\n\n\t\tp.prev = p;\n\t\tp.next = p;\n\n\t} else {\n\n\t\tp.next = last.next;\n\t\tp.prev = last;\n\t\tlast.next.prev = p;\n\t\tlast.next = p;\n\n\t}\n\n\treturn p;\n\n}\n\nfunction removeNode( p ) {\n\n\tp.next.prev = p.prev;\n\tp.prev.next = p.next;\n\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n}\n\nfunction Node( i, x, y ) {\n\n\t// vertice index in coordinates array\n\tthis.i = i;\n\n\t// vertex coordinates\n\tthis.x = x;\n\tthis.y = y;\n\n\t// previous and next vertice nodes in a polygon ring\n\tthis.prev = null;\n\tthis.next = null;\n\n\t// z-order curve value\n\tthis.z = null;\n\n\t// previous and next nodes in z-order\n\tthis.prevZ = null;\n\tthis.nextZ = null;\n\n\t// indicates whether this is a steiner point\n\tthis.steiner = false;\n\n}\n\nfunction signedArea( data, start, end, dim ) {\n\n\tvar sum = 0;\n\n\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\tj = i;\n\n\t}\n\n\treturn sum;\n\n}\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nvar ShapeUtils = {\n\n\t// calculate area of the contour polygon\n\n\tarea: function ( contour ) {\n\n\t\tvar n = contour.length;\n\t\tvar a = 0.0;\n\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t},\n\n\tisClockWise: function ( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t},\n\n\ttriangulateShape: function ( contour, holes ) {\n\n\t\tfunction removeDupEndPts( points ) {\n\n\t\t\tvar l = points.length;\n\n\t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addContour( vertices, contour ) {\n\n\t\t\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\t\t\tvertices.push( contour[ i ].x );\n\t\t\t\tvertices.push( contour[ i ].y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tvar holeIndices = []; // array of hole indices\n\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tvar holeIndex = contour.length;\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  amount: <int>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline is bevel\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\n *  frames: <Object> // containing arrays of tangents, normals, binormals\n *\n *  UVGenerator: <Object> // object that provides UV generator functions\n *\n * }\n */\n\n// ExtrudeGeometry\n\nfunction ExtrudeGeometry( shapes, options ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'ExtrudeGeometry';\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\toptions: options\n\t};\n\n\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\tthis.mergeVertices();\n\n}\n\nExtrudeGeometry.prototype = Object.create( Geometry.prototype );\nExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n// ExtrudeBufferGeometry\n\nfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\tif ( typeof ( shapes ) === \"undefined\" ) {\n\n\t\treturn;\n\n\t}\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'ExtrudeBufferGeometry';\n\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeVertexNormals();\n\n\t// can't really use automatic vertex normals\n\t// as then front and back sides get smoothed too\n\t// should do separate smoothing just for sides\n\n\t//this.computeVertexNormals();\n\n\t//console.log( \"took\", ( Date.now() - startTime ) );\n\n}\n\nExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\nExtrudeBufferGeometry.prototype.getArrays = function () {\n\n\tvar positionAttribute = this.getAttribute( \"position\" );\n\tvar verticesArray = positionAttribute ? Array.prototype.slice.call( positionAttribute.array ) : [];\n\n\tvar uvAttribute = this.getAttribute( \"uv\" );\n\tvar uvArray = uvAttribute ? Array.prototype.slice.call( uvAttribute.array ) : [];\n\n\tvar IndexAttribute = this.index;\n\tvar indicesArray = IndexAttribute ? Array.prototype.slice.call( IndexAttribute.array ) : [];\n\n\treturn {\n\t\tposition: verticesArray,\n\t\tuv: uvArray,\n\t\tindex: indicesArray\n\t};\n\n};\n\nExtrudeBufferGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\tvar sl = shapes.length;\n\toptions.arrays = this.getArrays();\n\n\tfor ( var s = 0; s < sl; s ++ ) {\n\n\t\tvar shape = shapes[ s ];\n\t\tthis.addShape( shape, options );\n\n\t}\n\n\tthis.setIndex( options.arrays.index );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( options.arrays.position, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );\n\n};\n\nExtrudeBufferGeometry.prototype.addShape = function ( shape, options ) {\n\n\tvar arrays = options.arrays ? options.arrays : this.getArrays();\n\tvar verticesArray = arrays.position;\n\tvar indicesArray = arrays.index;\n\tvar uvArray = arrays.uv;\n\n\tvar placeholder = [];\n\n\n\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar steps = options.steps !== undefined ? options.steps : 1;\n\n\tvar extrudePath = options.extrudePath;\n\tvar extrudePts, extrudeByPath = false;\n\n\t// Use default WorldUVGenerator if no UV generators are specified.\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\n\tvar splineTube, binormal, normal, position2;\n\tif ( extrudePath ) {\n\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\textrudeByPath = true;\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t// SETUP TNB variables\n\n\t\t// TODO1 - have a .isClosed in spline?\n\n\t\tsplineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );\n\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\tbinormal = new Vector3();\n\t\tnormal = new Vector3();\n\t\tposition2 = new Vector3();\n\n\t}\n\n\t// Safeguards if bevels are not enabled\n\n\tif ( ! bevelEnabled ) {\n\n\t\tbevelSegments = 0;\n\t\tbevelThickness = 0;\n\t\tbevelSize = 0;\n\n\t}\n\n\t// Variables initialization\n\n\tvar ahole, h, hl; // looping of holes\n\tvar scope = this;\n\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t/* Vertices */\n\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\tvertices = vertices.concat( ahole );\n\n\t}\n\n\n\tfunction scalePt2( pt, vec, size ) {\n\n\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t}\n\n\tvar b, bs, t, z,\n\t\tvert, vlen = vertices.length,\n\t\tface, flen = faces.length;\n\n\n\t// Find directions for point movement\n\n\n\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t//\n\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t// check for collinear edges\n\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t// not collinear\n\n\t\t\t// length of vectors for normalizing\n\n\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t// vector from inPt to intersection point\n\n\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t//  but prevent crazy spikes\n\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t} else {\n\n\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// handle special case of collinear edges\n\n\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( direction_eq ) {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t} else {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t}\n\n\n\tvar contourMovements = [];\n\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\tif ( j === il ) j = 0;\n\t\tif ( k === il ) k = 0;\n\n\t\t//  (j)---(i)---(k)\n\t\t// console.log('i,j,k', i, j , k)\n\n\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t}\n\n\tvar holesMovements = [],\n\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\toneHoleMovements = [];\n\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t}\n\n\t\tholesMovements.push( oneHoleMovements );\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t}\n\n\n\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\tv( vert.x, vert.y, - z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tbs = bevelSize;\n\n\t// Back facing vertices\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\tif ( ! extrudeByPath ) {\n\n\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t} else {\n\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t}\n\n\t}\n\n\t// Add stepped vertices...\n\t// Including front facing vertices\n\n\tvar s;\n\n\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Add bevel segments planes\n\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\tv( vert.x, vert.y, amount + z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, amount + z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Faces */\n\n\t// Top and bottom faces\n\n\tbuildLidFaces();\n\n\t// Sides faces\n\n\tbuildSideFaces();\n\n\n\t/////  Internal functions\n\n\tfunction buildLidFaces() {\n\n\t\tvar start = verticesArray.length / 3;\n\n\t\tif ( bevelEnabled ) {\n\n\t\t\tvar layer = 0; // steps + 1\n\t\t\tvar offset = vlen * layer;\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t}\n\n\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\toffset = vlen * layer;\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t}\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t}\n\n\t\t}\n\n\t\tscope.addGroup( start, verticesArray.length / 3 - start, options.material !== undefined ? options.material : 0 );\n\n\t}\n\n\t// Create faces for the z-sides of the shape\n\n\tfunction buildSideFaces() {\n\n\t\tvar start = verticesArray.length / 3;\n\t\tvar layeroffset = 0;\n\t\tsidewalls( contour, layeroffset );\n\t\tlayeroffset += contour.length;\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t//, true\n\t\t\tlayeroffset += ahole.length;\n\n\t\t}\n\n\n\t\tscope.addGroup( start, verticesArray.length / 3 - start, options.extrudeMaterial !== undefined ? options.extrudeMaterial : 1 );\n\n\n\t}\n\n\tfunction sidewalls( contour, layeroffset ) {\n\n\t\tvar j, k;\n\t\ti = contour.length;\n\n\t\twhile ( -- i >= 0 ) {\n\n\t\t\tj = i;\n\t\t\tk = i - 1;\n\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\tvar s = 0,\n\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\tf4( a, b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction v( x, y, z ) {\n\n\t\tplaceholder.push( x );\n\t\tplaceholder.push( y );\n\t\tplaceholder.push( z );\n\n\t}\n\n\n\tfunction f3( a, b, c ) {\n\n\t\taddVertex( a );\n\t\taddVertex( b );\n\t\taddVertex( c );\n\n\t\tvar nextIndex = verticesArray.length / 3;\n\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\taddUV( uvs[ 0 ] );\n\t\taddUV( uvs[ 1 ] );\n\t\taddUV( uvs[ 2 ] );\n\n\t}\n\n\tfunction f4( a, b, c, d ) {\n\n\t\taddVertex( a );\n\t\taddVertex( b );\n\t\taddVertex( d );\n\n\t\taddVertex( b );\n\t\taddVertex( c );\n\t\taddVertex( d );\n\n\n\t\tvar nextIndex = verticesArray.length / 3;\n\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\taddUV( uvs[ 0 ] );\n\t\taddUV( uvs[ 1 ] );\n\t\taddUV( uvs[ 3 ] );\n\n\t\taddUV( uvs[ 1 ] );\n\t\taddUV( uvs[ 2 ] );\n\t\taddUV( uvs[ 3 ] );\n\n\t}\n\n\tfunction addVertex( index ) {\n\n\t\tindicesArray.push( verticesArray.length / 3 );\n\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t}\n\n\n\tfunction addUV( vector2 ) {\n\n\t\tuvArray.push( vector2.x );\n\t\tuvArray.push( vector2.y );\n\n\t}\n\n\tif ( ! options.arrays ) {\n\n\t\tthis.setIndex( indicesArray );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t}\n\n};\n\nExtrudeGeometry.WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tvar a_x = vertices[ indexA * 3 ];\n\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\tvar b_x = vertices[ indexB * 3 ];\n\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\tvar c_x = vertices[ indexC * 3 ];\n\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tvar a_x = vertices[ indexA * 3 ];\n\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\tvar b_x = vertices[ indexB * 3 ];\n\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\tvar c_x = vertices[ indexC * 3 ];\n\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\tvar d_x = vertices[ indexD * 3 ];\n\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float> // how far from text outline is bevel\n * }\n */\n\n// TextGeometry\n\nfunction TextGeometry( text, parameters ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TextGeometry';\n\n\tthis.parameters = {\n\t\ttext: text,\n\t\tparameters: parameters\n\t};\n\n\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\tthis.mergeVertices();\n\n}\n\nTextGeometry.prototype = Object.create( Geometry.prototype );\nTextGeometry.prototype.constructor = TextGeometry;\n\n// TextBufferGeometry\n\nfunction TextBufferGeometry( text, parameters ) {\n\n\tparameters = parameters || {};\n\n\tvar font = parameters.font;\n\n\tif ( ! ( font && font.isFont ) ) {\n\n\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\treturn new Geometry();\n\n\t}\n\n\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n\t// translate parameters to ExtrudeGeometry API\n\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n\t// defaults\n\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\tthis.type = 'TextBufferGeometry';\n\n}\n\nTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\nTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// SphereGeometry\n\nfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'SphereGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nSphereGeometry.prototype = Object.create( Geometry.prototype );\nSphereGeometry.prototype.constructor = SphereGeometry;\n\n// SphereBufferGeometry\n\nfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'SphereBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 1;\n\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\tphiStart = phiStart !== undefined ? phiStart : 0;\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\tvar thetaEnd = thetaStart + thetaLength;\n\n\tvar ix, iy;\n\n\tvar index = 0;\n\tvar grid = [];\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// generate vertices, normals and uvs\n\n\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\tvar verticesRow = [];\n\n\t\tvar v = iy / heightSegments;\n\n\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\tvar u = ix / widthSegments;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormal.set( vertex.x, vertex.y, vertex.z ).normalize();\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( u, 1 - v );\n\n\t\t\tverticesRow.push( index ++ );\n\n\t\t}\n\n\t\tgrid.push( verticesRow );\n\n\t}\n\n\t// indices\n\n\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n/**\n * @author Kaleb Murphy\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// RingGeometry\n\nfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'RingGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nRingGeometry.prototype = Object.create( Geometry.prototype );\nRingGeometry.prototype.constructor = RingGeometry;\n\n// RingBufferGeometry\n\nfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'RingBufferGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tinnerRadius = innerRadius || 0.5;\n\touterRadius = outerRadius || 1;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// some helper variables\n\n\tvar segment;\n\tvar radius = innerRadius;\n\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uv\n\n\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// increase the radius for next row of vertices\n\n\t\tradius += radiusStep;\n\n\t}\n\n\t// indices\n\n\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\tvar a = segment;\n\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\tvar d = segment + 1;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n/**\n * @author astrodud / http://astrodud.isgreat.org/\n * @author zz85 / https://github.com/zz85\n * @author bhouston / http://clara.io\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// LatheGeometry\n\nfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'LatheGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\tthis.mergeVertices();\n\n}\n\nLatheGeometry.prototype = Object.create( Geometry.prototype );\nLatheGeometry.prototype.constructor = LatheGeometry;\n\n// LatheBufferGeometry\n\nfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'LatheBufferGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tsegments = Math.floor( segments ) || 12;\n\tphiStart = phiStart || 0;\n\tphiLength = phiLength || Math.PI * 2;\n\n\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar base;\n\tvar inverseSegments = 1.0 / segments;\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\tvar i, j;\n\n\t// generate vertices and uvs\n\n\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\tvar sin = Math.sin( phi );\n\t\tvar cos = Math.cos( phi );\n\n\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\tvertex.y = points[ j ].y;\n\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// uv\n\n\t\t\tuv.x = i / segments;\n\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\tbase = j + i * points.length;\n\n\t\t\tvar a = base;\n\t\t\tvar b = base + points.length;\n\t\t\tvar c = base + points.length + 1;\n\t\t\tvar d = base + 1;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t// generate normals\n\n\tthis.computeVertexNormals();\n\n\t// if the geometry is closed, we need to average the normals along the seam.\n\t// because the corresponding vertices are identical (but still have different UVs).\n\n\tif ( phiLength === Math.PI * 2 ) {\n\n\t\tvar normals = this.attributes.normal.array;\n\t\tvar n1 = new Vector3();\n\t\tvar n2 = new Vector3();\n\t\tvar n = new Vector3();\n\n\t\t// this is the buffer offset for the last line of vertices\n\n\t\tbase = segments * points.length * 3;\n\n\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t// select the normal of the vertex in the first line\n\n\t\t\tn1.x = normals[ j + 0 ];\n\t\t\tn1.y = normals[ j + 1 ];\n\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t// select the normal of the vertex in the last line\n\n\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t// average normals\n\n\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t// assign the new values to both normals\n\n\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t}\n\n\t}\n\n}\n\nLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n/**\n * @author jonobr1 / http://jonobr1.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// ShapeGeometry\n\nfunction ShapeGeometry( shapes, curveSegments ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'ShapeGeometry';\n\n\tif ( typeof curveSegments === 'object' ) {\n\n\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\tcurveSegments = curveSegments.curveSegments;\n\n\t}\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\tcurveSegments: curveSegments\n\t};\n\n\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\tthis.mergeVertices();\n\n}\n\nShapeGeometry.prototype = Object.create( Geometry.prototype );\nShapeGeometry.prototype.constructor = ShapeGeometry;\n\nShapeGeometry.prototype.toJSON = function () {\n\n\tvar data = Geometry.prototype.toJSON.call( this );\n\n\tvar shapes = this.parameters.shapes;\n\n\treturn toJSON( shapes, data );\n\n};\n\n// ShapeBufferGeometry\n\nfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'ShapeBufferGeometry';\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\tcurveSegments: curveSegments\n\t};\n\n\tcurveSegments = curveSegments || 12;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar groupStart = 0;\n\tvar groupCount = 0;\n\n\t// allow single and array values for \"shapes\" parameter\n\n\tif ( Array.isArray( shapes ) === false ) {\n\n\t\taddShape( shapes );\n\n\t} else {\n\n\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\taddShape( shapes[ i ] );\n\n\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\tgroupStart += groupCount;\n\t\t\tgroupCount = 0;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t// helper functions\n\n\tfunction addShape( shape ) {\n\n\t\tvar i, l, shapeHole;\n\n\t\tvar indexOffset = vertices.length / 3;\n\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\tvar shapeVertices = points.shape;\n\t\tvar shapeHoles = points.holes;\n\n\t\t// check direction of vertices\n\n\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t// also check if holes are in the opposite direction\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t// join vertices of inner and outer paths to a single array\n\n\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t}\n\n\t\t// vertices, normals, uvs\n\n\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\tnormals.push( 0, 0, 1 );\n\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t}\n\n\t\t// incides\n\n\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\tindices.push( a, b, c );\n\t\t\tgroupCount += 3;\n\n\t\t}\n\n\t}\n\n}\n\nShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\nShapeBufferGeometry.prototype.toJSON = function () {\n\n\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\tvar shapes = this.parameters.shapes;\n\n\treturn toJSON( shapes, data );\n\n};\n\n//\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'EdgesGeometry';\n\n\tthis.parameters = {\n\t\tthresholdAngle: thresholdAngle\n\t};\n\n\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t// buffer\n\n\tvar vertices = [];\n\n\t// helper variables\n\n\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\n\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t// prepare source geometry\n\n\tvar geometry2;\n\n\tif ( geometry.isBufferGeometry ) {\n\n\t\tgeometry2 = new Geometry();\n\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t} else {\n\n\t\tgeometry2 = geometry.clone();\n\n\t}\n\n\tgeometry2.mergeVertices();\n\tgeometry2.computeFaceNormals();\n\n\tvar sourceVertices = geometry2.vertices;\n\tvar faces = geometry2.faces;\n\n\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\n\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t} else {\n\n\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// generate vertices\n\n\tfor ( key in edges ) {\n\n\t\tvar e = edges[ key ];\n\n\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n}\n\nEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\nEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// CylinderGeometry\n\nfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'CylinderGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nCylinderGeometry.prototype = Object.create( Geometry.prototype );\nCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n// CylinderBufferGeometry\n\nfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'CylinderBufferGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tvar scope = this;\n\n\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\theight = height || 1;\n\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\n\topenEnded = openEnded !== undefined ? openEnded : false;\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar index = 0;\n\tvar indexArray = [];\n\tvar halfHeight = height / 2;\n\tvar groupStart = 0;\n\n\t// generate geometry\n\n\tgenerateTorso();\n\n\tif ( openEnded === false ) {\n\n\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\tfunction generateTorso() {\n\n\t\tvar x, y;\n\t\tvar normal = new Vector3();\n\t\tvar vertex = new Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\t// this will be used to calculate the normal\n\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\tvar indexRow = [];\n\n\t\t\tvar v = y / heightSegments;\n\n\t\t\t// calculate the radius of the current row\n\n\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\t// now save vertices of the row in our index array\n\n\t\t\tindexArray.push( indexRow );\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t// update group counter\n\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t// calculate new start value for groups\n\n\t\tgroupStart += groupCount;\n\n\t}\n\n\tfunction generateCap( top ) {\n\n\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\tvar uv = new Vector2();\n\t\tvar vertex = new Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t// save the index of the first center vertex\n\t\tcenterIndexStart = index;\n\n\t\t// first we generate the center vertex data of the cap.\n\t\t// because the geometry needs one set of uvs per face,\n\t\t// we must generate a center vertex per face/segment\n\n\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t// vertex\n\n\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t// increase index\n\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// save the index of the last center vertex\n\n\t\tcenterIndexEnd = index;\n\n\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\tvar u = x / radialSegments;\n\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * sinTheta;\n\t\t\tvertex.y = halfHeight * sign;\n\t\t\tvertex.z = radius * cosTheta;\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t// uv\n\n\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t// increase index\n\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tvar c = centerIndexStart + x;\n\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\tif ( top === true ) {\n\n\t\t\t\t// face top\n\n\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t} else {\n\n\t\t\t\t// face bottom\n\n\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t}\n\n\t\t\tgroupCount += 3;\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t// calculate new start value for groups\n\n\t\tgroupStart += groupCount;\n\n\t}\n\n}\n\nCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n/**\n * @author abelnation / http://github.com/abelnation\n */\n\n// ConeGeometry\n\nfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n}\n\nConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\nConeGeometry.prototype.constructor = ConeGeometry;\n\n// ConeBufferGeometry\n\nfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n}\n\nConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\nConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n * @author hughes\n */\n\n// CircleGeometry\n\nfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'CircleGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nCircleGeometry.prototype = Object.create( Geometry.prototype );\nCircleGeometry.prototype.constructor = CircleGeometry;\n\n// CircleBufferGeometry\n\nfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'CircleBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 1;\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar i, s;\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\n\t// center point\n\n\tvertices.push( 0, 0, 0 );\n\tnormals.push( 0, 0, 1 );\n\tuvs.push( 0.5, 0.5 );\n\n\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t// vertex\n\n\t\tvertex.x = radius * Math.cos( segment );\n\t\tvertex.y = radius * Math.sin( segment );\n\n\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t// normal\n\n\t\tnormals.push( 0, 0, 1 );\n\n\t\t// uvs\n\n\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\tuvs.push( uv.x, uv.y );\n\n\t}\n\n\t// indices\n\n\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\tindices.push( i, i + 1, 0 );\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\nvar Geometries = Object.freeze({\n\tWireframeGeometry: WireframeGeometry,\n\tParametricGeometry: ParametricGeometry,\n\tParametricBufferGeometry: ParametricBufferGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\tTubeGeometry: TubeGeometry,\n\tTubeBufferGeometry: TubeBufferGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusBufferGeometry: TorusBufferGeometry,\n\tTextGeometry: TextGeometry,\n\tTextBufferGeometry: TextBufferGeometry,\n\tSphereGeometry: SphereGeometry,\n\tSphereBufferGeometry: SphereBufferGeometry,\n\tRingGeometry: RingGeometry,\n\tRingBufferGeometry: RingBufferGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPlaneBufferGeometry: PlaneBufferGeometry,\n\tLatheGeometry: LatheGeometry,\n\tLatheBufferGeometry: LatheBufferGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tShapeBufferGeometry: ShapeBufferGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tConeGeometry: ConeGeometry,\n\tConeBufferGeometry: ConeBufferGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tCylinderBufferGeometry: CylinderBufferGeometry,\n\tCircleGeometry: CircleGeometry,\n\tCircleBufferGeometry: CircleBufferGeometry,\n\tBoxGeometry: BoxGeometry,\n\tBoxBufferGeometry: BoxBufferGeometry\n});\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * parameters = {\n *  color: <THREE.Color>,\n *  opacity: <float>\n * }\n */\n\nfunction ShadowMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'ShadowMaterial';\n\n\tthis.color = new Color( 0x000000 );\n\tthis.opacity = 1.0;\n\n\tthis.lights = true;\n\tthis.transparent = true;\n\n\tthis.setValues( parameters );\n\n}\n\nShadowMaterial.prototype = Object.create( Material.prototype );\nShadowMaterial.prototype.constructor = ShadowMaterial;\n\nShadowMaterial.prototype.isShadowMaterial = true;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction RawShaderMaterial( parameters ) {\n\n\tShaderMaterial.call( this, parameters );\n\n\tthis.type = 'RawShaderMaterial';\n\n}\n\nRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\nRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\nRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshStandardMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.type = 'MeshStandardMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\tthis.roughness = 0.5;\n\tthis.metalness = 0.5;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.roughnessMap = null;\n\n\tthis.metalnessMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.envMapIntensity = 1.0;\n\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshStandardMaterial.prototype = Object.create( Material.prototype );\nMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\nMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\nMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.color.copy( source.color );\n\tthis.roughness = source.roughness;\n\tthis.metalness = source.metalness;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.roughnessMap = source.roughnessMap;\n\n\tthis.metalnessMap = source.metalnessMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.envMapIntensity = source.envMapIntensity;\n\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  reflectivity: <float>\n * }\n */\n\nfunction MeshPhysicalMaterial( parameters ) {\n\n\tMeshStandardMaterial.call( this );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.type = 'MeshPhysicalMaterial';\n\n\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\tthis.clearCoat = 0.0;\n\tthis.clearCoatRoughness = 0.0;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\nMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\nMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.reflectivity = source.reflectivity;\n\n\tthis.clearCoat = source.clearCoat;\n\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshPhongMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshPhongMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\tthis.specular = new Color( 0x111111 );\n\tthis.shininess = 30;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshPhongMaterial.prototype = Object.create( Material.prototype );\nMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\nMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\nMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.specular.copy( source.specular );\n\tthis.shininess = source.shininess;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author takahirox / http://github.com/takahirox\n *\n * parameters = {\n *  gradientMap: new THREE.Texture( <Image> )\n * }\n */\n\nfunction MeshToonMaterial( parameters ) {\n\n\tMeshPhongMaterial.call( this );\n\n\tthis.defines = { 'TOON': '' };\n\n\tthis.type = 'MeshToonMaterial';\n\n\tthis.gradientMap = null;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\nMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\nMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\nMeshToonMaterial.prototype.copy = function ( source ) {\n\n\tMeshPhongMaterial.prototype.copy.call( this, source );\n\n\tthis.gradientMap = source.gradientMap;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshNormalMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshNormalMaterial';\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshNormalMaterial.prototype = Object.create( Material.prototype );\nMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\nMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\nMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshLambertMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshLambertMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshLambertMaterial.prototype = Object.create( Material.prototype );\nMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\nMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\nMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>\n * }\n */\n\nfunction LineDashedMaterial( parameters ) {\n\n\tLineBasicMaterial.call( this );\n\n\tthis.type = 'LineDashedMaterial';\n\n\tthis.scale = 1;\n\tthis.dashSize = 3;\n\tthis.gapSize = 1;\n\n\tthis.setValues( parameters );\n\n}\n\nLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\nLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\nLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\nLineDashedMaterial.prototype.copy = function ( source ) {\n\n\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\tthis.scale = source.scale;\n\tthis.dashSize = source.dashSize;\n\tthis.gapSize = source.gapSize;\n\n\treturn this;\n\n};\n\n\n\nvar Materials = Object.freeze({\n\tShadowMaterial: ShadowMaterial,\n\tSpriteMaterial: SpriteMaterial,\n\tRawShaderMaterial: RawShaderMaterial,\n\tShaderMaterial: ShaderMaterial,\n\tPointsMaterial: PointsMaterial,\n\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\tMeshStandardMaterial: MeshStandardMaterial,\n\tMeshPhongMaterial: MeshPhongMaterial,\n\tMeshToonMaterial: MeshToonMaterial,\n\tMeshNormalMaterial: MeshNormalMaterial,\n\tMeshLambertMaterial: MeshLambertMaterial,\n\tMeshDepthMaterial: MeshDepthMaterial,\n\tMeshDistanceMaterial: MeshDistanceMaterial,\n\tMeshBasicMaterial: MeshBasicMaterial,\n\tLineDashedMaterial: LineDashedMaterial,\n\tLineBasicMaterial: LineBasicMaterial,\n\tMaterial: Material\n});\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\tvar scope = this;\n\n\tvar isLoading = false;\n\tvar itemsLoaded = 0;\n\tvar itemsTotal = 0;\n\tvar urlModifier = undefined;\n\n\tthis.onStart = undefined;\n\tthis.onLoad = onLoad;\n\tthis.onProgress = onProgress;\n\tthis.onError = onError;\n\n\tthis.itemStart = function ( url ) {\n\n\t\titemsTotal ++;\n\n\t\tif ( isLoading === false ) {\n\n\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tisLoading = true;\n\n\t};\n\n\tthis.itemEnd = function ( url ) {\n\n\t\titemsLoaded ++;\n\n\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t}\n\n\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\tisLoading = false;\n\n\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\tscope.onLoad();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.itemError = function ( url ) {\n\n\t\tif ( scope.onError !== undefined ) {\n\n\t\t\tscope.onError( url );\n\n\t\t}\n\n\t};\n\n\tthis.resolveURL = function ( url ) {\n\n\t\tif ( urlModifier ) {\n\n\t\t\treturn urlModifier( url );\n\n\t\t}\n\n\t\treturn url;\n\n\t};\n\n\tthis.setURLModifier = function ( transform ) {\n\n\t\turlModifier = transform;\n\t\treturn this;\n\n\t};\n\n}\n\nvar DefaultLoadingManager = new LoadingManager();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar loading = {};\n\nfunction FileLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( FileLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Check for data: URI\n\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\tif ( dataUriRegexResult ) {\n\n\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\tdata = window.decodeURIComponent( data );\n\n\t\t\tif ( isBase64 ) data = window.atob( data );\n\n\t\t\ttry {\n\n\t\t\t\tvar response;\n\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Initialise array for duplicate requests\n\n\t\t\tloading[ url ] = [];\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\trequest.open( 'GET', url, true );\n\n\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\tvar response = this.response;\n\n\t\t\t\tCache.add( url, response );\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tif ( this.status === 200 ) {\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} else if ( this.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t}\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}, false );\n\n\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\n\n\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t}\n\n\t\t\trequest.send( null );\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\treturn request;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t},\n\n\tsetResponseType: function ( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t},\n\n\tsetWithCredentials: function ( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t},\n\n\tsetMimeType: function ( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t},\n\n\tsetRequestHeader: function ( value ) {\n\n\t\tthis.requestHeader = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n */\n\nfunction CompressedTextureLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n}\n\nObject.assign( CompressedTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar images = [];\n\n\t\tvar texture = new CompressedTexture();\n\t\ttexture.image = images;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author Nikos M. / https://github.com/foo123/\n *\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n */\n\nfunction DataTextureLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n}\n\nObject.assign( DataTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texture = new DataTexture();\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t}\n\n\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction ImageLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( ImageLoader.prototype, {\n\n\tcrossOrigin: 'Anonymous',\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\timage.addEventListener( 'load', function () {\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}, false );\n\n\t\t/*\n\t\timage.addEventListener( 'progress', function ( event ) {\n\n\t\t\tif ( onProgress ) onProgress( event );\n\n\t\t}, false );\n\t\t*/\n\n\t\timage.addEventListener( 'error', function ( event ) {\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemEnd( url );\n\t\t\tscope.manager.itemError( url );\n\n\t\t}, false );\n\n\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction CubeTextureLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( CubeTextureLoader.prototype, {\n\n\tcrossOrigin: 'Anonymous',\n\n\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new CubeTexture();\n\n\t\tvar loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tvar loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction TextureLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( TextureLoader.prototype, {\n\n\tcrossOrigin: 'Anonymous',\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new Texture();\n\n\t\tvar loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\n\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Extensible curve object\n *\n * Some common of curve methods:\n * .getPoint( t, optionalTarget ), .getTangent( t )\n * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following curves inherit from THREE.Curve:\n *\n * -- 2D curves --\n * THREE.ArcCurve\n * THREE.CubicBezierCurve\n * THREE.EllipseCurve\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.SplineCurve\n *\n * -- 3D curves --\n * THREE.CatmullRomCurve3\n * THREE.CubicBezierCurve3\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath.\n *\n **/\n\n/**************************************************************\n *\tAbstract Curve base class\n **************************************************************/\n\nfunction Curve() {\n\n\tthis.type = 'Curve';\n\n\tthis.arcLengthDivisions = 200;\n\n}\n\nObject.assign( Curve.prototype, {\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\treturn null;\n\n\t},\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t},\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\tvar points = [];\n\n\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\tvar points = [];\n\n\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\t// Get total curve arc length\n\n\tgetLength: function () {\n\n\t\tvar lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t},\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = this.arcLengthDivisions;\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tvar cache = [];\n\t\tvar current, last = this.getPoint( 0 );\n\t\tvar p, sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t},\n\n\tupdateArcLengths: function () {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t},\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping: function ( u, distance ) {\n\n\t\tvar arcLengths = this.getLengths();\n\n\t\tvar i = 0, il = arcLengths.length;\n\n\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tvar low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tvar lengthBefore = arcLengths[ i ];\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t},\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent: function ( t ) {\n\n\t\tvar delta = 0.0001;\n\t\tvar t1 = t - delta;\n\t\tvar t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tvar pt1 = this.getPoint( t1 );\n\t\tvar pt2 = this.getPoint( t2 );\n\n\t\tvar vec = pt2.clone().sub( pt1 );\n\t\treturn vec.normalize();\n\n\t},\n\n\tgetTangentAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t );\n\n\t},\n\n\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tvar normal = new Vector3();\n\n\t\tvar tangents = [];\n\t\tvar normals = [];\n\t\tvar binormals = [];\n\n\t\tvar vec = new Vector3();\n\t\tvar mat = new Matrix4();\n\n\t\tvar i, u, theta;\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tu = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\ttangents[ i ].normalize();\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tvar min = Number.MAX_VALUE;\n\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n} );\n\nfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'EllipseCurve';\n\n\tthis.aX = aX || 0;\n\tthis.aY = aY || 0;\n\n\tthis.xRadius = xRadius || 1;\n\tthis.yRadius = yRadius || 1;\n\n\tthis.aStartAngle = aStartAngle || 0;\n\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\tthis.aClockwise = aClockwise || false;\n\n\tthis.aRotation = aRotation || 0;\n\n}\n\nEllipseCurve.prototype = Object.create( Curve.prototype );\nEllipseCurve.prototype.constructor = EllipseCurve;\n\nEllipseCurve.prototype.isEllipseCurve = true;\n\nEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar twoPi = Math.PI * 2;\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t// ensures that deltaAngle is 0 .. 2 PI\n\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\tif ( samePoints ) {\n\n\t\t\tdeltaAngle = 0;\n\n\t\t} else {\n\n\t\t\tdeltaAngle = twoPi;\n\n\t\t}\n\n\t}\n\n\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\tdeltaAngle = - twoPi;\n\n\t\t} else {\n\n\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t}\n\n\t}\n\n\tvar angle = this.aStartAngle + t * deltaAngle;\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\tif ( this.aRotation !== 0 ) {\n\n\t\tvar cos = Math.cos( this.aRotation );\n\t\tvar sin = Math.sin( this.aRotation );\n\n\t\tvar tx = x - this.aX;\n\t\tvar ty = y - this.aY;\n\n\t\t// Rotate the point about the center of the ellipse.\n\t\tx = tx * cos - ty * sin + this.aX;\n\t\ty = tx * sin + ty * cos + this.aY;\n\n\t}\n\n\treturn point.set( x, y );\n\n};\n\nEllipseCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.aX = source.aX;\n\tthis.aY = source.aY;\n\n\tthis.xRadius = source.xRadius;\n\tthis.yRadius = source.yRadius;\n\n\tthis.aStartAngle = source.aStartAngle;\n\tthis.aEndAngle = source.aEndAngle;\n\n\tthis.aClockwise = source.aClockwise;\n\n\tthis.aRotation = source.aRotation;\n\n\treturn this;\n\n};\n\n\nEllipseCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.aX = this.aX;\n\tdata.aY = this.aY;\n\n\tdata.xRadius = this.xRadius;\n\tdata.yRadius = this.yRadius;\n\n\tdata.aStartAngle = this.aStartAngle;\n\tdata.aEndAngle = this.aEndAngle;\n\n\tdata.aClockwise = this.aClockwise;\n\n\tdata.aRotation = this.aRotation;\n\n\treturn data;\n\n};\n\nEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.aX = json.aX;\n\tthis.aY = json.aY;\n\n\tthis.xRadius = json.xRadius;\n\tthis.yRadius = json.yRadius;\n\n\tthis.aStartAngle = json.aStartAngle;\n\tthis.aEndAngle = json.aEndAngle;\n\n\tthis.aClockwise = json.aClockwise;\n\n\tthis.aRotation = json.aRotation;\n\n\treturn this;\n\n};\n\nfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\tthis.type = 'ArcCurve';\n\n}\n\nArcCurve.prototype = Object.create( EllipseCurve.prototype );\nArcCurve.prototype.constructor = ArcCurve;\n\nArcCurve.prototype.isArcCurve = true;\n\n/**\n * @author zz85 https://github.com/zz85\n *\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n\n\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nvar tmp = new Vector3();\nvar px = new CubicPoly();\nvar py = new CubicPoly();\nvar pz = new CubicPoly();\n\nfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CatmullRomCurve3';\n\n\tthis.points = points || [];\n\tthis.closed = closed || false;\n\tthis.curveType = curveType || 'centripetal';\n\tthis.tension = tension || 0.5;\n\n}\n\nCatmullRomCurve3.prototype = Object.create( Curve.prototype );\nCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\nCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar points = this.points;\n\tvar l = points.length;\n\n\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\tvar intPoint = Math.floor( p );\n\tvar weight = p - intPoint;\n\n\tif ( this.closed ) {\n\n\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\tintPoint = l - 2;\n\t\tweight = 1;\n\n\t}\n\n\tvar p0, p1, p2, p3; // 4 points\n\n\tif ( this.closed || intPoint > 0 ) {\n\n\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t} else {\n\n\t\t// extrapolate first point\n\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\tp0 = tmp;\n\n\t}\n\n\tp1 = points[ intPoint % l ];\n\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t} else {\n\n\t\t// extrapolate last point\n\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\tp3 = tmp;\n\n\t}\n\n\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t// init Centripetal / Chordal Catmull-Rom\n\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t// safety check for repeated points\n\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t}\n\n\tpoint.set(\n\t\tpx.calc( weight ),\n\t\tpy.calc( weight ),\n\t\tpz.calc( weight )\n\t);\n\n\treturn point;\n\n};\n\nCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\tvar point = source.points[ i ];\n\n\t\tthis.points.push( point.clone() );\n\n\t}\n\n\tthis.closed = source.closed;\n\tthis.curveType = source.curveType;\n\tthis.tension = source.tension;\n\n\treturn this;\n\n};\n\nCatmullRomCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.points = [];\n\n\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\tvar point = this.points[ i ];\n\t\tdata.points.push( point.toArray() );\n\n\t}\n\n\tdata.closed = this.closed;\n\tdata.curveType = this.curveType;\n\tdata.tension = this.tension;\n\n\treturn data;\n\n};\n\nCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\tvar point = json.points[ i ];\n\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t}\n\n\tthis.closed = json.closed;\n\tthis.curveType = json.curveType;\n\tthis.tension = json.tension;\n\n\treturn this;\n\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Bezier Curves formulas obtained from\n * http://en.wikipedia.org/wiki/Bézier_curve\n */\n\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tvar v0 = ( p2 - p0 ) * 0.5;\n\tvar v1 = ( p3 - p1 ) * 0.5;\n\tvar t2 = t * t;\n\tvar t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tvar k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tvar k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tvar k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\nfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CubicBezierCurve';\n\n\tthis.v0 = v0 || new Vector2();\n\tthis.v1 = v1 || new Vector2();\n\tthis.v2 = v2 || new Vector2();\n\tthis.v3 = v3 || new Vector2();\n\n}\n\nCubicBezierCurve.prototype = Object.create( Curve.prototype );\nCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\nCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\nCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\tpoint.set(\n\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t);\n\n\treturn point;\n\n};\n\nCubicBezierCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\tthis.v3.copy( source.v3 );\n\n\treturn this;\n\n};\n\nCubicBezierCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\tdata.v3 = this.v3.toArray();\n\n\treturn data;\n\n};\n\nCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\tthis.v3.fromArray( json.v3 );\n\n\treturn this;\n\n};\n\nfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CubicBezierCurve3';\n\n\tthis.v0 = v0 || new Vector3();\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\tthis.v3 = v3 || new Vector3();\n\n}\n\nCubicBezierCurve3.prototype = Object.create( Curve.prototype );\nCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\nCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\nCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\tpoint.set(\n\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t);\n\n\treturn point;\n\n};\n\nCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\tthis.v3.copy( source.v3 );\n\n\treturn this;\n\n};\n\nCubicBezierCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\tdata.v3 = this.v3.toArray();\n\n\treturn data;\n\n};\n\nCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\tthis.v3.fromArray( json.v3 );\n\n\treturn this;\n\n};\n\nfunction LineCurve( v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'LineCurve';\n\n\tthis.v1 = v1 || new Vector2();\n\tthis.v2 = v2 || new Vector2();\n\n}\n\nLineCurve.prototype = Object.create( Curve.prototype );\nLineCurve.prototype.constructor = LineCurve;\n\nLineCurve.prototype.isLineCurve = true;\n\nLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tif ( t === 1 ) {\n\n\t\tpoint.copy( this.v2 );\n\n\t} else {\n\n\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t}\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\treturn this.getPoint( u, optionalTarget );\n\n};\n\nLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\treturn tangent.normalize();\n\n};\n\nLineCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nLineCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nLineCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction LineCurve3( v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'LineCurve3';\n\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\n}\n\nLineCurve3.prototype = Object.create( Curve.prototype );\nLineCurve3.prototype.constructor = LineCurve3;\n\nLineCurve3.prototype.isLineCurve3 = true;\n\nLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tif ( t === 1 ) {\n\n\t\tpoint.copy( this.v2 );\n\n\t} else {\n\n\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t}\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\treturn this.getPoint( u, optionalTarget );\n\n};\n\nLineCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nLineCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nLineCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'QuadraticBezierCurve';\n\n\tthis.v0 = v0 || new Vector2();\n\tthis.v1 = v1 || new Vector2();\n\tthis.v2 = v2 || new Vector2();\n\n}\n\nQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\nQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\nQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\nQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\tpoint.set(\n\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t);\n\n\treturn point;\n\n};\n\nQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nQuadraticBezierCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'QuadraticBezierCurve3';\n\n\tthis.v0 = v0 || new Vector3();\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\n}\n\nQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\nQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\nQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\nQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\tpoint.set(\n\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t);\n\n\treturn point;\n\n};\n\nQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'SplineCurve';\n\n\tthis.points = points || [];\n\n}\n\nSplineCurve.prototype = Object.create( Curve.prototype );\nSplineCurve.prototype.constructor = SplineCurve;\n\nSplineCurve.prototype.isSplineCurve = true;\n\nSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar points = this.points;\n\tvar p = ( points.length - 1 ) * t;\n\n\tvar intPoint = Math.floor( p );\n\tvar weight = p - intPoint;\n\n\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\tvar p1 = points[ intPoint ];\n\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\tpoint.set(\n\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t);\n\n\treturn point;\n\n};\n\nSplineCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\tvar point = source.points[ i ];\n\n\t\tthis.points.push( point.clone() );\n\n\t}\n\n\treturn this;\n\n};\n\nSplineCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.points = [];\n\n\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\tvar point = this.points[ i ];\n\t\tdata.points.push( point.toArray() );\n\n\t}\n\n\treturn data;\n\n};\n\nSplineCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\tvar point = json.points[ i ];\n\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t}\n\n\treturn this;\n\n};\n\n\n\nvar Curves = Object.freeze({\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n **/\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nfunction CurvePath() {\n\n\tCurve.call( this );\n\n\tthis.type = 'CurvePath';\n\n\tthis.curves = [];\n\tthis.autoClose = false; // Automatically closes the path\n\n}\n\nCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\tconstructor: CurvePath,\n\n\tadd: function ( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t},\n\n\tclosePath: function () {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t},\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint: function ( t ) {\n\n\t\tvar d = t * this.getLength();\n\t\tvar curveLengths = this.getCurveLengths();\n\t\tvar i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t},\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength: function () {\n\n\t\tvar lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t},\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths: function () {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t},\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths: function () {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tvar lengths = [], sums = 0;\n\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t},\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = 40;\n\n\t\tvar points = [];\n\n\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\tgetPoints: function ( divisions ) {\n\n\t\tdivisions = divisions || 12;\n\n\t\tvar points = [], last;\n\n\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tvar curve = curves[ i ];\n\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t: ( curve && curve.isLineCurve ) ? 1\n\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tvar curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tvar curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tvar curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Creates free form 2d path using series of points, lines or curves.\n **/\n\nfunction Path( points ) {\n\n\tCurvePath.call( this );\n\n\tthis.type = 'Path';\n\n\tthis.currentPoint = new Vector2();\n\n\tif ( points ) {\n\n\t\tthis.setFromPoints( points );\n\n\t}\n\n}\n\nPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\tconstructor: Path,\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t},\n\n\tmoveTo: function ( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t},\n\n\tlineTo: function ( x, y ) {\n\n\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t},\n\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\tvar curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t},\n\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tvar curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t},\n\n\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tvar curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t},\n\n\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tvar x0 = this.currentPoint.x;\n\t\tvar y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar x0 = this.currentPoint.x;\n\t\tvar y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t},\n\n\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tvar lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nfunction Shape( points ) {\n\n\tPath.call( this, points );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.type = 'Shape';\n\n\tthis.holes = [];\n\n}\n\nShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\tconstructor: Shape,\n\n\tgetPointsHoles: function ( divisions ) {\n\n\t\tvar holesPts = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t},\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\textractPoints: function ( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tPath.prototype.copy.call( this, source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Light( color, intensity ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Light';\n\n\tthis.color = new Color( color );\n\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\tthis.receiveShadow = undefined;\n\n}\n\nLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Light,\n\n\tisLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\tLight.call( this, skyColor, intensity );\n\n\tthis.type = 'HemisphereLight';\n\n\tthis.castShadow = undefined;\n\n\tthis.position.copy( Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.groundColor = new Color( groundColor );\n\n}\n\nHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: HemisphereLight,\n\n\tisHemisphereLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LightShadow( camera ) {\n\n\tthis.camera = camera;\n\n\tthis.bias = 0;\n\tthis.radius = 1;\n\n\tthis.mapSize = new Vector2( 512, 512 );\n\n\tthis.map = null;\n\tthis.matrix = new Matrix4();\n\n}\n\nObject.assign( LightShadow.prototype, {\n\n\tcopy: function ( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar object = {};\n\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction SpotLightShadow() {\n\n\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n}\n\nSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\tconstructor: SpotLightShadow,\n\n\tisSpotLightShadow: true,\n\n\tupdate: function ( light ) {\n\n\t\tvar camera = this.camera;\n\n\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\n\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\tvar far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'SpotLight';\n\n\tthis.position.copy( Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.target = new Object3D();\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\treturn this.intensity * Math.PI;\n\n\t\t},\n\t\tset: function ( power ) {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\tthis.intensity = power / Math.PI;\n\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new SpotLightShadow();\n\n}\n\nSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: SpotLight,\n\n\tisSpotLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nfunction PointLight( color, intensity, distance, decay ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'PointLight';\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t},\n\t\tset: function ( power ) {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n}\n\nPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: PointLight,\n\n\tisPointLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction DirectionalLightShadow( ) {\n\n\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n}\n\nDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\tconstructor: DirectionalLightShadow\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction DirectionalLight( color, intensity ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'DirectionalLight';\n\n\tthis.position.copy( Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.target = new Object3D();\n\n\tthis.shadow = new DirectionalLightShadow();\n\n}\n\nDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: DirectionalLight,\n\n\tisDirectionalLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AmbientLight( color, intensity ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'AmbientLight';\n\n\tthis.castShadow = undefined;\n\n}\n\nAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: AmbientLight,\n\n\tisAmbientLight: true\n\n} );\n\n/**\n * @author abelnation / http://github.com/abelnation\n */\n\nfunction RectAreaLight( color, intensity, width, height ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'RectAreaLight';\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.updateMatrix();\n\n\tthis.width = ( width !== undefined ) ? width : 10;\n\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t// TODO (abelnation): distance/decay\n\n\t// TODO (abelnation): update method for RectAreaLight to update transform to lookat target\n\n\t// TODO (abelnation): shadows\n\n}\n\n// TODO (abelnation): RectAreaLight update when light shape is changed\nRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: RectAreaLight,\n\n\tisRectAreaLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n *\n * A Track that interpolates Strings\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: StringKeyframeTrack,\n\n\tValueTypeName: 'string',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\n\tInterpolantFactoryMethodSmooth: undefined\n\n} );\n\n/**\n *\n * A Track of Boolean keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction BooleanKeyframeTrack( name, times, values ) {\n\n\tKeyframeTrack.call( this, name, times, values );\n\n}\n\nBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: BooleanKeyframeTrack,\n\n\tValueTypeName: 'bool',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\tInterpolantFactoryMethodSmooth: undefined\n\n\t// Note: Actually this track could have a optimized / compressed\n\t// representation of a single value and a custom interpolant that\n\t// computes \"firstValue ^ isOdd( index )\".\n\n} );\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n * @author tschw\n */\n\nfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tthis.parameterPositions = parameterPositions;\n\tthis._cachedIndex = 0;\n\n\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\tthis.sampleValues = sampleValues;\n\tthis.valueSize = sampleSize;\n\n}\n\nObject.assign( Interpolant.prototype, {\n\n\tevaluate: function ( t ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\ti1 = this._cachedIndex,\n\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tvar right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t},\n\n\tsettings: null, // optional, subclass-specific settings structure\n\t// Note: The indirection allows central control of many interpolants.\n\n\t// --- Protected interface\n\n\tDefaultSettings_: {},\n\n\tgetSettings_: function () {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t},\n\n\tcopySampleValue_: function ( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// Template methods for derived classes:\n\n\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t},\n\n\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n} );\n\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign( Interpolant.prototype, {\n\n\t//( 0, t, t0 ), returns this.resultBuffer\n\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t//( N-1, tN-1, t ), returns this.resultBuffer\n\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n} );\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @author tschw\n */\n\nfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: QuaternionLinearInterpolant,\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset = i1 * stride,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n/**\n *\n * A Track of quaternion keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: QuaternionKeyframeTrack,\n\n\tValueTypeName: 'quaternion',\n\n\t// ValueBufferType is inherited\n\n\tDefaultInterpolation: InterpolateLinear,\n\n\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n} );\n\n/**\n *\n * A Track of keyframe values that represent color.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: ColorKeyframeTrack,\n\n\tValueTypeName: 'color'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n\t// Note: Very basic implementation and nothing special yet.\n\t// However, this is the place for color space parameterization.\n\n} );\n\n/**\n *\n * A Track of numeric keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: NumberKeyframeTrack,\n\n\tValueTypeName: 'number'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @author tschw\n */\n\nfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\tthis._weightPrev = - 0;\n\tthis._offsetPrev = - 0;\n\tthis._weightNext = - 0;\n\tthis._offsetNext = - 0;\n\n}\n\nCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: CubicInterpolant,\n\n\tDefaultSettings_: {\n\n\t\tendingStart: ZeroCurvatureEnding,\n\t\tendingEnd: ZeroCurvatureEnding\n\n\t},\n\n\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\tiPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t},\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n/**\n * @author tschw\n */\n\nfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: LinearInterpolant,\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceeding\n * the parameter.\n *\n * @author tschw\n */\n\nfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: DiscreteInterpolant,\n\n\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n} );\n\n/**\n * @author tschw\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nvar AnimationUtils = {\n\n\t// same as Array.prototype.slice, but also works on typed arrays\n\tarraySlice: function ( array, from, to ) {\n\n\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t}\n\n\t\treturn array.slice( from, to );\n\n\t},\n\n\t// converts an array to a specific type\n\tconvertArray: function ( array, type, forceClone ) {\n\n\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\treturn new type( array ); // create typed array\n\n\t\t}\n\n\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t},\n\n\tisTypedArray: function ( object ) {\n\n\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t},\n\n\t// returns an array by which times and values can be sorted\n\tgetKeyframeOrder: function ( times ) {\n\n\t\tfunction compareTime( i, j ) {\n\n\t\t\treturn times[ i ] - times[ j ];\n\n\t\t}\n\n\t\tvar n = times.length;\n\t\tvar result = new Array( n );\n\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\tresult.sort( compareTime );\n\n\t\treturn result;\n\n\t},\n\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\tsortedArray: function ( values, stride, order ) {\n\n\t\tvar nValues = values.length;\n\t\tvar result = new values.constructor( nValues );\n\n\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// function for parsing AOS keyframe formats\n\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t}\n\n\t\tif ( key === undefined ) return; // no data\n\n\t\tvar value = key[ valuePropertyName ];\n\t\tif ( value === undefined ) return; // no data\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t// ...assume THREE.Math-ish\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else {\n\n\t\t\t// otherwise push as-is\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t}\n\n\t}\n\n};\n\n/**\n *\n * A timed sequence of keyframes for a specific property.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\tthis.name = name;\n\n\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\tthis.validate();\n\tthis.optimize();\n\n}\n\n// Static methods:\n\nObject.assign( KeyframeTrack, {\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tparse: function ( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( track ) {\n\n\t\tvar trackType = track.constructor;\n\n\t\tvar json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t},\n\n\t_getTrackTypeForValueTypeName: function ( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n} );\n\nObject.assign( KeyframeTrack.prototype, {\n\n\tconstructor: KeyframeTrack,\n\n\tTimeBufferType: Float32Array,\n\n\tValueBufferType: Float32Array,\n\n\tDefaultInterpolation: InterpolateLinear,\n\n\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tsetInterpolation: function ( interpolation ) {\n\n\t\tvar factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t},\n\n\tgetInterpolation: function () {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t},\n\n\tgetValueSize: function () {\n\n\t\treturn this.values.length / this.times.length;\n\n\t},\n\n\t// move all keyframes either forwards or backwards in time\n\tshift: function ( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale: function ( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim: function ( startTime, endTime ) {\n\n\t\tvar times = this.times,\n\t\t\tnKeys = times.length,\n\t\t\tfrom = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) to = Math.max( to, 1 ), from = to - 1;\n\n\t\t\tvar stride = this.getValueSize();\n\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate: function () {\n\n\t\tvar valid = true;\n\n\t\tvar valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar prevTime = null;\n\n\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tvar currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t},\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize: function () {\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\twriteIndex = 1,\n\t\t\tlastIndex = times.length - 1;\n\n\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tvar keep = false;\n\n\t\t\tvar time = times[ i ];\n\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n *\n * A Track of vectored keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: VectorKeyframeTrack,\n\n\tValueTypeName: 'vector'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n/**\n *\n * Reusable set of Tracks that represent an animation.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nfunction AnimationClip( name, duration, tracks ) {\n\n\tthis.name = name;\n\tthis.tracks = tracks;\n\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\tthis.uuid = _Math.generateUUID();\n\n\t// this means it should figure out its duration by scanning the tracks\n\tif ( this.duration < 0 ) {\n\n\t\tthis.resetDuration();\n\n\t}\n\n\tthis.optimize();\n\n}\n\nObject.assign( AnimationClip, {\n\n\tparse: function ( json ) {\n\n\t\tvar tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t},\n\n\ttoJSON: function ( clip ) {\n\n\t\tvar tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tvar json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks\n\n\t\t};\n\n\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t},\n\n\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\tvar tracks = [];\n\n\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tvar times = [];\n\t\t\tvar values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t},\n\n\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\tvar clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tvar o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\tvar animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar clips = [];\n\n\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t},\n\n\t// parse the animation.hierarchy format\n\tparseAnimation: function ( animation, bones ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tvar tracks = [];\n\n\t\tvar clipName = animation.name || 'default';\n\t\t// automatic length determination in AnimationClip.\n\t\tvar duration = animation.length || - 1;\n\t\tvar fps = animation.fps || 30;\n\n\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\treturn clip;\n\n\t}\n\n} );\n\nObject.assign( AnimationClip.prototype, {\n\n\tresetDuration: function () {\n\n\t\tvar tracks = this.tracks, duration = 0;\n\n\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tvar track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t},\n\n\ttrim: function () {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\toptimize: function () {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction MaterialLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\tthis.textures = {};\n\n}\n\nObject.assign( MaterialLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTextures: function ( value ) {\n\n\t\tthis.textures = value;\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tvar material = new Materials[ json.type ]();\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;\n\t\tif ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;\n\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\t// Deprecated\n\n\t\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\tmaterial.transparent = true;\n\n\t\t}\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tvar normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\treturn material;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction BufferGeometryLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( BufferGeometryLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tvar attributes = json.data.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t}\n\n\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tvar center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\nvar TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\t// Workaround for IE11 pre KB2929437. See #11440\n\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Loader() {\n\n\tthis.onLoadStart = function () {};\n\tthis.onLoadProgress = function () {};\n\tthis.onLoadComplete = function () {};\n\n}\n\nLoader.Handlers = {\n\n\thandlers: [],\n\n\tadd: function ( regex, loader ) {\n\n\t\tthis.handlers.push( regex, loader );\n\n\t},\n\n\tget: function ( file ) {\n\n\t\tvar handlers = this.handlers;\n\n\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\tvar regex = handlers[ i ];\n\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\treturn loader;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n};\n\nObject.assign( Loader.prototype, {\n\n\tcrossOrigin: undefined,\n\n\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\tvar array = [];\n\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t}\n\n\t\treturn array;\n\n\t},\n\n\tcreateMaterial: ( function () {\n\n\t\tvar BlendingMode = {\n\t\t\tNoBlending: NoBlending,\n\t\t\tNormalBlending: NormalBlending,\n\t\t\tAdditiveBlending: AdditiveBlending,\n\t\t\tSubtractiveBlending: SubtractiveBlending,\n\t\t\tMultiplyBlending: MultiplyBlending,\n\t\t\tCustomBlending: CustomBlending\n\t\t};\n\n\t\tvar color = new Color();\n\t\tvar textureLoader = new TextureLoader();\n\t\tvar materialLoader = new MaterialLoader();\n\n\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\t// convert from old material format\n\n\t\t\tvar textures = {};\n\n\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n\t\t\t\tvar texture;\n\n\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t}\n\n\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t}\n\n\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t}\n\n\t\t\t\tvar uuid = _Math.generateUUID();\n\n\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\treturn uuid;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar json = {\n\t\t\t\tuuid: _Math.generateUUID(),\n\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t};\n\n\t\t\tfor ( var name in m ) {\n\n\t\t\t\tvar value = m[ name ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\tjson.side = BackSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\tjson.side = DoubleSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\tcase 'opacity':\n\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\tcase 'transparent':\n\t\t\t\t\tcase 'visible':\n\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\treturn materialLoader.parse( json );\n\n\t\t};\n\n\t} )()\n\n} );\n\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\nvar LoaderUtils = {\n\n\tdecodeText: function ( array ) {\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tvar s = '';\n\n\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\treturn s;\n\n\t},\n\n\textractUrlBase: function ( url ) {\n\n\t\tvar parts = url.split( '/' );\n\n\t\tif ( parts.length === 1 ) return './';\n\n\t\tparts.pop();\n\n\t\treturn parts.join( '/' ) + '/';\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction JSONLoader( manager ) {\n\n\tif ( typeof manager === 'boolean' ) {\n\n\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\tmanager = undefined;\n\n\t}\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\tthis.withCredentials = false;\n\n}\n\nObject.assign( JSONLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === 'string' ) ? this.texturePath : LoaderUtils.extractUrlBase( url );\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json = JSON.parse( text );\n\t\t\tvar metadata = json.metadata;\n\n\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\tvar type = metadata.type;\n\n\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tparse: ( function () {\n\n\t\tfunction parseModel( json, geometry ) {\n\n\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t}\n\n\t\t\tvar i, j, fi,\n\n\t\t\t\toffset, zLength,\n\n\t\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\t\ttype,\n\t\t\t\tisQuad,\n\t\t\t\thasMaterial,\n\t\t\t\thasFaceVertexUv,\n\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\t\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\t\tuvLayer, uv, u, v,\n\n\t\t\t\tfaces = json.faces,\n\t\t\t\tvertices = json.vertices,\n\t\t\t\tnormals = json.normals,\n\t\t\t\tcolors = json.colors,\n\n\t\t\t\tscale = json.scale,\n\n\t\t\t\tnUvLayers = 0;\n\n\n\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t// disregard empty arrays\n\n\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = vertices.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\tvertex = new Vector3();\n\n\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = faces.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\ttype = faces[ offset ++ ];\n\n\t\t\t\tisQuad = isBitSet( type, 0 );\n\t\t\t\thasMaterial = isBitSet( type, 1 );\n\t\t\t\thasFaceVertexUv = isBitSet( type, 3 );\n\t\t\t\thasFaceNormal = isBitSet( type, 4 );\n\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\thasFaceColor = isBitSet( type, 6 );\n\t\t\t\thasFaceVertexColor = isBitSet( type, 7 );\n\n\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\tfaceA = new Face3();\n\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\tfaceB = new Face3();\n\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\toffset += 4;\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface = new Face3();\n\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseSkin( json, geometry ) {\n\n\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar x = json.skinWeights[ i ];\n\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar a = json.skinIndices[ i ];\n\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.bones = json.bones;\n\n\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseMorphing( json, geometry ) {\n\n\t\t\tvar scale = json.scale;\n\n\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\tvar vertex = new Vector3();\n\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseAnimations( json, geometry ) {\n\n\t\t\tvar outputAnimations = [];\n\n\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\tvar animations = [];\n\n\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\tanimations.push( json.animation );\n\n\t\t\t}\n\n\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t}\n\n\t\t\t// parse implicit morph animations\n\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t}\n\n\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t}\n\n\t\treturn function ( json, texturePath ) {\n\n\t\t\tif ( json.data !== undefined ) {\n\n\t\t\t\t// Geometry 4.0 spec\n\t\t\t\tjson = json.data;\n\n\t\t\t}\n\n\t\t\tif ( json.scale !== undefined ) {\n\n\t\t\t\tjson.scale = 1.0 / json.scale;\n\n\t\t\t} else {\n\n\t\t\t\tjson.scale = 1.0;\n\n\t\t\t}\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tparseModel( json, geometry );\n\t\t\tparseSkin( json, geometry );\n\t\t\tparseMorphing( json, geometry );\n\t\t\tparseAnimations( json, geometry );\n\n\t\t\tgeometry.computeFaceNormals();\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\t\treturn { geometry: geometry };\n\n\t\t\t} else {\n\n\t\t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t\t}\n\n\t\t};\n\n\t} )()\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction ObjectLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\tthis.texturePath = '';\n\n}\n\nObject.assign( ObjectLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.texturePath === '' ) {\n\n\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t}\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url + '. Use THREE.JSONLoader instead.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tparse: function ( json, onLoad ) {\n\n\t\tvar shapes = this.parseShape( json.shapes );\n\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tvar textures = this.parseTextures( json.textures, images );\n\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\tif ( json.animations ) {\n\n\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t}\n\n\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t},\n\n\tparseShape: function ( json ) {\n\n\t\tvar shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t},\n\n\tparseGeometries: function ( json, shapes ) {\n\n\t\tvar geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar geometryLoader = new JSONLoader();\n\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar geometry;\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = data.shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ i ] ];\n\n\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.texturePath ).geometry;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t},\n\n\tparseMaterials: function ( json, textures ) {\n\n\t\tvar materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t// Deprecated\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\tarray.push( loader.parse( data.materials[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterials[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t},\n\n\tparseAnimations: function ( json ) {\n\n\t\tvar animations = [];\n\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t},\n\n\tparseImages: function ( json, onLoad ) {\n\n\t\tvar scope = this;\n\t\tvar images = {};\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\tvar loader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar image = json[ i ];\n\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t},\n\n\tparseTextures: function ( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tvar textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = new Texture( images[ data.image ] );\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t},\n\n\tparseObject: function () {\n\n\t\tvar matrix = new Matrix4();\n\n\t\treturn function parseObject( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif ( data.shadow ) {\n\n\t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t};\n\n\t}()\n\n} );\n\nvar TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tSphericalReflectionMapping: SphericalReflectionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\tCubeUVRefractionMapping: CubeUVRefractionMapping\n};\n\nvar TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nvar TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\tNearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\tLinearMipMapLinearFilter: LinearMipMapLinearFilter\n};\n\n/**\n * @author thespite / http://clicktorelease.com/\n */\n\nfunction ImageBitmapLoader( manager ) {\n\n\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t}\n\n\tif ( typeof fetch === 'undefined' ) {\n\n\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t}\n\n\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\tthis.options = undefined;\n\n}\n\nImageBitmapLoader.prototype = {\n\n\tconstructor: ImageBitmapLoader,\n\n\tsetOptions: function setOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t},\n\n\tload: function load( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tfetch( url ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tscope.manager.itemEnd( url );\n\t\t\tscope.manager.itemError( url );\n\n\t\t} );\n\n\t},\n\n\tsetCrossOrigin: function ( /* value */ ) {\n\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n **/\n\nfunction ShapePath() {\n\n\tthis.type = 'ShapePath';\n\n\tthis.subPaths = [];\n\tthis.currentPath = null;\n\n}\n\nObject.assign( ShapePath.prototype, {\n\n\tmoveTo: function ( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t},\n\n\tlineTo: function ( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t},\n\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t},\n\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t},\n\n\tsplineThru: function ( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t},\n\n\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tvar shapes = [];\n\n\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tvar inside = false;\n\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\tvar subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tvar betterShapeHoles = [];\n\t\tvar newShapes = [];\n\t\tvar newShapeHoles = [];\n\t\tvar mainIdx = 0;\n\t\tvar tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tvar ambiguous = false;\n\t\t\tvar toChange = [];\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmpHoles;\n\n\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Font( data ) {\n\n\tthis.type = 'Font';\n\n\tthis.data = data;\n\n}\n\nObject.assign( Font.prototype, {\n\n\tisFont: true,\n\n\tgenerateShapes: function ( text, size, divisions ) {\n\n\t\tfunction createPaths( text ) {\n\n\t\t\tvar chars = String( text ).split( '' );\n\t\t\tvar scale = size / data.resolution;\n\t\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\t\tvar offsetX = 0, offsetY = 0;\n\n\t\t\tvar paths = [];\n\n\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\t\tvar char = chars[ i ];\n\n\t\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\t\toffsetX = 0;\n\t\t\t\t\toffsetY -= line_height;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY );\n\t\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\t\tpaths.push( ret.path );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn paths;\n\n\t\t}\n\n\t\tfunction createPath( c, scale, offsetX, offsetY ) {\n\n\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n\t\t\tif ( ! glyph ) return;\n\n\t\t\tvar path = new ShapePath();\n\n\t\t\tvar pts = [];\n\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n\t\t\tif ( glyph.o ) {\n\n\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t\t}\n\n\t\t//\n\n\t\tif ( size === undefined ) size = 100;\n\t\tif ( divisions === undefined ) divisions = 4;\n\n\t\tvar data = this.data;\n\n\t\tvar paths = createPaths( text );\n\t\tvar shapes = [];\n\n\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction FontLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( FontLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t}\n\n\t\t\tvar font = scope.parse( json );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\treturn new Font( json );\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar context;\n\nvar AudioContext = {\n\n\tgetContext: function () {\n\n\t\tif ( context === undefined ) {\n\n\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn context;\n\n\t},\n\n\tsetContext: function ( value ) {\n\n\t\tcontext = value;\n\n\t}\n\n};\n\n/**\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nfunction AudioLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( AudioLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar context = AudioContext.getContext();\n\n\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t} );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction StereoCamera() {\n\n\tthis.type = 'StereoCamera';\n\n\tthis.aspect = 1;\n\n\tthis.eyeSep = 0.064;\n\n\tthis.cameraL = new PerspectiveCamera();\n\tthis.cameraL.layers.enable( 1 );\n\tthis.cameraL.matrixAutoUpdate = false;\n\n\tthis.cameraR = new PerspectiveCamera();\n\tthis.cameraR.layers.enable( 2 );\n\tthis.cameraR.matrixAutoUpdate = false;\n\n}\n\nObject.assign( StereoCamera.prototype, {\n\n\tupdate: ( function () {\n\n\t\tvar instance, focus, fov, aspect, near, far, zoom, eyeSep;\n\n\t\tvar eyeRight = new Matrix4();\n\t\tvar eyeLeft = new Matrix4();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tinstance = this;\n\t\t\t\tfocus = camera.focus;\n\t\t\t\tfov = camera.fov;\n\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\tnear = camera.near;\n\t\t\t\tfar = camera.far;\n\t\t\t\tzoom = camera.zoom;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\teyeSep = this.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\tvar ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t};\n\n\t} )()\n\n} );\n\n/**\n * Camera for rendering cube maps\n *\t- renders scene into axis-aligned cube\n *\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction CubeCamera( near, far, cubeResolution ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'CubeCamera';\n\n\tvar fov = 90, aspect = 1;\n\n\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraPX.up.set( 0, - 1, 0 );\n\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\tthis.add( cameraPX );\n\n\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraNX.up.set( 0, - 1, 0 );\n\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\tthis.add( cameraNX );\n\n\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraPY.up.set( 0, 0, 1 );\n\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\tthis.add( cameraPY );\n\n\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraNY.up.set( 0, 0, - 1 );\n\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\tthis.add( cameraNY );\n\n\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraPZ.up.set( 0, - 1, 0 );\n\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\tthis.add( cameraPZ );\n\n\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraNZ.up.set( 0, - 1, 0 );\n\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\tthis.add( cameraNZ );\n\n\tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\tthis.update = function ( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tvar renderTarget = this.renderTarget;\n\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderTarget.activeCubeFace = 0;\n\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 1;\n\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 2;\n\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 3;\n\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 4;\n\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderTarget.activeCubeFace = 5;\n\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\trenderer.setRenderTarget( null );\n\n\t};\n\n\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\tvar renderTarget = this.renderTarget;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\trenderTarget.activeCubeFace = i;\n\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( null );\n\n\t};\n\n}\n\nCubeCamera.prototype = Object.create( Object3D.prototype );\nCubeCamera.prototype.constructor = CubeCamera;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AudioListener() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'AudioListener';\n\n\tthis.context = AudioContext.getContext();\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( this.context.destination );\n\n\tthis.filter = null;\n\n}\n\nAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: AudioListener,\n\n\tgetInput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tremoveFilter: function ( ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.filter;\n\n\t},\n\n\tsetFilter: function ( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t},\n\n\tgetMasterVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\tsetMasterVolume: function ( value ) {\n\n\t\tthis.gain.gain.value = value;\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new Vector3();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3();\n\n\t\tvar orientation = new Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\tif ( listener.positionX ) {\n\n\t\t\t\tlistener.positionX.setValueAtTime( position.x, this.context.currentTime );\n\t\t\t\tlistener.positionY.setValueAtTime( position.y, this.context.currentTime );\n\t\t\t\tlistener.positionZ.setValueAtTime( position.z, this.context.currentTime );\n\t\t\t\tlistener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );\n\t\t\t\tlistener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );\n\t\t\t\tlistener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );\n\t\t\t\tlistener.upX.setValueAtTime( up.x, this.context.currentTime );\n\t\t\t\tlistener.upY.setValueAtTime( up.y, this.context.currentTime );\n\t\t\t\tlistener.upZ.setValueAtTime( up.z, this.context.currentTime );\n\n\t\t\t} else {\n\n\t\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t\t}\n\n\t\t};\n\n\t} )()\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nfunction Audio( listener ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Audio';\n\n\tthis.context = listener.context;\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( listener.getInput() );\n\n\tthis.autoplay = false;\n\n\tthis.buffer = null;\n\tthis.loop = false;\n\tthis.startTime = 0;\n\tthis.offset = 0;\n\tthis.playbackRate = 1;\n\tthis.isPlaying = false;\n\tthis.hasPlaybackControl = true;\n\tthis.sourceType = 'empty';\n\n\tthis.filters = [];\n\n}\n\nAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Audio,\n\n\tgetOutput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tsetNodeSource: function ( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t},\n\n\tsetBuffer: function ( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t},\n\n\tplay: function () {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar source = this.context.createBufferSource();\n\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.playbackRate.setValueAtTime( this.playbackRate, this.startTime );\n\t\tthis.startTime = this.context.currentTime;\n\t\tsource.start( this.startTime, this.offset );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\treturn this.connect();\n\n\t},\n\n\tpause: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.stop();\n\t\t\tthis.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tstop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.stop();\n\t\tthis.offset = 0;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t},\n\n\tconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdisconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilters: function () {\n\n\t\treturn this.filters;\n\n\t},\n\n\tsetFilters: function ( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value;\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t},\n\n\tsetFilter: function ( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t},\n\n\tsetPlaybackRate: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetPlaybackRate: function () {\n\n\t\treturn this.playbackRate;\n\n\t},\n\n\tonEnded: function () {\n\n\t\tthis.isPlaying = false;\n\n\t},\n\n\tgetLoop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t},\n\n\tsetLoop: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\tsetVolume: function ( value ) {\n\n\t\tthis.gain.gain.value = value;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction PositionalAudio( listener ) {\n\n\tAudio.call( this, listener );\n\n\tthis.panner = this.context.createPanner();\n\tthis.panner.connect( this.gain );\n\n}\n\nPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\tconstructor: PositionalAudio,\n\n\tgetOutput: function () {\n\n\t\treturn this.panner;\n\n\t},\n\n\tgetRefDistance: function () {\n\n\t\treturn this.panner.refDistance;\n\n\t},\n\n\tsetRefDistance: function ( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t},\n\n\tgetRolloffFactor: function () {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t},\n\n\tsetRolloffFactor: function ( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t},\n\n\tgetDistanceModel: function () {\n\n\t\treturn this.panner.distanceModel;\n\n\t},\n\n\tsetDistanceModel: function ( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t},\n\n\tgetMaxDistance: function () {\n\n\t\treturn this.panner.maxDistance;\n\n\t},\n\n\tsetMaxDistance: function ( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t};\n\n\t} )()\n\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AudioAnalyser( audio, fftSize ) {\n\n\tthis.analyser = audio.context.createAnalyser();\n\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\taudio.getOutput().connect( this.analyser );\n\n}\n\nObject.assign( AudioAnalyser.prototype, {\n\n\tgetFrequencyData: function () {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t},\n\n\tgetAverageFrequency: function () {\n\n\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n} );\n\n/**\n *\n * Buffered scene graph property that allows weighted accumulation.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\tthis.binding = binding;\n\tthis.valueSize = valueSize;\n\n\tvar bufferType = Float64Array,\n\t\tmixFunction;\n\n\tswitch ( typeName ) {\n\n\t\tcase 'quaternion':\n\t\t\tmixFunction = this._slerp;\n\t\t\tbreak;\n\n\t\tcase 'string':\n\t\tcase 'bool':\n\t\t\tbufferType = Array;\n\t\t\tmixFunction = this._select;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmixFunction = this._lerp;\n\n\t}\n\n\tthis.buffer = new bufferType( valueSize * 4 );\n\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t//\n\t// interpolators can use .buffer as their .result\n\t// the data then goes to 'incoming'\n\t//\n\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t// the cumulative result and are compared to detect\n\t// changes\n\t//\n\t// 'orig' stores the original state of the property\n\n\tthis._mixBufferRegion = mixFunction;\n\n\tthis.cumulativeWeight = 0;\n\n\tthis.useCount = 0;\n\tthis.referenceCount = 0;\n\n}\n\nObject.assign( PropertyMixer.prototype, {\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate: function ( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tvar mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t},\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply: function ( accuIndex ) {\n\n\t\tvar stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState: function () {\n\n\t\tvar binding = this.binding;\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * 3;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\tthis.cumulativeWeight = 0;\n\n\t},\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState: function () {\n\n\t\tvar originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t},\n\n\n\t// mix functions\n\n\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t},\n\n\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tvar s = 1 - t;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tvar j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n *\n * A reference to a real property in the scene graph.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\tthis._targetGroup = targetGroup;\n\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n}\n\nObject.assign( Composite.prototype, {\n\n\tgetValue: function ( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t},\n\n\tsetValue: function ( array, offset ) {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t},\n\n\tbind: function () {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t},\n\n\tunbind: function () {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n} );\n\n\nfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\tthis.path = path;\n\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\tthis.rootNode = rootNode;\n\n}\n\nObject.assign( PropertyBinding, {\n\n\tComposite: Composite,\n\n\tcreate: function ( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param  {string} name Node name to be sanitized.\n\t * @return {string}\n\t */\n\tsanitizeNodeName: function ( name ) {\n\n\t\treturn name.replace( /\\s/g, '_' ).replace( /[^\\w-]/g, '' );\n\n\t},\n\n\tparseTrackName: function () {\n\n\t\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t\t// be matched to parse the rest of the track name.\n\t\tvar directoryRe = /((?:[\\w-]+[\\/:])*)/;\n\n\t\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\t\tvar nodeRe = /([\\w-\\.]+)?/;\n\n\t\t// Object on target node, and accessor. Name may contain only word\n\t\t// characters. Accessor may contain any character except closing bracket.\n\t\tvar objectRe = /(?:\\.([\\w-]+)(?:\\[(.+)\\])?)?/;\n\n\t\t// Property and accessor. May contain only word characters. Accessor may\n\t\t// contain any non-bracket characters.\n\t\tvar propertyRe = /\\.([\\w-]+)(?:\\[(.+)\\])?/;\n\n\t\tvar trackRe = new RegExp( ''\n\t\t\t+ '^'\n\t\t\t+ directoryRe.source\n\t\t\t+ nodeRe.source\n\t\t\t+ objectRe.source\n\t\t\t+ propertyRe.source\n\t\t\t+ '$'\n\t\t);\n\n\t\tvar supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\t\treturn function ( trackName ) {\n\n\t\t\tvar matches = trackRe.exec( trackName );\n\n\t\t\tif ( ! matches ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t};\n\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\t\t\t\tif ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\treturn results;\n\n\t\t};\n\n\t}(),\n\n\tfindNode: function ( root, nodeName ) {\n\n\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tvar searchSkeleton = function ( skeleton ) {\n\n\t\t\t\tfor ( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n\t\t\t\t\tvar bone = skeleton.bones[ i ];\n\n\t\t\t\t\tif ( bone.name === nodeName ) {\n\n\t\t\t\t\t\treturn bone;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tvar bone = searchSkeleton( root.skeleton );\n\n\t\t\tif ( bone ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n} );\n\nObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable: function () {},\n\t_setValue_unavailable: function () {},\n\n\tBindingType: {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t},\n\n\tVersioning: {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t},\n\n\tGetterByBindingType: [\n\n\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t},\n\n\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t}\n\n\t\t},\n\n\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t},\n\n\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t}\n\n\t],\n\n\tSetterByBindingTypeAndVersioning: [\n\n\t\t[\n\t\t\t// Direct\n\n\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// EntireArray\n\n\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// ArrayElement\n\n\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// HasToFromArray\n\n\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t]\n\n\t],\n\n\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t// prototype version of these methods with one that represents\n\t\t// the bound state. When the property is not found, the methods\n\t\t// become no-ops.\n\n\t},\n\n\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t},\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind: function () {\n\n\t\tvar targetObject = this.node,\n\t\t\tparsedPath = this.parsedPath,\n\n\t\t\tobjectName = parsedPath.objectName,\n\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tvar versioning = this.Versioning.None;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tvar bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t},\n\n\tunbind: function () {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n} );\n\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign( PropertyBinding.prototype, {\n\n\t// initial state of these methods that calls 'bind'\n\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n} );\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n * \t-\tAdd objects you would otherwise pass as 'root' to the\n * \t\tconstructor or the .clipAction method of AnimationMixer.\n *\n * \t-\tInstead pass this object as 'root'.\n *\n * \t-\tYou can also add and remove objects later when the mixer\n * \t\tis running.\n *\n * Note:\n *\n *  \tObjects of this class appear as one object to the mixer,\n *  \tso cache control of the individual objects must be done\n *  \ton the group.\n *\n * Limitation:\n *\n * \t- \tThe animated properties must be compatible among the\n * \t\tall objects in the group.\n *\n *  -\tA single property can either be controlled through a\n *  \ttarget group or directly, but not both.\n *\n * @author tschw\n */\n\nfunction AnimationObjectGroup() {\n\n\tthis.uuid = _Math.generateUUID();\n\n\t// cached objects followed by the active ones\n\tthis._objects = Array.prototype.slice.call( arguments );\n\n\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t// note: read by PropertyBinding.Composite\n\n\tvar indices = {};\n\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t}\n\n\tthis._paths = [];\t\t\t\t\t// inside: string\n\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\tvar scope = this;\n\n\tthis.stats = {\n\n\t\tobjects: {\n\t\t\tget total() {\n\n\t\t\t\treturn scope._objects.length;\n\n\t\t\t},\n\t\t\tget inUse() {\n\n\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t}\n\t\t},\n\t\tget bindingsPerObject() {\n\n\t\t\treturn scope._bindings.length;\n\n\t\t}\n\n\t};\n\n}\n\nObject.assign( AnimationObjectGroup.prototype, {\n\n\tisAnimationObjectGroup: true,\n\n\tadd: function () {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ],\n\t\t\t\tknownObject = undefined;\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\tremove: function () {\n\n\t\tvar objects = this._objects,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// remove & forget\n\tuncache: function () {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ],\n\t\t\tbindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tvar paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tvar object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t},\n\n\tunsubscribe_: function ( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n *\n * Action provided by AnimationMixer for scheduling clip playback on specific\n * objects.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n *\n */\n\nfunction AnimationAction( mixer, clip, localRoot ) {\n\n\tthis._mixer = mixer;\n\tthis._clip = clip;\n\tthis._localRoot = localRoot || null;\n\n\tvar tracks = clip.tracks,\n\t\tnTracks = tracks.length,\n\t\tinterpolants = new Array( nTracks );\n\n\tvar interpolantSettings = {\n\t\tendingStart: ZeroCurvatureEnding,\n\t\tendingEnd: ZeroCurvatureEnding\n\t};\n\n\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\tinterpolants[ i ] = interpolant;\n\t\tinterpolant.settings = interpolantSettings;\n\n\t}\n\n\tthis._interpolantSettings = interpolantSettings;\n\n\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t// inside: PropertyMixer (managed by the mixer)\n\tthis._propertyBindings = new Array( nTracks );\n\n\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\tthis._timeScaleInterpolant = null;\n\tthis._weightInterpolant = null;\n\n\tthis.loop = LoopRepeat;\n\tthis._loopCount = - 1;\n\n\t// global mixer time when the action is to be started\n\t// it's set back to 'null' upon start of the action\n\tthis._startTime = null;\n\n\t// scaled local time of the action\n\t// gets clamped or wrapped to 0..clip.duration according to loop\n\tthis.time = 0;\n\n\tthis.timeScale = 1;\n\tthis._effectiveTimeScale = 1;\n\n\tthis.weight = 1;\n\tthis._effectiveWeight = 1;\n\n\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\tthis.paused = false;\t\t\t\t// true -> zero effective time scale\n\tthis.enabled = true;\t\t\t\t// false -> zero effective weight\n\n\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n}\n\nObject.assign( AnimationAction.prototype, {\n\n\t// State & Scheduling\n\n\tplay: function () {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t},\n\n\tstop: function () {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t},\n\n\treset: function () {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0;\t\t\t// restart clip\n\t\tthis._loopCount = - 1;\t// forget previous loops\n\t\tthis._startTime = null;\t// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t},\n\n\tisRunning: function () {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t},\n\n\t// return true when play has been called\n\tisScheduled: function () {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t},\n\n\tstartAt: function ( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t},\n\n\tsetLoop: function ( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t},\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight: function ( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t},\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight: function () {\n\n\t\treturn this._effectiveWeight;\n\n\t},\n\n\tfadeIn: function ( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t},\n\n\tfadeOut: function ( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t},\n\n\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t},\n\n\tstopFading: function () {\n\n\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale: function () {\n\n\t\treturn this._effectiveTimeScale;\n\n\t},\n\n\tsetDuration: function ( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\tsyncWith: function ( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\thalt: function ( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t},\n\n\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t},\n\n\tstopWarping: function () {\n\n\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Object Accessors\n\n\tgetMixer: function () {\n\n\t\treturn this._mixer;\n\n\t},\n\n\tgetClip: function () {\n\n\t\treturn this._clip;\n\n\t},\n\n\tgetRoot: function () {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t},\n\n\t// Interna\n\n\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t}\n\n\t\t\t// start\n\n\t\t\tthis._startTime = null; // unschedule\n\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tvar weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tvar interpolants = this._interpolants;\n\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_updateWeight: function ( time ) {\n\n\t\tvar weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t},\n\n\t_updateTimeScale: function ( time ) {\n\n\t\tvar timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t},\n\n\t_updateTime: function ( deltaTime ) {\n\n\t\tvar time = this.time + deltaTime;\n\n\t\tif ( deltaTime === 0 ) return time;\n\n\t\tvar duration = this._clip.duration,\n\n\t\t\tloop = this.loop,\n\t\t\tloopCount = this._loopCount;\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else break handle_stop;\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending < 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 0 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\tthis.time = time;\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.time = time;\n\t\treturn time;\n\n\t},\n\n\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\tvar settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n *\n * Player for AnimationClips.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction AnimationMixer( root ) {\n\n\tthis._root = root;\n\tthis._initMemoryManager();\n\tthis._accuIndex = 0;\n\n\tthis.time = 0;\n\n\tthis.timeScale = 1.0;\n\n}\n\nAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: AnimationMixer,\n\n\t_bindAction: function ( action, prototypeAction ) {\n\n\t\tvar root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar track = tracks[ i ],\n\t\t\t\ttrackName = track.name,\n\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t},\n\n\t_activateAction: function ( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t},\n\n\t_deactivateAction: function ( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t},\n\n\t// Memory manager\n\n\t_initMemoryManager: function () {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t},\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction: function ( action ) {\n\n\t\tvar index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t},\n\n\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\tvar actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t},\n\n\t_removeInactiveAction: function ( action ) {\n\n\t\tvar actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tvar clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t},\n\n\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\tvar bindings = action._propertyBindings;\n\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tvar binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_lendAction: function ( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t},\n\n\t_takeBackAction: function ( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t},\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tbindings = this._bindings;\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t},\n\n\t_removeInactiveBinding: function ( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tremove_empty_map: {\n\n\t\t\tfor ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t},\n\n\t_lendBinding: function ( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t},\n\n\t_takeBackBinding: function ( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t},\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant: function () {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t},\n\n\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t},\n\n\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction: function ( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\tprototypeAction = null;\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tvar existingAction =\n\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t},\n\n\t// get an existing action\n\texistingAction: function ( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction: function () {\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tthis._nActiveActions = 0;\n\t\tthis._nActiveBindings = 0;\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tactions[ i ].reset();\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].useCount = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// advance the time and update apply the animation\n\tupdate: function ( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tvar action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tvar bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// return this mixer's root target object\n\tgetRoot: function () {\n\n\t\treturn this._root;\n\n\t},\n\n\t// free all resources specific to a particular clip\n\tuncacheClip: function ( clip ) {\n\n\t\tvar actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t},\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot: function ( root ) {\n\n\t\tvar rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remove a targeted clip from the cache\n\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Uniform( value ) {\n\n\tif ( typeof value === 'string' ) {\n\n\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\tvalue = arguments[ 1 ];\n\n\t}\n\n\tthis.value = value;\n\n}\n\nUniform.prototype.clone = function () {\n\n\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n};\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InstancedBufferGeometry() {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'InstancedBufferGeometry';\n\tthis.maxInstancedCount = undefined;\n\n}\n\nInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\tconstructor: InstancedBufferGeometry,\n\n\tisInstancedBufferGeometry: true,\n\n\tcopy: function ( source ) {\n\n\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.data = interleavedBuffer;\n\tthis.itemSize = itemSize;\n\tthis.offset = offset;\n\n\tthis.normalized = normalized === true;\n\n}\n\nObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\tcount: {\n\n\t\tget: function () {\n\n\t\t\treturn this.data.count;\n\n\t\t}\n\n\t},\n\n\tarray: {\n\n\t\tget: function () {\n\n\t\t\treturn this.data.array;\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( InterleavedBufferAttribute.prototype, {\n\n\tisInterleavedBufferAttribute: true,\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InterleavedBuffer( array, stride ) {\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.array = array;\n\tthis.stride = stride;\n\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.onUploadCallback = function () {};\n\n\tthis.version = 0;\n\n}\n\nObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\tset: function ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n} );\n\nObject.assign( InterleavedBuffer.prototype, {\n\n\tisInterleavedBuffer: true,\n\n\tsetArray: function ( array ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.count = array !== undefined ? array.length / this.stride : 0;\n\t\tthis.array = array;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tonUpload: function ( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\tInterleavedBuffer.call( this, array, stride );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n}\n\nInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\tconstructor: InstancedInterleavedBuffer,\n\n\tisInstancedInterleavedBuffer: true,\n\n\tcopy: function ( source ) {\n\n\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n\tBufferAttribute.call( this, array, itemSize );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n}\n\nInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\tconstructor: InstancedBufferAttribute,\n\n\tisInstancedBufferAttribute: true,\n\n\tcopy: function ( source ) {\n\n\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://clara.io/\n * @author stephomi / http://stephaneginier.com/\n */\n\nfunction Raycaster( origin, direction, near, far ) {\n\n\tthis.ray = new Ray( origin, direction );\n\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\tthis.near = near || 0;\n\tthis.far = far || Infinity;\n\n\tthis.params = {\n\t\tMesh: {},\n\t\tLine: {},\n\t\tLOD: {},\n\t\tPoints: { threshold: 1 },\n\t\tSprite: {}\n\t};\n\n\tObject.defineProperties( this.params, {\n\t\tPointCloud: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\treturn this.Points;\n\n\t\t\t}\n\t\t}\n\t} );\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\tif ( object.visible === false ) return;\n\n\tobject.raycast( raycaster, intersects );\n\n\tif ( recursive === true ) {\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\nObject.assign( Raycaster.prototype, {\n\n\tlinePrecision: 1,\n\n\tset: function ( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t},\n\n\tsetFromCamera: function ( coords, camera ) {\n\n\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t}\n\n\t},\n\n\tintersectObject: function ( object, recursive ) {\n\n\t\tvar intersects = [];\n\n\t\tintersectObject( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t},\n\n\tintersectObjects: function ( objects, recursive ) {\n\n\t\tvar intersects = [];\n\n\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\treturn intersects;\n\n\t\t}\n\n\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Clock( autoStart ) {\n\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\tthis.startTime = 0;\n\tthis.oldTime = 0;\n\tthis.elapsedTime = 0;\n\n\tthis.running = false;\n\n}\n\nObject.assign( Clock.prototype, {\n\n\tstart: function () {\n\n\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t},\n\n\tstop: function () {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t},\n\n\tgetElapsedTime: function () {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t},\n\n\tgetDelta: function () {\n\n\t\tvar diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The poles (phi) are at the positive and negative y axis.\n * The equator starts at positive z.\n */\n\nfunction Spherical( radius, phi, theta ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n\treturn this;\n\n}\n\nObject.assign( Spherical.prototype, {\n\n\tset: function ( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t},\n\n\t// restrict phi to be betwee EPS and PI-EPS\n\tmakeSafe: function () {\n\n\t\tvar EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function ( vec3 ) {\n\n\t\tthis.radius = vec3.length();\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\tthis.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n *\n */\n\nfunction Cylindrical( radius, theta, y ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\treturn this;\n\n}\n\nObject.assign( Cylindrical.prototype, {\n\n\tset: function ( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function ( vec3 ) {\n\n\t\tthis.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );\n\t\tthis.theta = Math.atan2( vec3.x, vec3.z );\n\t\tthis.y = vec3.y;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction ImmediateRenderObject( material ) {\n\n\tObject3D.call( this );\n\n\tthis.material = material;\n\tthis.render = function ( /* renderCallback */ ) {};\n\n}\n\nImmediateRenderObject.prototype = Object.create( Object3D.prototype );\nImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\nImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction VertexNormalsHelper( object, size, hex, linewidth ) {\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\tnNormals = objGeometry.faces.length * 3;\n\n\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t}\n\n\t//\n\n\tvar geometry = new BufferGeometry();\n\n\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n}\n\nVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\nVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\nVertexNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new Vector3();\n\tvar v2 = new Vector3();\n\tvar normalMatrix = new Matrix3();\n\n\treturn function update() {\n\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\tvar idx = 0;\n\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t};\n\n}() );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction SpotLightHelper( light, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tvar geometry = new BufferGeometry();\n\n\tvar positions = [\n\t\t0, 0, 0, \t0, 0, 1,\n\t\t0, 0, 0, \t1, 0, 1,\n\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t0, 0, 0, \t0, 1, 1,\n\t\t0, 0, 0, \t0, - 1, 1\n\t];\n\n\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\tpositions.push(\n\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t);\n\n\t}\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\tvar material = new LineBasicMaterial( { fog: false } );\n\n\tthis.cone = new LineSegments( geometry, material );\n\tthis.add( this.cone );\n\n\tthis.update();\n\n}\n\nSpotLightHelper.prototype = Object.create( Object3D.prototype );\nSpotLightHelper.prototype.constructor = SpotLightHelper;\n\nSpotLightHelper.prototype.dispose = function () {\n\n\tthis.cone.geometry.dispose();\n\tthis.cone.material.dispose();\n\n};\n\nSpotLightHelper.prototype.update = function () {\n\n\tvar vector = new Vector3();\n\tvar vector2 = new Vector3();\n\n\treturn function update() {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n}();\n\n/**\n * @author Sean Griffin / http://twitter.com/sgrif\n * @author Michael Guerrero / http://realitymeltdown.com\n * @author mrdoob / http://mrdoob.com/\n * @author ikerr / http://verold.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction getBoneList( object ) {\n\n\tvar boneList = [];\n\n\tif ( object && object.isBone ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\nfunction SkeletonHelper( object ) {\n\n\tvar bones = getBoneList( object );\n\n\tvar geometry = new BufferGeometry();\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar color1 = new Color( 0, 0, 1 );\n\tvar color2 = new Color( 0, 1, 0 );\n\n\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\tvar bone = bones[ i ];\n\n\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t}\n\n\t}\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\tLineSegments.call( this, geometry, material );\n\n\tthis.root = object;\n\tthis.bones = bones;\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n}\n\nSkeletonHelper.prototype = Object.create( LineSegments.prototype );\nSkeletonHelper.prototype.constructor = SkeletonHelper;\n\nSkeletonHelper.prototype.updateMatrixWorld = function () {\n\n\tvar vector = new Vector3();\n\n\tvar boneMatrix = new Matrix4();\n\tvar matrixWorldInv = new Matrix4();\n\n\treturn function updateMatrixWorld( force ) {\n\n\t\tvar bones = this.bones;\n\n\t\tvar geometry = this.geometry;\n\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\tmatrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\tposition.setXYZ( j, vector.x, vector.y, vector.z );\n\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, vector.x, vector.y, vector.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n}();\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction PointLightHelper( light, sphereSize, color ) {\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.color = color;\n\n\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\tMesh.call( this, geometry, material );\n\n\tthis.matrix = this.light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n\n\t/*\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tvar d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n}\n\nPointLightHelper.prototype = Object.create( Mesh.prototype );\nPointLightHelper.prototype.constructor = PointLightHelper;\n\nPointLightHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material.dispose();\n\n};\n\nPointLightHelper.prototype.update = function () {\n\n\tif ( this.color !== undefined ) {\n\n\t\tthis.material.color.set( this.color );\n\n\t} else {\n\n\t\tthis.material.color.copy( this.light.color );\n\n\t}\n\n\t/*\n\tvar d = this.light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.visible = true;\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\t*/\n\n};\n\n/**\n * @author abelnation / http://github.com/abelnation\n * @author Mugen87 / http://github.com/Mugen87\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction RectAreaLightHelper( light, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tvar material = new LineBasicMaterial( { fog: false } );\n\n\tvar geometry = new BufferGeometry();\n\n\tgeometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );\n\n\tthis.line = new Line( geometry, material );\n\tthis.add( this.line );\n\n\n\tthis.update();\n\n}\n\nRectAreaLightHelper.prototype = Object.create( Object3D.prototype );\nRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\n\nRectAreaLightHelper.prototype.dispose = function () {\n\n\tthis.children[ 0 ].geometry.dispose();\n\tthis.children[ 0 ].material.dispose();\n\n};\n\nRectAreaLightHelper.prototype.update = function () {\n\n\t// calculate new dimensions of the helper\n\n\tvar hx = this.light.width * 0.5;\n\tvar hy = this.light.height * 0.5;\n\n\tvar position = this.line.geometry.attributes.position;\n\tvar array = position.array;\n\n\t// update vertices\n\n\tarray[ 0 ] = hx; array[ 1 ] = - hy; array[ 2 ] = 0;\n\tarray[ 3 ] = hx; array[ 4 ] = hy; array[ 5 ] = 0;\n\tarray[ 6 ] = - hx; array[ 7 ] = hy; array[ 8 ] = 0;\n\tarray[ 9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;\n\tarray[ 12 ] = hx; array[ 13 ] = - hy; array[ 14 ] = 0;\n\n\tposition.needsUpdate = true;\n\n\tif ( this.color !== undefined ) {\n\n\t\tthis.line.material.color.set( this.color );\n\n\t} else {\n\n\t\tthis.line.material.color.copy( this.light.color );\n\n\t}\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction HemisphereLightHelper( light, size, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tvar geometry = new OctahedronBufferGeometry( size );\n\tgeometry.rotateY( Math.PI * 0.5 );\n\n\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\tif ( this.color === undefined ) this.material.vertexColors = VertexColors;\n\n\tvar position = geometry.getAttribute( 'position' );\n\tvar colors = new Float32Array( position.count * 3 );\n\n\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\tthis.add( new Mesh( geometry, this.material ) );\n\n\tthis.update();\n\n}\n\nHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\nHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\nHemisphereLightHelper.prototype.dispose = function () {\n\n\tthis.children[ 0 ].geometry.dispose();\n\tthis.children[ 0 ].material.dispose();\n\n};\n\nHemisphereLightHelper.prototype.update = function () {\n\n\tvar vector = new Vector3();\n\n\tvar color1 = new Color();\n\tvar color2 = new Color();\n\n\treturn function update() {\n\n\t\tvar mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\tcolor1.copy( this.light.color );\n\t\t\tcolor2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? color1 : color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t};\n\n}();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction GridHelper( size, divisions, color1, color2 ) {\n\n\tsize = size || 10;\n\tdivisions = divisions || 10;\n\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar center = divisions / 2;\n\tvar step = size / divisions;\n\tvar halfSize = size / 2;\n\n\tvar vertices = [], colors = [];\n\n\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\tvar color = i === center ? color1 : color2;\n\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\n\t}\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nGridHelper.prototype = Object.create( LineSegments.prototype );\nGridHelper.prototype.constructor = GridHelper;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n * @author Hectate / http://www.github.com/Hectate\n */\n\nfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\tradius = radius || 10;\n\tradials = radials || 16;\n\tcircles = circles || 8;\n\tdivisions = divisions || 64;\n\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar x, z;\n\tvar v, i, j, r, color;\n\n\t// create the radials\n\n\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\tx = Math.sin( v ) * radius;\n\t\tz = Math.cos( v ) * radius;\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tvertices.push( x, 0, z );\n\n\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\tcolors.push( color.r, color.g, color.b );\n\t\tcolors.push( color.r, color.g, color.b );\n\n\t}\n\n\t// create the circles\n\n\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\tr = radius - ( radius / circles * i );\n\n\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t// first vertex\n\n\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * r;\n\t\t\tz = Math.cos( v ) * r;\n\n\t\t\tvertices.push( x, 0, z );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t// second vertex\n\n\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * r;\n\t\t\tz = Math.cos( v ) * r;\n\n\t\t\tvertices.push( x, 0, z );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t}\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nPolarGridHelper.prototype = Object.create( LineSegments.prototype );\nPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction FaceNormalsHelper( object, size, hex, linewidth ) {\n\n\t// FaceNormalsHelper only supports THREE.Geometry\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\tnNormals = objGeometry.faces.length;\n\n\t} else {\n\n\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t}\n\n\t//\n\n\tvar geometry = new BufferGeometry();\n\n\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\tthis.update();\n\n}\n\nFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\nFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\nFaceNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new Vector3();\n\tvar v2 = new Vector3();\n\tvar normalMatrix = new Matrix3();\n\n\treturn function update() {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tvar vertices = objGeometry.vertices;\n\n\t\tvar faces = objGeometry.faces;\n\n\t\tvar idx = 0;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar normal = face.normal;\n\n\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t.divideScalar( 3 )\n\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t};\n\n}() );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction DirectionalLightHelper( light, size, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tif ( size === undefined ) size = 1;\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [\n\t\t- size, size, 0,\n\t\tsize, size, 0,\n\t\tsize, - size, 0,\n\t\t- size, - size, 0,\n\t\t- size, size, 0\n\t], 3 ) );\n\n\tvar material = new LineBasicMaterial( { fog: false } );\n\n\tthis.lightPlane = new Line( geometry, material );\n\tthis.add( this.lightPlane );\n\n\tgeometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\tthis.targetLine = new Line( geometry, material );\n\tthis.add( this.targetLine );\n\n\tthis.update();\n\n}\n\nDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\nDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\nDirectionalLightHelper.prototype.dispose = function () {\n\n\tthis.lightPlane.geometry.dispose();\n\tthis.lightPlane.material.dispose();\n\tthis.targetLine.geometry.dispose();\n\tthis.targetLine.material.dispose();\n\n};\n\nDirectionalLightHelper.prototype.update = function () {\n\n\tvar v1 = new Vector3();\n\tvar v2 = new Vector3();\n\tvar v3 = new Vector3();\n\n\treturn function update() {\n\n\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\tv3.subVectors( v2, v1 );\n\n\t\tthis.lightPlane.lookAt( v3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( v3 );\n\t\tthis.targetLine.scale.z = v3.length();\n\n\t};\n\n}();\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author Mugen87 / https://github.com/Mugen87\n *\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\n\nfunction CameraHelper( camera ) {\n\n\tvar geometry = new BufferGeometry();\n\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar pointMap = {};\n\n\t// colors\n\n\tvar colorFrustum = new Color( 0xffaa00 );\n\tvar colorCone = new Color( 0xff0000 );\n\tvar colorUp = new Color( 0x00aaff );\n\tvar colorTarget = new Color( 0xffffff );\n\tvar colorCross = new Color( 0x333333 );\n\n\t// near\n\n\taddLine( 'n1', 'n2', colorFrustum );\n\taddLine( 'n2', 'n4', colorFrustum );\n\taddLine( 'n4', 'n3', colorFrustum );\n\taddLine( 'n3', 'n1', colorFrustum );\n\n\t// far\n\n\taddLine( 'f1', 'f2', colorFrustum );\n\taddLine( 'f2', 'f4', colorFrustum );\n\taddLine( 'f4', 'f3', colorFrustum );\n\taddLine( 'f3', 'f1', colorFrustum );\n\n\t// sides\n\n\taddLine( 'n1', 'f1', colorFrustum );\n\taddLine( 'n2', 'f2', colorFrustum );\n\taddLine( 'n3', 'f3', colorFrustum );\n\taddLine( 'n4', 'f4', colorFrustum );\n\n\t// cone\n\n\taddLine( 'p', 'n1', colorCone );\n\taddLine( 'p', 'n2', colorCone );\n\taddLine( 'p', 'n3', colorCone );\n\taddLine( 'p', 'n4', colorCone );\n\n\t// up\n\n\taddLine( 'u1', 'u2', colorUp );\n\taddLine( 'u2', 'u3', colorUp );\n\taddLine( 'u3', 'u1', colorUp );\n\n\t// target\n\n\taddLine( 'c', 't', colorTarget );\n\taddLine( 'p', 'c', colorCross );\n\n\t// cross\n\n\taddLine( 'cn1', 'cn2', colorCross );\n\taddLine( 'cn3', 'cn4', colorCross );\n\n\taddLine( 'cf1', 'cf2', colorCross );\n\taddLine( 'cf3', 'cf4', colorCross );\n\n\tfunction addLine( a, b, color ) {\n\n\t\taddPoint( a, color );\n\t\taddPoint( b, color );\n\n\t}\n\n\tfunction addPoint( id, color ) {\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tcolors.push( color.r, color.g, color.b );\n\n\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\tpointMap[ id ] = [];\n\n\t\t}\n\n\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t}\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tLineSegments.call( this, geometry, material );\n\n\tthis.camera = camera;\n\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\tthis.matrix = camera.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.pointMap = pointMap;\n\n\tthis.update();\n\n}\n\nCameraHelper.prototype = Object.create( LineSegments.prototype );\nCameraHelper.prototype.constructor = CameraHelper;\n\nCameraHelper.prototype.update = function () {\n\n\tvar geometry, pointMap;\n\n\tvar vector = new Vector3();\n\tvar camera = new Camera();\n\n\tfunction setPoint( point, x, y, z ) {\n\n\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tposition.setXYZ( points[ i ], vector.x, vector.y, vector.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn function update() {\n\n\t\tgeometry = this.geometry;\n\t\tpointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix\n\t\t// world matrix must be identity\n\n\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', 0, 0, - 1 );\n\t\tsetPoint( 't', 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', - w, - h, - 1 );\n\t\tsetPoint( 'n2', w, - h, - 1 );\n\t\tsetPoint( 'n3', - w, h, - 1 );\n\t\tsetPoint( 'n4', w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', - w, - h, 1 );\n\t\tsetPoint( 'f2', w, - h, 1 );\n\t\tsetPoint( 'f3', - w, h, 1 );\n\t\tsetPoint( 'f4', w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', - w, 0, 1 );\n\t\tsetPoint( 'cf2', w, 0, 1 );\n\t\tsetPoint( 'cf3', 0, - h, 1 );\n\t\tsetPoint( 'cf4', 0, h, 1 );\n\n\t\tsetPoint( 'cn1', - w, 0, - 1 );\n\t\tsetPoint( 'cn2', w, 0, - 1 );\n\t\tsetPoint( 'cn3', 0, - h, - 1 );\n\t\tsetPoint( 'cn4', 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t};\n\n}();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n */\n\nfunction BoxHelper( object, color ) {\n\n\tthis.object = object;\n\n\tif ( color === undefined ) color = 0xffff00;\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\tvar positions = new Float32Array( 8 * 3 );\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n}\n\nBoxHelper.prototype = Object.create( LineSegments.prototype );\nBoxHelper.prototype.constructor = BoxHelper;\n\nBoxHelper.prototype.update = ( function () {\n\n\tvar box = new Box3();\n\n\treturn function update( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\tbox.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tvar min = box.min;\n\t\tvar max = box.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t};\n\n} )();\n\nBoxHelper.prototype.setFromObject = function ( object ) {\n\n\tthis.object = object;\n\tthis.update();\n\n\treturn this;\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Box3Helper( box, hex ) {\n\n\tthis.type = 'Box3Helper';\n\n\tthis.box = box;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\tvar geometry = new BufferGeometry();\n\n\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\tthis.geometry.computeBoundingSphere();\n\n}\n\nBox3Helper.prototype = Object.create( LineSegments.prototype );\nBox3Helper.prototype.constructor = Box3Helper;\n\nBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\tvar box = this.box;\n\n\tif ( box.isEmpty() ) return;\n\n\tbox.getCenter( this.position );\n\n\tbox.getSize( this.scale );\n\n\tthis.scale.multiplyScalar( 0.5 );\n\n\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction PlaneHelper( plane, size, hex ) {\n\n\tthis.type = 'PlaneHelper';\n\n\tthis.plane = plane;\n\n\tthis.size = ( size === undefined ) ? 1 : size;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\tgeometry.computeBoundingSphere();\n\n\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t//\n\n\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\tvar geometry2 = new BufferGeometry();\n\tgeometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\tgeometry2.computeBoundingSphere();\n\n\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\n\n}\n\nPlaneHelper.prototype = Object.create( Line.prototype );\nPlaneHelper.prototype.constructor = PlaneHelper;\n\nPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\tvar scale = - this.plane.constant;\n\n\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\n\n\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\tthis.lookAt( this.plane.normal );\n\n\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://clara.io\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  color - color in hex value\n *  headLength - Number\n *  headWidth - Number\n */\n\nvar lineGeometry;\nvar coneGeometry;\n\nfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t// dir is assumed to be normalized\n\n\tObject3D.call( this );\n\n\tif ( color === undefined ) color = 0xffff00;\n\tif ( length === undefined ) length = 1;\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tif ( lineGeometry === undefined ) {\n\n\t\tlineGeometry = new BufferGeometry();\n\t\tlineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\tconeGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\t}\n\n\tthis.position.copy( origin );\n\n\tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\tthis.line.matrixAutoUpdate = false;\n\tthis.add( this.line );\n\n\tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\tthis.cone.matrixAutoUpdate = false;\n\tthis.add( this.cone );\n\n\tthis.setDirection( dir );\n\tthis.setLength( length, headLength, headWidth );\n\n}\n\nArrowHelper.prototype = Object.create( Object3D.prototype );\nArrowHelper.prototype.constructor = ArrowHelper;\n\nArrowHelper.prototype.setDirection = ( function () {\n\n\tvar axis = new Vector3();\n\tvar radians;\n\n\treturn function setDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tradians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t}\n\n\t};\n\n}() );\n\nArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\tthis.line.updateMatrix();\n\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\tthis.cone.position.y = length;\n\tthis.cone.updateMatrix();\n\n};\n\nArrowHelper.prototype.setColor = function ( color ) {\n\n\tthis.line.material.color.copy( color );\n\tthis.cone.material.color.copy( color );\n\n};\n\n/**\n * @author sroucheray / http://sroucheray.org/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AxesHelper( size ) {\n\n\tsize = size || 1;\n\n\tvar vertices = [\n\t\t0, 0, 0,\tsize, 0, 0,\n\t\t0, 0, 0,\t0, size, 0,\n\t\t0, 0, 0,\t0, 0, size\n\t];\n\n\tvar colors = [\n\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t0, 0, 1,\t0, 0.6, 1\n\t];\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nAxesHelper.prototype = Object.create( LineSegments.prototype );\nAxesHelper.prototype.constructor = AxesHelper;\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar SceneUtils = {\n\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n\t\tvar group = new Group();\n\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\n\t\t}\n\n\t\treturn group;\n\n\t},\n\n\tdetach: function ( child, parent, scene ) {\n\n\t\tchild.applyMatrix( parent.matrixWorld );\n\t\tparent.remove( child );\n\t\tscene.add( child );\n\n\t},\n\n\tattach: function ( child, scene, parent ) {\n\n\t\tchild.applyMatrix( new Matrix4().getInverse( parent.matrixWorld ) );\n\n\t\tscene.remove( child );\n\t\tparent.add( child );\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n}\n\nvar LineStrip = 0;\n\nvar LinePieces = 1;\n\nfunction MeshFaceMaterial( materials ) {\n\n\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\treturn materials;\n\n}\n\nfunction MultiMaterial( materials ) {\n\n\tif ( materials === undefined ) materials = [];\n\n\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\tmaterials.isMultiMaterial = true;\n\tmaterials.materials = materials;\n\tmaterials.clone = function () {\n\n\t\treturn materials.slice();\n\n\t};\n\treturn materials;\n\n}\n\nfunction PointCloud( geometry, material ) {\n\n\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\treturn new Points( geometry, material );\n\n}\n\nfunction Particle( material ) {\n\n\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\treturn new Sprite( material );\n\n}\n\nfunction ParticleSystem( geometry, material ) {\n\n\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\treturn new Points( geometry, material );\n\n}\n\nfunction PointCloudMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction ParticleBasicMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction ParticleSystemMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction Vertex( x, y, z ) {\n\n\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\treturn new Vector3( x, y, z );\n\n}\n\n//\n\nfunction DynamicBufferAttribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n}\n\nfunction Int8Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\treturn new Int8BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint8Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\treturn new Uint8BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n}\n\nfunction Int16Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\treturn new Int16BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint16Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\treturn new Uint16BufferAttribute( array, itemSize );\n\n}\n\nfunction Int32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\treturn new Int32BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\treturn new Uint32BufferAttribute( array, itemSize );\n\n}\n\nfunction Float32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\treturn new Float32BufferAttribute( array, itemSize );\n\n}\n\nfunction Float64Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\treturn new Float64BufferAttribute( array, itemSize );\n\n}\n\n//\n\nCurve.create = function ( construct, getPoint ) {\n\n\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\tconstruct.prototype = Object.create( Curve.prototype );\n\tconstruct.prototype.constructor = construct;\n\tconstruct.prototype.getPoint = getPoint;\n\n\treturn construct;\n\n};\n\n//\n\nObject.assign( CurvePath.prototype, {\n\n\tcreatePointsGeometry: function ( divisions ) {\n\n\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\tvar pts = this.getPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t// generate geometry from equidistant sampling along the path\n\n\t\tvar pts = this.getSpacedPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\tcreateGeometry: function ( points ) {\n\n\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\tvar geometry = new Geometry();\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\n//\n\nObject.assign( Path.prototype, {\n\n\tfromPoints: function ( points ) {\n\n\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\tthis.setFromPoints( points );\n\n\t}\n\n} );\n\n//\n\nfunction ClosedSplineCurve3( points ) {\n\n\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\tCatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\tthis.closed = true;\n\n}\n\nClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n//\n\nfunction SplineCurve3( points ) {\n\n\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\tCatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\n}\n\nSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n//\n\nfunction Spline( points ) {\n\n\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\tCatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\n}\n\nSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\nObject.assign( Spline.prototype, {\n\n\tinitFromArray: function ( /* a */ ) {\n\n\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t},\n\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t},\n\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t}\n\n} );\n\n//\n\nfunction AxisHelper( size ) {\n\n\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\treturn new AxesHelper( size );\n\n}\n\nfunction BoundingBoxHelper( object, color ) {\n\n\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\treturn new BoxHelper( object, color );\n\n}\n\nfunction EdgesHelper( object, hex ) {\n\n\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n}\n\nGridHelper.prototype.setColors = function () {\n\n\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n};\n\nSkeletonHelper.prototype.update = function () {\n\n\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n};\n\nfunction WireframeHelper( object, hex ) {\n\n\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n}\n\n//\n\nObject.assign( Loader.prototype, {\n\n\textractUrlBase: function ( url ) {\n\n\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t}\n\n} );\n\nfunction XHRLoader( manager ) {\n\n\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\treturn new FileLoader( manager );\n\n}\n\nfunction BinaryTextureLoader( manager ) {\n\n\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\treturn new DataTextureLoader( manager );\n\n}\n\n//\n\nObject.assign( Box2.prototype, {\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t},\n\tempty: function () {\n\n\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\n\t},\n\tisIntersectionBox: function ( box ) {\n\n\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\n\t},\n\tsize: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\treturn this.getSize( optionalTarget );\n\n\t}\n} );\n\nObject.assign( Box3.prototype, {\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t},\n\tempty: function () {\n\n\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\n\t},\n\tisIntersectionBox: function ( box ) {\n\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\n\t},\n\tsize: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\treturn this.getSize( optionalTarget );\n\n\t}\n} );\n\nLine3.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\nObject.assign( _Math, {\n\n\trandom16: function () {\n\n\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\treturn Math.random();\n\n\t},\n\n\tnearestPowerOfTwo: function ( value ) {\n\n\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\treturn _Math.floorPowerOfTwo( value );\n\n\t},\n\n\tnextPowerOfTwo: function ( value ) {\n\n\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\treturn _Math.ceilPowerOfTwo( value );\n\n\t}\n\n} );\n\nObject.assign( Matrix3.prototype, {\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\treturn this.toArray( array, offset );\n\n\t},\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\treturn vector.applyMatrix3( this );\n\n\t},\n\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t},\n\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\treturn this.applyToBufferAttribute( buffer );\n\n\t},\n\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t}\n\n} );\n\nObject.assign( Matrix4.prototype, {\n\n\textractPosition: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\treturn this.copyPosition( m );\n\n\t},\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\treturn this.toArray( array, offset );\n\n\t},\n\tgetPosition: function () {\n\n\t\tvar v1;\n\n\t\treturn function getPosition() {\n\n\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t};\n\n\t}(),\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\treturn this.makeRotationFromQuaternion( q );\n\n\t},\n\tmultiplyToArray: function () {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t},\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\tmultiplyVector4: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t},\n\trotateAxis: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\tv.transformDirection( this );\n\n\t},\n\tcrossVector: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\ttranslate: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t},\n\trotateX: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t},\n\trotateY: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t},\n\trotateZ: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t},\n\trotateByAxis: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t},\n\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\treturn this.applyToBufferAttribute( buffer );\n\n\t},\n\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t},\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t}\n\n} );\n\nPlane.prototype.isIntersectionLine = function ( line ) {\n\n\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\treturn this.intersectsLine( line );\n\n};\n\nQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\treturn vector.applyQuaternion( this );\n\n};\n\nObject.assign( Ray.prototype, {\n\n\tisIntersectionBox: function ( box ) {\n\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\n\t},\n\tisIntersectionPlane: function ( plane ) {\n\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\treturn this.intersectsPlane( plane );\n\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\n\t}\n\n} );\n\nObject.assign( Shape.prototype, {\n\n\textractAllPoints: function ( divisions ) {\n\n\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\treturn this.extractPoints( divisions );\n\n\t},\n\textrude: function ( options ) {\n\n\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\treturn new ExtrudeGeometry( this, options );\n\n\t},\n\tmakeGeometry: function ( options ) {\n\n\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\treturn new ShapeGeometry( this, options );\n\n\t}\n\n} );\n\nObject.assign( Vector2.prototype, {\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t},\n\tdistanceToManhattan: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\treturn this.manhattanDistanceTo( v );\n\n\t},\n\tlengthManhattan: function () {\n\n\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\treturn this.manhattanLength();\n\n\t}\n\n} );\n\nObject.assign( Vector3.prototype, {\n\n\tsetEulerFromRotationMatrix: function () {\n\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t},\n\tsetEulerFromQuaternion: function () {\n\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t},\n\tgetPositionFromMatrix: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\treturn this.setFromMatrixPosition( m );\n\n\t},\n\tgetScaleFromMatrix: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\treturn this.setFromMatrixScale( m );\n\n\t},\n\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t},\n\tapplyProjection: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\treturn this.applyMatrix4( m );\n\n\t},\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t},\n\tdistanceToManhattan: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\treturn this.manhattanDistanceTo( v );\n\n\t},\n\tlengthManhattan: function () {\n\n\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\treturn this.manhattanLength();\n\n\t}\n\n} );\n\nObject.assign( Vector4.prototype, {\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t},\n\tlengthManhattan: function () {\n\n\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\treturn this.manhattanLength();\n\n\t}\n\n} );\n\n//\n\nGeometry.prototype.computeTangents = function () {\n\n\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n};\n\nObject.assign( Object3D.prototype, {\n\n\tgetChildByName: function ( name ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\treturn this.getObjectByName( name );\n\n\t},\n\trenderDepth: function () {\n\n\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t},\n\ttranslate: function ( distance, axis ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\treturn this.translateOnAxis( axis, distance );\n\n\t}\n\n} );\n\nObject.defineProperties( Object3D.prototype, {\n\n\teulerOrder: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\treturn this.rotation.order;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\tthis.rotation.order = value;\n\n\t\t}\n\t},\n\tuseQuaternion: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperties( LOD.prototype, {\n\n\tobjects: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\treturn this.levels;\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\tget: function () {\n\n\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t},\n\tset: function () {\n\n\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t}\n\n} );\n\nObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\tget: function () {\n\n\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\treturn this.arcLengthDivisions;\n\n\t},\n\tset: function ( value ) {\n\n\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\tthis.arcLengthDivisions = value;\n\n\t}\n\n} );\n\n//\n\nPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\tthis.setFocalLength( focalLength );\n\n};\n\n//\n\nObject.defineProperties( Light.prototype, {\n\tonlyShadow: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t}\n\t},\n\tshadowCameraFov: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\tthis.shadow.camera.fov = value;\n\n\t\t}\n\t},\n\tshadowCameraLeft: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\tthis.shadow.camera.left = value;\n\n\t\t}\n\t},\n\tshadowCameraRight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\tthis.shadow.camera.right = value;\n\n\t\t}\n\t},\n\tshadowCameraTop: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\tthis.shadow.camera.top = value;\n\n\t\t}\n\t},\n\tshadowCameraBottom: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t}\n\t},\n\tshadowCameraNear: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\tthis.shadow.camera.near = value;\n\n\t\t}\n\t},\n\tshadowCameraFar: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\tthis.shadow.camera.far = value;\n\n\t\t}\n\t},\n\tshadowCameraVisible: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t}\n\t},\n\tshadowBias: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\tthis.shadow.bias = value;\n\n\t\t}\n\t},\n\tshadowDarkness: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t}\n\t},\n\tshadowMapWidth: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t}\n\t},\n\tshadowMapHeight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( BufferAttribute.prototype, {\n\n\tlength: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\treturn this.array.length;\n\n\t\t}\n\t}\n\n} );\n\nObject.assign( BufferGeometry.prototype, {\n\n\taddIndex: function ( index ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\tthis.setIndex( index );\n\n\t},\n\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\tif ( indexOffset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t}\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\tthis.addGroup( start, count );\n\n\t},\n\tclearDrawCalls: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\tthis.clearGroups();\n\n\t},\n\tcomputeTangents: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t},\n\tcomputeOffsets: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t}\n\n} );\n\nObject.defineProperties( BufferGeometry.prototype, {\n\n\tdrawcalls: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t},\n\toffsets: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( Uniform.prototype, {\n\n\tdynamic: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t}\n\t},\n\tonUpdate: {\n\t\tvalue: function () {\n\n\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\treturn this;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( Material.prototype, {\n\n\twrapAround: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t}\n\t},\n\twrapRGB: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\treturn new Color();\n\n\t\t}\n\t},\n\n\tshading: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\tmetal: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\treturn false;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperties( ShaderMaterial.prototype, {\n\n\tderivatives: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\treturn this.extensions.derivatives;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\tthis.extensions.derivatives = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.assign( WebGLRenderer.prototype, {\n\n\tgetCurrentRenderTarget: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\treturn this.getRenderTarget();\n\n\t},\n\n\tgetMaxAnisotropy: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t},\n\n\tgetPrecision: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\treturn this.capabilities.precision;\n\n\t},\n\n\tresetGLState: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\treturn this.state.reset();\n\n\t},\n\n\tsupportsFloatTextures: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t},\n\tsupportsHalfFloatTextures: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t},\n\tsupportsStandardDerivatives: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t},\n\tsupportsCompressedTextureS3TC: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t},\n\tsupportsCompressedTexturePVRTC: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t},\n\tsupportsBlendMinMax: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t},\n\tsupportsVertexTextures: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\treturn this.capabilities.vertexTextures;\n\n\t},\n\tsupportsInstancedArrays: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t},\n\tenableScissorTest: function ( boolean ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\tthis.setScissorTest( boolean );\n\n\t},\n\tinitMaterial: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t},\n\taddPrePlugin: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t},\n\taddPostPlugin: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t},\n\tupdateShadowMap: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t}\n\n} );\n\nObject.defineProperties( WebGLRenderer.prototype, {\n\n\tshadowMapEnabled: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.enabled;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\tthis.shadowMap.enabled = value;\n\n\t\t}\n\t},\n\tshadowMapType: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\tthis.shadowMap.type = value;\n\n\t\t}\n\t},\n\tshadowMapCullFace: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.cullFace;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t\t\tthis.shadowMap.cullFace = value;\n\n\t\t}\n\t}\n} );\n\nObject.defineProperties( WebGLShadowMap.prototype, {\n\n\tcullFace: {\n\t\tget: function () {\n\n\t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n\n\t\t},\n\t\tset: function ( cullFace ) {\n\n\t\t\tvar value = ( cullFace !== CullFaceBack );\n\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t\t\tthis.renderReverseSided = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\twrapS: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\treturn this.texture.wrapS;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\tthis.texture.wrapS = value;\n\n\t\t}\n\t},\n\twrapT: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\treturn this.texture.wrapT;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\tthis.texture.wrapT = value;\n\n\t\t}\n\t},\n\tmagFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\treturn this.texture.magFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\tthis.texture.magFilter = value;\n\n\t\t}\n\t},\n\tminFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\treturn this.texture.minFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\tthis.texture.minFilter = value;\n\n\t\t}\n\t},\n\tanisotropy: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\treturn this.texture.anisotropy;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\tthis.texture.anisotropy = value;\n\n\t\t}\n\t},\n\toffset: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\treturn this.texture.offset;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\tthis.texture.offset = value;\n\n\t\t}\n\t},\n\trepeat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\treturn this.texture.repeat;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\tthis.texture.repeat = value;\n\n\t\t}\n\t},\n\tformat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\treturn this.texture.format;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\tthis.texture.format = value;\n\n\t\t}\n\t},\n\ttype: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\treturn this.texture.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\tthis.texture.type = value;\n\n\t\t}\n\t},\n\tgenerateMipmaps: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\treturn this.texture.generateMipmaps;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.assign( WebVRManager.prototype, {\n\n\tgetStandingMatrix: function () {\n\n\t\tconsole.warn( 'THREE.WebVRManager: .getStandingMatrix() has been removed.' );\n\n\t}\n\n} );\n\nObject.defineProperties( WebVRManager.prototype, {\n\n\tstanding: {\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\n\n\t\t}\n\t}\n\n} );\n\n//\n\nAudio.prototype.load = function ( file ) {\n\n\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\tvar scope = this;\n\tvar audioLoader = new AudioLoader();\n\taudioLoader.load( file, function ( buffer ) {\n\n\t\tscope.setBuffer( buffer );\n\n\t} );\n\treturn this;\n\n};\n\nAudioAnalyser.prototype.getData = function () {\n\n\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\treturn this.getFrequencyData();\n\n};\n\n//\n\nCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\treturn this.update( renderer, scene );\n\n};\n\n//\n\nvar GeometryUtils = {\n\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\tvar matrix;\n\n\t\tif ( geometry2.isMesh ) {\n\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\tmatrix = geometry2.matrix;\n\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t}\n\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t},\n\n\tcenter: function ( geometry ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\treturn geometry.center();\n\n\t}\n\n};\n\nvar ImageUtils = {\n\n\tcrossOrigin: undefined,\n\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadCompressedTexture: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t},\n\n\tloadCompressedTextureCube: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t}\n\n};\n\n//\n\nfunction Projector() {\n\n\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function () {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n}\n\n//\n\nfunction CanvasRenderer() {\n\n\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\tthis.clear = function () {};\n\tthis.render = function () {};\n\tthis.setClearColor = function () {};\n\tthis.setSize = function () {};\n\n}\n\nexport { WebGLRenderTargetCube, WebGLRenderTarget, WebGLRenderer, ShaderLib, UniformsLib, UniformsUtils, ShaderChunk, FogExp2, Fog, Scene, LensFlare, Sprite, LOD, SkinnedMesh, Skeleton, Bone, Mesh, LineSegments, LineLoop, Line, Points, Group, VideoTexture, DataTexture, CompressedTexture, CubeTexture, CanvasTexture, DepthTexture, Texture, CompressedTextureLoader, DataTextureLoader, CubeTextureLoader, TextureLoader, ObjectLoader, MaterialLoader, BufferGeometryLoader, DefaultLoadingManager, LoadingManager, JSONLoader, ImageLoader, ImageBitmapLoader, FontLoader, FileLoader, Loader, LoaderUtils, Cache, AudioLoader, SpotLightShadow, SpotLight, PointLight, RectAreaLight, HemisphereLight, DirectionalLightShadow, DirectionalLight, AmbientLight, LightShadow, Light, StereoCamera, PerspectiveCamera, OrthographicCamera, CubeCamera, ArrayCamera, Camera, AudioListener, PositionalAudio, AudioContext, AudioAnalyser, Audio, VectorKeyframeTrack, StringKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack, ColorKeyframeTrack, BooleanKeyframeTrack, PropertyMixer, PropertyBinding, KeyframeTrack, AnimationUtils, AnimationObjectGroup, AnimationMixer, AnimationClip, Uniform, InstancedBufferGeometry, BufferGeometry, Geometry, InterleavedBufferAttribute, InstancedInterleavedBuffer, InterleavedBuffer, InstancedBufferAttribute, Face3, Object3D, Raycaster, Layers, EventDispatcher, Clock, QuaternionLinearInterpolant, LinearInterpolant, DiscreteInterpolant, CubicInterpolant, Interpolant, Triangle, _Math as Math, Spherical, Cylindrical, Plane, Frustum, Sphere, Ray, Matrix4, Matrix3, Box3, Box2, Line3, Euler, Vector4, Vector3, Vector2, Quaternion, Color, ImmediateRenderObject, VertexNormalsHelper, SpotLightHelper, SkeletonHelper, PointLightHelper, RectAreaLightHelper, HemisphereLightHelper, GridHelper, PolarGridHelper, FaceNormalsHelper, DirectionalLightHelper, CameraHelper, BoxHelper, Box3Helper, PlaneHelper, ArrowHelper, AxesHelper, Shape, Path, ShapePath, Font, CurvePath, Curve, ShapeUtils, SceneUtils, WebGLUtils, WireframeGeometry, ParametricGeometry, ParametricBufferGeometry, TetrahedronGeometry, TetrahedronBufferGeometry, OctahedronGeometry, OctahedronBufferGeometry, IcosahedronGeometry, IcosahedronBufferGeometry, DodecahedronGeometry, DodecahedronBufferGeometry, PolyhedronGeometry, PolyhedronBufferGeometry, TubeGeometry, TubeBufferGeometry, TorusKnotGeometry, TorusKnotBufferGeometry, TorusGeometry, TorusBufferGeometry, TextGeometry, TextBufferGeometry, SphereGeometry, SphereBufferGeometry, RingGeometry, RingBufferGeometry, PlaneGeometry, PlaneBufferGeometry, LatheGeometry, LatheBufferGeometry, ShapeGeometry, ShapeBufferGeometry, ExtrudeGeometry, ExtrudeBufferGeometry, EdgesGeometry, ConeGeometry, ConeBufferGeometry, CylinderGeometry, CylinderBufferGeometry, CircleGeometry, CircleBufferGeometry, BoxGeometry, BoxBufferGeometry, ShadowMaterial, SpriteMaterial, RawShaderMaterial, ShaderMaterial, PointsMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshPhongMaterial, MeshToonMaterial, MeshNormalMaterial, MeshLambertMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshBasicMaterial, LineDashedMaterial, LineBasicMaterial, Material, Float64BufferAttribute, Float32BufferAttribute, Uint32BufferAttribute, Int32BufferAttribute, Uint16BufferAttribute, Int16BufferAttribute, Uint8ClampedBufferAttribute, Uint8BufferAttribute, Int8BufferAttribute, BufferAttribute, ArcCurve, CatmullRomCurve3, CubicBezierCurve, CubicBezierCurve3, EllipseCurve, LineCurve, LineCurve3, QuadraticBezierCurve, QuadraticBezierCurve3, SplineCurve, REVISION, MOUSE, CullFaceNone, CullFaceBack, CullFaceFront, CullFaceFrontBack, FrontFaceDirectionCW, FrontFaceDirectionCCW, BasicShadowMap, PCFShadowMap, PCFSoftShadowMap, FrontSide, BackSide, DoubleSide, FlatShading, SmoothShading, NoColors, FaceColors, VertexColors, NoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, ZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstAlphaFactor, OneMinusDstAlphaFactor, DstColorFactor, OneMinusDstColorFactor, SrcAlphaSaturateFactor, NeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth, MultiplyOperation, MixOperation, AddOperation, NoToneMapping, LinearToneMapping, ReinhardToneMapping, Uncharted2ToneMapping, CineonToneMapping, UVMapping, CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping, SphericalReflectionMapping, CubeUVReflectionMapping, CubeUVRefractionMapping, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, NearestFilter, NearestMipMapNearestFilter, NearestMipMapLinearFilter, LinearFilter, LinearMipMapNearestFilter, LinearMipMapLinearFilter, UnsignedByteType, ByteType, ShortType, UnsignedShortType, IntType, UnsignedIntType, FloatType, HalfFloatType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShort565Type, UnsignedInt248Type, AlphaFormat, RGBFormat, RGBAFormat, LuminanceFormat, LuminanceAlphaFormat, RGBEFormat, DepthFormat, DepthStencilFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_ETC1_Format, LoopOnce, LoopRepeat, LoopPingPong, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, ZeroCurvatureEnding, ZeroSlopeEnding, WrapAroundEnding, TrianglesDrawMode, TriangleStripDrawMode, TriangleFanDrawMode, LinearEncoding, sRGBEncoding, GammaEncoding, RGBEEncoding, LogLuvEncoding, RGBM7Encoding, RGBM16Encoding, RGBDEncoding, BasicDepthPacking, RGBADepthPacking, BoxGeometry as CubeGeometry, Face4, LineStrip, LinePieces, MeshFaceMaterial, MultiMaterial, PointCloud, Particle, ParticleSystem, PointCloudMaterial, ParticleBasicMaterial, ParticleSystemMaterial, Vertex, DynamicBufferAttribute, Int8Attribute, Uint8Attribute, Uint8ClampedAttribute, Int16Attribute, Uint16Attribute, Int32Attribute, Uint32Attribute, Float32Attribute, Float64Attribute, ClosedSplineCurve3, SplineCurve3, Spline, AxisHelper, BoundingBoxHelper, EdgesHelper, WireframeHelper, XHRLoader, BinaryTextureLoader, GeometryUtils, ImageUtils, Projector, CanvasRenderer };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/three/build/three.module.js\n// module id = 3\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Rot_1 = require(\"./Rot\");\nconst Point_1 = require(\"./Point\");\nvar DirEnum;\n(function (DirEnum) {\n    DirEnum[DirEnum[\"East\"] = 0] = \"East\";\n    DirEnum[DirEnum[\"NorthEast\"] = 1] = \"NorthEast\";\n    DirEnum[DirEnum[\"North\"] = 2] = \"North\";\n    DirEnum[DirEnum[\"NorthWest\"] = 3] = \"NorthWest\";\n    DirEnum[DirEnum[\"West\"] = 4] = \"West\";\n    DirEnum[DirEnum[\"SouthWest\"] = 5] = \"SouthWest\";\n    DirEnum[DirEnum[\"South\"] = 6] = \"South\";\n    DirEnum[DirEnum[\"SouthEast\"] = 7] = \"SouthEast\";\n})(DirEnum || (DirEnum = {}));\n/**\n * Dirの正面方向，つまり角度としての0度の方向は東側とする．\n * そのため，negで逆をとったら南北が反転するものとする．\n */\nclass Dir {\n    constructor(dir) {\n        this.dir = dir;\n        this.dir = dir % 8;\n    }\n    opposite() {\n        return new Dir((this.dir + 4) % 8);\n    }\n    add(by) {\n        return new Dir((this.dir + by.dir) % 8);\n    }\n    sub(by) {\n        return this.add(by.neg());\n    }\n    neg() {\n        return new Dir((8 - this.dir) % 8);\n    }\n    apply(target) {\n        if (target instanceof Dir) {\n            return this.add(target);\n        }\n        else if (target instanceof Point_1.Point) {\n            return this.rotatePoint(target);\n        }\n        else {\n            return this.rotateRot(target);\n        }\n    }\n    hasEffect() {\n        return this.dir !== DirEnum.East;\n    }\n    equal(other) {\n        return this.dir === other.dir;\n    }\n    flipVert() {\n        return this.neg();\n    }\n    toRot() {\n        return Dir.rotTable[this.dir % 8];\n    }\n    rotateRot(r) {\n        return this.toRot().mul(r);\n    }\n    rotatePoint(p) {\n        return new Point_1.Point(this.rotateRot(p.single), this.rotateRot(p.double), p.up);\n    }\n    valueOf() {\n        return this.dir.toString();\n    }\n}\nDir.East = new Dir(DirEnum.East);\nDir.NorthEast = new Dir(DirEnum.NorthEast);\nDir.North = new Dir(DirEnum.North);\nDir.NorthWest = new Dir(DirEnum.NorthWest);\nDir.West = new Dir(DirEnum.West);\nDir.SouthWest = new Dir(DirEnum.SouthWest);\nDir.South = new Dir(DirEnum.South);\nDir.SouthEast = new Dir(DirEnum.SouthEast);\nDir.rotTable = [\n    new Rot_1.Rot(1, 0, 0, 0),\n    new Rot_1.Rot(0, 1, 0, 0),\n    new Rot_1.Rot(0, 0, 1, 0),\n    new Rot_1.Rot(0, 0, 0, 1),\n    new Rot_1.Rot(-1, 0, 0, 0),\n    new Rot_1.Rot(0, -1, 0, 0),\n    new Rot_1.Rot(0, 0, -1, 0),\n    new Rot_1.Rot(0, 0, 0, -1)\n];\nexports.Dir = Dir;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../librail/build/Dir.js\n// module id = 4\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst End_1 = require(\"./End\");\nvar PoleEnum;\n(function (PoleEnum) {\n    PoleEnum[PoleEnum[\"Plus\"] = 0] = \"Plus\";\n    PoleEnum[PoleEnum[\"Minus\"] = 1] = \"Minus\";\n})(PoleEnum || (PoleEnum = {}));\n/**\n * Pole\n */\nclass Pole {\n    constructor(pole) {\n        this.pole = pole;\n        this.pole = pole % 2;\n    }\n    apply(target) {\n        if (target instanceof Pole) {\n            return this.applyPole(target);\n        }\n        else {\n            return this.applyEnd(target);\n        }\n    }\n    applyPole(target) {\n        return new Pole((this.pole + target.pole) % 2);\n    }\n    applyEnd(target) {\n        if (this.isMinus()) {\n            return new End_1.End(target.point, target.dir, this.applyPole(target.pole));\n        }\n        else {\n            return target;\n        }\n    }\n    equal(other) {\n        return this.pole === other.pole;\n    }\n    isPlus() {\n        return this.pole === PoleEnum.Plus;\n    }\n    isMinus() {\n        return this.pole === PoleEnum.Minus;\n    }\n    hasEffect() {\n        return this.isMinus();\n    }\n    opposite() {\n        return new Pole((1 - this.pole) % 2);\n    }\n    valueOf() {\n        return this.pole.toString();\n    }\n}\nPole.Plus = new Pole(PoleEnum.Plus);\nPole.Minus = new Pole(PoleEnum.Minus);\nexports.Pole = Pole;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../librail/build/Pole.js\n// module id = 5\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Dir\"));\n__export(require(\"./End\"));\n__export(require(\"./Point\"));\n__export(require(\"./Pole\"));\n__export(require(\"./Rot\"));\n__export(require(\"./Flip\"));\n__export(require(\"./Rail\"));\n__export(require(\"./Pier\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../librail/build/index.js\n// module id = 6\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Dir_1 = require(\"./Dir\");\nconst Rot_1 = require(\"./Rot\");\nconst Point_1 = require(\"./Point\");\nconst End_1 = require(\"./End\");\nvar FlipEnum;\n(function (FlipEnum) {\n    FlipEnum[FlipEnum[\"No\"] = 0] = \"No\";\n    FlipEnum[FlipEnum[\"Yes\"] = 1] = \"Yes\";\n})(FlipEnum || (FlipEnum = {}));\n/**\n * Flip, 180度の回転を表す．回転軸は東西の線\n */\nclass Flip {\n    constructor(flip) {\n        this.flip = flip;\n        this.flip = flip % 2;\n    }\n    apply(target) {\n        if (target instanceof Flip) {\n            return new Flip((this.flip + target.flip) % 2);\n        }\n        else if (target instanceof Dir_1.Dir) {\n            return this.flipDir(target);\n        }\n        else if (target instanceof Rot_1.Rot) {\n            return this.flipRot(target);\n        }\n        else if (target instanceof Point_1.Point) {\n            return this.flipPoint(target);\n        }\n        else {\n            return this.flipEnd(target);\n        }\n    }\n    flipDir(target) {\n        return this.isYes() ? target.neg() : target;\n    }\n    flipRot(target) {\n        return this.isYes() ? Rot_1.Rot.of(target.a, -target.d, -target.c, -target.b) : target;\n    }\n    flipPoint(target) {\n        if (this.isYes()) {\n            return Point_1.Point.of(this.flipRot(target.single), this.flipRot(target.double), -target.up);\n        }\n        else {\n            return target;\n        }\n    }\n    flipEnd(target) {\n        if (this.isYes()) {\n            return End_1.End.of(this.flipPoint(target.point), this.flipDir(target.dir), target.pole);\n        }\n        else {\n            return target;\n        }\n    }\n    hasEffect() {\n        return this.flip === FlipEnum.Yes;\n    }\n    equal(other) {\n        return this.flip === other.flip;\n    }\n    isYes() {\n        return this.flip === FlipEnum.Yes;\n    }\n    opposite() {\n        return new Flip((1 - this.flip) % 2);\n    }\n    valueOf() {\n        return this.flip.toString();\n    }\n}\nFlip.No = new Flip(FlipEnum.No);\nFlip.Yes = new Flip(FlipEnum.Yes);\nexports.Flip = Flip;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../librail/build/Flip.js\n// module id = 7\n// module chunks = 0","import * as THREE from 'three';\n\nconst rawModel = require('../../build/models.json');\n\nexport class ModelManager {\n    private geometries: THREE.Geometry[] = [];\n    private static instance_;\n\n    private constructor() {\n        var loader = new THREE.JSONLoader();\n\n        for (let name in rawModel) {\n            const geometry = loader.parse(rawModel[name]).geometry;\n            this.geometries[name] = geometry;\n        }\n    }\n\n    public static instance(): ModelManager {\n        if (this.instance_) {\n            return this.instance_\n        }\n        this.instance_ = new ModelManager();\n        return this.instance_;\n    }\n\n    public static create(name: string, color = 0x5588FF): THREE.Mesh {\n        const geom = this.instance().geometries[name];\n\n        if (!geom) {\n            console.error(\"geometry \", name, \" not found\");\n        }\n\n        const mat = new THREE.MeshLambertMaterial( { color: color });\n\n        return new THREE.Mesh(geom, mat);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/model/ModelManager.ts","import { Main } from \"./Main\";\n\nwindow.addEventListener(\"load\", function() {\n    const main = new Main();\n    main.setup();\n}, false);\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import { RailView } from \"./RailView\";\n\nexport class Main {\n    private view;\n\n    constructor() {\n        this.view = new RailView();\n    }\n    setup() {\n        this.view.render();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Main.ts","import * as THREE from 'three'\nimport 'three-examples/controls/OrbitControls';\n\ninterface OutlineEffectParameters {\n    defaultThickness?: number,\n    defaultColor?: THREE.Color,\n    defaultAlpha?: number,\n    defaultKeepAlive?: boolean\n}\n\nimport { End, Pole, Point, Dir, Rot, Rail, Straight, Curve, Flip, Slope, Turnout } from 'librail';\nimport { Layout, LayoutObserver } from './rail/Layout';\nimport { ModelManager } from './model/ModelManager';\nimport { Model, StraightModel, CurveModel, SlopeModel, TurnoutModel } from './model/Model';\nimport { FrontierManager, FrontierManagerObserver } from './rail/FrontierManager';\n\n\nexport class RailView implements LayoutObserver, FrontierManagerObserver  {\n    readonly WIDTH = 1600;\n    readonly HEIGHT= 900;\n\n    private renderer: THREE.WebGLRenderer;\n    private scene:    THREE.Scene;\n    private camera:   THREE.Camera;\n    private controls: THREE.OrbitControls;\n    \n    private layout: Layout;\n    private frontierManager: FrontierManager;\n\n    private frontier: THREE.Mesh;\n\n    constructor() {\n        this.initRenderer();\n        this.initCamera();\n        this.initScene();\n        this.initHandler();\n        this.initLayout();\n        this.initFrontier();\n    }\n    \n    private initRenderer() {\n        this.renderer = new THREE.WebGLRenderer({antialias: true});\n        this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n        this.renderer.setSize(this.WIDTH, this.HEIGHT);\n        document.body.appendChild(this.renderer.domElement);\n        this.renderer.domElement.setAttribute('tabindex', '0');\n        this.renderer.domElement.focus();\n    }\n    \n    private initCamera() {\n        const radius = 1000;\n        const ratio = this.WIDTH / this.HEIGHT;\n        const w = radius * ratio;\n        const h = radius;\n        \n        this.camera = new THREE.OrthographicCamera(-w, w, h, -h, 0, 100000);\n        this.camera.position.set(0, 5000, 1000);\n\n        this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n        this.controls.enableKeys = false;\n        this.controls.maxPolarAngle = Math.PI * 87 / 180;\n\n        this.controls.update();\n        // need to set `controls.target` correctly \n        // when adding rails in order to maintain appropriate viewpoint.\n    }\n    \n    private load(path: string, color: number): THREE.Mesh {\n        var rail = ModelManager.create(path, color);\n\n        this.scene.add(rail);\n        return rail;\n    }\n\n    private initFloor() {\n        let loader = new THREE.TextureLoader();\n\n        loader.load('./assets/grass.png', texture => {\n            var geometry = new THREE.PlaneBufferGeometry(10000, 10000);\n            texture.wrapS = THREE.RepeatWrapping;\n            texture.wrapT = THREE.RepeatWrapping;\n            texture.repeat.set(10, 10);\n            var material = new THREE.MeshBasicMaterial( {map: texture } );\n            var plane = new THREE.Mesh( geometry, material );\n            plane.rotateX(-Math.PI / 2);\n            plane.position.setY(-4);\n            this.scene.add( plane );\n        });\n    }\n\n    private initFrontier() {\n        var geometry = new THREE.CylinderBufferGeometry(0, 15, 40, 6, 1);\n        var material = new THREE.MeshLambertMaterial( { color: 0xFFFFFF });\n        this.frontier = new THREE.Mesh(geometry, material);\n        this.updateFrontier(this.frontierManager.selection);\n\n        this.scene.add(this.frontier);\n    }\n\n    private initScene() {\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0x88DDFF);\n            \n        const light = new THREE.DirectionalLight(0xFFFFFF);\n        light.position.set(200, 400, -100);\n        \n        this.scene.add(light);\n        this.scene.add(new THREE.AmbientLight(0xAAAAAA));\n\n        this.initFloor();\n\n        if (0) {\n            const axisHelper = new THREE.AxisHelper(50);\n            this.scene.add(axisHelper);\n        }\n    }\n    \n    private initHandler() {\n        window.document.addEventListener('keydown', this.onKeyDown.bind(this), false);\n    }\n\n    public updateFrontier(f: End) {\n        let vec3 = Model.pointToVec3(f.point);\n        vec3.y += 20;\n        let euler = new THREE.Euler(0, f.dir.dir * Math.PI / 4, Math.PI / 2);\n\n        this.frontier.position.copy(vec3);\n        this.frontier.setRotationFromEuler(euler);\n\n        this.controls.target = vec3;\n        this.controls.update();\n    }\n\n    public selectionChanged(fm: FrontierManager, f: End) {\n        if (f) {\n            console.log(f.toString());\n            this.updateFrontier(f);\n        }\n    }\n\n    private initLayout() {\n        this.layout = new Layout();\n        this.layout.observer = this;\n\n        this.frontierManager = new FrontierManager();\n        this.frontierManager.observer = this;\n\n        if (0) {\n            // load initial layout\n            const blue = 0x3399FF;\n            const gray = 0x666666;\n            const yellow = 0xaaaa33;\n\n            const p = Math.SQRT1_2;\n            const q = 1 - p;\n            const l = 216;\n\n//            this.load('curve_8', blue);\n//            var c = this.load('slope', blue);\n//            c.rotateX(Math.PI);\n//            c.position.setY(66);\n\n            var c = this.load('pier', yellow);\n            var d = this.load('pier', yellow);\n\n            c.position.set(3*l*p, 0, -3*l*q);\n            d.position.set(2*l, 0, -l);\n            c.rotateY(Math.PI / 4);\n        }\n    }\n\n    private onKeyDown(event: KeyboardEvent) {\n        let handle = this.frontierManager.selection.opposite();\n        var r: Rail;\n\n        if (event.code === \"ArrowUp\") {\n            r = new Rail(\n                Straight, 0, \n                handle,\n                Flip.No);\n        } else if (event.code === \"ArrowLeft\") {\n            r = new Rail(\n                Curve, 0, \n                handle,\n                Flip.No);\n        } else if (event.code === \"ArrowRight\") {\n            r = new Rail(\n                Curve, 0, \n                handle,\n                Flip.Yes);\n        } else if (event.code === \"KeyW\") {\n            r = new Rail(\n                Slope, 0, \n                handle,\n                Flip.No);\n        } else if (event.code === \"KeyS\") {\n            r = new Rail(\n                Slope, 0, \n                handle,\n                Flip.Yes);\n        } else if (event.code === \"KeyL\") {\n            r = new Rail(\n                Turnout, 0, \n                handle,\n                Flip.No);\n         } else if (event.code === \"KeyR\") {\n            r = new Rail(\n                Turnout, 0, \n                handle,\n                Flip.Yes);\n        } else if (event.code === \"Tab\") {\n            event.stopPropagation();\n            event.preventDefault();\n            this.frontierManager.selectNext();\n            return;\n        } else {\n            return;\n        }\n\n        this.layout.add(r);\n\n        for (let e of r.ends()) {\n            this.frontierManager.addEnd(e);\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    public render() {\n        window.requestAnimationFrame(this.render.bind(this));\n\n        this.renderer.render(this.scene, this.camera);\n    }\n\n    // a rail is added to the layout\n    // so we need to add a rail model to the scene\n    // this is ugly glue code\n    public railAdded(layout: Layout, rail: Rail) {\n        if (rail.factory === Straight) {\n            const m = new StraightModel(rail);\n            m.addToScene(this.scene);   \n        } else if (rail.factory === Curve) { // STUB!!!\n            const m = new CurveModel(rail);\n            m.addToScene(this.scene);   \n        } else if (rail.factory === Slope) {\n            const m = new SlopeModel(rail);\n            m.addToScene(this.scene);\n        } else if (rail.factory === Turnout) {\n            const m = new TurnoutModel(rail);\n            m.addToScene(this.scene);\n        }\n    }\n\n    public railRemoved(layout: Layout, rail: Rail) {\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/RailView.ts","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finger swipe\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tthis.object = object;\n\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.25;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\t\t\tscope.target.add( panOffset );\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = { NONE: - 1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY: 4, TOUCH_PAN: 5 };\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\t//console.log( 'handleMouseDownPan' );\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\t//console.log( 'handleMouseMovePan' );\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( event ) {\n\n\t\t// console.log( 'handleMouseUp' );\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\t// console.log( 'handleMouseWheel' );\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\t//console.log( 'handleKeyDown' );\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\t//console.log( 'handleTouchStartDolly' );\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\t//console.log( 'handleTouchStartPan' );\n\n\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\t//console.log( 'handleTouchMoveDolly' );\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\t//console.log( 'handleTouchMovePan' );\n\n\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchEnd( event ) {\n\n\t\t//console.log( 'handleTouchEnd' );\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase scope.mouseButtons.ORBIT:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\tbreak;\n\n\t\t\tcase scope.mouseButtons.ZOOM:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase scope.mouseButtons.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleTouchStartDolly( event );\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\n\t\t\t\thandleTouchMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\nObject.defineProperties( THREE.OrbitControls.prototype, {\n\n\tcenter: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\treturn this.target;\n\n\t\t}\n\n\t},\n\n\t// backward compatibility\n\n\tnoZoom: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\treturn ! this.enableZoom;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\tthis.enableZoom = ! value;\n\n\t\t}\n\n\t},\n\n\tnoRotate: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\treturn ! this.enableRotate;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\tthis.enableRotate = ! value;\n\n\t\t}\n\n\t},\n\n\tnoPan: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\treturn ! this.enablePan;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\tthis.enablePan = ! value;\n\n\t\t}\n\n\t},\n\n\tnoKeys: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\treturn ! this.enableKeys;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\tthis.enableKeys = ! value;\n\n\t\t}\n\n\t},\n\n\tstaticMoving: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\treturn ! this.enableDamping;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\tthis.enableDamping = ! value;\n\n\t\t}\n\n\t},\n\n\tdynamicDampingFactor: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\treturn this.dampingFactor;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\tthis.dampingFactor = value;\n\n\t\t}\n\n\t}\n\n} );\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/three/examples/js/controls/OrbitControls.js\n// module id = 12\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Rot_1 = require(\"./Rot\");\nconst Point_1 = require(\"./Point\");\nconst End_1 = require(\"./End\");\nconst Dir_1 = require(\"./Dir\");\nconst Flip_1 = require(\"./Flip\");\nconst Transform_1 = require(\"./Transform\");\n// # レールの種類ごとに共通した特徴\n// * 端点の(位置)と(凹凸)と(方向)\n// * 状態数\n// * 状態に対応してオンになるモデルの名前\n// * 端点から端点に移動した時の状態遷移関数\n// * 端点から端点に移動する時のベクトル関数、導関数\n// * \n/* 問題：\n* レールの種類ごとに一意性を判定する部分が微妙に異なる\n* 端点に名前をつけるべきか？\n\n*/\n// レールはどんどん継承して作っていくことにした\n/* レールのローカルから見た端点の方向は，内側に向かう方向とする．\n * 例えば，原点から東においた直線レールの場合，\n * 原点の方の端の方向は東で，a = 1の部分の方向は西となる．\n * こうすることで，原点でのローカルとグローバルのギャップがなくなり，座標変換が素直に対応する．\n *\n\n */\nvar Meaning;\n(function (Meaning) {\n    Meaning[Meaning[\"Impossible\"] = 0] = \"Impossible\";\n    Meaning[Meaning[\"DontCare\"] = 1] = \"DontCare\";\n    Meaning[Meaning[\"Meaningful\"] = 2] = \"Meaningful\";\n})(Meaning = exports.Meaning || (exports.Meaning = {}));\nclass RailFactory {\n    // this string can be a key or object property\n    // [0] should be origin\n    // canFlip is Impossible => Flip.No only\n    //            DontCare => flip will be Flip.No, but one can specify Flip.Yes\n    //            Meaningful => set to given parameter\n    // hasPole is Impossible => origin's pole must be Pole.Plus\n    //            DontCare => will be normalized to Pole.Plus, by flipping and\n    //                        setting the origin to other end,\n    //                        therefore localEnds should have exact 2 elems\n    //            Meaningful => meaningful\n    /**\n     *\n     * @param name unique identifier among the rails\n     * @param localEnds [0] should be the origin\n     * @param canFlip Impossible => Flip.No only\n     *                DontCare => flip will be Flip.No, but one can specify Flip.Yes\n     *                Meaningful => set to given parameter\n     * @param hasPole Impossible => origin's pole must be Pole.Plus\n     *                DontCare => will be normalized to Pole.Plus, by flipping and\n     *                            setting the origin to other end,\n     *                            therefore localEnds should have exact 2 elems\n     *                Meaningful => meaningful\n     * @param localPierPoints an point to set a pier, pole will be ignored\n     */\n    constructor(name, localEnds, canFlip, hasPole, localPierEnds = localEnds) {\n        this.name = name;\n        this.localEnds = localEnds;\n        this.canFlip = canFlip;\n        this.hasPole = hasPole;\n        this.localPierEnds = localPierEnds;\n    }\n    /**\n     * このメソッドでは，端点termを指定された場合は，原点の座標に戻してインスタンスを作る．\n     * @param term a valid index of localEnds.\n     * @param origin origin\n     * @param flip isFlipped\n     */\n    create(term, termEnd, flip) {\n        var o = this.convert(term, 0, termEnd, flip);\n        var f = flip;\n        // 重複が発生するため処理する．\n        if (o.pole.isMinus()) {\n            if (this.hasPole === Meaning.Meaningful) {\n                // 正規化の余地なし\n            }\n            else if (this.hasPole === Meaning.DontCare) {\n                // もう片方の端点を原点として作り直す\n                o = this.convert(0, 1, o, f);\n                f = f.opposite();\n            }\n            else {\n                throw \"this kind of rail can't have minus-pole origin\";\n            }\n        }\n        // normalize flip\n        if (f.isYes()) {\n            if (this.canFlip === Meaning.Meaningful) {\n                // proceed\n            }\n            else if (this.canFlip === Meaning.DontCare) {\n                f = Flip_1.Flip.No;\n            }\n            else {\n                throw \"this kind of rail can't be flipped\";\n            }\n        }\n        return { origin: o, flip: f };\n    }\n    convert(from, to, end, flip) {\n        let oEnd = flip.apply(this.localEnds[from]);\n        let tEnd = flip.apply(this.localEnds[to]);\n        let fromto = new Transform_1.FromTo(tEnd, oEnd);\n        let origin = fromto.apply(end);\n        return origin;\n    }\n    canCreate(term, origin_, flip) {\n        let origin = this.convert(term, 0, origin_, flip);\n        if (term < 0 || this.localEnds.length <= term) {\n            return false;\n        }\n        else if (this.canFlip === Meaning.Impossible && flip.hasEffect()) {\n            return false;\n        }\n        else if (this.hasPole === Meaning.Impossible && origin.pole.hasEffect()) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n}\nexports.RailFactory = RailFactory;\nclass Rail {\n    constructor(factory, term, origin, flip) {\n        this.factory = factory;\n        this.instance = factory.create(term, origin, flip);\n    }\n    localToGlobal(local) {\n        return this.instance.origin.apply(this.instance.flip.apply(local));\n    }\n    ends() {\n        return this.factory.localEnds.map(e => this.localToGlobal(e));\n    }\n    pierPoints() {\n        return this.factory.localPierEnds.map(e => this.localToGlobal(e));\n    }\n}\nexports.Rail = Rail;\nlet origin = End_1.End.plus(Point_1.Point.zero(), Dir_1.Dir.East);\nlet straight1 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(1)), Dir_1.Dir.West);\nlet straight2 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(2)), Dir_1.Dir.West);\nlet straight4 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(4)), Dir_1.Dir.West);\nlet straight6 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(6)), Dir_1.Dir.West);\nlet straight8 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(8)), Dir_1.Dir.West);\nlet straight4_slope = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(4), Rot_1.Rot.zero(), 1), Dir_1.Dir.West);\nlet straight8_slope = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(8), Rot_1.Rot.zero(), 4), Dir_1.Dir.West);\nlet curve4_8 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(0, 0, 4, -4)), Dir_1.Dir.SouthWest);\nlet curve6_8 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(2, 0, 4, -4)), Dir_1.Dir.SouthWest);\nlet curve4_4 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(4, 4, 0, 0)), Dir_1.Dir.South);\nexports.Straight = new RailFactory(\"straight_1\", [origin, straight4], Meaning.DontCare, Meaning.DontCare);\nexports.Curve = new RailFactory(\"curve_8\", [origin, curve4_8], Meaning.Meaningful, Meaning.DontCare);\nexports.Slope = new RailFactory(\"slope\", [origin, straight8_slope], Meaning.Meaningful, Meaning.DontCare);\nexports.Turnout = new RailFactory(\"turnout\", [origin, straight4, curve4_8], Meaning.Meaningful, Meaning.Meaningful);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../librail/build/Rail.js\n// module id = 13\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst End_1 = require(\"./End\");\n/**\n * ローカル座標を2つ指定することで，片方のローカル座標と重なるグローバル座標を，もう片方のローカル座標と重なるグローバル座標に変換する．\n */\nclass FromTo {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n    /**\n     *\n     * @param global グローバル座標\n     */\n    apply(global) {\n        // まず，ローカル座標の原点に対応するグローバル座標を作る．\n        let d0 = global.dir.sub(this.from.dir);\n        let p0 = global.point.sub(d0.apply(this.from.point));\n        // 次に，行き先を構成する．\n        let p = p0.add(d0.apply(this.to.point));\n        let d = d0.add(this.to.dir);\n        let pole = this.to.pole.apply(this.from.pole.apply(global.pole));\n        return End_1.End.of(p, d, pole);\n    }\n    hasEffect() {\n        return !(this.from.equal(this.to));\n    }\n}\nexports.FromTo = FromTo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../librail/build/Transform.js\n// module id = 14\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Point_1 = require(\"./Point\");\nconst Pole_1 = require(\"./Pole\");\nconst End_1 = require(\"./End\");\nconst Dir_1 = require(\"./Dir\");\nclass Pier {\n    constructor(at) {\n        this.name = \"pier\";\n        this.height = 4;\n        this.origin = this.normalizeEnd(at);\n    }\n    normalizeEnd(e) {\n        return new End_1.End(e.point, this.normalizeDir(e.dir), Pole_1.Pole.Plus);\n    }\n    normalizeDir(d) {\n        return new Dir_1.Dir(d.dir % 4);\n    }\n}\nexports.Pier = Pier;\nclass MiniPier extends Pier {\n    constructor() {\n        super(...arguments);\n        this.name = \"mini pier\";\n        this.height = 1;\n    }\n}\nexports.MiniPier = MiniPier;\nclass CustomPier extends Pier {\n    constructor(at, floors) {\n        super(at);\n        this.floors = floors;\n        this.name = \"CustomPier\";\n    }\n    endWithReplacingUp(end, up) {\n        let p = new Point_1.Point(this.origin.point.single, this.origin.point.double, up);\n        return new End_1.End(p, this.origin.dir, this.origin.pole);\n    }\n    equivalentPiers() {\n        var piers = [];\n        var current = 0;\n        this.floors.sort().forEach(n => {\n            // n階層になるまで建て続ける\n            for (; current + 4 <= n; current += 4) {\n                let e = this.endWithReplacingUp(this.origin, current);\n                piers.push(new Pier(e));\n            }\n            for (; current + 1 <= n; current += 1) {\n                let e = this.endWithReplacingUp(this.origin, current);\n                piers.push(new MiniPier(e));\n            }\n            // n階になった．\n        });\n        return piers;\n    }\n}\nexports.CustomPier = CustomPier;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../librail/build/Pier.js\n// module id = 15\n// module chunks = 0","import { Dir, End, Point, Pole, Rot, Rail, Pier, MiniPier } from 'librail';\n\n\nexport interface LayoutObserver {\n    railAdded(layout: Layout, rail: Rail);\n    railRemoved(layout: Layout, rail: Rail);\n\n    pierAdded?(layout: Layout, pier: Pier);\n    pierRemoved?(layout: Layout, pier: Pier);\n}\n\n\nexport class Layout {\n    private observer_: LayoutObserver = null;\n    private rails_: Set<Rail> = new Set<Rail>();\n\n    get observer(): LayoutObserver {\n        return this.observer_;\n    }\n\n    set observer(ob: LayoutObserver) {\n        this.observer_ = ob;\n    }\n\n    get rails(): Set<Rail> {\n        return this.rails_;\n    }\n\n\n    private addPierForEndIfNeed(end: End) {\n\n    }\n\n    private notifyAddRail(rail: Rail) {\n//        this.openEnds_.forEach((e, i) => console.log(\"%d, %s\", i, this.openEnds_[i].toString()), this)\n        this.observer.railAdded(this, rail);\n    }\n\n    public add(rail: Rail) {\n        this.rails.add(rail);\n        this.notifyAddRail(rail);\n    }\n\n    private notifyRemoveRail(rail: Rail) {\n        this.observer.railRemoved(this, rail);\n    }\n\n    public remove(rail: Rail) {\n        this.notifyRemoveRail(rail);\n        this.rails.delete(rail);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/rail/Layout.ts","module.exports = {\"slope\":{\"normals\":[0,0,-1,0,1,-4.47035e-8,0,0,1,0,1,0,0,0,-1,0,-1,0,0,0,1,0,-1,4.47035e-8,-1.32455e-8,-1,7.94726e-8,0,-1,0,0,-1,1.58946e-7,4.03208e-8,-1,4.47035e-8,1.77152e-8,-1,5.01934e-8,-0.0107379,0.999942,-4.4781e-8,-0.0107307,0.999942,0,0.0107498,-0.999942,0,0.0107427,-0.999942,4.46211e-8,0.0107498,-0.999942,5.00647e-8,0.0107427,-0.999942,4.46211e-8,0.0107498,-0.999942,0,-0.0107307,0.999942,0,-0.0107379,0.999942,-4.42281e-8,-0.0107307,0.999942,-5.03181e-8,-0.0376097,0.999293,-4.64187e-8,-0.0376099,0.999292,0,0.0376093,-0.999292,0,0.0376095,-0.999292,4.40328e-8,0.0376093,-0.999293,4.97621e-8,-0.0376099,0.999293,-4.96237e-8,-0.0641487,0.99794,-3.5317e-8,-0.0641492,0.99794,0,0.0641481,-0.99794,0,0.0641484,-0.99794,4.39754e-8,0.0641481,-0.99794,5.15455e-8,-0.0641487,0.99794,-3.5317e-8,-0.0641491,0.99794,-4.86118e-8,-0.0898462,0.995956,-2.64331e-8,-0.0898467,0.995956,0,0.0898453,-0.995956,4.65574e-8,0.0898458,-0.995956,4.38912e-8,0.0898453,-0.995956,4.4107e-8,0.0898458,-0.995956,4.38912e-8,0.0898453,-0.995956,0,-0.0898467,0.995956,-4.85005e-8,-0.114382,0.993437,-4.39395e-8,-0.114383,0.993437,0,0.114381,-0.993437,4.64576e-8,0.114382,-0.993437,3.50276e-8,0.114381,-0.993437,3.6677e-8,0.114381,-0.993437,4.64576e-8,-0.114382,0.993437,-4.39395e-8,-0.114383,0.993437,-2.60394e-8,-0.137467,0.990506,-6.13266e-8,-0.137467,0.990506,0,0.137466,-0.990507,4.63421e-8,0.137466,-0.990506,4.36604e-8,0.137466,-0.990507,5.12203e-8,0.137466,-0.990506,4.36604e-8,0.137466,-0.990507,4.63421e-8,-9.31276e-9,-1.62491e-7,-1,-0.158845,0.987304,-8.73143e-8,-0.158845,0.987303,0,0.158843,-0.987304,0,0.158844,-0.987304,5.22301e-8,0.158843,-0.987304,5.1082e-8,0.158843,-0.987304,0,-0.158845,0.987304,-9.60457e-8,9.31276e-9,1.62491e-7,1,-0.158845,0.987304,0,-5.97563e-9,-1.62618e-7,-1,-0.178298,0.983977,-1.2181e-7,-0.178299,0.983976,0,0.178297,-0.983977,0,0.178297,-0.983977,8.67698e-8,0.178297,-0.983977,5.09402e-8,0.178297,-0.983977,1.04124e-7,-0.178298,0.983976,-1.2181e-7,5.97563e-9,1.62618e-7,1,-0.178299,0.983976,0,-0.195645,0.980675,-1.04041e-7,-0.195646,0.980675,0,0.195644,-0.980675,0,0.195645,-0.980675,1.2109e-7,-2.7708e-9,-1.6263e-7,-1,0.195644,-0.980675,2.17723e-8,2.7708e-9,1.6263e-7,1,0.195645,-0.980675,1.2109e-7,-0.195646,0.980675,0,-0.195645,0.980675,-1.04041e-7,-0.195646,0.980675,0,-0.210739,0.977542,-5.18456e-8,-0.21074,0.977542,0,0.210738,-0.977543,0,0.210739,-0.977542,1.20724e-7,-1.70398e-10,-1.62631e-7,-1,0.210738,-0.977543,0,1.70398e-10,1.62631e-7,1,0.210739,-0.977542,1.20724e-7,-0.210739,0.977542,-5.18456e-8,-0.21074,0.977542,0,0,0,-1,-0.223467,0.974712,0,-3.77789e-9,3.25264e-7,1,-0.223467,0.974711,0,-4.04784e-8,-1.3157e-7,-1,0.223465,-0.974712,0,0,0,1,0.223466,-0.974712,6.87974e-8,0,0,-1,0.223465,-0.974712,0,0.223466,-0.974712,5.15981e-8,4.04784e-8,1.3157e-7,1,3.77789e-9,-3.25264e-7,-1,-0.223467,0.974712,0,0,0,1,-0.223467,0.974711,0,-0.233739,0.9723,0,-7.40608e-9,3.25156e-7,1,-0.233739,0.972299,0,5.57282e-8,-2.31817e-7,-1,0.233738,-0.9723,0,0.233739,-0.972299,0,0.233738,-0.9723,0,0.233738,-0.9723,0,-5.57282e-8,2.31817e-7,1,7.40608e-9,-3.25156e-7,-1,-0.233739,0.972299,0,-0.241493,0.970403,0,-0.241493,0.970403,0,-3.77381e-8,-1.32222e-7,-1,0.241492,-0.970403,0,1.32893e-7,3.30404e-8,1,0.241492,-0.970403,0,0.241492,-0.970403,0,-1.32893e-7,-3.30404e-8,-1,3.77381e-8,1.32222e-7,1,-0.241493,0.970403,0,-0.241493,0.970403,0,6.01189e-9,-1.62477e-7,-1,-0.246685,0.969096,0,-0.246685,0.969096,0,0.246684,-0.969096,0,0.246685,-0.969096,0,0.246684,-0.969096,0,0.246685,-0.969096,0,-0.246685,0.969096,0,-6.01189e-9,1.62477e-7,1,-0.246685,0.969096,0,6.48699e-9,-1.6245e-7,-1,-0.249287,0.96843,0,-0.249287,0.96843,0,0.249287,-0.96843,0,0.249287,-0.96843,0,0.249287,-0.96843,0,-0.249287,0.96843,0,-6.48699e-9,1.6245e-7,1,-0.249287,0.96843,0,-0.249287,0.96843,0,-0.249287,0.96843,0,0.249287,-0.96843,0,0.249287,-0.96843,0,6.48695e-9,-1.6245e-7,-1,0.249287,-0.96843,0,-6.48695e-9,1.6245e-7,1,0.249287,-0.96843,0,-0.249287,0.96843,0,-0.246685,0.969096,0,-0.246684,0.969096,0,0.246685,-0.969096,0,0.246685,-0.969096,0,6.01189e-9,-1.62477e-7,-1,0.246685,-0.969096,0,-6.01189e-9,1.62477e-7,1,-0.246684,0.969096,0,-0.241492,0.970403,0,-0.241492,0.970403,0,0.241493,-0.970403,0,0.241493,-0.970403,0,0.241493,-0.970403,0,-0.241492,0.970403,0,-0.233738,0.9723,0,-0.233738,0.9723,0,0.233739,-0.972299,0,0.233739,-0.972299,0,0.233739,-0.972299,0,-0.233738,0.9723,0,-0.223466,0.974712,0,-0.223465,0.974712,0,0.223467,-0.974712,0,0.223466,-0.974712,0,0.223467,-0.974712,0,-0.223465,0.974712,0,-1.70442e-10,-1.62631e-7,-1,-0.210739,0.977542,0,-0.210738,0.977543,0,0.21074,-0.977542,0,0.210739,-0.977542,0,0.21074,-0.977542,0,1.70442e-10,1.62631e-7,1,-0.210738,0.977543,0,-2.7708e-9,-1.6263e-7,-1,-0.195644,0.980675,0,-0.195644,0.980675,0,0.195646,-0.980675,0,0.195645,-0.980675,0,0.195646,-0.980675,0,-0.195644,0.980675,0,2.7708e-9,1.6263e-7,1,-0.178298,0.983976,0,-0.178297,0.983977,0,0.178299,-0.983976,0,0.178298,-0.983976,0,-5.97557e-9,-1.62618e-7,-1,5.97557e-9,1.62618e-7,1,0.178298,-0.983976,0,-0.178298,0.983976,0,-0.178297,0.983977,0,-0.158844,0.987304,0,-0.158843,0.987304,0,0.158845,-0.987304,0,0.158844,-0.987304,0,-9.31281e-9,-1.62491e-7,-1,9.31281e-9,1.62491e-7,1,0.158844,-0.987304,0,-0.158844,0.987304,0,-0.158843,0.987304,0,-0.137466,0.990506,0,2.53223e-8,3.24463e-7,1,-0.137466,0.990506,0,-5.29206e-8,-1.27694e-7,-1,0.137467,-0.990506,0,0.137467,-0.990506,0,0.137467,-0.990506,0,5.29206e-8,1.27694e-7,1,-2.53223e-8,-3.24463e-7,-1,-0.114382,0.993437,0,-7.2727e-8,6.31654e-7,1,-0.114381,0.993437,0,2.72728e-8,-2.36871e-7,-1,0.114383,-0.993437,0,0.114382,-0.993437,0,0.114383,-0.993437,0,-2.72728e-8,2.36871e-7,1,7.2727e-8,-6.31654e-7,-1,-0.114381,0.993437,0,-0.0898459,0.995956,0,4.11845e-8,3.22916e-7,1,-0.0898449,0.995956,0,2.14227e-8,-2.37473e-7,-1,0.0898471,-0.995956,0,0.0898461,-0.995956,0,0.089847,-0.995956,0,0.0898461,-0.995956,0,-2.14227e-8,2.37473e-7,1,-4.11845e-8,-3.22916e-7,-1,-0.0898449,0.995956,0,-0.0641487,0.99794,0,-0.0641478,0.99794,0,1.52955e-8,-2.37948e-7,-1,0.0641489,-0.99794,0,0.0641491,-0.99794,0,0.0641491,-0.99794,0,-1.52955e-8,2.37948e-7,1,-0.0641487,0.99794,0,-0.0376086,0.999292,0,-0.037609,0.999292,0,8.96753e-9,-2.38271e-7,-1,0.0376093,-0.999292,0,0.0376092,-0.999293,0,0.0376093,-0.999293,0,0.0376092,-0.999293,0,-8.96753e-9,2.38271e-7,1,-0.0376086,0.999292,0,-0.037609,0.999292,0,-0.0107433,0.999942,0,-0.01075,0.999942,0,2.56098e-9,-2.38422e-7,-1,0.0107313,-0.999942,0,0.0107382,-0.999942,0,0.0107313,-0.999942,0,0.0107382,-0.999942,0,-2.56098e-9,2.38422e-7,1,-0.0107433,0.999942,0,0,-2.38419e-7,-1,0,2.38419e-7,1,0,-1,0,0,-1,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0.164399,0.00000122813,-0.986394,0.164399,-0.00000305727,0.986394,-1.32454e-8,1,-7.94725e-8,0,1,0,0,1,-1.58944e-7,0,1,0,4.03206e-8,1,-4.47035e-8,1.77153e-8,1,-5.01934e-8,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-0.164399,0,0.986394,1,0,0,-0.164399,0.00000258692,-0.986394,0,1,0,0,1,0,0,1,0],\"uvs\":[],\"vertices\":[0.25,4,-9.5,0.25,1,-9.5,0.25,0.999999,-17.5,0.25,4,-17.5,0.25,4,-19,0.25,-4,-19,0.25,-4,-17.5,0.25,-1,-17.5,0.25,-1,-9.5,0.25,-4,-9.5,0.25,-4,9.5,0.25,-1,9.5,0.25,-0.999999,17.5,0.25,-4,17.5,0.25,-4,19,0.25,4,19,0.25,4,17.5,0.25,1,17.5,0.25,1,9.5,0.25,4,9.5,13.5,4,-9.5,13.5,1,-9.5,13.5,0.999999,-17.5,13.5,4,-17.5,13.5,4,-19,13.5,-4,-19,13.5,-4,-17.5,13.5,-1,-17.5,13.5,-1,-9.5,13.5,-4,-9.5,13.5,-4,9.5,13.5,-1,9.5,13.5,-0.999999,17.5,13.5,-4,17.5,13.5,-4,19,13.5,4,19,13.5,4,17.5,13.5,1,17.5,13.5,1,9.5,13.5,4,9.5,26.9034,4.14384,-9.5,26.9759,1.14471,-9.5,26.9759,1.14471,-17.5,26.9034,4.14384,-17.5,26.9034,4.14384,-19,27.0966,-3.85383,-19,27.0966,-3.85383,-17.5,27.0241,-0.854707,-17.5,27.0241,-0.854706,-9.5,27.0966,-3.85383,-9.5,27.0966,-3.85383,9.5,27.0241,-0.854705,9.5,27.0241,-0.854705,17.5,27.0966,-3.85383,17.5,27.0966,-3.85383,19,26.9034,4.14384,19,26.9034,4.14384,17.5,26.9759,1.14471,17.5,26.9759,1.14471,9.5,26.9034,4.14384,9.5,40.2961,4.64789,-9.5,40.449,1.65179,-9.5,40.449,1.65179,-17.5,40.2961,4.64789,-17.5,40.2961,4.64789,-19,40.7039,-3.34171,-19,40.7039,-3.34171,-17.5,40.551,-0.345608,-17.5,40.551,-0.345608,-9.5,40.7039,-3.34171,-9.5,40.7039,-3.34171,9.5,40.551,-0.345607,9.5,40.551,-0.345607,17.5,40.7039,-3.3417,17.5,40.7039,-3.3417,19,40.2961,4.64789,19,40.2961,4.64789,17.5,40.449,1.65179,17.5,40.449,1.65179,9.5,40.2961,4.64789,9.5,53.6914,5.50896,-9.5,53.9228,2.5179,-9.5,53.9228,2.5179,-17.5,53.6914,5.50896,-17.5,53.6914,5.50896,-19,54.3086,-2.46719,-19,54.3086,-2.46719,-17.5,54.0772,0.523865,-17.5,54.0772,0.523866,-9.5,54.3086,-2.46719,-9.5,54.3086,-2.46719,9.5,54.0772,0.523867,9.5,54.0772,0.523867,17.5,54.3086,-2.46719,17.5,54.3086,-2.46719,19,53.6914,5.50896,19,53.6914,5.50896,17.5,53.9228,2.5179,17.5,53.9228,2.5179,9.5,53.6914,5.50896,9.5,67.0907,6.71773,-9.5,67.3977,3.73348,-9.5,67.3977,3.73348,-17.5,67.0907,6.71773,-17.5,67.0907,6.71773,-19,67.9093,-1.24027,-19,67.9093,-1.24027,-17.5,67.6023,1.74398,-17.5,67.6023,1.74398,-9.5,67.9093,-1.24027,-9.5,67.9093,-1.24027,9.5,67.6023,1.74398,9.5,67.6023,1.74398,17.5,67.9093,-1.24027,17.5,67.9093,-1.24027,19,67.0907,6.71774,19,67.0907,6.71774,17.5,67.3977,3.73348,17.5,67.3977,3.73348,9.5,67.0907,6.71774,9.5,80.4953,8.26112,-9.5,80.8738,5.2851,-9.5,80.8738,5.2851,-17.5,80.4953,8.26112,-17.5,80.4953,8.26112,-19,81.5047,0.32506,-19,81.5047,0.32506,-17.5,81.1262,3.30108,-17.5,81.1262,3.30108,-9.5,81.5047,0.32506,-9.5,81.5047,0.325061,9.5,81.1262,3.30108,9.5,81.1262,3.30108,17.5,81.5047,0.325061,17.5,81.5047,0.325061,19,80.4953,8.26112,19,80.4953,8.26112,17.5,80.8738,5.2851,17.5,80.8738,5.2851,9.5,80.4953,8.26112,9.5,93.9062,10.1224,-9.5,94.3515,7.15559,-9.5,94.3515,7.15559,-17.5,93.9062,10.1224,-17.5,93.9062,10.1224,-19,95.0938,2.21099,-19,95.0938,2.21099,-17.5,94.6485,5.17775,-17.5,94.6485,5.17775,-9.5,95.0938,2.21099,-9.5,95.0938,2.211,9.5,94.6485,5.17775,9.5,94.6485,5.17776,17.5,95.0938,2.211,17.5,95.0938,2.211,19,93.9062,10.1224,19,93.9062,10.1224,17.5,94.3515,7.15559,17.5,94.3515,7.15559,9.5,93.9062,10.1224,9.5,107.324,12.2812,-9.5,107.831,9.32428,-9.5,107.831,9.32428,-17.5,107.324,12.2812,-17.5,107.324,12.2812,-19,108.676,4.39612,-19,108.676,4.39612,-17.5,108.169,7.35301,-17.5,108.169,7.35302,-9.5,108.676,4.39612,-9.5,108.676,4.39612,9.5,108.169,7.35302,9.5,108.169,7.35302,17.5,108.676,4.39612,17.5,108.676,4.39612,19,107.324,12.2812,19,107.324,12.2812,17.5,107.831,9.32428,17.5,107.831,9.32428,9.5,107.324,12.2812,9.5,120.751,14.7141,-9.5,121.313,11.7672,-9.5,121.313,11.7672,-17.5,120.751,14.7141,-17.5,120.751,14.7141,-19,122.249,6.85567,-19,122.249,6.85567,-17.5,121.687,9.80257,-17.5,121.687,9.80257,-9.5,122.249,6.85567,-9.5,122.249,6.85568,9.5,121.687,9.80257,9.5,121.687,9.80257,17.5,122.249,6.85568,17.5,122.249,6.85568,19,120.751,14.7141,19,120.751,14.7141,17.5,121.313,11.7672,17.5,121.313,11.7672,9.5,120.751,14.7141,9.5,134.186,17.3944,-9.5,134.796,14.4572,-9.5,134.796,14.4572,-17.5,134.186,17.3944,-17.5,134.186,17.3944,-19,135.814,9.56188,-19,135.814,9.56188,-17.5,135.204,12.4991,-17.5,135.204,12.4991,-9.5,135.814,9.56188,-9.5,135.814,9.56188,9.5,135.204,12.4991,9.5,135.204,12.4991,17.5,135.814,9.56188,17.5,135.814,9.56188,19,134.186,17.3944,19,134.186,17.3944,17.5,134.796,14.4572,17.5,134.796,14.4572,9.5,134.186,17.3944,9.5,147.63,20.2927,-9.5,148.283,17.3645,-9.5,148.283,17.3645,-17.5,147.63,20.2927,-17.5,147.63,20.2927,-19,149.37,12.4842,-19,149.37,12.4842,-17.5,148.717,15.4124,-17.5,148.717,15.4124,-9.5,149.37,12.4842,-9.5,149.37,12.4842,9.5,148.717,15.4124,9.5,148.717,15.4124,17.5,149.37,12.4842,17.5,149.37,12.4842,19,147.63,20.2927,19,147.63,20.2927,17.5,148.283,17.3645,17.5,148.283,17.3645,9.5,147.63,20.2927,9.5,161.084,23.3772,-9.5,161.771,20.4569,-9.5,161.771,20.4569,-17.5,161.084,23.3772,-17.5,161.084,23.3772,-19,162.916,15.5898,-19,162.916,15.5898,-17.5,162.229,18.5101,-17.5,162.229,18.5101,-9.5,162.916,15.5898,-9.5,162.916,15.5898,9.5,162.229,18.5101,9.5,162.229,18.5101,17.5,162.916,15.5898,17.5,162.916,15.5898,19,161.084,23.3772,19,161.084,23.3772,17.5,161.771,20.4569,17.5,161.771,20.4569,9.5,161.084,23.3772,9.5,174.548,26.6139,-9.5,175.262,23.7001,-9.5,175.262,23.7001,-17.5,174.548,26.6139,-17.5,174.548,26.6139,-19,176.452,18.8439,-19,176.452,18.8439,-17.5,175.738,21.7576,-17.5,175.738,21.7576,-9.5,176.452,18.8439,-9.5,176.452,18.8439,9.5,175.738,21.7576,9.5,175.738,21.7576,17.5,176.452,18.8439,17.5,176.452,18.8439,19,174.548,26.6139,19,174.548,26.6139,17.5,175.262,23.7001,17.5,175.262,23.7001,9.5,174.548,26.6139,9.5,188.022,29.967,-9.5,188.755,27.0581,-9.5,188.755,27.0581,-17.5,188.022,29.967,-17.5,188.022,29.967,-19,189.978,22.2099,-19,189.978,22.2099,-17.5,189.245,25.1188,-17.5,189.245,25.1188,-9.5,189.978,22.2099,-9.5,189.978,22.2099,9.5,189.245,25.1188,9.5,189.245,25.1188,17.5,189.978,22.2099,17.5,189.978,22.2099,19,188.022,29.967,19,188.022,29.967,17.5,188.755,27.0581,17.5,188.755,27.0581,9.5,188.022,29.967,9.5,201.506,33.3995,-9.5,202.252,30.4936,-9.5,202.252,30.4936,-17.5,201.506,33.3995,-17.5,201.506,33.3995,-19,203.494,25.6503,-19,203.494,25.6503,-17.5,202.748,28.5563,-17.5,202.748,28.5563,-9.5,203.494,25.6503,-9.5,203.494,25.6503,9.5,202.748,28.5563,9.5,202.748,28.5563,17.5,203.494,25.6503,17.5,203.494,25.6503,19,201.506,33.3995,19,201.506,33.3995,17.5,202.252,30.4936,17.5,202.252,30.4936,9.5,201.506,33.3995,9.5,215.001,36.8733,-9.5,215.75,33.9683,-9.5,215.75,33.9683,-17.5,215.001,36.8733,-17.5,215.001,36.8733,-19,216.999,29.1267,-19,216.999,29.1267,-17.5,216.25,32.0317,-17.5,216.25,32.0317,-9.5,216.999,29.1267,-9.5,216.999,29.1267,9.5,216.25,32.0317,9.5,216.25,32.0317,17.5,216.999,29.1267,17.5,216.999,29.1267,19,215.001,36.8733,19,215.001,36.8733,17.5,215.75,33.9683,17.5,215.75,33.9683,9.5,215.001,36.8733,9.5,228.506,40.3497,-9.5,229.252,37.4437,-9.5,229.252,37.4437,-17.5,228.506,40.3497,-17.5,228.506,40.3497,-19,230.494,32.6005,-19,230.494,32.6005,-17.5,229.748,35.5064,-17.5,229.748,35.5064,-9.5,230.494,32.6005,-9.5,230.494,32.6005,9.5,229.748,35.5064,9.5,229.748,35.5064,17.5,230.494,32.6005,17.5,230.494,32.6005,19,228.506,40.3497,19,228.506,40.3497,17.5,229.252,37.4437,17.5,229.252,37.4437,9.5,228.506,40.3497,9.5,242.022,43.7901,-9.5,242.755,40.8812,-9.5,242.755,40.8812,-17.5,242.022,43.7901,-17.5,242.022,43.7901,-19,243.978,36.033,-19,243.978,36.033,-17.5,243.245,38.9419,-17.5,243.245,38.9419,-9.5,243.978,36.033,-9.5,243.978,36.033,9.5,243.245,38.9419,9.5,243.245,38.9419,17.5,243.978,36.033,17.5,243.978,36.033,19,242.022,43.7901,19,242.022,43.7901,17.5,242.755,40.8812,17.5,242.755,40.8812,9.5,242.022,43.7901,9.5,255.548,47.1561,-9.5,256.262,44.2424,-9.5,256.262,44.2424,-17.5,255.548,47.1561,-17.5,255.548,47.1561,-19,257.452,39.3861,-19,257.452,39.3861,-17.5,256.738,42.2999,-17.5,256.738,42.2999,-9.5,257.452,39.3861,-9.5,257.452,39.3861,9.5,256.738,42.2999,9.5,256.738,42.2999,17.5,257.452,39.3861,17.5,257.452,39.3861,19,255.548,47.1561,19,255.548,47.1561,17.5,256.262,44.2424,17.5,256.262,44.2424,9.5,255.548,47.1561,9.5,269.084,50.4102,-9.5,269.771,47.4899,-9.5,269.771,47.4899,-17.5,269.084,50.4102,-17.5,269.084,50.4102,-19,270.916,42.6228,-19,270.916,42.6228,-17.5,270.229,45.5431,-17.5,270.229,45.5431,-9.5,270.916,42.6228,-9.5,270.916,42.6228,9.5,270.229,45.5431,9.5,270.229,45.5431,17.5,270.916,42.6228,17.5,270.916,42.6228,19,269.084,50.4102,19,269.084,50.4102,17.5,269.771,47.4899,17.5,269.771,47.4899,9.5,269.084,50.4102,9.5,282.63,53.5158,-9.5,283.283,50.5876,-9.5,283.283,50.5876,-17.5,282.63,53.5158,-17.5,282.63,53.5158,-19,284.37,45.7073,-19,284.37,45.7073,-17.5,283.717,48.6355,-17.5,283.717,48.6355,-9.5,284.37,45.7073,-9.5,284.37,45.7073,9.5,283.717,48.6355,9.5,283.717,48.6355,17.5,284.37,45.7073,17.5,284.37,45.7073,19,282.63,53.5158,19,282.63,53.5158,17.5,283.283,50.5876,17.5,283.283,50.5876,9.5,282.63,53.5158,9.5,296.186,56.4381,-9.5,296.796,53.5009,-9.5,296.796,53.5009,-17.5,296.186,56.4381,-17.5,296.186,56.4381,-19,297.814,48.6056,-19,297.814,48.6056,-17.5,297.204,51.5428,-17.5,297.204,51.5428,-9.5,297.814,48.6056,-9.5,297.814,48.6056,9.5,297.204,51.5428,9.5,297.204,51.5428,17.5,297.814,48.6056,17.5,297.814,48.6056,19,296.186,56.4381,19,296.186,56.4381,17.5,296.796,53.5009,17.5,296.796,53.5009,9.5,296.186,56.4381,9.5,309.751,59.1443,-9.5,310.313,56.1974,-9.5,310.313,56.1974,-17.5,309.751,59.1443,-17.5,309.751,59.1443,-19,311.249,51.2859,-19,311.249,51.2859,-17.5,310.687,54.2328,-17.5,310.687,54.2328,-9.5,311.249,51.2859,-9.5,311.249,51.2859,9.5,310.687,54.2328,9.5,310.687,54.2328,17.5,311.249,51.2859,17.5,311.249,51.2859,19,309.751,59.1443,19,309.751,59.1443,17.5,310.313,56.1974,17.5,310.313,56.1974,9.5,309.751,59.1443,9.5,323.324,61.6039,-9.5,323.831,58.647,-9.5,323.831,58.647,-17.5,323.324,61.6039,-17.5,323.324,61.6039,-19,324.676,53.7188,-19,324.676,53.7188,-17.5,324.169,56.6757,-17.5,324.169,56.6757,-9.5,324.676,53.7188,-9.5,324.676,53.7188,9.5,324.169,56.6757,9.5,324.169,56.6757,17.5,324.676,53.7188,17.5,324.676,53.7188,19,323.324,61.6039,19,323.324,61.6039,17.5,323.831,58.647,17.5,323.831,58.647,9.5,323.324,61.6039,9.5,336.906,63.789,-9.5,337.352,60.8222,-9.5,337.352,60.8222,-17.5,336.906,63.789,-17.5,336.906,63.789,-19,338.094,55.8776,-19,338.094,55.8776,-17.5,337.648,58.8444,-17.5,337.648,58.8444,-9.5,338.094,55.8776,-9.5,338.094,55.8776,9.5,337.648,58.8444,9.5,337.648,58.8444,17.5,338.094,55.8776,17.5,338.094,55.8776,19,336.906,63.789,19,336.906,63.789,17.5,337.352,60.8222,17.5,337.352,60.8222,9.5,336.906,63.789,9.5,350.495,65.6749,-9.5,350.874,62.6989,-9.5,350.874,62.6989,-17.5,350.495,65.6749,-17.5,350.495,65.6749,-19,351.505,57.7389,-19,351.505,57.7389,-17.5,351.126,60.7149,-17.5,351.126,60.7149,-9.5,351.505,57.7389,-9.5,351.505,57.7389,9.5,351.126,60.7149,9.5,351.126,60.7149,17.5,351.505,57.7389,17.5,351.505,57.7389,19,350.495,65.6749,19,350.495,65.6749,17.5,350.874,62.6989,17.5,350.874,62.6989,9.5,350.495,65.6749,9.5,364.091,67.2403,-9.5,364.398,64.256,-9.5,364.398,64.256,-17.5,364.091,67.2403,-17.5,364.091,67.2403,-19,364.909,59.2823,-19,364.909,59.2823,-17.5,364.602,62.2665,-17.5,364.602,62.2665,-9.5,364.909,59.2823,-9.5,364.909,59.2823,9.5,364.602,62.2665,9.5,364.602,62.2665,17.5,364.909,59.2823,17.5,364.909,59.2823,19,364.091,67.2403,19,364.091,67.2403,17.5,364.398,64.256,17.5,364.398,64.256,9.5,364.091,67.2403,9.5,377.691,68.4672,-9.5,377.923,65.4761,-9.5,377.923,65.4761,-17.5,377.691,68.4672,-17.5,377.691,68.4672,-19,378.309,60.491,-19,378.309,60.491,-17.5,378.077,63.4821,-17.5,378.077,63.4821,-9.5,378.309,60.491,-9.5,378.309,60.491,9.5,378.077,63.4821,9.5,378.077,63.4821,17.5,378.309,60.491,17.5,378.309,60.491,19,377.691,68.4672,19,377.691,68.4672,17.5,377.923,65.4761,17.5,377.923,65.4761,9.5,377.691,68.4672,9.5,391.296,69.3417,-9.5,391.449,66.3456,-9.5,391.449,66.3456,-17.5,391.296,69.3417,-17.5,391.296,69.3417,-19,391.704,61.3521,-19,391.704,61.3521,-17.5,391.551,64.3482,-17.5,391.551,64.3482,-9.5,391.704,61.3521,-9.5,391.704,61.3521,9.5,391.551,64.3482,9.5,391.551,64.3482,17.5,391.704,61.3521,17.5,391.704,61.3521,19,391.296,69.3417,19,391.296,69.3417,17.5,391.449,66.3456,17.5,391.449,66.3456,9.5,391.296,69.3417,9.5,404.903,69.8538,-9.5,404.976,66.8547,-9.5,404.976,66.8547,-17.5,404.903,69.8538,-17.5,404.903,69.8538,-19,405.097,61.8562,-19,405.097,61.8562,-17.5,405.024,64.8553,-17.5,405.024,64.8553,-9.5,405.097,61.8562,-9.5,405.097,61.8562,9.5,405.024,64.8553,9.5,405.024,64.8553,17.5,405.097,61.8562,17.5,405.097,61.8562,19,404.903,69.8538,19,404.903,69.8538,17.5,404.976,66.8547,17.5,404.976,66.8547,9.5,404.903,69.8538,9.5,418.5,70,-9.5,418.5,67,-9.5,418.5,67,-17.5,418.5,70,-17.5,418.5,70,-19,418.5,62,-19,418.5,62,-17.5,418.5,65,-17.5,418.5,65,-9.5,418.5,62,-9.5,418.5,62,9.5,418.5,65,9.5,418.5,65,17.5,418.5,62,17.5,418.5,62,19,418.5,70,19,418.5,70,17.5,418.5,67,17.5,418.5,67,9.5,418.5,70,9.5,431.75,70,-9.5,431.75,67,-9.5,431.75,67,-17.5,431.75,70,-17.5,431.75,70,-19,431.75,62,-19,431.75,62,-17.5,431.75,65,-17.5,431.75,65,-9.5,431.75,62,-9.5,431.75,62,9.5,431.75,65,9.5,431.75,65,17.5,431.75,62,17.5,431.75,62,19,431.75,70,19,431.75,70,17.5,431.75,67,17.5,431.75,67,9.5,431.75,70,9.5,0.25,-4,6.49999,0.25,4,6.50001,0.25,4,-6.49999,0.25,-4,-6.50001,9.25,-4,-8.00001,9.25,-4,8,9.25,4,-7.99999,9.25,4,8,431.75,62,-6.00001,431.75,70,-5.99999,431.75,62,6,431.75,70,6,440.75,70,-7.49999,440.75,62,-7.50001,440.75,62,7.5,440.75,70,7.5],\"faces\":[33,0,20,21,1,0,0,0,0,33,1,21,22,2,1,1,1,1,33,2,22,23,3,2,2,2,2,33,3,23,24,4,3,3,3,3,33,4,24,25,5,4,4,4,4,33,5,25,26,6,5,5,5,5,33,6,26,27,7,6,6,6,6,33,7,27,28,8,7,7,7,7,33,8,28,29,9,0,0,0,0,33,10,30,31,11,2,2,2,2,33,11,31,32,12,7,7,7,7,33,12,32,33,13,0,0,0,0,33,13,33,34,14,5,5,5,5,33,14,34,35,15,6,6,6,6,33,15,35,36,16,3,3,3,3,33,16,36,37,17,4,4,4,4,33,17,37,38,18,1,1,1,1,33,18,38,39,19,2,2,2,2,32,10,660,665,8,8,8,32,664,663,9,9,9,9,32,30,10,665,10,10,10,32,664,9,29,9,9,9,32,30,665,664,11,11,11,32,664,29,30,12,12,12,33,20,40,41,21,4,4,4,4,33,21,41,42,22,13,13,13,13,33,22,42,43,23,6,6,6,6,33,23,43,44,24,14,14,14,14,33,24,44,45,25,4,4,4,4,33,25,45,46,26,15,15,15,15,33,26,46,47,27,2,2,2,2,33,27,47,48,28,16,16,16,16,33,28,48,49,29,4,4,4,4,33,29,49,50,30,17,17,17,17,33,30,50,51,31,6,6,6,6,33,31,51,52,32,18,18,18,18,33,32,52,53,33,4,4,4,4,33,33,53,54,34,19,19,19,19,33,34,54,55,35,6,6,6,6,33,35,55,56,36,20,20,20,20,33,36,56,57,37,4,4,4,4,33,37,57,58,38,21,21,21,21,33,38,58,59,39,6,6,6,6,33,39,59,40,20,22,22,22,22,33,40,60,61,41,4,4,4,4,33,41,61,62,42,23,23,23,23,33,42,62,63,43,6,6,6,6,33,43,63,64,44,24,24,24,24,33,44,64,65,45,4,4,4,4,33,45,65,66,46,25,25,25,25,33,46,66,67,47,6,6,6,6,33,47,67,68,48,26,26,26,26,33,48,68,69,49,4,4,4,4,33,49,69,70,50,27,27,27,27,33,50,70,71,51,6,6,6,6,33,51,71,72,52,26,26,26,26,33,52,72,73,53,4,4,4,4,33,53,73,74,54,25,25,25,25,33,54,74,75,55,6,6,6,6,33,55,75,76,56,24,24,24,24,33,56,76,77,57,4,4,4,4,33,57,77,78,58,23,23,23,23,33,58,78,79,59,6,6,6,6,33,59,79,60,40,28,28,28,28,33,60,80,81,61,4,4,4,4,33,61,81,82,62,29,29,29,29,33,62,82,83,63,6,6,6,6,33,63,83,84,64,30,30,30,30,33,64,84,85,65,4,4,4,4,33,65,85,86,66,31,31,31,31,33,66,86,87,67,6,6,6,6,33,67,87,88,68,32,32,32,32,33,68,88,89,69,4,4,4,4,33,69,89,90,70,33,33,33,33,33,70,90,91,71,6,6,6,6,33,71,91,92,72,32,32,32,32,33,72,92,93,73,4,4,4,4,33,73,93,94,74,31,31,31,31,33,74,94,95,75,6,6,6,6,33,75,95,96,76,30,30,30,30,33,76,96,97,77,0,0,0,0,33,77,97,98,78,34,34,34,34,33,78,98,99,79,6,6,6,6,33,79,99,80,60,35,35,35,35,33,80,100,101,81,4,4,4,4,33,81,101,102,82,36,36,36,36,33,82,102,103,83,6,6,6,6,33,83,103,104,84,37,37,37,37,33,84,104,105,85,4,4,4,4,33,85,105,106,86,38,38,38,38,33,86,106,107,87,6,6,6,6,33,87,107,108,88,39,39,39,39,33,88,108,109,89,4,4,4,4,33,89,109,110,90,40,40,40,40,33,90,110,111,91,6,6,6,6,33,91,111,112,92,41,41,41,41,33,92,112,113,93,4,4,4,4,33,93,113,114,94,42,42,42,42,33,94,114,115,95,6,6,6,6,33,95,115,116,96,37,37,37,37,33,96,116,117,97,4,4,4,4,33,97,117,118,98,36,36,36,36,33,98,118,119,99,6,6,6,6,33,99,119,100,80,43,43,43,43,33,100,120,121,101,4,4,4,4,33,101,121,122,102,44,44,44,44,33,102,122,123,103,6,6,6,6,33,103,123,124,104,45,45,45,45,33,104,124,125,105,0,0,0,0,33,105,125,126,106,46,46,46,46,33,106,126,127,107,6,6,6,6,33,107,127,128,108,47,47,47,47,33,108,128,129,109,4,4,4,4,33,109,129,130,110,48,48,48,48,33,110,130,131,111,6,6,6,6,33,111,131,132,112,47,47,47,47,33,112,132,133,113,4,4,4,4,33,113,133,134,114,49,49,49,49,33,114,134,135,115,2,2,2,2,33,115,135,136,116,45,45,45,45,33,116,136,137,117,4,4,4,4,33,117,137,138,118,50,50,50,50,33,118,138,139,119,6,6,6,6,33,119,139,120,100,51,51,51,51,33,120,140,141,121,4,4,4,4,33,121,141,142,122,52,52,52,52,33,122,142,143,123,6,6,6,6,33,123,143,144,124,53,53,53,53,33,124,144,145,125,4,4,4,4,33,125,145,146,126,54,54,54,54,33,126,146,147,127,6,6,6,6,33,127,147,148,128,55,55,55,55,33,128,148,149,129,4,4,4,4,33,129,149,150,130,56,56,56,56,33,130,150,151,131,6,6,6,6,33,131,151,152,132,57,57,57,57,33,132,152,153,133,4,4,4,4,33,133,153,154,134,58,58,58,58,33,134,154,155,135,6,6,6,6,33,135,155,156,136,53,53,53,53,33,136,156,157,137,4,4,4,4,33,137,157,158,138,52,52,52,52,33,138,158,159,139,6,6,6,6,33,139,159,140,120,53,53,53,53,33,140,160,161,141,59,59,59,59,33,141,161,162,142,60,60,60,60,33,142,162,163,143,6,6,6,6,33,143,163,164,144,61,61,61,61,33,144,164,165,145,4,4,4,4,33,145,165,166,146,62,62,62,62,33,146,166,167,147,6,6,6,6,33,147,167,168,148,63,63,63,63,33,148,168,169,149,4,4,4,4,33,149,169,170,150,64,64,64,64,33,150,170,171,151,6,6,6,6,33,151,171,172,152,63,63,63,63,33,152,172,173,153,4,4,4,4,33,153,173,174,154,65,65,65,65,33,154,174,175,155,6,6,6,6,33,155,175,176,156,61,61,61,61,33,156,176,177,157,4,4,4,4,33,157,177,178,158,66,66,66,66,33,158,178,179,159,67,67,67,67,33,159,179,160,140,68,68,68,68,33,160,180,181,161,69,69,69,69,33,161,181,182,162,70,70,70,70,33,162,182,183,163,6,6,6,6,33,163,183,184,164,71,71,71,71,33,164,184,185,165,4,4,4,4,33,165,185,186,166,72,72,72,72,33,166,186,187,167,6,6,6,6,33,167,187,188,168,73,73,73,73,33,168,188,189,169,0,0,0,0,33,169,189,190,170,74,74,74,74,33,170,190,191,171,6,6,6,6,33,171,191,192,172,75,75,75,75,33,172,192,193,173,4,4,4,4,33,173,193,194,174,72,72,72,72,33,174,194,195,175,6,6,6,6,33,175,195,196,176,71,71,71,71,33,176,196,197,177,4,4,4,4,33,177,197,198,178,76,76,76,76,33,178,198,199,179,77,77,77,77,33,179,199,180,160,78,78,78,78,33,180,200,201,181,4,4,4,4,33,181,201,202,182,79,79,79,79,33,182,202,203,183,6,6,6,6,33,183,203,204,184,80,80,80,80,33,184,204,205,185,4,4,4,4,33,185,205,206,186,81,81,81,81,33,186,206,207,187,6,6,6,6,33,187,207,208,188,82,82,82,82,33,188,208,209,189,83,83,83,83,33,189,209,210,190,84,84,84,84,33,190,210,211,191,85,85,85,85,33,191,211,212,192,86,86,86,86,33,192,212,213,193,4,4,4,4,33,193,213,214,194,81,81,81,81,33,194,214,215,195,2,2,2,2,33,195,215,216,196,87,87,87,87,33,196,216,217,197,4,4,4,4,33,197,217,218,198,88,88,88,88,33,198,218,219,199,6,6,6,6,33,199,219,200,180,89,89,89,89,33,200,220,221,201,4,4,4,4,33,201,221,222,202,90,90,90,90,33,202,222,223,203,6,6,6,6,33,203,223,224,204,91,91,91,91,33,204,224,225,205,4,4,4,4,33,205,225,226,206,92,92,92,92,33,206,226,227,207,6,6,6,6,33,207,227,228,208,93,93,93,93,33,208,228,229,209,94,94,94,94,33,209,229,230,210,95,95,95,95,33,210,230,231,211,96,96,96,96,33,211,231,232,212,97,97,97,97,33,212,232,233,213,4,4,4,4,33,213,233,234,214,92,92,92,92,33,214,234,235,215,2,2,2,2,33,215,235,236,216,91,91,91,91,33,216,236,237,217,4,4,4,4,33,217,237,238,218,98,98,98,98,33,218,238,239,219,6,6,6,6,33,219,239,220,200,99,99,99,99,33,220,240,241,221,100,100,100,100,33,221,241,242,222,101,101,101,101,33,222,242,243,223,102,102,102,102,33,223,243,244,224,103,103,103,103,33,224,244,245,225,104,104,104,104,33,225,245,246,226,105,105,105,105,33,226,246,247,227,106,106,106,106,33,227,247,248,228,107,107,107,107,33,228,248,249,229,108,108,108,108,33,229,249,250,230,109,109,109,109,33,230,250,251,231,106,106,106,106,33,231,251,252,232,110,110,110,110,33,232,252,253,233,108,108,108,108,33,233,253,254,234,105,105,105,105,33,234,254,255,235,111,111,111,111,33,235,255,256,236,103,103,103,103,33,236,256,257,237,112,112,112,112,33,237,257,258,238,113,113,113,113,33,238,258,259,239,114,114,114,114,33,239,259,240,220,115,115,115,115,33,240,260,261,241,108,108,108,108,33,241,261,262,242,116,116,116,116,33,242,262,263,243,117,117,117,117,33,243,263,264,244,118,118,118,118,33,244,264,265,245,119,119,119,119,33,245,265,266,246,120,120,120,120,33,246,266,267,247,106,106,106,106,33,247,267,268,248,121,121,121,121,33,248,268,269,249,108,108,108,108,33,249,269,270,250,122,122,122,122,33,250,270,271,251,106,106,106,106,33,251,271,272,252,121,121,121,121,33,252,272,273,253,100,100,100,100,33,253,273,274,254,123,123,123,123,33,254,274,275,255,124,124,124,124,33,255,275,276,256,118,118,118,118,33,256,276,277,257,125,125,125,125,33,257,277,278,258,116,116,116,116,33,258,278,279,259,106,106,106,106,33,259,279,260,240,126,126,126,126,33,260,280,281,261,108,108,108,108,33,261,281,282,262,127,127,127,127,33,262,282,283,263,106,106,106,106,33,263,283,284,264,128,128,128,128,33,264,284,285,265,129,129,129,129,33,265,285,286,266,130,130,130,130,33,266,286,287,267,131,131,131,131,33,267,287,288,268,132,132,132,132,33,268,288,289,269,108,108,108,108,33,269,289,290,270,133,133,133,133,33,270,290,291,271,106,106,106,106,33,271,291,292,272,132,132,132,132,33,272,292,293,273,134,134,134,134,33,273,293,294,274,130,130,130,130,33,274,294,295,275,135,135,135,135,33,275,295,296,276,128,128,128,128,33,276,296,297,277,108,108,108,108,33,277,297,298,278,136,136,136,136,33,278,298,299,279,106,106,106,106,33,279,299,280,260,137,137,137,137,33,280,300,301,281,138,138,138,138,33,281,301,302,282,139,139,139,139,33,282,302,303,283,106,106,106,106,33,283,303,304,284,140,140,140,140,33,284,304,305,285,4,4,4,4,33,285,305,306,286,141,141,141,141,33,286,306,307,287,106,106,106,106,33,287,307,308,288,142,142,142,142,33,288,308,309,289,108,108,108,108,33,289,309,310,290,143,143,143,143,33,290,310,311,291,106,106,106,106,33,291,311,312,292,144,144,144,144,33,292,312,313,293,108,108,108,108,33,293,313,314,294,141,141,141,141,33,294,314,315,295,6,6,6,6,33,295,315,316,296,140,140,140,140,33,296,316,317,297,108,108,108,108,33,297,317,318,298,145,145,145,145,33,298,318,319,299,146,146,146,146,33,299,319,300,280,147,147,147,147,33,300,320,321,301,148,148,148,148,33,301,321,322,302,149,149,149,149,33,302,322,323,303,106,106,106,106,33,303,323,324,304,150,150,150,150,33,304,324,325,305,4,4,4,4,33,305,325,326,306,151,151,151,151,33,306,326,327,307,106,106,106,106,33,307,327,328,308,152,152,152,152,33,308,328,329,309,108,108,108,108,33,309,329,330,310,151,151,151,151,33,310,330,331,311,106,106,106,106,33,311,331,332,312,153,153,153,153,33,312,332,333,313,108,108,108,108,33,313,333,334,314,151,151,151,151,33,314,334,335,315,6,6,6,6,33,315,335,336,316,150,150,150,150,33,316,336,337,317,108,108,108,108,33,317,337,338,318,154,154,154,154,33,318,338,339,319,155,155,155,155,33,319,339,320,300,156,156,156,156,33,320,340,341,321,108,108,108,108,33,321,341,342,322,157,157,157,157,33,322,342,343,323,106,106,106,106,33,323,343,344,324,158,158,158,158,33,324,344,345,325,4,4,4,4,33,325,345,346,326,159,159,159,159,33,326,346,347,327,106,106,106,106,33,327,347,348,328,160,160,160,160,33,328,348,349,329,161,161,161,161,33,329,349,350,330,162,162,162,162,33,330,350,351,331,163,163,163,163,33,331,351,352,332,164,164,164,164,33,332,352,353,333,108,108,108,108,33,333,353,354,334,159,159,159,159,33,334,354,355,335,6,6,6,6,33,335,355,356,336,158,158,158,158,33,336,356,357,337,108,108,108,108,33,337,357,358,338,157,157,157,157,33,338,358,359,339,106,106,106,106,33,339,359,340,320,165,165,165,165,33,340,360,361,341,108,108,108,108,33,341,361,362,342,166,166,166,166,33,342,362,363,343,106,106,106,106,33,343,363,364,344,167,167,167,167,33,344,364,365,345,4,4,4,4,33,345,365,366,346,168,168,168,168,33,346,366,367,347,106,106,106,106,33,347,367,368,348,169,169,169,169,33,348,368,369,349,170,170,170,170,33,349,369,370,350,171,171,171,171,33,350,370,371,351,172,172,172,172,33,351,371,372,352,169,169,169,169,33,352,372,373,353,108,108,108,108,33,353,373,374,354,168,168,168,168,33,354,374,375,355,6,6,6,6,33,355,375,376,356,167,167,167,167,33,356,376,377,357,108,108,108,108,33,357,377,378,358,166,166,166,166,33,358,378,379,359,106,106,106,106,33,359,379,360,340,173,173,173,173,33,360,380,381,361,108,108,108,108,33,361,381,382,362,174,174,174,174,33,362,382,383,363,106,106,106,106,33,363,383,384,364,175,175,175,175,33,364,384,385,365,4,4,4,4,33,365,385,386,366,176,176,176,176,33,366,386,387,367,106,106,106,106,33,367,387,388,368,177,177,177,177,33,368,388,389,369,108,108,108,108,33,369,389,390,370,178,178,178,178,33,370,390,391,371,106,106,106,106,33,371,391,392,372,177,177,177,177,33,372,392,393,373,108,108,108,108,33,373,393,394,374,176,176,176,176,33,374,394,395,375,6,6,6,6,33,375,395,396,376,175,175,175,175,33,376,396,397,377,108,108,108,108,33,377,397,398,378,174,174,174,174,33,378,398,399,379,106,106,106,106,33,379,399,380,360,179,179,179,179,33,380,400,401,381,108,108,108,108,33,381,401,402,382,180,180,180,180,33,382,402,403,383,106,106,106,106,33,383,403,404,384,181,181,181,181,33,384,404,405,385,4,4,4,4,33,385,405,406,386,182,182,182,182,33,386,406,407,387,106,106,106,106,33,387,407,408,388,183,183,183,183,33,388,408,409,389,108,108,108,108,33,389,409,410,390,184,184,184,184,33,390,410,411,391,106,106,106,106,33,391,411,412,392,183,183,183,183,33,392,412,413,393,108,108,108,108,33,393,413,414,394,182,182,182,182,33,394,414,415,395,6,6,6,6,33,395,415,416,396,181,181,181,181,33,396,416,417,397,108,108,108,108,33,397,417,418,398,180,180,180,180,33,398,418,419,399,106,106,106,106,33,399,419,400,380,185,185,185,185,33,400,420,421,401,108,108,108,108,33,401,421,422,402,186,186,186,186,33,402,422,423,403,106,106,106,106,33,403,423,424,404,187,187,187,187,33,404,424,425,405,4,4,4,4,33,405,425,426,406,188,188,188,188,33,406,426,427,407,106,106,106,106,33,407,427,428,408,189,189,189,189,33,408,428,429,409,108,108,108,108,33,409,429,430,410,190,190,190,190,33,410,430,431,411,106,106,106,106,33,411,431,432,412,189,189,189,189,33,412,432,433,413,108,108,108,108,33,413,433,434,414,188,188,188,188,33,414,434,435,415,6,6,6,6,33,415,435,436,416,187,187,187,187,33,416,436,437,417,108,108,108,108,33,417,437,438,418,186,186,186,186,33,418,438,439,419,106,106,106,106,33,419,439,420,400,191,191,191,191,33,420,440,441,421,192,192,192,192,33,421,441,442,422,193,193,193,193,33,422,442,443,423,2,2,2,2,33,423,443,444,424,194,194,194,194,33,424,444,445,425,4,4,4,4,33,425,445,446,426,195,195,195,195,33,426,446,447,427,6,6,6,6,33,427,447,448,428,196,196,196,196,33,428,448,449,429,4,4,4,4,33,429,449,450,430,197,197,197,197,33,430,450,451,431,6,6,6,6,33,431,451,452,432,196,196,196,196,33,432,452,453,433,4,4,4,4,33,433,453,454,434,195,195,195,195,33,434,454,455,435,6,6,6,6,33,435,455,456,436,194,194,194,194,33,436,456,457,437,0,0,0,0,33,437,457,458,438,193,193,193,193,33,438,458,459,439,198,198,198,198,33,439,459,440,420,199,199,199,199,33,440,460,461,441,200,200,200,200,33,441,461,462,442,201,201,201,201,33,442,462,463,443,6,6,6,6,33,443,463,464,444,202,202,202,202,33,444,464,465,445,4,4,4,4,33,445,465,466,446,203,203,203,203,33,446,466,467,447,6,6,6,6,33,447,467,468,448,204,204,204,204,33,448,468,469,449,4,4,4,4,33,449,469,470,450,205,205,205,205,33,450,470,471,451,6,6,6,6,33,451,471,472,452,204,204,204,204,33,452,472,473,453,4,4,4,4,33,453,473,474,454,203,203,203,203,33,454,474,475,455,6,6,6,6,33,455,475,476,456,202,202,202,202,33,456,476,477,457,4,4,4,4,33,457,477,478,458,206,206,206,206,33,458,478,479,459,207,207,207,207,33,459,479,460,440,202,202,202,202,33,460,480,481,461,4,4,4,4,33,461,481,482,462,208,208,208,208,33,462,482,483,463,6,6,6,6,33,463,483,484,464,209,209,209,209,33,464,484,485,465,4,4,4,4,33,465,485,486,466,210,210,210,210,33,466,486,487,467,6,6,6,6,33,467,487,488,468,211,211,211,211,33,468,488,489,469,212,212,212,212,33,469,489,490,470,210,210,210,210,33,470,490,491,471,213,213,213,213,33,471,491,492,472,214,214,214,214,33,472,492,493,473,4,4,4,4,33,473,493,494,474,210,210,210,210,33,474,494,495,475,6,6,6,6,33,475,495,496,476,209,209,209,209,33,476,496,497,477,4,4,4,4,33,477,497,498,478,215,215,215,215,33,478,498,499,479,6,6,6,6,33,479,499,480,460,216,216,216,216,33,480,500,501,481,4,4,4,4,33,481,501,502,482,217,217,217,217,33,482,502,503,483,6,6,6,6,33,483,503,504,484,218,218,218,218,33,484,504,505,485,4,4,4,4,33,485,505,506,486,219,219,219,219,33,486,506,507,487,2,2,2,2,33,487,507,508,488,220,220,220,220,33,488,508,509,489,221,221,221,221,33,489,509,510,490,219,219,219,219,33,490,510,511,491,222,222,222,222,33,491,511,512,492,223,223,223,223,33,492,512,513,493,0,0,0,0,33,493,513,514,494,219,219,219,219,33,494,514,515,495,6,6,6,6,33,495,515,516,496,218,218,218,218,33,496,516,517,497,4,4,4,4,33,497,517,518,498,224,224,224,224,33,498,518,519,499,6,6,6,6,33,499,519,500,480,225,225,225,225,33,500,520,521,501,4,4,4,4,33,501,521,522,502,226,226,226,226,33,502,522,523,503,227,227,227,227,33,503,523,524,504,228,228,228,228,33,504,524,525,505,229,229,229,229,33,505,525,526,506,230,230,230,230,33,506,526,527,507,6,6,6,6,33,507,527,528,508,231,231,231,231,33,508,528,529,509,4,4,4,4,33,509,529,530,510,230,230,230,230,33,510,530,531,511,6,6,6,6,33,511,531,532,512,232,232,232,232,33,512,532,533,513,4,4,4,4,33,513,533,534,514,230,230,230,230,33,514,534,535,515,233,233,233,233,33,515,535,536,516,228,228,228,228,33,516,536,537,517,234,234,234,234,33,517,537,538,518,226,226,226,226,33,518,538,539,519,6,6,6,6,33,519,539,520,500,228,228,228,228,33,520,540,541,521,4,4,4,4,33,521,541,542,522,235,235,235,235,33,522,542,543,523,236,236,236,236,33,523,543,544,524,237,237,237,237,33,524,544,545,525,238,238,238,238,33,525,545,546,526,239,239,239,239,33,526,546,547,527,6,6,6,6,33,527,547,548,528,240,240,240,240,33,528,548,549,529,4,4,4,4,33,529,549,550,530,241,241,241,241,33,530,550,551,531,6,6,6,6,33,531,551,552,532,240,240,240,240,33,532,552,553,533,4,4,4,4,33,533,553,554,534,239,239,239,239,33,534,554,555,535,242,242,242,242,33,535,555,556,536,237,237,237,237,33,536,556,557,537,243,243,243,243,33,537,557,558,538,235,235,235,235,33,538,558,559,539,6,6,6,6,33,539,559,540,520,244,244,244,244,33,540,560,561,541,4,4,4,4,33,541,561,562,542,245,245,245,245,33,542,562,563,543,246,246,246,246,33,543,563,564,544,247,247,247,247,33,544,564,565,545,248,248,248,248,33,545,565,566,546,249,249,249,249,33,546,566,567,547,6,6,6,6,33,547,567,568,548,250,250,250,250,33,548,568,569,549,4,4,4,4,33,549,569,570,550,251,251,251,251,33,550,570,571,551,6,6,6,6,33,551,571,572,552,252,252,252,252,33,552,572,573,553,4,4,4,4,33,553,573,574,554,249,249,249,249,33,554,574,575,555,253,253,253,253,33,555,575,576,556,247,247,247,247,33,556,576,577,557,254,254,254,254,33,557,577,578,558,245,245,245,245,33,558,578,579,559,6,6,6,6,33,559,579,560,540,255,255,255,255,33,560,580,581,561,4,4,4,4,33,561,581,582,562,256,256,256,256,33,562,582,583,563,6,6,6,6,33,563,583,584,564,257,257,257,257,33,564,584,585,565,258,258,258,258,33,565,585,586,566,259,259,259,259,33,566,586,587,567,6,6,6,6,33,567,587,588,568,260,260,260,260,33,568,588,589,569,4,4,4,4,33,569,589,590,570,259,259,259,259,33,570,590,591,571,6,6,6,6,33,571,591,592,572,261,261,261,261,33,572,592,593,573,4,4,4,4,33,573,593,594,574,259,259,259,259,33,574,594,595,575,262,262,262,262,33,575,595,596,576,257,257,257,257,33,576,596,597,577,4,4,4,4,33,577,597,598,578,263,263,263,263,33,578,598,599,579,6,6,6,6,33,579,599,580,560,257,257,257,257,33,580,600,601,581,0,0,0,0,33,581,601,602,582,264,264,264,264,33,582,602,603,583,2,2,2,2,33,583,603,604,584,265,265,265,265,33,584,604,605,585,266,266,266,266,33,585,605,606,586,267,267,267,267,33,586,606,607,587,6,6,6,6,33,587,607,608,588,268,268,268,268,33,588,608,609,589,4,4,4,4,33,589,609,610,590,269,269,269,269,33,590,610,611,591,6,6,6,6,33,591,611,612,592,270,270,270,270,33,592,612,613,593,4,4,4,4,33,593,613,614,594,267,267,267,267,33,594,614,615,595,271,271,271,271,33,595,615,616,596,265,265,265,265,33,596,616,617,597,0,0,0,0,33,597,617,618,598,272,272,272,272,33,598,618,619,599,2,2,2,2,33,599,619,600,580,273,273,273,273,33,600,620,621,601,4,4,4,4,33,601,621,622,602,274,274,274,274,33,602,622,623,603,6,6,6,6,33,603,623,624,604,275,275,275,275,33,604,624,625,605,276,276,276,276,33,605,625,626,606,277,277,277,277,33,606,626,627,607,6,6,6,6,33,607,627,628,608,278,278,278,278,33,608,628,629,609,4,4,4,4,33,609,629,630,610,279,279,279,279,33,610,630,631,611,6,6,6,6,33,611,631,632,612,280,280,280,280,33,612,632,633,613,4,4,4,4,33,613,633,634,614,277,277,277,277,33,614,634,635,615,281,281,281,281,33,615,635,636,616,275,275,275,275,33,616,636,637,617,4,4,4,4,33,617,637,638,618,282,282,282,282,33,618,638,639,619,6,6,6,6,33,619,639,620,600,275,275,275,275,33,620,640,641,621,0,0,0,0,33,621,641,642,622,3,3,3,3,33,622,642,643,623,2,2,2,2,33,623,643,644,624,3,3,3,3,33,624,644,645,625,283,283,283,283,33,625,645,646,626,5,5,5,5,33,626,646,647,627,2,2,2,2,33,627,647,648,628,5,5,5,5,33,628,648,649,629,0,0,0,0,33,630,650,651,631,2,2,2,2,33,631,651,652,632,5,5,5,5,33,632,652,653,633,0,0,0,0,33,633,653,654,634,5,5,5,5,33,634,654,655,635,284,284,284,284,33,635,655,656,636,3,3,3,3,33,636,656,657,637,0,0,0,0,33,637,657,658,638,3,3,3,3,33,638,658,659,639,2,2,2,2,32,668,673,674,285,285,285,32,670,650,630,9,9,9,32,668,674,670,5,5,5,32,629,649,668,286,286,286,32,670,630,629,9,9,9,32,668,670,629,9,9,9,32,15,16,17,287,287,287,32,18,19,661,288,288,288,32,14,15,17,287,287,287,32,18,661,660,287,287,287,32,12,13,14,287,287,287,32,660,10,11,289,289,289,32,12,14,17,290,290,290,32,18,660,11,291,291,291,32,11,12,17,289,289,289,32,17,18,11,287,287,287,33,665,667,666,664,287,287,287,287,32,9,663,662,291,291,291,32,662,0,1,287,287,287,32,2,3,4,287,287,287,32,2,4,5,287,287,287,32,5,6,7,290,290,290,32,8,9,662,291,291,291,32,2,5,7,292,292,292,32,8,662,1,289,289,289,32,1,2,7,287,287,287,32,1,7,8,291,291,291,33,660,661,667,665,293,293,293,293,33,662,663,664,666,294,294,294,294,32,0,662,666,295,295,295,32,667,661,19,296,296,296,32,20,0,666,297,297,297,32,667,19,39,298,298,298,32,20,666,667,299,299,299,32,667,39,20,300,300,300,32,647,646,645,301,301,301,32,645,644,643,301,301,301,32,645,643,642,302,302,302,32,647,645,642,303,303,303,32,641,640,669,304,304,304,32,647,642,641,301,301,301,32,668,649,648,305,305,305,32,648,647,641,305,305,305,32,641,669,668,306,306,306,32,648,641,668,304,304,304,33,673,672,675,674,301,301,301,301,33,671,670,674,675,307,307,307,307,32,650,670,671,305,305,305,32,671,659,658,302,302,302,32,657,656,655,301,301,301,32,657,655,654,304,304,304,32,654,653,652,305,305,305,32,651,650,671,305,305,305,32,657,654,652,308,308,308,32,651,671,658,301,301,301,32,658,657,652,301,301,301,32,658,652,651,302,302,302,33,668,669,672,673,309,309,309,309,32,671,675,672,310,310,310,32,669,640,620,311,311,311,32,671,672,669,312,312,312,32,639,659,671,310,310,310,32,669,620,639,296,296,296,32,671,669,639,296,296,296],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":676,\"version\":3,\"normals\":313,\"type\":\"Geometry\",\"faces\":706}},\"double_turnout_L_a2\":{\"uvs\":[],\"normals\":[0,-1,4.3652e-8,0,-1,4.32338e-8,3.04205e-9,-1,4.89076e-8,2.24137e-9,-1,4.95647e-8,0,0,-1,-2.07698e-7,-0.00000238419,1,-6.32223e-15,-1,4.50095e-8,-6.96594e-15,-1,4.68608e-8,-1.18885e-9,-1,4.10481e-8,-1.04085e-9,-1,4.20272e-8,-4.55387e-15,-1,4.27362e-8,-1.11407e-15,-1,3.86459e-8,7.0261e-10,-1,4.97454e-8,7.45282e-10,-1,4.78158e-8,1.06558e-7,0,-1,-8.64829e-8,-0.00000286102,1,-1.06045e-14,-1,4.85051e-8,-2.93279e-15,-1,4.81329e-8,-1.60415e-9,-1,3.9979e-8,-1.45826e-9,-1,3.63431e-8,0,-1,4.31658e-8,1.93316e-8,-1,9.43515e-8,0,-1,4.81329e-8,1.19733e-9,-1,4.44169e-8,-2.8711e-9,-1,4.65915e-8,0,0,-1,0,-0.0000038147,1,0,0,1,0,0,1,-1.28221e-7,-4.7447e-7,1,-1.57557e-7,0,1,-1.0517e-7,-0.0000021036,1,-1.38348e-7,3.37202e-7,1,-1.57557e-7,6.48846e-7,1,0,0,1,-1.28221e-7,-3.12518e-7,1,-1.38348e-7,4.1603e-7,1,-1.0517e-7,3.89174e-7,1,-1.57557e-7,0.00000153309,1,0,-1,0,0,-1,0,0,-1,0,0,-1,5.37435e-8,-1.15337e-7,-1,-1.40476e-7,0,-1,4.70834e-8,-6.36386e-9,-1,3.9673e-8,0,-1,6.63412e-8,-4.71246e-7,-1,-6.03846e-7,-3.65966e-7,-1,-5.77924e-7,2.01229e-8,-1,8.47308e-8,0,-1,4.26767e-8,9.59301e-9,-1,6.19069e-8,-8.7815e-15,-1,6.09242e-8,1.32552e-9,-1,5.18119e-8,8.42119e-15,-1,6.31163e-8,8.68092e-7,-1,0.00000100636,-3.25978e-9,-1,4.66029e-8,-6.32597e-7,-1,-6.64442e-7,-2.46648e-14,-1,5.93763e-8,3.58313e-8,-1,9.06715e-8,-6.55573e-7,-1,-6.24159e-7,3.6813e-22,-1,5.63364e-8,2.61122e-8,-1,7.70536e-8,2.05904e-14,-1,4.47035e-8,0,-0.00000158946,-1,9.21204e-7,0,1,0,-1,4.47035e-8,0,-1,3.52793e-8,5.14718e-9,-1,5.7001e-8,3.44198e-15,-1,5.15948e-8,4.43321e-15,-1,3.1758e-8,3.19656e-8,-1,2.82946e-7,9.15304e-10,-1,3.61508e-8,-1.00068e-7,-0.00000222524,-1,1.39594e-7,0,1,1.77529e-14,-1,2.41986e-7,-7.14055e-9,-1,4.44135e-8,3.43212e-9,-1,3.57368e-8,0,-1,5.35632e-8,0.0000066822,-1,0.0000110658,-1.46148e-8,-1,1.19942e-8,0,-1,0,0,-0.00000286102,-1,0,0,1,-1.39809e-7,2.76874e-7,-1,-1.40936e-7,0,-1,-1.72869e-7,-0.00000146179,-1,-1.5642e-7,-3.5911e-7,-1,-1.40936e-7,0,-1,-1.40936e-7,-1.34754e-7,-1,0,0,-1,0,0,-1,-1.39809e-7,3.20973e-7,-1,-1.5642e-7,-5.47379e-7,-1,-1.72869e-7,-3.42346e-7,-1,-1.40936e-7,7.32282e-8,-1,0,1,-4.69663e-8,0,1,-3.60076e-8,4.36715e-8,1,-3.58401e-8,2.07663e-8,1,-1.70424e-8,-2.07698e-7,0.00000238419,1,1.28536e-14,1,-8.64676e-8,4.00194e-15,1,-2.84908e-8,-2.54391e-9,1,-6.57408e-8,2.41948e-9,1,-3.29074e-8,1.80118e-15,1,-6.2481e-8,2.5843e-15,1,-2.42525e-8,1.65163e-9,1,-7.46836e-8,6.10891e-10,1,-2.76234e-8,-8.64829e-8,0.00000286102,1,1.06558e-7,0,-1,4.70948e-15,1,-7.72918e-8,9.43716e-15,1,-4.31658e-8,-5.54341e-9,1,-5.79183e-8,-6.43823e-9,1,-3.56176e-8,0,1,-4.81329e-8,4.4926e-8,1,-2.4014e-8,0,1,-4.31658e-8,1.6674e-8,1,-8.91265e-9,1.10176e-7,1,2.48556e-7,0,0.0000038147,1,0,1,0,0,1,0,0,1,0,0,1,-9.41667e-8,-4.47814e-7,1,-7.90498e-7,-8.9978e-8,1,-1.98941e-7,-4.09769e-7,1,-6.47096e-7,6.30097e-8,1,2.31258e-8,2.44854e-8,1,-2.17017e-8,8.12652e-7,1,9.42092e-7,0,1,-8.53534e-8,6.20021e-9,1,-4.26227e-8,5.67856e-8,1,1.23536e-8,-8.42119e-15,1,-6.31163e-8,3.25978e-9,1,-4.66029e-8,2.46648e-14,1,-5.93763e-8,6.32597e-7,1,6.64442e-7,0,1,0,-3.58313e-8,1,-9.06715e-8,0,1,-5.63364e-8,-8.29695e-7,1,-9.03656e-7,-2.61122e-8,1,-7.70537e-8,-2.05904e-14,1,-4.47035e-8,0,0.00000158946,-1,0,1,-4.47035e-8,0,1,-3.86961e-8,5.95181e-9,1,-4.72524e-8,-7.38716e-15,1,-5.2919e-8,-6.36821e-10,1,-4.83752e-8,6.69405e-10,1,-3.7993e-8,-1.00068e-7,0.00000222524,-1,-7.42063e-15,1,-4.76369e-8,-3.27464e-15,1,-4.4636e-8,-1.58974e-9,1,-4.68871e-8,-2.29261e-8,1,-2.93769e-8,0,1,-4.50441e-8,-2.5962e-8,1,-3.00981e-8,0,1,-4.4636e-8,-2.53216e-9,1,-4.93267e-8,1.95741e-7,1,2.77945e-7,0,0.00000286102,-1,0,1,0,-0.757278,0,-0.653093,0,1,-4.26544e-8,3.69261e-10,1,-3.93848e-8,-0.724245,0,-0.689542,0.724245,0,0.689543,-0.724252,5.4175e-7,-0.689536,4.4132e-15,1,-2.96881e-8,-9.70399e-8,1,-1.49928e-7,0,1,-4.72898e-8,3.30769e-9,1,-2.05688e-8,7.85351e-10,1,-4.46741e-8,-3.05122e-9,1,-5.20807e-8,-0.689541,0,-0.724247,-0.689542,-2.87789e-8,-0.724246,-0.689541,-0.00000108769,-0.724247,-0.653172,0.00000237869,-0.75721,0.689542,-6.95645e-7,0.724246,0.653172,0,0.75721,0.653172,0,0.75721,0.653172,-6.19209e-7,0.75721,0.61523,8.54682e-7,0.788347,-0.689553,0,-0.724235,-6.21555e-15,1,-3.97363e-8,-8.95868e-15,1,-5.75105e-8,4.82346e-9,1,5.06607e-9,-0.653168,0,-0.757213,0.653173,0,0.757209,-0.615231,-5.17748e-7,-0.788347,-3.87237e-15,1,-5.27836e-8,1.05422e-9,1,-3.92967e-8,-5.6085e-8,1,-1.19204e-7,1.85609e-15,1,-3.0462e-8,-1.10456e-9,1,-4.5649e-8,-2.88038e-10,1,-3.20689e-8,-3.95137e-10,1,-4.39927e-8,-0.575809,-3.24879e-8,-0.817585,-0.575808,0,-0.817585,-0.575811,0.0000111045,-0.817583,0.615231,4.32989e-7,0.788347,0.575809,0,0.817584,0.534997,0,0.844854,0.534998,3.35715e-8,0.844853,0.534997,-6.83514e-7,0.844854,0.4929,-8.71144e-7,0.870086,-0.534998,0.00000126031,-0.844853,-0.615233,0,-0.788346,-0.575808,-0.00000233913,-0.817585,-0.575808,-4.87319e-8,-0.817585,-0.575788,0,-0.817599,-0.575809,0.00000233913,-0.817584,-0.575788,0,-0.817599,-0.575808,0,-0.817585,-0.653173,0,-0.757209,-0.653162,0,-0.757218,-0.653173,0,-0.757209,-0.653162,0,-0.757218,-0.534998,0,-0.844853,-0.534998,-5.03572e-8,-0.844854,-0.534998,0,-0.844853,-0.534998,-5.51618e-8,-0.844854,-0.4929,0,-0.870086,-0.4929,-4.4141e-7,-0.870086,-0.492899,0,-0.870087,-0.492899,4.41407e-7,-0.870086,-0.492899,0,-0.870087,-0.4929,0,-0.870086,-0.449612,0,-0.893224,-0.405239,0,-0.914211,-0.405238,0,-0.914211,-0.405239,0,-0.914211,-0.405239,0,-0.914211,-0.615232,0,-0.788346,1.10783e-14,1,-7.94726e-8,0.575815,0,0.81758,-5.53916e-15,-1,3.97363e-8,-7.37529e-15,-1,4.96145e-8,0,-1,2.36449e-8,1.58161e-9,-1,4.74181e-8,-2.32124e-8,-1,1.76224e-8,-9.94069e-9,-1,-9.46418e-9,4.69811e-9,-1,4.82972e-8,0.615231,-8.54682e-7,0.788347,0.0790287,0.992653,0.0916164,0.653172,0,0.75721,0.689542,6.95645e-7,0.724246,-0.724252,-5.4175e-7,-0.689536,-0.689541,0.0000010359,-0.724247,-0.653172,-0.00000237869,-0.75721,0,-1,7.94727e-8,-7.92756e-10,-1,8.4554e-8,-0.492897,0,-0.870088,9.50709e-15,1,-9.03971e-8,-8.23737e-10,1,-8.09269e-8,0.449604,0,0.893228,0.405239,0,0.914211,0.653173,4.51332e-8,0.757209,0.65317,0,0.757211,0.653174,0.00000168497,0.757208,0.653173,-0.00000168497,0.757209,0.65317,0,0.757211,0.653173,0,0.757209,0.689542,0,0.724246,0.689538,4.31686e-8,0.72425,0.689542,0,0.724246,0.689538,4.77776e-8,0.72425,0.615226,0,0.788351,0.615231,0,0.788347,0.615226,0,0.788351,0.724246,0,0.689542,0.724246,0.000001096,0.689542,0.724261,0,0.689526,0.724247,-6.58879e-7,0.68954,0.724261,0,0.689526,1,0,0,0.724261,0,0.689526,0.724245,0,0.689542,0.724245,0,0.689542,0.757204,0,0.653179,0.757204,0,0.653179,1.79174e-14,-1,1.15021e-7,-3.00896e-9,-1,7.59844e-8,2.3152e-15,-1,3.15581e-8,1.1237e-8,-1,6.34381e-8,-2.88452e-15,-1,4.73406e-8,3.08689e-9,-1,3.99985e-8,-8.00197e-9,-1,3.50731e-8,-7.53476e-9,-1,3.82538e-8,7.18072e-8,-1,9.20127e-8,-0.615231,5.17748e-7,-0.788347,-0.00412087,-0.999974,-0.00585114,-0.575809,0,-0.817585,-0.534998,-0.00000126031,-0.844853,0.4929,8.71144e-7,0.870086,0.534997,0,0.844854,0.0110928,0.999785,0.0175175,0.534997,3.35715e-8,0.844854,0.615231,-4.32989e-7,0.788347,-8.68739e-15,-1,3.97364e-8,-4.75354e-15,-1,4.51985e-8,3.35221e-9,-1,6.65983e-9],\"metadata\":{\"generator\":\"io_three\",\"normals\":303,\"uvs\":0,\"vertices\":234,\"version\":3,\"faces\":388,\"type\":\"Geometry\"},\"vertices\":[180.147,-0.999999,17.5,177.71,-0.999999,17.5,186.194,-1,10.8787,187.793,-1,9.5,190.088,-1,9.5,187.146,-0.999999,12.0382,180.147,-4,17.5,177.71,-4,17.5,187.793,-4,9.5,190.088,-4,9.5,164.131,-0.999999,17.5,170.072,-0.999999,13.3159,174.962,-1,9.5,128.332,-0.999999,17.5,137.008,-0.999999,12.5847,141.88,-1,9.5,164.131,-4,17.5,128.332,-4,17.5,141.88,-4,9.49999,174.962,-4,9.5,110.883,-0.999999,17.5,121.856,-0.999999,11.9767,126.228,-1,9.5,107.232,-0.999999,17.5,109.882,-0.999999,16.3253,121.149,-1,10.6538,123.186,-1,9.5,110.883,-4,17.5,107.232,-4,17.5,123.186,-4,9.49999,126.228,-4,9.49999,178.225,8.30516e-7,19,103.848,8.30516e-7,19,103.848,-4,19,107.548,-4,19,107.548,-0.999999,19,125.684,-0.999999,19,125.684,-4,19,162.001,-4,19,162.001,-0.999999,19,175.788,-0.999999,19,175.788,-4,19,178.225,-4,19,178.225,4,19,175.788,4,19,175.788,1,19,162.001,1,19,162.001,4,19,125.684,4,19,125.684,1,19,107.548,1,19,107.548,4,19,103.848,4,19,110.523,-4,17.6813,139.13,-4,1.74846e-7,141.933,-4,1.74846e-7,132.896,-4,5.72282,132.124,-4,4.43623,152.987,-4,-9.49999,155.435,-4,-9.49999,153.988,-4,-8.37077,143.615,-4,-1.06514,142.782,-4,-2.31235,155.992,-4,1.74846e-7,186.561,-4,1.74846e-7,181.119,-4,4.69458,148.06,-4,5.58662,168.434,-4,-9.49999,197.025,-4,-9.5,191.73,-4,-4.45836,158.754,-4,-1.9451,198.646,-4,1.74846e-7,200.82,-4,1.74846e-7,198.11,-4,2.58069,197.102,-4,1.46924,208.522,-4,-9.5,210.593,-4,-9.5,208.596,-4,-7.40343,207.536,-4,-8.46411,210.593,-1,-9.5,208.522,-1,-9.5,216.139,-1,-17.5,218.209,-1,-17.5,216.139,-4,-17.5,218.209,-4,-17.5,197.025,-1,-9.5,201.879,-1,-14.121,205.096,-1,-17.5,168.434,-1,-9.5,169.066,-1,-9.99263,177.769,-1,-17.5,177.769,-4,-17.5,205.096,-4,-17.5,155.435,-1,-9.5,163.991,-1,-16.1767,165.525,-1,-17.5,152.987,-1,-9.5,153.095,-1,-9.57558,163.039,-1,-17.3363,163.229,-1,-17.5,163.229,-4,-17.5,165.525,-4,-17.5,219.538,-4,-19,217.558,-4,-19,217.558,-1,-19,206.524,-1,-19,206.524,-4,-19,179.457,-4,-19,179.457,-1,-19,167.264,-1,-19,167.264,-4,-19,164.968,-4,-19,164.968,-8.30516e-7,-19,219.538,-8.30517e-7,-19,164.968,4,-19,167.264,4,-19,167.264,0.999999,-19,179.457,0.999999,-19,179.457,4,-19,206.524,4,-19,206.524,0.999999,-19,217.558,0.999999,-19,217.558,4,-19,219.538,4,-19,217.469,-4,-18.8974,218.581,-4,-17.8901,178.97,-4,-18.5364,190.088,1,9.5,187.793,1,9.5,186.194,1,10.8787,177.71,1,17.5,180.147,1,17.5,187.146,1,12.0382,190.088,4,9.5,187.793,4,9.5,177.71,4,17.5,180.147,4,17.5,174.962,1,9.5,170.072,1,13.3159,164.131,1,17.5,141.88,1,9.5,137.008,1,12.5847,128.332,1,17.5,174.962,4,9.5,141.88,4,9.49999,128.332,4,17.5,164.131,4,17.5,126.228,1,9.5,121.856,1,11.9767,110.883,1,17.5,123.186,1,9.5,121.149,1,10.6538,109.882,1,16.3253,107.232,1,17.5,126.228,4,9.49999,123.186,4,9.49999,107.232,4,17.5,110.883,4,17.5,110.523,4,17.6813,132.896,4,5.72282,141.933,4,-1.74846e-7,139.13,4,-1.74846e-7,132.124,4,4.43623,143.615,4,-1.06514,153.988,4,-8.37077,155.435,4,-9.49999,152.987,4,-9.49999,142.782,4,-2.31235,181.119,4,4.69458,186.561,4,-1.74846e-7,155.992,4,-1.74846e-7,148.06,4,5.58662,191.73,4,-4.45836,197.025,4,-9.5,168.434,4,-9.49999,158.754,4,-1.9451,198.11,4,2.58069,200.82,4,-1.74846e-7,198.646,4,-1.74846e-7,197.102,4,1.46924,208.596,4,-7.40343,210.593,4,-9.5,208.522,4,-9.5,207.536,4,-8.46411,218.209,0.999999,-17.5,216.139,0.999999,-17.5,208.522,1,-9.5,210.593,1,-9.5,218.209,4,-17.5,216.139,4,-17.5,205.096,0.999999,-17.5,201.879,0.999999,-14.121,197.025,1,-9.5,177.769,0.999999,-17.5,169.066,1,-9.99263,168.434,1,-9.5,205.096,4,-17.5,177.769,4,-17.5,165.525,0.999999,-17.5,163.991,0.999999,-16.1767,155.435,1,-9.5,163.229,0.999999,-17.5,163.039,0.999999,-17.3363,153.095,1,-9.57558,152.987,1,-9.5,165.525,4,-17.5,163.229,4,-17.5,217.469,4,-18.8974,218.581,4,-17.8901,178.97,4,-18.5364,217.469,0.999999,-18.8974,207.536,1,-8.46411,197.102,1,1.46924,191.73,1,-4.45836,181.119,1,4.69458,178.97,0.999999,-18.5364,158.754,1,-1.9451,153.988,1,-8.37077,143.615,1,-1.06514,132.896,1,5.72282,148.06,1,5.58662,181.119,-1,4.69458,191.73,-1,-4.45836,207.536,-1,-8.46411,197.102,-1,1.46924,217.469,-1,-18.8974,110.523,1,17.6813,178.97,-1,-18.5364,158.754,-1,-1.9451,148.06,-1,5.58662,132.896,-1,5.72282,143.615,-1,-1.06514,153.988,-1,-8.37077,110.523,-0.999999,17.6813],\"faces\":[32,5,0,1,0,0,0,32,2,3,4,1,1,1,32,5,1,2,2,2,2,32,2,4,5,3,3,3,33,1,0,6,7,4,4,4,4,33,4,3,8,9,5,5,5,5,32,2,1,10,6,6,6,32,11,12,3,7,7,7,32,2,10,11,8,8,8,32,11,3,2,9,9,9,32,11,10,13,10,10,10,32,14,15,12,11,11,11,32,11,13,14,12,12,12,32,14,12,11,13,13,13,33,16,17,13,10,14,14,14,14,33,12,15,18,19,15,15,15,15,32,14,13,20,16,16,16,32,21,22,15,17,17,17,32,14,20,21,18,18,18,32,21,15,14,19,19,19,32,21,20,23,20,20,20,32,21,23,24,21,21,21,32,26,22,21,22,22,22,32,21,24,25,23,23,23,32,25,26,21,24,24,24,33,27,28,23,20,25,25,25,25,33,22,26,29,30,26,26,26,26,32,32,33,34,27,27,27,32,32,34,35,28,28,28,32,41,42,31,28,28,28,32,40,41,31,27,27,27,32,31,32,35,29,29,29,32,36,37,38,30,30,30,32,31,35,36,31,31,31,32,39,40,31,32,32,32,32,36,38,39,30,30,30,32,31,36,39,33,33,33,32,31,43,44,34,34,34,32,31,44,45,34,34,34,32,51,52,32,28,28,28,32,50,51,32,34,34,34,32,32,31,45,35,35,35,32,46,47,48,30,30,30,32,32,45,46,36,36,36,32,49,50,32,37,37,37,32,46,48,49,30,30,30,32,46,49,32,38,38,38,33,42,41,7,6,39,39,39,39,33,38,37,17,16,40,40,40,40,32,53,34,33,40,40,40,32,33,28,27,40,40,40,32,33,27,53,41,41,41,32,57,54,55,42,42,42,32,55,56,30,43,43,43,32,30,29,57,44,44,44,32,55,30,57,45,45,45,32,62,58,59,46,46,46,32,59,60,61,47,47,47,32,61,55,54,40,40,40,32,54,62,59,48,48,48,32,59,61,54,49,49,49,32,66,63,64,50,50,50,32,64,65,19,51,51,51,32,19,18,66,52,52,52,32,64,19,66,53,53,53,32,70,67,68,54,54,54,32,68,69,64,55,55,55,32,64,63,70,39,39,39,32,68,64,70,56,56,56,32,74,71,72,40,40,40,32,72,73,9,57,57,57,32,9,8,74,58,58,58,32,72,9,74,59,59,59,32,78,75,76,40,40,40,32,76,77,72,60,60,60,32,72,71,78,61,61,61,32,76,72,78,62,62,62,33,79,80,81,82,63,63,63,63,33,76,75,80,79,64,64,64,64,33,82,81,83,84,65,65,65,65,32,81,80,85,66,66,66,32,86,87,81,67,67,67,32,85,86,81,68,68,68,32,86,85,88,69,69,69,32,89,90,87,70,70,70,32,86,88,89,71,71,71,32,89,87,86,72,72,72,33,68,67,88,85,73,73,73,73,33,87,90,91,92,74,74,74,74,32,89,88,93,75,75,75,32,94,95,90,40,40,40,32,89,93,94,76,76,76,32,94,90,89,77,77,77,32,94,93,96,78,78,78,32,94,96,97,79,79,79,32,99,95,94,41,41,41,32,94,97,98,80,80,80,32,98,99,94,81,81,81,33,59,58,96,93,82,82,82,82,33,95,99,100,101,83,83,83,83,32,113,102,103,4,4,4,32,113,103,104,4,4,4,32,110,111,112,4,4,4,32,109,110,112,4,4,4,32,112,113,104,84,84,84,32,105,106,107,85,85,85,32,112,104,105,86,86,86,32,108,109,112,87,87,87,32,105,107,108,88,88,88,32,105,108,112,89,89,89,32,112,114,115,90,90,90,32,112,115,116,91,91,91,32,122,123,113,4,4,4,32,121,122,113,90,90,90,32,113,112,116,92,92,92,32,117,118,119,88,88,88,32,113,116,117,93,93,93,32,120,121,113,94,94,94,32,117,119,120,85,85,85,32,113,117,120,95,95,95,32,125,84,83,40,40,40,32,124,103,102,40,40,40,32,125,83,124,40,40,40,32,124,102,125,41,41,41,32,106,92,91,40,40,40,32,126,107,106,40,40,40,32,91,126,106,40,40,40,33,101,100,111,110,40,40,40,40,32,132,127,128,96,96,96,32,129,130,131,97,97,97,32,132,128,129,98,98,98,32,129,131,132,99,99,99,33,133,134,128,127,100,100,100,100,33,131,130,135,136,25,25,25,25,32,129,128,137,101,101,101,32,138,139,130,102,102,102,32,129,137,138,103,103,103,32,138,130,129,104,104,104,32,138,137,140,105,105,105,32,141,142,139,106,106,106,32,138,140,141,107,107,107,32,141,139,138,108,108,108,33,143,144,140,137,109,109,109,109,33,139,142,145,146,110,110,110,110,32,141,140,147,111,111,111,32,148,149,142,112,112,112,32,141,147,148,113,113,113,32,148,142,141,114,114,114,32,148,147,150,115,115,115,32,148,150,151,116,116,116,32,153,149,148,117,117,117,32,148,151,152,118,118,118,32,152,153,148,119,119,119,33,154,155,150,147,120,120,120,120,33,149,153,156,157,25,25,25,25,33,136,135,44,43,121,121,121,121,33,146,145,48,47,122,122,122,122,32,158,157,156,123,123,123,32,156,52,51,122,122,122,32,156,51,158,122,122,122,32,162,155,154,124,124,124,32,154,159,160,125,125,125,32,160,161,162,121,121,121,32,154,160,162,126,126,126,32,167,161,160,122,122,122,32,160,163,164,127,127,127,32,164,165,166,123,123,123,32,166,167,160,128,128,128,32,160,164,166,129,129,129,32,171,144,143,122,122,122,32,143,168,169,130,130,130,32,169,170,171,131,131,131,32,143,169,171,132,132,132,32,175,170,169,121,121,121,32,169,172,173,133,133,133,32,173,174,175,134,134,134,32,169,173,175,135,135,135,32,179,134,133,136,136,136,32,133,176,177,137,137,137,32,177,178,179,138,138,138,32,133,177,179,139,139,139,32,183,178,177,140,140,140,32,177,180,181,141,141,141,32,181,182,183,138,138,138,32,177,181,183,142,142,142,33,184,185,186,187,143,143,143,143,33,188,189,185,184,65,65,65,65,33,187,186,182,181,144,144,144,144,32,186,185,190,145,145,145,32,191,192,186,146,146,146,32,190,191,186,147,147,147,32,191,190,193,148,148,148,32,194,195,192,122,122,122,32,191,193,194,149,149,149,32,194,192,191,150,150,150,33,196,197,193,190,74,74,74,74,33,192,195,174,173,151,151,151,151,32,194,193,198,152,152,152,32,199,200,195,153,153,153,32,194,198,199,154,154,154,32,199,195,194,155,155,155,32,199,198,201,156,156,156,32,199,201,202,157,157,157,32,204,200,199,158,158,158,32,199,202,203,159,159,159,32,203,204,199,160,160,160,33,205,206,201,198,27,27,27,27,33,200,204,166,165,161,161,161,161,32,208,123,122,123,123,123,32,207,189,188,122,122,122,32,208,122,207,138,138,138,32,207,188,208,122,122,122,32,196,119,118,162,162,162,32,209,197,196,122,122,122,32,118,209,196,121,121,121,33,115,114,206,205,122,122,122,122,33,121,210,207,122,163,163,163,163,32,190,185,210,164,164,164,32,210,121,120,162,162,162,32,210,120,190,165,165,165,33,210,185,189,207,166,166,166,166,33,190,120,119,196,167,167,167,167,33,186,211,183,182,168,168,168,168,32,137,128,212,169,169,169,32,212,211,186,170,170,170,32,186,192,213,171,171,171,32,214,137,212,172,172,172,32,186,213,214,173,173,173,32,212,186,214,174,174,174,32,183,211,212,175,175,175,32,212,179,178,176,176,176,32,212,178,183,177,177,177,33,134,179,212,128,178,178,178,178,33,173,172,213,192,179,179,179,179,32,168,214,213,180,180,180,32,213,172,169,181,181,181,32,213,169,168,182,182,182,33,137,214,168,143,183,183,183,183,33,117,215,209,118,184,184,184,184,32,117,116,198,185,185,185,32,198,193,215,186,186,186,32,198,215,117,187,187,187,33,197,209,215,193,188,188,188,188,33,198,116,115,205,189,189,189,189,33,195,216,175,174,190,190,190,190,32,195,200,217,191,191,191,32,195,217,218,192,192,192,32,220,216,195,193,193,193,32,147,140,220,194,194,194,32,195,218,219,195,195,195,32,219,147,220,196,196,196,32,219,220,195,197,197,197,32,175,216,220,198,198,198,32,220,171,170,199,199,199,32,220,170,175,200,200,200,33,165,164,217,200,201,201,201,201,33,218,217,164,163,202,202,202,202,32,159,219,218,203,203,203,32,218,163,160,204,204,204,32,218,160,159,205,205,205,33,147,219,159,154,206,206,206,206,33,144,171,220,140,207,207,207,207,33,97,203,202,98,208,208,208,208,32,96,58,62,209,209,209,32,62,167,166,210,210,210,32,204,203,97,211,211,211,32,62,166,204,212,212,212,32,204,97,96,213,213,213,32,62,204,96,214,214,214,32,112,111,100,215,215,215,32,99,98,202,216,216,216,32,112,100,99,217,217,217,32,206,114,112,215,215,215,32,99,202,201,218,218,218,32,201,206,112,217,217,217,32,99,201,112,217,217,217,32,57,162,161,219,219,219,32,161,167,62,220,220,220,32,54,57,161,221,221,221,32,161,62,54,222,222,222,32,155,162,57,223,223,223,32,57,29,26,224,224,224,32,26,25,151,225,225,225,32,150,155,57,226,226,226,32,26,151,150,227,227,227,32,57,26,150,228,228,228,33,151,25,24,152,229,229,229,229,32,32,52,156,230,230,230,32,153,152,24,231,231,231,32,32,156,153,232,232,232,32,28,33,32,230,230,230,32,153,24,23,231,231,231,32,23,28,32,233,233,233,32,153,23,32,233,233,233,33,130,45,44,135,234,234,234,234,33,45,130,139,46,235,235,235,235,33,46,139,146,47,236,236,236,236,33,39,10,1,40,237,237,237,237,33,38,16,10,39,236,236,236,236,33,7,41,40,1,234,234,234,234,32,3,12,221,238,238,238,32,222,85,80,239,239,239,32,3,221,222,240,240,240,32,223,224,3,241,241,241,32,222,80,223,242,242,242,32,222,223,3,243,243,243,33,19,65,221,12,244,244,244,244,32,222,221,65,180,180,180,32,65,64,69,245,245,245,32,65,69,222,246,246,246,33,85,222,69,68,247,247,247,247,33,75,78,223,80,248,248,248,248,32,224,223,78,175,175,175,32,71,74,224,176,176,176,32,78,71,224,249,249,249,33,3,224,74,8,250,250,250,250,32,81,87,105,251,251,251,32,105,104,225,41,41,41,32,105,225,81,252,252,252,33,92,106,105,87,167,167,167,167,33,103,124,225,104,163,163,163,163,33,225,124,83,81,166,166,166,166,33,142,49,48,145,253,253,253,253,32,142,149,226,138,138,138,32,226,50,49,254,254,254,32,226,49,142,255,255,255,33,157,158,226,149,256,256,256,256,33,50,226,158,51,257,257,257,257,32,73,176,133,258,258,258,32,127,132,5,259,259,259,32,73,133,127,260,260,260,32,4,9,73,261,261,261,32,127,5,4,262,262,262,32,127,4,73,263,263,263,32,77,180,177,264,264,264,32,177,176,73,265,265,265,32,72,77,177,266,266,266,32,177,73,72,267,267,267,32,31,42,6,268,268,268,32,0,5,132,269,269,269,32,31,6,0,270,270,270,32,136,43,31,268,268,268,32,0,132,131,269,269,269,32,131,136,31,270,270,270,32,0,131,31,270,270,270,32,181,180,77,271,271,271,32,77,76,79,272,272,272,32,82,84,125,273,273,273,32,181,77,79,274,274,274,32,82,125,208,275,275,275,32,187,181,79,276,276,276,32,208,188,184,277,277,277,32,184,187,79,278,278,278,32,82,208,184,275,275,275,32,79,82,184,279,279,279,32,123,208,125,280,280,280,32,125,102,113,281,281,281,32,125,113,123,281,281,281,32,109,108,227,41,41,41,32,227,90,95,282,282,282,32,227,95,109,283,283,283,33,107,126,227,108,184,184,184,184,33,90,227,126,91,188,188,188,188,33,101,110,109,95,189,189,189,189,32,93,88,228,284,284,284,32,228,229,15,285,285,285,32,15,22,230,286,286,286,32,15,230,231,287,287,287,32,93,228,15,288,288,288,32,15,231,232,289,289,289,32,15,232,93,290,290,290,33,67,70,228,88,291,291,291,291,32,229,228,70,198,198,198,32,70,63,66,292,292,292,32,70,66,229,293,293,293,33,15,229,66,18,294,294,294,294,33,30,56,230,22,295,295,295,295,32,231,230,56,296,296,296,32,56,55,61,297,297,297,32,56,61,231,298,298,298,33,231,61,60,232,202,202,202,202,33,93,232,60,59,299,299,299,299,32,20,13,36,300,300,300,32,36,35,233,301,301,301,32,36,233,20,302,302,302,33,17,37,36,13,253,253,253,253,33,34,53,233,35,257,257,257,257,33,20,233,53,27,256,256,256,256]},\"eight_R_ab\":{\"uvs\":[],\"normals\":[-0.388952,3.76793e-8,0.921258,0,1,-4.61659e-8,0,1,-4.46261e-8,3.2713e-8,1,2.36681e-7,1.13053e-8,1,-2.67773e-8,-9.55496e-10,1,-4.56694e-8,1.07257e-8,1,-2.78054e-8,0,1,-4.08461e-8,-4.75406e-8,1,-1.81256e-7,-1.02314e-8,1,-9.24939e-8,-1.11361e-8,1,-7.92405e-8,2.61151e-9,1,-3.54028e-8,1.46271e-9,1,-4.09602e-8,-1.86816e-8,1,-1.07666e-7,6.24947e-9,1,-2.78302e-8,3.06355e-9,1,-3.59368e-8,4.70801e-9,1,-2.72164e-8,0,-1,4.341e-8,0.40524,3.63274e-8,0.91421,0.359908,0,0.932988,0.40524,3.99614e-8,0.91421,0.359908,0,0.932988,0.361119,-0.0928731,0.927883,0.368672,-0.00449755,0.929549,0,1,0,0.242089,0,0.970254,0.122883,0,0.992421,0,0,1,0,-1,0,0.0735656,0,-0.99729,0,1,-4.98564e-7,0.0251882,1.87666e-9,-0.999683,0.0251882,0,-0.999683,0.105981,0,0.994368,0.0852211,0,0.996362,0.0986573,-0.115616,0.988382,0.0852211,0,0.996362,0.170959,0,0.985278,0.242978,0,0.970032,0.265064,0,0.964231,0.100041,-0.994002,0.0441822,-0.219101,0,0.975702,-0.170959,0,-0.985278,0,1,0,-0.31368,0,-0.949529,-2.81545e-9,-1,2.88257e-8,-0.2191,0,-0.975702,-0.23575,0.242095,-0.941176,-0.278513,-0.26558,-0.922983,0.359895,0,-0.932993,-1.05964e-8,1,-6.35783e-8,2.70517e-8,1,1.08418e-7,0,1,-7.94729e-8,6.00157e-9,1,-1.50162e-8,0,0,1,0,1,0,4.89062e-8,1,1.26779e-7,2.65849e-8,1,-6.89187e-8,1.43347e-7,1,5.17995e-7,6.2216e-8,1,1.74945e-7,-1,0,-8.90096e-7,0.164399,0,0.986394,-1,0,-0.00000404366,-1,0,-0.00000197148,-1,-7.45058e-8,-0.00000217163,-1,0,-0.00000404366,-1,2.27019e-7,-0.00000196913,-1,-0.00000524219,-0.00000254466,-0.388952,-3.76793e-8,-0.921258,0,4.37114e-8,1,0,0,0,6.23449e-9,1,-5.78887e-8,-3.60623e-8,1,7.18147e-8,5.57143e-9,1,-5.67126e-8,0,1,-4.61659e-8,-8.58615e-9,1,2.80725e-8,-8.31239e-9,1,-2.0148e-8,3.6239e-8,1,-2.08854e-7,3.66859e-9,1,-5.30667e-8,-1.40984e-9,1,-1.91125e-8,0,1,-4.46261e-8,-7.83437e-10,1,-3.10934e-8,4.97207e-9,1,-6.05117e-8,-4.27635e-10,1,-4.26439e-8,9.50922e-11,1,-4.47299e-8,-5.22234e-10,1,-4.16137e-8,0.40524,-3.63274e-8,-0.91421,0.359908,0,-0.932988,0.359908,0,-0.932988,0.40524,-3.99614e-8,-0.91421,0.362687,-0.00142386,-0.93191,0.367494,-0.0800054,-0.926578,0,1,0,0.242089,0,-0.970254,0.122883,0,-0.992421,0,0,-1,0,0,1,0.0251883,-3.05897e-7,0.999683,0.0735656,0,0.99729,0.0251882,0,0.999683,0.105981,0,-0.994368,0.0852211,0,-0.996362,0.0986573,-0.115616,-0.988382,0.0852211,0,-0.996362,0.170959,0,-0.985278,0.265064,0,-0.964231,0.242978,0,-0.970032,0.100041,-0.994002,-0.0441826,-0.219101,0,-0.975702,-0.170959,0,0.985278,9.28953e-8,1,-4.13683e-7,-0.2191,0,0.975702,-0.31368,0,0.949529,-0.262145,-0.184234,0.947279,-4.43657e-8,1,1.34298e-7,-0.261001,-0.170361,0.950187,0.359895,0,0.932993,0,1,-5.50271e-8,5.29819e-9,1,-3.17891e-8,1.30238e-9,1,-6.81755e-8,7.37954e-10,1,-3.86295e-8,0,0,-1,-4.89062e-8,1,1.26779e-7,-3.25203e-8,1,-1.44819e-7,5.52009e-8,1,-2.77471e-7,3.55379e-8,1,-1.58258e-7,1.00718e-8,1,-8.66501e-8,-1,0,8.90096e-7,0.164399,0,-0.986394,-1,0,0.00000404366,-1,-7.45058e-8,0.00000197148,-1,0,0.00000404366,-1,0,0.00000212159,-1,-0.00000725491,0.00000196913,-1,-6.29948e-7,0.00000254466,6.23449e-9,-1,5.78887e-8,-3.60623e-8,-1,-7.18147e-8,5.57143e-9,-1,5.67126e-8,0,-1,4.61659e-8,0,-1,4.46261e-8,-8.58615e-9,-1,-2.80725e-8,-8.31239e-9,-1,2.0148e-8,3.6239e-8,-1,2.08854e-7,3.66859e-9,-1,5.30667e-8,-1.40984e-9,-1,1.91125e-8,0,-1,4.46261e-8,-7.83437e-10,-1,3.10934e-8,4.97207e-9,-1,6.05117e-8,-4.27635e-10,-1,4.26439e-8,9.50922e-11,-1,4.47299e-8,-5.22234e-10,-1,4.16137e-8,0.359908,0,0.932988,0.359908,0,0.932988,0.362687,0.00142386,0.93191,0.367494,0.0800054,0.926578,0,-1,0,0.122883,0,0.992421,0.0251883,3.05897e-7,-0.999683,0.0986573,0.115616,0.988382,0.100041,0.994002,0.0441826,9.28953e-8,-1,4.13683e-7,-0.31368,0,-0.949529,-0.262145,0.184234,-0.947279,-4.43657e-8,-1,-1.34298e-7,-0.261001,0.170361,-0.950187,0.359895,0,-0.932993,0,-1,5.50271e-8,5.29819e-9,-1,3.17891e-8,1.30238e-9,-1,6.81755e-8,7.37954e-10,-1,3.86295e-8,0,-1,0,-4.89062e-8,-1,-1.26779e-7,-3.25203e-8,-1,1.44819e-7,5.52009e-8,-1,2.77471e-7,3.55379e-8,-1,1.58258e-7,1.00718e-8,-1,8.66501e-8,0,1,-4.37114e-8,-1,7.45058e-8,-0.00000197148,-1,0,-0.00000212159,-1,0.00000725491,-0.00000196913,-1,6.29948e-7,-0.00000254466,0,-1,4.61659e-8,3.2713e-8,-1,-2.36681e-7,1.13053e-8,-1,2.67773e-8,-9.55496e-10,-1,4.56694e-8,1.07257e-8,-1,2.78054e-8,0,-1,4.08461e-8,-4.75406e-8,-1,1.81256e-7,-1.02314e-8,-1,9.24939e-8,-1.11361e-8,-1,7.92405e-8,2.61151e-9,-1,3.54028e-8,1.46271e-9,-1,4.09602e-8,-1.86816e-8,-1,1.07666e-7,6.24947e-9,-1,2.78302e-8,3.06355e-9,-1,3.59368e-8,4.70801e-9,-1,2.72164e-8,0,1,-4.341e-8,0.359908,0,-0.932988,0.361119,0.0928731,-0.927883,0.368672,0.00449755,-0.929549,0,-1,0,0.122883,0,-0.992421,0,0,-1,0,-1,4.98564e-7,0.0251882,-1.87666e-9,0.999683,0.0986573,0.115616,-0.988382,0.100041,0.994002,-0.0441822,-0.31368,0,0.949529,-2.81545e-9,1,-2.88257e-8,-0.23575,-0.242095,0.941176,-0.278513,0.26558,0.922983,0.359895,0,0.932993,-1.05964e-8,-1,6.35783e-8,2.70517e-8,-1,-1.08418e-7,0,-1,7.94729e-8,6.00157e-9,-1,1.50162e-8,4.89062e-8,-1,-1.26779e-7,2.65849e-8,-1,6.89187e-8,1.43347e-7,-1,-5.17995e-7,6.2216e-8,-1,-1.74945e-7,4.36167e-15,1,-4.37114e-8,-1,0,0.00000197148,-1,7.45058e-8,0.00000217163,-1,-2.27019e-7,0.00000196913,-1,0.00000524219,0.00000254466],\"faces\":[33,36,0,1,39,0,0,0,0,32,40,42,2,1,1,1,32,3,4,5,2,2,2,32,40,2,3,3,3,3,32,16,0,36,4,4,4,32,40,3,5,5,5,5,32,15,16,36,6,6,6,32,40,5,6,7,7,7,32,14,15,36,8,8,8,32,40,6,7,9,9,9,32,13,14,36,10,10,10,32,40,7,8,11,11,11,32,12,13,36,12,12,12,32,11,12,36,13,13,13,32,9,10,11,14,14,14,32,8,9,11,15,15,15,32,40,8,11,16,16,16,32,11,36,40,17,17,17,32,58,1,0,18,18,18,32,16,30,35,19,19,19,32,164,58,0,20,20,20,32,16,35,113,21,21,21,32,164,0,16,22,22,22,32,16,113,164,23,23,23,33,41,39,1,58,24,24,24,24,33,2,42,59,17,25,25,25,25,33,2,17,18,3,26,26,26,26,33,4,3,18,19,27,27,27,27,32,21,22,23,28,28,28,32,23,34,8,29,29,29,32,7,6,5,30,30,30,32,23,8,7,29,29,29,32,5,21,23,31,31,31,32,23,7,5,32,32,32,32,105,9,8,33,33,33,32,8,34,33,34,34,34,32,116,105,8,35,35,35,32,8,33,116,36,36,36,32,10,9,105,37,37,37,32,105,113,35,38,38,38,32,35,24,10,39,39,39,32,105,35,10,40,40,40,33,11,10,24,25,41,41,41,41,33,25,26,12,11,42,42,42,42,32,26,27,28,43,43,43,32,28,29,15,44,44,44,32,15,14,13,45,45,45,32,13,12,26,46,46,46,32,26,28,15,47,47,47,32,15,13,26,48,48,48,33,16,15,29,30,49,49,49,49,32,74,31,32,50,50,50,32,32,19,18,24,24,24,32,18,17,59,51,51,51,32,59,74,32,52,52,52,32,32,18,59,53,53,53,33,116,33,20,102,54,54,54,54,32,20,33,34,43,43,43,32,34,23,22,43,43,43,32,22,21,20,55,55,55,32,34,22,20,55,55,55,32,26,25,24,24,24,24,32,24,35,30,56,56,56,32,30,29,28,57,57,57,32,27,26,24,43,43,43,32,30,28,27,58,58,58,32,27,24,30,59,59,59,33,174,122,31,74,60,60,60,60,33,32,31,122,119,61,61,61,61,32,4,19,32,62,62,62,32,102,20,21,63,63,63,32,102,21,5,64,64,64,32,4,32,119,65,65,65,32,102,5,4,66,66,66,32,119,102,4,67,67,67,33,36,39,38,37,68,68,68,68,33,40,41,39,36,69,69,69,69,32,42,40,36,70,70,70,32,36,37,57,71,71,71,32,56,55,54,72,72,72,32,36,57,56,73,73,73,32,43,42,36,74,74,74,32,46,45,44,2,2,2,32,44,43,36,75,75,75,32,36,56,54,76,76,76,32,54,53,52,77,77,77,32,52,51,50,78,78,78,32,50,49,48,79,79,79,32,47,46,44,80,80,80,32,50,48,47,81,81,81,32,36,54,52,82,82,82,32,52,50,47,83,83,83,32,47,44,36,84,84,84,32,36,52,47,85,85,85,32,37,38,58,86,86,86,32,163,79,73,87,87,87,32,163,73,57,88,88,88,32,37,58,164,89,89,89,32,163,57,37,90,90,90,32,164,163,37,91,91,91,33,41,58,38,39,92,92,92,92,33,43,60,59,42,93,93,93,93,33,43,44,61,60,94,94,94,94,33,45,62,61,44,95,95,95,95,32,65,64,46,96,96,96,32,46,47,48,43,43,43,32,66,65,46,97,97,97,32,49,78,66,98,98,98,32,66,46,48,99,99,99,32,48,49,66,98,98,98,32,49,50,155,100,100,100,32,168,77,78,101,101,101,32,49,155,168,102,102,102,32,168,78,49,103,103,103,32,155,50,51,104,104,104,32,51,67,79,105,105,105,32,79,163,155,106,106,106,32,51,79,155,107,107,107,33,52,68,67,51,108,108,108,108,33,68,52,53,69,109,109,109,109,32,71,70,69,110,110,110,32,69,53,54,111,111,111,32,55,56,72,112,112,112,32,69,54,55,113,113,113,32,72,71,69,114,114,114,32,69,55,72,115,115,115,33,57,73,72,56,116,116,116,116,32,74,59,60,74,74,74,32,60,61,62,117,117,117,32,76,75,74,118,118,118,32,60,62,76,119,119,119,32,74,60,76,120,120,120,33,168,152,63,77,121,121,121,121,32,78,77,63,43,43,43,32,63,64,65,43,43,43,32,65,66,78,43,43,43,32,63,65,78,43,43,43,32,71,72,73,43,43,43,32,73,79,67,122,122,122,32,67,68,69,123,123,123,32,70,71,73,124,124,124,32,67,69,70,125,125,125,32,73,67,70,126,126,126,33,174,74,75,175,127,127,127,127,33,76,171,175,75,128,128,128,128,32,76,62,45,129,129,129,32,46,64,63,130,130,130,32,171,76,45,131,131,131,32,46,63,152,132,132,132,32,171,45,46,133,133,133,32,46,152,171,134,134,134,33,123,126,81,80,0,0,0,0,32,129,127,123,70,70,70,32,123,80,96,135,135,135,32,95,94,93,136,136,136,32,123,96,95,137,137,137,32,82,129,123,138,138,138,32,85,84,83,139,139,139,32,83,82,123,140,140,140,32,123,95,93,141,141,141,32,93,92,91,142,142,142,32,91,90,89,143,143,143,32,89,88,87,144,144,144,32,86,85,83,145,145,145,32,89,87,86,146,146,146,32,123,93,91,147,147,147,32,91,89,86,148,148,148,32,86,83,123,149,149,149,32,123,91,86,150,150,150,32,80,81,145,18,18,18,32,113,121,112,151,151,151,32,113,112,96,152,152,152,32,80,145,164,20,20,20,32,113,96,80,153,153,153,32,164,113,80,154,154,154,33,128,145,81,126,155,155,155,155,33,82,97,146,129,25,25,25,25,33,82,83,98,97,156,156,156,156,33,84,99,98,83,27,27,27,27,32,103,101,85,121,121,121,32,85,86,87,28,28,28,32,104,103,85,157,157,157,32,88,118,104,29,29,29,32,104,85,87,32,32,32,32,87,88,104,29,29,29,32,88,89,105,33,33,33,32,116,117,118,36,36,36,32,88,105,116,158,158,158,32,116,118,88,34,34,34,32,105,89,90,37,37,37,32,90,106,121,39,39,39,32,121,113,105,38,38,38,32,90,121,105,159,159,159,33,91,107,106,90,41,41,41,41,33,107,91,92,108,42,42,42,42,32,110,109,108,160,160,160,32,108,92,93,46,46,46,32,94,95,111,161,161,161,32,108,93,94,162,162,162,32,111,110,108,163,163,163,32,108,94,111,164,164,164,33,96,112,111,95,165,165,165,165,32,165,146,97,138,138,138,32,97,98,99,166,166,166,32,115,114,165,167,167,167,32,97,99,115,168,168,168,32,165,97,115,169,169,169,33,116,102,100,117,96,96,96,96,32,118,117,100,170,170,170,32,100,101,103,170,170,170,32,103,104,118,170,170,170,32,100,103,118,28,28,28,32,110,111,112,28,28,28,32,112,121,106,171,171,171,32,106,107,108,172,172,172,32,109,110,112,173,173,173,32,106,108,109,174,174,174,32,112,106,109,175,175,175,33,174,165,114,122,60,60,60,60,33,115,119,122,114,61,61,61,61,32,120,113,105,176,176,176,32,115,99,84,62,62,62,32,85,101,100,177,177,177,32,119,115,84,65,65,65,32,85,100,102,178,178,178,32,119,84,85,179,179,179,32,85,102,119,180,180,180,33,123,124,125,126,68,68,68,68,33,127,123,126,128,69,69,69,69,32,127,129,130,181,181,181,32,131,132,133,139,139,139,32,127,130,131,182,182,182,32,144,124,123,183,183,183,32,127,131,133,184,184,184,32,143,144,123,185,185,185,32,127,133,134,186,186,186,32,142,143,123,187,187,187,32,127,134,135,188,188,188,32,141,142,123,189,189,189,32,127,135,136,190,190,190,32,140,141,123,191,191,191,32,139,140,123,192,192,192,32,137,138,139,193,193,193,32,136,137,139,194,194,194,32,127,136,139,195,195,195,32,139,123,127,196,196,196,32,145,125,124,86,86,86,32,144,162,173,87,87,87,32,164,145,124,89,89,89,32,144,173,163,197,197,197,32,164,124,144,198,198,198,32,144,163,164,199,199,199,33,128,126,125,145,200,200,200,200,33,130,129,146,147,93,93,93,93,33,130,147,148,131,201,201,201,201,33,132,131,148,149,202,202,202,202,32,151,153,154,43,43,43,32,154,170,136,98,98,98,32,135,134,133,203,203,203,32,154,136,135,98,98,98,32,133,151,154,204,204,204,32,154,135,133,99,99,99,32,155,137,136,100,100,100,32,136,170,169,103,103,103,32,168,155,136,205,205,205,32,136,169,168,101,101,101,32,138,137,155,104,104,104,32,155,163,173,106,106,106,32,173,156,138,105,105,105,32,155,173,138,206,206,206,33,139,138,156,157,108,108,108,108,33,157,158,140,139,109,109,109,109,32,158,159,160,170,170,170,32,160,161,143,207,207,207,32,143,142,141,208,208,208,32,141,140,158,111,111,111,32,158,160,143,209,209,209,32,143,141,158,210,210,210,33,144,143,161,162,211,211,211,211,32,165,166,167,212,212,212,32,167,149,148,200,200,200,32,148,147,146,213,213,213,32,146,165,167,214,214,214,32,167,148,146,215,215,215,33,168,169,150,152,202,202,202,202,32,150,169,170,28,28,28,32,170,154,153,170,170,170,32,153,151,150,170,170,170,32,170,153,150,170,170,170,32,158,157,156,200,200,200,32,156,173,162,216,216,216,32,162,161,160,217,217,217,32,159,158,156,170,170,170,32,162,160,159,218,218,218,32,159,156,162,219,219,219,33,174,175,166,165,127,127,127,127,33,167,166,175,171,128,128,128,128,32,172,155,163,220,220,220,32,132,149,167,129,129,129,32,152,150,151,221,221,221,32,152,151,133,222,222,222,32,132,167,171,131,131,131,32,152,133,132,223,223,223,32,171,152,132,224,224,224],\"vertices\":[90.5878,1,0.820373,90.5878,4,0.820373,43.9918,1,5.16438,8.99998,1,9.49713,0.249979,1,9.49713,0.249964,1,17.511,0.25,1,17.511,9.73972,1,17.7501,17.1888,1,18.2996,34.4812,1,16.4565,45.2417,1,14.5894,41.4173,1,13.7306,45.553,1,13.013,56.7352,1,10.502,67.7808,1,7.4453,77.4427,1,4.25346,79.6142,1,5.09113,43.9918,4,5.16438,8.99998,4,9.49713,0.249979,4,9.49713,0.24996,4,19,0.249963,4,17.511,0.25,4,17.511,9.73972,4,17.7501,45.2417,4,14.5894,41.4173,4,13.7306,45.553,4,13.013,56.7352,4,10.502,67.7808,4,7.4453,77.4427,4,4.25346,79.6142,4,5.09113,-8.75001,4,7.5,0.249993,4,6,8.99996,4,19,17.1888,4,18.2996,79.1685,4,5.26306,88.6447,1,-4.37114e-8,90.5878,1,-0.820374,90.5878,4,-0.820374,88.6447,4,-1.74846e-7,88.6447,1,-4.37114e-8,88.6447,4,-1.74846e-7,64.6898,1,-4.37114e-8,43.9918,1,-5.16438,8.99998,1,-9.49713,0.249979,1,-9.49713,0.249964,0.999999,-17.511,0.25,0.999999,-17.511,9.73972,0.999999,-17.7501,17.1888,0.999999,-18.2996,34.4812,0.999999,-16.4565,45.2417,0.999999,-14.5894,41.4173,0.999999,-13.7306,45.553,0.999999,-13.013,56.7352,1,-10.502,67.7808,1,-7.4453,77.4427,1,-4.25346,79.6142,1,-5.09113,92.4385,4,-1.74846e-7,64.6898,4,-1.74846e-7,43.9918,4,-5.16438,8.99998,4,-9.49713,0.249979,4,-9.49713,0.24996,4,-19,0.249963,4,-17.511,0.25,4,-17.511,9.73972,4,-17.7501,45.2417,4,-14.5894,41.4173,4,-13.7306,45.553,4,-13.013,56.7352,4,-10.502,67.7808,4,-7.4453,77.4427,4,-4.25346,79.6142,4,-5.09113,-8.75,4,-1.74846e-7,-8.75001,4,-7.5,0.249993,4,-6,8.99996,4,-19,17.1888,4,-18.2996,79.1685,4,-5.26306,90.5878,-1,0.820374,90.5878,-4,0.820374,43.9918,-1,5.16438,8.99998,-1,9.49713,0.249979,-1,9.49713,0.249964,-0.999999,17.511,0.25,-0.999999,17.511,9.73972,-0.999999,17.7501,17.1888,-0.999999,18.2996,34.4812,-0.999999,16.4565,45.2417,-0.999999,14.5894,41.4173,-0.999999,13.7306,45.553,-0.999999,13.013,56.7352,-1,10.502,67.7808,-1,7.4453,77.4427,-1,4.25346,79.6142,-1,5.09113,43.9918,-4,5.16438,8.99998,-4,9.49713,0.249979,-4,9.49713,0.24996,-4,19,0.249963,-4,17.511,0.24996,8.30516e-7,19,0.25,-4,17.511,9.73972,-4,17.7501,34.4812,7.19338e-7,16.4565,45.2417,-4,14.5894,41.4173,-4,13.7306,45.553,-4,13.013,56.7352,-4,10.502,67.7808,-4,7.4453,77.4427,-4,4.25346,79.6142,-4,5.09113,79.1685,2.30056e-7,5.26306,-8.75001,-4,7.5,0.249993,-4,6,8.99996,8.30516e-7,19,8.99996,-4,19,17.1888,-4,18.2996,0.249993,2.62268e-7,6,57.0998,5.22678e-7,11.9575,79.1685,-4,5.26306,-8.75001,3.27835e-7,7.5,88.6447,-1,4.37114e-8,90.5878,-1,-0.820373,90.5878,-4,-0.820373,88.6447,-4,1.74846e-7,88.6447,-1,4.37114e-8,88.6447,-4,1.74846e-7,64.6898,-1,4.37114e-8,43.9918,-1,-5.16438,8.99998,-1,-9.49713,0.249979,-1,-9.49713,0.249964,-1,-17.511,0.25,-1,-17.511,9.73972,-1,-17.7501,17.1888,-1,-18.2996,34.4812,-1,-16.4565,45.2417,-1,-14.5894,41.4173,-1,-13.7306,45.553,-1,-13.013,56.7352,-1,-10.502,67.7808,-1,-7.4453,77.4427,-1,-4.25346,79.6142,-1,-5.09113,92.4385,-4,1.74846e-7,64.6898,-4,1.74846e-7,43.9918,-4,-5.16438,8.99998,-4,-9.49713,0.249979,-4,-9.49713,0.24996,-4,-19,0.249963,-4,-17.511,0.24996,-8.30516e-7,-19,0.25,-4,-17.511,9.73972,-4,-17.7501,34.4812,-7.19338e-7,-16.4565,45.2417,-4,-14.5894,41.4173,-4,-13.7306,45.553,-4,-13.013,56.7352,-4,-10.502,67.7808,-4,-7.4453,77.4427,-4,-4.25346,79.6142,-4,-5.09113,79.1685,-2.30056e-7,-5.26306,92.4385,0,0,-8.75,-4,1.74846e-7,-8.75001,-4,-7.5,0.249993,-4,-6,8.99996,-8.30516e-7,-19,8.99996,-4,-19,17.1888,-4,-18.2996,0.249993,-2.62268e-7,-6,57.0998,-5.22678e-7,-11.9575,79.1685,-4,-5.26306,-8.75,0,0,-8.75001,-3.27835e-7,-7.5],\"metadata\":{\"generator\":\"io_three\",\"normals\":225,\"uvs\":0,\"vertices\":176,\"version\":3,\"faces\":304,\"type\":\"Geometry\"}},\"turnout_R_b\":{\"uvs\":[],\"vertices\":[215.75,1,-17.5,125.656,1,-17.5,120.814,0.999999,-14.4335,112.105,1,-9.50002,215.75,1,-9.50002,215.75,4,-19,215.75,4,-17.5,215.75,4,-9.50002,215.75,4,-6.50003,125.656,4,-17.5,112.105,4,-9.5,128.025,4,-19,110.778,4,-8.74826,100.475,4,-3.5623,92.4385,4,-0.000017945,206.75,4,-8.00003,206.75,4,8.00001,89.9301,4,1.1119,79.1685,4,5.26304,68.2164,4,8.88112,65.9801,4,9.49998,215.75,4,9.49998,215.75,4,6.5,215.75,0.999999,9.49998,65.98,1,9.49998,215.75,4,19,215.75,0.999999,17.5,215.75,4,17.5,57.0998,1,11.9575,45.8457,1,14.4846,34.4812,1,16.4565,26.0212,1,17.5,26.0212,4,17.5,23.0336,4,17.8684,11.5305,4,18.7169,0.25,4,19,89.9301,1,1.1119,100.475,1,-3.5623,26.0311,0.738152,17.4987,123.372,0.999993,-16.0534,71.1734,4,7.90423,14.6363,3.99999,18.4878,215.75,-0.999999,-17.5,125.656,-0.999999,-17.5,120.814,-0.999998,-14.4335,112.105,-0.999999,-9.50002,215.75,-1,-9.50002,215.75,-4,-19,215.75,-4,-17.5,215.75,-4,-9.50002,215.75,-4,-6.50003,215.75,2.84125e-7,-6.50003,215.75,8.30517e-7,-19,125.656,-4,-17.5,112.105,-4,-9.5,128.025,8.30517e-7,-19,128.025,-4,-19,110.778,-4,-8.74826,100.475,-4,-3.5623,92.4385,-4,-0.0000182947,206.75,-4,-8.00003,206.75,3.49692e-7,-8.00003,206.75,-4,8.00001,89.9301,-4,1.1119,79.1685,-4,5.26304,68.2164,-4,8.88112,65.9801,-4,9.49998,215.75,-4,9.49998,215.75,-4,6.5,215.75,-2.84124e-7,6.5,206.75,-3.49691e-7,8.00001,215.75,-1,9.49998,65.98,-1,9.49998,215.75,-4,19,215.75,-8.30516e-7,19,215.75,-1,17.5,215.75,-4,17.5,57.0998,-1,11.9575,45.8457,-1,14.4846,34.4812,-1,16.4565,26.0212,-1,17.5,26.0212,-4,17.5,23.0336,-4,17.8684,11.5305,-4,18.7169,0.25,-4,19,0.25,-8.30515e-7,19,79.1685,-2.30055e-7,5.26304,89.9301,-1,1.1119,89.9301,-4.86029e-8,1.1119,68.2164,-3.88206e-7,8.88112,100.475,-0.999999,-3.5623,100.475,1.55713e-7,-3.5623,57.0998,-5.22677e-7,11.9575,110.778,3.82399e-7,-8.74826,45.8457,-6.33143e-7,14.4846,120.814,6.3091e-7,-14.4335,34.4812,-7.19338e-7,16.4565,23.0336,-7.81054e-7,17.8684,11.5305,-8.18144e-7,18.7169,26.0311,-0.738154,17.4987,59.9902,-4.87714e-7,11.1576,123.372,-0.999992,-16.0534,71.1734,-4,7.90423,14.6363,-3.99999,18.4878],\"normals\":[-5.29267e-9,1,4.47035e-8,-0.2173,0.913796,-0.343158,-4.02558e-9,1,-1.52085e-7,-2.68937e-8,1,2.8797e-7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1.90536e-7,0,1,-8.74127e-8,0.00000301997,-1,0,0,-1,-1.07264e-8,1,-8.46932e-9,-0.266718,0.000006783,-0.963775,-2.98023e-8,1,-5.96046e-8,-0.266712,0,-0.963776,-0.26671,0,-0.963777,-0.266712,-0.00000409272,-0.963776,-0.164398,0,0.986394,-1.32455e-8,1,7.94732e-8,-9.20156e-9,1,-0.00000128487,-0.0019304,0.999989,-0.00435488,3.33992e-10,1,4.66374e-8,8.85592e-9,1,2.12082e-7,2.35142e-9,1,5.6312e-8,1.32456e-8,1,7.94732e-8,2.83663e-10,1,2.98023e-8,-0.0110048,0.999384,-0.0333122,1.35203e-8,1,-1.94687e-7,6.3676e-9,1,1.20742e-7,6.1191e-9,1,1.50316e-7,5.2845e-9,1,1.90953e-8,-0.1644,0,-0.986394,0,0,1,2.51326e-9,1,-1.49011e-8,3.1838e-9,1,-3.52311e-7,1.00661e-8,1,9.19979e-8,6.69923e-8,1,0.0000015143,2.46268e-9,1,-1.67169e-7,4.4254e-9,1,0,5.02689e-9,1,-0.00000190032,-0.0441647,0.799732,-0.59873,3.04696e-8,1,0.00000374174,8.89046e-9,1,1.20526e-7,-1.68165e-7,0,1,2.0106e-7,0,-1,-0.492902,2.41203e-7,-0.870085,-0.492896,0,-0.870088,-0.492902,0,-0.870085,-0.492897,-0.00000959098,-0.870088,-0.219099,0,-0.975703,-0.40524,0,-0.91421,-0.405244,3.63274e-8,-0.914209,-0.405239,7.2655e-8,-0.914211,-0.40524,0,-0.91421,-0.40524,-0.00000391356,-0.91421,-0.313679,0,-0.949529,-0.313678,0,-0.949529,-0.313682,-0.00000968444,-0.949528,-0.449608,0,-0.893226,-0.535003,0,-0.84485,-0.534997,0,-0.844854,-0.534998,-0.0000122842,-0.844853,-0.535003,0,-0.84485,-0.534989,0.0000456737,-0.844859,-0.025081,0,-0.999685,-0.0735641,0,-0.99729,-0.0735679,0,-0.99729,-0.0735627,-0.00000402435,-0.997291,-0.170959,0,-0.985278,-0.359892,3.70739e-8,-0.932994,-0.359892,0,-0.932994,-0.359892,0,-0.932994,-0.12241,0,-0.99248,-0.122407,0,-0.99248,-0.12241,0,-0.99248,-0.122408,-0.00000768935,-0.99248,0.122408,0.00000745465,0.99248,-5.29268e-9,-1,-4.47035e-8,-4.60067e-9,-1,-2.49753e-7,-0.217972,-0.913237,-0.344219,-2.93152e-8,-1,2.25833e-7,1,0,0,1,0,0,-8.74127e-8,-0.00000301997,-1,0,0,-1,-1.07264e-8,-1,-8.46932e-9,-0.266712,0.000003657,-0.963776,-0.266718,-0.000006783,-0.963775,-0.266712,0.00000402235,-0.963776,-1.32456e-8,-1,-7.94732e-8,6.3676e-9,-1,2.3009e-8,-0.0104337,-0.999447,-0.0315836,0.0019304,-0.999989,0.00435488,6.92897e-9,-1,-1.10819e-7,9.82766e-9,-1,-2.0426e-7,1.13449e-8,-1,-2.27019e-7,8.5317e-10,-1,-4.90826e-8,1.32455e-8,-1,-7.94732e-8,-1.24445e-9,-1,-2.98023e-8,-9.20156e-9,-1,-0.00000128487,-2.09339e-9,-1,-5.01327e-8,-1.1894e-9,-1,-1.66083e-7,0,0,1,2.51328e-9,-1,-9.68575e-8,6.85833e-8,-1,0.00000147007,2.78582e-9,-1,-4.26512e-7,7.2688e-10,-1,-2.9808e-7,9.30355e-9,-1,-5.74008e-9,4.4254e-9,-1,0,-0.0456476,-0.784195,-0.618833,3.85846e-8,-1,0.00000490762,5.02702e-9,-1,-0.00000254734,1.01605e-8,-1,1.37744e-7,-1.68165e-7,0,1,2.0106e-7,0,-1,-0.492902,-2.41203e-7,-0.870085,-0.492897,0,-0.870088,-0.492896,0.0000110524,-0.870088,-0.40524,0,-0.91421,-0.405239,5.44912e-8,-0.914211,-0.40524,0.00000372817,-0.91421,-0.313682,0.00000968444,-0.949528,-1,0,0,-0.534998,0,-0.844853,-0.535003,0,-0.84485,-0.534989,0.0000318312,-0.844859,-0.535003,0,-0.84485,-0.534997,-0.0000201114,-0.844854,-0.0735627,0.00000402435,-0.997291,-0.359892,0,-0.932994,-0.12241,0,-0.99248,-0.122408,0,-0.99248,-0.122407,0.0000104048,-0.99248,0.122408,-0.00000745465,0.99248],\"metadata\":{\"generator\":\"io_three\",\"normals\":135,\"uvs\":0,\"vertices\":104,\"version\":3,\"faces\":178,\"type\":\"Geometry\"},\"faces\":[32,4,0,1,0,0,0,32,1,39,2,1,1,1,32,2,3,4,2,2,2,32,1,2,4,3,3,3,32,52,5,6,4,4,4,32,52,6,0,5,5,5,32,7,8,51,6,6,6,32,52,0,4,7,7,7,32,4,7,51,7,7,7,32,4,51,52,8,8,8,33,1,0,6,9,9,9,9,9,33,4,3,10,7,10,10,10,10,33,52,55,11,5,11,11,11,11,33,5,11,9,6,12,12,12,12,32,24,20,19,13,13,13,32,89,100,92,14,14,14,32,92,28,24,15,15,15,32,24,19,89,16,16,16,32,24,89,92,17,17,17,33,51,8,15,61,18,18,18,18,32,15,8,7,19,19,19,32,7,10,12,20,20,20,32,13,14,17,21,21,21,32,7,12,13,22,22,22,32,15,7,13,23,23,23,32,15,13,17,24,24,24,32,21,22,16,25,25,25,32,16,15,17,26,26,26,32,18,40,19,27,27,27,32,16,17,18,28,28,28,32,20,21,16,29,29,29,32,16,18,19,30,30,30,32,16,19,20,31,31,31,33,69,70,16,22,32,32,32,32,33,23,21,20,24,33,33,33,33,32,27,25,74,5,5,5,32,69,22,21,4,4,4,32,69,21,23,5,5,5,32,26,27,74,7,7,7,32,69,23,26,7,7,7,32,74,69,26,7,7,7,32,31,26,23,34,34,34,32,23,24,28,35,35,35,32,23,28,29,36,36,36,32,30,31,23,37,37,37,32,23,29,30,38,38,38,32,35,25,27,39,39,39,32,27,32,33,40,40,40,32,33,41,34,41,41,41,32,34,35,27,42,42,42,32,27,33,34,43,43,43,33,74,25,35,85,44,44,44,44,33,32,27,26,31,45,45,45,45,32,12,10,3,46,46,46,32,3,2,95,47,47,47,32,93,12,3,48,48,48,32,3,95,93,49,49,49,33,28,92,94,29,50,50,50,50,32,91,88,36,51,51,51,32,36,17,14,52,52,52,32,14,13,37,53,53,53,32,37,91,36,54,54,54,32,36,14,37,55,55,55,32,86,89,19,56,56,56,32,40,18,86,57,57,57,32,19,40,86,58,58,58,32,91,37,13,7,7,7,32,13,12,93,59,59,59,32,13,93,91,59,59,59,33,15,16,70,61,5,5,5,5,32,1,9,11,60,60,60,32,55,95,2,61,61,61,32,55,2,39,62,62,62,32,1,11,55,63,63,63,32,1,55,39,64,64,64,33,98,85,35,34,65,65,65,65,32,33,97,98,66,66,66,32,98,34,41,67,67,67,32,98,41,33,68,68,68,33,29,94,96,30,69,69,69,69,32,18,17,36,70,70,70,32,36,88,86,71,71,71,32,36,86,18,72,72,72,32,33,32,31,73,73,73,32,31,30,96,74,74,74,32,97,33,31,75,75,75,32,31,96,97,76,76,76,33,30,31,38,96,77,77,77,77,32,19,24,20,13,13,13,32,43,42,46,78,78,78,32,46,45,44,79,79,79,32,44,101,43,80,80,80,32,46,44,43,81,81,81,32,48,47,52,82,82,82,32,51,50,49,82,82,82,32,51,49,46,83,83,83,32,42,48,52,83,83,83,32,51,46,42,83,83,83,32,52,51,42,5,5,5,33,48,42,43,53,9,9,9,9,33,46,49,54,45,84,84,84,84,33,52,47,56,55,85,85,85,85,33,47,48,53,56,86,86,86,86,32,72,77,92,15,15,15,32,72,92,100,87,87,87,32,65,66,72,88,88,88,32,72,100,89,89,89,89,32,72,89,65,16,16,16,33,51,61,60,50,18,18,18,18,32,62,68,67,90,90,90,32,67,66,65,91,91,91,32,65,102,64,92,92,92,32,63,59,58,93,93,93,32,67,65,64,94,94,94,32,67,64,63,95,95,95,32,62,67,63,96,96,96,32,62,63,58,97,97,97,32,49,50,60,98,98,98,32,60,62,58,99,99,99,32,57,54,49,100,100,100,32,60,58,57,101,101,101,32,57,49,60,102,102,102,33,69,68,62,70,32,32,32,32,33,71,72,66,67,103,103,103,103,32,74,73,76,7,7,7,32,74,76,75,83,83,83,32,67,68,69,4,4,4,32,74,75,71,83,83,83,32,71,67,69,83,83,83,32,71,69,74,7,7,7,32,71,75,80,104,104,104,32,71,80,79,105,105,105,32,77,72,71,106,106,106,32,71,79,78,107,107,107,32,78,77,71,108,108,108,32,76,73,84,109,109,109,32,83,103,82,110,110,110,32,76,84,83,111,111,111,32,82,81,76,112,112,112,32,83,82,76,113,113,113,33,74,85,84,73,114,114,114,114,33,81,80,75,76,115,115,115,115,32,45,54,57,116,116,116,32,93,95,44,117,117,117,32,45,57,93,48,48,48,32,93,44,45,118,118,118,33,77,78,94,92,50,50,50,50,32,87,88,91,119,119,119,32,91,90,58,7,7,7,32,59,63,87,52,52,52,32,91,58,59,120,120,120,32,91,59,87,121,121,121,32,65,89,86,56,56,56,32,86,64,102,57,57,57,32,86,102,65,122,122,122,32,58,90,91,123,123,123,32,91,93,57,59,59,59,32,91,57,58,59,59,59,33,60,61,70,62,7,7,7,7,32,101,44,95,124,124,124,32,55,56,53,125,125,125,32,43,101,95,126,126,126,32,55,53,43,127,127,127,32,43,95,55,128,128,128,33,98,83,84,85,65,65,65,65,32,98,97,82,66,66,66,32,103,83,98,67,67,67,32,82,103,98,129,129,129,33,78,79,96,94,69,69,69,69,32,87,63,64,70,70,70,32,64,86,88,72,72,72,32,64,88,87,130,130,130,32,80,81,82,131,131,131,32,97,96,79,132,132,132,32,80,82,97,75,75,75,32,97,79,80,133,133,133,33,79,96,99,80,134,134,134,134,32,65,66,72,88,88,88]},\"turnout_L_a\":{\"normals\":[-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534996,0,-0.844855,-1.12262e-14,1,-4.98865e-8,-2.01378e-9,1,-4.34445e-8,0,1,-4.98865e-8,-1.93861e-9,1,-4.48604e-8,1.80506e-10,1,-4.56916e-8,-2.06171e-9,1,-4.56455e-8,1.37714e-10,1,-4.43967e-8,-9.42067e-10,1,-4.02524e-8,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,3.37906e-9,1,-4.12318e-8,1.35172e-9,1,-4.13479e-8,-6.78548e-10,1,-4.13645e-8,2.51045e-9,1,-4.42373e-8,-4.72985e-9,1,-4.10987e-8,2.75902e-9,1,-4.29512e-8,6.48216e-10,1,-4.30349e-8,-1.62677e-9,1,-4.77945e-8,-3.05415e-9,1,-4.33853e-8,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.689069,0,-0.724696,0.575808,0,0.817585,0.615229,0,0.788348,0.65317,0,0.757211,0.689147,-5.07059e-7,0.724622,1.53516e-8,1,-1.46159e-8,-0.689144,0,-0.724624,-0.35989,0,-0.932995,-0.405242,0,-0.914209,-0.449607,0,-0.893227,-0.492901,0,-0.870086,-0.534994,0,-0.844856,2.3806e-8,1,-6.94077e-8,1.69538e-8,1,-1.19401e-8,-2.43728e-8,1,-8.17886e-8,-2.83562e-8,1,-8.04939e-8,0.575808,0,0.817585,0.615229,0,0.788348,0.653171,0,0.757211,0.689147,0,0.724622,-2.62771e-9,1,-8.01815e-8,-1.04234e-8,1,-5.2888e-8,9.81558e-10,1,-4.77594e-8,1.62811e-9,1,-4.48518e-8,0,1,-4.8034e-8,7.13915e-9,1,-5.39129e-8,-1.14e-9,1,-4.38361e-8,-3.28962e-9,1,-4.37273e-8,7.29344e-9,1,-4.5485e-8,5.0529e-9,1,-4.57882e-8,-3.75655e-8,1,-7.45052e-8,-9.6079e-9,1,-4.20829e-8,-9.04154e-9,1,-1.79325e-8,1.15993e-8,1,-1.08014e-7,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,-1.71421e-8,1,-7.85686e-8,2.24578e-8,1,-9.95472e-9,2.19424e-8,1,-1.10446e-8,-2.84851e-8,1,-7.52021e-8,-6.42811e-8,1,-1.47428e-7,-7.14385e-8,1,-1.44097e-7,-7.84226e-8,1,-1.40419e-7,-2.40076e-8,1,-8.42456e-8,1.8261e-8,1,-1.73858e-8,-0.405242,0,-0.914209,-0.449607,0,-0.893226,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,1.0035e-8,1,-4.61608e-8,0.581237,0,0.813734,-0.813734,0,-0.581237,0.707109,0,-0.707105,0.707107,0,-0.707107,0.707108,0,-0.707106,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707107,-0.0000216099,-0.707107,0.707109,0.0000081038,-0.707105,0.707106,0.0000431584,-0.707108,-0.00260037,0.999993,0.00260032,0.707108,-0.00000802852,-0.707105,-0.313679,0,-0.949529,0,1,0,2.65033e-9,1,-4.04452e-8,-1.69439e-9,1,-4.35346e-8,5.66244e-10,1,-4.15627e-8,-1.60987e-10,1,-3.94962e-8,0,1,-4.22264e-8,1.10567e-9,1,-4.28749e-8,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0,0,-1,-0.073564,0,-0.99729,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.2191,0,-0.975702,-0.266711,0,-0.963776,-0.313679,0,-0.949529,-2.01976e-14,1,-9.24436e-8,-1.44413e-8,1,-3.93227e-7,0,1,0,0,1,-2.48357e-7,8.87305e-9,1,-2.89678e-7,-5.42823e-9,1,-8.0233e-8,-9.35859e-9,1,-7.987e-8,-1.32662e-8,1,-7.93148e-8,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.335866,0,-0.94191,1.55275e-8,1,-9.17037e-7,-0.335866,0,-0.94191,-0.999994,0.00000982353,-0.00342704,-1,0,-0.00000259724,0.534996,0,0.844854,0.534996,0,0.844854,0.492898,0,0.870087,0.122409,0,0.99248,7.48412e-15,-1,3.32576e-8,-1.97224e-9,-1,3.71499e-8,0,-1,4.1799e-8,-1.82364e-9,-1,3.43507e-8,-1.80506e-10,-1,4.56916e-8,2.06171e-9,-1,4.56455e-8,-4.57433e-9,-1,4.3304e-8,-2.9771e-9,-1,4.39838e-8,4.89768e-9,-1,4.60248e-8,-1.35172e-9,-1,4.13479e-8,6.78548e-10,-1,4.13645e-8,1.16194e-9,-1,5.07199e-8,3.64912e-9,-1,5.06018e-8,6.12774e-9,-1,5.03618e-8,-7.2024e-10,-1,4.78166e-8,1.30142e-9,-1,3.82356e-8,-6.19593e-9,-1,4.70484e-8,0.689147,5.07059e-7,0.724622,-3.07033e-8,-1,2.92319e-8,0,-1,0,7.4569e-8,-1,1.41893e-7,8.14408e-8,-1,1.38062e-7,-3.14037e-8,-1,2.70887e-8,-1.58023e-8,-1,3.59186e-8,7.3317e-9,-1,3.40736e-8,-1.56263e-8,-1,6.78673e-8,9.14892e-9,-1,2.71325e-8,1.14e-9,-1,4.38361e-8,3.28962e-9,-1,4.37273e-8,5.43117e-9,-1,4.35133e-8,7.55968e-9,-1,4.31944e-8,0,-1,0,-3.11768e-8,-1,3.11768e-8,1.80831e-8,-1,3.58649e-8,1.36101e-8,-1,5.53858e-8,0,-1,0,-4.38849e-8,-1,2.20892e-8,-4.15079e-8,-1,2.62846e-8,-3.87319e-8,-1,3.02262e-8,-3.65219e-8,-1,3.47717e-8,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-1.338e-8,-1,6.15477e-8,0,0,0,0.707109,-0.0000081038,-0.707105,0.707108,0.00000259162,-0.707106,0.707106,-0.0000431584,-0.707108,0.013,-0.999831,-0.0129999,0.707108,0.00000802852,-0.707105,0,-1,0,-2.65033e-9,-1,4.04452e-8,-3.31684e-10,-1,5.27921e-8,7.43291e-10,-1,5.15428e-8,2.49808e-9,-1,4.65707e-8,0,-1,4.62218e-8,1.08392e-9,-1,5.03428e-8,0,0,-1,0,-1,0,1.87172e-8,-1,1.5974e-7,2.65325e-8,-1,1.5863e-7,-0.266711,0,-0.963776,-0.999994,-0.00000982353,-0.00342704],\"uvs\":[],\"vertices\":[156.808,4,-42.988,164.932,4,-50.7141,156.808,0.999998,-42.988,130.559,0.999999,-20.6044,139.989,0.999999,-27.246,149.082,0.999999,-34.3423,157.816,0.999998,-41.8762,165.993,0.999998,-49.6531,66.363,0.999999,-30.5264,75.3838,0.999999,-34.0061,84.223,0.999998,-37.9243,92.8594,0.999998,-42.2714,101.272,0.999998,-47.0371,109.441,0.999998,-52.2098,117.346,0.999997,-57.7771,124.968,0.999997,-63.7256,132.289,0.999997,-70.0409,139.115,0.999997,-76.5313,129.725,0.999999,-21.852,139.095,0.999999,-28.4512,148.13,0.999998,-35.5022,164.932,0.999998,-50.7141,115.928,0.999999,-22.5844,125.279,0.999999,-28.5057,134.328,0.999998,-34.8788,143.054,0.999998,-41.6881,151.434,0.999998,-48.9174,159.274,0.999998,-56.3727,69.5643,0.999999,-21.5791,79.0204,0.999999,-25.2266,88.286,0.999999,-29.3338,97.339,0.999999,-33.8906,106.157,0.999998,-38.8862,114.72,0.999998,-44.3084,123.006,0.999998,-50.1443,130.997,0.999998,-56.3798,138.671,0.999997,-62.9997,145.835,0.999997,-69.8117,66.8684,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5679,93.5667,0.999998,-40.9481,102.043,0.999998,-45.7501,110.274,0.999998,-50.9622,118.239,0.999998,-56.5719,125.92,0.999997,-62.5657,133.297,0.999997,-68.9291,140.176,0.999997,-75.4703,129.725,4,-21.852,139.095,4,-28.4512,148.13,4,-35.5022,130.559,4,-20.6044,139.989,4,-27.246,149.082,4,-34.3423,157.816,4,-41.8762,165.993,4,-49.6531,115.928,4,-22.5844,125.279,4,-28.5057,134.328,4,-34.8788,143.054,4,-41.6881,151.434,4,-48.9174,159.274,4,-56.3727,69.5643,4,-21.5791,79.0204,4,-25.2266,88.286,4,-29.3338,97.339,4,-33.8906,106.157,4,-38.8862,114.72,4,-44.3084,123.006,4,-50.1443,130.997,4,-56.3798,138.671,4,-62.9997,145.835,4,-69.8117,66.8684,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5679,93.5667,4,-40.9481,102.043,4,-45.7501,110.274,4,-50.9622,118.239,4,-56.5719,125.92,4,-62.5657,133.297,4,-68.9291,140.176,4,-75.4703,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9243,92.8594,4,-42.2714,101.272,4,-47.0371,109.441,4,-52.2098,117.346,4,-57.7771,124.968,4,-63.7256,132.289,4,-70.0409,139.115,4,-76.5313,164.226,4,-64.1488,153.265,4,-75.109,156.801,4,-58.8455,147.962,4,-67.6843,0.250039,0.999999,-19.0114,9.66539,0.999999,-19.2487,19.3078,0.999999,-19.96,28.9038,0.999999,-21.1435,38.4301,0.999999,-22.7964,47.8638,0.999999,-24.9148,57.1823,0.999999,-27.4936,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,9.00004,0.999999,-19.0114,9.00004,4,-19.0114,109.601,4,-19,125.221,0.999999,-19,118.077,0.999999,-19,109.601,0.999999,-19,128.025,0.999999,-19,128.025,4,-19,125.221,4,-19,105.298,4,-19,93.1735,4,-19,81.5995,4,-19,70.4871,4,-19,61.7573,0.999999,-19,59.7588,0.999999,-19,61.7573,4,-19,49.3454,0.999999,-19,39.1853,0.999999,-19,29.2218,0.999999,-19,23.7784,4,-19,19.4024,4,-19,23.7784,0.999999,-19,9.67761,4,-19,9.00004,4,-19,0.250039,4,-19,0.25,-8.30515e-7,-19,130.559,-9.00646e-7,-20.6044,139.989,-0.00000119096,-27.246,149.082,-0.00000150115,-34.3423,157.816,-0.00000183047,-41.8762,165.993,-0.00000217041,-49.6531,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9243,92.8594,-0.00000184774,-42.2714,101.272,-0.00000205606,-47.0371,109.441,-0.00000228216,-52.2098,117.346,-0.00000252552,-57.7771,124.968,-0.00000278553,-63.7256,132.289,-0.00000306158,-70.0409,139.115,-0.00000334529,-76.5313,156.808,-4,-42.988,164.932,-4,-50.7141,156.808,-1,-42.988,130.559,-1,-20.6044,139.989,-1,-27.246,149.082,-1,-34.3423,157.816,-1,-41.8762,165.993,-1,-49.6531,66.363,-1,-30.5264,75.3838,-1,-34.0061,84.223,-1,-37.9243,92.8594,-1,-42.2714,101.272,-1,-47.0371,109.441,-1,-52.2098,117.346,-1,-57.7771,124.968,-1,-63.7256,132.289,-1,-70.0409,139.115,-1,-76.5313,129.725,-1,-21.852,139.095,-1,-28.4512,148.13,-1,-35.5022,164.932,-1,-50.7141,115.928,-1,-22.5844,125.279,-1,-28.5057,134.328,-1,-34.8788,143.054,-1,-41.6881,151.434,-1,-48.9174,159.274,-1,-56.3727,69.5643,-1,-21.5791,79.0204,-1,-25.2266,88.286,-1,-29.3338,97.339,-1,-33.8906,106.157,-1,-38.8862,114.72,-1,-44.3084,123.006,-1,-50.1443,130.997,-1,-56.3798,138.671,-1,-62.9997,145.835,-1,-69.8117,66.8684,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5679,93.5667,-1,-40.9481,102.043,-1,-45.7501,110.274,-1,-50.9622,118.239,-1,-56.5719,125.92,-1,-62.5657,133.297,-1,-68.9291,140.176,-1,-75.4703,129.725,-4,-21.852,139.095,-4,-28.4512,148.13,-4,-35.5022,130.559,-4,-20.6044,139.989,-4,-27.246,149.082,-4,-34.3423,157.816,-4,-41.8762,165.993,-4,-49.6531,115.928,-4,-22.5844,125.279,-4,-28.5057,134.328,-4,-34.8788,143.054,-4,-41.6881,151.434,-4,-48.9174,159.274,-4,-56.3727,69.5643,-4,-21.5791,79.0204,-4,-25.2266,88.286,-4,-29.3338,97.339,-4,-33.8906,106.157,-4,-38.8862,114.72,-4,-44.3084,123.006,-4,-50.1443,130.997,-4,-56.3798,138.671,-4,-62.9997,145.835,-4,-69.8117,66.8684,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5679,93.5667,-4,-40.9481,102.043,-4,-45.7501,110.274,-4,-50.9622,118.239,-4,-56.5719,125.92,-4,-62.5657,133.297,-4,-68.9291,140.176,-4,-75.4703,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9243,92.8594,-4,-42.2714,101.272,-4,-47.0371,109.441,-4,-52.2098,117.346,-4,-57.7771,124.968,-4,-63.7256,132.289,-4,-70.0409,139.115,-4,-76.5313,164.226,-4,-64.1488,153.265,-4,-75.109,156.801,-4,-58.8455,147.962,-4,-67.6843,164.226,-0.00000280403,-64.1488,153.265,-0.00000328312,-75.109,156.801,-0.00000257222,-58.8455,147.962,-0.00000295858,-67.6843,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,0.250039,-1,-19.0114,9.66539,-1,-19.2487,19.3078,-1,-19.96,28.9038,-1,-21.1435,38.4301,-1,-22.7964,47.8638,-1,-24.9148,57.1823,-1,-27.4936,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,9.00004,-8.31017e-7,-19.0114,9.00004,-1,-19.0114,9.00004,-4,-19.0114,128.025,-8.30516e-7,-19,109.601,-4,-19,125.221,-1,-19,118.077,-1,-19,109.601,-1,-19,128.025,-1,-19,128.025,-4,-19,125.221,-4,-19,105.298,-4,-19,93.1735,-4,-19,81.5995,-4,-19,70.4871,-4,-19,61.7573,-1,-19,59.7588,-1,-19,61.7573,-4,-19,49.3454,-1,-19,39.1853,-1,-19,29.2218,-1,-19,23.7784,-4,-19,19.4024,-4,-19,23.7784,-1,-19,9.67761,-4,-19,9.00004,-4,-19,0.250039,-4,-19],\"faces\":[33,50,0,2,20,0,0,0,0,33,20,19,49,50,1,1,1,1,33,19,18,48,49,2,2,2,2,33,18,121,126,48,3,3,3,3,32,22,123,122,4,4,4,32,18,23,22,5,5,5,32,22,122,121,6,6,6,32,22,121,18,7,7,7,33,24,23,18,19,8,8,8,8,33,25,24,19,20,9,9,9,9,33,26,25,20,2,10,10,10,10,33,27,26,2,21,11,11,11,11,33,29,28,62,63,12,12,12,12,33,26,27,61,60,13,13,13,13,33,25,26,60,59,14,14,14,14,33,24,25,59,58,15,15,15,15,33,23,24,58,57,16,16,16,16,33,22,23,57,56,17,17,17,17,33,39,38,28,29,18,18,18,18,33,40,39,29,30,19,19,19,19,33,41,40,30,31,20,20,20,20,33,42,41,31,32,21,21,21,21,33,43,42,32,33,22,22,22,22,33,44,43,33,34,23,23,23,23,33,45,44,34,35,24,24,24,24,33,46,45,35,36,25,25,25,25,33,47,46,36,37,26,26,26,26,33,46,47,81,80,27,27,27,27,33,45,46,80,79,28,28,28,28,33,44,45,79,78,29,29,29,29,33,43,44,78,77,30,30,30,30,33,42,43,77,76,31,31,31,31,33,41,42,76,75,32,32,32,32,33,40,41,75,74,33,33,33,33,33,39,40,74,73,34,34,34,34,33,38,39,73,72,35,35,35,35,33,155,154,13,14,36,36,36,36,33,156,155,14,15,37,37,37,37,33,157,156,15,16,38,38,38,38,33,158,157,16,17,39,39,39,39,33,144,145,4,3,40,40,40,40,33,145,146,5,4,41,41,41,41,33,146,147,6,5,42,42,42,42,33,147,148,7,6,43,43,43,43,33,1,0,54,55,44,44,44,44,33,2,0,1,21,45,45,45,45,33,150,149,8,9,46,46,46,46,33,151,150,9,10,47,47,47,47,33,152,151,10,11,48,48,48,48,33,153,152,11,12,49,49,49,49,33,154,153,12,13,50,50,50,50,33,48,126,125,51,51,51,51,51,33,49,48,51,52,52,52,52,52,33,50,49,52,53,53,53,53,53,33,0,50,53,54,54,54,54,54,33,3,4,52,51,55,55,55,55,33,4,5,53,52,56,56,56,56,33,5,6,54,53,57,57,57,57,33,6,7,55,54,58,58,58,58,33,63,62,130,129,59,59,59,59,33,64,63,129,128,60,60,60,60,33,65,64,128,127,61,61,61,61,32,56,66,65,62,62,62,32,65,127,120,63,63,63,32,65,120,56,64,64,64,33,67,66,56,57,65,65,65,65,33,68,67,57,58,66,66,66,66,33,69,68,58,59,67,67,67,67,33,70,69,59,60,68,68,68,68,32,95,71,70,69,69,69,32,70,60,61,70,70,70,32,94,95,70,71,71,71,32,70,61,94,72,72,72,33,30,29,63,64,73,73,73,73,33,31,30,64,65,74,74,74,74,33,32,31,65,66,75,75,75,75,33,33,32,66,67,76,76,76,76,33,34,33,67,68,77,77,77,77,33,35,34,68,69,78,78,78,78,33,36,35,69,70,79,79,79,79,33,37,36,70,71,80,80,80,80,33,83,82,72,73,81,81,81,81,33,84,83,73,74,82,82,82,82,33,85,84,74,75,83,83,83,83,33,86,85,75,76,84,84,84,84,33,87,86,76,77,85,85,85,85,33,88,87,77,78,86,86,86,86,33,89,88,78,79,87,87,87,87,33,90,89,79,80,88,88,88,88,33,91,90,80,81,89,89,89,89,33,9,8,82,83,46,46,46,46,33,10,9,83,84,90,90,90,90,33,11,10,84,85,91,91,91,91,33,12,11,85,86,49,49,49,49,33,13,12,86,87,92,92,92,92,33,14,13,87,88,93,93,93,93,33,15,14,88,89,94,94,94,94,33,16,15,89,90,95,95,95,95,33,17,16,90,91,39,39,39,39,33,93,95,94,92,96,96,96,96,33,94,257,255,92,97,97,97,97,33,93,256,258,95,98,98,98,98,33,92,255,256,93,99,99,99,99,32,37,71,95,100,100,100,32,258,158,17,101,101,101,32,17,91,81,102,102,102,32,17,81,47,102,102,102,32,37,95,258,103,103,103,32,258,17,47,104,104,104,32,37,258,47,105,105,105,32,21,1,55,102,102,102,32,7,148,257,106,106,106,32,21,55,7,102,102,102,32,94,61,27,102,102,102,32,27,21,7,107,107,107,32,257,94,27,102,102,102,32,7,257,27,108,108,108,33,28,131,133,62,109,109,109,109,32,103,139,136,110,110,110,33,104,103,136,135,111,111,111,111,33,105,104,135,134,112,112,112,112,33,106,105,134,132,113,113,113,113,32,28,38,106,114,114,114,32,106,132,131,115,115,115,32,106,131,28,116,116,116,33,106,38,72,110,117,117,117,117,33,105,106,110,109,118,118,118,118,33,104,105,109,108,119,119,119,119,33,103,104,108,107,120,120,120,120,33,288,259,96,118,121,121,121,121,33,261,260,97,98,122,122,122,122,33,262,261,98,99,123,123,123,123,33,263,262,99,100,124,124,124,124,33,264,263,100,101,125,125,125,125,33,265,264,101,102,126,126,126,126,33,149,265,102,8,127,127,127,127,32,62,133,130,128,128,128,33,119,111,142,141,110,110,110,110,33,113,112,140,138,129,129,129,129,32,107,114,113,130,130,130,32,113,138,137,131,131,131,32,113,137,107,132,132,132,33,115,114,107,108,110,110,110,110,33,116,115,108,109,133,133,133,133,33,117,116,109,110,134,134,134,134,33,82,117,110,72,135,135,135,135,33,118,96,111,119,121,121,121,121,33,98,97,112,113,122,122,122,122,33,99,98,113,114,136,136,136,136,33,100,99,114,115,137,137,137,137,33,101,100,115,116,125,125,125,125,33,102,101,116,117,126,126,126,126,33,8,102,117,82,127,127,127,127,33,97,118,119,112,138,138,138,138,33,112,119,141,140,139,139,139,139,33,260,288,118,97,140,140,140,140,32,259,143,142,141,141,141,32,142,111,96,142,142,142,32,142,96,259,142,142,142,33,125,124,3,51,143,143,143,143,33,124,291,144,3,144,144,144,144,33,120,123,22,56,145,145,145,145,33,137,139,103,107,146,146,146,146,33,161,159,209,179,0,0,0,0,33,179,209,208,178,1,1,1,1,33,178,208,207,177,2,2,2,2,33,177,207,298,293,3,3,3,3,32,181,294,295,147,147,147,32,181,182,177,148,148,148,32,177,293,294,149,149,149,32,177,294,181,150,150,150,33,183,178,177,182,151,151,151,151,33,184,179,178,183,152,152,152,152,33,185,161,179,184,153,153,153,153,33,186,180,161,185,154,154,154,154,33,188,222,221,187,12,12,12,12,33,185,219,220,186,13,13,13,13,33,184,218,219,185,14,14,14,14,33,183,217,218,184,15,15,15,15,33,182,216,217,183,16,16,16,16,33,181,215,216,182,17,17,17,17,33,198,188,187,197,155,155,155,155,33,199,189,188,198,156,156,156,156,33,200,190,189,199,157,157,157,157,33,201,191,190,200,158,158,158,158,33,202,192,191,201,159,159,159,159,33,203,193,192,202,160,160,160,160,33,204,194,193,203,161,161,161,161,33,205,195,194,204,162,162,162,162,33,206,196,195,205,163,163,163,163,33,205,239,240,206,27,27,27,27,33,204,238,239,205,28,28,28,28,33,203,237,238,204,29,29,29,29,33,202,236,237,203,30,30,30,30,33,201,235,236,202,31,31,31,31,33,200,234,235,201,32,32,32,32,33,199,233,234,200,33,33,33,33,33,198,232,233,199,34,34,34,34,33,197,231,232,198,35,35,35,35,33,155,173,172,154,36,36,36,36,33,156,174,173,155,37,37,37,37,33,157,175,174,156,38,38,38,38,33,158,176,175,157,39,39,39,39,33,144,162,163,145,40,40,40,40,33,145,163,164,146,41,41,41,41,33,146,164,165,147,42,42,42,42,33,147,165,166,148,164,164,164,164,33,213,159,160,214,165,165,165,165,33,161,180,160,159,45,45,45,45,33,150,168,167,149,46,46,46,46,33,151,169,168,150,47,47,47,47,33,152,170,169,151,48,48,48,48,33,153,171,170,152,49,49,49,49,33,154,172,171,153,50,50,50,50,33,207,210,297,298,166,166,166,166,33,208,211,210,207,167,167,167,167,33,209,212,211,208,168,168,168,168,33,159,213,212,209,169,169,169,169,33,162,210,211,163,55,55,55,55,33,163,211,212,164,56,56,56,56,33,164,212,213,165,57,57,57,57,33,165,213,214,166,58,58,58,58,33,222,301,302,221,166,166,166,166,33,223,300,301,222,170,170,170,170,33,224,299,300,223,171,171,171,171,32,224,225,215,172,172,172,32,215,292,299,166,166,166,32,215,299,224,173,173,173,33,226,216,215,225,174,174,174,174,33,227,217,216,226,175,175,175,175,33,228,218,217,227,176,176,176,176,33,229,219,218,228,177,177,177,177,32,229,230,254,178,178,178,32,253,220,219,179,179,179,32,229,254,253,180,180,180,32,253,219,229,181,181,181,33,189,223,222,188,73,73,73,73,33,190,224,223,189,74,74,74,74,33,191,225,224,190,75,75,75,75,33,192,226,225,191,76,76,76,76,33,193,227,226,192,77,77,77,77,33,194,228,227,193,78,78,78,78,33,195,229,228,194,79,79,79,79,33,196,230,229,195,80,80,80,80,33,242,232,231,241,182,182,182,182,33,243,233,232,242,166,166,166,166,33,244,234,233,243,183,183,183,183,33,245,235,234,244,182,182,182,182,33,246,236,235,245,184,184,184,184,33,247,237,236,246,166,166,166,166,33,248,238,237,247,185,185,185,185,33,249,239,238,248,182,182,182,182,33,250,240,239,249,186,186,186,186,33,168,242,241,167,46,46,46,46,33,169,243,242,168,90,90,90,90,33,170,244,243,169,91,91,91,91,33,171,245,244,170,49,49,49,49,33,172,246,245,171,187,187,187,187,33,173,247,246,172,188,188,188,188,33,174,248,247,173,94,94,94,94,33,175,249,248,174,95,95,95,95,33,176,250,249,175,39,39,39,39,33,252,251,253,254,189,189,189,189,33,253,251,255,257,97,97,97,97,33,252,254,258,256,98,98,98,98,33,251,252,256,255,99,99,99,99,32,206,240,250,102,102,102,32,250,176,158,190,190,190,32,258,254,230,103,103,103,32,258,230,196,103,103,103,32,206,250,158,102,102,102,32,258,196,206,191,191,191,32,206,158,258,192,192,192,32,186,220,253,102,102,102,32,257,148,166,193,193,193,32,166,214,160,103,103,103,32,166,160,180,102,102,102,32,186,253,257,103,103,103,32,166,180,186,194,194,194,32,186,257,166,195,195,195,33,187,221,305,303,109,109,109,109,32,273,308,311,196,196,196,33,274,307,308,273,197,197,197,197,33,275,306,307,274,198,198,198,198,33,276,304,306,275,199,199,199,199,32,276,197,187,200,200,200,32,187,303,304,201,201,201,32,187,304,276,202,202,202,33,276,280,231,197,117,117,117,117,33,275,279,280,276,118,118,118,118,33,274,278,279,275,119,119,119,119,33,273,277,278,274,120,120,120,120,33,288,289,266,259,203,203,203,203,33,261,268,267,260,122,122,122,122,33,262,269,268,261,123,123,123,123,33,263,270,269,262,124,124,124,124,33,264,271,270,263,125,125,125,125,33,265,272,271,264,126,126,126,126,33,149,167,272,265,127,127,127,127,32,221,302,305,196,196,196,33,290,313,314,281,166,166,166,166,33,283,310,312,282,182,182,182,182,32,283,284,277,204,204,204,32,277,309,310,166,166,166,32,277,310,283,166,166,166,33,285,278,277,284,166,166,166,166,33,286,279,278,285,166,166,166,166,33,287,280,279,286,205,205,205,205,33,241,231,280,287,206,206,206,206,33,289,290,281,266,203,203,203,203,33,268,283,282,267,122,122,122,122,33,269,284,283,268,136,136,136,136,33,270,285,284,269,137,137,137,137,33,271,286,285,270,125,125,125,125,33,272,287,286,271,207,207,207,207,33,167,241,287,272,127,127,127,127,33,267,282,290,289,138,138,138,138,33,282,312,313,290,166,166,166,166,33,260,267,289,288,140,140,140,140,32,314,143,259,208,208,208,32,266,281,314,142,142,142,32,259,266,314,142,142,142,33,297,210,162,296,143,143,143,143,33,296,162,144,291,144,144,144,144,33,292,215,181,295,145,145,145,145,33,309,277,273,311,146,146,146,146],\"metadata\":{\"generator\":\"io_three\",\"normals\":209,\"uvs\":0,\"vertices\":315,\"version\":3,\"faces\":326,\"type\":\"Geometry\"}},\"slope_curve_A\":{\"uvs\":[],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":504,\"version\":3,\"normals\":407,\"type\":\"Geometry\",\"faces\":532},\"normals\":[-0.0735675,0,0.99729,-0.122411,0,0.99248,-0.170964,0,0.985277,-0.219105,0,0.975701,-0.266713,0,0.963776,-0.313686,0,0.949527,-0.359895,0,0.932993,-0.405245,0,0.914208,0.0948476,-0.994604,0.0420435,0.096796,-0.994604,0.0373389,0.098512,-0.994604,0.0325443,0.0999902,-0.994604,0.0276713,0.101227,-0.994604,0.0227317,0.102221,-0.994604,0.0177373,0.102968,-0.994604,0.0127001,0.10782,-0.994139,0.0079534,-1.12195e-9,-1,4.46895e-8,-0.405245,0,0.914208,0.0251089,0,-0.999685,0.0735671,0,-0.99729,0.122412,0,-0.992479,0.170964,0,-0.985277,0.219103,0,-0.975702,0.266715,0,-0.963775,0.313684,0,-0.949527,0.359894,0,-0.932993,0.405247,0,-0.914207,0.107334,-0.993084,0.0475784,0.109539,-0.993084,0.0422543,0.111481,-0.993084,0.0368287,0.113154,-0.993084,0.031314,0.114554,-0.993084,0.025724,0.115678,-0.993084,0.0200722,0.116523,-0.993084,0.0143721,0.121998,-0.992489,0.00899937,-1.12532e-9,-1,4.46894e-8,0.0251866,0,-0.999683,0.0735664,0,-0.99729,0.122416,0,-0.992479,0.170963,0,-0.985277,0.219103,0,-0.975702,0.266711,0,-0.963777,0.313689,0,-0.949526,0.359894,0,-0.932993,0.405245,0,-0.914208,-0.170965,0,0.985277,-0.122415,0,0.992479,-0.0735649,0,0.99729,-0.0251924,0,0.999683,0.405241,0,-0.91421,0.359897,0,-0.932992,0.313688,0,-0.949526,0.266714,0,-0.963776,0.219103,0,-0.975702,0.170963,0,-0.985277,0.122412,0,-0.992479,0.0735687,0,-0.99729,0.0250852,4.75368e-7,-0.999685,-7.9745e-9,-1,3.17786e-7,-0.0250867,0,0.999685,-0.405246,0,0.914208,-0.359892,0,0.932994,-0.313687,0,0.949526,-0.26671,0,0.963777,-0.219105,0,0.975701,0.0929438,-0.994819,0.0411995,0.0948536,-0.994819,0.0365884,0.0965348,-0.994819,0.0318907,0.0979832,-0.994819,0.027116,0.0991954,-0.994819,0.0222755,0.100169,-0.994819,0.0173816,0.100901,-0.994819,0.0124458,0.105657,-0.994372,0.00779422,0.359897,0,-0.932992,0.266714,0,-0.963776,0.219103,0,-0.975702,0.170963,0,-0.985277,0.122412,0,-0.992479,0.0735687,0,-0.99729,0.0250853,0,-0.999685,0.100707,-0.993914,0.0446409,0.102777,-0.993914,0.0396457,0.104599,-0.993914,0.034555,0.106168,-0.993914,0.0293808,0.107481,-0.993914,0.024136,0.108536,-0.993914,0.0188331,0.10933,-0.993914,0.0134849,0.114474,-0.99339,0.00844445,0,-1,0,-3.42468e-9,-1,1.3635e-7,-1.25736e-8,-1,3.8147e-8,-2.95399e-8,-1,4.87876e-8,-0.359893,0,0.932993,-0.313688,0,0.949526,-0.266713,0,0.963776,-0.219105,0,0.975701,-0.170961,0,0.985278,-0.122415,0,0.992479,-0.0735681,0,0.99729,-0.0251599,0,0.999683,0.109877,-0.992751,0.0487047,0.112134,-0.992751,0.0432551,0.114122,-0.992751,0.0377014,0.115834,-0.992751,0.0320563,0.117267,-0.992751,0.0263336,0.118418,-0.992751,0.0205486,0.119283,-0.992751,0.0147129,0.124885,-0.992128,0.0092121,0,-1,0,-0.405246,0,0.914208,-0.359892,0,0.932994,-0.313687,0,0.949526,-0.26671,0,0.963777,-0.122415,0,0.992479,-0.0735649,0,0.99729,0,-1,3.40598e-8,0.164402,0,-0.986393,0.164402,0,0.986393,-1,0,-0.00000295331,-1,0,0,-1,0,-0.00000121959,-1,0,0,-1,0,0.00000253586,-0.0121517,0.999926,-7.94427e-8,-1,-0.0000148758,-0.00000240856,-1,0,0,-1,-0.000038147,0.00000176063,-1,0,0.00000508461,-0.00562501,-0.999984,2.8601e-8,-1,0.0000056154,-0.0000016057,0.449615,0,-0.893223,0.492899,0,-0.870086,0.534999,0,-0.844853,0.575813,0,-0.817581,0.615232,0,-0.788346,0.653173,0,-0.757209,0.624126,0,-0.781324,-0.449612,0,0.893224,-0.492901,0,0.870085,-0.534999,0,0.844853,-0.57581,0,0.817584,-0.615234,0,0.788345,-0.653174,0,0.757208,-0.707107,0,0.707107,-3.6001e-9,-1,8.06685e-8,0.0785596,-0.994604,0.0677661,0.0817898,-0.994604,0.0638296,0.0848232,-0.994604,0.0597396,0.0876525,-0.994604,0.0555055,0.0902705,-0.994604,0.0511377,0.092671,-0.994604,0.0466469,-0.449612,0,0.893224,-0.4929,0,0.870086,-0.535001,0,0.844851,-0.575809,0,0.817584,-0.615233,0,0.788345,-0.653174,0,0.757207,-0.707107,0,0.707107,-3.59977e-9,-1,8.06684e-8,0.0889017,-0.993084,0.0766876,0.0925567,-0.993084,0.0722325,0.0959902,-0.993084,0.0676044,0.0991919,-0.993084,0.0628129,0.102154,-0.993084,0.0578699,0.104871,-0.993084,0.052788,0.449614,0,-0.893223,0.492898,0,-0.870087,0.534999,0,-0.844852,0.575811,0,-0.817583,0.615234,0,-0.788345,0.653174,0,-0.757208,0.455141,0,-0.890419,-0.653173,0,0.757209,-0.615235,0,0.788344,-0.57581,0,0.817583,-0.534998,0,0.844853,-0.492901,0,0.870086,-0.449614,0,0.893223,0.624126,0,-0.781324,0.653173,0,-0.757209,0.615232,0,-0.788346,0.492899,0,-0.870086,0.449615,0,-0.893223,0.0769827,-0.994819,0.0664058,0.0801485,-0.994819,0.0625481,0.0831207,-0.994819,0.0585405,0.0858931,-0.994819,0.0543912,0.0884589,-0.994819,0.0501107,0.090811,-0.994819,0.0457108,0.0834132,-0.993914,0.071953,0.0868429,-0.993914,0.0677732,0.090064,-0.993914,0.0634306,0.093068,-0.993914,0.058935,0.0958475,-0.993914,0.0542973,0.0983966,-0.993914,0.0495291,0.608831,0,-0.7933,0.653173,0,-0.757209,0.615234,0,-0.788345,0.57581,0,-0.817583,0.534998,0,-0.844853,0.492901,0,-0.870085,0.449612,0,-0.893224,7.70675e-8,-1,7.70697e-8,0.0910077,-0.992751,0.0785036,0.0947493,-0.992751,0.0739429,0.0982642,-0.992751,0.0692052,0.101541,-0.992751,0.0643007,0.104573,-0.992751,0.0592411,0.107355,-0.992751,0.0540381,-0.653173,0,0.757209,-0.615235,0,0.788344,-0.57581,0,0.817583,-0.534998,0,0.844853,-0.492901,0,0.870086,-0.449614,0,0.893223,-0.428539,0,0.903523,0,-1,0,0.707107,0,-0.707107,0,-1,0,0,-1,0,-7.06182e-8,-1,1.36755e-8,3.21351e-8,-1,9.68471e-8,0.707107,0,-0.707107,-0.428539,0,0.903523,0.707107,0,-0.707107,0,-1,0,-0.538831,0,0.842414,-0.622108,0,0.782932,-0.813734,0,0.581237,7.14203e-8,-1,7.98347e-8,0.707107,0,0.707107,0.581239,0,-0.813733,0.707107,0,0.707107,0.707104,0,0.707109,0.707097,0,0.707117,0.707097,0,0.707117,0.707107,0,0.707107,0.707097,0.000136653,0.707117,0.707105,0.00000810374,0.707109,0.707104,0,0.707109,0.707102,0,0.707112,0.707102,0,0.707112,0.707105,0.0000134666,0.707109,0.707107,0,0.707107,0.707107,0.0000406775,0.707107,-0.0735675,0,0.99729,-0.219105,0,0.975701,-0.266713,0,0.963776,-0.313686,0,0.949527,-0.359895,0,0.932993,-0.405245,0,0.914208,-0.0948476,0.994604,-0.0420435,-0.0967961,0.994604,-0.0373388,-0.098512,0.994604,-0.0325443,-0.0999902,0.994604,-0.0276713,-0.101227,0.994604,-0.0227317,-0.102221,0.994604,-0.0177374,-0.102968,0.994604,-0.0127001,-0.10782,0.994139,-0.0079534,1.12195e-9,1,-4.46895e-8,-0.405246,0,0.914208,0.0251089,0,-0.999685,0.170964,0,-0.985277,0.219103,0,-0.975702,0.266715,0,-0.963775,-0.107334,0.993084,-0.0475785,-0.109539,0.993084,-0.0422543,-0.111481,0.993084,-0.0368286,-0.113154,0.993084,-0.031314,-0.114554,0.993084,-0.025724,-0.115678,0.993084,-0.0200722,-0.116523,0.993084,-0.0143721,-0.121998,0.992489,-0.00899937,-2.04339e-9,1,-4.10407e-8,0.0251866,0,-0.999683,0.170963,0,-0.985277,0.219103,0,-0.975702,0.266711,0,-0.963777,0.359894,0,-0.932993,0.405245,0,-0.914208,-0.170965,0,0.985277,0.405241,0,-0.91421,0.266714,0,-0.963776,0.219103,0,-0.975702,0.122412,0,-0.992479,0.0250852,-4.75368e-7,-0.999685,0,1,0,-0.0250867,0,0.999685,-0.405246,0,0.914208,-0.313687,0,0.949526,-0.0929438,0.994819,-0.0411995,-0.0948536,0.994819,-0.0365883,-0.0965348,0.994819,-0.0318906,-0.0979832,0.994819,-0.0271159,-0.0991955,0.994819,-0.0222755,-0.100169,0.994819,-0.0173816,-0.100901,0.994819,-0.0124458,-0.105657,0.994372,-0.00779405,0.405241,0,-0.91421,0.313688,0,-0.949526,0.266714,0,-0.963776,0.170963,0,-0.985278,0.0735687,0,-0.99729,-0.100708,0.993914,-0.0446409,-0.102777,0.993914,-0.0396457,-0.104599,0.993914,-0.034555,-0.106168,0.993914,-0.0293809,-0.107481,0.993914,-0.024136,-0.108536,0.993914,-0.0188331,-0.10933,0.993914,-0.0134849,-0.114474,0.99339,-0.00844445,9.45215e-10,1,-3.76327e-8,1.88605e-8,1,-5.72206e-8,-7.23772e-8,1,0,-0.359893,0,0.932993,-0.266713,0,0.963776,-0.219105,0,0.975701,-0.170961,0,0.985278,-0.122415,0,0.992479,-0.109876,0.992751,-0.0487047,-0.112134,0.992751,-0.0432552,-0.114122,0.992751,-0.0377013,-0.115834,0.992751,-0.0320562,-0.117267,0.992751,-0.0263335,-0.118417,0.992751,-0.0205485,-0.119283,0.992751,-0.0147129,-0.124885,0.992128,-0.0092121,0,1,0,-0.313687,0,0.949526,-0.219105,0,0.975701,0,1,-5.10897e-8,0.164402,0,-0.986393,-1,-0.0000152588,1.21229e-12,-1,0.0000162345,-0.00000286017,-1,0.000038147,0.00000176062,-1,0,0,-1,0.0000813589,0.0000050846,-1,-0.0000100025,-0.00000286017,0.449615,0,-0.893223,0.575813,0,-0.817581,-0.449612,0,0.893224,-0.492901,0,0.870086,-0.575809,0,0.817584,-0.615234,0,0.788345,-0.0785594,0.994604,-0.0677659,-0.0817898,0.994604,-0.0638297,-0.0848232,0.994604,-0.0597396,-0.0876526,0.994604,-0.0555055,-0.0902703,0.994604,-0.0511377,-0.0926711,0.994604,-0.046647,-0.449612,0,0.893224,-0.4929,0,0.870086,-0.535001,0,0.844851,-0.0889015,0.993084,-0.0766876,-0.0925567,0.993084,-0.0722325,-0.0959902,0.993084,-0.0676044,-0.099192,0.993084,-0.0628129,-0.102154,0.993084,-0.0578698,-0.104871,0.993084,-0.052788,0.449614,0,-0.893223,0.492898,0,-0.870087,0.534999,0,-0.844853,0.575811,0,-0.817583,0.615234,0,-0.788345,-0.615235,0,0.788344,-0.534998,0,0.844854,-0.449614,0,0.893223,0.653173,0,-0.757209,0.534998,0,-0.844853,0.449615,0,-0.893223,-0.0769825,0.994819,-0.0664056,-0.0801485,0.994819,-0.0625481,-0.0831207,0.994819,-0.0585405,-0.0858932,0.994819,-0.0543913,-0.0884589,0.994819,-0.0501107,-0.090811,0.994819,-0.0457109,1.92255e-7,1,-3.93742e-7,-0.0834131,0.993914,-0.0719528,-0.0868429,0.993914,-0.0677732,-0.090064,0.993914,-0.0634306,-0.0930681,0.993914,-0.058935,-0.0958475,0.993914,-0.0542973,-0.0983967,0.993914,-0.0495291,0.57581,0,-0.817583,0.534998,0,-0.844853,0.449612,0,-0.893224,-0.0910072,0.992751,-0.078504,-0.0947491,0.992751,-0.0739435,-0.0982642,0.992751,-0.0692051,-0.101541,0.992751,-0.0643005,-0.104573,0.992751,-0.059241,-0.107355,0.992751,-0.0540381,-0.57581,0,0.817583,-0.492901,0,0.870086,-6.67469e-7,1,-0.00000201159,-6.72057e-7,1,-8.04453e-7,-0.813734,0,0.581237,0.581239,0,-0.813733,0.707105,-0.00000810377,0.707109,0.707097,-0.000136653,0.707117,0,0,0,0.707102,0,0.707112,0.707105,-0.00000405191,0.707109,0.707104,-0.0000112915,0.707109,-0.707107,0,-0.707107,1.18309e-9,-1,4.37736e-8,-2.36614e-8,1,-6.62519e-8],\"vertices\":[11.4576,-4,-17.2182,0.250038,-4,-17.4995,11.4576,-1,-17.2182,100.476,8.45,3.56281,89.9311,7.275,-1.11142,79.1696,6.1,-5.26262,68.2174,4.925,-8.88081,57.1008,3.75,-11.9572,45.8467,2.575,-14.4844,34.4821,1.4,-16.4564,23.0344,0.224998,-17.8683,11.5312,-1,-18.7169,0.250031,-1,-19,84.2239,8.45,37.9247,75.3847,7.275,34.0065,66.3638,6.1,30.5268,57.1832,4.925,27.4939,47.8647,3.75,24.9151,38.4309,2.575,22.7966,28.9045,1.4,21.1436,19.3085,0.224999,19.96,9.66607,-1,19.2488,0.249969,-1,19.0115,99.8344,8.45,4.9192,89.3569,7.275,0.274796,78.6641,6.1,-3.84988,67.7818,4.925,-7.44496,56.7362,3.75,-10.5017,45.5539,2.575,-13.0128,34.2619,1.4,-14.9722,22.8873,0.224998,-16.3751,0.250038,-1,-17.4995,96.413,8.45,12.1533,86.2945,7.275,7.66803,75.9682,6.1,3.68472,65.4588,4.925,0.212875,54.7918,3.75,-2.73912,43.9927,2.575,-5.16415,33.0877,1.4,-7.05638,22.1029,0.224998,-8.41124,11.0649,-1,-9.22548,0.250015,-1,-9.49712,88.2869,8.45,29.3342,79.0213,7.275,25.227,69.5653,6.1,21.5795,59.9417,4.925,18.4002,50.1737,3.75,15.697,40.2849,2.575,13.4764,30.2989,1.4,11.7437,20.24,0.224999,10.503,10.1323,-1,9.75734,0.249992,-1,9.50862,84.8654,8.45,36.5683,75.9589,7.275,32.6203,66.8693,6.1,29.1141,57.6188,4.925,26.058,48.2293,3.75,23.4596,38.7237,2.575,21.325,29.1247,1.4,19.6594,19.4556,0.224999,18.4668,9.73969,-1,17.7501,0.249969,-1,17.511,99.8344,5.45,4.9192,89.3569,4.275,0.274796,78.6641,3.1,-3.84988,67.7818,1.925,-7.44496,56.7362,0.749998,-10.5017,45.5539,-0.425002,-13.0128,34.2619,-1.6,-14.9722,22.8873,-2.775,-16.3751,100.476,5.45,3.56281,89.9311,4.275,-1.11142,79.1696,3.1,-5.26262,68.2174,1.925,-8.88081,57.1008,0.749998,-11.9572,45.8467,-0.425002,-14.4844,34.4821,-1.6,-16.4564,23.0344,-2.775,-17.8683,11.5312,-4,-18.7169,0.250031,-4,-19,96.413,5.45,12.1533,86.2945,4.275,7.66803,75.9682,3.1,3.68472,65.4588,1.925,0.212875,54.7918,0.749998,-2.73912,43.9927,-0.425001,-5.16415,33.0877,-1.6,-7.05638,22.1029,-2.775,-8.41124,11.0649,-4,-9.22548,0.250015,-4,-9.49712,88.2869,5.45,29.3342,79.0213,4.275,25.227,69.5653,3.1,21.5795,59.9417,1.925,18.4002,50.1737,0.749999,15.697,40.2849,-0.425001,13.4764,30.2989,-1.6,11.7437,20.24,-2.775,10.503,10.1323,-4,9.75734,0.249992,-4,9.50862,84.8654,5.45,36.5683,75.9589,4.275,32.6203,66.8693,3.1,29.1141,57.6188,1.925,26.058,48.2293,0.749999,23.4596,38.7237,-0.425,21.325,29.1247,-1.6,19.6594,19.4556,-2.775,18.4668,9.73969,-4,17.7501,0.249969,-4,17.511,84.2239,5.45,37.9247,75.3847,4.275,34.0065,66.3638,3.1,30.5268,57.1832,1.925,27.4939,47.8647,0.749999,24.9151,38.4309,-0.425,22.7966,28.9045,-1.6,21.1436,19.3085,-2.775,19.96,9.66607,-4,19.2488,0.249969,-4,19.0115,-8.74998,-4,-7.49998,-8.75002,-4,8.00005,0.250015,-4,-5.99995,0.249985,-4,6.50002,3.01145,54.0119,23.4871,165.993,15.5,49.6532,157.817,15.5,41.8768,149.083,14.325,34.3429,139.99,13.15,27.2466,130.559,11.975,20.6049,120.815,10.8,14.4341,110.779,9.625,8.74879,139.115,15.5,76.5313,132.29,15.5,70.0414,124.969,14.325,63.7261,117.346,13.15,57.7776,109.441,11.975,52.2103,101.273,10.8,47.0376,92.8602,9.625,42.2719,164.932,15.5,50.7142,156.809,15.5,42.9886,148.131,14.325,35.5027,139.096,13.15,28.4517,129.726,11.975,21.8525,120.043,10.8,15.7211,110.071,9.625,10.0721,159.274,15.5,56.3727,151.435,15.5,48.9179,143.054,14.325,41.6887,134.329,13.15,34.8793,125.28,11.975,28.5063,115.929,10.8,22.585,106.299,9.625,17.1296,145.835,15.5,69.8117,138.671,15.5,63.0002,130.997,14.325,56.3803,123.007,13.15,50.1448,114.721,11.975,44.3089,106.158,10.8,38.8867,97.3398,9.625,33.8911,140.176,15.5,75.4703,133.297,15.5,68.9296,125.92,14.325,62.5662,118.24,13.15,56.5724,110.275,11.975,50.9627,102.044,10.8,45.7506,93.5675,9.625,40.9486,164.932,12.5,50.7142,156.809,12.5,42.9886,148.131,11.325,35.5027,139.096,10.15,28.4517,129.726,8.975,21.8525,120.043,7.8,15.7211,110.071,6.625,10.0721,165.993,12.5,49.6532,157.817,12.5,41.8768,149.083,11.325,34.3429,139.99,10.15,27.2466,130.559,8.975,20.6049,120.815,7.8,14.4341,110.779,6.625,8.74879,159.274,12.5,56.3727,151.435,12.5,48.9179,143.054,11.325,41.6887,134.329,10.15,34.8793,125.28,8.975,28.5063,115.929,7.8,22.585,106.299,6.625,17.1296,145.835,12.5,69.8117,138.671,12.5,63.0002,130.997,11.325,56.3803,123.007,10.15,50.1448,114.721,8.975,44.3089,106.158,7.8,38.8867,97.3398,6.625,33.8911,140.176,12.5,75.4703,133.297,12.5,68.9296,125.92,11.325,62.5662,118.24,10.15,56.5724,110.275,8.975,50.9627,102.044,7.8,45.7506,93.5675,6.625,40.9486,139.115,12.5,76.5313,132.29,12.5,70.0414,124.969,11.325,63.7261,117.346,10.15,57.7776,109.441,8.975,52.2103,101.273,7.8,47.0376,92.8602,6.625,42.2719,158.745,15.5,44.527,159.806,15.5,43.466,153.087,15.5,50.1855,139.647,15.5,63.6246,133.989,15.5,69.2831,132.928,15.5,70.3441,158.745,12.5,44.527,159.806,12.5,43.466,153.087,12.5,50.1855,139.647,12.5,63.6246,133.989,12.5,69.2831,132.928,12.5,70.3441,140.537,12.5,62.3811,151.851,12.5,51.0674,157.154,12.5,58.492,147.962,12.5,67.6844,-133.998,54.0119,77.7434,100.476,9.45,3.56281,89.9311,8.275,-1.11142,79.1696,7.1,-5.26262,68.2174,5.925,-8.88081,57.1008,4.75,-11.9572,45.8467,3.575,-14.4844,34.4821,2.4,-16.4564,23.0344,1.225,-17.8683,11.5312,-0.00000272549,-18.7169,0.249992,-0.00000273786,-19,84.2239,9.45,37.9247,75.3847,8.275,34.0065,66.3638,7.1,30.5268,57.1832,5.925,27.4939,47.8647,4.75,24.9151,38.4309,3.575,22.7966,28.9045,2.4,21.1436,19.3085,1.225,19.96,9.66607,-0.00000106596,19.2488,0.249969,-0.00000107633,19.0115,11.4576,4,-17.2182,0.250038,4,-17.4995,11.4576,0.999997,-17.2182,100.476,10.45,3.56281,89.9311,9.275,-1.11142,79.1696,8.1,-5.26262,68.2174,6.925,-8.88081,57.1008,5.75,-11.9572,45.8467,4.575,-14.4844,34.4821,3.4,-16.4564,23.0344,2.225,-17.8683,11.5312,0.999997,-18.7169,0.250031,0.999997,-19,84.2239,10.45,37.9247,75.3847,9.275,34.0065,66.3638,8.1,30.5268,57.1832,6.925,27.4939,47.8647,5.75,24.9151,38.4309,4.575,22.7966,28.9045,3.4,21.1436,19.3085,2.225,19.96,9.66607,0.999999,19.2488,0.249969,0.999999,19.0115,99.8344,10.45,4.9192,89.3569,9.275,0.274796,78.6641,8.1,-3.84988,67.7818,6.925,-7.44496,56.7362,5.75,-10.5017,45.5539,4.575,-13.0128,34.2619,3.4,-14.9722,22.8873,2.225,-16.3751,0.250038,0.999997,-17.4995,96.413,10.45,12.1533,86.2945,9.275,7.66803,75.9682,8.1,3.68472,65.4588,6.925,0.212875,54.7918,5.75,-2.73912,43.9927,4.575,-5.16415,33.0877,3.4,-7.05638,22.1029,2.225,-8.41124,11.0649,0.999998,-9.22548,0.250015,0.999998,-9.49712,88.2869,10.45,29.3342,79.0213,9.275,25.227,69.5653,8.1,21.5795,59.9417,6.925,18.4002,50.1737,5.75,15.697,40.2849,4.575,13.4764,30.2989,3.4,11.7437,20.24,2.225,10.503,10.1323,0.999999,9.75734,0.249992,0.999999,9.50862,84.8654,10.45,36.5683,75.9589,9.275,32.6203,66.8693,8.1,29.1141,57.6188,6.925,26.058,48.2293,5.75,23.4596,38.7237,4.575,21.325,29.1247,3.4,19.6594,19.4556,2.225,18.4668,9.73969,0.999999,17.7501,0.249969,0.999999,17.511,99.8344,13.45,4.9192,89.3569,12.275,0.274796,78.6641,11.1,-3.84988,67.7818,9.925,-7.44496,56.7362,8.75,-10.5017,45.5539,7.575,-13.0128,34.2619,6.4,-14.9722,22.8873,5.225,-16.3751,100.476,13.45,3.56281,89.9311,12.275,-1.11142,79.1696,11.1,-5.26262,68.2174,9.925,-8.88081,57.1008,8.75,-11.9572,45.8467,7.575,-14.4844,34.4821,6.4,-16.4564,23.0344,5.225,-17.8683,11.5312,4,-18.7169,0.250031,4,-19,96.413,13.45,12.1533,86.2945,12.275,7.66803,75.9682,11.1,3.68472,65.4588,9.925,0.212875,54.7918,8.75,-2.73912,43.9927,7.575,-5.16415,33.0877,6.4,-7.05638,22.1029,5.225,-8.41124,11.0649,4,-9.22548,0.250015,4,-9.49712,88.2869,13.45,29.3342,79.0213,12.275,25.227,69.5653,11.1,21.5795,59.9417,9.925,18.4002,50.1737,8.75,15.697,40.2849,7.575,13.4764,30.2989,6.4,11.7437,20.24,5.225,10.503,10.1323,4,9.75734,0.249992,4,9.50862,84.8654,13.45,36.5683,75.9589,12.275,32.6203,66.8693,11.1,29.1141,57.6188,9.925,26.058,48.2293,8.75,23.4596,38.7237,7.575,21.325,29.1247,6.4,19.6594,19.4556,5.225,18.4668,9.73969,4,17.7501,0.249969,4,17.511,84.2239,13.45,37.9247,75.3847,12.275,34.0065,66.3638,11.1,30.5268,57.1832,9.925,27.4939,47.8647,8.75,24.9151,38.4309,7.575,22.7966,28.9045,6.4,21.1436,19.3085,5.225,19.96,9.66607,4,19.2488,0.249969,4,19.0115,-8.74998,4,-7.49998,-8.75002,4,8.00005,0.250015,4,-5.99995,0.249985,4,6.50002,-8.74998,-0.00000223518,-7.49998,-8.75002,-0.00000155766,8.00005,0.250015,-0.00000216961,-5.99995,0.249985,-0.00000162322,6.50002,3.01145,-21.0119,23.4871,165.993,16.5,49.6532,157.817,16.5,41.8768,149.083,15.325,34.3429,139.99,14.15,27.2466,130.559,12.975,20.6049,120.815,11.8,14.4341,110.779,10.625,8.74879,139.115,16.5,76.5313,132.29,16.5,70.0414,124.969,15.325,63.7261,117.346,14.15,57.7776,109.441,12.975,52.2103,101.273,11.8,47.0376,92.8602,10.625,42.2719,165.993,17.5,49.6532,157.817,17.5,41.8768,149.083,16.325,34.3429,139.99,15.15,27.2466,130.559,13.975,20.6049,120.815,12.8,14.4341,110.779,11.625,8.74879,139.115,17.5,76.5313,132.29,17.5,70.0414,124.969,16.325,63.7261,117.346,15.15,57.7776,109.441,13.975,52.2103,101.273,12.8,47.0376,92.8602,11.625,42.2719,164.932,17.5,50.7142,156.809,17.5,42.9886,148.131,16.325,35.5027,139.096,15.15,28.4517,129.726,13.975,21.8525,120.043,12.8,15.7211,110.071,11.625,10.0721,159.274,17.5,56.3727,151.435,17.5,48.9179,143.054,16.325,41.6887,134.329,15.15,34.8793,125.28,13.975,28.5063,115.929,12.8,22.585,106.299,11.625,17.1296,145.835,17.5,69.8117,138.671,17.5,63.0002,130.997,16.325,56.3803,123.007,15.15,50.1448,114.721,13.975,44.3089,106.158,12.8,38.8867,97.3398,11.625,33.8911,140.176,17.5,75.4703,133.297,17.5,68.9296,125.92,16.325,62.5662,118.24,15.15,56.5724,110.275,13.975,50.9627,102.044,12.8,45.7506,93.5675,11.625,40.9486,164.932,20.5,50.7142,156.809,20.5,42.9886,148.131,19.325,35.5027,139.096,18.15,28.4517,129.726,16.975,21.8525,120.043,15.8,15.7211,110.071,14.625,10.0721,165.993,20.5,49.6532,157.817,20.5,41.8768,149.083,19.325,34.3429,139.99,18.15,27.2466,130.559,16.975,20.6049,120.815,15.8,14.4341,110.779,14.625,8.74879,159.274,20.5,56.3727,151.435,20.5,48.9179,143.054,19.325,41.6887,134.329,18.15,34.8793,125.28,16.975,28.5063,115.929,15.8,22.585,106.299,14.625,17.1296,145.835,20.5,69.8117,138.671,20.5,63.0002,130.997,19.325,56.3803,123.007,18.15,50.1448,114.721,16.975,44.3089,106.158,15.8,38.8867,97.3398,14.625,33.8911,140.176,20.5,75.4703,133.297,20.5,68.9296,125.92,19.325,62.5662,118.24,18.15,56.5724,110.275,16.975,50.9627,102.044,15.8,45.7506,93.5675,14.625,40.9486,139.115,20.5,76.5313,132.29,20.5,70.0414,124.969,19.325,63.7261,117.346,18.15,57.7776,109.441,16.975,52.2103,101.273,15.8,47.0376,92.8602,14.625,42.2719,159.806,16.5,43.466,132.928,16.5,70.3441,158.745,17.5,44.527,159.806,17.5,43.466,153.087,17.5,50.1855,139.647,17.5,63.6246,133.989,17.5,69.2831,132.928,17.5,70.3441,158.745,20.5,44.527,159.806,20.5,43.466,153.087,20.5,50.1855,139.647,20.5,63.6246,133.989,20.5,69.2831,132.928,20.5,70.3441,140.537,20.5,62.3811,151.851,20.5,51.0674,157.154,20.5,58.492,147.962,20.5,67.6844,140.537,16.5,62.3811,151.851,16.5,51.0674,157.154,16.5,58.492,147.962,16.5,67.6844,-133.998,-21.0119,77.7434,191.626,-4,34.9806,191.626,12,34.9806,124.451,-4,102.156,124.451,12,102.156,181.019,-4,24.374,181.019,12,24.374,113.844,-4,91.5492,113.844,12,91.5492],\"faces\":[33,2,0,69,30,0,0,0,0,33,30,69,68,29,1,1,1,1,33,29,68,67,28,2,2,2,2,33,28,67,66,27,3,3,3,3,33,27,66,65,26,4,4,4,4,33,26,65,64,25,5,5,5,5,33,25,64,63,24,6,6,6,6,33,24,63,62,23,7,7,7,7,33,33,24,23,32,8,8,8,8,33,34,25,24,33,9,9,9,9,33,35,26,25,34,10,10,10,10,33,36,27,26,35,11,11,11,11,33,37,28,27,36,12,12,12,12,33,38,29,28,37,13,13,13,13,33,39,30,29,38,14,14,14,14,33,40,2,30,39,15,15,15,15,33,41,31,2,40,16,16,16,16,33,43,91,90,42,17,17,17,17,33,40,88,89,41,18,18,18,18,33,39,87,88,40,19,19,19,19,33,38,86,87,39,20,20,20,20,33,37,85,86,38,21,21,21,21,33,36,84,85,37,22,22,22,22,33,35,83,84,36,23,23,23,23,33,34,82,83,35,24,24,24,24,33,33,81,82,34,25,25,25,25,33,32,80,81,33,26,26,26,26,33,53,43,42,52,27,27,27,27,33,54,44,43,53,28,28,28,28,33,55,45,44,54,29,29,29,29,33,56,46,45,55,30,30,30,30,33,57,47,46,56,31,31,31,31,33,58,48,47,57,32,32,32,32,33,59,49,48,58,33,33,33,33,33,60,50,49,59,34,34,34,34,33,61,51,50,60,35,35,35,35,33,60,108,109,61,36,36,36,36,33,59,107,108,60,37,37,37,37,33,58,106,107,59,38,38,38,38,33,57,105,106,58,39,39,39,39,33,56,104,105,57,40,40,40,40,33,55,103,104,56,41,41,41,41,33,54,102,103,55,42,42,42,42,33,53,101,102,54,43,43,43,43,33,52,100,101,53,44,44,44,44,33,242,19,18,241,45,45,45,45,33,243,20,19,242,46,46,46,46,33,244,21,20,243,47,47,47,47,33,245,22,21,244,48,48,48,48,33,226,3,4,227,49,49,49,49,33,227,4,5,228,50,50,50,50,33,228,5,6,229,51,51,51,51,33,229,6,7,230,52,52,52,52,33,230,7,8,231,53,53,53,53,33,231,8,9,232,54,54,54,54,33,232,9,10,233,55,55,55,55,33,233,10,11,234,56,56,56,56,33,234,11,12,235,57,57,57,57,33,78,0,1,79,58,58,58,58,33,1,0,2,31,59,59,59,59,33,237,14,13,236,60,60,60,60,33,238,15,14,237,61,61,61,61,33,239,16,15,238,62,62,62,62,33,240,17,16,239,63,63,63,63,33,241,18,17,240,64,64,64,64,33,63,71,70,62,65,65,65,65,33,64,72,71,63,66,66,66,66,33,65,73,72,64,67,67,67,67,33,66,74,73,65,68,68,68,68,33,67,75,74,66,69,69,69,69,33,68,76,75,67,70,70,70,70,33,69,77,76,68,71,71,71,71,33,0,78,77,69,72,72,72,72,33,3,70,71,4,49,49,49,49,33,4,71,72,5,73,73,73,73,33,5,72,73,6,51,51,51,51,33,6,73,74,7,74,74,74,74,33,7,74,75,8,75,75,75,75,33,8,75,76,9,76,76,76,76,33,9,76,77,10,77,77,77,77,33,10,77,78,11,78,78,78,78,33,11,78,79,12,79,79,79,79,33,91,81,80,90,80,80,80,80,33,92,82,81,91,81,81,81,81,33,93,83,82,92,82,82,82,82,33,94,84,83,93,83,83,83,83,33,95,85,84,94,84,84,84,84,33,96,86,85,95,85,85,85,85,33,97,87,86,96,86,86,86,86,33,98,88,87,97,87,87,87,87,32,98,99,123,88,88,88,32,122,89,88,89,89,89,32,98,123,122,90,90,90,32,122,88,98,91,91,91,33,44,92,91,43,92,92,92,92,33,45,93,92,44,93,93,93,93,33,46,94,93,45,94,94,94,94,33,47,95,94,46,95,95,95,95,33,48,96,95,47,96,96,96,96,33,49,97,96,48,97,97,97,97,33,50,98,97,49,98,98,98,98,33,51,99,98,50,99,99,99,99,33,111,101,100,110,100,100,100,100,33,112,102,101,111,101,101,101,101,33,113,103,102,112,102,102,102,102,33,114,104,103,113,103,103,103,103,33,115,105,104,114,104,104,104,104,33,116,106,105,115,105,105,105,105,33,117,107,106,116,106,106,106,106,33,118,108,107,117,107,107,107,107,33,119,109,108,118,108,108,108,108,33,14,111,110,13,109,109,109,109,33,15,112,111,14,110,110,110,110,33,16,113,112,15,111,111,111,111,33,17,114,113,16,112,112,112,112,33,18,115,114,17,64,64,64,64,33,19,116,115,18,45,45,45,45,33,20,117,116,19,113,113,113,113,33,21,118,117,20,114,114,114,114,33,22,119,118,21,48,48,48,48,33,121,120,122,123,115,115,115,115,33,122,120,370,372,116,116,116,116,33,121,123,373,371,117,117,117,117,33,120,121,371,370,118,118,118,118,32,61,109,119,119,119,119,32,22,245,373,120,120,120,32,61,119,22,121,121,121,32,123,99,51,122,122,122,32,51,61,22,123,123,123,32,373,123,51,122,122,122,32,51,22,373,124,124,124,32,41,89,122,125,125,125,32,372,235,12,126,126,126,32,12,79,1,127,127,127,32,12,1,31,127,127,127,32,41,122,372,121,121,121,32,12,31,41,128,128,128,32,41,372,12,129,129,129,33,131,180,70,3,130,130,130,130,33,130,179,180,131,131,131,131,131,33,129,178,179,130,132,132,132,132,33,128,177,178,129,133,133,133,133,33,127,176,177,128,134,134,134,134,33,126,175,176,127,135,135,135,135,33,210,216,175,126,136,136,136,136,33,23,62,173,145,137,137,137,137,33,145,173,172,144,138,138,138,138,33,144,172,171,143,139,139,139,139,33,143,171,170,142,140,140,140,140,33,142,170,169,141,141,141,141,141,33,141,169,168,140,142,142,142,142,33,209,215,167,139,143,143,143,143,33,211,209,139,146,144,144,144,144,33,148,141,140,147,145,145,145,145,33,149,142,141,148,146,146,146,146,33,150,143,142,149,147,147,147,147,33,151,144,143,150,148,148,148,148,33,152,145,144,151,149,149,149,149,33,32,23,145,152,150,150,150,150,33,42,90,194,159,151,151,151,151,33,159,194,193,158,152,152,152,152,33,158,193,192,157,153,153,153,153,33,157,192,191,156,154,154,154,154,33,156,191,190,155,155,155,155,155,33,155,190,189,154,156,156,156,156,33,212,218,188,153,157,157,157,157,33,213,212,153,160,158,158,158,158,33,162,155,154,161,159,159,159,159,33,163,156,155,162,160,160,160,160,33,164,157,156,163,161,161,161,161,33,165,158,157,164,162,162,162,162,33,166,159,158,165,163,163,163,163,33,52,42,159,166,164,164,164,164,33,166,201,100,52,165,165,165,165,33,165,200,201,166,166,166,166,166,33,164,199,200,165,167,167,167,167,33,163,198,199,164,168,168,168,168,33,162,197,198,163,169,169,169,169,33,161,196,197,162,170,170,170,170,33,213,219,196,161,171,171,171,171,33,474,214,132,382,157,157,157,157,33,384,134,133,383,172,172,172,172,33,385,135,134,384,173,173,173,173,33,386,136,135,385,174,174,174,174,33,387,137,136,386,175,175,175,175,33,388,138,137,387,176,176,176,176,33,236,13,138,388,177,177,177,177,33,473,210,126,376,178,178,178,178,33,376,126,127,377,179,179,179,179,33,377,127,128,378,180,180,180,180,33,378,128,129,379,133,133,133,133,33,379,129,130,380,132,132,132,132,33,380,130,131,381,181,181,181,181,33,381,131,3,226,182,182,182,182,33,215,216,174,167,88,88,88,88,33,169,176,175,168,183,183,183,183,33,170,177,176,169,184,184,184,184,33,171,178,177,170,185,185,185,185,33,172,179,178,171,186,186,186,186,33,173,180,179,172,187,187,187,187,33,62,70,180,173,188,188,188,188,33,218,221,224,188,88,88,88,88,33,190,183,182,189,189,189,189,189,33,191,184,183,190,190,190,190,190,33,192,185,184,191,191,191,191,191,33,193,186,185,192,192,192,192,192,33,194,187,186,193,193,193,193,193,33,90,80,187,194,194,194,194,194,33,211,217,182,147,195,195,195,195,33,147,182,183,148,196,196,196,196,33,148,183,184,149,197,197,197,197,33,149,184,185,150,198,198,198,198,33,150,185,186,151,199,199,199,199,33,151,186,187,152,200,200,200,200,33,152,187,80,32,201,201,201,201,33,220,219,195,202,202,202,202,202,33,204,197,196,203,203,203,203,203,33,205,198,197,204,204,204,204,204,33,206,199,198,205,205,205,205,205,33,207,200,199,206,206,206,206,206,33,208,201,200,207,207,207,207,207,33,110,100,201,208,208,208,208,208,33,214,220,202,132,157,157,157,157,33,134,204,203,133,209,209,209,209,33,135,205,204,134,210,210,210,210,33,136,206,205,135,211,211,211,211,33,137,207,206,136,212,212,212,212,33,138,208,207,137,213,213,213,213,33,13,110,208,138,214,214,214,214,33,133,203,220,214,215,215,215,215,33,203,196,219,220,216,216,216,216,33,146,181,217,211,217,217,217,217,32,182,217,222,218,218,218,32,221,218,189,219,219,219,32,182,222,221,220,220,220,32,189,182,221,221,221,221,33,168,175,216,215,88,88,88,88,33,375,125,210,473,222,222,222,222,33,383,133,214,474,223,223,223,223,33,160,195,219,213,224,224,224,224,33,161,154,212,213,225,225,225,225,33,154,189,218,212,226,226,226,226,33,147,140,209,211,216,216,216,216,33,140,168,215,209,227,227,227,227,33,125,174,216,210,217,217,217,217,33,223,493,492,222,228,228,228,228,33,222,217,181,223,229,229,229,229,33,222,492,491,221,230,230,230,230,33,221,491,494,224,231,231,231,231,32,153,188,224,232,232,232,32,494,382,132,233,233,233,32,132,202,195,234,234,234,32,132,195,160,235,235,235,32,153,224,494,236,236,236,32,494,132,160,237,237,237,32,494,160,153,238,238,238,32,125,375,493,239,239,239,32,493,223,181,240,240,240,32,493,181,146,241,241,241,32,167,174,125,230,230,230,32,493,146,139,242,242,242,32,139,167,125,243,243,243,32,125,493,139,244,244,244,33,248,276,315,246,245,245,245,245,33,276,275,314,315,1,1,1,1,33,275,274,313,314,2,2,2,2,33,274,273,312,313,246,246,246,246,33,273,272,311,312,247,247,247,247,33,272,271,310,311,248,248,248,248,33,271,270,309,310,249,249,249,249,33,270,269,308,309,250,250,250,250,33,279,278,269,270,251,251,251,251,33,280,279,270,271,252,252,252,252,33,281,280,271,272,253,253,253,253,33,282,281,272,273,254,254,254,254,33,283,282,273,274,255,255,255,255,33,284,283,274,275,256,256,256,256,33,285,284,275,276,257,257,257,257,33,286,285,276,248,258,258,258,258,33,287,286,248,277,259,259,259,259,33,289,288,336,337,260,260,260,260,33,286,287,335,334,261,261,261,261,33,285,286,334,333,19,19,19,19,33,284,285,333,332,20,20,20,20,33,283,284,332,331,262,262,262,262,33,282,283,331,330,263,263,263,263,33,281,282,330,329,264,264,264,264,33,280,281,329,328,24,24,24,24,33,279,280,328,327,25,25,25,25,33,278,279,327,326,26,26,26,26,33,299,298,288,289,265,265,265,265,33,300,299,289,290,266,266,266,266,33,301,300,290,291,267,267,267,267,33,302,301,291,292,268,268,268,268,33,303,302,292,293,269,269,269,269,33,304,303,293,294,270,270,270,270,33,305,304,294,295,271,271,271,271,33,306,305,295,296,272,272,272,272,33,307,306,296,297,273,273,273,273,33,306,307,355,354,274,274,274,274,33,305,306,354,353,37,37,37,37,33,304,305,353,352,38,38,38,38,33,303,304,352,351,275,275,275,275,33,302,303,351,350,276,276,276,276,33,301,302,350,349,277,277,277,277,33,300,301,349,348,42,42,42,42,33,299,300,348,347,278,278,278,278,33,298,299,347,346,279,279,279,279,33,242,241,264,265,280,280,280,280,33,243,242,265,266,113,113,113,113,33,244,243,266,267,47,47,47,47,33,245,244,267,268,48,48,48,48,33,226,227,250,249,281,281,281,281,33,227,228,251,250,50,50,50,50,33,228,229,252,251,51,51,51,51,33,229,230,253,252,282,282,282,282,33,230,231,254,253,283,283,283,283,33,231,232,255,254,54,54,54,54,33,232,233,256,255,284,284,284,284,33,233,234,257,256,56,56,56,56,33,234,235,258,257,285,285,285,285,33,324,325,247,246,286,286,286,286,33,248,246,247,277,287,287,287,287,33,237,236,259,260,288,288,288,288,33,238,237,260,261,110,110,110,110,33,239,238,261,262,289,289,289,289,33,240,239,262,263,63,63,63,63,33,241,240,263,264,64,64,64,64,33,309,308,316,317,290,290,290,290,33,310,309,317,318,291,291,291,291,33,311,310,318,319,292,292,292,292,33,312,311,319,320,293,293,293,293,33,313,312,320,321,294,294,294,294,33,314,313,321,322,295,295,295,295,33,315,314,322,323,296,296,296,296,33,246,315,323,324,297,297,297,297,33,249,250,317,316,298,298,298,298,33,250,251,318,317,73,73,73,73,33,251,252,319,318,299,299,299,299,33,252,253,320,319,300,300,300,300,33,253,254,321,320,53,53,53,53,33,254,255,322,321,301,301,301,301,33,255,256,323,322,77,77,77,77,33,256,257,324,323,302,302,302,302,33,257,258,325,324,79,79,79,79,33,337,336,326,327,303,303,303,303,33,338,337,327,328,304,304,304,304,33,339,338,328,329,305,305,305,305,33,340,339,329,330,306,306,306,306,33,341,340,330,331,307,307,307,307,33,342,341,331,332,308,308,308,308,33,343,342,332,333,309,309,309,309,33,344,343,333,334,310,310,310,310,32,369,345,344,286,286,286,32,344,334,335,311,311,311,32,368,369,344,312,312,312,32,344,335,368,313,313,313,33,290,289,337,338,314,314,314,314,33,291,290,338,339,93,93,93,93,33,292,291,339,340,315,315,315,315,33,293,292,340,341,316,316,316,316,33,294,293,341,342,317,317,317,317,33,295,294,342,343,318,318,318,318,33,296,295,343,344,98,98,98,98,33,297,296,344,345,99,99,99,99,33,357,356,346,347,319,319,319,319,33,358,357,347,348,320,320,320,320,33,359,358,348,349,321,321,321,321,33,360,359,349,350,322,322,322,322,33,361,360,350,351,323,323,323,323,33,362,361,351,352,324,324,324,324,33,363,362,352,353,325,325,325,325,33,364,363,353,354,326,326,326,326,33,365,364,354,355,327,327,327,327,33,260,259,356,357,288,288,288,288,33,261,260,357,358,61,61,61,61,33,262,261,358,359,328,328,328,328,33,263,262,359,360,63,63,63,63,33,264,263,360,361,329,329,329,329,33,265,264,361,362,280,280,280,280,33,266,265,362,363,113,113,113,113,33,267,266,363,364,114,114,114,114,33,268,267,364,365,48,48,48,48,33,367,369,368,366,330,330,330,330,33,368,372,370,366,331,331,331,331,33,367,371,373,369,117,117,117,117,33,366,370,371,367,118,118,118,118,32,297,345,369,122,122,122,32,373,245,268,120,120,120,32,268,365,355,119,119,119,32,268,355,307,119,119,119,32,297,369,373,122,122,122,32,373,268,307,332,332,332,32,297,373,307,333,333,333,32,277,247,325,127,127,127,32,258,235,372,334,334,334,32,277,325,258,127,127,127,32,368,335,287,335,335,335,32,277,258,372,336,336,336,32,372,368,287,119,119,119,32,277,372,287,337,337,337,33,395,249,316,444,338,338,338,338,33,394,395,444,443,181,181,181,181,33,393,394,443,442,132,132,132,132,33,392,393,442,441,339,339,339,339,33,391,392,441,440,180,180,180,180,33,390,391,440,439,135,135,135,135,33,476,390,439,482,136,136,136,136,33,269,409,437,308,340,340,340,340,33,409,408,436,437,341,341,341,341,33,408,407,435,436,139,139,139,139,33,407,406,434,435,342,342,342,342,33,406,405,433,434,343,343,343,343,33,405,404,432,433,142,142,142,142,33,475,403,431,481,143,143,143,143,33,477,410,403,475,327,327,327,327,33,412,411,404,405,344,344,344,344,33,413,412,405,406,345,345,345,345,33,414,413,406,407,346,346,346,346,33,415,414,407,408,347,347,347,347,33,416,415,408,409,348,348,348,348,33,278,416,409,269,349,349,349,349,33,288,423,458,336,350,350,350,350,33,423,422,457,458,351,351,351,351,33,422,421,456,457,352,352,352,352,33,421,420,455,456,154,154,154,154,33,420,419,454,455,155,155,155,155,33,419,418,453,454,156,156,156,156,33,478,417,452,484,157,157,157,157,33,479,424,417,478,327,327,327,327,33,426,425,418,419,353,353,353,353,33,427,426,419,420,354,354,354,354,33,428,427,420,421,355,355,355,355,33,429,428,421,422,356,356,356,356,33,430,429,422,423,357,357,357,357,33,298,430,423,288,358,358,358,358,33,430,298,346,465,359,359,359,359,33,429,430,465,464,360,360,360,360,33,428,429,464,463,361,361,361,361,33,427,428,463,462,362,362,362,362,33,426,427,462,461,363,363,363,363,33,425,426,461,460,170,170,170,170,33,479,425,460,485,171,171,171,171,33,474,382,396,480,143,143,143,143,33,384,383,397,398,172,172,172,172,33,385,384,398,399,364,364,364,364,33,386,385,399,400,174,174,174,174,33,387,386,400,401,365,365,365,365,33,388,387,401,402,176,176,176,176,33,236,388,402,259,366,366,366,366,33,473,376,390,476,178,178,178,178,33,376,377,391,390,367,367,367,367,33,377,378,392,391,134,134,134,134,33,378,379,393,392,133,133,133,133,33,379,380,394,393,368,368,368,368,33,380,381,395,394,181,181,181,181,33,381,226,249,395,369,369,369,369,33,481,431,438,482,327,327,327,327,33,433,432,439,440,370,370,370,370,33,434,433,440,441,371,371,371,371,33,435,434,441,442,372,372,372,372,33,436,435,442,443,373,373,373,373,33,437,436,443,444,374,374,374,374,33,308,437,444,316,375,375,375,375,33,484,452,490,487,376,376,376,376,33,454,453,446,447,377,377,377,377,33,455,454,447,448,378,378,378,378,33,456,455,448,449,379,379,379,379,33,457,456,449,450,380,380,380,380,33,458,457,450,451,381,381,381,381,33,336,458,451,326,382,382,382,382,33,477,411,446,483,195,195,195,195,33,411,412,447,446,196,196,196,196,33,412,413,448,447,197,197,197,197,33,413,414,449,448,383,383,383,383,33,414,415,450,449,384,384,384,384,33,415,416,451,450,200,200,200,200,33,416,278,326,451,385,385,385,385,33,486,466,459,485,327,327,327,327,33,468,467,460,461,386,386,386,386,33,469,468,461,462,387,387,387,387,33,470,469,462,463,388,388,388,388,33,471,470,463,464,389,389,389,389,33,472,471,464,465,390,390,390,390,33,356,472,465,346,391,391,391,391,33,480,396,466,486,157,157,157,157,33,398,397,467,468,209,209,209,209,33,399,398,468,469,173,173,173,173,33,400,399,469,470,392,392,392,392,33,401,400,470,471,212,212,212,212,33,402,401,471,472,393,393,393,393,33,259,402,472,356,177,177,177,177,33,397,480,486,467,215,215,215,215,33,467,486,485,460,286,286,286,286,33,410,477,483,445,217,217,217,217,32,453,484,487,394,394,394,32,488,483,446,327,327,327,32,453,487,488,286,286,286,32,453,488,446,327,327,327,33,432,481,482,439,327,327,327,327,33,375,473,476,389,224,224,224,224,33,383,474,480,397,215,215,215,215,33,424,479,485,459,224,224,224,224,33,425,479,478,418,395,395,395,395,33,418,478,484,453,226,226,226,226,33,411,477,475,404,286,286,286,286,33,404,475,481,432,227,227,227,227,33,389,476,482,438,217,217,217,217,33,489,488,492,493,396,396,396,396,33,488,489,445,483,327,327,327,327,33,488,487,491,492,230,230,230,230,33,487,490,494,491,397,397,397,397,32,490,452,417,232,232,232,32,424,459,466,235,235,235,32,494,490,417,236,236,236,32,424,466,396,234,234,234,32,494,417,424,398,398,398,32,396,382,494,233,233,233,32,424,396,494,399,399,399,32,375,389,438,400,400,400,32,438,431,403,243,243,243,32,410,445,489,241,241,241,32,375,438,403,236,236,236,32,410,489,493,401,401,401,32,375,403,410,402,402,402,32,410,493,375,403,403,403,33,496,497,499,498,230,230,230,230,33,498,499,503,502,143,143,143,143,33,502,503,501,500,404,404,404,404,33,500,501,497,496,217,217,217,217,33,498,502,500,496,405,405,405,405,33,503,499,497,501,406,406,406,406]},\"straight_0\":{\"normals\":[-2.43709e-15,-1,4.47036e-8,-7.95649e-8,0,1,-5.30433e-8,-0.00000349681,1,0,-1,0,7.95649e-8,0,-1,0.164399,0,-0.986394,0,-1,2.98023e-8,-5.29818e-9,-1,3.17891e-8,-5.26938e-15,-1,6.81196e-8,-1.32456e-8,-1,7.94738e-8,1.89446e-10,-1,4.00205e-8,7.74418e-10,-1,1.63596e-7,-0.164399,0,0.986394,1,0,0,1,0,0,-1,-1.19209e-7,-5.96046e-8,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,2.43709e-15,-1,4.47036e-8,-7.95649e-8,0,-1,-5.30433e-8,-0.00000349681,-1,7.95649e-8,0,1,0.164399,0,0.986394,0,-1,5.96046e-8,0,-1,0,1.05964e-8,-1,6.35782e-8,1.24339e-9,-1,-7.4605e-9,-6.52555e-10,-1,8.04516e-8,-0.164399,0,-0.986394,1,0,0,-1,-1.19209e-7,5.96046e-8,-1,0,0,2.43709e-15,1,-4.47036e-8,-5.30433e-8,0.00000349681,1,0,1,0,0,1,-5.96046e-8,0,1,0,1.05964e-8,1,-6.35782e-8,1.24339e-9,1,7.4605e-9,-6.52555e-10,1,-8.04516e-8,-1,1.19209e-7,-5.96046e-8,1,0,0,-2.43709e-15,1,-4.47036e-8,-5.30433e-8,0.00000349681,-1,0,1,0,0,1,-2.98023e-8,-5.29818e-9,1,-3.17891e-8,-5.26938e-15,1,-6.81196e-8,-1.32456e-8,1,-7.94738e-8,1.89446e-10,1,-4.00205e-8,7.74418e-10,1,-1.63596e-7,-1,1.19209e-7,5.96046e-8,1,0,0,-1,0,0],\"faces\":[33,5,12,11,6,0,0,0,0,33,7,0,44,47,1,1,1,1,33,6,11,9,2,2,2,2,2,33,0,7,8,1,3,3,3,3,33,1,8,12,5,4,4,4,4,33,45,3,10,46,5,5,5,5,32,3,15,29,6,6,6,32,29,13,4,7,7,7,32,4,2,9,8,8,8,32,9,10,3,9,9,9,32,3,29,4,10,10,10,32,4,9,3,11,11,11,33,48,4,13,49,12,12,12,12,32,44,0,1,13,13,13,32,44,1,5,14,14,14,32,2,4,48,14,14,14,32,44,5,6,13,13,13,32,6,2,48,14,14,14,32,6,48,44,13,13,13,33,3,45,67,15,15,15,15,15,33,29,72,49,13,16,16,16,16,32,12,8,7,17,17,17,32,46,10,9,18,18,18,32,46,9,11,19,19,19,32,12,7,47,20,20,20,32,46,11,12,19,19,19,32,47,46,12,17,17,17,33,20,21,26,27,21,21,21,21,33,66,14,22,70,22,22,22,22,33,21,17,24,26,23,23,23,23,33,14,16,23,22,3,3,3,3,33,16,20,27,23,24,24,24,24,33,68,69,25,18,25,25,25,25,32,29,15,18,26,26,26,32,18,25,24,3,3,3,32,24,17,19,27,27,27,32,19,28,29,28,28,28,32,29,18,24,29,29,29,32,24,19,29,30,30,30,33,71,73,28,19,31,31,31,31,32,16,14,66,14,14,14,32,71,19,17,13,13,13,32,71,17,21,14,14,14,32,20,16,66,14,14,14,32,71,21,20,13,13,13,32,66,71,20,32,32,32,33,18,15,67,68,33,33,33,33,33,29,28,73,72,16,16,16,16,32,22,23,27,20,20,20,32,26,24,25,17,17,17,32,70,22,27,19,19,19,32,26,25,69,20,20,20,32,70,27,26,19,19,19,32,26,69,70,34,34,34,33,35,36,41,42,35,35,35,35,33,44,30,37,47,1,1,1,1,33,36,32,39,41,36,36,36,36,33,30,31,38,37,37,37,37,37,33,31,35,42,38,4,4,4,4,33,45,46,40,33,5,5,5,5,32,65,51,33,38,38,38,32,33,40,39,37,37,37,32,39,32,34,39,39,39,32,34,43,65,40,40,40,32,65,33,39,41,41,41,32,39,34,65,42,42,42,33,48,49,43,34,12,12,12,12,32,31,30,44,32,32,32,32,48,34,32,13,13,13,32,48,32,36,32,32,32,32,35,31,44,13,13,13,32,48,36,35,13,13,13,32,44,48,35,14,14,14,33,33,51,67,45,43,43,43,43,33,65,43,49,72,44,44,44,44,32,37,38,42,17,17,17,32,41,39,40,17,17,17,32,47,37,42,17,17,17,32,41,40,46,17,17,17,32,47,42,41,17,17,17,32,41,46,47,19,19,19,33,56,63,62,57,45,45,45,45,33,66,70,58,50,22,22,22,22,33,57,62,60,53,46,46,46,46,33,50,58,59,52,47,47,47,47,33,52,59,63,56,24,24,24,24,33,68,54,61,69,25,25,25,25,32,54,51,65,48,48,48,32,65,64,55,49,49,49,32,55,53,60,50,50,50,32,60,61,54,51,51,51,32,54,65,55,52,52,52,32,55,60,54,53,53,53,33,71,55,64,73,31,31,31,31,32,66,50,52,13,13,13,32,66,52,56,32,32,32,32,53,55,71,32,32,32,32,66,56,57,13,13,13,32,57,53,71,13,13,13,32,57,71,66,32,32,32,33,54,68,67,51,54,54,54,54,33,65,72,73,64,55,55,55,55,32,63,59,58,17,17,17,32,69,61,60,56,56,56,32,69,60,62,17,17,17,32,63,58,70,17,17,17,32,69,62,63,17,17,17,32,70,69,63,34,34,34],\"uvs\":[],\"vertices\":[431.75,-4,19,431.75,-4,17.5,431.75,-4,9.50001,9.25002,-4,8.00001,431.75,-4,6.00001,431.75,-0.999999,17.5,431.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.50001,0.25,-1,9.49999,0.25,-0.999999,17.5,440.75,-4,7.50001,431.75,-4,-19,9.25002,-4,1.15241e-7,431.75,-4,-17.5,431.75,-4,-9.50001,9.25002,-4,-8.00001,431.75,-4,-6.00001,431.75,-1,-17.5,431.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.50001,0.25,-1,-9.49999,0.25,-1,-17.5,440.75,-4,-7.50001,440.75,-4,1.15241e-7,431.75,4,19,431.75,4,17.5,431.75,4,9.50001,9.25002,4,8.00001,431.75,4,6.00001,431.75,1,17.5,431.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.50001,0.25,1,9.49999,0.25,1,17.5,440.75,4,7.50001,431.75,8.30517e-7,19,9.25002,3.49691e-7,8.00001,0.25,2.84124e-7,6.50001,0.25,8.30515e-7,19,431.75,2.62269e-7,6.00001,440.75,3.27836e-7,7.50001,431.75,4,-19,9.25002,4,-2.3445e-7,431.75,4,-17.5,431.75,4,-9.50001,9.25002,4,-8.00001,431.75,4,-6.00001,431.75,0.999999,-17.5,431.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.50001,0.25,1,-9.49999,0.25,0.999999,-17.5,440.75,4,-7.50001,440.75,4,-2.3445e-7,431.75,-8.30517e-7,-19,9.25002,-2.6054e-15,-5.96046e-8,9.25002,-3.49691e-7,-8.00001,0.25,-2.84124e-7,-6.50001,0.25,-8.30515e-7,-19,431.75,-2.62269e-7,-6.00001,440.75,-2.6054e-15,-5.96046e-8,440.75,-3.27836e-7,-7.50001],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":74,\"version\":3,\"normals\":57,\"type\":\"Geometry\",\"faces\":108}},\"straight_2\":{\"faces\":[33,5,12,11,6,0,0,0,0,33,7,0,44,46,1,1,1,1,33,6,11,9,2,2,2,2,2,33,0,7,8,1,3,3,3,3,33,1,8,12,5,4,4,4,4,33,45,3,10,47,5,5,5,5,32,3,15,29,6,6,6,32,29,13,4,7,7,7,32,4,2,9,8,8,8,32,9,10,3,9,9,9,32,3,29,4,10,10,10,32,4,9,3,11,11,11,33,48,4,13,49,12,12,12,12,32,44,0,1,13,13,13,32,44,1,5,14,14,14,32,2,4,48,14,14,14,32,44,5,6,13,13,13,32,6,2,48,14,14,14,32,6,48,44,13,13,13,33,3,45,67,15,15,15,15,15,33,29,72,49,13,16,16,16,16,32,12,8,7,17,17,17,32,47,10,9,18,18,18,32,47,9,11,19,19,19,32,12,7,46,20,20,20,32,47,11,12,19,19,19,32,46,47,12,17,17,17,33,20,21,26,27,21,21,21,21,33,66,14,22,69,22,22,22,22,33,21,17,24,26,23,23,23,23,33,14,16,23,22,3,3,3,3,33,16,20,27,23,24,24,24,24,33,68,70,25,18,25,25,25,25,32,29,15,18,26,26,26,32,18,25,24,3,3,3,32,24,17,19,27,27,27,32,19,28,29,28,28,28,32,29,18,24,29,29,29,32,24,19,29,30,30,30,33,71,73,28,19,31,31,31,31,32,16,14,66,14,14,14,32,71,19,17,13,13,13,32,71,17,21,14,14,14,32,20,16,66,14,14,14,32,71,21,20,13,13,13,32,66,71,20,32,32,32,33,18,15,67,68,33,33,33,33,33,29,28,73,72,16,16,16,16,32,22,23,27,20,20,20,32,26,24,25,17,17,17,32,69,22,27,19,19,19,32,26,25,70,20,20,20,32,69,27,26,19,19,19,32,26,70,69,34,34,34,33,35,36,41,42,35,35,35,35,33,44,30,37,46,1,1,1,1,33,36,32,39,41,36,36,36,36,33,30,31,38,37,37,37,37,37,33,31,35,42,38,38,38,38,38,33,45,47,40,33,5,5,5,5,32,65,51,33,39,39,39,32,33,40,39,37,37,37,32,39,32,34,40,40,40,32,34,43,65,41,41,41,32,65,33,39,42,42,42,32,39,34,65,43,43,43,33,48,49,43,34,12,12,12,12,32,31,30,44,32,32,32,32,48,34,32,13,13,13,32,48,32,36,32,32,32,32,35,31,44,13,13,13,32,48,36,35,13,13,13,32,44,48,35,14,14,14,33,33,51,67,45,44,44,44,44,33,65,43,49,72,45,45,45,45,32,37,38,42,17,17,17,32,41,39,40,17,17,17,32,46,37,42,17,17,17,32,41,40,47,17,17,17,32,46,42,41,17,17,17,32,41,47,46,19,19,19,33,56,63,62,57,46,46,46,46,33,66,69,58,50,22,22,22,22,33,57,62,60,53,47,47,47,47,33,50,58,59,52,48,48,48,48,33,52,59,63,56,49,49,49,49,33,68,54,61,70,25,25,25,25,32,54,51,65,50,50,50,32,65,64,55,51,51,51,32,55,53,60,52,52,52,32,60,61,54,53,53,53,32,54,65,55,54,54,54,32,55,60,54,55,55,55,33,71,55,64,73,31,31,31,31,32,66,50,52,13,13,13,32,66,52,56,32,32,32,32,53,55,71,32,32,32,32,66,56,57,13,13,13,32,57,53,71,13,13,13,32,57,71,66,32,32,32,33,54,68,67,51,56,56,56,56,33,65,72,73,64,57,57,57,57,32,63,59,58,17,17,17,32,70,61,60,58,58,58,32,70,60,62,17,17,17,32,63,58,69,17,17,17,32,70,62,63,17,17,17,32,69,70,63,34,34,34],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":74,\"version\":3,\"normals\":59,\"type\":\"Geometry\",\"faces\":108},\"uvs\":[],\"vertices\":[107.75,-4,19,107.75,-4,17.5,107.75,-4,9.50001,9.25002,-4,8.00001,107.75,-4,6.00001,107.75,-0.999999,17.5,107.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.50001,0.25,-1,9.49999,0.25,-0.999999,17.5,116.75,-4,7.50001,107.75,-4,-19,9.25002,-4,1.15241e-7,107.75,-4,-17.5,107.75,-4,-9.50001,9.25002,-4,-8.00001,107.75,-4,-6.00001,107.75,-1,-17.5,107.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.50001,0.25,-1,-9.49999,0.25,-1,-17.5,116.75,-4,-7.50001,116.75,-4,1.15241e-7,107.75,4,19,107.75,4,17.5,107.75,4,9.50001,9.25002,4,8.00001,107.75,4,6.00001,107.75,1,17.5,107.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.50001,0.25,1,9.49999,0.25,1,17.5,116.75,4,7.50001,107.75,8.30517e-7,19,9.25002,3.49691e-7,8.00001,0.25,8.30515e-7,19,0.25,2.84124e-7,6.50001,107.75,2.62269e-7,6.00001,116.75,3.27836e-7,7.50001,107.75,4,-19,9.25002,4,-2.3445e-7,107.75,4,-17.5,107.75,4,-9.50001,9.25002,4,-8.00001,107.75,4,-6.00001,107.75,0.999999,-17.5,107.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.50001,0.25,1,-9.49999,0.25,0.999999,-17.5,116.75,4,-7.50001,116.75,4,-2.3445e-7,107.75,-8.30517e-7,-19,9.25002,-2.6054e-15,-5.96046e-8,9.25002,-3.49691e-7,-8.00001,0.25,-8.30515e-7,-19,0.25,-2.84124e-7,-6.50001,107.75,-2.62269e-7,-6.00001,116.75,-2.6054e-15,-5.96046e-8,116.75,-3.27836e-7,-7.50001],\"normals\":[-9.78237e-15,-1,4.47036e-8,-3.1937e-7,0,1,-2.12913e-7,-0.00000349681,1,0,-1,0,3.1937e-7,0,-1,0.164399,0,-0.986394,0,-1,2.98023e-8,-5.2982e-9,-1,3.17891e-8,-2.1151e-14,-1,6.81196e-8,-1.32456e-8,-1,7.94738e-8,8.32174e-10,-1,4.09846e-8,3.67514e-9,-1,1.81001e-7,-0.164399,0,0.986394,1,0,0,1,0,0,-1,-1.19209e-7,-5.96046e-8,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,9.78237e-15,-1,4.47036e-8,-3.1937e-7,0,-1,-2.12913e-7,-0.00000349681,-1,3.1937e-7,0,1,0.164399,0,0.986394,0,-1,5.96046e-8,0,-1,0,1.05964e-8,-1,6.35782e-8,8.01423e-9,-1,-4.80866e-8,-2.72031e-9,-1,8.35532e-8,-0.164399,0,-0.986394,1,0,0,-1,-1.19209e-7,5.96046e-8,-1,0,0,9.78237e-15,1,-4.47036e-8,-2.12913e-7,0.00000349681,1,0,1,0,3.1937e-7,0,-1,0,1,-5.96046e-8,0,1,0,1.05964e-8,1,-6.35782e-8,8.01423e-9,1,4.80866e-8,-2.72031e-9,1,-8.35532e-8,-1,1.19209e-7,-5.96046e-8,1,0,0,-9.78237e-15,1,-4.47036e-8,-2.12913e-7,0.00000349681,-1,0,1,0,3.1937e-7,0,1,0,1,-2.98023e-8,-5.2982e-9,1,-3.17891e-8,-2.1151e-14,1,-6.81196e-8,-1.32456e-8,1,-7.94738e-8,8.32174e-10,1,-4.09846e-8,3.67514e-9,1,-1.81001e-7,-1,1.19209e-7,5.96046e-8,1,0,0,-1,0,0]},\"straight_4\":{\"uvs\":[],\"normals\":[-1.96562e-14,-1,4.47036e-8,-6.41724e-7,0,1,-4.27816e-7,-0.00000349681,1,0,-1,0,6.41724e-7,0,-1,0.164399,0,-0.986394,0,-1,2.98023e-8,-5.2982e-9,-1,3.17891e-8,-4.24997e-14,-1,6.81196e-8,-1.32456e-8,-1,7.94738e-8,1.915e-9,-1,4.26089e-8,9.78156e-9,-1,2.1764e-7,-0.164399,0,0.986394,1,0,0,1,0,0,-1,-1.19209e-7,-5.96046e-8,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,1.96562e-14,-1,4.47036e-8,-6.41724e-7,0,-1,-4.27816e-7,-0.00000349681,-1,6.41724e-7,0,1,0.164399,0,0.986394,0,-1,5.96046e-8,0,-1,0,1.05964e-8,-1,6.35782e-8,8.67167e-8,-1,-5.20313e-7,-5.76479e-9,-1,8.81199e-8,-0.164399,0,-0.986394,1,0,0,-1,-1.19209e-7,5.96046e-8,-1,0,0,1.96562e-14,1,-4.47036e-8,-4.27816e-7,0.00000349681,1,0,1,0,0,1,-5.96046e-8,0,1,0,1.05964e-8,1,-6.35782e-8,8.67167e-8,1,5.20313e-7,-5.76479e-9,1,-8.81199e-8,-1,1.19209e-7,-5.96046e-8,1,0,0,-1.96562e-14,1,-4.47036e-8,-4.27816e-7,0.00000349681,-1,0,1,0,0,1,-2.98023e-8,-5.2982e-9,1,-3.17891e-8,-4.24997e-14,1,-6.81196e-8,-1.32456e-8,1,-7.94738e-8,1.915e-9,1,-4.26089e-8,9.78156e-9,1,-2.1764e-7,-1,1.19209e-7,5.96046e-8,1,0,0,-1,0,0],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":74,\"version\":3,\"normals\":57,\"type\":\"Geometry\",\"faces\":108},\"vertices\":[53.75,-4,19,53.75,-4,17.5,53.75,-4,9.50001,9.25002,-4,8.00001,53.75,-4,6.00001,53.75,-0.999999,17.5,53.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.50001,0.25,-1,9.49999,0.25,-0.999999,17.5,62.75,-4,7.50001,53.75,-4,-19,9.25002,-4,1.15241e-7,53.75,-4,-17.5,53.75,-4,-9.50001,9.25002,-4,-8.00001,53.75,-4,-6.00001,53.75,-1,-17.5,53.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.50001,0.25,-1,-9.49999,0.25,-1,-17.5,62.75,-4,-7.50001,62.75,-4,1.15241e-7,53.75,4,19,53.75,4,17.5,53.75,4,9.50001,9.25002,4,8.00001,53.75,4,6.00001,53.75,1,17.5,53.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.50001,0.25,1,9.49999,0.25,1,17.5,62.75,4,7.50001,53.75,8.30517e-7,19,9.25002,3.49691e-7,8.00001,0.25,8.30515e-7,19,0.25,2.84124e-7,6.50001,53.75,2.62269e-7,6.00001,62.75,3.27836e-7,7.50001,53.75,4,-19,9.25002,4,-2.3445e-7,53.75,4,-17.5,53.75,4,-9.50001,9.25002,4,-8.00001,53.75,4,-6.00001,53.75,0.999999,-17.5,53.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.50001,0.25,1,-9.49999,0.25,0.999999,-17.5,62.75,4,-7.50001,62.75,4,-2.3445e-7,53.75,-8.30517e-7,-19,9.25002,-2.6054e-15,-5.96046e-8,9.25002,-3.49691e-7,-8.00001,0.25,-8.30515e-7,-19,0.25,-2.84124e-7,-6.50001,53.75,-2.62269e-7,-6.00001,62.75,-2.6054e-15,-5.96046e-8,62.75,-3.27836e-7,-7.50001],\"faces\":[33,5,12,11,6,0,0,0,0,33,7,0,44,46,1,1,1,1,33,6,11,9,2,2,2,2,2,33,0,7,8,1,3,3,3,3,33,1,8,12,5,4,4,4,4,33,45,3,10,47,5,5,5,5,32,3,15,29,6,6,6,32,29,13,4,7,7,7,32,4,2,9,8,8,8,32,9,10,3,9,9,9,32,3,29,4,10,10,10,32,4,9,3,11,11,11,33,48,4,13,49,12,12,12,12,32,44,0,1,13,13,13,32,44,1,5,14,14,14,32,2,4,48,14,14,14,32,44,5,6,13,13,13,32,6,2,48,14,14,14,32,6,48,44,13,13,13,33,3,45,67,15,15,15,15,15,33,29,72,49,13,16,16,16,16,32,12,8,7,17,17,17,32,47,10,9,18,18,18,32,47,9,11,19,19,19,32,12,7,46,20,20,20,32,47,11,12,19,19,19,32,46,47,12,17,17,17,33,20,21,26,27,21,21,21,21,33,66,14,22,69,22,22,22,22,33,21,17,24,26,23,23,23,23,33,14,16,23,22,3,3,3,3,33,16,20,27,23,24,24,24,24,33,68,70,25,18,25,25,25,25,32,29,15,18,26,26,26,32,18,25,24,3,3,3,32,24,17,19,27,27,27,32,19,28,29,28,28,28,32,29,18,24,29,29,29,32,24,19,29,30,30,30,33,71,73,28,19,31,31,31,31,32,16,14,66,14,14,14,32,71,19,17,13,13,13,32,71,17,21,14,14,14,32,20,16,66,14,14,14,32,71,21,20,13,13,13,32,66,71,20,32,32,32,33,18,15,67,68,33,33,33,33,33,29,28,73,72,16,16,16,16,32,22,23,27,20,20,20,32,26,24,25,17,17,17,32,69,22,27,19,19,19,32,26,25,70,20,20,20,32,69,27,26,19,19,19,32,26,70,69,34,34,34,33,35,36,41,42,35,35,35,35,33,44,30,37,46,1,1,1,1,33,36,32,39,41,36,36,36,36,33,30,31,38,37,37,37,37,37,33,31,35,42,38,4,4,4,4,33,45,47,40,33,5,5,5,5,32,65,51,33,38,38,38,32,33,40,39,37,37,37,32,39,32,34,39,39,39,32,34,43,65,40,40,40,32,65,33,39,41,41,41,32,39,34,65,42,42,42,33,48,49,43,34,12,12,12,12,32,31,30,44,32,32,32,32,48,34,32,13,13,13,32,48,32,36,32,32,32,32,35,31,44,13,13,13,32,48,36,35,13,13,13,32,44,48,35,14,14,14,33,33,51,67,45,43,43,43,43,33,65,43,49,72,44,44,44,44,32,37,38,42,17,17,17,32,41,39,40,17,17,17,32,46,37,42,17,17,17,32,41,40,47,17,17,17,32,46,42,41,17,17,17,32,41,47,46,19,19,19,33,56,63,62,57,45,45,45,45,33,66,69,58,50,22,22,22,22,33,57,62,60,53,46,46,46,46,33,50,58,59,52,47,47,47,47,33,52,59,63,56,24,24,24,24,33,68,54,61,70,25,25,25,25,32,54,51,65,48,48,48,32,65,64,55,49,49,49,32,55,53,60,50,50,50,32,60,61,54,51,51,51,32,54,65,55,52,52,52,32,55,60,54,53,53,53,33,71,55,64,73,31,31,31,31,32,66,50,52,13,13,13,32,66,52,56,32,32,32,32,53,55,71,32,32,32,32,66,56,57,13,13,13,32,57,53,71,13,13,13,32,57,71,66,32,32,32,33,54,68,67,51,54,54,54,54,33,65,72,73,64,55,55,55,55,32,63,59,58,17,17,17,32,70,61,60,56,56,56,32,70,60,62,17,17,17,32,63,58,69,17,17,17,32,70,62,63,17,17,17,32,69,70,63,34,34,34]},\"single_double_R_ab\":{\"normals\":[1.67996e-7,1,3.17104e-7,-2.05003e-14,1,-7.18347e-8,4.86166e-8,1,-2.39968e-8,-9.06765e-8,1,-2.57034e-7,2.37331e-14,1,-1.12125e-7,1.37894e-8,1,-6.80638e-9,-1.95025e-7,1,-4.58308e-7,-1.92142e-9,1,-5.00929e-8,0,0,1,0.0446298,0,0.999004,0.155718,0,0.987801,-0.332928,0,-0.942952,0,-1,0,0,-1,0,0,0,1,6.71764e-8,-1,2.38095e-7,-4.11973e-8,-1,-1.57307e-7,7.94729e-9,-1,4.76837e-8,1.62991e-9,-1,6.81203e-8,1.17515e-8,-1,9.56046e-8,0,-1,0,-9.9341e-9,-1,5.96046e-8,0,-1,0,2.12357e-9,-1,6.32976e-8,1.50688e-9,-1,5.96046e-8,0,0,-1,-0.0463845,0,-0.998924,0,-1,0,0,-1,0,0,1,0,0,1,0,0,0,-1,-0.0463845,0,-0.998924,-5.41036e-7,1,-0.00000131139,-1.03899e-14,1,-6.81203e-8,7.94729e-9,1,-4.76837e-8,-9.9341e-9,1,-5.96046e-8,1.23631e-10,1,-6.50279e-8,1.28903e-7,1,3.653e-7,1.57438e-8,1,-5.96046e-8,-3.77542e-10,1,-5.57026e-8,-4.31721e-9,1,-4.24549e-8,0.0457993,-5.48889e-8,0.998951,0.155468,0,0.987841,0.253347,4.28659e-8,0.967375,0.332759,8.46926e-8,0.943012,0.3916,0,0.920135,0.43,-3.1431e-7,0.902829,-0.332696,9.94759e-8,-0.943034,-0.391555,0,-0.920155,-0.429974,0,-0.902841,-0.448859,1.62645e-7,-0.893603,0.046112,0,0.998936,0.155402,0,0.987851,0.155402,0,0.987851,0.155402,0,0.987851,0.155402,0,0.987851,0.253265,0,0.967397,0.332685,-2.66446e-7,0.943038,0.332685,0,0.943038,0.332685,0,0.943038,0.332685,2.66442e-7,0.943038,0.332685,0,0.943038,0.332685,0,0.943038,0.391547,3.04221e-8,0.920158,0.42997,3.06589e-8,0.902843,0.0457993,5.48889e-8,0.998951,0.155468,0,0.987841,0.253347,4.28659e-8,0.967375,-0.332696,-9.94759e-8,-0.943034,0.332759,8.46926e-8,0.943012,-0.391555,0,-0.920155,0.3916,0,0.920135,0.43,3.1431e-7,0.902829,-0.448859,-1.62645e-7,-0.893603,0,1,0,0,1,0,-6.54502e-7,-1,-0.00000130301,-9.20724e-8,-1,-1.77527e-7,-1.18666e-14,-1,5.60624e-8,4.51517e-8,-1,1.66329e-7,2.95996e-8,-1,1.08604e-7,-1.21856e-8,-1,2.25068e-8,-2.63274e-8,-1,-9.62437e-9,-4.28773e-8,1,-1.49568e-7,1.3317e-7,1,2.34924e-7,-1.27576e-14,1,-4.47036e-8,-4.25272e-15,1,-3.97363e-8,0,1,-4.47035e-8,-2.34239e-9,1,-4.62477e-8,0,1,-5.02898e-8,-2.36217e-8,1,-1.50157e-7,7.9057e-15,1,-4.23514e-8,-1.14468e-8,1,-6.74913e-8,-1.09344e-9,1,-5.1311e-8,6.43485e-15,1,-4.47036e-8,7.2413e-10,1,-4.03279e-8,-4.25266e-15,1,-3.97363e-8,-5.03496e-15,1,-3.97363e-8,-1.60877e-14,1,-4.47036e-8,-2.04954e-9,1,-4.47035e-8,9.0412e-10,1,-5.53219e-8,2.33718e-9,1,-3.73797e-8,-1.01022e-8,1,-7.02986e-8,-7.47624e-15,1,-4.47036e-8,1.29682e-8,1,-2.33605e-9,-9.59561e-9,1,-7.49151e-8,-6.57636e-15,1,-4.47036e-8,4.87022e-16,1,-4.47035e-8,2.74717e-9,1,-3.36708e-8,3.86602e-10,1,-4.30453e-8,-1.43945e-7,0,1,-1.83594e-7,0,-1,-1.83594e-7,0,-1,-1.66789e-7,0,-1,-1.66789e-7,0,-1,-1.26709e-7,0,-1,-1.26709e-7,0,-1,-1.66789e-7,0,-1,-5.70813e-7,0,-1,-1.50032e-7,-3.83246e-7,-1,-1.07023e-7,0,-1,-5.70813e-7,0,-1,0.448868,0,0.893598,0.448898,0,0.893583,0.448898,0,0.893583,0.448898,0,0.893583,0.448898,0,0.893583,0.448858,2.99755e-7,0.893603,0.44888,0,0.893592,0.448858,-2.99755e-7,0.893603,0.44888,0,0.893592,0.448858,0,0.893603,0.448858,0,0.893603,-0.448897,0,-0.893584,-1,0,-9.93427e-9,-0.0000858307,-1,4.47035e-8,-1,0,-9.93427e-9,0.0000858307,1,-4.47035e-8,-1,0,0,-1,0,0,-1,0,0,-0.999997,0,0.00260416,-1,0,-9.93427e-9,-1,0,0,-0.0000171662,1,-4.47036e-8,-0.0000858307,1,-4.47035e-8,-1,0,0,-0.999997,0,-0.00260416,0.0000858309,-1,4.47036e-8,-1,0,9.93427e-9,-1,0,9.93427e-9,-1,-7.45058e-9,3.33067e-16,-1,0,-1.86264e-9,1.86669e-7,0,-1,-1.05833e-7,-0.00000492732,1,-1.0796e-7,-0.00000683467,1,0.164399,0,0.986394,2.31357e-9,-1,8.60254e-8,-9.91689e-14,-1,2.27596e-7,8.50544e-15,-1,7.94727e-8,8.50533e-15,-1,7.94727e-8,7.37665e-15,-1,4.47036e-8,1.27576e-14,-1,4.47036e-8,-4.92476e-7,-1,-9.80438e-7,-6.19558e-9,-1,2.44852e-8,0,-1,5.02898e-8,3.48814e-9,-1,5.82707e-8,-7.9057e-15,-1,4.23514e-8,2.34239e-9,-1,4.62477e-8,1.09344e-9,-1,5.1311e-8,-6.43485e-15,-1,4.47036e-8,-1.05717e-9,-1,3.83154e-8,4.02888e-15,-1,4.47035e-8,-4.87022e-16,-1,4.47035e-8,3.09132e-15,-1,4.47035e-8,1.60877e-14,-1,4.47036e-8,-2.07138e-9,-1,4.47037e-8,3.02155e-9,-1,4.72254e-8,4.70642e-9,-1,5.60195e-8,7.57892e-9,-1,6.91999e-8,-3.432e-9,-1,3.44824e-8,5.44397e-9,-1,6.063e-8,-2.85382e-7,-0.0000034968,-1,0,0,1,-1.03498e-7,-0.0000055631,-1,1.6231e-7,0,1,-1.05833e-7,0.00000492732,1,1.86669e-7,0,-1,-1.0796e-7,0.00000683467,1,-2.85382e-7,0.0000034968,-1,-1.03498e-7,0.0000055631,-1,0.164399,0,-0.986394],\"metadata\":{\"uvs\":0,\"generator\":\"io_three\",\"faces\":254,\"vertices\":160,\"version\":3,\"normals\":193,\"type\":\"Geometry\"},\"uvs\":[],\"vertices\":[13.5,0.999999,-17.5,0.25,0.999999,-17.5,0.25,0.999999,-17.5,25.2242,0.999999,-18.0238,13.5,4,-17.5,0.25,4,-17.5,31.4168,0.999999,-19,25.2242,4,-18.0238,31.4168,4,-19,57.2743,0.999999,-17.5,61.5227,0.999999,-19,57.2743,4,-17.5,61.5227,4,-19,0.25,1,-9.5,0.25,4,-19,13.5,-4,-17.5,0.25,-4,-17.5,0.25,-4,-19,25.2242,-4,-18.0238,31.4168,-4,-19,13.5,-1,-17.5,0.25,-1,-17.5,25.2242,-1,-18.0238,0.25,-1,-17.5,31.4168,-1,-19,61.5227,-1,-19,57.2743,-1,-17.5,61.5227,-4,-19,57.2743,-4,-17.5,0.25,-1,-9.5,0.25,-4,9.49997,0.25,-4,6.00001,-8.74998,-4,7.50001,-8.74998,-4,-7.50001,0.25,-4,-6.00001,0.25,-4,-9.49997,27.964,-4,8.83686,13.5005,-4,9.49998,42.4663,-4,6.55447,56.8143,-4,2.79686,70.9725,-4,-2.19915,84.9338,-4,-8.14093,87.7873,-4,-9.49999,13.5,-0.999999,17.5,0.25,-0.999999,17.5,0.25,-0.999999,17.5,13.5006,-0.999999,17.5,13.5,-4,17.5,0.25,-4,17.5,13.5006,-4,17.5,0.25,-1,9.5,13.5001,-1,9.5,61.8423,-1,9.5,0.25,-4,19,28.928,-4,18.2878,13.5005,-4,19,33.9362,-4,17.5,13.5,4,17.5,0.25,4,17.5,0.25,4,19,13.5005,4,19,28.928,4,18.2878,13.5006,4,17.5,33.9362,4,17.5,13.5,1,17.5,0.25,1,17.5,13.5006,1,17.5,0.25,1,17.5,0.25,1,9.5,13.5001,1,9.5,61.8423,1,9.5,0.25,4,-9.49997,0.25,4,-6.00001,-8.74998,4,-7.50001,-8.74998,4,7.50001,0.25,4,6.00001,0.25,4,9.49997,13.5005,4,9.49998,27.964,4,8.83686,42.4663,4,6.55447,56.8143,4,2.79686,70.9725,4,-2.19915,84.9338,4,-8.14093,87.7873,4,-9.49999,27.964,-1,8.83686,42.4663,-1,6.55447,56.8143,-1,2.79686,70.9725,-1,-2.19915,84.9338,-1,-8.14093,73.8968,-1,5.24725,87.7873,-1,-9.5,88.2466,-1,-0.859041,73.8968,-4,5.24725,61.8423,-4,9.49998,102.246,-1,-7.52607,88.2466,-4,-0.859041,106.175,-1,-9.5,102.246,-4,-7.52607,106.175,-4,-9.49999,33.9362,-0.999999,17.5,44.4325,-0.999999,15.8488,44.4325,1,15.8488,33.9362,1,17.5,59.6285,-0.999999,11.8704,59.6285,1,11.8704,66.3479,-4,9.49998,74.4451,-4,6.64344,74.4451,4,6.64344,66.3479,4,9.49998,66.3478,1,9.5,66.3478,-1,9.5,88.8677,-4,0.506314,88.8677,4,0.506313,102.91,-4,-6.181,102.91,4,-6.181,109.517,-4,-9.49999,109.517,-1,-9.5,109.517,1,-9.5,109.517,4,-9.49999,125.443,-4,-17.5,128.429,-4,-19,128.429,4,-19,125.443,4,-17.5,125.443,0.999999,-17.5,125.443,-1,-17.5,27.964,1,8.83686,42.4663,1,6.55447,56.8143,1,2.79686,73.8968,1,5.24725,70.9725,1,-2.19915,61.8423,4,9.49998,73.8968,4,5.24725,88.2466,1,-0.859041,84.9338,1,-8.14093,88.2466,4,-0.859041,87.7873,1,-9.5,102.246,1,-7.52607,102.246,4,-7.52607,106.175,1,-9.5,106.175,4,-9.49999,107.266,-4,-19,104.279,-4,-17.5,104.279,4,-17.5,107.266,4,-19,104.279,-1,-17.5,122.101,-1,-17.5,104.279,0.999999,-17.5,122.101,0.999999,-17.5,107.266,-1,-19,125.087,-1,-19,125.087,-4,-19,122.101,-4,-17.5,107.266,0.999999,-19,125.087,0.999999,-19,122.101,4,-17.5,125.087,4,-19,0.25,1,9.49999,0.25,-1,9.49999,0.25,1,-9.49999,0.25,-1,-9.49999],\"faces\":[32,107,112,114,0,0,0,32,114,118,139,1,1,1,32,114,139,137,2,2,2,32,108,107,114,3,3,3,32,131,130,108,4,4,4,32,114,137,134,5,5,5,32,134,131,108,6,6,6,32,114,134,108,7,7,7,33,1,0,4,5,8,8,8,8,33,0,3,7,4,9,9,9,9,33,8,7,3,6,10,10,10,10,33,11,12,10,9,11,11,11,11,32,19,18,15,12,12,12,32,15,16,17,13,13,13,32,15,17,19,12,12,12,33,16,15,20,21,14,14,14,14,33,15,18,22,20,9,9,9,9,33,24,22,18,19,10,10,10,10,33,26,25,27,28,11,11,11,11,32,41,40,39,15,15,15,32,39,38,36,16,16,16,32,36,37,30,12,12,12,32,31,32,33,17,17,17,32,36,30,31,18,18,18,32,41,39,36,19,19,19,32,35,42,41,20,20,20,32,31,33,34,21,21,21,32,34,35,41,22,22,22,32,41,36,31,23,23,23,32,31,34,41,24,24,24,33,44,43,47,48,25,25,25,25,33,49,47,43,46,26,26,26,26,32,47,49,56,27,27,27,32,56,54,55,12,12,12,32,55,53,48,12,12,12,32,47,56,55,20,20,20,32,47,55,48,28,28,28,32,60,61,63,29,29,29,32,63,62,57,30,30,30,32,57,58,59,30,30,30,32,59,60,63,29,29,29,32,63,57,59,29,29,29,33,58,57,64,65,31,31,31,31,33,66,64,57,62,32,32,32,32,32,81,82,83,33,33,33,32,83,71,72,34,34,34,32,72,73,74,35,35,35,32,75,76,77,29,29,29,32,72,74,75,36,36,36,32,81,83,72,37,37,37,32,79,80,81,38,38,38,32,77,78,79,29,29,29,32,72,75,77,39,39,39,32,79,81,72,40,40,40,32,72,77,79,41,41,41,33,37,36,84,51,42,42,42,42,33,36,38,85,84,43,43,43,43,33,38,39,86,85,44,44,44,44,33,39,40,87,86,45,45,45,45,33,40,41,88,87,46,46,46,46,33,90,88,41,42,47,47,47,47,33,52,89,92,93,48,48,48,48,33,89,91,95,92,49,49,49,49,33,91,94,97,95,50,50,50,50,33,98,97,94,96,51,51,51,51,33,55,54,61,60,52,52,52,52,32,61,54,56,53,53,53,32,99,100,101,54,54,54,32,61,56,99,55,55,55,32,102,63,61,56,56,56,32,99,101,102,54,54,54,32,99,102,61,56,56,56,33,103,104,101,100,57,57,57,57,32,110,105,106,58,58,58,32,106,107,108,59,59,59,32,109,104,103,60,60,60,32,106,108,109,61,61,61,32,109,103,110,62,62,62,32,106,109,110,63,63,63,33,106,111,112,107,64,64,64,64,33,111,113,114,112,65,65,65,65,33,69,125,78,77,66,66,66,66,33,125,126,79,78,67,67,67,67,33,126,127,80,79,68,68,68,68,33,130,131,128,70,69,69,69,69,33,127,129,81,80,70,70,70,70,33,131,134,132,128,71,71,71,71,33,129,133,82,81,72,72,72,72,33,134,137,136,132,50,50,50,50,33,83,82,133,135,73,73,73,73,33,138,136,137,139,74,74,74,74,32,5,4,7,29,29,29,32,7,8,14,75,75,75,32,7,14,5,76,76,76,33,28,27,140,141,22,22,22,22,32,97,98,115,12,12,12,32,115,113,111,77,77,77,32,111,106,105,78,78,78,32,105,93,92,79,79,79,32,95,97,115,80,80,80,32,105,92,95,81,81,81,32,115,111,105,82,82,82,32,95,115,105,83,83,83,32,70,128,132,84,84,84,32,132,136,138,85,85,85,32,138,117,123,86,86,86,32,147,153,152,87,87,87,32,138,123,147,88,88,88,32,70,132,138,89,89,89,32,104,109,70,90,90,90,32,102,101,104,91,91,91,32,65,64,66,29,29,29,32,66,102,104,92,92,92,32,70,138,147,93,93,93,32,66,104,70,94,94,94,32,67,65,66,29,29,29,32,69,156,68,76,76,76,32,68,67,66,95,95,95,32,66,70,147,96,96,96,32,147,152,146,97,97,97,32,9,10,6,98,98,98,32,147,146,9,29,29,29,32,69,68,66,99,99,99,32,125,69,66,100,100,100,32,9,6,3,101,101,101,32,0,1,2,76,76,76,32,9,3,0,76,76,76,32,126,125,66,102,102,102,32,127,126,66,103,103,103,32,9,0,2,76,76,76,32,13,158,135,29,29,29,32,9,2,13,104,104,104,32,127,66,147,105,105,105,32,129,127,147,106,106,106,32,147,9,13,107,107,107,32,147,13,135,108,108,108,32,133,129,147,109,109,109,32,147,135,133,110,110,110,33,60,59,53,55,111,111,111,111,32,17,14,8,112,112,112,32,17,8,6,113,113,113,32,24,19,17,113,113,113,32,140,27,25,114,114,114,32,24,17,6,113,113,113,32,148,140,25,115,115,115,32,25,24,6,116,116,116,32,10,12,143,114,114,114,32,25,6,10,117,117,117,32,149,148,25,29,29,29,32,25,10,143,118,118,118,32,25,143,152,115,115,115,32,120,150,149,119,119,119,32,149,25,152,120,120,120,32,153,155,121,119,119,119,32,149,152,153,121,121,121,32,121,120,149,122,122,122,32,153,121,149,122,122,122,33,141,140,148,144,123,123,123,123,32,124,119,120,124,124,124,32,120,121,122,125,125,125,32,120,122,123,126,126,126,32,124,120,123,127,127,127,32,117,118,114,128,128,128,32,124,123,117,129,129,129,32,113,115,116,130,130,130,32,116,124,117,131,131,131,32,117,114,113,132,132,132,32,117,113,116,133,133,133,33,145,149,150,151,134,134,134,134,33,12,11,142,143,29,29,29,29,33,146,152,143,142,123,123,123,123,33,154,155,153,147,134,134,134,134,33,151,150,120,119,22,22,22,22,33,122,121,155,154,76,76,76,76,32,59,58,65,135,135,135,32,65,67,68,136,136,136,32,53,59,65,137,137,137,32,44,48,53,135,135,135,32,50,45,44,138,138,138,32,31,30,157,139,139,139,32,75,31,157,140,140,140,32,156,76,75,139,139,139,32,156,75,157,141,141,141,32,156,157,50,142,142,142,32,68,156,50,142,142,142,32,44,53,65,143,143,143,32,68,50,44,144,144,144,32,65,68,44,141,141,141,32,34,72,71,141,141,141,32,158,13,2,145,145,145,32,34,71,158,141,141,141,32,159,35,34,139,139,139,32,21,23,29,146,146,146,32,159,34,158,147,147,147,32,29,159,158,148,148,148,32,158,2,1,149,149,149,32,1,5,14,150,150,150,32,14,17,16,151,151,151,32,21,29,158,152,152,152,32,14,16,21,150,150,150,32,21,158,1,153,153,153,32,1,14,21,151,151,151,33,56,49,46,99,154,154,154,154,33,110,52,93,105,155,155,155,155,33,51,157,30,37,156,156,156,156,33,75,74,32,31,157,157,157,157,33,73,33,32,74,144,144,144,144,32,22,24,25,13,13,13,32,22,25,26,158,158,158,32,23,21,20,12,12,12,32,20,22,26,159,159,159,32,144,148,149,160,160,160,32,23,20,26,22,22,22,32,144,149,145,161,161,161,32,23,26,144,12,12,12,32,90,159,29,12,12,12,32,29,23,144,162,162,162,32,144,145,124,12,12,12,32,124,116,96,163,163,163,32,96,94,91,164,164,164,32,91,89,52,165,165,165,32,52,110,103,166,166,166,32,103,100,99,167,167,167,32,46,43,44,12,12,12,32,103,99,46,168,168,168,32,96,91,52,169,169,169,32,52,103,46,170,170,170,32,46,44,45,12,12,12,32,50,157,51,22,22,22,32,46,45,50,171,171,171,32,96,52,46,172,172,172,32,144,124,96,173,173,173,32,90,29,144,174,174,174,32,90,144,96,175,175,175,32,46,50,51,176,176,176,32,46,51,84,177,177,177,32,88,90,96,12,12,12,32,87,88,96,178,178,178,32,46,84,85,179,179,179,32,86,87,96,180,180,180,32,46,85,86,181,181,181,32,96,46,86,182,182,182,33,115,98,96,116,183,183,183,183,33,124,145,151,119,184,184,184,184,33,42,35,159,90,185,185,185,185,33,144,26,28,141,186,186,186,186,33,108,130,70,109,187,187,187,187,33,102,66,62,63,188,188,188,188,33,77,76,156,69,189,189,189,189,33,122,154,147,123,184,184,184,184,33,117,138,139,118,190,190,190,190,33,142,11,9,146,186,186,186,186,33,135,158,71,83,191,191,191,191,33,33,73,72,34,192,192,192,192]},\"double_turnout_L_12\":{\"uvs\":[],\"normals\":[0,0,-1,0,-0.00000762939,1,0,-1,0,0,-1,0,0,-1,0,0,-1,0,-1.51937e-7,1,-6.76615e-7,0,1,0,1.05964e-8,1,-6.35783e-8,0,1,0,7.28407e-8,1,2.20754e-7,0,1,0,-1.32455e-8,1,-7.94729e-8,-1.81795e-8,1,-1.84579e-7,3.08414e-9,1,-7.94729e-8,7.88425e-9,1,-3.43697e-8,2.22796e-8,1,1.12734e-8,-1.01182e-13,1,-4.84435e-8,0,1,0,-3.85688e-8,1,-1.56601e-7,8.45107e-9,1,-2.91717e-8,-7.46012e-9,-1,1.81806e-8,-2.19342e-8,-1,-2.2777e-8,0,-1,4.47035e-8,0,-1,7.94727e-8,5.6053e-14,-1,4.47036e-8,-5.42944e-9,-1,3.21866e-8,4.45166e-9,-1,5.36818e-8,0,-1,7.94727e-8,0,-1,7.94725e-8,-1.55727e-7,-1,-3.68664e-7,5.52278e-9,-1,7.99863e-8,8.51543e-10,-1,4.47035e-8,0,-1,4.28986e-8,2.40549e-9,-1,1.9503e-8,-8.46825e-9,-1,4.47035e-8,2.1159e-9,-1,2.86845e-8,1.313e-10,-1,4.47036e-8,8.49047e-10,-1,3.397e-8,1.9273e-9,-1,6.02551e-8,0,-1,4.47036e-8,-6.25262e-10,-1,4.93441e-8,8.01172e-10,-1,4.12432e-8,6.89851e-15,-1,4.47036e-8,-5.31732e-9,-1,2.02509e-8,-8.35329e-10,-1,4.49457e-8,3.65465e-8,-1,1.79906e-7,1.27947e-9,-1,4.45251e-8,4.58569e-10,-1,4.37418e-8,-0.00000104433,-0.00000254312,-1,0.00000125388,0,1,-3.74274e-8,-0.00000508626,-1,2.03135e-7,0,1,-1.4047e-7,0,-1,-1.4047e-7,0,-1,-1.41265e-7,0,-1,-1.4047e-7,0,-1,-1.41265e-7,0,-1,0,0,-1,-1.41265e-7,0,-1,-1.06873e-7,-9.28702e-7,-1,0,0,-1,0,0.00000762939,1,0,0,-1,0,0.00000762939,1,0,1,0,0,1,0,-3.69807e-8,1,-1.64683e-7,0,1,-4.47035e-8,2.82571e-9,1,-2.94569e-8,0,1,-1.8082e-7,8.07727e-9,1,-1.60676e-9,-8.51543e-10,1,-4.47035e-8,-1.11732e-9,1,-4.47035e-8,-2.07e-9,1,-5.2621e-8,-1.41001e-8,1,-7.85031e-8,-9.47345e-9,1,-1.2466e-7,-3.59937e-9,1,-4.8796e-8,6.08741e-9,1,-2.014e-8,-4.98249e-14,1,-3.97366e-8,0,1,-7.94727e-8,0,1,-7.94727e-8,3.64303e-10,1,-4.16289e-8,7.90911e-10,1,-4.52017e-8,0,1,-3.97364e-8,0,1,-7.94725e-8,-6.96411e-10,1,-4.19285e-8,-2.88994e-9,1,-4.23387e-8,-2.40549e-9,1,-1.9503e-8,-1.11938e-9,1,-4.47035e-8,7.05832e-10,1,-1.1815e-7,-1.96381e-9,1,-4.12008e-8,0,1,-4.30289e-8,2.74728e-10,1,-4.59869e-8,1.25987e-8,1,-1.48335e-8,-9.08085e-15,1,-4.47035e-8,-0.00000104433,0.00000254312,-1,-3.74274e-8,0.00000508626,-1,0,1,0,0.0249711,0,0.999688,0.0735636,0,0.99729,0.122409,0,0.99248,0.122409,0,0.99248,0.122411,0,0.992479,0.122409,0,0.99248,0.170961,0,0.985278,0.219099,0,0.975703,0.383594,-0.0000017523,0.923502,0.492898,0,0.870087,0.383594,4.4036e-7,0.923502,0.492898,0,0.870087,0.41272,0.433856,0.800894,0.383594,0.0000017523,0.923502,0.492898,0,0.870087,-0.0348198,-0.983365,0.178273,0.458078,0,0.888912,0.328288,8.71417e-7,0.944578,0.436625,0,0.899644,-1,0,-0.00000215429,-1,1.64359e-11,-0.00000215429,-1,0,-0.00000108283,-1,-9.87445e-12,-0.00000215427,-1,0,-0.00000108283,-1,0,0,-1,0,-0.00000108283,-1,0,-0.00000110455,-1,0,-0.00000108283,-1,0,-0.00000110455,0.164399,0,0.986394,9.65702e-8,-1,3.48961e-7,5.92816e-8,-1,3.4165e-7,-4.24442e-8,-1,-3.44126e-7,7.94729e-9,-1,4.76837e-8,1.70248e-9,-1,6.81199e-8,-8.42762e-9,-1,1.25005e-9,1.75737e-9,-1,5.11762e-8,-9.93409e-9,-1,5.96046e-8,1.57436e-9,-1,6.86784e-8,9.10641e-10,-1,5.96046e-8,-0.0190452,0,-0.999819,-0.0190452,0,-0.999819,0,0,1,-1,0,-5.72205e-7,0.164399,0,-0.986394,-1,0,-0.00000129145,-1,0,-0.00000129145,-1,1.19101e-11,-0.0000018733,-1,0,-0.00000187329,-1,0,-0.00000124052,-1,-1.19101e-11,-0.0000018733,-1,0,-0.00000124052,-1,0,-0.00000187329,0.0250323,0,0.999687,1.01182e-13,-1,4.84435e-8,-2.22796e-8,-1,-1.12734e-8,3.85688e-8,-1,1.56601e-7,-8.45107e-9,-1,2.91717e-8,0.0250323,0,0.999687,0.0735648,0,0.99729,-0.266712,0,-0.963776,0.122412,0,0.992479,-0.380134,-7.85702e-7,-0.924932,-0.492899,0,-0.870087,-0.380134,7.85702e-7,-0.924932,0.292475,4.55987e-7,0.956273,0.292475,0.00000283297,0.956273,0.266711,0,0.963777,0.292476,-0.00000283295,0.956273,0.266711,0,0.963777,0.292476,0,0.956273,-0.2191,0.00000149886,-0.975702,0.0249861,-4.73521e-7,0.999688,0.0735637,0,0.99729,0.122412,0,0.992479,0.170961,0,0.985278,0.219099,0,0.975703,0.266712,0,0.963776,0.328288,-8.71417e-7,0.944578,-0.2191,-0.00000149886,-0.975703,-0.290284,0,-0.956941,-0.290284,0,-0.956941,0.219099,0,0.975703,0.0735637,0,0.99729,0.0249861,4.73521e-7,0.999688],\"metadata\":{\"generator\":\"io_three\",\"normals\":184,\"uvs\":0,\"vertices\":146,\"version\":3,\"faces\":230,\"type\":\"Geometry\"},\"vertices\":[29.5597,-0.999997,77.5,0.250777,-0.999997,77.5,67.7707,-0.999997,69.5,74.0613,-0.999997,69.5,71.6789,-0.999997,70.1593,57.5514,-0.999997,73.3317,43.2852,-0.999997,75.8071,29.5597,-4,77.5,0.250777,-4,77.5,67.7707,-4,69.5,74.0613,-4,69.5,0.249985,-0.999997,69.5,0.249975,-4,79,0.250554,-4,79,0.250554,4,79,0.249975,4,79,0.249985,-4,69.5,0.250786,-4,69.5,0.249976,-4,77.5,28.9147,-4,77.5795,14.4746,-4,78.6447,69.3706,-4,60.944,55.6981,-4,64.0142,41.8913,-4,66.4099,27.9836,-4,68.1253,14.0085,-4,69.1561,0.249993,-4,66,-8.75001,-4,67.5,0.250007,-4,50.5,102.173,-4,50.5,82.8761,-4,57.2065,-8.75,-4,52.5,0.25,-4,54,99.3824,-4,61.7556,71.3145,-4,68.7042,98.8771,-4,60.3432,122.827,-4,50.5,126.48,-4,50.5,126.48,-0.999998,50.5,122.827,-0.999998,50.5,138.962,-0.999998,42.5,142.004,-0.999998,42.5,138.962,-4,42.5,142.004,-4,42.5,102.173,-0.999998,50.5,121.14,-0.999998,42.5,0.250007,-0.999998,50.5,64.8023,-0.999998,42.5,64.8023,-4,42.5,121.14,-4,42.5,144.652,-4,41,141.61,-4,41,141.61,-0.999998,41,124.23,-0.999998,41,124.23,-4,41,70.2227,-4,41,70.2227,-0.999998,41,27.4068,-0.999998,41,27.4068,-4,41,0.250019,-4,41,0.250019,4,41,27.4068,4,41,27.4068,1,41,70.2227,1,41,70.2227,4,41,124.23,4,41,124.23,1,41,141.61,1,41,141.61,4,41,144.652,4,41,25.3371,-4,41.2553,12.6837,-4,42.1887,0.250017,-4,42.5,74.0613,1,69.5,67.7707,1,69.5,0.250777,1,77.5,29.5597,1,77.5,43.2852,1,75.8071,57.5514,1,73.3317,71.6789,1,70.1593,74.0613,4,69.5,67.7707,4,69.5,0.250777,4,77.5,29.5597,4,77.5,0.249985,1,69.5,0.250786,4,69.5,0.249985,4,69.5,0.249976,4,77.5,14.4746,4,78.6447,28.9147,4,77.5795,14.0085,4,69.1561,27.9836,4,68.1253,41.8913,4,66.4099,55.6981,4,64.0142,69.3706,4,60.944,-8.75001,4,67.5,0.249993,4,66,82.8761,4,57.2065,102.173,4,50.5,0.250007,4,50.5,0.25,4,54,-8.75,4,52.5,99.3824,4,61.7556,98.8771,4,60.3432,71.3145,4,68.7042,126.48,4,50.5,122.827,4,50.5,142.004,1,42.5,138.962,1,42.5,122.827,1,50.5,126.48,1,50.5,142.004,4,42.5,138.962,4,42.5,121.14,1,42.5,102.173,1,50.5,64.8023,1,42.5,0.250007,1,50.5,121.14,4,42.5,64.8023,4,42.5,0.250017,4,42.5,12.6837,4,42.1887,25.3371,4,41.2553,0.249976,-0.999997,77.5,0.249976,1,77.5,0.250017,-0.999998,42.5,0.250017,1,42.5,12.6837,-0.999998,42.1887,25.3371,-0.999998,41.2553,25.3371,1,41.2553,12.6837,1,42.1887,98.8771,-0.999997,60.3432,71.3145,-0.999997,68.7042,14.0085,-0.999997,69.1561,27.9836,-0.999997,68.1253,41.8913,-0.999997,66.4099,55.6981,-0.999997,64.0142,69.3706,-0.999997,60.944,82.8761,-0.999997,57.2065,71.3145,1,68.7042,98.8771,1,60.3432,82.8761,1,57.2065,69.3706,1,60.944,55.6981,1,64.0142,41.8913,1,66.4099,27.9836,1,68.1253,14.0085,1,69.1561],\"faces\":[33,1,0,7,8,0,0,0,0,33,3,2,9,10,1,1,1,1,32,11,16,17,1,1,1,32,20,13,12,2,2,2,32,12,18,8,3,3,3,32,8,7,19,4,4,4,32,19,20,12,2,2,2,32,12,8,19,5,5,5,32,93,94,97,6,6,6,32,97,98,99,7,7,7,32,100,101,95,8,8,8,32,97,99,100,9,9,9,32,92,93,97,10,10,10,32,90,91,92,11,11,11,32,86,85,90,11,11,11,32,100,95,96,12,12,12,32,96,86,90,11,11,11,32,90,92,97,13,13,13,32,97,100,96,14,14,14,32,97,96,90,15,15,15,32,80,102,105,16,16,16,32,105,106,103,17,17,17,32,104,81,80,18,18,18,32,80,105,103,19,19,19,32,103,104,80,20,20,20,32,39,130,131,21,21,21,32,2,3,4,4,4,4,32,39,131,2,22,22,22,32,41,38,39,23,23,23,32,53,52,40,24,24,24,32,40,41,39,25,25,25,32,2,4,5,26,26,26,32,40,39,2,27,27,27,32,45,53,40,28,28,28,32,57,56,47,29,29,29,32,47,45,40,2,2,2,32,40,2,5,30,30,30,32,5,6,0,31,31,31,32,1,122,11,32,32,32,32,5,0,1,33,33,33,32,127,57,47,34,34,34,32,46,124,126,35,35,35,32,126,127,47,36,36,36,32,5,1,11,37,37,37,32,5,11,132,38,38,38,32,46,126,47,39,39,39,32,44,46,47,40,40,40,32,5,132,133,41,41,41,32,5,133,134,42,42,42,32,44,47,40,43,43,43,32,137,44,40,44,44,44,32,5,134,135,45,45,45,32,136,137,40,46,46,46,32,5,135,136,47,47,47,32,5,136,40,48,48,48,33,37,36,39,38,49,49,49,49,33,41,40,42,43,50,50,50,50,33,29,28,46,44,51,51,51,51,33,45,47,48,49,52,52,52,52,33,43,42,51,50,2,2,2,2,33,49,48,55,54,2,2,2,2,32,72,59,58,2,2,2,32,58,70,71,2,2,2,32,58,71,72,2,2,2,32,59,60,61,53,53,53,32,59,61,62,54,54,54,32,57,58,59,54,54,54,32,54,55,56,55,55,55,32,57,59,62,56,56,56,32,53,54,56,57,57,57,32,56,57,62,0,0,0,32,63,64,65,55,55,55,32,56,62,63,58,58,58,32,52,53,56,9,9,9,32,56,63,65,59,59,59,32,56,65,66,57,57,57,32,50,51,52,0,0,0,32,52,56,66,60,60,60,32,67,68,69,58,58,58,32,52,66,67,58,58,58,32,69,50,52,0,0,0,32,67,69,52,61,61,61,33,80,81,74,73,62,62,62,62,33,76,75,82,83,63,63,63,63,32,85,86,84,64,64,64,32,89,83,82,65,65,65,32,82,87,15,18,18,18,32,15,14,88,11,11,11,32,88,89,82,66,66,66,32,82,15,88,11,11,11,32,74,138,139,67,67,67,32,109,110,107,68,68,68,32,74,139,109,69,69,69,32,79,73,74,70,70,70,32,77,78,79,71,71,71,32,75,76,77,11,11,11,32,84,123,75,72,72,72,32,145,84,75,73,73,73,32,75,77,79,74,74,74,32,74,109,107,75,75,75,32,75,79,74,76,76,76,32,144,145,75,77,77,77,32,143,144,75,78,78,78,32,74,107,108,79,79,79,32,108,67,66,80,80,80,32,108,66,113,81,81,81,32,143,75,74,82,82,82,32,142,143,74,83,83,83,32,74,108,113,84,84,84,32,115,63,62,85,85,85,32,141,142,74,86,86,86,32,140,141,74,87,87,87,32,115,62,128,88,88,88,32,129,125,116,89,89,89,32,115,128,129,90,90,90,32,114,140,74,91,91,91,32,129,116,114,92,92,92,32,115,129,114,93,93,93,32,114,74,113,94,94,94,32,113,115,114,95,95,95,33,111,112,108,107,50,50,50,50,33,110,109,106,105,96,96,96,96,33,117,118,115,113,52,52,52,52,33,114,116,99,98,97,97,97,97,33,69,68,112,111,11,11,11,11,33,65,64,118,117,11,11,11,11,32,121,61,60,98,98,98,32,60,119,120,11,11,11,32,60,120,121,11,11,11,33,13,20,88,14,99,99,99,99,33,89,88,20,19,100,100,100,100,32,83,89,19,101,101,101,32,19,7,0,102,102,102,32,0,6,77,103,103,103,32,76,83,19,104,104,104,32,0,77,76,103,103,103,32,19,0,76,104,104,104,33,77,6,5,78,105,105,105,105,33,78,5,4,79,106,106,106,106,32,33,37,38,107,107,107,32,41,43,50,108,108,108,32,102,33,38,109,109,109,32,41,50,69,110,110,110,32,102,38,41,111,111,111,32,110,105,102,112,112,112,32,69,111,107,113,113,113,32,110,102,41,114,114,114,32,41,69,107,110,110,110,32,41,107,110,115,115,115,33,44,137,30,29,116,116,116,116,33,113,66,65,117,117,117,117,117,32,86,96,26,118,118,118,32,26,16,11,119,119,119,32,122,18,12,120,120,120,32,86,26,11,121,121,121,32,122,12,15,122,122,122,32,84,86,11,123,123,123,32,15,87,123,124,124,124,32,123,84,11,125,125,125,32,122,15,123,126,126,126,32,11,122,123,127,127,127,33,95,27,26,96,128,128,128,128,32,32,28,29,2,2,2,32,29,30,21,129,129,129,32,21,22,23,130,130,130,32,23,24,25,131,131,131,32,25,17,16,2,2,2,32,26,27,31,132,132,132,32,25,16,26,133,133,133,32,21,23,25,134,134,134,32,32,29,21,135,135,135,32,26,31,32,136,136,136,32,21,25,26,137,137,137,32,21,26,32,138,138,138,33,8,18,122,1,139,139,139,139,33,75,123,87,82,140,140,140,140,33,14,15,12,13,141,141,141,141,33,101,31,27,95,142,142,142,142,33,32,31,101,100,143,143,143,143,32,60,59,72,144,144,144,32,60,72,124,145,145,145,32,125,119,60,145,145,145,32,100,99,116,146,146,146,32,125,60,124,144,144,144,32,32,100,116,147,147,147,32,116,125,124,148,148,148,32,46,28,32,149,149,149,32,116,124,46,150,150,150,32,46,32,116,151,151,151,33,124,72,71,126,152,152,152,152,32,35,36,37,153,153,153,32,37,33,10,154,154,154,32,10,9,34,3,3,3,32,35,37,10,155,155,155,32,10,34,35,156,156,156,33,125,129,120,119,157,157,157,157,33,126,71,70,127,158,158,158,158,33,55,48,47,56,159,159,159,159,33,57,127,70,58,160,160,160,160,33,61,121,128,62,160,160,160,160,33,129,128,121,120,158,158,158,158,33,63,115,118,64,159,159,159,159,33,35,130,39,36,161,161,161,161,33,51,42,40,52,162,162,162,162,33,139,103,106,109,163,163,163,163,32,10,33,102,164,164,164,32,102,80,73,165,165,165,32,73,79,4,166,166,166,32,3,10,102,167,167,167,32,73,4,3,168,168,168,32,102,73,3,169,169,169,33,2,131,34,9,170,170,170,170,33,17,25,132,11,171,171,171,171,33,132,25,24,133,172,172,172,172,33,133,24,23,134,173,173,173,173,33,134,23,22,135,174,174,174,174,33,135,22,21,136,175,175,175,175,33,136,21,30,137,176,176,176,176,33,140,114,98,97,177,177,177,177,33,67,108,112,68,162,162,162,162,33,53,45,49,54,117,117,117,117,33,81,104,138,74,178,178,178,178,33,34,131,130,35,179,179,179,179,33,139,138,104,103,180,180,180,180,33,141,140,97,94,176,176,176,176,33,142,141,94,93,181,181,181,181,33,143,142,93,92,174,174,174,174,33,144,143,92,91,173,173,173,173,33,145,144,91,90,182,182,182,182,33,84,145,90,85,183,183,183,183]},\"single_double_L_ab\":{\"faces\":[32,109,114,116,0,0,0,32,116,120,141,1,1,1,32,116,141,139,2,2,2,32,110,109,116,3,3,3,32,133,132,110,4,4,4,32,116,139,136,5,5,5,32,136,133,110,6,6,6,32,116,136,110,7,7,7,33,1,0,4,5,8,8,8,8,33,0,3,7,4,9,9,9,9,33,8,7,3,6,10,10,10,10,33,11,12,10,9,11,11,11,11,32,19,18,15,12,12,12,32,15,16,17,13,13,13,32,15,17,19,12,12,12,33,16,15,20,21,14,14,14,14,33,15,18,22,20,9,9,9,9,33,24,22,18,19,10,10,10,10,33,26,25,27,28,11,11,11,11,32,42,41,40,15,15,15,32,40,39,37,16,16,16,32,37,38,30,12,12,12,32,30,31,32,17,17,17,32,37,30,32,18,18,18,32,42,40,37,19,19,19,32,36,43,42,20,20,20,32,34,35,36,12,12,12,32,37,32,33,21,21,21,32,34,36,42,22,22,22,32,37,33,34,23,23,23,32,37,34,42,24,24,24,33,45,44,48,49,25,25,25,25,33,50,48,44,47,26,26,26,26,32,48,50,57,27,27,27,32,57,55,56,12,12,12,32,56,54,49,12,12,12,32,48,57,56,20,20,20,32,48,56,49,28,28,28,32,61,62,64,29,29,29,32,64,63,58,30,30,30,32,58,59,60,30,30,30,32,60,61,64,29,29,29,32,64,58,60,29,29,29,33,59,58,65,66,31,31,31,31,33,67,65,58,63,32,32,32,32,32,83,84,85,33,33,33,32,72,73,74,34,34,34,32,85,72,74,35,35,35,32,82,83,85,36,36,36,32,80,81,82,37,37,37,32,78,79,80,29,29,29,32,76,77,78,38,38,38,32,85,74,75,39,39,39,32,76,78,80,29,29,29,32,85,75,76,40,40,40,32,80,82,85,41,41,41,32,85,76,80,42,42,42,33,38,37,86,52,43,43,43,43,33,37,39,87,86,44,44,44,44,33,39,40,88,87,45,45,45,45,33,40,41,89,88,46,46,46,46,33,41,42,90,89,47,47,47,47,33,92,90,42,43,48,48,48,48,33,53,91,94,95,49,49,49,49,33,91,93,97,94,50,50,50,50,33,93,96,99,97,51,51,51,51,33,100,99,96,98,52,52,52,52,33,56,55,62,61,53,53,53,53,32,62,55,57,54,54,54,32,101,102,103,55,55,55,32,62,57,101,56,56,56,32,104,64,62,57,57,57,32,101,103,104,55,55,55,32,101,104,62,57,57,57,33,105,106,103,102,58,58,58,58,32,112,107,108,59,59,59,32,108,109,110,60,60,60,32,111,106,105,61,61,61,32,108,110,111,62,62,62,32,111,105,112,63,63,63,32,108,111,112,64,64,64,33,108,113,114,109,65,65,65,65,33,113,115,116,114,66,66,66,66,33,70,127,80,79,67,67,67,67,33,127,128,81,80,68,68,68,68,33,128,129,82,81,69,69,69,69,33,132,133,130,71,70,70,70,70,33,129,131,83,82,71,71,71,71,33,133,136,134,130,72,72,72,72,33,131,135,84,83,73,73,73,73,33,136,139,138,134,51,51,51,51,33,85,84,135,137,74,74,74,74,33,140,138,139,141,75,75,75,75,32,5,4,7,29,29,29,32,7,8,14,76,76,76,32,7,14,5,38,38,38,33,28,27,142,143,22,22,22,22,32,99,100,117,12,12,12,32,117,115,113,77,77,77,32,113,108,107,78,78,78,32,107,95,94,79,79,79,32,97,99,117,80,80,80,32,107,94,97,81,81,81,32,117,113,107,82,82,82,32,97,117,107,83,83,83,32,71,130,134,84,84,84,32,134,138,140,85,85,85,32,140,119,125,86,86,86,32,149,155,154,87,87,87,32,140,125,149,88,88,88,32,71,134,140,89,89,89,32,106,111,71,90,90,90,32,104,103,106,91,91,91,32,66,65,67,29,29,29,32,67,104,106,92,92,92,32,71,140,149,93,93,93,32,67,106,71,94,94,94,32,68,66,67,29,29,29,32,70,158,69,38,38,38,32,69,68,67,95,95,95,32,67,71,149,96,96,96,32,149,154,148,97,97,97,32,9,10,6,98,98,98,32,149,148,9,29,29,29,32,70,69,67,99,99,99,32,127,70,67,100,100,100,32,9,6,3,101,101,101,32,0,1,2,38,38,38,32,9,3,0,38,38,38,32,128,127,67,102,102,102,32,129,128,67,103,103,103,32,9,0,2,38,38,38,32,13,161,137,29,29,29,32,9,2,13,104,104,104,32,129,67,149,105,105,105,32,131,129,149,106,106,106,32,149,9,13,107,107,107,32,149,13,137,108,108,108,32,135,131,149,109,109,109,32,149,137,135,110,110,110,33,61,60,54,56,111,111,111,111,32,17,14,8,112,112,112,32,17,8,6,113,113,113,32,24,19,17,113,113,113,32,142,27,25,114,114,114,32,24,17,6,113,113,113,32,150,142,25,115,115,115,32,25,24,6,116,116,116,32,10,12,145,114,114,114,32,25,6,10,117,117,117,32,151,150,25,29,29,29,32,25,10,145,118,118,118,32,25,145,154,115,115,115,32,122,152,151,119,119,119,32,151,25,154,120,120,120,32,155,157,123,119,119,119,32,151,154,155,121,121,121,32,123,122,151,122,122,122,32,155,123,151,122,122,122,33,143,142,150,146,123,123,123,123,32,126,121,122,124,124,124,32,122,123,124,125,125,125,32,122,124,125,126,126,126,32,126,122,125,127,127,127,32,119,120,116,128,128,128,32,126,125,119,129,129,129,32,115,117,118,130,130,130,32,118,126,119,131,131,131,32,119,116,115,132,132,132,32,119,115,118,133,133,133,33,147,151,152,153,134,134,134,134,33,12,11,144,145,29,29,29,29,33,148,154,145,144,123,123,123,123,33,156,157,155,149,134,134,134,134,33,153,152,122,121,22,22,22,22,33,124,123,157,156,38,38,38,38,32,60,59,66,135,135,135,32,66,68,69,136,136,136,32,54,60,66,137,137,137,32,45,49,54,135,135,135,32,51,46,45,138,138,138,32,31,30,160,139,139,139,32,159,31,160,140,140,140,32,78,77,159,141,141,141,32,158,78,159,139,139,139,32,159,160,51,142,142,142,32,45,54,66,143,143,143,32,159,51,45,144,144,144,32,69,158,159,145,145,145,32,45,66,69,139,139,139,32,69,159,45,146,146,146,32,163,73,72,141,141,141,32,161,13,2,147,147,147,32,163,72,161,139,139,139,32,36,35,163,148,148,148,32,162,36,163,140,140,140,32,163,161,2,139,139,139,32,1,5,14,149,149,149,32,163,2,1,150,150,150,32,29,162,163,151,151,151,32,21,23,29,152,152,152,32,29,163,1,153,153,153,32,1,14,17,154,154,154,32,17,16,21,149,149,149,32,21,29,1,155,155,155,32,1,17,21,156,156,156,33,57,50,47,101,157,157,157,157,33,112,53,95,107,158,158,158,158,33,52,160,30,38,159,159,159,159,33,164,32,31,159,160,160,160,160,33,164,159,77,76,160,160,160,160,33,32,164,165,33,161,161,161,161,33,76,75,165,164,162,162,162,162,33,34,33,165,166,163,163,163,163,33,74,166,165,75,164,164,164,164,33,166,163,35,34,165,165,165,165,33,166,74,73,163,165,165,165,165,32,22,24,25,13,13,13,32,22,25,26,166,166,166,32,23,21,20,12,12,12,32,20,22,26,167,167,167,32,146,150,151,168,168,168,32,23,20,26,22,22,22,32,146,151,147,169,169,169,32,23,26,146,12,12,12,32,92,162,29,12,12,12,32,29,23,146,170,170,170,32,146,147,126,12,12,12,32,126,118,98,171,171,171,32,98,96,93,172,172,172,32,93,91,53,173,173,173,32,53,112,105,174,174,174,32,105,102,101,175,175,175,32,47,44,45,12,12,12,32,105,101,47,176,176,176,32,98,93,53,177,177,177,32,53,105,47,178,178,178,32,47,45,46,12,12,12,32,51,160,52,22,22,22,32,47,46,51,179,179,179,32,98,53,47,180,180,180,32,146,126,98,181,181,181,32,92,29,146,182,182,182,32,92,146,98,183,183,183,32,47,51,52,184,184,184,32,47,52,86,185,185,185,32,90,92,98,12,12,12,32,89,90,98,186,186,186,32,47,86,87,187,187,187,32,88,89,98,188,188,188,32,47,87,88,189,189,189,32,98,47,88,190,190,190,33,117,100,98,118,191,191,191,191,33,126,147,153,121,192,192,192,192,33,43,36,162,92,193,193,193,193,33,146,26,28,143,194,194,194,194,33,110,132,71,111,195,195,195,195,33,104,67,63,64,196,196,196,196,33,79,78,158,70,197,197,197,197,33,124,156,149,125,192,192,192,192,33,119,140,141,120,198,198,198,198,33,144,11,9,148,194,194,194,194,33,137,161,72,85,199,199,199,199],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":167,\"version\":3,\"normals\":200,\"type\":\"Geometry\",\"faces\":263},\"uvs\":[],\"vertices\":[13.5,0.999999,-17.5,0.25,0.999999,-17.5,0.25,0.999999,-17.5,25.2242,0.999999,-18.0238,13.5,4,-17.5,0.25,4,-17.5,31.4168,0.999999,-19,25.2242,4,-18.0238,31.4168,4,-19,57.2743,0.999999,-17.5,61.5227,0.999999,-19,57.2743,4,-17.5,61.5227,4,-19,0.25,1,-9.5,0.25,4,-19,13.5,-4,-17.5,0.25,-4,-17.5,0.25,-4,-19,25.2242,-4,-18.0238,31.4168,-4,-19,13.5,-1,-17.5,0.25,-1,-17.5,25.2242,-1,-18.0238,0.25,-1,-17.5,31.4168,-1,-19,61.5227,-1,-19,57.2743,-1,-17.5,61.5227,-4,-19,57.2743,-4,-17.5,0.25,-1,-9.5,0.25,-4,9.49997,0.25,-4,6.50001,9.25002,-4,8.00001,9.25002,-4,1.74846e-7,9.25002,-4,-8.00001,0.25,-4,-6.50001,0.25,-4,-9.49997,27.964,-4,8.83686,13.5005,-4,9.49998,42.4663,-4,6.55447,56.8143,-4,2.79686,70.9725,-4,-2.19915,84.9338,-4,-8.14093,87.7873,-4,-9.49999,13.5,-0.999999,17.5,0.25,-0.999999,17.5,0.25,-0.999999,17.5,13.5006,-0.999999,17.5,13.5,-4,17.5,0.25,-4,17.5,13.5006,-4,17.5,0.25,-1,9.5,13.5001,-1,9.5,61.8423,-1,9.5,0.25,-4,19,28.928,-4,18.2878,13.5005,-4,19,33.9362,-4,17.5,13.5,4,17.5,0.25,4,17.5,0.25,4,19,13.5005,4,19,28.928,4,18.2878,13.5006,4,17.5,33.9362,4,17.5,13.5,1,17.5,0.25,1,17.5,13.5006,1,17.5,0.25,1,17.5,0.25,1,9.5,13.5001,1,9.5,61.8423,1,9.5,0.25,4,-9.49997,0.25,4,-6.50001,9.25002,4,-8.00001,9.25002,4,-1.74846e-7,9.25002,4,8.00001,0.25,4,6.50001,0.25,4,9.49997,13.5005,4,9.49998,27.964,4,8.83686,42.4663,4,6.55447,56.8143,4,2.79686,70.9725,4,-2.19915,84.9338,4,-8.14093,87.7873,4,-9.49999,27.964,-1,8.83686,42.4663,-1,6.55447,56.8143,-1,2.79686,70.9725,-1,-2.19915,84.9338,-1,-8.14093,73.8968,-1,5.24725,87.7873,-1,-9.5,88.2466,-1,-0.859041,73.8968,-4,5.24725,61.8423,-4,9.49998,102.246,-1,-7.52607,88.2466,-4,-0.859041,106.175,-1,-9.5,102.246,-4,-7.52607,106.175,-4,-9.49999,33.9362,-0.999999,17.5,44.4325,-0.999999,15.8488,44.4325,1,15.8488,33.9362,1,17.5,59.6285,-0.999999,11.8704,59.6285,1,11.8704,66.3479,-4,9.49998,74.4451,-4,6.64344,74.4451,4,6.64344,66.3479,4,9.49998,66.3478,1,9.5,66.3478,-1,9.5,88.8677,-4,0.506314,88.8677,4,0.506313,102.91,-4,-6.181,102.91,4,-6.181,109.517,-4,-9.49999,109.517,-1,-9.5,109.517,1,-9.5,109.517,4,-9.49999,125.443,-4,-17.5,128.429,-4,-19,128.429,4,-19,125.443,4,-17.5,125.443,0.999999,-17.5,125.443,-1,-17.5,27.964,1,8.83686,42.4663,1,6.55447,56.8143,1,2.79686,73.8968,1,5.24725,70.9725,1,-2.19915,61.8423,4,9.49998,73.8968,4,5.24725,88.2466,1,-0.859041,84.9338,1,-8.14093,88.2466,4,-0.859041,87.7873,1,-9.5,102.246,1,-7.52607,102.246,4,-7.52607,106.175,1,-9.5,106.175,4,-9.49999,107.266,-4,-19,104.279,-4,-17.5,104.279,4,-17.5,107.266,4,-19,104.279,-1,-17.5,122.101,-1,-17.5,104.279,0.999999,-17.5,122.101,0.999999,-17.5,107.266,-1,-19,125.087,-1,-19,125.087,-4,-19,122.101,-4,-17.5,107.266,0.999999,-19,125.087,0.999999,-19,122.101,4,-17.5,125.087,4,-19,0.25,1,9.49999,0.25,2.84124e-7,6.50001,0.25,-1,9.49999,0.25,1,-9.49999,0.25,-1,-9.49999,0.25,-2.84124e-7,-6.50001,9.25002,3.49691e-7,8.00001,9.25002,0,0,9.25002,-3.49691e-7,-8.00001],\"normals\":[1.67996e-7,1,3.17104e-7,-2.05003e-14,1,-7.18347e-8,4.86166e-8,1,-2.39968e-8,-9.06765e-8,1,-2.57034e-7,2.37331e-14,1,-1.12125e-7,1.37894e-8,1,-6.80638e-9,-1.95025e-7,1,-4.58308e-7,-1.92142e-9,1,-5.00929e-8,0,0,1,0.0446298,0,0.999004,0.155718,0,0.987801,-0.332928,0,-0.942952,0,-1,0,0,-1,0,0,0,1,6.71764e-8,-1,2.38095e-7,-4.11973e-8,-1,-1.57307e-7,-1.32456e-8,-1,7.94738e-8,4.4407e-9,-1,1.85594e-7,1.17515e-8,-1,9.56046e-8,0,-1,0,1.14074e-8,-1,2.98023e-8,0,-1,0,-2.66541e-9,-1,5.96046e-8,1.0525e-10,-1,5.6525e-8,0,0,-1,-0.0463845,0,-0.998924,0,-1,0,0,-1,0,0,1,0,0,1,0,0,0,-1,-0.0463845,0,-0.998924,-5.41036e-7,1,-0.00000131139,-1.32456e-8,1,-7.94738e-8,-2.42434e-14,1,-1.58949e-7,-1.23047e-7,1,-3.48705e-7,-5.00467e-8,1,-3.17996e-7,0,1,0,2.46654e-9,1,-2.98023e-8,-1.13839e-9,1,-5.96046e-8,1.77917e-8,1,6.03631e-9,2.02963e-9,1,-4.5387e-8,0.0457993,-5.48889e-8,0.998951,0.155468,0,0.987841,0.253347,4.28659e-8,0.967375,0.332759,8.46926e-8,0.943012,0.3916,0,0.920135,0.43,-3.1431e-7,0.902829,-0.332696,9.94759e-8,-0.943034,-0.391555,0,-0.920155,-0.429974,0,-0.902841,-0.448859,1.62645e-7,-0.893603,0.046112,0,0.998936,0.155402,0,0.987851,0.155402,0,0.987851,0.155402,0,0.987851,0.155402,0,0.987851,0.253265,0,0.967397,0.332685,-2.66446e-7,0.943038,0.332685,0,0.943038,0.332685,0,0.943038,0.332685,2.66442e-7,0.943038,0.332685,0,0.943038,0.332685,0,0.943038,0.391547,3.04221e-8,0.920158,0.42997,3.06589e-8,0.902843,0.0457993,5.48889e-8,0.998951,0.155468,0,0.987841,0.253347,4.28659e-8,0.967375,-0.332696,-9.94759e-8,-0.943034,0.332759,8.46926e-8,0.943012,-0.391555,0,-0.920155,0.3916,0,0.920135,0.43,3.1431e-7,0.902829,-0.448859,-1.62645e-7,-0.893603,0,1,0,-6.54502e-7,-1,-0.00000130301,-9.20724e-8,-1,-1.77527e-7,-1.18666e-14,-1,5.60624e-8,4.51517e-8,-1,1.66329e-7,2.95996e-8,-1,1.08604e-7,-1.21856e-8,-1,2.25068e-8,-2.63274e-8,-1,-9.62437e-9,-4.28773e-8,1,-1.49568e-7,1.3317e-7,1,2.34924e-7,-1.27576e-14,1,-4.47036e-8,-4.25272e-15,1,-3.97363e-8,0,1,-4.47035e-8,-2.34239e-9,1,-4.62477e-8,0,1,-5.02898e-8,-2.36217e-8,1,-1.50157e-7,7.9057e-15,1,-4.23514e-8,-1.14468e-8,1,-6.74913e-8,-1.09344e-9,1,-5.1311e-8,6.43485e-15,1,-4.47036e-8,7.2413e-10,1,-4.03279e-8,-4.25266e-15,1,-3.97363e-8,-5.03496e-15,1,-3.97363e-8,-1.60877e-14,1,-4.47036e-8,-2.04954e-9,1,-4.47035e-8,9.0412e-10,1,-5.53219e-8,2.33718e-9,1,-3.73797e-8,-1.01022e-8,1,-7.02986e-8,-7.47624e-15,1,-4.47036e-8,1.29682e-8,1,-2.33605e-9,-9.59561e-9,1,-7.49151e-8,-6.57636e-15,1,-4.47036e-8,4.87022e-16,1,-4.47035e-8,2.74717e-9,1,-3.36708e-8,3.86602e-10,1,-4.30453e-8,-1.43945e-7,0,1,-1.83594e-7,0,-1,-1.83594e-7,0,-1,-1.66789e-7,0,-1,-1.66789e-7,0,-1,-1.26709e-7,0,-1,-1.26709e-7,0,-1,-1.66789e-7,0,-1,-5.70813e-7,0,-1,-1.50032e-7,-3.83246e-7,-1,-1.07023e-7,0,-1,-5.70813e-7,0,-1,0.448868,0,0.893598,0.448898,0,0.893583,0.448898,0,0.893583,0.448898,0,0.893583,0.448898,0,0.893583,0.448858,2.99755e-7,0.893603,0.44888,0,0.893592,0.448858,-2.99755e-7,0.893603,0.44888,0,0.893592,0.448858,0,0.893603,0.448858,0,0.893603,-0.448897,0,-0.893584,-1,0,-9.93427e-9,-0.0000858307,-1,4.47035e-8,-1,0,-9.93427e-9,0.0000858307,1,-4.47035e-8,-1,0,0,-1,0,0,-1,0,0,-0.999966,0.0078122,0.00260408,-1,0,-9.93427e-9,-1,-1.49012e-8,6.66134e-16,-0.999966,-0.0078122,0.00260408,-1,8.51496e-9,2.12874e-9,-0.0000171662,1,-4.47036e-8,-1,0,0,-1,0,9.93427e-9,-0.999983,-0.00572906,-0.000520825,-0.999966,0.0078122,-0.00260408,-0.0000858307,1,-4.47035e-8,-1,-8.51496e-9,-2.12874e-9,-1,0,9.93427e-9,-1,0,0,-1,0,9.93427e-9,1.86669e-7,0,-1,-1.05833e-7,-0.00000492732,1,-1.0796e-7,-0.00000683467,1,0.164399,0,-0.986394,-1,-1.19209e-7,-5.96046e-8,-1,1.19209e-7,-5.96046e-8,-1,-1.19209e-7,5.96046e-8,-1,1.19209e-7,5.96046e-8,0.164399,0,0.986394,2.31357e-9,-1,8.60254e-8,-9.91689e-14,-1,2.27596e-7,8.50544e-15,-1,7.94727e-8,8.50533e-15,-1,7.94727e-8,7.37665e-15,-1,4.47036e-8,1.27576e-14,-1,4.47036e-8,-4.92476e-7,-1,-9.80438e-7,-6.19558e-9,-1,2.44852e-8,0,-1,5.02898e-8,3.48814e-9,-1,5.82707e-8,-7.9057e-15,-1,4.23514e-8,2.34239e-9,-1,4.62477e-8,1.09344e-9,-1,5.1311e-8,-6.43485e-15,-1,4.47036e-8,-1.05717e-9,-1,3.83154e-8,4.02888e-15,-1,4.47035e-8,-4.87022e-16,-1,4.47035e-8,3.09132e-15,-1,4.47035e-8,1.60877e-14,-1,4.47036e-8,-2.07138e-9,-1,4.47037e-8,3.02155e-9,-1,4.72254e-8,4.70642e-9,-1,5.60195e-8,7.57892e-9,-1,6.91999e-8,-3.432e-9,-1,3.44824e-8,5.44397e-9,-1,6.063e-8,-2.85382e-7,-0.0000034968,-1,0,0,1,-1.03498e-7,-0.0000055631,-1,1.6231e-7,0,1,-1.05833e-7,0.00000492732,1,1.86669e-7,0,-1,-1.0796e-7,0.00000683467,1,-2.85382e-7,0.0000034968,-1,-1.03498e-7,0.0000055631,-1]},\"curve_outer_4\":{\"normals\":[0.893225,0,0.44961,-0.999686,0,-0.0250375,-0.893226,0,-0.449608,-0.870086,0,-0.4929,-0.844854,0,-0.534997,-0.817584,0,-0.57581,-0.788347,0,-0.615231,-0.75721,0,-0.653172,-0.724245,0,-0.689542,-0.893226,0,-0.449608,-0.870086,0,-0.4929,-0.844854,0,-0.534997,-0.817585,0,-0.575808,-0.788347,0,-0.615231,-0.757209,0,-0.653173,-0.724246,0,-0.689542,-0.689541,0,-0.724246,-0.653171,0,-0.75721,-0.615232,0,-0.788346,0.0249712,0,0.999688,-0.893224,0,-0.449611,-0.870087,0,-0.492898,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,-0.0000038147,-1,0,-0.0000038147,0,0,-1,-0.615234,0,-0.788345,-0.757209,0,-0.653173,-0.689541,0,-0.724246,-0.615233,0,-0.788345,-0.653172,0,-0.75721,-0.689541,0,-0.724247,6.3884e-7,1,2.11131e-7,9.56288e-9,1,-3.15236e-8,6.67655e-7,1,8.24242e-8,-6.62921e-7,1,-1.14944e-7,0,1,-3.3521e-8,1.6535e-9,1,-3.36541e-8,7.25866e-9,1,-4.89374e-8,1.71921e-7,1,1.77268e-8,1.55288e-8,1,-2.90524e-8,1.83019e-8,1,-2.73902e-8,2.08984e-8,1,-2.54645e-8,2.32939e-8,1,-2.32932e-8,2.54656e-8,1,-2.0897e-8,3.86462e-7,1,5.48735e-7,-3.01776e-7,1,-5.99523e-7,-2.41556e-7,1,-6.26209e-7,-1.79005e-7,1,-6.46844e-7,-1.14743e-7,1,-6.61284e-7,0,1,0,-1.64712e-8,1,-1.67235e-7,1.5527e-8,1,-5.55551e-9,1.41439e-8,1,-8.47959e-9,2.44383e-8,1,-2.21489e-8,1.96477e-8,1,-2.6491e-8,3.24966e-9,1,-6.61411e-8,5.99957e-7,1,4.06469e-8,7.26633e-9,1,-4.89361e-8,-5.85919e-7,1,-1.35261e-7,4.48164e-7,1,0.0000029651,-7.13607e-8,1,-6.04876e-7,1.60907e-8,1,-6.42363e-8,8.04536e-9,1,-3.21181e-8,6.67936e-9,1,-3.26534e-8,-0.00000280969,1,-0.00000104911,2.22206e-7,1,5.67107e-7,1.55261e-8,1,-5.55838e-9,-5.48191e-7,1,-2.4694e-7,2.83126e-8,1,-5.98648e-8,2.17469e-7,1,5.63766e-7,2.99314e-8,1,-1.4157e-8,1.4101e-8,1,-2.98155e-8,1.83681e-8,1,-2.78117e-8,0,1,0,3.28575e-7,1,5.1286e-7,1.70221e-8,1,-2.83999e-8,1.70221e-8,1,-2.83999e-8,1.41587e-8,1,-8.45505e-9,-2.97409e-7,1,-5.31531e-7,1.58708e-8,1,-2.93081e-8,1.9637e-8,1,-2.6499e-8,2.65943e-8,1,-1.97242e-8,2.34392e-8,1,-2.36952e-8,2.22352e-8,1,-2.45336e-8,2.7611e-8,1,-1.86676e-8,2.22353e-8,1,-2.45337e-8,2.44334e-8,1,-2.21546e-8,2.12833e-8,1,-2.5649e-8,0.61523,0,0.788347,0.653171,0,0.75721,0.689542,0,0.724245,0.724244,0,0.689543,0.757209,0,0.653172,0.788345,0,0.615233,0.817585,0,0.575808,0.844854,0,0.534996,0.870088,0,0.492897,0.893225,0,0.44961,0.615231,0,0.788347,0.65317,0,0.757212,0.689542,0,0.724245,0.724244,0,0.689544,0.75721,0,0.653171,0.788348,0,0.61523,0.817584,0,0.57581,0.844854,0,0.534997,0.870086,0,0.4929,0.893225,0,0.44961,0.985278,0,0.170961,0,0.0000038147,-1,0.00000435965,0,-1,0,-0.0000038147,-1,-0.00000190735,0.0000219345,-1,0,0,-1,0,0,-1,-0.00000190735,-0.0000219345,-1,0,0,-1,-0.999688,0,-0.0249732,-0.99729,0,-0.0735646,-0.992479,0,-0.122412,-0.985278,0,-0.170962,-0.975702,0,-0.219101,-0.963776,0,-0.266715,-0.949529,0,-0.31368,-0.932992,0,-0.359897,-0.975703,0,-0.219097,8.26281e-14,-1,4.33209e-8,1.29389e-8,-1,4.24424e-8,1.60096e-7,-1,6.97732e-8,-1.00557e-8,-1,4.01479e-8,-1.39454e-8,-1,3.8968e-8,1.36502e-7,-1,1.05766e-7,-2.1278e-8,-1,3.54996e-8,-1.97251e-8,-1,2.65936e-8,-2.22367e-8,-1,2.45323e-8,-2.14667e-8,-1,1.94561e-8,2.85982e-8,-1,8.37214e-8,2.38137e-8,-1,8.40087e-8,1.92037e-8,-1,8.41637e-8,1.47589e-8,-1,8.4247e-8,1.04447e-8,-1,8.42819e-8,6.22839e-9,-1,8.42986e-8,2.12468e-9,-1,8.50499e-8,1.1173e-9,-1,4.47035e-8,-1.25627e-9,-1,4.07896e-8,9.99487e-12,-1,4.23776e-8,3.46322e-10,-1,4.39666e-8,1.60805e-9,-1,4.69608e-8,-8.24607e-9,-1,3.40428e-8,-2.10309e-8,-1,2.56252e-8,-5.57465e-8,-1,1.48399e-8,-1.20293e-8,-1,3.96536e-8,-4.276e-8,-1,3.96822e-8,-1.25827e-9,-1,4.25578e-8,-5.8606e-10,-1,4.2785e-8,2.98168e-9,-1,4.42071e-8,6.12291e-9,-1,4.79098e-8,2.11921e-10,-1,4.43489e-8,8.0499e-11,-1,4.30903e-8,1.89508e-9,-1,5.01124e-8,-3.36752e-9,-1,3.03523e-8,1.00287e-8,-1,4.5612e-8,6.09918e-8,-1,5.37539e-8,1.67112e-9,-1,5.10691e-8,-8.02584e-10,-1,3.52531e-8,9.10066e-9,-1,4.56378e-8,1.95859e-9,-1,4.46757e-8,1.74092e-9,-1,5.41346e-8,1.01977e-9,-1,4.37668e-8,-9.83481e-10,-1,4.44711e-8,-2.37559e-9,-1,4.46736e-8,3.69865e-10,-1,4.82334e-8,2.3973e-9,-1,4.73936e-8,-2.65586e-9,-1,4.53502e-8,-1.29176e-8,-1,3.15935e-8,6.25772e-9,-1,5.02733e-8,-1.10171e-10,-1,4.29533e-8,1.99541e-8,-1,6.01898e-8,-3.63166e-8,-1,1.72796e-8,-5.04132e-9,-1,3.64868e-8,6.30892e-8,-1,1.47332e-7,7.52167e-10,-1,4.43211e-8,2.38184e-8,-1,5.8395e-8,1.78606e-9,-1,4.6859e-8,-5.25339e-9,-1,3.47504e-8,6.95386e-9,-1,4.85906e-8,5.1583e-10,-1,4.53836e-8,8.01621e-9,-1,6.13897e-8,-2.47817e-9,-1,4.46249e-8,2.5046e-9,-1,3.96421e-8,-2.80989e-7,1,-6.33908e-7,3.71008e-7,1,5.85886e-7,2.73498e-8,1,-2.02637e-8,4.7815e-7,1,5.02214e-7,2.28604e-8,1,-2.52192e-8,2.02747e-8,1,-2.73411e-8,6.20894e-7,1,3.12622e-7,1.45406e-8,1,-3.07766e-8,1.14687e-8,1,-3.20481e-8,6.8486e-7,1,1.18913e-7,4.99401e-9,1,-3.36699e-8,6.88583e-7,1,-1.74471e-8,0,1,-5.29819e-8,0,1,-5.15798e-8,1.78406e-7,1,-7.94646e-9,1.30443e-8,1,-3.14843e-8,-1.20528e-7,1,-1.31767e-7,-1.04559e-7,1,-1.40706e-7,-7.50994e-8,1,-1.584e-7,1.14513e-7,1,2.02311e-7,-1.18562e-7,1,-6.83295e-7,0,1,0,-1.70194e-8,1,-1.72801e-7,-5.38385e-8,1,-1.77482e-7,1.98538e-8,1,-1.62928e-8,5.64885e-8,1,-1.34891e-8,-2.95639e-8,1,-4.93143e-8,-6.73698e-14,1,-5.29818e-8,0,1,-3.71758e-8,2.77835e-9,1,-3.63481e-8,-5.87056e-14,1,-4.6168e-8,-1.8731e-9,1,-4.27671e-8,5.34797e-9,1,-2.20115e-8,-2.6491e-8,1,-1.58946e-7,4.4336e-9,1,-2.98023e-8,-4.16029e-8,1,-4.45535e-8,8.72744e-8,1,-6.26962e-8,4.40343e-7,1,-0.00000295995,-9.80236e-10,1,-3.91693e-8,-1.6747e-8,1,-3.99045e-8,-1.47421e-8,1,-4.06723e-8,-2.35786e-9,1,-3.19651e-8,-3.44707e-9,1,-2.79481e-8,-1.36096e-8,1,-4.15905e-8,-1.3252e-8,1,-4.27696e-8,-4.45305e-9,1,-2.56637e-8,-5.50033e-9,1,-2.44943e-8,-1.62215e-8,1,-5.23534e-8,-1.44368e-7,1,-9.47618e-8,2.86766e-8,1,-3.30551e-8,-1.6341e-8,1,-4.94651e-8,-6.89619e-8,1,-7.04445e-8,1.57804e-7,1,-2.19218e-9,-2.02695e-8,1,-5.25463e-8,4.93219e-8,1,2.13124e-8,-3.46404e-9,1,-4.38593e-8,-2.01432e-10,1,-4.32758e-8,-5.29667e-8,1,-1.05226e-7,9.41561e-8,1,9.22502e-8,1.94478e-9,1,-4.32178e-8,-3.95817e-8,1,-3.08898e-8,2.03826e-9,1,-3.65904e-8,-1.51991e-7,1,-3.0816e-7,-1.48852e-8,1,-6.09827e-8,-1.45857e-8,1,-6.42206e-8,9.42624e-8,1,1.33842e-7,-2.63966e-8,1,-9.30767e-8,-1.57686e-8,1,-6.94289e-8,-1.91142e-8,1,-7.79699e-8,-0.999687,0,-0.0250219,-0.997291,0,-0.0735613,-0.992479,0,-0.122411,-0.985278,0,-0.170961,-0.975702,0,-0.219102,-0.963776,0,-0.266715,-0.94953,0,-0.313676,-0.932992,0,-0.359898,-0.91421,0,-0.405242,-0.963776,0,-0.266712,-0.073565,0,-0.99729,-0.932993,0,-0.359895,-0.534998,0,-0.844853,-0.914211,0,-0.405239,0.914209,0,0.405243,0.932993,0,0.359894,0.949529,0,0.313681,0.963776,0,0.266714,0.975703,0,0.219099,0.985277,0,0.170965,0.99248,0,0.122409,0.99729,0,0.0735659,0.999688,0,0.024985,0,-1,3.85779e-8,-7.59864e-7,-1,1.93192e-8,-5.51321e-9,-1,3.7187e-8,-9.1325e-9,-1,3.64673e-8,-1.26607e-8,-1,3.53975e-8,-1.60559e-8,-1,3.39928e-8,-1.93269e-8,-1,3.22451e-8,-2.23924e-8,-1,3.01968e-8,-2.52427e-8,-1,2.78583e-8,-2.78582e-8,-1,2.52426e-8,-4.71253e-7,-1,-6.03856e-7,-1.61218e-8,-1,9.66462e-9,-1.69915e-8,-1,8.03798e-9,1.20115e-7,-1,3.63597e-7,8.39074e-8,-1,3.73659e-7,4.68777e-8,-1,3.80077e-7,0,-1,0,4.77527e-9,-1,9.62445e-8,-9.00452e-9,-1,2.73154e-9,-1.65976e-8,-1,8.8709e-9,9.96903e-8,-1,1.65971e-7,-2.38791e-8,-1,2.90942e-8,-1.77389e-8,-1,3.31969e-8,-1.09274e-8,-1,3.60177e-8,1.92626e-7,-1,6.65783e-8,5.12534e-7,-1,1.13613e-7,-9.13432e-7,-1,-4.29021e-8,-4.83717e-8,-1,-4.40691e-7,-3.32789e-8,-1,-2.69821e-7,-8.69864e-9,-1,3.70151e-8,-7.3768e-9,-1,3.70863e-8,-1.85431e-8,-1,3.68842e-9,-7.37682e-9,-1,3.70864e-8,-6.13145e-9,-1,3.75254e-8,-9.12708e-8,-1,-2.58946e-7,-9.00462e-9,-1,2.73123e-9,-1.09185e-8,-1,3.60204e-8,-1.57546e-8,-1,3.46065e-8,6.79793e-8,-1,2.66032e-7,-1.44704e-8,-1,3.49346e-8,-1.44707e-8,-1,3.49354e-8,-1.74674e-8,-1,7.23499e-9,-1.78054e-8,-1,6.66501e-9,-1.33443e-8,-1,3.56033e-8,-1.77608e-8,-1,3.31851e-8,-1.65959e-8,-1,8.87403e-9,2.37128e-7,-1,4.9528e-7,-2.2201e-8,-1,3.0869e-8,-2.10077e-8,-1,3.14403e-8,-3.1441e-8,-1,2.10079e-8,-2.10076e-8,-1,3.14403e-8,-2.00238e-8,-1,3.23236e-8,-3.23192e-8,-1,2.00298e-8,5.70681e-7,-1,7.39874e-7,-2.38711e-8,-1,2.91008e-8,-2.77987e-8,-1,2.59432e-8,-3.55169e-7,-1,-4.11743e-7,-2.67376e-8,-1,2.67379e-8,-2.67375e-8,-1,2.67379e-8,0.914211,0,0.405238,0.932991,0,0.359899,0.94953,0,0.313677,0.963776,0,0.266714,0.975702,0,0.2191,0.985277,0,0.170965,0.99248,0,0.122409,0.997291,0,0.0735623,0.999687,0,0.0250365,-0.844856,0,-0.534994,0.122411,0,0.992479,-0.266711,0,-0.963776,0,-1,6.73908e-8,6.9735e-7,-1,8.44621e-8,-6.70935e-7,-1,-4.95689e-8,-8.00561e-9,-1,3.19545e-8,-6.48336e-7,-1,-1.79497e-7,-1.40709e-8,-1,2.97862e-8,-1.69349e-8,-1,2.82558e-8,-1.96242e-8,-1,2.64589e-8,-2.21218e-8,-1,2.44091e-8,-2.44084e-8,-1,2.21226e-8,-2.19697e-7,-1,-2.54752e-7,-1.93658e-7,-1,-2.75042e-7,-1.48895e-8,-1,7.04268e-9,-1.55084e-8,-1,5.54855e-9,-8.95015e-8,-1,-3.23418e-7,-5.73727e-8,-1,-3.3065e-7,0,-1,0,4.17666e-9,-1,8.42839e-8,1.25247e-8,-1,8.38959e-8,2.138e-8,-1,8.3728e-8,3.09284e-8,-1,8.31776e-8,-2.09235e-8,-1,2.54953e-8,-1.55441e-8,-1,2.90894e-8,-1.72584e-7,-1,-9.27033e-9,-5.03132e-10,-1,4.98793e-8,-5.97773e-7,-1,-1.0904e-8,-7.18733e-8,-1,4.28192e-8,-1.3141e-7,-1,-0.00000128637,2.0798e-8,-1,3.03826e-7,5.91806e-7,-1,1.06344e-7,3.06844e-7,-1,8.68375e-8,-1.62371e-8,-1,3.22971e-9,2.97341e-7,-1,1.3462e-7,-5.06829e-9,-1,3.2942e-8,-1.6471e-8,-1,2.53415e-9,4.23511e-7,-1,0.00000143874,0.0000028569,-1,9.09712e-7,5.59714e-7,-1,2.19763e-7,-9.47793e-8,-1,-2.86902e-7,-1.5295e-8,-1,6.33545e-9,-2.53414e-8,-1,6.11804e-8,-1.2671e-8,-1,3.05908e-8,-1.5295e-8,-1,6.33546e-9,-1.67171e-7,-1,-2.58492e-7,-1.14086e-8,-1,3.13148e-8,-1.56112e-8,-1,2.90535e-8,6.88785e-7,-1,0.00000133236,-1.34385e-8,-1,9.85511e-9,-1.97094e-8,-1,2.68775e-8,-1.83954e-8,-1,2.75302e-8,-1.37652e-8,-1,9.19746e-9,-2.75311e-8,-1,1.83954e-8,-1.83953e-8,-1,2.75302e-8,-1.72885e-8,-1,2.84952e-8,1.71656e-7,-1,2.46856e-7,-9.73183e-7,-1,-0.00000114034,-2.09191e-8,-1,2.54992e-8,-2.45737e-8,-1,2.25164e-8,-2.25161e-8,-1,2.4574e-8,-2.34129e-8,-1,2.34125e-8,-2.34128e-8,-1,2.34124e-8,-0.122409,0,-0.99248,0.844852,0,0.534999,0.2191,0,0.975703,0.164399,0,-0.986394,-0.575807,0,-0.817585,-0.534997,0,-0.844854,-0.492899,0,-0.870087,-0.449612,0,-0.893224,-0.40524,0,-0.914211,0.40524,0,0.91421,1.27382e-8,1,1.72692e-7,2.88329e-8,1,1.66168e-7,5.30076e-8,1,1.60519e-7,1.55877e-8,1,-5.57673e-9,1.4966e-8,1,-7.07786e-9,2.13005e-8,1,-1.27655e-8,1.9953e-8,1,-1.47839e-8,-9.17514e-8,1,-1.44373e-7,2.22367e-8,1,-2.45323e-8,1.97251e-8,1,-2.65936e-8,1.63766e-7,1,5.473e-8,1.76807e-8,1,-3.7422e-8,1.39454e-8,1,-3.8968e-8,1.00557e-8,1,-4.01479e-8,6.07191e-9,1,-4.09403e-8,1.57151e-7,1,-3.81934e-8,-8.26281e-14,1,-4.33209e-8,1.25827e-9,1,-4.25578e-8,-4.19157e-8,1,-4.80586e-8,1.20293e-8,1,-3.96536e-8,-1.86408e-8,1,-5.46007e-8,2.10309e-8,1,-2.56252e-8,-5.93272e-9,1,-4.96867e-8,-2.14888e-8,1,-8.41552e-8,1.63636e-9,1,-4.45681e-8,4.17822e-9,1,-3.96169e-11,-1.1173e-9,1,-4.47035e-8,6.11193e-9,1,-3.2783e-8,-1.12824e-9,1,-5.36818e-8,2.29125e-9,1,-3.96657e-8,-6.12291e-9,1,-4.79098e-8,-2.98168e-9,1,-4.42071e-8,5.8606e-10,1,-4.2785e-8,-2.4727e-9,1,-4.35996e-8,-9.87767e-9,1,-8.00856e-8,3.36752e-9,1,-3.03523e-8,-1.40099e-8,1,-4.64056e-8,-9.10066e-9,1,-4.56378e-8,4.22772e-9,1,-2.68154e-8,7.74002e-9,1,-4.35901e-9,-1.95859e-9,1,-4.46757e-8,9.83481e-10,1,-4.44711e-8,-5.18414e-10,1,-6.5665e-8,2.73946e-9,1,-1.88275e-8,2.37559e-9,1,-4.46736e-8,2.65586e-9,1,-4.53502e-8,4.99463e-9,1,-3.43266e-8,3.64301e-9,1,-3.37667e-8,1.29176e-8,1,-3.15935e-8,-1.99541e-8,1,-6.01898e-8,1.63441e-8,1,-2.42922e-8,-1.39049e-8,1,-5.90638e-8,1.22356e-8,1,-3.5643e-8,-1.55271e-7,1,-1.38601e-7,1.22289e-8,1,-2.4793e-8,-6.30892e-8,1,-1.47332e-7,-2.38184e-8,1,-5.8395e-8,-6.95386e-9,1,-4.85906e-8,-1.78606e-9,1,-4.6859e-8,5.25339e-9,1,-3.47504e-8,-5.1583e-10,1,-4.53836e-8,2.47817e-9,1,-4.46249e-8,7.33776e-9,1,-3.05659e-8,3.51257e-9,1,-4.56592e-8,-0.575809,0,-0.817585,-0.534997,0,-0.844854,-0.492898,0,-0.870087,-0.449613,0,-0.893223,-0.405238,0,-0.914211,-0.359897,0,-0.932992,-0.313681,0,-0.949528,-0.266712,0,-0.963776,-0.2191,0,-0.975702,-0.170961,0,-0.985278,-0.122411,0,-0.99248,-0.0735638,0,-0.99729,-0.0250178,0,-0.999687,0,-1,3.71758e-8,0,-1,5.29818e-8,0,-1,6.93134e-8,6.737e-14,-1,5.29819e-8,1.60303e-7,-1,8.49302e-8,-3.01602e-7,-1,-4.6884e-10,8.81366e-14,-1,6.93134e-8,-3.33564e-9,-1,3.38744e-8,-6.90003e-7,-1,-8.51929e-8,-9.88185e-9,-1,3.25722e-8,-1.30371e-8,-1,3.1443e-8,5.87349e-7,-1,3.71836e-7,-1.8911e-8,-1,2.83015e-8,-2.15952e-8,-1,2.63106e-8,-2.40664e-8,-1,2.4071e-8,-4.52972e-7,-1,-5.25122e-7,1.71361e-7,-1,3.0241e-7,-1.50101e-8,-1,8.02162e-9,-1.57235e-8,-1,6.51325e-9,-1.62861e-8,-1,4.94089e-9,-7.59731e-8,-1,-3.38327e-7,0,-1,0,8.50969e-9,-1,8.64004e-8,-1.60436e-8,-1,5.74054e-9,2.63116e-8,-1,8.53289e-8,9.75256e-8,-1,1.45663e-7,-2.03006e-8,-1,2.7373e-8,-1.74989e-7,-1,-3.56396e-8,1.57877e-7,-1,8.34614e-8,2.92577e-8,-1,3.70846e-8,-7.10863e-9,-1,4.79224e-8,-1.44221e-8,-1,4.03027e-8,1.20796e-8,-1,5.13878e-8,-8.12186e-9,-1,2.78803e-8,-2.67399e-9,-1,1.10057e-8,1.28093e-9,-1,4.47035e-8,-5.35052e-9,-1,3.60702e-8,-5.30202e-9,-1,3.61712e-8,7.38502e-8,-1,-4.43101e-7,9.80236e-10,-1,3.91693e-8,5.45516e-9,-1,4.74148e-8,7.85578e-8,-1,5.95642e-8,2.35786e-9,-1,3.19651e-8,-9.17616e-9,-1,7.4502e-8,5.26168e-8,-1,5.57737e-8,-9.98906e-8,-1,3.96121e-8,6.67958e-9,-1,3.84955e-8,-6.68543e-9,-1,5.34187e-8,6.54737e-9,-1,4.2778e-8,4.41786e-9,-1,4.30354e-8,1.33912e-8,-1,4.83898e-8,-5.48303e-9,-1,4.15097e-8,3.09613e-9,-1,4.36509e-8,2.46273e-9,-1,4.47077e-8,5.69703e-10,-1,4.62571e-8,5.78828e-9,-1,6.56503e-8,2.34467e-9,-1,4.25646e-8,-4.99183e-8,-1,9.43109e-9,1.49484e-9,-1,4.83509e-8,-2.02127e-10,-1,4.01379e-8,-3.62531e-8,-1,1.79489e-8,-3.22018e-8,-1,2.03652e-8,-7.87069e-10,-1,3.55898e-8,-7.2802e-10,-1,3.29197e-8,-3.05105e-8,-1,2.12854e-8,5.82526e-8,-1,6.11845e-8,-1.89535e-10,-1,3.13861e-8,-1.23877e-8,-1,4.14501e-8,-1.38441e-8,-1,4.1513e-8,-0.817584,0,-0.575809,-0.949528,0,-0.313683,0.359895,0,0.932993,0.534998,0,0.844853,-0.986394,0,0.164399,-0.986394,-6.27131e-7,0.164399,-0.986394,6.27129e-7,0.164398,-0.219101,0,-0.975702,-1.11938e-9,1,-4.47035e-8,-4.69226e-9,1,-1.87498e-7,-2.2736e-8,1,-1.84339e-7,8.84303e-9,1,-2.21514e-9,1.71679e-8,1,-6.13903e-9,1.64815e-8,1,-7.79644e-9,-7.59114e-8,1,-1.70981e-7,1.2892e-7,1,1.35569e-7,1.4833e-7,1,1.16145e-7,-1.16146e-7,1,-1.48331e-7,2.17206e-8,1,-2.92901e-8,1.87459e-8,1,-3.12775e-8,-1.50343e-7,1,-1.16487e-7,-1.60973e-7,1,-1.01167e-7,-1.70141e-7,1,-8.49089e-8,1.89687e-7,1,-1.33345e-8,-1.59738e-8,1,-4.68696e-8,-9.14324e-14,1,-4.79369e-8,1.72406e-8,1,-3.64125e-8,-4.6643e-8,1,-4.83908e-8,1.19242e-8,1,-3.93036e-8,-2.26806e-8,1,-5.61076e-8,-1.41898e-8,1,-5.5923e-8,-3.77642e-8,1,-8.91781e-8,-3.78334e-9,1,-5.0643e-8,-1.38639e-8,1,-9.28669e-8,4.60769e-9,1,-2.03693e-12,7.02198e-9,1,-3.25241e-8,-9.56203e-9,1,-7.75276e-8,-8.87e-11,1,-4.7456e-8,6.17117e-10,1,-4.24103e-8,1.02458e-9,1,-4.3437e-8,-4.17781e-9,1,-4.41881e-8,-1.86327e-8,1,-4.96318e-8,5.43897e-8,1,-2.8706e-8,1.86879e-9,1,-3.76392e-8,-4.75914e-9,1,-8.23845e-8,-1.00758e-8,1,-4.53642e-8,5.1023e-8,1,-3.66901e-8,2.30824e-9,1,-3.26034e-8,3.44782e-9,1,-2.27684e-8,3.81752e-8,1,-3.81788e-8,-8.1833e-10,1,-3.98503e-8,2.13246e-9,1,-5.34505e-8,-2.04608e-9,1,-3.14103e-8,4.79546e-10,1,-4.00964e-8,4.3565e-9,1,-4.94562e-8,5.28526e-9,1,-3.4447e-8,2.87003e-9,1,-3.60924e-8,1.42827e-8,1,-3.48854e-8,1.36646e-8,1,-3.54527e-8,2.65899e-8,1,-1.02477e-8,-2.73873e-8,1,-7.8373e-8,1.73821e-8,1,-3.25072e-8,4.57719e-8,1,-1.5499e-8,8.51706e-9,1,-3.05872e-8,-1.45112e-8,1,-6.95566e-8,-7.12099e-8,1,-8.46274e-8,1.20521e-8,1,-3.82664e-8,-4.50767e-9,1,-5.15907e-8,-1.26282e-9,1,-4.46177e-8,1.44942e-8,1,-3.713e-8,-6.19232e-10,1,-4.15276e-8,-1.65367e-9,1,-4.04931e-8,-0.0249738,0,-0.999688,-0.0735626,0,-0.997291,-0.122412,0,-0.992479,-0.170962,0,-0.985278,-0.219099,0,-0.975703,-0.266713,0,-0.963776,-0.313681,0,-0.949528,-0.359896,0,-0.932992,0.0249857,0,0.999688,0.0735637,0,0.99729,0.122411,0,0.992479,0.170961,0,0.985278,0.219099,0,0.975703,0.266712,0,0.963776,0.313681,0,0.949529,0.359897,0,0.932992,0.405237,0,0.914212,0.449614,0,0.893223,0.492898,0,0.870087,0.534998,0,0.844853,0.57581,0,0.817584,-1,0,0,0.0250323,0,0.999687,0.0735652,0,0.99729,0.12241,0,0.99248,0.170961,0,0.985278,0.2191,0,0.975702,0.266712,0,0.963776,0.31368,0,0.949529,0.359898,0,0.932992,0.405238,0,0.914211,0.449612,0,0.893224,0.492899,0,0.870086,0.534998,0,0.844853,0.575809,0,0.817584,-0.0250357,0,-0.999687,0.653171,0,0.75721,0.817585,0,0.575808,0.870088,0,0.492897,0.91421,0,0.405241,0.170961,0,0.985278,0.724246,0,0.689541,-5.63474e-8,1,-7.63876e-7,-2.04286e-7,1,-7.38197e-7,-2.75688e-7,1,-7.14688e-7,-3.44369e-7,1,-6.84142e-7,-4.09766e-7,1,-6.47091e-7,5.00316e-7,1,5.8001e-7,2.65812e-8,1,-2.65839e-8,2.38543e-8,1,-2.90559e-8,2.08863e-8,1,-3.12576e-8,1.7722e-8,1,-3.31542e-8,1.44035e-8,1,-3.47253e-8,1.09187e-8,1,-3.5973e-8,-7.4005e-7,1,-2.04701e-7,3.68724e-9,1,-3.74122e-8,0,1,-3.83495e-8,1.8927e-9,1,-3.85305e-8,1.96363e-7,1,-1.84358e-8,1.26839e-8,1,-3.54376e-8,1.93504e-8,1,-3.22838e-8,2.52757e-8,1,-2.78894e-8,1.51172e-8,1,-1.12092e-8,1.70123e-8,1,-8.04684e-9,-3.74127e-8,1,-1.88087e-7,-6.43899e-9,1,-2.57147e-7,7.6397e-8,1,5.21829e-7,1.85521e-9,1,-3.77673e-8,5.55164e-10,1,-3.80195e-8,-8.62137e-10,1,-1.82041e-7,-9.1722e-7,1,-1.8362e-7,5.56667e-7,1,1.98609e-8,9.18801e-9,1,-3.66797e-8,9.18796e-9,1,-3.66795e-8,2.36077e-7,1,9.03751e-7,1.45016e-7,1,5.24022e-7,7.95889e-9,1,-3.71818e-8,1.26615e-8,1,-3.54455e-8,3.56027e-8,1,-1.27389e-8,1.74194e-8,1,-3.37971e-8,1.61672e-8,1,-3.41834e-8,2.56547e-7,1,4.85481e-7,1.70139e-8,1,-8.04343e-9,1.61668e-8,1,-3.41826e-8,1.50625e-8,1,-3.49129e-8,2.44469e-7,1,4.85675e-7,3.24332e-8,1,-1.94396e-8,1.93485e-8,1,-3.2285e-8,2.36889e-8,1,-2.97425e-8,3.46348e-7,1,4.26127e-7,2.25248e-8,1,-3.03718e-8,2.25248e-8,1,-3.03718e-8,1.5112e-8,1,-1.12161e-8,-3.07202e-7,1,-4.55083e-7,2.15818e-8,1,-3.13059e-8,2.52798e-8,1,-2.78856e-8,-1.7968e-7,1,-2.66175e-7,2.90367e-8,1,-2.45489e-8,-2.19263e-7,1,-2.30298e-7,1.74099e-7,-1,7.64572e-8,-1.3236e-8,-1,4.36173e-8,-1.87268e-7,-1,-3.31658e-8,-1.7189e-8,-1,3.21595e-8,-2.02609e-8,-1,3.03181e-8,1.23285e-7,-1,1.42453e-7,1.08743e-7,-1,1.53866e-7,-2.11403e-8,-1,1.73506e-8,8.04213e-8,-1,1.69586e-7,-6.18561e-8,-1,-7.22121e-8,2.07932e-8,-1,9.18876e-8,-1.30852e-8,-1,3.97077e-9,1.14065e-8,-1,9.23909e-8,-4.5362e-9,-1,4.46536e-10,9.32278e-10,-1,3.72529e-8,-3.66857e-9,-1,4.49377e-8,-2.23517e-9,-1,2.38094e-8,-6.14122e-9,-1,2.68621e-8,1.52695e-8,-1,7.20794e-8,9.21172e-9,-1,5.43348e-8,1.69176e-8,-1,5.51601e-8,2.54081e-8,-1,5.49281e-8,-5.55917e-8,-1,3.07689e-8,-1.88792e-7,-1,2.26276e-8,8.8634e-14,-1,4.64697e-8,1.3019e-8,-1,3.86756e-8,-2.2844e-8,-1,3.89717e-8,1.1085e-9,-1,4.34352e-8,-4.30492e-9,-1,3.94215e-8,1.30438e-9,-1,4.76712e-8,3.28962e-9,-1,4.45958e-8,2.52241e-10,-1,4.04226e-8,1.25594e-8,-1,4.80317e-8,1.39674e-8,-1,4.90564e-8,-4.46265e-9,-1,2.92379e-8,-3.08515e-10,-1,4.15086e-8,1.55904e-9,-1,4.38258e-8,6.81044e-8,-1,4.99612e-8,5.13564e-11,-1,4.26688e-8,6.59467e-9,-1,7.66711e-8,-1.71067e-8,-1,4.43062e-8,1.83922e-8,-1,4.40845e-8,2.66709e-9,-1,5.30027e-8,1.82763e-9,-1,4.3897e-8,-1.67788e-9,-1,4.89207e-8,1.24192e-9,-1,4.07605e-8,1.12894e-9,-1,4.89174e-8,3.11315e-9,-1,4.79789e-8,2.26443e-9,-1,4.21136e-8,5.62248e-9,-1,4.49048e-8,6.89258e-9,-1,5.02906e-8,-7.11799e-10,-1,4.27806e-8,1.62801e-8,-1,5.25287e-8,1.97681e-8,-1,5.43922e-8,-7.91733e-9,-1,3.45507e-8,3.29149e-8,-1,9.56878e-8,-4.6828e-9,-1,4.15182e-8,-1.01612e-8,-1,3.88111e-8,2.49917e-10,-1,4.61349e-8,-5.7858e-9,-1,3.64464e-8,-1.26541e-8,-1,3.77966e-8,3.6386e-9,-1,4.03632e-8,-7.72482e-9,-1,3.27636e-8,-3.65566e-9,-1,4.84111e-8,-0.893226,0,-0.449608,-0.788347,0,-0.615231,-0.757209,0,-0.653173,-0.724246,0,-0.689542,0.266712,0,0.963776,-0.724244,0,-0.689543,-0.65317,0,-0.757211,0.689541,0,0.724247,0.653171,0,0.75721,0.689542,0,0.724245,0.844854,0,0.534996,0.870088,0,0.492897,0.975702,0,0.219104,0.817584,0,0.57581,0.844854,0,0.534997,0.999688,0,0.0249726,0.932993,0,0.359896,-0.992479,0,-0.122412,-0.985277,0,-0.170967,0.164399,0,0.986394,-0.985278,0,-0.170962,-0.932992,0,-0.359898,-0.91421,0,-0.405242,0.99729,0,0.0735657,0.615231,0,0.788347,-0.313681,0,-0.949529,0.99248,0,0.122409,-0.91421,0,-0.405242,0.949529,0,0.313679,0.963776,0,0.266712,-0.997291,0,-0.073561,0.985277,0,0.170965,0.997291,0,0.0735623,0.999687,0,0.0250365,0.575808,0,0.817585,-0.405239,0,-0.914211,0.492898,0,0.870087,-0.170961,0,-0.985278,-0.492899,0,-0.870087,-0.405238,0,-0.914211,-0.359897,0,-0.932992,-0.313681,0,-0.949528,-0.2191,0,-0.975702,-0.122411,0,-0.992479,-0.0735638,0,-0.99729,0.313681,0,0.949528,0.986394,0,0.164399,0.986394,0,0.164399,0.788347,0,0.61523,-0.492899,0,-0.870086,-0.575807,0,-0.817586,0.757209,0,0.653173,-0.359896,0,-0.932992,0.0735635,0,0.997291,-0.449612,0,-0.893224,0.449613,0,0.893223,-0.266713,0,-0.963776,0.0249857,0,0.999688,0.219099,0,0.975703,0.359897,0,0.932992,0.405237,0,0.914212,0.449614,0,0.893223,0.492898,0,0.870087,0.534998,0,0.844853,-0.00000190735,-0.00000667572,-1,-0.00000190735,0.00000667572,-1,-0.00000132685,0,-1,0.0250323,0,0.999687,0.170961,0,0.985278,0.266712,0,0.963776,0.405238,0,0.914211],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":711,\"version\":3,\"normals\":881,\"type\":\"Geometry\",\"faces\":1028},\"uvs\":[],\"vertices\":[474.838,1,19.7415,486.194,1,10.8787,497.102,1,1.46924,507.536,1,-8.46411,517.469,0.999999,-18.8974,526.879,0.999999,-29.8056,535.741,0.999998,-41.1623,544.036,0.999998,-52.9402,551.743,0.999997,-65.1109,558.844,0.999997,-77.6452,565.321,0.999996,-90.5127,470.072,1,13.3159,481.119,1,4.69458,491.73,1,-4.45836,501.879,0.999999,-14.121,511.542,0.999999,-24.2699,520.694,0.999998,-34.8807,529.316,0.999998,-45.9279,537.385,0.999997,-57.3848,544.882,0.999997,-69.2238,551.789,0.999996,-81.4164,558.089,0.999996,-93.9332,458.754,1,-1.9451,469.066,1,-9.99263,478.97,0.999999,-18.5364,488.444,0.999999,-27.556,497.463,0.999998,-37.0295,506.007,0.999998,-46.9342,514.055,0.999997,-57.2462,521.587,0.999997,-67.9406,528.585,0.999997,-78.9917,535.032,0.999996,-90.3729,540.913,0.999996,-102.057,453.988,1,-8.37077,463.991,0.999999,-16.1767,473.598,0.999999,-24.464,482.787,0.999999,-33.2129,491.536,0.999998,-42.402,499.823,0.999998,-52.0093,514.935,0.999997,-72.3851,527.977,0.999996,-94.1441,507.629,0.999997,-62.0118,521.723,0.999996,-83.1045,533.681,0.999995,-105.477,474.838,4,19.7415,486.194,4,10.8787,497.102,4,1.46924,507.536,4,-8.46411,517.469,4,-18.8974,526.879,4,-29.8056,535.741,4,-41.1623,544.036,4,-52.9402,551.743,4,-65.1109,558.844,4,-77.6452,565.321,4,-90.5127,475.731,4,20.9463,487.146,4,12.0382,498.11,4,2.58069,508.596,4,-7.40343,518.581,4,-17.8901,528.038,4,-28.854,536.946,4,-40.2687,545.284,4,-52.1068,553.03,4,-64.3398,560.167,4,-76.9381,566.677,4,-89.8714,470.072,4,13.3159,481.119,4,4.69458,491.73,4,-4.45836,501.879,4,-14.121,511.542,4,-24.2699,520.694,4,-34.8807,529.316,4,-45.9279,537.385,4,-57.3848,544.882,4,-69.2238,551.789,4,-81.4164,558.089,4,-93.9332,458.754,4,-1.9451,469.066,4,-9.99263,478.97,4,-18.5364,488.444,4,-27.556,497.463,4,-37.0295,506.007,4,-46.9342,514.055,4,-57.2462,521.587,4,-67.9406,528.585,4,-78.9917,535.032,4,-90.3729,540.913,4,-102.057,453.988,4,-8.37077,463.991,4,-16.1767,473.598,4,-24.464,482.787,4,-33.2129,491.536,4,-42.402,499.823,4,-52.0093,507.629,4,-62.0118,514.935,4,-72.3851,521.723,4,-83.1045,527.977,4,-94.1441,533.681,4,-105.477,453.095,4,-9.57558,463.039,4,-17.3363,472.591,4,-25.5755,481.726,4,-34.2735,490.424,4,-43.4093,498.664,4,-52.9609,506.424,4,-62.9053,513.688,4,-73.2185,520.436,4,-83.8757,526.654,4,-94.8512,532.325,4,-106.119,571.159,0.999995,-103.682,576.343,0.999995,-117.123,580.862,0.999994,-130.801,584.704,0.999994,-144.685,587.86,0.999993,-158.741,590.323,0.999992,-172.935,592.087,0.999992,-187.232,593.146,0.999991,-201.599,593.5,0.999991,-215.75,563.768,0.999995,-106.744,568.811,0.999995,-119.818,573.206,0.999994,-133.124,576.944,0.999994,-146.629,580.014,0.999993,-160.302,582.41,0.999992,-174.109,584.125,0.999992,-188.016,585.156,0.999991,-201.991,585.5,0.999991,-215.75,546.214,0.999995,-114.015,550.922,0.999995,-126.219,555.025,0.999994,-138.639,558.513,0.999993,-151.246,561.379,0.999993,-164.008,563.616,0.999992,-176.896,565.217,0.999992,-189.879,566.179,0.999991,-202.924,566.5,0.999991,-215.75,538.823,0.999995,-117.076,543.389,0.999994,-128.914,547.369,0.999994,-140.961,550.753,0.999993,-153.19,558.189,0.999991,-203.316,558.5,0.999991,-215.75,553.533,0.999993,-165.569,555.702,0.999992,-178.07,557.255,0.999992,-190.663,571.159,4,-103.682,576.343,3.99999,-117.123,580.862,3.99999,-130.801,584.704,3.99999,-144.685,587.86,3.99999,-158.741,590.323,3.99999,-172.935,592.087,3.99999,-187.232,593.146,3.99999,-201.599,593.5,3.99999,-215.75,572.544,4,-103.108,577.755,3.99999,-116.617,582.297,3.99999,-130.366,586.159,3.99999,-144.321,589.332,3.99999,-158.448,591.807,3.99999,-172.715,593.579,3.99999,-187.085,594.645,3.99999,-201.525,595,3.99999,-215.75,563.768,4,-106.744,568.811,3.99999,-119.818,573.206,3.99999,-133.124,576.944,3.99999,-146.629,580.014,3.99999,-160.302,582.41,3.99999,-174.109,584.125,3.99999,-188.016,585.156,3.99999,-201.991,585.5,3.99999,-215.75,546.214,3.99999,-114.015,550.922,3.99999,-126.219,555.025,3.99999,-138.639,558.513,3.99999,-151.246,561.379,3.99999,-164.008,563.616,3.99999,-176.896,565.217,3.99999,-189.879,566.179,3.99999,-202.924,566.5,3.99999,-215.75,538.823,3.99999,-117.076,543.389,3.99999,-128.914,547.369,3.99999,-140.961,550.753,3.99999,-153.19,553.533,3.99999,-165.569,555.702,3.99999,-178.07,557.255,3.99999,-190.663,558.189,3.99999,-203.316,558.5,3.99999,-215.75,537.437,3.99999,-117.65,541.977,3.99999,-129.419,545.934,3.99999,-141.397,549.298,3.99999,-153.554,552.062,3.99999,-165.862,554.218,3.99999,-178.29,555.763,3.99999,-190.81,556.69,3.99999,-203.39,557,3.99999,-215.75,582,3.99999,-215.75,570,3.99999,-215.75,583.5,3.99999,-224.75,568.5,3.99999,-224.75,300.25,1,77.5,314.401,1,77.1465,328.768,1,76.0868,343.065,1,74.3233,357.259,1,71.8605,371.314,1,68.7042,385.198,1,64.862,398.877,1,60.3432,412.318,1,55.1587,425.487,1,49.3209,438.355,1,42.8439,450.889,1,35.7433,463.06,1,28.0363,300.25,1,69.5,314.008,1,69.1561,327.984,1,68.1253,341.891,1,66.4099,355.698,1,64.0142,369.371,1,60.944,382.876,1,57.2065,396.182,1,52.8109,409.256,1,47.7676,422.067,1,42.089,434.584,1,35.7885,446.776,1,28.8815,458.615,1,21.3845,300.25,1,50.5,313.076,1,50.179,326.121,1,49.2168,339.103,1,47.6156,351.991,1,45.3793,364.754,1,42.5134,377.361,1,39.0246,389.781,1,34.9216,401.985,1,30.2139,413.943,1,24.9132,425.627,1,19.032,437.008,1,12.5847,448.06,1,5.58662,300.25,1,42.5,325.337,1,41.2553,337.93,1,39.7022,350.431,1,37.533,362.81,1,34.7531,375.038,1,31.3691,387.086,1,27.3892,432.896,1,5.72282,443.615,1,-1.06514,312.684,1,42.1887,398.924,1,22.8229,410.523,1,17.6813,421.856,1,11.9767,300.25,4,77.5,314.401,4,77.1465,328.768,4,76.0868,343.065,4,74.3233,357.259,4,71.8605,371.314,4,68.7042,385.198,4,64.862,398.877,4,60.3432,412.318,4,55.1587,425.487,4,49.3209,438.355,4,42.8439,450.889,4,35.7433,463.06,4,28.0363,300.25,4,79,314.475,4,78.6447,328.915,4,77.5795,343.285,4,75.8071,357.551,4,73.3317,371.679,4,70.1593,385.634,4,66.2975,399.382,4,61.7556,412.892,4,56.5445,426.129,4,50.6769,439.062,4,44.1668,451.66,4,37.0299,463.893,4,29.2835,300.25,4,69.5,314.008,4,69.1561,327.984,4,68.1253,341.891,4,66.4099,355.698,4,64.0142,369.371,4,60.944,382.876,4,57.2065,396.182,4,52.8109,409.256,4,47.7676,422.067,4,42.089,434.584,4,35.7885,446.776,4,28.8815,458.615,4,21.3845,300.25,4,50.5,313.076,4,50.179,326.121,4,49.2168,339.103,4,47.6156,351.991,4,45.3793,364.754,4,42.5134,377.361,4,39.0246,389.781,4,34.9216,401.985,4,30.2139,413.943,4,24.9132,425.627,4,19.032,437.008,4,12.5847,448.06,4,5.58662,300.25,4,42.5,312.684,4,42.1887,325.337,4,41.2553,337.93,4,39.7022,350.431,4,37.533,362.81,4,34.7531,375.038,4,31.3691,387.086,4,27.3892,398.924,4,22.8229,410.523,4,17.6813,421.856,4,11.9767,432.896,4,5.72282,443.615,4,-1.06514,300.25,4,41,312.61,4,40.6905,325.19,4,39.7625,337.709,4,38.2184,350.138,4,36.0618,362.446,4,33.2981,374.603,4,29.9337,386.581,4,25.9769,398.35,4,21.437,409.882,4,16.3253,421.149,4,10.6538,432.124,4,4.43623,442.782,4,-2.31235,300.25,4,53.5,300.25,4,66.5,309.25,4,68,309.25,4,52,453.988,-3.65898e-7,-8.37077,473.598,-0.00000106936,-24.464,482.787,-0.00000145178,-33.2129,521.723,-0.00000363261,-83.1045,527.977,-0.00000411517,-94.1441,463.991,-7.07108e-7,-16.1767,491.536,-0.00000185345,-42.402,499.823,-0.0000022734,-52.0093,507.629,-0.00000271062,-62.0118,514.935,-0.00000316406,-72.3851,533.681,-0.00000461055,-105.477,474.838,-0.999999,19.7415,486.194,-1,10.8787,497.102,-1,1.46924,507.536,-1,-8.46411,517.469,-1,-18.8974,526.879,-1,-29.8056,535.741,-1,-41.1623,544.036,-1,-52.9402,551.743,-1,-65.1109,558.844,-1,-77.6452,565.321,-1,-90.5127,470.072,-0.999999,13.3159,481.119,-1,4.69458,491.73,-1,-4.45836,501.879,-1,-14.121,511.542,-1,-24.2699,520.694,-1,-34.8807,529.316,-1,-45.9279,537.385,-1,-57.3848,544.882,-1,-69.2238,551.789,-1,-81.4164,558.089,-1,-93.9332,458.754,-1,-1.9451,469.066,-1,-9.99263,478.97,-1,-18.5364,488.444,-1,-27.556,497.463,-1,-37.0295,506.007,-1,-46.9342,514.055,-1,-57.2462,521.587,-1,-67.9406,528.585,-1,-78.9917,535.032,-1,-90.3729,540.913,-1,-102.057,453.988,-1,-8.37077,463.991,-1,-16.1767,473.598,-1,-24.464,482.787,-1,-33.2129,491.536,-1,-42.402,499.823,-1,-52.0093,514.935,-1,-72.3851,527.977,-1,-94.1441,507.629,-1,-62.0118,521.723,-1,-83.1045,533.681,-1,-105.477,474.838,-4,19.7415,486.194,-4,10.8787,497.102,-4,1.46924,507.536,-4,-8.46411,517.469,-4,-18.8974,526.879,-4,-29.8056,535.741,-4,-41.1623,544.036,-4,-52.9402,551.743,-4,-65.1109,558.844,-4,-77.6452,565.321,-4,-90.5127,475.731,-4,20.9463,487.146,-4,12.0382,498.11,-4,2.58069,508.596,-4,-7.40343,518.581,-4,-17.8901,528.038,-4,-28.854,536.946,-4,-40.2687,545.284,-4,-52.1068,553.03,-4,-64.3398,560.167,-4,-76.9381,566.677,-4,-89.8714,470.072,-4,13.3159,481.119,-4,4.69458,491.73,-4,-4.45836,501.879,-4,-14.121,511.542,-4,-24.2699,520.694,-4,-34.8807,529.316,-4,-45.9279,537.385,-4,-57.3848,544.882,-4,-69.2238,551.789,-4,-81.4164,558.089,-4,-93.9332,458.754,-4,-1.9451,469.066,-4,-9.99263,478.97,-4,-18.5364,488.444,-4,-27.556,497.463,-4,-37.0295,506.007,-4,-46.9342,514.055,-4,-57.2462,521.587,-4,-67.9406,528.585,-4,-78.9917,535.032,-4,-90.3729,540.913,-4,-102.057,453.988,-4,-8.37077,463.991,-4,-16.1767,473.598,-4,-24.464,482.787,-4,-33.2129,491.536,-4,-42.402,499.823,-4,-52.0093,507.629,-4,-62.0118,514.935,-4,-72.3851,521.723,-4,-83.1045,527.977,-4,-94.1441,533.681,-4,-105.477,453.095,-4,-9.57558,463.039,-4,-17.3363,472.591,-4,-25.5755,481.726,-4,-34.2735,490.424,-4,-43.4093,498.664,-4,-52.9609,506.424,-4,-62.9053,513.688,-4,-73.2185,520.436,-4,-83.8757,526.654,-4,-94.8512,532.325,-4,-106.119,543.389,-0.00000563501,-128.914,547.369,-0.00000616162,-140.961,553.533,-0.00000723726,-165.569,555.702,-0.0000077837,-178.07,557.255,-0.00000833413,-190.663,558.189,-0.00000888723,-203.316,558.5,-0.00000943074,-215.75,538.823,-0.00000511757,-117.076,550.753,-0.00000669613,-153.19,571.159,-1,-103.682,576.343,-1.00001,-117.123,580.862,-1.00001,-130.801,584.704,-1.00001,-144.685,587.86,-1.00001,-158.741,590.323,-1.00001,-172.935,592.087,-1.00001,-187.232,593.146,-1.00001,-201.599,593.5,-1.00001,-215.75,563.768,-1,-106.744,568.811,-1.00001,-119.818,573.206,-1.00001,-133.124,576.944,-1.00001,-146.629,580.014,-1.00001,-160.302,582.41,-1.00001,-174.109,584.125,-1.00001,-188.016,585.156,-1.00001,-201.991,585.5,-1.00001,-215.75,546.214,-1.00001,-114.015,550.922,-1.00001,-126.219,555.025,-1.00001,-138.639,558.513,-1.00001,-151.246,561.379,-1.00001,-164.008,563.616,-1.00001,-176.896,565.217,-1.00001,-189.879,566.179,-1.00001,-202.924,566.5,-1.00001,-215.75,538.823,-1.00001,-117.076,543.389,-1.00001,-128.914,547.369,-1.00001,-140.961,550.753,-1.00001,-153.19,558.189,-1.00001,-203.316,558.5,-1.00001,-215.75,553.533,-1.00001,-165.569,555.702,-1.00001,-178.07,557.255,-1.00001,-190.663,571.159,-4,-103.682,576.343,-4.00001,-117.123,580.862,-4.00001,-130.801,584.704,-4.00001,-144.685,587.86,-4.00001,-158.741,590.323,-4.00001,-172.935,592.087,-4.00001,-187.232,593.146,-4.00001,-201.599,593.5,-4.00001,-215.75,572.544,-4,-103.108,577.755,-4.00001,-116.617,582.297,-4.00001,-130.366,586.159,-4.00001,-144.321,589.332,-4.00001,-158.448,591.807,-4.00001,-172.715,593.579,-4.00001,-187.085,594.645,-4.00001,-201.525,595,-4.00001,-215.75,563.768,-4,-106.744,568.811,-4.00001,-119.818,573.206,-4.00001,-133.124,576.944,-4.00001,-146.629,580.014,-4.00001,-160.302,582.41,-4.00001,-174.109,584.125,-4.00001,-188.016,585.156,-4.00001,-201.991,585.5,-4.00001,-215.75,546.214,-4,-114.015,550.922,-4.00001,-126.219,555.025,-4.00001,-138.639,558.513,-4.00001,-151.246,561.379,-4.00001,-164.008,563.616,-4.00001,-176.896,565.217,-4.00001,-189.879,566.179,-4.00001,-202.924,566.5,-4.00001,-215.75,538.823,-4.00001,-117.076,543.389,-4.00001,-128.914,547.369,-4.00001,-140.961,550.753,-4.00001,-153.19,553.533,-4.00001,-165.569,555.702,-4.00001,-178.07,557.255,-4.00001,-190.663,558.189,-4.00001,-203.316,558.5,-4.00001,-215.75,537.437,-4.00001,-117.65,541.977,-4.00001,-129.419,545.934,-4.00001,-141.397,549.298,-4.00001,-153.554,552.062,-4.00001,-165.862,554.218,-4.00001,-178.29,555.763,-4.00001,-190.81,556.69,-4.00001,-203.39,557,-4.00001,-215.75,582,-0.00000943074,-215.75,582,-4.00001,-215.75,570,-0.00000943074,-215.75,570,-4.00001,-215.75,583.5,-4.00001,-224.75,568.5,-4.00001,-224.75,337.93,0.00000173544,39.7022,421.856,5.23517e-7,11.9767,300.25,0.00000185773,42.5,312.684,0.00000184413,42.1887,325.337,0.00000180333,41.2553,350.431,0.00000164062,37.533,362.81,0.00000151911,34.7531,375.038,0.00000137119,31.3691,387.086,0.00000119722,27.3892,398.924,9.97619e-7,22.8229,410.523,7.72873e-7,17.6813,432.896,2.50153e-7,5.72282,443.615,-4.65589e-8,-1.06514,300.25,-0.999997,77.5,314.401,-0.999997,77.1465,328.768,-0.999997,76.0868,343.065,-0.999997,74.3233,357.259,-0.999997,71.8605,371.314,-0.999997,68.7042,385.198,-0.999997,64.862,398.877,-0.999997,60.3432,412.318,-0.999998,55.1587,425.487,-0.999998,49.3209,438.355,-0.999998,42.8439,450.889,-0.999998,35.7433,463.06,-0.999999,28.0363,300.25,-0.999997,69.5,314.008,-0.999997,69.1561,327.984,-0.999997,68.1253,341.891,-0.999997,66.4099,355.698,-0.999997,64.0142,369.371,-0.999997,60.944,382.876,-0.999997,57.2065,396.182,-0.999998,52.8109,409.256,-0.999998,47.7676,422.067,-0.999998,42.089,434.584,-0.999998,35.7885,446.776,-0.999999,28.8815,458.615,-0.999999,21.3845,300.25,-0.999998,50.5,313.076,-0.999998,50.179,326.121,-0.999998,49.2168,339.103,-0.999998,47.6156,351.991,-0.999998,45.3793,364.754,-0.999998,42.5134,377.361,-0.999998,39.0246,389.781,-0.999998,34.9216,401.985,-0.999999,30.2139,413.943,-0.999999,24.9132,425.627,-0.999999,19.032,437.008,-0.999999,12.5847,448.06,-1,5.58662,300.25,-0.999998,42.5,325.337,-0.999998,41.2553,337.93,-0.999998,39.7022,350.431,-0.999998,37.533,362.81,-0.999998,34.7531,375.038,-0.999999,31.3691,387.086,-0.999999,27.3892,432.896,-1,5.72282,443.615,-1,-1.06514,312.684,-0.999998,42.1887,398.924,-0.999999,22.8229,410.523,-0.999999,17.6813,421.856,-0.999999,11.9767,300.25,-4,77.5,314.401,-4,77.1465,328.768,-4,76.0868,343.065,-4,74.3233,357.259,-4,71.8605,371.314,-4,68.7042,385.198,-4,64.862,398.877,-4,60.3432,412.318,-4,55.1587,425.487,-4,49.3209,438.355,-4,42.8439,450.889,-4,35.7433,463.06,-4,28.0363,300.25,-4,79,314.475,-4,78.6447,328.915,-4,77.5795,343.285,-4,75.8071,357.551,-4,73.3317,371.679,-4,70.1593,385.634,-4,66.2975,399.382,-4,61.7556,412.892,-4,56.5445,426.129,-4,50.6769,439.062,-4,44.1668,451.66,-4,37.0299,463.893,-4,29.2835,300.25,-4,69.5,314.008,-4,69.1561,327.984,-4,68.1253,341.891,-4,66.4099,355.698,-4,64.0142,369.371,-4,60.944,382.876,-4,57.2065,396.182,-4,52.8109,409.256,-4,47.7676,422.067,-4,42.089,434.584,-4,35.7885,446.776,-4,28.8815,458.615,-4,21.3845,300.25,-4,50.5,313.076,-4,50.179,326.121,-4,49.2168,339.103,-4,47.6156,351.991,-4,45.3793,364.754,-4,42.5134,377.361,-4,39.0246,389.781,-4,34.9216,401.985,-4,30.2139,413.943,-4,24.9132,425.627,-4,19.032,437.008,-4,12.5847,448.06,-4,5.58662,300.25,-4,42.5,312.684,-4,42.1887,325.337,-4,41.2553,337.93,-4,39.7022,350.431,-4,37.533,362.81,-4,34.7531,375.038,-4,31.3691,387.086,-4,27.3892,398.924,-4,22.8229,410.523,-4,17.6813,421.856,-4,11.9767,432.896,-4,5.72282,443.615,-4,-1.06514,300.25,-4,41,312.61,-4,40.6905,325.19,-4,39.7625,337.709,-4,38.2184,350.138,-4,36.0618,362.446,-4,33.2981,374.603,-4,29.9337,386.581,-4,25.9769,398.35,-4,21.437,409.882,-4,16.3253,421.149,-4,10.6538,432.124,-4,4.43623,442.782,-4,-2.31235,300.25,-4,53.5,300.25,-4,66.5,309.25,-4,68,309.25,-4,52],\"faces\":[33,64,413,414,65,0,0,0,0,33,199,557,556,198,1,1,1,1,33,10,9,53,54,2,2,2,2,33,9,8,52,53,3,3,3,3,33,8,7,51,52,4,4,4,4,33,7,6,50,51,5,5,5,5,33,6,5,49,50,6,6,6,6,33,5,4,48,49,7,7,7,7,33,4,3,47,48,8,8,8,8,33,32,31,86,87,9,9,9,9,33,31,30,85,86,10,10,10,10,33,30,29,84,85,11,11,11,11,33,29,28,83,84,12,12,12,12,33,28,27,82,83,13,13,13,13,33,27,26,81,82,14,14,14,14,33,26,25,80,81,15,15,15,15,33,25,24,79,80,16,16,16,16,33,24,23,78,79,17,17,17,17,33,23,22,77,78,18,18,18,18,33,269,642,643,270,19,19,19,19,33,109,458,457,108,20,20,20,20,33,108,457,456,107,21,21,21,21,32,282,335,708,22,22,22,32,708,655,590,23,23,23,32,577,629,642,22,22,22,32,577,642,269,23,23,23,32,269,256,204,22,22,22,32,217,282,708,24,24,24,32,577,269,204,25,25,25,32,217,708,590,26,26,26,32,590,577,204,27,27,27,32,590,204,217,28,28,28,33,562,563,203,202,29,29,29,29,33,449,448,99,100,30,30,30,30,33,453,452,103,104,31,31,31,31,33,102,451,450,101,32,32,32,32,33,1,0,44,45,33,33,33,33,33,2,1,45,46,34,34,34,34,33,3,2,46,47,35,35,35,35,32,65,155,156,36,36,36,32,156,157,158,37,37,37,32,158,159,160,38,38,38,32,160,161,162,39,39,39,32,162,163,154,40,40,40,32,162,154,153,41,41,41,32,158,160,162,42,42,42,32,65,156,158,43,43,43,32,63,64,65,44,44,44,32,61,62,63,45,45,45,32,59,60,61,46,46,46,32,57,58,59,47,47,47,32,55,56,57,48,48,48,32,280,281,55,49,49,49,32,278,279,280,50,50,50,32,276,277,278,51,51,51,32,274,275,276,52,52,52,32,272,273,274,53,53,53,32,270,271,272,54,54,54,32,256,269,270,54,54,54,32,257,256,270,54,54,54,32,270,272,274,55,55,55,32,274,276,278,56,56,56,32,278,280,55,57,57,57,32,55,57,59,58,58,58,32,59,61,63,59,59,59,32,162,153,152,60,60,60,32,162,152,151,61,61,61,32,258,257,270,54,54,54,32,259,258,270,54,54,54,32,158,162,151,62,62,62,32,158,151,150,63,63,63,32,259,270,274,64,64,64,32,260,259,274,65,65,65,32,158,150,149,66,66,66,32,158,149,148,67,67,67,32,261,260,274,54,54,54,32,262,261,274,54,54,54,32,158,148,147,68,68,68,32,65,158,147,69,69,69,32,263,262,274,70,70,70,32,263,274,278,71,71,71,32,65,147,146,72,72,72,32,65,146,54,73,73,73,32,264,263,278,74,74,74,32,265,264,278,75,75,75,32,63,65,54,76,76,76,32,63,54,53,77,77,77,32,266,265,278,78,78,78,32,267,266,278,79,79,79,32,63,53,52,80,80,80,32,63,52,51,81,81,81,32,267,278,55,82,82,82,32,268,267,55,83,83,83,32,63,51,50,84,84,84,32,59,63,50,85,85,85,32,44,268,55,54,54,54,32,45,44,55,86,86,86,32,59,50,49,87,87,87,32,59,49,48,88,88,88,32,46,45,55,89,89,89,32,59,48,47,90,90,90,32,46,55,59,91,91,91,32,47,46,59,92,92,92,33,11,12,67,66,93,93,93,93,33,12,13,68,67,94,94,94,94,33,13,14,69,68,95,95,95,95,33,14,15,70,69,96,96,96,96,33,15,16,71,70,97,97,97,97,33,16,17,72,71,98,98,98,98,33,17,18,73,72,99,99,99,99,33,18,19,74,73,100,100,100,100,33,19,20,75,74,101,101,101,101,33,20,21,76,75,102,102,102,102,33,33,34,89,88,103,103,103,103,33,34,35,90,89,104,104,104,104,33,35,36,91,90,105,105,105,105,33,36,37,92,91,106,106,106,106,33,37,38,93,92,107,107,107,107,33,38,41,94,93,108,108,108,108,33,41,39,95,94,109,109,109,109,33,39,42,96,95,110,110,110,110,33,42,40,97,96,111,111,111,111,33,40,43,98,97,112,112,112,112,33,159,517,518,160,113,113,113,113,32,560,561,539,114,114,114,32,560,539,494,115,115,115,32,181,201,560,116,116,116,32,136,181,560,115,115,115,32,560,494,500,117,117,117,32,500,548,557,118,118,118,32,557,199,190,119,119,119,32,142,136,560,120,120,120,32,557,190,142,121,121,121,32,142,560,500,118,118,118,32,500,557,142,29,29,29,33,118,117,153,154,122,122,122,122,33,117,116,152,153,123,123,123,123,33,116,115,151,152,124,124,124,124,33,115,114,150,151,125,125,125,125,33,114,113,149,150,126,126,126,126,33,113,112,148,149,127,127,127,127,33,112,111,147,148,128,128,128,128,33,111,110,146,147,129,129,129,129,33,194,195,553,552,130,130,130,130,32,484,485,476,131,131,131,32,476,475,474,132,132,132,32,474,473,472,133,133,133,32,472,471,470,134,134,134,32,470,469,468,135,135,135,32,468,359,358,136,136,136,32,358,357,356,137,137,137,32,356,355,354,138,138,138,32,354,353,352,139,139,139,32,352,351,350,140,140,140,32,350,349,589,141,141,141,32,589,588,587,142,142,142,32,587,586,585,143,143,143,32,585,584,583,144,144,144,32,583,582,581,145,145,145,32,581,580,579,146,146,146,32,579,578,577,147,147,147,32,577,590,591,148,148,148,32,577,591,592,149,149,149,32,581,579,577,150,150,150,32,585,583,581,151,151,151,32,589,587,585,152,152,152,32,352,350,589,153,153,153,32,356,354,352,154,154,154,32,468,358,356,155,155,155,32,472,470,468,156,156,156,32,476,474,472,157,157,157,32,483,484,476,158,158,158,32,482,483,476,159,159,159,32,476,472,468,160,160,160,32,468,356,352,161,161,161,32,352,589,585,162,162,162,32,585,581,577,163,163,163,32,577,592,593,164,164,164,32,577,593,594,165,165,165,32,482,476,468,166,166,166,32,481,482,468,167,167,167,32,585,577,594,168,168,168,32,585,594,595,169,169,169,32,480,481,468,170,170,170,32,479,480,468,171,171,171,32,585,595,596,172,172,172,32,585,596,597,173,173,173,32,478,479,468,174,174,174,32,477,478,468,175,175,175,32,585,597,598,176,176,176,32,585,598,599,177,177,177,32,370,477,468,178,178,178,32,369,370,468,179,179,179,32,585,599,600,180,180,180,32,585,600,601,181,181,181,32,368,369,468,182,182,182,32,367,368,468,183,183,183,32,352,585,601,184,184,184,32,352,601,602,185,185,185,32,367,468,352,186,186,186,32,366,367,352,187,187,187,32,352,602,360,188,188,188,32,352,360,361,189,189,189,32,365,366,352,190,190,190,32,364,365,352,191,191,191,32,352,361,362,192,192,192,32,363,364,352,193,193,193,32,362,363,352,194,194,194,32,290,291,292,195,195,195,32,292,293,294,196,196,196,32,294,66,67,197,197,197,32,67,68,69,198,198,198,32,69,70,71,199,199,199,32,71,72,73,200,200,200,32,73,74,75,201,201,201,32,75,76,164,202,202,202,32,164,165,166,203,203,203,32,166,167,168,204,204,204,32,168,169,170,205,205,205,32,170,171,172,206,206,206,32,200,202,203,207,207,207,32,170,172,200,208,208,208,32,166,168,170,209,209,209,32,75,164,166,210,210,210,32,71,73,75,211,211,211,32,67,69,71,212,212,212,32,292,294,67,213,213,213,32,289,290,292,214,214,214,32,287,288,289,54,54,54,32,285,286,287,215,215,215,32,283,284,285,54,54,54,32,335,282,283,54,54,54,32,336,335,283,216,216,216,32,283,285,287,217,217,217,32,287,289,292,218,218,218,32,292,67,71,219,219,219,32,71,75,166,220,220,220,32,166,170,200,221,221,221,32,200,203,201,222,222,222,32,201,181,180,223,223,223,32,201,180,179,224,224,224,32,166,200,201,225,225,225,32,287,292,71,226,226,226,32,336,283,287,227,227,227,32,295,334,337,228,228,228,32,337,336,287,229,229,229,32,166,201,179,230,230,230,32,166,179,178,231,231,231,32,295,337,287,232,232,232,32,296,295,287,233,233,233,32,166,178,177,234,234,234,32,166,177,176,235,235,235,32,297,296,287,236,236,236,32,298,297,287,237,237,237,32,166,176,175,238,238,238,32,166,175,174,239,239,239,32,299,298,287,240,240,240,32,300,299,287,241,241,241,32,71,166,174,242,242,242,32,71,174,173,243,243,243,32,301,300,287,244,244,244,32,302,301,287,245,245,245,32,71,173,87,246,246,246,32,71,87,86,247,247,247,32,303,302,287,248,248,248,32,304,303,287,249,249,249,32,71,86,85,250,250,250,32,71,85,84,251,251,251,32,305,304,287,252,252,252,32,306,305,287,253,253,253,32,71,84,83,254,254,254,32,71,83,82,255,255,255,32,306,287,71,256,256,256,32,307,306,71,257,257,257,32,71,82,81,258,258,258,32,71,81,80,259,259,259,32,77,307,71,260,260,260,32,78,77,71,261,261,261,32,71,80,79,262,262,262,32,71,79,78,263,263,263,33,136,135,180,181,264,264,264,264,33,135,134,179,180,265,265,265,265,33,134,133,178,179,266,266,266,266,33,133,132,177,178,267,267,267,267,33,132,131,176,177,268,268,268,268,33,131,130,175,176,269,269,269,269,33,130,129,174,175,270,270,270,270,33,129,128,173,174,271,271,271,271,33,128,32,87,173,272,272,272,272,33,194,552,551,193,273,273,273,273,33,322,323,696,695,274,274,274,274,33,192,550,549,191,275,275,275,275,33,332,333,706,705,276,276,276,276,33,110,10,54,146,277,277,277,277,33,21,119,164,76,278,278,278,278,33,119,120,165,164,279,279,279,279,33,120,121,166,165,280,280,280,280,33,121,122,167,166,281,281,281,281,33,122,123,168,167,282,282,282,282,33,123,124,169,168,283,283,283,283,33,124,125,170,169,284,284,284,284,33,125,126,171,170,285,285,285,285,33,126,127,172,171,286,286,286,286,32,556,557,548,287,287,287,32,548,547,546,288,288,288,32,546,545,544,289,289,289,32,544,543,542,290,290,290,32,542,541,540,291,291,291,32,540,447,446,292,292,292,32,446,445,444,293,293,293,32,444,443,442,294,294,294,32,442,441,440,295,295,295,32,440,439,438,296,296,296,32,438,437,693,297,297,297,32,693,692,691,298,298,298,32,691,690,689,299,299,299,32,689,688,687,300,300,300,32,687,686,685,301,301,301,32,685,684,683,302,302,302,32,683,682,681,303,303,303,32,681,694,695,303,303,303,32,681,695,696,303,303,303,32,685,683,681,304,304,304,32,689,687,685,305,305,305,32,693,691,689,306,306,306,32,440,438,693,307,307,307,32,444,442,440,308,308,308,32,540,446,444,309,309,309,32,544,542,540,310,310,310,32,548,546,544,311,311,311,32,555,556,548,312,312,312,32,555,548,544,313,313,313,32,685,681,696,314,314,314,32,685,696,697,315,315,315,32,554,555,544,316,316,316,32,553,554,544,317,317,317,32,685,697,698,318,318,318,32,685,698,699,303,303,303,32,552,553,544,319,319,319,32,551,552,544,320,320,320,32,685,699,700,321,321,321,32,689,685,700,322,322,322,32,551,544,540,323,323,323,32,550,551,540,324,324,324,32,689,700,701,325,325,325,32,689,701,702,303,303,303,32,549,550,540,326,326,326,32,458,549,540,327,327,327,32,689,702,703,328,328,328,32,689,703,704,329,329,329,32,457,458,540,330,330,330,32,457,540,444,331,331,331,32,693,689,704,332,332,332,32,693,704,705,333,333,333,32,456,457,444,334,334,334,32,455,456,444,335,335,335,32,693,705,706,303,303,303,32,693,706,448,336,336,336,32,454,455,444,337,337,337,32,453,454,444,338,338,338,32,693,448,449,339,339,339,32,440,693,449,340,340,340,32,453,444,440,341,341,341,32,452,453,440,342,342,342,32,440,449,450,343,343,343,32,451,452,440,344,344,344,32,450,451,440,345,345,345,33,43,137,182,98,346,346,346,346,33,137,138,183,182,347,347,347,347,33,138,139,184,183,348,348,348,348,33,139,140,185,184,349,349,349,349,33,140,143,186,185,350,350,350,350,33,143,144,187,186,351,351,351,351,33,144,145,188,187,352,352,352,352,33,145,141,189,188,353,353,353,353,33,141,142,190,189,354,354,354,354,33,107,456,455,106,355,355,355,355,33,271,644,645,272,356,356,356,356,33,327,700,699,326,357,357,357,357,32,511,512,521,358,358,358,32,521,520,519,359,359,359,32,519,518,517,360,360,360,32,517,516,515,361,361,361,32,515,514,513,362,362,362,32,513,414,413,363,363,363,32,413,412,411,364,364,364,32,411,410,409,365,365,365,32,409,408,407,366,366,366,32,407,406,405,367,367,367,32,405,404,654,368,368,368,32,654,653,652,369,369,369,32,652,651,650,370,370,370,32,650,649,648,371,371,371,32,648,647,646,372,372,372,32,646,645,644,373,373,373,32,644,643,642,303,303,303,32,642,629,630,303,303,303,32,642,630,631,374,374,374,32,646,644,642,375,375,375,32,650,648,646,376,376,376,32,654,652,650,377,377,377,32,407,405,654,378,378,378,32,411,409,407,379,379,379,32,513,413,411,380,380,380,32,517,515,513,381,381,381,32,521,519,517,382,382,382,32,510,511,521,383,383,383,32,510,521,517,384,384,384,32,646,642,631,385,385,385,32,646,631,632,386,386,386,32,509,510,517,387,387,387,32,508,509,517,388,388,388,32,646,632,633,303,303,303,32,646,633,634,389,389,389,32,507,508,517,390,390,390,32,506,507,517,391,391,391,32,646,634,635,392,392,392,32,650,646,635,393,393,393,32,506,517,513,394,394,394,32,505,506,513,395,395,395,32,650,635,636,396,396,396,32,650,636,637,397,397,397,32,504,505,513,398,398,398,32,403,504,513,399,399,399,32,650,637,638,400,400,400,32,650,638,639,401,401,401,32,402,403,513,402,402,402,32,402,513,411,403,403,403,32,654,650,639,404,404,404,32,654,639,640,405,405,405,32,401,402,411,406,406,406,32,400,401,411,407,407,407,32,654,640,641,408,408,408,32,654,641,393,409,409,409,32,399,400,411,410,410,410,32,398,399,411,411,411,411,32,654,393,394,412,412,412,32,407,654,394,413,413,413,32,398,411,407,414,414,414,32,397,398,407,415,415,415,32,407,394,395,416,416,416,32,396,397,407,417,417,417,32,407,395,396,418,418,418,33,323,324,697,696,419,419,419,419,33,62,411,412,63,420,420,420,420,33,274,273,646,647,421,421,421,421,33,336,709,708,335,422,422,422,422,33,0,216,268,44,423,423,423,423,33,216,215,267,268,424,424,424,424,33,215,214,266,267,425,425,425,425,33,214,213,265,266,426,426,426,426,33,213,212,264,265,427,427,427,427,33,277,650,651,278,428,428,428,428,32,204,205,206,429,429,429,32,206,207,208,430,430,430,32,208,209,210,431,431,431,32,210,211,212,432,432,432,32,212,213,214,433,433,433,32,214,215,216,434,434,434,32,216,0,1,435,435,435,32,1,2,3,436,436,436,32,3,4,5,437,437,437,32,5,6,7,438,438,438,32,7,8,9,439,439,439,32,9,10,110,440,440,440,32,110,111,112,441,441,441,32,112,113,114,442,442,442,32,114,115,116,443,443,443,32,116,117,118,444,444,444,32,118,127,126,445,445,445,32,118,126,125,446,446,446,32,114,116,118,447,447,447,32,110,112,114,448,448,448,32,7,9,110,449,449,449,32,3,5,7,450,450,450,32,216,1,3,451,451,451,32,212,214,216,452,452,452,32,208,210,212,453,453,453,32,204,206,208,454,454,454,32,218,217,204,455,455,455,32,219,218,204,456,456,456,32,204,208,212,457,457,457,32,212,216,3,458,458,458,32,3,7,110,459,459,459,32,110,114,118,460,460,460,32,118,125,124,461,461,461,32,118,124,123,462,462,462,32,220,219,204,463,463,463,32,221,220,204,464,464,464,32,110,118,123,465,465,465,32,110,123,122,466,466,466,32,221,204,212,467,467,467,32,222,221,212,468,468,468,32,110,122,121,469,469,469,32,110,121,120,470,470,470,32,223,222,212,471,471,471,32,224,223,212,472,472,472,32,110,120,119,473,473,473,32,110,119,21,474,474,474,32,225,224,212,475,475,475,32,226,225,212,476,476,476,32,110,21,20,477,477,477,32,110,20,19,478,478,478,32,227,226,212,479,479,479,32,228,227,212,480,480,480,32,3,110,19,481,481,481,32,3,19,18,482,482,482,32,228,212,3,483,483,483,32,229,228,3,484,484,484,32,3,18,17,485,485,485,32,3,17,16,486,486,486,32,11,229,3,487,487,487,32,12,11,3,488,488,488,32,3,16,15,489,489,489,32,3,15,14,490,490,490,32,13,12,3,491,491,491,32,3,14,13,492,492,492,33,22,242,307,77,493,493,493,493,33,242,241,306,307,494,494,494,494,33,241,240,305,306,495,495,495,495,33,240,239,304,305,496,496,496,496,33,239,238,303,304,497,497,497,497,33,238,237,302,303,498,498,498,498,33,237,236,301,302,499,499,499,499,33,236,235,300,301,500,500,500,500,33,235,234,299,300,501,501,501,501,33,234,233,298,299,502,502,502,502,33,233,232,297,298,503,503,503,503,33,232,231,296,297,504,504,504,504,33,231,230,295,296,505,505,505,505,32,538,539,561,506,506,506,32,561,563,562,507,507,507,32,559,530,529,508,508,508,32,561,562,559,509,509,509,32,537,538,561,510,510,510,32,536,537,561,511,511,511,32,561,559,529,512,512,512,32,529,528,527,513,513,513,32,527,526,525,514,514,514,32,525,524,523,515,515,515,32,523,522,425,516,516,516,32,425,424,423,517,517,517,32,423,422,421,518,518,518,32,421,420,419,519,519,519,32,419,418,417,520,520,520,32,417,416,415,521,521,521,32,415,667,666,522,522,522,32,666,665,664,523,523,523,32,664,663,662,524,524,524,32,662,661,660,525,525,525,32,660,659,658,526,526,526,32,658,657,656,303,303,303,32,656,655,708,303,303,303,32,656,708,709,527,527,527,32,660,658,656,528,528,528,32,664,662,660,529,529,529,32,415,666,664,530,530,530,32,419,417,415,531,531,531,32,423,421,419,532,532,532,32,523,425,423,533,533,533,32,527,525,523,534,534,534,32,561,529,527,535,535,535,32,536,561,527,536,536,536,32,527,523,423,537,537,537,32,423,419,415,538,538,538,32,415,664,660,539,539,539,32,660,656,709,540,540,540,32,710,707,668,303,303,303,32,660,709,710,541,541,541,32,535,536,527,542,542,542,32,534,535,527,543,543,543,32,660,710,668,544,544,544,32,660,668,669,545,545,545,32,534,527,423,546,546,546,32,533,534,423,547,547,547,32,660,669,670,548,548,548,32,660,670,671,549,549,549,32,532,533,423,550,550,550,32,531,532,423,551,551,551,32,660,671,672,552,552,552,32,660,672,673,553,553,553,32,436,531,423,554,554,554,32,435,436,423,555,555,555,32,660,673,674,556,556,556,32,660,674,675,557,557,557,32,434,435,423,558,558,558,32,433,434,423,559,559,559,32,415,660,675,560,560,560,32,415,675,676,561,561,561,32,433,423,415,562,562,562,32,432,433,415,563,563,563,32,415,676,677,564,564,564,32,415,677,678,565,565,565,32,431,432,415,566,566,566,32,430,431,415,567,567,567,32,415,678,679,568,568,568,32,415,679,680,569,569,569,32,429,430,415,570,570,570,32,428,429,415,571,571,571,32,415,680,426,572,572,572,32,427,428,415,573,573,573,32,415,426,427,574,574,574,33,105,106,455,454,575,575,575,575,33,193,551,550,192,576,576,576,576,33,276,649,650,277,577,577,577,577,33,280,653,654,281,578,578,578,578,32,201,203,563,579,579,579,32,563,561,560,580,580,580,32,563,560,201,581,581,581,33,326,699,698,325,582,582,582,582,32,252,243,230,583,583,583,32,230,231,232,584,584,584,32,232,233,234,585,585,585,32,234,235,236,586,586,586,32,236,237,238,587,587,587,32,238,239,240,588,588,588,32,240,241,242,589,589,589,32,242,22,23,590,590,590,32,23,24,25,591,591,591,32,25,26,27,592,592,592,32,27,28,29,593,593,593,32,29,30,31,594,594,594,32,31,32,128,595,595,595,32,128,129,130,596,596,596,32,130,131,132,597,597,597,32,132,133,134,598,598,598,32,134,135,136,599,599,599,32,136,142,141,600,600,600,32,136,141,145,601,601,601,32,132,134,136,602,602,602,32,128,130,132,603,603,603,32,29,31,128,604,604,604,32,25,27,29,605,605,605,32,242,23,25,606,606,606,32,238,240,242,607,607,607,32,234,236,238,608,608,608,32,230,232,234,609,609,609,32,244,252,230,610,610,610,32,245,244,230,611,611,611,32,230,234,238,612,612,612,32,238,242,25,613,613,613,32,25,29,128,614,614,614,32,128,132,136,615,615,615,32,136,145,144,616,616,616,32,136,144,143,617,617,617,32,245,230,238,618,618,618,32,246,245,238,619,619,619,32,128,136,143,620,620,620,32,128,143,140,621,621,621,32,247,246,238,622,622,622,32,248,247,238,623,623,623,32,128,140,139,624,624,624,32,128,139,138,625,625,625,32,249,248,238,626,626,626,32,253,249,238,627,627,627,32,128,138,137,628,628,628,32,128,137,43,629,629,629,32,254,253,238,630,630,630,32,255,254,238,631,631,631,32,128,43,40,632,632,632,32,128,40,42,633,633,633,32,250,255,238,634,634,634,32,251,250,238,635,635,635,32,25,128,42,636,636,636,32,25,42,39,637,637,637,32,251,238,25,638,638,638,32,33,251,25,639,639,639,32,25,39,41,640,640,640,32,25,41,38,641,641,641,32,34,33,25,642,642,642,32,35,34,25,643,643,643,32,25,38,37,644,644,644,32,36,35,25,645,645,645,32,37,36,25,646,646,646,33,205,204,256,257,647,647,647,647,33,206,205,257,258,648,648,648,648,33,207,206,258,259,649,649,649,649,33,208,207,259,260,650,650,650,650,33,209,208,260,261,651,651,651,651,33,210,209,261,262,652,652,652,652,33,211,210,262,263,653,653,653,653,33,212,211,263,264,654,654,654,654,33,217,218,283,282,655,655,655,655,33,218,219,284,283,656,656,656,656,33,219,220,285,284,657,657,657,657,33,220,221,286,285,658,658,658,658,33,221,222,287,286,659,659,659,659,33,222,223,288,287,660,660,660,660,33,223,224,289,288,661,661,661,661,33,224,225,290,289,662,662,662,662,33,225,226,291,290,663,663,663,663,33,226,227,292,291,664,664,664,664,33,227,228,293,292,665,665,665,665,33,228,229,294,293,666,666,666,666,33,229,11,66,294,667,667,667,667,33,337,710,709,336,668,668,668,668,33,243,252,309,308,669,669,669,669,33,252,244,310,309,670,670,670,670,33,244,245,311,310,671,671,671,671,33,245,246,312,311,672,672,672,672,33,246,247,313,312,673,673,673,673,33,247,248,314,313,674,674,674,674,33,248,249,315,314,675,675,675,675,33,249,253,316,315,676,676,676,676,33,253,254,317,316,677,677,677,677,33,254,255,318,317,678,678,678,678,33,255,250,319,318,679,679,679,679,33,250,251,320,319,680,680,680,680,33,251,33,88,320,681,681,681,681,33,322,695,694,321,682,682,682,682,33,57,56,405,406,683,683,683,683,33,61,410,411,62,684,684,684,684,33,63,412,413,64,685,685,685,685,33,155,65,414,513,686,686,686,686,33,273,272,645,646,687,687,687,687,33,58,407,408,59,688,688,688,688,32,309,310,311,689,689,689,32,311,312,313,54,54,54,32,313,314,315,690,690,690,32,315,316,317,691,691,691,32,317,318,319,692,692,692,32,319,320,88,693,693,693,32,88,89,90,694,694,694,32,90,91,92,695,695,695,32,92,93,94,696,696,696,32,94,95,96,697,697,697,32,96,97,98,698,698,698,32,98,182,183,699,699,699,32,183,184,185,700,700,700,32,185,186,187,701,701,701,32,187,188,189,702,702,702,32,189,190,199,703,703,703,32,189,199,198,704,704,704,32,185,187,189,705,705,705,32,98,183,185,706,706,706,32,94,96,98,707,707,707,32,90,92,94,708,708,708,32,319,88,90,709,709,709,32,315,317,319,710,710,710,32,311,313,315,711,711,711,32,308,309,311,712,712,712,32,322,321,308,54,54,54,32,323,322,308,713,713,713,32,189,198,197,714,714,714,32,189,197,196,715,715,715,32,323,308,311,716,716,716,32,324,323,311,54,54,54,32,185,189,196,717,717,717,32,185,196,195,718,718,718,32,325,324,311,54,54,54,32,326,325,311,54,54,54,32,185,195,194,719,719,719,32,185,194,193,720,720,720,32,326,311,315,721,721,721,32,327,326,315,722,722,722,32,185,193,192,723,723,723,32,98,185,192,724,724,724,32,328,327,315,725,725,725,32,329,328,315,54,54,54,32,98,192,191,726,726,726,32,98,191,109,727,727,727,32,330,329,315,728,728,728,32,330,315,319,729,729,729,32,98,109,108,730,730,730,32,98,108,107,731,731,731,32,331,330,319,732,732,732,32,332,331,319,733,733,733,32,94,98,107,734,734,734,32,94,107,106,735,735,735,32,333,332,319,54,54,54,32,99,333,319,736,736,736,32,94,106,105,737,737,737,32,94,105,104,738,738,738,32,99,319,90,739,739,739,32,100,99,90,740,740,740,32,94,104,103,741,741,741,32,90,94,103,742,742,742,32,101,100,90,743,743,743,32,90,103,102,744,744,744,32,90,102,101,745,745,745,33,359,403,402,358,2,2,2,2,33,358,402,401,357,3,3,3,3,33,357,401,400,356,4,4,4,4,33,356,400,399,355,5,5,5,5,33,355,399,398,354,6,6,6,6,33,354,398,397,353,7,7,7,7,33,353,397,396,352,8,8,8,8,32,491,490,489,746,746,746,32,489,488,487,747,747,747,32,487,486,381,748,748,748,32,381,380,379,749,749,749,32,379,378,377,750,750,750,32,377,376,375,751,751,751,32,375,374,373,752,752,752,32,373,372,371,753,753,753,32,371,615,614,754,754,754,32,614,613,612,755,755,755,32,612,611,610,756,756,756,32,610,609,608,757,757,757,32,608,607,606,758,758,758,32,606,605,604,759,759,759,32,604,603,616,760,760,760,32,604,616,625,761,761,761,32,608,606,604,762,762,762,32,612,610,608,763,763,763,32,371,614,612,764,764,764,32,375,373,371,765,765,765,32,379,377,375,766,766,766,32,487,381,379,767,767,767,32,491,489,487,768,768,768,32,493,492,491,769,769,769,32,500,494,493,770,770,770,32,499,500,493,771,771,771,32,493,491,487,772,772,772,32,487,379,375,773,773,773,32,375,371,612,774,774,774,32,612,608,604,775,775,775,32,604,625,617,776,776,776,32,604,617,618,777,777,777,32,503,499,493,778,778,778,32,502,503,493,779,779,779,32,604,618,619,780,780,780,32,604,619,620,781,781,781,32,502,493,487,782,782,782,32,501,502,487,783,783,783,32,612,604,620,784,784,784,32,612,620,621,785,785,785,32,498,501,487,786,786,786,32,497,498,487,787,787,787,32,612,621,622,788,788,788,32,612,622,626,789,789,789,32,496,497,487,790,790,790,32,495,496,487,791,791,791,32,612,626,627,792,792,792,32,612,627,628,793,793,793,32,392,495,487,794,794,794,32,389,392,487,795,795,795,32,612,628,623,796,796,796,32,612,623,624,797,797,797,32,389,487,375,798,798,798,32,391,389,375,799,799,799,32,375,612,624,800,800,800,32,375,624,382,801,801,801,32,388,391,375,802,802,802,32,390,388,375,803,803,803,32,375,382,383,804,804,804,32,375,383,384,805,805,805,32,387,390,375,806,806,806,32,386,387,375,807,807,807,32,375,384,385,808,808,808,32,375,385,386,809,809,809,33,381,436,435,380,810,810,810,810,33,380,435,434,379,10,10,10,10,33,379,434,433,378,11,11,11,11,33,378,433,432,377,12,12,12,12,33,377,432,431,376,811,811,811,811,33,376,431,430,375,812,812,812,812,33,375,430,429,374,813,813,813,813,33,374,429,428,373,16,16,16,16,33,373,428,427,372,17,17,17,17,33,372,427,426,371,18,18,18,18,33,275,274,647,648,814,814,814,814,33,103,452,451,102,815,815,815,815,33,101,450,449,100,816,816,816,816,33,58,57,406,407,817,817,817,817,33,350,394,393,349,33,33,33,33,33,351,395,394,350,34,34,34,34,33,352,396,395,351,35,35,35,35,33,360,415,416,361,93,93,93,93,33,361,416,417,362,818,818,818,818,33,362,417,418,363,819,819,819,819,33,363,418,419,364,96,96,96,96,33,364,419,420,365,97,97,97,97,33,365,420,421,366,98,98,98,98,33,366,421,422,367,99,99,99,99,33,367,422,423,368,820,820,820,820,33,368,423,424,369,821,821,821,821,33,369,424,425,370,102,102,102,102,33,158,516,517,159,822,822,822,822,33,382,437,438,383,103,103,103,103,33,383,438,439,384,104,104,104,104,33,384,439,440,385,105,105,105,105,33,385,440,441,386,106,106,106,106,33,386,441,442,387,107,107,107,107,33,387,442,443,390,108,108,108,108,33,390,443,444,388,823,823,823,823,33,388,444,445,391,824,824,824,824,33,391,445,446,389,111,111,111,111,33,389,446,447,392,112,112,112,112,33,162,520,521,163,825,825,825,825,33,155,513,514,156,826,826,826,826,33,196,197,555,554,827,827,827,827,33,195,196,554,553,828,828,828,828,33,707,710,337,334,829,829,829,829,33,476,512,511,475,122,122,122,122,33,475,511,510,474,123,123,123,123,33,474,510,509,473,124,124,124,124,33,473,509,508,472,830,830,830,830,33,472,508,507,471,126,126,126,126,33,471,507,506,470,127,127,127,127,33,470,506,505,469,128,128,128,128,33,469,505,504,468,129,129,129,129,33,494,539,538,493,264,264,264,264,33,493,538,537,492,265,265,265,265,33,492,537,536,491,266,266,266,266,33,491,536,535,490,267,267,267,267,33,490,535,534,489,268,268,268,268,33,489,534,533,488,269,269,269,269,33,488,533,532,487,270,270,270,270,33,487,532,531,486,831,831,831,831,33,486,531,436,381,832,832,832,832,33,162,161,519,520,833,833,833,833,33,55,404,405,56,834,834,834,834,33,327,328,701,700,835,835,835,835,33,160,518,519,161,836,836,836,836,33,191,549,458,109,837,837,837,837,33,157,156,514,515,838,838,838,838,33,158,157,515,516,839,839,839,839,33,555,197,198,556,840,840,840,840,33,468,504,403,359,277,277,277,277,33,370,425,522,477,278,278,278,278,33,477,522,523,478,279,279,279,279,33,478,523,524,479,280,280,280,280,33,479,524,525,480,281,281,281,281,33,480,525,526,481,282,282,282,282,33,481,526,527,482,283,283,283,283,33,482,527,528,483,284,284,284,284,33,483,528,529,484,285,285,285,285,33,484,529,530,485,286,286,286,286,33,392,447,540,495,346,346,346,346,33,495,540,541,496,347,347,347,347,33,496,541,542,497,348,348,348,348,33,497,542,543,498,349,349,349,349,33,498,543,544,501,350,350,350,350,33,501,544,545,502,841,841,841,841,33,502,545,546,503,352,352,352,352,33,503,546,547,499,842,842,842,842,33,499,547,548,500,843,843,843,843,33,281,654,404,55,844,844,844,844,33,329,330,703,702,845,845,845,845,32,308,321,694,22,22,22,32,694,681,616,23,23,23,32,603,668,707,22,22,22,32,603,707,334,23,23,23,32,334,295,230,22,22,22,32,243,308,694,22,22,22,32,603,334,230,25,25,25,32,243,694,616,26,26,26,32,616,603,230,27,27,27,32,616,230,243,28,28,28,33,279,652,653,280,846,846,846,846,33,453,104,105,454,13,13,13,13,33,325,698,697,324,847,847,847,847,33,349,393,641,589,423,423,423,423,33,589,641,640,588,424,424,424,424,33,588,640,639,587,425,425,425,425,33,587,639,638,586,426,426,426,426,33,586,638,637,585,427,427,427,427,33,371,426,680,615,493,493,493,493,33,615,680,679,614,494,494,494,494,33,614,679,678,613,848,848,848,848,33,613,678,677,612,496,496,496,496,33,612,677,676,611,849,849,849,849,33,611,676,675,610,850,850,850,850,33,610,675,674,609,851,851,851,851,33,609,674,673,608,500,500,500,500,33,608,673,672,607,852,852,852,852,33,607,672,671,606,502,502,502,502,33,606,671,670,605,853,853,853,853,33,605,670,669,604,854,854,854,854,33,604,669,668,603,505,505,505,505,33,275,648,649,276,855,855,855,855,32,558,559,562,856,856,856,32,562,202,200,857,857,857,32,562,200,558,856,856,856,33,60,409,410,61,858,858,858,858,33,332,705,704,331,859,859,859,859,33,448,706,333,99,860,860,860,860,33,59,408,409,60,861,861,861,861,33,329,702,701,328,862,862,862,862,33,271,270,643,644,863,863,863,863,33,330,331,704,703,864,864,864,864,33,279,278,651,652,865,865,865,865,33,578,630,629,577,647,647,647,647,33,579,631,630,578,648,648,648,648,33,580,632,631,579,649,649,649,649,33,581,633,632,580,650,650,650,650,33,582,634,633,581,651,651,651,651,33,583,635,634,582,866,866,866,866,33,584,636,635,583,653,653,653,653,33,585,637,636,584,654,654,654,654,33,590,655,656,591,867,867,867,867,33,591,656,657,592,656,656,656,656,33,592,657,658,593,657,657,657,657,33,593,658,659,594,658,658,658,658,33,594,659,660,595,868,868,868,868,33,595,660,661,596,660,660,660,660,33,596,661,662,597,661,661,661,661,33,597,662,663,598,869,869,869,869,33,598,663,664,599,870,870,870,870,33,599,664,665,600,871,871,871,871,33,600,665,666,601,872,872,872,872,33,601,666,667,602,873,873,873,873,33,602,667,415,360,667,667,667,667,32,154,163,521,118,118,118,32,521,512,476,118,118,118,32,485,530,559,118,118,118,32,485,559,558,118,118,118,32,558,200,172,119,119,119,32,558,172,127,121,121,121,32,476,485,558,874,874,874,32,118,154,521,119,119,119,32,558,127,118,875,875,875,32,118,521,476,118,118,118,32,476,558,118,876,876,876,33,616,681,682,625,877,877,877,877,33,625,682,683,617,670,670,670,670,33,617,683,684,618,671,671,671,671,33,618,684,685,619,878,878,878,878,33,619,685,686,620,673,673,673,673,33,620,686,687,621,879,879,879,879,33,621,687,688,622,675,675,675,675,33,622,688,689,626,676,676,676,676,33,626,689,690,627,880,880,880,880,33,627,690,691,628,678,678,678,678,33,628,691,692,623,679,679,679,679,33,623,692,693,624,680,680,680,680,33,624,693,437,382,681,681,681,681]},\"pier_wide\":{\"uvs\":[],\"faces\":[33,0,20,18,3,0,0,0,0,33,4,0,3,5,1,1,1,1,33,1,9,11,2,2,2,2,2,32,1,22,23,3,3,3,32,1,23,6,4,4,4,32,21,20,0,5,5,5,32,10,21,0,6,6,6,32,9,1,6,7,7,7,32,9,6,7,8,8,8,32,10,0,4,9,9,9,32,9,7,8,10,10,10,32,8,10,4,11,11,11,32,4,9,8,12,12,12,32,3,18,19,13,13,13,32,3,19,13,14,14,14,32,17,16,2,15,15,15,32,12,17,2,16,16,16,32,5,3,13,17,17,17,32,5,13,14,18,18,18,32,12,2,11,19,19,19,32,5,14,15,20,20,20,32,15,12,11,21,21,21,32,15,11,5,22,22,22,33,4,5,11,9,23,23,23,23,33,14,13,10,8,24,24,24,24,33,8,7,15,14,25,25,25,25,33,13,19,21,10,26,26,26,26,33,7,6,12,15,27,27,27,27,33,19,18,20,21,28,28,28,28,33,23,17,12,6,29,29,29,29,33,16,22,1,2,30,30,30,30,33,22,16,17,23,31,31,31,31],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":24,\"version\":3,\"normals\":32,\"type\":\"Geometry\",\"faces\":32},\"vertices\":[7.5,-4,-47.5,7.5,-4,107.5,-7.5,-4,107.5,-7.49999,-4,-47.5,7.5,61.5,-47.5,-7.5,61.5,-47.5,7.5,4,95.5,7.49999,56,95.5,7.5,56,-35.5,7.49999,61.5,107.5,7.5,4,-35.5,-7.5,61.5,107.5,-7.5,4,95.5,-7.5,4,-35.5,-7.5,56,-35.5,-7.5,56,95.5,-7.5,-4,79.5,-7.5,4,79.5,-7.5,-4,-19.5,-7.5,4,-19.5,7.5,-4,-19.5,7.5,4,-19.5,7.5,-4,79.5,7.5,4,79.5],\"normals\":[-6.0633e-14,-1,1.36239e-7,0.00000152588,2.91198e-7,-1,-0.00000178019,-2.91198e-7,1,1,0,0,1,2.08616e-7,5.96047e-8,1,-1.19209e-7,1.6241e-14,1,-3.27825e-7,5.96047e-8,1,6.55196e-8,-3.57931e-8,1,1.83399e-8,1.90276e-7,1,-5.09597e-8,-1.24973e-7,1,3.69954e-7,2.91198e-8,1,0,1.1921e-7,1,-1.527e-7,4.92219e-8,-1,-5.96047e-8,-3.40598e-8,-1,-7.45058e-8,-2.98023e-8,-1,0,-3.40598e-8,-1,1.19209e-7,-1.42109e-14,-1,-3.63998e-8,-5.52064e-8,-1,-2.75098e-8,-1.26087e-8,-1,-2.18399e-8,-9.4033e-8,-1,-4.76506e-8,-2.18399e-8,-1,-3.66798e-8,-2.29249e-8,-1,-3.97132e-8,-2.15346e-8,1.25178e-13,1,-4.92219e-8,0,0,1,0,-1,5.82397e-8,0,1,-1.19209e-7,0,0,-1,1.90735e-7,3.57628e-7,1,0,1,-1.19209e-7,0,-1,0,0,0,-1]},\"autopoint_c\":{\"normals\":[-0.0445486,0,0.999007,0.155718,0,-0.987802,-0.155736,0,0.987799,0.253644,0,-0.967298,-0.253664,0,0.967292,0,-1,-4.47035e-8,0,-1,0,-7.54727e-9,-1,-1.40275e-9,-1.42173e-8,-1,-5.6341e-9,-8.89173e-8,-1,1.33063e-7,9.03341e-9,-1,-6.54494e-8,1.05009e-9,-1,-4.25226e-8,2.21797e-9,-1,-4.8377e-8,-3.47031e-9,-1,-3.01798e-8,-5.58276e-8,-1,7.86905e-8,2.18467e-9,-1,-5.19907e-8,3.65253e-9,-1,-4.56714e-8,1.01887e-9,-1,-4.64883e-8,6.56137e-7,-1,-0.00000190716,3.02054e-9,-1,-5.13552e-8,-7.19151e-9,-1,-2.3228e-8,5.38274e-7,-1,-0.00000157907,-1.18012e-7,-1,1.90983e-7,-1.21046e-8,-1,-1.09358e-8,0,-1,0,-8.01621e-11,-1,-4.78459e-8,-1.17389e-9,-1,-3.3605e-8,8.88404e-8,-1,-2.51623e-7,-1.28239e-9,-1,-3.39504e-8,0.33301,0,-0.942923,0.448878,0,-0.893593,-0.333026,0,0.942918,0.391772,0,-0.920063,-0.391782,0,0.920058,4.72254e-8,1,-5.44608e-8,-5.92871e-9,1,6.27385e-8,-8.14254e-9,1,7.64448e-8,0,1,8.46131e-8,0,1,4.47035e-8,2.24156e-9,1,4.09909e-8,1.31926e-9,1,3.11904e-8,1.1424e-8,1,1.80966e-8,-3.75878e-8,1,1.27015e-7,-1.15863e-9,1,5.18683e-8,-1.86994e-9,1,3.79966e-8,1.89593e-10,1,4.68631e-8,2.91841e-10,1,4.68948e-8,-2.30254e-9,1,4.9315e-8,5.38174e-9,1,2.74804e-8,-1.03396e-9,1,4.66897e-8,-5.63618e-8,1,1.56148e-7,-2.25546e-9,1,5.01739e-8,6.47834e-9,1,2.28626e-8,2.91198e-9,1,3.611e-8,-8.54019e-15,1,6.73999e-8,-6.01328e-11,1,6.9617e-8,5.49758e-10,1,4.10609e-8,-3.30025e-11,1,3.82077e-8,-0.332928,0,0.942952,0.430095,0,-0.902784,-0.430101,0,0.902781,0,-1,0,-5.29819e-9,-1,-3.17891e-8,6.62274e-9,-1,-3.97364e-8,-0.0000639161,-1,0.00040544,-1.04964e-8,-1,-3.97364e-8,9.69503e-8,-1,-3.70193e-7,2.90707e-7,-1,-6.83068e-7,-1.31181e-8,-1,-9.04295e-9,8.28178e-9,-1,-8.14429e-8,-6.70333e-9,-1,-3.6494e-8,1.66951e-8,-1,-6.3695e-8,-1.48187e-9,-1,-3.34785e-8,4.33247e-8,-1,-1.66613e-7,2.91662e-8,-1,-8.26075e-8,-8.49251e-8,-1,1.13577e-7,-8.69641e-8,-1,2.04266e-7,1.4641e-7,-1,-3.07344e-7,-1.0117e-9,-1,-4.94655e-8,-4.04117e-9,-1,-2.7164e-8,-0.391717,0,0.920086,0.391772,0,-0.920063,-0.430066,0,0.902798,0.429975,0,-0.902841,-0.42997,0,0.902843,0.391555,0,-0.920155,-0.391547,0,0.920158,-0.430001,0,0.902829,0.332696,0,-0.943034,-0.332685,0,0.943038,-0.3916,0,0.920136,0.253278,0,-0.967394,-0.253265,0,0.967397,0.430066,0,-0.902798,-0.332759,0,0.943012,0.155411,0,-0.98785,-0.155402,0,0.987851,0.448883,0,-0.893591,-0.448897,0,0.893584,0.391717,0,-0.920086,-0.253347,0,0.967375,0.0460657,0,-0.998938,-0.0461121,0,0.998936,-0.448878,0,0.893593,-0.3916,0,0.920136,0,-1,0,-1.88263e-7,-1,4.42428e-7,-3.31461e-7,-1,6.24691e-7,0,-1,0,-2.27476e-7,-1,5.3422e-7,-3.86211e-7,-1,7.33682e-7,-1.40089e-9,-1,-4.54348e-8,-3.52742e-8,-1,-1.09405e-8,5.13143e-8,-1,-3.16913e-7,2.75532e-7,-1,-6.47057e-7,1.05839e-7,-1,-3.00002e-7,-5.40339e-7,-1,0.00000114163,-3.11412e-8,-1,-4.90784e-9,-4.75677e-7,-1,9.98805e-7,4.85142e-7,-1,-0.00000109555,1.01484e-7,-1,-3.03072e-7,1.21751e-7,-1,-2.93852e-7,-0.430095,0,0.902784,0.332927,0,-0.942953,-0.155468,0,0.987841,0,0,-1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,1,4.91841e-13,1,4.62014e-7,-2.47888e-8,1,1.5723e-7,1.09467e-7,1,-4.17462e-7,2.21094e-8,1,-7.66168e-9,-1.31503e-7,1,3.14523e-7,1.40089e-9,1,4.54348e-8,-1.98675e-8,1,1.46344e-7,0,1,0,0,1,0,0,1,0,-2.36216e-8,1,1.50157e-7,1.39595e-8,1,6.0429e-9,-1.56656e-7,1,3.64595e-7,0,1,0,1.76371e-8,1,5.47025e-9,9.77349e-9,1,2.15644e-8,4.15284e-8,1,-1.61519e-7,5.40339e-7,1,-0.00000114163,1.47634e-7,1,-2.74234e-7,1.10853e-7,1,-1.9406e-7,1.8977e-8,1,8.63316e-9,1.46402e-8,1,4.54088e-9,1.39201e-8,1,6.33264e-9,1.46067e-8,1,4.53048e-9,1.4242e-8,1,5.31616e-9,0.430066,0,-0.902798,1.99284e-8,1,-3.85894e-9,9.71368e-9,1,-1.11212e-9,-2.15667e-9,1,4.82755e-8,-1.1036e-9,1,5.03617e-8,2.0233e-8,1,-4.64051e-9,-4.82082e-15,1,4.50445e-8,-8.58194e-9,1,4.56166e-8,-4.58005e-10,1,4.47408e-8,6.71823e-9,1,2.22725e-8,-2.85244e-8,1,1.46863e-7,-6.69482e-10,1,4.95221e-8,-8.613e-10,1,4.62842e-8,-2.87923e-9,1,5.4545e-8,-1.65483e-10,1,4.16748e-8,0.448899,0,-0.893583,6.02107e-8,-1,-3.81947e-7,-7.10125e-7,-1,0.00000141359,1.16942e-7,-1,-2.99838e-7,1.13723e-7,-1,-2.92313e-7,-2.95077e-7,-1,6.03923e-7,-1.97872e-8,-1,-2.01804e-9,-2.80263e-7,-1,0.00000177765,-3.73577e-8,-1,-1.15871e-8,-0.391772,0,0.920062,0.253545,0,-0.967324,-6.75794e-9,1,1.474e-7,0,1,6.81196e-8,-5.29819e-9,1,3.17891e-8,0,1,6.81196e-8,6.62274e-9,1,3.97364e-8,9.41506e-10,1,7.16839e-8,-4.84751e-8,1,1.85097e-7,-1.30258e-7,1,3.46191e-7,9.68652e-8,1,-1.57675e-7,3.43056e-10,1,2.61194e-8,7.49744e-9,1,3.97364e-8,-2.16338e-9,1,4.79949e-8,-2.55293e-9,1,5.1099e-8,2.50817e-9,1,3.25675e-8,-9.38893e-9,1,5.95926e-8,1.90468e-8,1,-7.72236e-10,-1.68911e-9,1,4.69173e-8,-4.49661e-14,1,2.69599e-7,-4.28666e-9,1,6.00129e-8,-3.65778e-9,1,5.33943e-8,-1.13758e-8,1,8.48041e-8,-1.78175e-9,1,4.1573e-8,-3.8016e-9,1,5.18793e-8,-0.0457995,0,0.998951,0.448882,0,-0.893591,0,0,1,0,0,-1,0.4301,0,-0.902781,-0.33301,0,0.942923,0.155632,0,-0.987815,-0.0446296,0,0.999004,0.0445486,0,-0.999007,-0.448878,0,0.893593,0.0450295,0,-0.998986,-0.430095,0,0.902784,2.21096e-8,1,-7.66203e-9,5.12982e-8,1,-1.95631e-7,3.3993e-8,1,-3.00271e-7,2.26541e-8,1,-9.05828e-9,-6.51485e-14,1,1.14133e-7,1.29016e-7,1,6.36824e-8,-3.34361e-9,1,1.59429e-7,-2.47906e-8,1,1.57242e-7,1.48962e-8,1,7.35277e-9,1.02827e-8,1,2.03685e-8,-1.83419e-8,1,1.35106e-7,9.99051e-9,1,2.11203e-8,1.7637e-8,1,5.47042e-9,0.391782,0,-0.920058,-0.253644,0,0.967298,0,-1,-2.10966e-7,2.83955e-8,-1,-1.8023e-7,3.44556e-8,-1,-1.23881e-7,-1.67171e-7,-1,2.94178e-7,6.10744e-15,-1,-5.70664e-8,-2.20502e-9,-1,-3.38651e-8,1.97398e-8,-1,-8.61174e-8,-4.0576e-9,-1,-2.58022e-8,-8.82356e-9,-1,-3.00895e-8,1.63882e-8,-1,-1.03959e-7,-6.81594e-10,-1,-4.02991e-8,-2.93301e-9,-1,-3.73734e-8,-2.9213e-9,-1,-3.56954e-8,-7.55607e-9,-1,-3.35464e-8,-1.66811e-9,-1,-3.17203e-8,-0.155718,0,0.987801,0.155736,0,-0.987799,0.333026,0,-0.942918,0.253664,0,-0.967292,-0.164399,0,0.986394,-0.164399,0,-0.986394,5.70813e-7,0,-1,1.66789e-7,0,-1,1.07023e-7,0,-1,1.66789e-7,0,-1,-0.00000106456,0,-1,1.5088e-7,3.63846e-7,-1,1.26709e-7,0,-1,-0.00000106456,0,-1],\"metadata\":{\"generator\":\"io_three\",\"normals\":261,\"uvs\":0,\"vertices\":232,\"version\":3,\"faces\":355,\"type\":\"Geometry\"},\"uvs\":[],\"vertices\":[121.5,-4,19,133.072,-4,19.516,121.5,4,19,139.417,-4,19,144.878,-4,19.8609,144.567,-4,21.3284,133.072,4,19.516,139.417,-1,19,144.878,-1,19.8609,156.816,-4,22.9912,156.371,-4,24.4239,144.567,4,21.3284,156.816,-1,22.9912,169.103,-4,27.3307,168.555,-4,28.7269,156.371,4,24.4239,144.878,4,19.8609,139.417,4,19,169.103,-1,27.3307,181.753,-4,32.7173,181.132,-4,34.0827,168.555,4,28.7269,156.816,4,22.9912,144.878,0.999999,19.8609,139.417,0.999999,19,169.523,-1,19,172.027,-1,19.8843,181.753,-1,32.7173,194.754,-4,38.911,194.09,-4,40.2561,181.132,4,34.0827,169.103,4,27.3307,156.816,0.999999,22.9912,169.523,-4,19,172.027,-4,19.8843,185.066,-1,25.4354,194.754,-1,38.911,194.09,4,40.2561,181.753,4,32.7173,169.103,0.999999,27.3307,185.066,-4,25.4354,198.295,-1,31.7373,221.754,-4,52.4739,221.09,-4,53.819,194.754,4,38.911,181.753,0.999999,32.7173,172.027,0.999999,19.8843,169.523,0.999999,19,198.295,-4,31.7373,221.754,-1,52.4739,235.753,-4,59.141,235.132,-4,60.5063,221.09,4,53.819,194.754,0.999998,38.911,185.066,0.999999,25.4354,172.027,4,19.8843,169.523,4,19,225.295,-1,45.3002,235.753,-1,59.141,250.103,-4,65.2472,249.555,-4,66.6434,235.132,4,60.5063,221.754,4,52.4739,198.295,0.999999,31.7373,185.066,4,25.4354,215.266,-4,19,225.295,-4,45.3002,239.066,-1,51.8591,250.103,-1,65.2472,264.816,-4,70.4378,264.371,-4,71.8705,249.555,4,66.6434,235.753,4,59.141,221.754,0.999998,52.4739,198.295,4,31.7373,215.266,-1,19,233.705,-4,28.2627,239.066,-4,51.8591,253.027,-1,57.8009,264.816,-1,70.4378,279.878,-4,74.3812,279.568,-4,75.8488,264.371,4,71.8705,250.103,4,65.2472,235.753,0.999997,59.141,225.295,0.999998,45.3002,233.705,-1,28.2627,246.934,-4,34.5646,253.027,-4,57.8009,267.186,-1,62.7969,279.878,-1,74.3812,295.224,-4,76.7956,295.072,-4,78.2878,279.568,4,75.8488,264.816,4,70.4378,250.103,0.999997,65.2472,239.066,0.999998,51.8591,225.295,4,45.3002,215.266,4,19,233.087,-1,19,237.246,-1,21.089,246.934,-1,34.5646,259.973,-4,40.1157,267.186,-4,62.7969,281.534,-1,66.5545,295.224,-1,76.7956,310.5,-4,77.5,310.5,-4,79,295.072,4,78.2878,279.878,4,74.3812,264.816,0.999997,70.4378,253.027,0.999997,57.8009,239.066,4,51.8591,233.705,4,28.2627,215.266,0.999999,19,233.087,-4,19,237.246,-4,21.089,250.247,-1,27.2827,259.973,-1,40.1157,272.814,-4,44.6497,281.534,-4,66.5545,296.036,-1,68.8369,310.5,-1,77.5,323.75,-4,77.5,323.75,-4,79,310.5,4,79,295.224,4,76.7956,279.878,0.999997,74.3812,267.186,0.999997,62.7969,253.027,4,57.8009,246.934,4,34.5646,233.705,0.999999,28.2627,236.429,-4,19,237.91,-4,19.7439,250.247,-4,27.2827,262.897,-1,32.6693,272.814,-1,44.6497,285.466,-4,47.9659,296.036,-4,68.8369,310.5,-1,69.5,323.75,-1,77.5,323.75,-1,42.5,323.75,-4,42.5,323.75,-4,41,323.75,4,41,323.75,4,42.5,323.75,0.999998,42.5,323.75,0.999998,50.5,323.75,4,50.5,323.75,4,69.5,323.75,0.999997,69.5,323.75,0.999997,77.5,323.75,4,77.5,323.75,4,79,323.75,-1,69.5,323.75,-4,69.5,323.75,-4,50.5,323.75,-1,50.5,310.5,4,77.5,295.224,0.999997,76.7956,281.534,0.999997,66.5545,267.186,4,62.7969,259.973,4,40.1157,246.934,0.999999,34.5646,237.246,0.999999,21.089,233.087,0.999999,19,236.429,4,19,237.91,4,19.7439,250.868,-4,25.9173,262.897,-4,32.6693,275.184,-1,37.0088,285.466,-1,47.9659,297.964,-4,49.9349,310.5,-4,69.5,310.5,-1,42.5,310.5,-1,50.5,310.5,-4,42.5,310.5,-4,41,310.5,4,41,310.5,4,42.5,310.5,0.999998,42.5,310.5,0.999998,50.5,310.5,4,50.5,310.5,4,69.5,310.5,0.999997,69.5,310.5,0.999997,77.5,310.5,-4,50.5,296.036,0.999997,68.8369,281.534,4,66.5545,272.814,4,44.6497,259.973,0.999998,40.1157,250.247,0.999999,27.2827,237.246,4,21.089,233.087,4,19,250.868,4,25.9173,263.445,-4,31.2731,275.184,-4,37.0088,287.122,-1,40.1391,297.964,-1,49.9349,298.776,-1,41.9762,298.776,-4,41.9762,298.928,-4,40.484,298.928,4,40.484,298.776,4,41.9762,298.776,0.999998,41.9762,297.964,0.999998,49.9349,297.964,4,49.9349,296.036,4,68.8369,285.466,4,47.9659,272.814,0.999998,44.6497,262.897,0.999999,32.6693,250.247,4,27.2827,263.445,4,31.2731,275.629,-4,35.5761,287.122,-4,40.1391,287.432,-4,38.6716,287.432,4,38.6716,287.122,4,40.1391,287.122,0.999998,40.1391,285.466,0.999998,47.9659,275.184,0.999998,37.0088,262.897,4,32.6693,275.629,4,35.5761,275.184,4,37.0088,323.75,4,54,323.75,-4,54,323.75,4,66,323.75,-4,66,332.75,-4,67.5,332.75,-4,52.5,332.75,4,52.5,332.75,4,67.5],\"faces\":[33,0,1,6,2,0,0,0,0,33,7,8,4,3,1,1,1,1,33,1,5,11,6,2,2,2,2,33,8,12,9,4,3,3,3,3,33,5,10,15,11,4,4,4,4,32,139,154,140,5,5,5,32,140,122,105,6,6,6,32,105,90,79,7,7,7,32,79,68,58,8,8,8,32,58,49,36,9,9,9,32,79,58,36,10,10,10,32,140,105,79,11,11,11,32,121,139,140,12,12,12,32,104,121,140,13,13,13,32,79,36,27,14,14,14,32,104,140,79,15,15,15,32,89,104,79,16,16,16,32,89,79,27,17,17,17,32,78,89,27,18,18,18,32,78,27,18,19,19,19,32,67,78,18,20,20,20,32,67,18,12,21,21,21,32,35,41,57,22,22,22,32,57,67,12,23,23,23,32,8,7,25,24,24,24,32,35,57,12,25,25,25,32,12,8,25,26,26,26,32,25,26,35,27,27,27,32,12,25,35,28,28,28,33,12,18,13,9,29,29,29,29,33,36,49,42,28,30,30,30,30,33,10,14,21,15,31,31,31,31,33,17,16,23,24,1,1,1,1,33,18,27,19,13,32,32,32,32,33,14,20,30,21,33,33,33,33,33,16,22,32,23,3,3,3,3,32,53,73,84,34,34,34,32,84,95,110,35,35,35,32,110,127,159,36,36,36,32,159,185,151,37,37,37,32,151,150,184,38,38,38,32,151,184,187,39,39,39,32,110,159,151,40,40,40,32,53,84,110,41,41,41,32,45,53,110,42,42,42,32,110,151,187,43,43,43,32,110,187,160,44,44,44,32,110,160,128,45,45,45,32,110,128,111,46,46,46,32,45,110,111,47,47,47,32,45,111,96,48,48,48,32,39,45,96,49,49,49,32,85,63,54,50,50,50,32,39,96,85,51,51,51,32,32,39,85,52,52,52,32,85,54,46,53,53,53,32,46,47,24,54,54,54,32,46,24,23,55,55,55,32,32,85,46,56,56,56,32,46,23,32,57,57,57,33,33,34,26,25,58,58,58,58,33,27,36,28,19,59,59,59,59,33,20,29,37,30,60,60,60,60,33,22,31,39,32,29,29,29,29,32,186,156,225,61,61,61,32,225,229,228,62,62,62,32,227,155,173,6,6,6,32,225,228,227,63,63,63,32,172,186,225,6,6,6,32,137,172,225,64,64,64,32,225,227,173,65,65,65,32,173,138,120,6,6,6,32,120,103,88,66,66,66,32,88,77,66,67,67,67,32,88,66,48,68,68,68,32,173,120,88,69,69,69,32,137,225,173,70,70,70,32,119,137,173,71,71,71,32,173,88,48,72,72,72,32,173,48,40,73,73,73,32,102,119,173,74,74,74,32,87,102,173,75,75,75,32,173,40,34,76,76,76,32,34,33,65,24,24,24,32,76,87,173,77,77,77,32,34,65,76,78,78,78,32,173,34,76,79,79,79,33,34,40,35,26,80,80,80,80,33,31,38,45,39,81,81,81,81,33,40,48,41,35,82,82,82,82,33,38,44,53,45,59,59,59,59,33,47,46,55,56,58,58,58,58,33,44,62,73,53,30,30,30,30,33,49,58,50,42,83,83,83,83,33,43,51,61,52,84,84,84,84,33,46,54,64,55,80,80,80,80,33,58,68,59,50,85,85,85,85,33,51,60,71,61,86,86,86,86,33,54,63,74,64,82,82,82,82,33,66,77,67,57,87,87,87,87,33,68,79,69,59,88,88,88,88,33,60,70,82,71,89,89,89,89,33,62,72,84,73,83,83,83,83,33,77,88,78,67,90,90,90,90,33,79,90,80,69,91,91,91,91,33,70,81,93,82,92,92,92,92,33,72,83,95,84,85,85,85,85,33,86,101,87,76,93,93,93,93,33,88,103,89,78,94,94,94,94,33,90,105,91,80,95,95,95,95,33,81,92,108,93,96,96,96,96,33,83,94,110,95,88,88,88,88,33,85,96,112,97,87,87,87,87,33,75,86,76,65,97,97,97,97,33,115,116,100,99,98,98,98,98,33,101,118,102,87,99,99,99,99,33,103,120,104,89,100,100,100,100,33,105,122,106,91,101,101,101,101,33,92,107,125,108,102,102,102,102,33,48,66,57,41,103,103,103,103,33,94,109,127,110,91,91,91,91,33,96,111,129,112,104,104,104,104,32,106,123,124,105,105,105,32,124,107,92,6,6,6,32,92,81,70,6,6,6,32,70,60,51,106,106,106,32,51,43,29,107,107,107,32,106,124,92,108,108,108,32,91,106,92,108,108,108,32,1,0,3,6,6,6,32,3,4,9,6,6,6,32,9,13,19,109,109,109,32,19,28,42,110,110,110,32,9,19,42,111,111,111,32,1,3,9,24,24,24,32,5,1,9,24,24,24,32,80,91,92,108,108,108,32,10,5,9,24,24,24,32,80,92,70,108,108,108,32,14,10,9,112,112,112,32,69,80,70,113,113,113,32,20,14,9,114,114,114,32,59,69,70,115,115,115,32,20,9,42,116,116,116,32,50,59,70,117,117,117,32,20,42,50,118,118,118,32,29,20,50,119,119,119,32,50,70,51,120,120,120,32,51,29,50,121,121,121,33,116,134,117,100,122,122,122,122,33,118,136,119,102,123,123,123,123,33,120,138,121,104,124,124,124,124,33,122,140,123,106,125,125,125,125,32,141,142,143,126,126,126,32,143,144,145,126,126,126,32,143,145,146,127,127,127,32,141,143,146,128,128,128,32,147,148,224,126,126,126,32,141,146,147,126,126,126,32,225,156,157,128,128,128,32,157,141,147,126,126,126,32,147,224,225,127,127,127,32,147,225,157,129,129,129,33,107,124,153,125,130,130,130,130,32,17,2,6,131,131,131,32,17,6,11,132,132,132,32,22,16,17,133,133,133,32,38,31,22,134,134,134,32,62,44,38,135,135,135,32,62,38,22,136,136,136,32,22,17,11,137,137,137,32,22,11,15,138,138,138,32,153,152,158,139,139,139,32,108,125,153,140,140,140,32,82,93,108,141,141,141,32,61,71,82,142,142,142,32,37,52,61,143,143,143,32,108,153,158,144,144,144,32,108,158,126,144,144,144,32,22,15,21,145,145,145,32,108,126,109,144,144,144,32,22,21,30,146,146,146,32,82,108,109,147,147,147,32,62,22,30,148,148,148,32,72,62,30,149,149,149,32,72,30,37,150,150,150,32,72,37,61,151,151,151,32,82,109,94,152,152,152,32,83,72,61,153,153,153,32,82,94,83,154,154,154,32,61,82,83,155,155,155,33,109,126,159,127,95,95,95,95,33,111,128,161,129,94,94,94,94,33,113,130,163,131,156,156,156,156,32,163,190,209,157,157,157,32,209,219,205,158,158,158,32,205,181,147,140,140,140,32,147,146,180,38,38,38,32,147,180,204,159,159,159,32,209,205,147,160,160,160,32,131,163,209,161,161,161,32,165,114,131,162,162,162,32,164,165,131,163,163,163,32,131,209,147,164,164,164,32,147,204,218,165,165,165,32,147,218,220,166,166,166,32,191,164,131,167,167,167,32,210,191,131,168,168,168,32,131,147,220,169,169,169,32,220,210,131,170,170,170,33,166,167,133,132,171,171,171,171,32,177,143,142,105,105,105,32,142,176,200,6,6,6,32,200,214,196,172,172,172,32,196,169,134,6,6,6,32,134,116,115,173,173,173,32,115,132,133,6,6,6,32,115,133,168,6,6,6,32,196,134,115,174,174,174,32,177,142,200,108,108,108,32,201,177,200,108,108,108,32,196,115,168,175,175,175,32,196,168,195,176,176,176,32,201,200,196,177,177,177,32,215,201,196,178,178,178,32,196,195,213,24,24,24,32,215,196,213,179,179,179,33,134,169,135,117,180,180,180,180,33,136,171,137,119,181,181,181,181,32,188,207,183,182,182,182,32,183,149,226,183,183,183,32,226,231,230,184,184,184,32,224,148,182,185,185,185,32,226,230,224,186,186,186,32,188,183,226,187,187,187,32,129,161,188,188,188,188,32,97,112,129,189,189,189,32,74,97,129,190,190,190,32,129,188,226,191,191,191,32,226,224,182,192,192,192,32,226,182,206,193,193,193,32,74,129,226,194,194,194,32,64,74,226,195,195,195,32,226,206,208,196,196,196,32,226,208,189,197,197,197,32,55,64,226,198,198,198,32,98,56,55,199,199,199,32,113,98,55,200,200,200,32,55,226,189,201,201,201,32,55,189,162,202,202,202,32,130,113,55,203,203,203,32,162,130,55,204,204,204,33,138,173,139,121,205,205,205,205,33,98,113,131,114,206,206,206,206,33,176,142,141,174,207,207,207,207,33,178,144,143,177,208,208,208,208,33,180,146,145,179,207,207,207,207,33,182,148,147,181,125,125,125,125,33,184,150,149,183,207,207,207,207,33,158,152,151,185,125,125,125,125,33,173,155,154,139,207,207,207,207,33,175,157,156,186,125,125,125,125,33,126,158,185,159,101,101,101,101,33,128,160,188,161,100,100,100,100,33,130,162,190,163,99,99,99,99,33,165,164,192,193,98,98,98,98,33,167,194,168,133,209,209,209,209,33,169,196,170,135,210,210,210,210,33,171,198,172,137,211,211,211,211,33,200,176,174,199,212,212,212,212,33,202,178,177,201,213,213,213,213,33,29,43,52,37,214,214,214,214,33,204,180,179,203,212,212,212,212,33,206,182,181,205,215,215,215,215,33,187,184,183,207,205,205,205,205,33,198,175,186,172,215,215,215,215,33,160,187,207,188,124,124,124,124,33,162,189,209,190,123,123,123,123,33,164,191,211,192,216,216,216,216,32,211,221,223,217,217,217,32,223,217,203,218,218,218,32,203,179,145,140,140,140,32,145,144,178,139,139,139,32,145,178,202,219,219,219,32,192,211,223,220,220,220,32,166,193,192,221,221,221,32,167,166,192,222,222,222,32,203,145,202,223,223,223,32,203,202,216,224,224,224,32,194,167,192,225,225,225,32,212,194,192,226,226,226,32,223,203,216,227,227,227,32,223,216,222,144,144,144,32,212,192,223,228,228,228,32,223,222,212,229,229,229,33,194,212,195,168,230,230,230,230,33,196,214,197,170,231,231,231,231,32,174,141,157,5,5,5,32,157,175,198,232,232,232,32,198,171,136,233,233,233,32,136,118,101,234,234,234,32,101,86,75,235,235,235,32,75,99,100,236,236,236,32,75,100,117,237,237,237,32,136,101,75,238,238,238,32,157,198,136,239,239,239,32,199,174,157,240,240,240,32,197,199,157,241,241,241,32,136,75,117,242,242,242,32,136,117,135,243,243,243,32,197,157,136,244,244,244,32,136,135,170,245,245,245,32,170,197,136,246,246,246,33,214,200,199,197,247,247,247,247,33,216,202,201,215,248,248,248,248,33,218,204,203,217,247,247,247,247,33,208,206,205,219,211,211,211,211,33,189,208,219,209,181,181,181,181,33,191,210,221,211,180,180,180,180,33,212,222,213,195,249,249,249,249,33,222,216,215,213,250,250,250,250,33,220,218,217,223,231,231,231,231,33,210,220,223,221,210,210,210,210,33,63,85,97,74,103,103,103,103,33,226,227,228,231,251,251,251,251,32,155,227,226,128,128,128,32,226,149,150,127,127,127,32,151,152,153,126,126,126,32,151,153,124,127,127,127,32,124,123,140,128,128,128,32,154,155,226,128,128,128,32,151,124,140,129,129,129,32,154,226,150,126,126,126,32,150,151,140,127,127,127,32,150,140,154,129,129,129,33,229,230,231,228,126,126,126,126,33,225,224,230,229,252,252,252,252,32,166,132,115,253,253,253,32,166,115,99,253,253,253,32,165,193,166,253,253,253,32,56,98,114,254,254,254,32,165,166,99,253,253,253,32,47,56,114,254,254,254,32,114,165,99,255,255,255,32,75,65,33,254,254,254,32,114,99,75,255,255,255,32,24,47,114,6,6,6,32,114,75,33,256,256,256,32,114,33,25,254,254,254,32,2,17,24,257,257,257,32,24,114,25,258,258,258,32,7,3,0,257,257,257,32,24,25,7,259,259,259,32,0,2,24,260,260,260,32,7,0,24,257,257,257]},\"autopoint_b\":{\"normals\":[9.46403e-15,1,4.47034e-8,0,1,4.83261e-8,4.5388e-10,1,3.95921e-8,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,2.11707e-7,6.35783e-7,1,0,0,-1,0,-1,0,-1.63068e-7,-1.19209e-7,-1,0,1,0,-1.16078e-14,1,7.18348e-8,4.76836e-8,1,3.17891e-8,1.09255e-10,1,6.81199e-8,1.02359e-7,1,-1.72398e-7,0,1,0,-2.50647e-7,1,-8.41882e-8,0,1,0,1.46345e-9,1,2.0436e-7,7.69055e-11,1,4.79501e-8,6.81376e-9,1,0,-0.1644,5.87935e-8,-0.986394,-2.6491e-9,-1,-1.58945e-8,0,-1,0,6.29157e-8,-1,-5.96045e-8,0,-1,-6.81199e-8,-2.17092e-9,-1,-3.83228e-9,-1.96374e-9,-1,-5.96045e-8,-6.30248e-9,-1,-7.18352e-8,5.21739e-9,-1,-1.0387e-8,-1.01484e-9,-1,-4.79899e-8,-1.54423e-9,-1,-7.30242e-8,-3.15468e-15,-1,-1.49011e-8,1.86701e-9,-1,-3.5927e-8,2.11707e-7,0,1,-0.448906,0,0.893579,-0.448906,0,0.893579,-0.448906,0,0.893579,-0.448906,0,0.893579,-0.448858,0.0000031143,0.893603,-0.448879,0,0.893593,-0.448858,-0.00000311429,0.893603,-0.448879,0,0.893593,-0.448859,-5.32629e-8,0.893602,-0.448859,0,0.893602,-8.07949e-8,0.00000317891,1,-0.164398,-5.87935e-8,0.986394,-0.42997,-8.7785e-7,0.902843,-8.52835e-8,-0.00000301997,1,1.3015e-15,-1,-1.49012e-8,1.90086e-7,0,-1,-3.07208e-14,-1,3.17887e-7,0,0,1,-2.73074e-14,1,3.17887e-7,1.79526e-7,-3.17891e-7,-1,-3.75988e-15,1,4.47036e-8,-0.492896,0,-0.870088,-0.492892,0,-0.87009,-0.492896,-3.81116e-7,-0.870088,-0.492892,-1.03723e-7,-0.870091,-0.492893,-4.299e-7,-0.87009,-0.44961,-6.20108e-8,-0.893225,-0.405239,-7.70503e-7,-0.914211,-0.534994,-2.01429e-7,-0.844856,-0.534994,0,-0.844856,-0.534997,0,-0.844854,-0.534995,-5.37144e-7,-0.844855,-0.534997,0,-0.844854,-0.534994,0,-0.844856],\"metadata\":{\"generator\":\"io_three\",\"normals\":72,\"uvs\":0,\"vertices\":58,\"version\":3,\"faces\":90,\"type\":\"Geometry\"},\"uvs\":[],\"vertices\":[323.75,1,-17.5,233.656,1,-17.5,228.814,1,-14.4335,220.105,1,-9.49998,323.75,1,-9.49998,323.75,-4,-19,323.75,4,-19,323.75,4,-17.5,323.75,4,-9.49998,323.75,4,-5.99999,323.75,-4,-6,323.75,-4,-9.49998,323.75,-0.999999,-9.49998,323.75,-0.999999,-17.5,323.75,-4,-17.5,233.656,4,-17.5,220.105,4,-9.49998,236.025,-4,-19,233.656,-4,-17.5,236.025,4,-19,217.517,4,9.5,323.75,4,9.50002,323.75,4,6.00003,332.75,4,7.50003,332.75,4,-7.50001,218.778,4,-8.74826,208.475,4,-3.56229,199.14,4,0.575712,210.91,4,6.18101,332.75,-4,-7.50001,332.75,-4,7.50003,323.75,-4,6.00003,323.75,-4,9.50002,217.517,-4,9.5,210.91,-4,6.18101,199.14,-4,0.575712,208.475,-4,-3.56229,218.778,-4,-8.74826,220.105,-4,-9.49998,220.105,-0.999999,-9.49998,228.814,-0.999999,-14.4335,233.656,-0.999999,-17.5,233.443,-1,17.5,233.443,-4,17.5,236.429,-4,19,236.429,4,19,233.443,4,17.5,233.443,0.999999,17.5,217.517,1,9.50002,217.517,-1,9.50002,323.75,1,9.50002,323.75,-4,19,323.75,-4,17.5,323.75,-1,17.5,323.75,-1,9.50002,323.75,0.999999,17.5,323.75,4,17.5,323.75,4,19],\"faces\":[32,4,0,1,0,0,0,32,2,3,4,1,1,1,32,1,2,4,2,2,2,32,14,5,6,3,3,3,32,6,7,0,4,4,4,32,4,8,9,5,5,5,32,4,9,10,6,6,6,32,10,11,12,5,5,5,32,13,14,6,7,7,7,32,4,10,12,8,8,8,32,13,6,0,5,5,5,32,0,4,12,5,5,5,32,0,12,13,8,8,8,33,1,0,7,15,9,9,9,9,33,16,8,4,3,10,10,10,10,33,17,5,14,18,11,11,11,11,33,19,6,5,17,12,12,12,12,33,15,7,6,19,13,13,13,13,32,28,20,21,14,14,14,32,22,23,24,15,15,15,32,28,21,22,16,16,16,32,26,27,28,17,17,17,32,8,16,25,18,18,18,32,25,26,28,19,19,19,32,22,24,9,20,20,20,32,9,8,25,21,21,21,32,25,28,22,22,22,22,32,22,9,25,23,23,23,33,24,29,10,9,24,24,24,24,32,10,29,30,25,25,25,32,31,32,33,26,26,26,32,10,30,31,27,27,27,32,38,11,10,28,28,28,32,37,38,10,29,29,29,32,10,31,33,30,30,30,32,34,35,36,31,31,31,32,10,33,34,32,32,32,32,36,37,10,33,33,33,32,34,36,10,34,34,34,33,39,12,11,38,10,10,10,10,32,41,13,12,35,35,35,32,12,39,40,26,26,26,32,12,40,41,36,36,36,33,18,14,13,41,37,37,37,37,32,42,43,44,38,38,38,32,44,45,46,39,39,39,32,44,46,47,40,40,40,32,42,44,47,41,41,41,32,48,20,28,42,42,42,32,42,47,48,43,43,43,32,34,33,49,44,44,44,32,49,42,48,45,45,45,32,48,28,34,46,46,46,32,48,34,49,47,47,47,33,48,50,21,20,48,48,48,48,32,57,51,52,5,5,5,32,57,52,53,7,7,7,32,55,56,57,5,5,5,32,22,21,50,5,5,5,32,55,57,53,6,6,6,32,31,22,50,5,5,5,32,50,55,53,6,6,6,32,54,32,31,5,5,5,32,50,53,54,8,8,8,32,54,31,50,7,7,7,33,22,31,30,23,49,49,49,49,33,24,23,30,29,6,6,6,6,33,28,27,35,34,50,50,50,50,33,33,32,54,49,51,51,51,51,33,53,42,49,54,52,52,52,52,33,42,53,52,43,53,53,53,53,33,43,52,51,44,54,54,54,54,33,44,51,57,45,55,55,55,55,33,45,57,56,46,56,56,56,56,33,46,56,55,47,57,57,57,57,33,55,50,48,47,58,58,58,58,32,3,2,40,59,59,59,32,39,38,37,60,60,60,32,3,40,39,61,61,61,32,25,16,3,60,60,60,32,39,37,25,62,62,62,32,39,25,3,63,63,63,33,37,36,26,25,64,64,64,64,33,36,35,27,26,65,65,65,65,32,15,19,17,66,66,66,32,17,18,41,67,67,67,32,41,40,2,68,68,68,32,1,15,17,69,69,69,32,41,2,1,70,70,70,32,17,41,1,71,71,71]},\"autopoint_a\":{\"normals\":[-0.653171,0,-0.75721,-0.61523,0,-0.788347,-0.575807,0,-0.817585,-0.534996,0,-0.844855,-0.359892,0,-0.932994,0.689131,0,0.724637,0.65317,0,0.757212,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,-0.689069,0,-0.724696,0.689147,0,0.724622,0.689072,0,0.724693,0.653171,0,0.75721,0.615228,0,0.788349,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,-0.575806,0,-0.817586,-0.405242,0,-0.914209,0,1,0,-6.44473e-9,1,-6.57305e-8,1.59536e-8,1,-7.54615e-9,7.9264e-8,1,9.21945e-8,9.26454e-8,1,8.04791e-8,1.17909e-8,1,-3.135e-8,-2.771e-9,1,-3.93631e-8,-3.58989e-9,1,-5.09958e-8,2.62533e-10,1,-4.40853e-8,2.75318e-9,1,-3.54564e-8,9.15696e-10,1,-4.5324e-8,-5.64024e-9,1,-1.04081e-7,-5.83591e-9,1,-5.15255e-8,-5.85733e-9,1,-5.72275e-8,3.79065e-9,1,-3.71186e-8,3.04775e-9,1,-1.43517e-8,1.56236e-9,1,-4.02325e-8,3.84029e-9,1,-3.70249e-8,-2.02363e-8,1,-6.6264e-8,1.3555e-9,1,-3.49056e-8,3.5553e-9,1,-4.17827e-8,9.45924e-9,1,-3.2952e-8,1.86581e-9,1,-4.10829e-8,-8.29957e-10,1,-4.24721e-8,0.581237,0,0.813734,-0.170958,0,-0.985278,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707109,0,-0.707105,0.707107,0,-0.707107,0.707108,0,-0.707105,0,0,-1,-0.689144,0,-0.724624,-0.813734,0,-0.581237,-0.615228,0,-0.788349,-0.2191,0,-0.975702,-5.68704e-14,1,-8.35981e-8,7.07575e-7,1,9.68783e-7,-2.43201e-7,1,-3.45232e-7,1.4944e-8,1,-1.49442e-8,1.57617e-8,1,-1.42857e-8,3.8463e-8,1,-2.0212e-9,-5.76221e-8,1,-1.17946e-7,1.54186e-8,1,-1.39748e-8,1.5601e-7,1,1.32282e-7,-6.76754e-8,1,-1.40242e-7,0.534996,0,0.844854,-1.47416e-14,1,-9.24436e-8,1.41084e-7,1,1.82533e-7,-2.35488e-7,1,-3.71778e-7,9.27575e-9,1,-2.22263e-8,6.04374e-10,1,-4.41107e-8,-3.03826e-8,1,-6.60319e-8,-1.36061e-8,1,-7.26042e-8,-1.4948e-9,1,-6.92391e-8,-1.06848e-8,1,-2.41046e-8,1.61237e-8,1,-2.87688e-8,2.1729e-8,1,-4.8703e-8,-3.75655e-8,1,-7.45052e-8,-8.74091e-8,1,-1.73362e-7,9.56462e-9,1,-3.65386e-8,1.52561e-9,1,-4.92903e-8,-1.19067e-10,1,-4.7936e-8,-2.65721e-9,1,-4.61689e-8,-9.04347e-9,1,-4.98243e-8,-2.27481e-9,1,-4.75627e-8,-5.13203e-9,1,-4.81406e-8,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575808,0,-0.817585,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,-0.335864,0,-0.941911,-0.313679,0,-0.949529,0.653169,0,0.757212,-0.266711,0,-0.963776,0.575808,0,0.817585,-0.492901,0,-0.870086,-0.313678,0,-0.949529,-1,0,0,0.313679,0,0.949529,0.266712,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,-0.073564,0,-0.99729,-0.35989,0,-0.932995,-0.534994,0,-0.844856,-6.09146e-15,1,-4.98865e-8,-2.11036e-8,1,-7.51254e-8,-4.51046e-8,1,-1.00063e-7,-1.73552e-9,1,-4.03986e-8,-1.1983e-10,1,-4.0101e-8,-3.83454e-9,1,-4.97751e-8,-2.30646e-9,1,-4.39067e-8,2.03034e-9,1,-4.38803e-8,2.03148e-9,1,-4.20508e-8,-1.8055e-9,1,-4.60803e-8,-9.20604e-9,1,-5.18969e-8,-0.449607,0,-0.893227,1.79042e-8,1,-1.79042e-8,2.09976e-8,1,-1.34105e-8,3.57707e-7,1,3.39749e-7,1.96628e-8,1,-1.45818e-8,-2.45854e-7,1,-4.33991e-7,2.2129e-8,1,-1.04676e-8,-1.56454e-7,1,-4.73599e-7,-1.09276e-7,1,-4.86632e-7,1.54232e-7,1,8.88878e-7,0,1,0,-9.34614e-8,1,-0.00000126704,0,1,0,2.14201e-8,1,3.51399e-8,-3.07462e-8,1,-1.22263e-7,-5.40106e-8,1,-1.13919e-7,-7.79732e-8,1,-1.41567e-7,-7.87213e-8,1,-1.40953e-7,1.93471e-10,1,-2.49258e-7,-1.94564e-8,1,-1.5775e-7,-1.12568e-7,1,-2.01557e-7,4.67088e-8,1,2.34974e-8,-1.81674e-8,1,-1.54668e-7,6.08256e-7,1,0.00000350554,2.21071e-8,1,-1.11804e-8,2.17539e-8,1,-1.16273e-8,-2.75771e-8,1,-2.35354e-7,2.17539e-8,1,-1.16273e-8,2.15783e-8,1,-1.21697e-8,2.36043e-8,1,-7.1601e-9,0.00000256228,1,0.00000664257,-1.16307e-8,1,-7.6114e-8,0.61523,0,0.788348,-0.653173,0,-0.757209,0.492898,0,0.870087,0.122409,0,0.99248,0.707109,0,-0.707105,0.707102,0,-0.707112,0.707102,0,-0.707112,-6.11165e-9,-1,4.82457e-8,1.53142e-7,-1,2.13551e-7,1.19138e-7,-1,2.10017e-7,-2.01838e-8,-1,1.20964e-8,-1.18417e-7,-1,-2.09097e-7,-3.11511e-8,-1,-4.8075e-8,0,-1,0,-1.29523e-9,-1,6.41097e-8,4.53916e-9,-1,5.08748e-8,1.12661e-8,-1,6.45677e-8,-6.92244e-9,-1,3.67281e-8,5.42815e-10,-1,3.80965e-8,8.599e-9,-1,6.0576e-8,-3.18313e-10,-1,5.44304e-8,1.14129e-9,-1,5.00023e-8,-5.87807e-10,-1,3.90244e-8,-6.26768e-10,-1,4.1611e-8,3.22749e-9,-1,4.87787e-8,6.29965e-9,-1,5.03312e-8,3.24187e-10,-1,4.52484e-8,-1.61137e-8,-1,2.02965e-8,1.11828e-8,-1,5.54226e-8,-1.96192e-8,-1,1.50173e-8,-2.04313e-8,-1,1.38402e-8,-3.00843e-8,-1,3.00847e-8,-1.83375e-8,-1,4.20334e-8,4.85145e-7,-1,6.88853e-7,0,-1,0,1.13109e-7,-1,1.87219e-7,-3.58543e-8,-1,2.21333e-8,-3.46045e-8,-1,2.3122e-8,-4.27132e-7,-1,-4.71786e-7,3.14085e-7,-1,4.02464e-7,0,-1,0,-1.20852e-8,-1,5.55914e-8,-3.11769e-8,-1,3.11767e-8,-1.49857e-8,-1,6.89336e-8,8.74091e-8,-1,1.73362e-7,-1.92274e-7,-1,-2.46378e-7,3.84211e-9,-1,5.01059e-8,-5.73515e-7,-1,-6.64868e-7,-5.05548e-7,-1,-7.17824e-7,-1.73282e-8,-1,1.28514e-8,1.46977e-8,-1,4.80973e-8,1.24821e-8,-1,9.94307e-8,8.08959e-10,-1,3.73067e-8,-8.6719e-8,-1,-2.24813e-7,3.47303e-8,-1,1.56759e-7,9.47267e-8,-1,3.298e-7,-1.96699e-8,-1,-3.90778e-8,-2.84467e-9,-1,4.49787e-8,-1.37809e-8,-1,3.17981e-8,1.05347e-7,-1,1.8571e-7,5.10393e-15,-1,4.1799e-8,-1.61432e-9,-1,3.04079e-8,1.37555e-8,-1,6.22129e-8,-2.65692e-9,-1,4.63892e-8,-1.55928e-8,-1,1.50329e-8,-2.2653e-9,-1,4.267e-8,2.13501e-8,-1,8.64306e-8,-3.89947e-8,-1,-2.13154e-8,-3.58083e-8,-1,3.58083e-8,6.77551e-7,-1,7.85474e-7,5.74398e-7,-1,8.15585e-7,4.91707e-7,-1,8.67981e-7,4.04292e-7,-1,9.12064e-7,-3.59009e-7,-1,-9.30709e-7,-2.26437e-8,-1,9.37917e-9,-2.03789e-8,-1,1.36162e-8,-1.46235e-7,-1,-1.24602e-7,0,-1,0,-3.81346e-8,-1,3.12957e-8,-2.68663e-7,-1,-3.81474e-7,-2.03782e-8,-1,1.36173e-8,-2.9382e-7,-1,-3.71813e-7,3.7577e-8,-1,3.20697e-7,-4.35077e-8,-1,2.32547e-8,9.9716e-8,-1,3.01848e-7,-1.89071e-7,-1,-4.26535e-7,1.67916e-7,-1,4.35312e-7,-2.26437e-8,-1,9.37928e-9,-0.122409,0,-0.99248],\"metadata\":{\"generator\":\"io_three\",\"normals\":245,\"uvs\":0,\"vertices\":214,\"version\":3,\"faces\":310,\"type\":\"Geometry\"},\"uvs\":[],\"vertices\":[264.808,4,-42.988,272.932,4,-50.7141,264.808,0.999998,-42.988,237.725,0.999999,-21.852,247.095,0.999999,-28.4512,256.13,0.999998,-35.5022,272.932,0.999998,-50.7141,223.928,0.999999,-22.5844,233.279,0.999999,-28.5057,242.328,0.999998,-34.8788,251.054,0.999998,-41.6881,259.434,0.999998,-48.9174,267.274,0.999998,-56.3727,177.564,0.999999,-21.5791,187.02,0.999999,-25.2266,196.286,0.999999,-29.3338,205.339,0.999999,-33.8906,214.157,0.999998,-38.8862,222.72,0.999998,-44.3084,231.006,0.999998,-50.1443,238.997,0.999998,-56.3798,246.671,0.999997,-62.9997,253.835,0.999997,-69.8117,174.868,0.999999,-29.1137,183.958,0.999999,-32.6199,192.865,0.999998,-36.5679,201.567,0.999998,-40.9481,210.043,0.999998,-45.7501,218.274,0.999998,-50.9622,226.239,0.999998,-56.5719,233.92,0.999997,-62.5657,241.297,0.999997,-68.9291,248.176,0.999997,-75.4703,237.725,4,-21.852,247.095,4,-28.4512,256.13,4,-35.5022,238.559,4,-20.6044,247.989,4,-27.246,257.082,4,-34.3423,265.816,4,-41.8762,273.993,4,-49.6531,223.928,4,-22.5844,233.279,4,-28.5057,242.328,4,-34.8788,251.054,4,-41.6881,259.434,4,-48.9174,267.274,4,-56.3727,177.564,4,-21.5791,187.02,4,-25.2266,196.286,4,-29.3338,205.339,4,-33.8906,214.157,4,-38.8862,222.72,4,-44.3084,231.006,4,-50.1443,238.997,4,-56.3798,246.671,4,-62.9997,253.835,4,-69.8117,174.868,4,-29.1137,183.958,4,-32.6199,192.865,4,-36.5679,201.567,4,-40.9481,210.043,4,-45.7501,218.274,4,-50.9622,226.239,4,-56.5719,233.92,4,-62.5657,241.297,4,-68.9291,248.176,4,-75.4703,174.363,4,-30.5264,183.384,4,-34.0061,192.223,4,-37.9243,200.859,4,-42.2714,209.272,4,-47.0371,217.441,4,-52.2098,225.346,4,-57.7771,232.968,4,-63.7256,240.289,4,-70.0409,247.115,4,-76.5313,272.226,4,-64.1488,261.265,4,-75.109,264.801,4,-58.8455,255.962,4,-67.6843,137.124,0.999999,-19.6593,146.723,0.999999,-21.3248,156.228,0.999999,-23.4593,165.618,0.999999,-26.0577,137.124,4,-19.6593,146.723,4,-21.3248,156.228,4,-23.4593,165.618,4,-26.0577,108.25,4,-19.0114,117.665,4,-19.2487,127.308,4,-19.96,136.904,4,-21.1435,146.43,4,-22.7964,155.864,4,-24.9148,165.182,4,-27.4936,117,4,-19.0114,217.601,4,-19,233.221,0.999999,-19,217.601,0.999999,-19,236.025,4,-19,233.221,4,-19,169.757,0.999999,-19,169.757,4,-19,131.778,4,-19,131.778,0.999999,-19,108.25,4,-19,264.808,-4,-42.988,272.932,-4,-50.7141,264.808,-1,-42.988,237.725,-1,-21.852,247.095,-1,-28.4512,256.13,-1,-35.5022,272.932,-1,-50.7141,223.928,-1,-22.5844,233.279,-1,-28.5057,242.328,-1,-34.8788,251.054,-1,-41.6881,259.434,-1,-48.9174,267.274,-1,-56.3727,177.564,-1,-21.5791,187.02,-1,-25.2266,196.286,-1,-29.3338,205.339,-1,-33.8906,214.157,-1,-38.8862,222.72,-1,-44.3084,231.006,-1,-50.1443,238.997,-1,-56.3798,246.671,-1,-62.9997,253.835,-1,-69.8117,174.868,-1,-29.1137,183.958,-1,-32.6199,192.865,-1,-36.5679,201.567,-1,-40.9481,210.043,-1,-45.7501,218.274,-1,-50.9622,226.239,-1,-56.5719,233.92,-1,-62.5657,241.297,-1,-68.9291,248.176,-1,-75.4703,237.725,-4,-21.852,247.095,-4,-28.4512,256.13,-4,-35.5022,238.559,-4,-20.6044,247.989,-4,-27.246,257.082,-4,-34.3423,265.816,-4,-41.8762,273.993,-4,-49.6531,223.928,-4,-22.5844,233.279,-4,-28.5057,242.328,-4,-34.8788,251.054,-4,-41.6881,259.434,-4,-48.9174,267.274,-4,-56.3727,177.564,-4,-21.5791,187.02,-4,-25.2266,196.286,-4,-29.3338,205.339,-4,-33.8906,214.157,-4,-38.8862,222.72,-4,-44.3084,231.006,-4,-50.1443,238.997,-4,-56.3798,246.671,-4,-62.9997,253.835,-4,-69.8117,174.868,-4,-29.1137,183.958,-4,-32.6199,192.865,-4,-36.5679,201.567,-4,-40.9481,210.043,-4,-45.7501,218.274,-4,-50.9622,226.239,-4,-56.5719,233.92,-4,-62.5657,241.297,-4,-68.9291,248.176,-4,-75.4703,174.363,-4,-30.5264,183.384,-4,-34.0061,192.223,-4,-37.9243,200.859,-4,-42.2714,209.272,-4,-47.0371,217.441,-4,-52.2098,225.346,-4,-57.7771,232.968,-4,-63.7256,240.289,-4,-70.0409,247.115,-4,-76.5313,272.226,-4,-64.1488,261.265,-4,-75.109,264.801,-4,-58.8455,255.962,-4,-67.6843,137.124,-1,-19.6593,146.723,-1,-21.3248,156.228,-1,-23.4593,165.618,-1,-26.0577,137.124,-4,-19.6593,146.723,-4,-21.3248,156.228,-4,-23.4593,165.618,-4,-26.0577,108.25,-4,-19.0114,117.665,-4,-19.2487,127.308,-4,-19.96,136.904,-4,-21.1435,146.43,-4,-22.7964,155.864,-4,-24.9148,165.182,-4,-27.4936,117,-4,-19.0114,217.601,-4,-19,233.221,-1,-19,217.601,-1,-19,236.025,-4,-19,233.221,-4,-19,169.757,-1,-19,169.757,-4,-19,131.778,-4,-19,131.778,-1,-19,108.25,-4,-19],\"faces\":[33,35,0,2,5,0,0,0,0,33,5,4,34,35,1,1,1,1,33,4,3,33,34,2,2,2,2,33,3,98,101,33,3,3,3,3,33,14,13,47,48,4,4,4,4,33,11,12,46,45,5,5,5,5,33,10,11,45,44,6,6,6,6,33,9,10,44,43,7,7,7,7,33,8,9,43,42,8,8,8,8,33,7,8,42,41,9,9,9,9,33,76,183,182,75,10,10,10,10,33,39,146,147,40,11,11,11,11,33,31,32,66,65,12,12,12,12,33,30,31,65,64,13,13,13,13,33,29,30,64,63,14,14,14,14,33,28,29,63,62,15,15,15,15,33,27,28,62,61,16,16,16,16,33,26,27,61,60,17,17,17,17,33,25,26,60,59,18,18,18,18,33,24,25,59,58,19,19,19,19,33,23,24,58,57,20,20,20,20,33,73,180,179,72,21,21,21,21,33,69,176,175,68,22,22,22,22,32,81,105,102,23,23,23,32,102,13,14,24,24,24,32,14,15,16,25,25,25,32,16,17,18,26,26,26,32,18,19,20,27,27,27,32,20,21,22,28,28,28,32,22,32,31,29,29,29,32,22,31,30,30,30,30,32,18,20,22,31,31,31,32,14,16,18,32,32,32,32,81,102,14,33,33,33,32,82,81,14,34,34,34,32,14,18,22,35,35,35,32,22,30,29,36,36,36,32,22,29,28,37,37,37,32,83,82,14,38,38,38,32,84,83,14,39,39,39,32,14,22,28,40,40,40,32,14,28,27,41,41,41,32,23,84,14,42,42,42,32,24,23,14,43,43,43,32,14,27,26,44,44,44,32,25,24,14,45,45,45,32,14,26,25,46,46,46,33,186,184,77,79,47,47,47,47,33,93,200,199,92,48,48,48,48,32,139,173,183,49,49,49,32,183,76,66,49,49,49,32,183,66,32,49,49,49,32,139,183,32,49,49,49,32,22,56,80,50,50,50,32,139,32,22,51,51,51,32,187,163,129,52,52,52,32,129,139,22,51,51,51,32,22,80,187,52,52,52,32,129,22,187,52,52,52,33,184,185,78,77,53,53,53,53,33,96,203,196,89,54,54,54,54,33,2,0,1,6,55,55,55,55,33,185,187,80,78,56,56,56,56,33,74,181,180,73,57,57,57,57,33,94,201,200,93,58,58,58,58,32,33,101,100,59,59,59,32,100,36,37,60,60,60,32,37,38,39,61,61,61,32,39,40,1,62,62,62,32,39,1,0,63,63,63,32,100,37,39,64,64,64,32,34,33,100,65,65,65,32,39,0,35,66,66,66,32,35,34,100,67,67,67,32,100,39,35,68,68,68,33,100,207,143,36,69,69,69,69,32,47,103,97,70,70,70,32,97,41,42,71,71,71,32,42,43,44,72,72,72,32,44,45,46,73,73,73,32,79,77,78,74,74,74,32,44,46,79,75,75,75,32,97,42,44,76,76,76,32,48,47,97,77,77,77,32,49,48,97,78,78,78,32,97,44,79,79,79,79,32,79,78,80,80,80,80,32,80,56,55,81,81,81,32,80,55,54,82,82,82,32,97,79,80,83,83,83,32,50,49,97,84,84,84,32,51,50,97,85,85,85,32,97,80,54,86,86,86,32,97,54,53,87,87,87,32,52,51,97,88,88,88,32,53,52,97,89,89,89,33,15,14,48,49,90,90,90,90,33,16,15,49,50,91,91,91,91,33,17,16,50,51,92,92,92,92,33,18,17,51,52,93,93,93,93,33,19,18,52,53,94,94,94,94,33,20,19,53,54,95,95,95,95,33,21,20,54,55,96,96,96,96,33,22,21,55,56,97,97,97,97,33,90,197,203,96,98,98,98,98,33,67,174,202,95,99,99,99,99,33,38,145,146,39,100,100,100,100,33,95,202,201,94,101,101,101,101,33,36,143,144,37,102,102,102,102,33,71,178,177,70,103,103,103,103,33,13,102,103,47,104,104,104,104,33,89,196,213,106,105,105,105,105,33,84,23,57,88,106,106,106,106,33,83,84,88,87,107,107,107,107,33,82,83,87,86,108,108,108,108,33,81,82,86,85,109,109,109,109,33,91,198,197,90,110,110,110,110,33,68,175,174,67,111,111,111,111,33,72,179,178,71,112,112,112,112,32,7,99,98,113,113,113,32,98,3,4,114,114,114,32,4,5,2,115,115,115,32,2,6,12,116,116,116,32,2,12,11,117,117,117,32,98,4,2,118,118,118,32,8,7,98,119,119,119,32,9,8,98,120,120,120,32,98,2,11,121,121,121,32,10,9,98,122,122,122,32,10,98,11,123,123,123,33,70,177,176,69,124,124,124,124,32,66,76,75,125,125,125,32,66,75,74,126,126,126,32,64,65,66,127,127,127,32,62,63,64,128,128,128,32,60,61,62,129,129,129,32,58,59,60,130,130,130,32,88,57,58,131,131,131,32,86,87,88,132,132,132,32,104,85,86,133,133,133,32,89,106,104,134,134,134,32,91,90,96,135,135,135,32,96,89,104,136,136,136,32,104,86,88,137,137,137,32,88,58,60,138,138,138,32,60,62,64,139,139,139,32,64,66,74,140,140,140,32,64,74,73,141,141,141,32,91,96,104,142,142,142,32,92,91,104,143,143,143,32,60,64,73,144,144,144,32,60,73,72,145,145,145,32,92,104,88,146,146,146,32,93,92,88,147,147,147,32,60,72,71,148,148,148,32,60,71,70,149,149,149,32,94,93,88,150,150,150,32,95,94,88,23,23,23,32,60,70,69,151,151,151,32,60,69,68,152,152,152,32,67,95,88,153,153,153,32,60,68,67,154,154,154,32,67,88,60,155,155,155,33,37,144,145,38,156,156,156,156,33,75,182,181,74,157,157,157,157,33,97,99,7,41,158,158,158,158,33,104,105,81,85,159,159,159,159,32,119,153,186,160,160,160,32,186,79,46,160,160,160,32,186,46,12,160,160,160,32,119,186,12,160,160,160,32,6,1,40,161,161,161,32,119,12,6,51,51,51,32,147,108,113,161,161,161,32,113,119,6,51,51,51,32,6,40,147,162,162,162,32,113,6,147,162,162,162,33,109,107,142,112,0,0,0,0,33,112,142,141,111,1,1,1,1,33,111,141,140,110,2,2,2,2,33,110,140,208,205,3,3,3,3,33,121,155,154,120,4,4,4,4,33,118,152,153,119,5,5,5,5,33,117,151,152,118,6,6,6,6,33,116,150,151,117,7,7,7,7,33,115,149,150,116,8,8,8,8,33,114,148,149,115,9,9,9,9,33,138,172,173,139,12,12,12,12,33,137,171,172,138,13,13,13,13,33,136,170,171,137,14,14,14,14,33,135,169,170,136,15,15,15,15,33,134,168,169,135,16,16,16,16,33,133,167,168,134,17,17,17,17,33,132,166,167,133,18,18,18,18,33,131,165,166,132,19,19,19,19,33,130,164,165,131,20,20,20,20,32,138,139,129,163,163,163,32,129,128,127,164,164,164,32,127,126,125,165,165,165,32,125,124,123,166,166,166,32,123,122,121,167,167,167,32,121,120,209,168,168,168,32,209,212,188,169,169,169,32,209,188,189,170,170,170,32,123,121,209,171,171,171,32,127,125,123,172,172,172,32,138,129,127,173,173,173,32,137,138,127,174,174,174,32,127,123,209,175,175,175,32,209,189,190,176,176,176,32,209,190,191,177,177,177,32,136,137,127,178,178,178,32,135,136,127,179,179,179,32,209,191,130,180,180,180,32,209,130,131,181,181,181,32,135,127,209,182,182,182,32,134,135,209,183,183,183,32,209,131,132,184,184,184,32,133,134,209,185,185,185,32,132,133,209,186,186,186,33,109,113,108,107,55,55,55,55,32,107,108,147,187,187,187,32,147,146,145,188,188,188,32,145,144,143,189,189,189,32,143,207,208,190,190,190,32,143,208,140,169,169,169,32,147,145,143,191,191,191,32,142,107,147,192,192,192,32,143,140,141,193,193,193,32,142,147,143,194,194,194,32,141,142,143,195,195,195,32,162,163,187,196,196,196,32,187,185,184,197,197,197,32,186,153,152,198,198,198,32,187,184,186,199,199,199,32,161,162,187,200,200,200,32,160,161,187,201,201,201,32,187,186,152,202,202,202,32,152,151,150,203,203,203,32,150,149,148,204,204,204,32,148,204,210,190,190,190,32,148,210,154,190,190,190,32,152,150,148,205,205,205,32,160,187,152,206,206,206,32,159,160,152,207,207,207,32,152,148,154,208,208,208,32,152,154,155,209,209,209,32,158,159,152,190,190,190,32,157,158,152,210,210,210,32,152,155,156,211,211,211,32,152,156,157,212,212,212,33,122,156,155,121,90,90,90,90,33,123,157,156,122,91,91,91,91,33,124,158,157,123,92,92,92,92,33,125,159,158,124,93,93,93,93,33,126,160,159,125,94,94,94,94,33,127,161,160,126,95,95,95,95,33,128,162,161,127,96,96,96,96,33,129,163,162,128,97,97,97,97,33,120,154,210,209,104,104,104,104,33,191,195,164,130,106,106,106,106,33,190,194,195,191,107,107,107,107,33,189,193,194,190,108,108,108,108,33,188,192,193,189,109,109,109,109,32,118,119,113,213,213,213,32,113,109,112,214,214,214,32,112,111,110,215,215,215,32,110,205,206,216,216,216,32,110,206,114,217,217,217,32,113,112,110,218,218,218,32,117,118,113,219,219,219,32,116,117,113,220,220,220,32,113,110,114,221,221,221,32,115,116,113,222,222,222,32,113,114,115,223,223,223,32,182,183,173,224,224,224,32,173,172,171,225,225,225,32,171,170,169,226,226,226,32,169,168,167,227,227,227,32,167,166,165,228,228,228,32,165,164,195,229,229,229,32,195,194,193,190,190,190,32,193,192,211,190,190,190,32,211,213,196,190,190,190,32,203,197,198,190,190,190,32,211,196,203,190,190,190,32,195,193,211,190,190,190,32,167,165,195,230,230,230,32,171,169,167,231,231,231,32,182,173,171,232,232,232,32,181,182,171,233,233,233,32,211,203,198,169,169,169,32,211,198,199,190,190,190,32,180,181,171,234,234,234,32,179,180,171,235,235,235,32,195,211,199,190,190,190,32,195,199,200,190,190,190,32,179,171,167,236,236,236,32,178,179,167,237,237,237,32,195,200,201,190,190,190,32,195,201,202,238,238,238,32,177,178,167,233,233,233,32,176,177,167,239,239,239,32,195,202,174,240,240,240,32,175,176,167,241,241,241,32,195,174,175,242,242,242,32,167,195,175,243,243,243,33,204,148,114,206,158,158,158,158,33,211,192,188,212,159,159,159,159,33,92,199,198,91,244,244,244,244]},\"single_double_L_b\":{\"faces\":[32,5,0,1,0,0,0,32,5,1,2,1,1,1,32,3,4,5,2,2,2,32,2,3,5,3,3,3,32,15,6,7,4,4,4,32,7,8,0,5,5,5,32,5,9,10,6,6,6,32,5,10,11,5,5,5,32,11,12,13,7,7,7,32,14,15,7,6,6,6,32,5,11,13,6,6,6,32,14,7,0,8,8,8,32,0,5,13,5,5,5,32,0,13,14,6,6,6,33,1,0,8,16,9,9,9,9,33,17,9,5,4,10,10,10,10,32,20,6,15,11,11,11,32,15,18,19,12,12,12,32,15,19,20,13,13,13,33,21,7,6,20,14,14,14,14,32,8,7,21,15,15,15,32,22,16,8,16,16,16,32,21,22,8,15,15,15,32,30,23,24,15,15,15,32,25,26,27,17,17,17,32,30,24,25,18,18,18,32,29,30,25,19,19,19,32,25,27,10,20,20,20,32,10,9,17,21,21,21,32,28,29,25,22,22,22,32,10,17,28,23,23,23,32,25,10,28,24,24,24,33,27,31,11,10,25,25,25,25,32,11,31,32,26,26,26,32,33,34,35,27,27,27,32,11,32,33,28,28,28,32,39,12,11,11,11,11,32,38,39,11,29,29,29,32,11,33,35,30,30,30,32,11,35,36,31,31,31,32,37,38,11,32,32,32,32,36,37,11,33,33,33,33,40,13,12,39,10,10,10,10,32,43,14,13,34,34,34,32,13,40,41,35,35,35,32,42,43,13,36,36,36,32,13,41,42,37,37,37,33,18,15,14,43,38,38,38,38,33,44,45,24,23,39,39,39,39,32,52,46,47,6,6,6,32,52,47,48,7,7,7,32,50,51,52,6,6,6,32,25,24,45,5,5,5,32,50,52,48,5,5,5,32,33,25,45,5,5,5,32,45,50,48,5,5,5,32,49,34,33,6,6,6,32,45,48,49,6,6,6,32,49,33,45,4,4,4,33,25,33,32,26,40,40,40,40,33,27,26,32,31,6,6,6,6,33,35,34,49,53,41,41,41,41,33,50,45,44,54,42,42,42,42,33,55,46,52,56,43,43,43,43,33,57,47,46,55,11,11,11,11,33,58,48,47,57,44,44,44,44,33,48,58,53,49,45,45,45,45,33,59,51,50,54,46,46,46,46,33,56,52,51,59,47,47,47,47,33,22,21,20,19,48,48,48,48,32,42,2,1,49,49,49,32,1,16,22,50,50,50,32,22,19,18,51,51,51,32,43,42,1,49,49,49,32,22,18,43,52,52,52,32,1,22,43,52,52,52,33,3,2,42,41,53,53,53,53,32,38,28,17,54,54,54,32,4,3,41,55,55,55,32,38,17,4,56,56,56,32,40,39,38,57,57,57,32,4,41,40,58,58,58,32,4,40,38,59,59,59,33,29,28,38,37,60,60,60,60,33,30,29,37,36,61,61,61,61,32,58,57,55,62,62,62,32,55,56,59,63,63,63,32,55,59,54,64,64,64,32,58,55,54,63,63,63,32,44,23,30,65,65,65,32,58,54,44,66,66,66,32,36,35,53,67,67,67,32,53,58,44,68,68,68,32,44,30,36,69,69,69,32,44,36,53,70,70,70],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":60,\"version\":3,\"normals\":71,\"type\":\"Geometry\",\"faces\":95},\"uvs\":[],\"vertices\":[215.75,-0.999999,17.5,33.9362,-0.999999,17.5,44.4325,-0.999999,15.8488,59.6285,-0.999999,11.8704,66.3478,-1,9.49998,215.75,-1,9.49998,215.75,4,19,215.75,-4,19,215.75,-4,17.5,215.75,-4,9.49998,215.75,-4,6,215.75,4,6,215.75,4,9.49998,215.75,1,9.49998,215.75,1,17.5,215.75,4,17.5,33.9362,-4,17.5,66.3479,-4,9.49998,33.9362,4,17.5,28.928,4,18.2878,13.5006,4,19,13.5006,-4,19,28.928,-4,18.2878,109.517,-4,-9.5,215.75,-4,-9.50002,215.75,-4,-6.00003,224.75,-4,-7.50003,224.75,-4,7.50001,74.4451,-4,6.64343,88.8677,-4,0.506304,102.91,-4,-6.18101,224.75,4,7.50001,224.75,4,-7.50003,215.75,4,-6.00003,215.75,4,-9.50002,109.517,4,-9.5,102.91,4,-6.18101,88.8677,4,0.506304,74.4451,4,6.64343,66.3479,4,9.49998,66.3478,1,9.49998,59.6285,1,11.8704,44.4325,1,15.8488,33.9362,1,17.5,109.517,-1,-9.50002,215.75,-1,-9.50002,215.75,4,-19,215.75,4,-17.5,215.75,0.999999,-17.5,215.75,1,-9.50002,215.75,-1,-17.5,215.75,-4,-17.5,215.75,-4,-19,109.517,1,-9.50002,125.443,-1,-17.5,128.429,4,-19,128.429,-4,-19,125.443,4,-17.5,125.443,0.999999,-17.5,125.443,-4,-17.5],\"normals\":[-9.37938e-15,-1,4.47034e-8,-5.25692e-10,-1,3.27564e-8,0,-1,5.02897e-8,-8.61149e-11,-1,4.4618e-8,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,2.09813e-7,0,-1,0,0,1,0,1,0,0,1,0,0,1,0,-1.79183e-7,0,1,0,-1,0,0,-1,0,7.94725e-9,-1,4.76836e-8,0,-1,0,-1.13979e-10,-1,7.10654e-8,-9.93419e-9,-1,5.96045e-8,0,-1,6.81199e-8,-2.00799e-9,-1,3.41297e-8,3.85023e-10,-1,8.45552e-8,2.7141e-10,-1,5.96045e-8,-0.164401,0,0.986394,7.94735e-9,1,-4.76836e-8,-1.1619e-14,1,-6.81199e-8,-9.93406e-9,1,-5.96045e-8,0,1,0,-2.8056e-10,1,-5.96045e-8,1.16538e-9,1,-6.95146e-8,-3.57622e-10,1,-7.85376e-8,-2.0299e-9,1,-3.99147e-8,9.37938e-15,1,-4.47034e-8,0,1,-5.02897e-8,2.73083e-9,1,1.73595e-8,-1.55373e-10,1,-6.05228e-8,2.09813e-7,0,-1,-8.52835e-8,-0.00000301997,-1,-0.164399,0,-0.986394,-8.52835e-8,0.00000301997,-1,3.75988e-15,-1,4.47036e-8,0,0,-1,1.90086e-7,0,1,-3.75988e-15,1,-4.47036e-8,1.90086e-7,0,1,0,-1,0,-0.046112,0,-0.998936,-0.1554,0,-0.987852,-0.155404,0,-0.987851,-0.155404,0,-0.987851,-0.155404,0,-0.987851,-0.253266,0,-0.967397,-0.332687,0,-0.943037,-0.332686,0,-0.943038,-0.332682,-0.00000592237,-0.943039,-0.332687,0.00000592246,-0.943037,-0.332686,0,-0.943038,-0.332685,0,-0.943038,-0.391547,0,-0.920158,-0.42997,0,-0.902843,-0.448904,0,-0.89358,-0.448904,0,-0.89358,-0.448904,0,-0.89358,-0.448857,-0.0000019728,-0.893603,-0.448879,0,-0.893592,-0.448857,0.0000019728,-0.893603,-0.448879,0,-0.893592,-0.448858,0,-0.893603,-0.448858,0,-0.893603]},\"turnout_L_ab\":{\"normals\":[-0.534995,0,-0.844855,0,1,-7.15254e-7,0,1,0,-1.33106e-13,1,-7.15254e-7,0.534997,0,0.844854,0.492898,0,0.870087,0.534996,0,0.844855,0.534996,-0.00000134076,0.844854,0.492896,0,0.870088,0.492896,0,0.870088,0.492895,-0.0000121933,0.870089,0.449609,0,0.893225,0.492896,4.23381e-7,0.870088,0.405239,0,0.914211,0.449609,0,0.893225,0.359893,0,0.932994,0.405239,0,0.914211,0,1,-5.20414e-8,1.86913e-8,1,-8.84035e-9,1.83522e-8,1,-9.80941e-9,0,1,0,0,1,0,0.313679,0,0.949529,0.359893,0,0.932994,1.89574e-8,1,-8.40323e-9,-0.449609,-3.11977e-7,-0.893226,-0.313679,0,-0.949529,0.266711,0,0.963777,0.266711,0,0.963777,0.266711,-2.58757e-7,0.963776,0.313679,0,0.949529,-0.405239,0,-0.914211,6.60659e-15,1,7.8062e-8,0,1,-9.93271e-8,-0.266711,0,-0.963777,0.2191,0,0.975702,0.266711,-1.37002e-7,0.963776,3.938e-8,1,-1.30091e-8,-0.359892,0,-0.932994,0,1,2.60224e-7,1.10969e-9,1,-4.88318e-8,-2.72714e-8,1,9.09603e-8,-1.31009e-13,1,-7.15254e-7,-3.08222e-13,1,-0.00000112597,8.80514e-8,1,-1.26037e-7,0.170958,0,0.985278,0,1,0,-0.313679,0,-0.949529,-2.40551e-9,1,-4.29933e-8,0.40524,3.86662e-7,0.91421,-1.33764e-13,1,-7.15254e-7,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,-5.54426e-7,0.99248,-0.266711,-4.12639e-8,-0.963777,4.73139e-9,1,-4.47193e-8,0.35989,5.74434e-8,0.932995,0,1,-1.30112e-7,-1.36404e-13,1,-7.15254e-7,0.0735638,0,0.99729,0.122409,0,0.99248,0,1,2.03062e-7,-1.6129e-9,1,-4.62117e-8,-3.07239e-8,1,3.41453e-8,0.31368,5.74439e-8,0.949529,-1.05888e-8,1,-5.84156e-8,0,1,0,-2.13936e-13,1,-0.00000110977,-3.87372e-8,1,-7.09508e-7,0.111157,0,0.993803,0.266711,8.61655e-8,0.963776,9.71906e-9,1,4.07343e-8,3.23418e-9,1,-4.84071e-8,0.122409,0,0.99248,-5.97138e-8,1,-0.00000170913,0.111157,0,0.993803,0.2191,2.87219e-8,0.975702,-5.84101e-9,1,-4.27054e-8,1.40761e-8,1,1.02966e-7,0.0735639,0,0.99729,-0.00000123575,1,-0.00000770339,0,1,0,0,1,0,0.170958,0,0.985278,-3.90934e-9,1,-3.45783e-8,1.42861e-8,1,2.34351e-7,0.307795,0,0.951453,-1.00185e-11,1,-0.0000919197,0.122409,0,0.99248,1.79999e-8,1,-4.89166e-8,2.24102e-8,1,6.10201e-7,0,0,1,-0.999982,-0.00591354,-0.00000215972,-1,0,-0.00000224171,-1,0,-0.00000299018,-1,4.66913e-7,-0.00000236763,-1,0,-0.00000224171,-1,-0.0004917,-0.000166424,-1,-1.21638e-7,-0.00000216002,-1,0.00000187029,-0.00000236989,-1,0,-0.00000197688,-0.986871,-0.161509,-0.00000195501,-1,-7.45058e-8,-0.00000217556,-1,0,-0.00000471824,-1,0,-0.00000471824,-1,-7.80839e-7,-0.00000264645,-1,-0.000014135,-2.06411e-9,-1,-0.00000823475,-0.00000196882,0.073564,0,0.99729,-3.49624e-9,1,-5.4909e-8,1.96691e-7,1,0.00000299966,0.164399,0,0.986394,-8.91245e-9,1,-1.05472e-7,0,1,0.000146028,0.164399,0,-0.986394,0.130446,0,0.991455,-1.99086e-9,1,-5.19151e-8,-1,0,-8.34465e-7,-1.32637e-13,1,-1.58947e-7,1.91621e-7,1,-4.47033e-8,3.55853e-8,1,-5.26772e-8,0,1,-2.47157e-7,3.52188e-7,1,-2.38922e-7,-0.00000120976,1,5.95959e-7,-9.91836e-15,1,-1.17193e-7,-8.10064e-8,1,-2.08844e-7,1.52753e-14,1,8.82621e-8,2.48954e-7,1,3.86709e-7,0,1,5.35926e-7,0,1,-9.6863e-8,1.05856e-14,1,-1.00392e-7,-8.25344e-9,1,-1.1189e-7,5.88463e-15,1,-1.12703e-7,-4.21965e-9,1,-1.19186e-7,0,1,-1.19812e-7,-3.1303e-8,1,-1.80408e-7,1.66955e-14,1,-1.86634e-7,-1.03727e-7,1,-5.09395e-7,0,1,-5.35377e-7,1.30068e-14,1,8.20447e-8,0,1,8.20447e-8,0,1,8.468e-8,1.33403e-8,1,1.00908e-7,1.31372e-14,1,1.02221e-7,2.21227e-8,1,1.31325e-7,3.1475e-14,1,1.34606e-7,4.05527e-8,1,1.99315e-7,4.41569e-14,1,2.07382e-7,1.2385e-7,1,4.97849e-7,1.44773e-13,1,5.28872e-7,0,1,8.468e-8,1.80308e-8,1,8.20447e-8,0,1,-1.00392e-7,-1.10875e-8,1,-9.6863e-8,0,1,2.91563e-7,-2.67259e-7,1,1.13876e-7,0,1,-1.5706e-7,2.72506e-9,1,-4.79467e-8,-0.00000185602,1,-0.0000046259,0,0.00000190735,-1,0,0.00000190735,-1,5.28153e-9,1,-0.000117925,7.39862e-7,1,0.00000142195,4.14602e-13,1,0.00000273149,1.60372e-8,1,5.86822e-7,0,1,-0.0000624653,8.87628e-9,1,4.03894e-8,-6.57382e-9,1,-1.34259e-7,-2.03681e-9,1,-1.2143e-7,-7.39573e-9,1,-8.66184e-8,-6.99529e-9,1,-1.04761e-7,-7.9179e-9,1,-8.00333e-8,-5.28777e-8,0.00000254313,-1,-1.08974e-7,0.00000413259,-1,0,-1,0,-8.34472e-7,0.00000624897,-1,0,9.53675e-7,-1,-8.18729e-8,0.00000328117,-1,-9.3102e-8,0.00000380387,-1,-9.13133e-8,0.00000378575,-1,-1.16262e-7,0.00000412526,-1,1.51786e-7,0,1,0,0,1,1.56123e-7,4.43972e-8,1,0,-0.00000254313,1,1.66879e-7,9.12559e-8,1,1.76442e-7,2.05789e-7,1,-3.91239e-7,1,-0.00000231527,-2.03793e-7,1,-9.54707e-7,9.0784e-14,1,-5.35376e-7,1.02216e-7,1,4.07719e-7,-1.53237e-7,1,-7.505e-7,-1.89797e-8,0.999995,0.00322308,0,0.999998,0.00208333,2.45842e-7,1,0.00000124285,1.22457e-7,1,7.05752e-7,5.25106e-8,1,6.4856e-7,8.0761e-8,1,5.69827e-7,-1.6957e-7,0.00000254313,1,1.48022e-7,0,-1,2.17983e-7,1.6241e-14,-1,0,6.35782e-7,-1,1.31085e-7,1.45494e-7,-1,-0.534995,0,-0.844855,0,-1,-5.56309e-7,0,-1,0,-1.03527e-13,-1,-5.56309e-7,0.534997,0,0.844854,0.492898,0,0.870087,0.534996,0,0.844854,0.534996,0.0000019966,0.844855,0.131225,0.963909,0.231645,0.492896,0,0.870088,0.492896,-4.23381e-7,0.870088,0,-1,0,0,-1,1.04083e-7,-3.647e-8,-1,1.94936e-8,-3.75186e-8,-1,1.77451e-8,-0.449609,3.11977e-7,-0.893226,0.266711,0,0.963776,0.266711,2.58757e-7,0.963776,-1.9347e-8,-1,7.46276e-9,1.1011e-14,-1,1.30103e-7,0,-1,0,-0.266711,0,-0.963777,0.266711,1.37002e-7,0.963776,1.5084e-8,-1,7.8714e-8,0,-1,2.60224e-7,2.8864e-8,-1,1.16452e-7,-3.19977e-8,-1,6.16259e-8,-1.01896e-13,-1,-5.56309e-7,2.36734e-7,-1,-7.18125e-8,-1.52284e-13,-1,-5.56309e-7,9.81273e-9,-1,1.24635e-7,-0.313679,-5.54751e-8,-0.949529,-2.53136e-9,-1,4.48976e-8,0.40524,-3.86662e-7,0.91421,-1.04039e-13,-1,-5.56309e-7,0.122409,5.54426e-7,0.99248,-0.266711,4.12639e-8,-0.963777,1.63667e-9,-1,3.86923e-8,0.35989,0,0.932995,-1.06092e-13,-1,-5.56309e-7,0,-1,2.90088e-7,1.92106e-8,-1,1.09802e-7,-4.32961e-8,-1,5.20511e-8,-9.74224e-9,-1,6.59648e-8,0,-1,0,-1.07242e-13,-1,-5.56309e-7,-4.68738e-8,-1,-8.58539e-7,0.266711,8.61655e-8,0.963777,8.41395e-9,-1,1.26981e-7,9.58103e-9,-1,6.0037e-8,-5.02066e-8,-1,-0.00000136709,0.2191,5.74437e-8,0.975702,-3.34753e-9,-1,5.62919e-8,1.27921e-8,-1,1.8233e-7,-0.00000116976,-1,-0.00000679338,5.864e-9,-1,5.18675e-8,1.67279e-8,-1,3.18402e-7,-9.42913e-12,-1,-0.0000865127,0.122409,0,0.99248,3.99992e-9,-1,4.51307e-8,2.45325e-8,-1,7.41195e-7,-1,-4.66916e-7,-0.00000299018,-0.99998,0.00627683,-0.00000216026,-1,0,-0.00000224171,-1,0,-0.00000252327,-1,1.21638e-7,-0.00000216002,-1,0.00049171,-0.000166427,-1,-0.00000187029,-0.00000236988,-1,7.45058e-8,-0.00000217556,-0.987922,0.154949,-0.00000197044,-1,0.0000141341,-2.35883e-9,-1,7.80839e-7,-0.00000264645,-1,0.00000823475,-0.00000196882,-8.05924e-9,-1,4.94066e-8,2.24789e-7,-1,0.00000342818,0,-1,0.000166889,-8.92414e-9,-1,1.05602e-7,1.99086e-9,-1,5.19151e-8,2.14232e-8,-1,1.62827e-7,7.49812e-8,-1,4.47035e-8,1.00344e-7,-1,4.59997e-8,0,-1,-1.34813e-7,2.61591e-7,-1,-1.06041e-7,-0.00000110317,-1,6.23441e-7,-1.32245e-15,-1,-1.56258e-8,-7.42892e-8,-1,-9.96771e-8,2.54588e-14,-1,1.60476e-7,2.08794e-7,-1,4.1078e-7,0,-1,5.35926e-7,0,-1,-1.4902e-8,0,-1,-1.4902e-8,1.3232e-15,-1,-1.5445e-8,-7.08194e-9,-1,-2.53109e-8,2.20674e-15,-1,-2.60084e-8,-1.0423e-8,-1,-4.20219e-8,0,-1,-4.3568e-8,-1.9331e-8,-1,-8.09885e-8,6.95644e-15,-1,-8.48336e-8,-9.86195e-8,-1,-3.91701e-7,0,-1,-4.16404e-7,3.57687e-14,-1,1.64089e-7,0,-1,1.64089e-7,0,-1,1.53964e-7,1.24764e-8,-1,1.6914e-7,3.28429e-14,-1,1.70369e-7,2.50825e-8,-1,2.03366e-7,3.93438e-14,-1,2.07087e-7,3.31813e-8,-1,2.60033e-7,4.96765e-14,-1,2.66633e-7,1.01024e-7,-1,5.03566e-7,1.44773e-13,-1,5.28872e-7,0,-1,1.53964e-7,-6.92811e-8,-1,1.64089e-7,0,-1,-1.5445e-8,-1.70577e-9,-1,-1.4902e-8,0,-1,3.49875e-7,0,-1,-4.83263e-8,-0.00000137124,-1,-0.00000334994,-2.03483e-7,-1,2.1459e-7,2.1323e-8,-1,7.98461e-8,0,-0.00000190735,-1,0,-0.00000190735,-1,0,-0.00000190735,-1,5.2819e-9,-1,-0.000110988,5.32209e-8,-1,7.21506e-7,0,-1,-0.0000555247,6.78512e-7,-1,0.00000139589,3.90214e-13,-1,0.00000257081,1.48673e-8,-1,5.82595e-7,-5.85305e-9,-1,-2.78019e-8,4.98389e-8,-1,6.83276e-7,1.54561e-9,-1,6.05665e-8,-7.37349e-9,-1,-5.97836e-8,2.93828e-9,-1,8.57347e-8,-5.28777e-8,-0.00000254313,-1,0,-9.53675e-7,-1,-1.08974e-7,-0.00000413259,-1,-8.34472e-7,-0.00000624897,-1,-1.24968e-7,-0.0000045063,-1,-8.73688e-8,-0.00000372434,-1,-9.3102e-8,-0.00000380387,-1,-9.0421e-8,-0.00000377672,-1,1.51786e-7,0,1,0,0.00000254313,1,1.56123e-7,-4.43972e-8,1,1.69949e-7,-1.04633e-7,1,-4.0129e-7,-1,-0.00000228251,-1.90005e-8,-0.999994,0.00336321,-1.46658e-8,-1,-1.28124e-7,0,-0.999997,0.00222222,-1.4549e-7,-1,-6.00731e-7,2.4677e-14,-1,-1.45526e-7,1.18362e-7,-1,1.13038e-8,5.601e-8,-1,7.44795e-7,7.87901e-8,-1,6.81307e-7,-2.97261e-8,-1,4.83977e-8,1.57403e-7,-1,9.3758e-7,0.00000204532,-1,0.00000915574,-1.6957e-7,-0.00000254313,1,0,-0.00000127157,-1,2.17983e-7,-1.6241e-14,-1,1.36265e-7,-2.38342e-7,-1],\"uvs\":[],\"vertices\":[125.221,0.999999,-19,122.852,1,-17.5,122.852,4,-17.5,125.221,4,-19,118.077,0.999999,-19,118.976,1,-17.5,125.656,4,-17.5,128.025,4,-19,109.601,0.999999,-19,106.953,1,-17.5,125.656,1,-17.5,128.025,0.999999,-19,109.601,4,-19,106.953,4,-17.5,120.814,0.999999,-14.4335,105.298,4,-19,106.1,4,-17.5,112.105,1,-9.5,110.778,1,-8.74826,93.1735,4,-19,93.8829,4,-17.5,100.475,1,-3.56229,112.105,4,-9.5,110.778,4,-8.74826,81.5995,4,-19,82.2208,4,-17.5,89.9301,1,1.11191,100.475,4,-3.56229,110.376,4,-9.5,70.4871,4,-19,71.0238,4,-17.5,79.1685,1,5.26306,89.9301,4,1.11191,108.935,4,-9.5,99.8334,4,-4.91867,61.7573,4,-19,59.9408,4,-18.3999,60.2138,4,-17.5,68.2164,1,8.88113,79.1685,4,5.26306,89.3559,4,-0.274323,108.935,1,-9.5,99.8334,1,-4.91867,61.7573,0.999999,-19,59.9408,0.999999,-18.3999,56.6889,4,-17.5,65.98,1,9.5,57.0998,1,11.9575,68.2164,4,8.88113,78.663,4,3.85031,89.3559,1,-0.274323,97.6666,1,-9.5,59.7588,0.999999,-19,56.6889,1,-17.5,45.8457,1,14.4846,65.9801,4,9.49999,67.7808,4,7.44529,78.663,1,3.85031,90.4274,1,-9.5,86.2935,1,-7.66759,49.3454,0.999999,-19,49.7212,1,-17.5,34.4812,1,16.4565,60.356,4,9.49999,67.7808,1,7.44529,75.9671,1,-3.68433,90.4274,4,-9.49999,86.2935,4,-7.66759,39.1853,0.999999,-19,39.4837,1,-17.5,26.0211,1,17.5,23.0336,1,17.8685,60.356,1,9.5,65.4578,1,-0.212544,75.9671,4,-3.68433,85.5345,4,-9.49999,29.2218,0.999999,-19,29.4443,1,-17.5,11.5305,1,18.717,26.0211,4,17.5,23.0336,4,17.8685,54.7908,1,2.7394,56.4843,1,9.5,65.4578,4,-0.212545,73.8863,4,-9.49999,23.7784,0.999999,-19,19.4549,0.999999,-18.4667,19.5501,1,-17.5,9.00015,1,19,11.5305,4,18.717,22.9973,4,17.5,54.7908,4,2.7394,43.9918,1,5.16438,44.8542,1,9.5,62.6405,4,-9.49999,23.7784,4,-19,19.4549,4,-18.4667,9.73901,0.999999,-17.7501,9.75129,1,-17.5,9.00015,4,19,11.4707,4,17.5,43.9918,4,5.16438,51.725,4,-9.49999,33.0868,1,7.05653,33.4493,1,9.5,19.4024,4,-19,9.73901,4,-17.7501,9.00004,0.999999,-17.511,9.00004,1,-17.5,8.99996,4,17.5,8.99996,4,19,33.0868,4,7.05653,41.0749,4,-9.49999,22.1021,1,8.41135,22.2093,1,9.5,9.67761,4,-19,9.00004,4,-17.511,0.250036,0.999999,-17.511,0.250036,1,-17.5,0.249963,4,17.5,0.24996,4,19,22.1021,4,8.41135,30.631,4,-9.49999,11.0642,1,9.22555,11.0777,1,9.5,9.00004,4,-19,0.250036,4,-17.511,0.250019,1,-9.50859,0.250039,4,-19,0.25001,4,-6.5,0.250019,4,-9.49998,0.250017,1,-9.5,0.249964,0.999999,17.5,0.249963,1,17.4995,0.249979,1,9.5,0.249979,1,9.49714,0.249979,4,9.49714,0.249993,4,6.5,11.0642,4,9.22555,20.338,4,-9.49999,8.99998,1,9.49714,8.99998,1,9.5,9.25001,4,-8,9.00144,4,-9.49998,8.99998,4,9.49714,9.24999,4,8,10.1443,4,-9.49998,96.412,0.999999,-12.1528,106.298,0.999999,-17.129,110.07,1,-10.0715,120.042,0.999999,-15.7205,8.99996,1,17.4995,11.4568,1,17.2183,22.8865,1,16.3752,34.261,1,14.9723,45.553,1,13.013,56.7352,1,10.502,9.00002,1,-9.50859,10.1317,1,-9.75728,20.2393,1,-10.5029,30.2982,0.999999,-11.7435,40.284,0.999999,-13.4762,50.1728,0.999999,-15.6968,125.221,-1,-19,122.852,-1,-17.5,122.852,-4,-17.5,125.221,-4,-19,118.077,-1,-19,118.976,-1,-17.5,125.656,-4,-17.5,128.025,-4,-19,109.601,-1,-19,106.953,-1,-17.5,125.656,-1,-17.5,128.025,-1,-19,109.601,-4,-19,106.953,-4,-17.5,120.814,-1,-14.4335,120.814,-6.30909e-7,-14.4335,128.025,-8.30516e-7,-19,105.298,-4,-19,106.1,-4,-17.5,110.778,-3.82399e-7,-8.74826,112.105,-1,-9.5,110.778,-1,-8.74826,93.1735,-4,-19,93.8829,-4,-17.5,100.475,-1.55712e-7,-3.56229,100.475,-1,-3.56229,112.105,-4,-9.5,110.778,-4,-8.74826,81.5995,-4,-19,82.2208,-4,-17.5,89.9301,4.8603e-8,1.11191,89.9301,-1,1.11191,100.475,-4,-3.56229,110.376,-4,-9.5,70.4871,-4,-19,71.0238,-4,-17.5,79.1685,2.30056e-7,5.26306,79.1685,-1,5.26306,89.9301,-4,1.11191,108.935,-4,-9.5,99.8334,-4,-4.91867,61.7573,-4,-19,59.9408,-4,-18.3999,60.2138,-4,-17.5,68.2164,3.88207e-7,8.88113,68.2164,-1,8.88113,79.1685,-4,5.26306,89.3559,-4,-0.274322,108.935,-1,-9.5,99.8334,-1,-4.91867,61.7573,-1,-19,59.9408,-1,-18.3999,56.6889,-4,-17.5,57.0998,5.22678e-7,11.9575,65.98,-0.999999,9.5,57.0998,-0.999999,11.9575,68.2164,-4,8.88113,78.663,-4,3.85031,89.3559,-1,-0.274322,97.6666,-1,-9.5,59.7588,-1,-19,56.6889,-1,-17.5,45.8457,6.33144e-7,14.4846,45.8457,-0.999999,14.4846,65.9801,-4,9.49999,67.7808,-4,7.44529,78.663,-1,3.85031,90.4274,-1,-9.5,86.2935,-1,-7.66759,49.3454,-1,-19,49.7212,-1,-17.5,34.4812,7.19338e-7,16.4565,34.4812,-0.999999,16.4565,60.356,-4,9.49999,67.7808,-1,7.44529,75.9671,-1,-3.68433,90.4274,-4,-9.49999,86.2935,-4,-7.66759,39.1853,-1,-19,39.4837,-1,-17.5,23.0336,7.81055e-7,17.8685,26.0211,-0.999998,17.5,23.0336,-0.999999,17.8685,60.356,-0.999999,9.5,65.4578,-1,-0.212544,75.9671,-4,-3.68433,85.5345,-4,-9.49999,29.2218,-1,-19,29.4443,-1,-17.5,11.5305,8.18144e-7,18.717,11.5305,-0.999999,18.717,26.0211,-4,17.5,23.0336,-4,17.8685,54.7908,-1,2.7394,56.4843,-0.999999,9.5,65.4578,-4,-0.212544,73.8863,-4,-9.49999,23.7784,-1,-19,19.4549,-1,-18.4667,19.5501,-1,-17.5,9.00015,8.30515e-7,19,9.00015,-0.999999,19,11.5305,-4,18.717,22.9973,-4,17.5,54.7908,-4,2.7394,43.9918,-1,5.16438,44.8542,-0.999999,9.5,62.6405,-4,-9.49999,23.7784,-4,-19,19.4549,-4,-18.4667,9.73901,-1,-17.7501,9.75129,-1,-17.5,9.00015,-4,19,11.4707,-4,17.5,43.9918,-4,5.16438,51.725,-4,-9.49999,33.0868,-1,7.05653,33.4493,-0.999999,9.5,19.4024,-4,-19,9.73901,-4,-17.7501,9.00004,-1,-17.511,9.00004,-1,-17.5,8.99996,-4,17.5,8.99996,-4,19,33.0868,-4,7.05653,41.0749,-4,-9.49999,22.1021,-1,8.41135,22.2093,-0.999999,9.5,9.67761,-4,-19,9.00004,-4,-17.511,0.250036,-1,-17.511,0.250036,-1,-17.5,0.249963,-4,17.5,0.24996,-4,19,22.1021,-4,8.41135,30.631,-4,-9.49999,11.0642,-1,9.22555,11.0777,-0.999999,9.5,9.00004,-4,-19,0.250036,-4,-17.511,0.250019,-1,-9.50859,0.250039,-4,-19,0.250039,-8.30515e-7,-19,0.25001,-2.84124e-7,-6.5,0.25001,-4,-6.5,0.250019,-4,-9.49998,0.250017,-1,-9.5,0.249964,-0.999998,17.5,0.249963,-0.999999,17.4995,0.249979,-0.999999,9.5,0.249979,-1,9.49714,0.249979,-4,9.49714,0.249993,-4,6.5,0.249993,2.84124e-7,6.5,0.24996,8.30515e-7,19,11.0642,-4,9.22555,20.338,-4,-9.49999,8.99998,-1,9.49714,8.99998,-0.999999,9.5,9.25001,-4,-8,9.25001,-3.49691e-7,-8,9.00144,-4,-9.49998,8.99998,-4,9.49714,9.24999,-4,8,9.24999,3.49691e-7,8,10.1443,-4,-9.49998,96.412,-1,-12.1528,106.298,-1,-17.129,110.07,-1,-10.0715,120.042,-1,-15.7205,8.99996,-0.999999,17.4995,11.4568,-0.999999,17.2183,22.8865,-0.999999,16.3752,34.261,-0.999999,14.9723,45.553,-0.999999,13.013,56.7352,-1,10.502,9.00002,-1,-9.50859,10.1317,-1,-9.75728,20.2393,-1,-10.5029,30.2982,-1,-11.7435,40.284,-1,-13.4762,50.1728,-1,-15.6968],\"faces\":[33,0,1,2,3,0,0,0,0,33,1,0,4,5,1,1,1,1,33,3,2,6,7,2,2,2,2,33,8,9,5,4,3,3,3,3,33,10,11,7,6,4,4,4,4,33,9,8,12,13,5,5,5,5,32,179,11,10,4,4,4,32,10,14,178,6,6,6,32,10,178,179,7,7,7,33,15,16,13,12,2,2,2,2,32,18,182,178,8,8,8,32,178,14,17,9,9,9,32,178,17,18,10,10,10,33,19,20,16,15,2,2,2,2,33,187,182,18,21,11,11,11,11,33,22,23,18,17,12,12,12,12,33,24,25,20,19,2,2,2,2,33,193,187,21,26,13,13,13,13,33,21,18,23,27,14,14,14,14,32,28,23,22,2,2,2,33,29,30,25,24,2,2,2,2,33,199,193,26,31,15,15,15,15,33,26,21,27,32,16,16,16,16,32,28,33,34,17,17,17,32,34,27,23,18,18,18,32,34,23,28,19,19,19,32,29,35,36,2,2,2,32,36,37,30,20,20,20,32,36,30,29,21,21,21,33,207,199,31,38,22,22,22,22,33,31,26,32,39,23,23,23,23,33,34,40,32,27,24,24,24,24,33,41,42,34,33,25,25,25,25,33,43,44,36,35,26,26,26,26,32,36,45,37,2,2,2,32,47,216,207,27,27,27,32,207,38,46,28,28,28,32,207,46,47,29,29,29,33,38,31,39,48,30,30,30,30,33,40,49,39,32,2,2,2,2,33,42,50,40,34,31,31,31,31,32,51,42,41,32,32,32,32,52,44,43,33,33,33,33,45,36,44,53,34,34,34,34,33,225,216,47,54,35,35,35,35,33,46,38,48,55,36,36,36,36,33,49,56,48,39,37,37,37,37,33,50,57,49,40,38,38,38,38,32,51,58,59,39,39,39,32,59,50,42,40,40,40,32,59,42,51,41,41,41,32,52,60,61,42,42,42,32,61,53,44,43,43,43,32,61,44,52,44,44,44,33,234,225,54,62,45,45,45,45,33,55,48,56,63,46,46,46,46,33,57,64,56,49,47,47,47,47,33,59,65,57,50,48,48,48,48,33,66,67,59,58,49,49,49,49,33,68,69,61,60,50,50,50,50,32,71,243,234,51,51,51,32,234,62,70,52,52,52,32,234,70,71,53,53,53,33,63,56,64,72,54,54,54,54,33,65,73,64,57,55,55,55,55,33,65,59,67,74,56,56,56,56,32,75,67,66,57,57,57,33,76,77,69,68,58,58,58,58,33,252,243,71,78,59,59,59,59,33,79,80,71,70,60,60,60,60,32,82,72,64,61,61,61,32,64,73,81,62,62,62,32,64,81,82,63,63,63,33,73,65,74,83,64,64,64,64,33,84,74,67,75,65,65,65,65,32,76,85,86,66,66,66,32,86,87,77,67,67,67,32,86,77,76,68,68,68,33,263,252,78,88,69,69,69,69,33,78,71,80,89,59,59,59,59,32,90,80,79,2,2,2,33,81,73,83,91,70,70,70,70,33,81,92,93,82,71,71,71,71,33,94,83,74,84,72,72,72,72,33,95,96,86,85,73,73,73,73,33,86,97,98,87,74,74,74,74,33,88,78,89,99,75,75,75,75,33,100,89,80,90,2,2,2,2,33,92,81,91,101,76,76,76,76,33,102,91,83,94,77,77,77,77,33,92,103,104,93,78,78,78,78,32,105,96,95,2,2,2,33,97,86,96,106,79,79,79,79,33,97,107,108,98,80,80,80,80,32,100,109,110,81,81,81,32,110,99,89,2,2,2,32,110,89,100,82,82,82,33,103,92,101,111,83,83,83,83,33,112,101,91,102,84,84,84,84,33,103,113,114,104,85,85,85,85,33,115,106,96,105,2,2,2,2,33,107,97,106,116,86,86,86,86,33,107,117,118,108,87,87,87,87,33,119,120,110,109,2,2,2,2,33,113,103,111,121,88,88,88,88,33,122,111,101,112,89,89,89,89,33,113,123,124,114,90,90,90,90,33,125,116,106,115,2,2,2,2,33,117,107,116,126,91,91,91,91,32,127,118,117,92,92,92,32,117,126,128,93,93,93,32,306,129,130,94,94,94,32,306,130,131,95,95,95,32,117,128,305,96,96,96,32,306,131,127,97,97,97,32,127,117,305,98,98,98,32,127,305,306,99,99,99,32,317,120,119,100,100,100,32,132,133,134,101,101,101,32,317,119,132,102,102,102,32,136,137,316,103,103,103,32,135,136,316,104,104,104,32,316,317,132,105,105,105,32,134,135,316,106,106,106,32,132,134,316,107,107,107,33,123,113,121,138,108,108,108,108,33,139,121,111,122,109,109,109,109,33,123,140,141,124,110,110,110,110,33,128,126,116,125,2,2,2,2,33,142,129,306,323,111,111,111,111,33,130,129,142,143,112,112,112,112,33,140,135,134,141,113,113,113,113,33,135,140,144,136,91,91,91,91,33,145,137,136,144,2,2,2,2,33,137,145,327,316,114,114,114,114,33,140,123,138,144,115,115,115,115,33,146,138,121,139,116,116,116,116,33,145,142,323,327,117,117,117,117,32,146,143,142,118,118,118,32,145,144,138,2,2,2,32,146,142,145,119,119,119,32,145,138,146,120,120,120,32,51,147,58,121,121,121,32,148,41,149,122,122,122,32,9,148,149,123,123,123,32,148,51,41,124,124,124,32,148,147,51,125,125,125,32,9,149,5,126,126,126,32,149,150,5,127,127,127,32,5,150,1,128,128,128,32,134,151,141,129,129,129,32,134,133,151,129,129,129,32,124,152,114,130,130,130,32,152,153,114,131,131,131,32,114,153,104,132,132,132,32,153,154,104,133,133,133,32,104,154,93,134,134,134,32,154,155,93,135,135,135,32,93,155,82,136,136,136,32,155,156,82,137,137,137,32,82,156,72,138,138,138,32,118,157,108,139,139,139,32,118,127,157,140,140,140,32,98,158,87,141,141,141,32,158,159,87,142,142,142,32,87,159,77,143,143,143,32,159,160,77,144,144,144,32,77,160,69,145,145,145,32,160,161,69,146,146,146,32,69,161,61,147,147,147,32,161,162,61,148,148,148,32,61,162,53,149,149,149,32,108,158,98,150,150,150,32,108,157,158,151,151,151,32,141,152,124,152,152,152,32,141,151,152,153,153,153,32,14,10,1,154,154,154,32,14,1,150,155,155,155,32,41,17,14,156,156,156,32,14,150,149,157,157,157,32,149,41,14,158,158,158,33,1,10,6,2,91,91,91,91,32,22,17,41,159,159,159,32,41,33,28,160,160,160,32,41,28,22,159,159,159,32,127,131,58,161,161,161,32,58,147,148,162,162,162,32,148,9,53,163,163,163,32,148,53,162,164,164,164,32,157,127,58,165,165,165,32,159,158,157,166,166,166,32,159,157,58,167,167,167,32,58,148,162,168,168,168,32,58,162,161,169,169,169,32,160,159,58,170,170,170,32,58,161,160,171,171,171,32,66,58,131,172,172,172,32,131,130,143,173,173,173,32,146,139,122,174,174,174,32,131,143,146,175,175,175,32,75,66,131,176,176,176,32,102,94,84,20,20,20,32,84,75,131,177,177,177,32,131,146,122,178,178,178,32,112,102,84,2,2,2,32,131,122,112,179,179,179,32,131,112,84,180,180,180,32,45,53,9,181,181,181,32,9,13,16,182,182,182,32,20,25,30,2,2,2,32,9,16,20,183,183,183,32,37,45,9,184,184,184,32,9,20,30,185,185,185,32,9,30,37,186,186,186,32,70,62,54,187,187,187,32,54,47,46,188,188,188,32,46,72,156,189,189,189,32,46,156,155,190,190,190,32,70,54,46,191,191,191,32,133,132,70,192,192,192,32,153,152,151,2,2,2,32,151,133,70,193,193,193,32,70,46,155,194,194,194,32,70,155,154,195,195,195,32,153,151,70,196,196,196,32,154,153,70,197,197,197,33,72,46,55,63,198,198,198,198,32,79,70,132,199,199,199,32,132,119,109,200,200,200,32,100,90,79,2,2,2,32,132,109,100,201,201,201,32,132,100,79,202,202,202,33,163,166,165,164,203,203,203,203,33,167,163,164,168,204,204,204,204,33,166,170,169,165,205,205,205,205,33,171,167,168,172,206,206,206,206,33,173,169,170,174,207,207,207,207,33,172,176,175,171,208,208,208,208,32,173,174,179,4,4,4,32,179,178,177,209,209,209,32,179,177,173,210,210,210,33,180,175,176,181,205,205,205,205,32,178,182,184,8,8,8,32,184,183,177,211,211,211,32,184,177,178,212,212,212,33,185,180,181,186,205,205,205,205,33,187,188,184,182,11,11,11,11,33,189,183,184,190,213,213,213,213,33,191,185,186,192,205,205,205,205,33,193,194,188,187,13,13,13,13,33,188,195,190,184,14,14,14,14,32,196,189,190,214,214,214,33,197,191,192,198,205,205,205,205,33,199,200,194,193,15,15,15,15,33,194,201,195,188,16,16,16,16,32,203,202,196,215,215,215,32,196,190,195,216,216,216,32,196,195,203,217,217,217,32,205,204,197,174,174,174,32,197,198,206,205,205,205,32,197,206,205,174,174,174,33,207,208,200,199,22,22,22,22,33,200,209,201,194,23,23,23,23,33,203,195,201,210,174,174,174,174,33,211,202,203,212,218,218,218,218,33,213,204,205,214,26,26,26,26,32,205,206,215,205,205,205,32,207,216,218,27,27,27,32,217,208,207,219,219,219,32,218,217,207,220,220,220,33,208,219,209,200,30,30,30,30,33,210,201,209,220,221,221,221,221,33,212,203,210,221,31,31,31,31,32,222,211,212,222,222,222,32,223,213,214,223,223,223,33,215,224,214,205,224,224,224,224,33,225,226,218,216,35,35,35,35,33,217,227,219,208,225,225,225,225,33,220,209,219,228,226,226,226,226,33,221,210,220,229,38,38,38,38,32,231,230,222,227,227,227,32,222,212,221,228,228,228,32,222,221,231,229,229,229,32,233,232,223,230,230,230,32,223,214,224,231,231,231,32,223,224,233,232,232,232,33,234,235,226,225,45,45,45,45,33,227,236,228,219,233,233,233,233,33,229,220,228,237,234,234,234,234,33,231,221,229,238,235,235,235,235,33,239,230,231,240,236,236,236,236,33,241,232,233,242,237,237,237,237,32,234,243,245,51,51,51,32,244,235,234,52,52,52,32,245,244,234,238,238,238,33,236,246,237,228,239,239,239,239,33,238,229,237,247,240,240,240,240,33,238,248,240,231,241,241,241,241,32,249,239,240,214,214,214,33,250,241,242,251,242,242,242,242,33,252,253,245,243,59,59,59,59,33,254,244,245,255,60,60,60,60,32,237,246,257,243,243,243,32,257,256,247,244,244,244,32,257,247,237,245,245,245,33,247,258,248,238,64,64,64,64,33,259,249,240,248,246,246,246,246,32,261,260,250,247,247,247,32,250,251,262,248,248,248,32,250,262,261,249,249,249,33,263,264,253,252,69,69,69,69,33,253,265,255,245,59,59,59,59,32,266,254,255,214,214,214,33,256,267,258,247,250,250,250,250,33,256,257,269,268,251,251,251,251,33,270,259,248,258,252,252,252,252,33,271,260,261,272,73,73,73,73,33,261,262,274,273,253,253,253,253,33,264,275,265,253,75,75,75,75,33,276,266,255,265,205,205,205,205,33,268,277,267,256,254,254,254,254,33,278,270,258,267,255,255,255,255,33,268,269,280,279,256,256,256,256,32,281,271,272,214,214,214,33,273,282,272,261,79,79,79,79,33,273,274,284,283,257,257,257,257,32,286,285,276,174,174,174,32,276,265,275,205,205,205,32,276,275,286,247,247,247,33,279,287,277,268,83,83,83,83,33,288,278,267,277,258,258,258,258,33,279,280,290,289,259,259,259,259,33,291,281,272,282,205,205,205,205,33,283,292,282,273,86,86,86,86,33,283,284,294,293,260,260,260,260,33,295,285,286,296,205,205,205,205,33,289,297,287,279,261,261,261,261,33,298,288,277,287,262,262,262,262,33,289,290,300,299,263,263,263,263,33,301,291,282,292,205,205,205,205,33,293,302,292,283,91,91,91,91,32,309,308,307,264,264,264,32,305,304,302,96,96,96,32,293,294,303,265,265,265,32,305,302,293,266,266,266,32,309,307,306,267,267,267,32,305,293,303,268,268,268,32,303,309,306,269,269,269,32,303,306,305,270,270,270,32,295,296,317,100,100,100,32,316,315,314,103,103,103,32,316,314,313,104,104,104,32,310,295,317,271,271,271,32,312,311,310,272,272,272,32,316,313,312,273,273,273,32,310,317,316,274,274,274,32,316,312,310,275,275,275,33,299,318,297,289,108,108,108,108,33,319,298,287,297,276,276,276,276,33,299,300,321,320,277,277,277,277,33,304,301,292,302,205,205,205,205,33,322,323,306,307,111,111,111,111,33,308,324,322,307,205,205,205,205,33,320,321,312,313,278,278,278,278,33,313,314,325,320,91,91,91,91,33,326,325,314,315,279,279,279,279,33,315,316,327,326,114,114,114,114,33,320,325,318,299,115,115,115,115,33,328,319,297,318,280,280,280,280,33,326,327,323,322,117,117,117,117,32,322,324,328,174,174,174,32,318,325,326,281,281,281,32,326,322,328,282,282,282,32,328,318,326,283,283,283,32,222,230,329,284,284,284,32,330,331,211,285,285,285,32,172,331,330,286,286,286,32,330,211,222,287,287,287,32,330,222,329,288,288,288,32,172,168,331,289,289,289,32,331,168,332,290,290,290,32,168,164,332,291,291,291,32,312,321,333,292,292,292,32,312,333,311,293,293,293,32,300,290,334,294,294,294,32,334,290,335,295,295,295,32,290,280,335,296,296,296,32,335,280,336,297,297,297,32,280,269,336,298,298,298,32,336,269,337,299,299,299,32,269,257,337,300,300,300,32,337,257,338,301,301,301,32,257,246,338,302,302,302,32,294,284,339,303,303,303,32,294,339,303,304,304,304,32,274,262,340,305,305,305,32,340,262,341,306,306,306,32,262,251,341,307,307,307,32,341,251,342,308,308,308,32,251,242,342,309,309,309,32,342,242,343,310,310,310,32,242,233,343,311,311,311,32,343,233,344,312,312,312,32,233,224,344,313,313,313,32,284,274,340,314,314,314,32,284,340,339,315,315,315,32,321,300,334,316,316,316,32,321,334,333,317,317,317,32,164,173,177,318,318,318,32,177,183,211,319,319,319,32,177,211,331,320,320,320,32,332,164,177,321,321,321,32,177,331,332,322,322,322,33,164,165,169,173,91,91,91,91,32,211,183,189,323,323,323,32,196,202,211,324,324,324,32,189,196,211,325,325,325,32,230,309,303,326,326,326,32,339,340,341,327,327,327,32,230,303,339,328,328,328,32,330,329,230,329,329,329,32,224,172,330,330,330,330,32,344,224,330,331,331,331,32,330,230,339,332,332,332,32,330,339,341,333,333,333,32,343,344,330,334,334,334,32,330,341,342,335,335,335,32,342,343,330,336,336,336,32,309,230,239,337,337,337,32,249,259,270,20,20,20,32,309,239,249,338,338,338,32,324,308,309,339,339,339,32,298,319,328,2,2,2,32,328,324,309,340,340,340,32,309,249,270,341,341,341,32,278,288,298,2,2,2,32,309,270,278,342,342,342,32,298,328,309,343,343,343,32,278,298,309,344,344,344,32,172,224,215,345,345,345,32,206,198,192,247,247,247,32,172,215,206,346,346,346,32,181,176,172,91,91,91,32,206,192,186,174,174,174,32,186,181,172,347,347,347,32,206,186,172,348,348,348,32,226,235,244,349,349,349,32,244,310,311,350,350,350,32,333,334,335,351,351,351,32,244,311,333,352,352,352,32,218,226,244,353,353,353,32,246,217,218,354,354,354,32,338,246,218,355,355,355,32,244,333,335,356,356,356,32,244,335,336,357,357,357,32,338,218,244,358,358,358,32,244,336,337,359,359,359,32,244,337,338,360,360,360,33,246,236,227,217,361,361,361,361,32,310,244,254,199,199,199,32,266,276,285,2,2,2,32,310,254,266,362,362,362,32,285,295,310,363,363,363,32,266,285,310,364,364,364],\"metadata\":{\"generator\":\"io_three\",\"normals\":365,\"uvs\":0,\"vertices\":345,\"version\":3,\"faces\":464,\"type\":\"Geometry\"}},\"single_double_R_b\":{\"normals\":[-9.37938e-15,-1,4.47034e-8,-5.25692e-10,-1,3.27564e-8,0,-1,5.02897e-8,-8.61149e-11,-1,4.4618e-8,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,2.09813e-7,0,-1,0,0,1,0,1,0,0,1,0,0,1,0,-1.79183e-7,0,1,0,-1,0,0,-1,0,0,-1,0,1.32456e-8,-1,7.94732e-8,0,-1,0,0,-1,1.58948e-7,7.83087e-10,-1,4.47034e-8,-2.21466e-9,-1,6.66544e-8,-8.31618e-10,-1,8.11064e-8,-3.88958e-10,-1,3.79345e-8,-0.1644,0,-0.986394,1.32455e-8,1,-7.94732e-8,-1.22526e-14,1,-7.18348e-8,1.13429e-9,1,-3.32706e-8,-1.66602e-8,1,-2.58908e-7,-4.31597e-9,1,-8.78399e-8,0,1,0,4.58363e-10,1,-4.47034e-8,9.37938e-15,1,-4.47034e-8,0,1,-5.02897e-8,2.73083e-9,1,1.73595e-8,-1.55373e-10,1,-6.05228e-8,2.09813e-7,0,-1,-8.52835e-8,-0.00000301997,-1,-0.164398,0,0.986394,-8.52835e-8,0.00000301997,-1,3.75988e-15,-1,4.47036e-8,0,0,-1,1.90086e-7,0,1,-3.75988e-15,1,-4.47036e-8,1.90086e-7,0,1,0,-1,0,-0.046112,0,-0.998936,-0.1554,0,-0.987852,-0.155404,0,-0.987851,-0.155404,0,-0.987851,-0.155404,0,-0.987851,-0.253266,0,-0.967397,-0.332687,0,-0.943037,-0.332686,0,-0.943038,-0.332682,-0.00000592237,-0.943039,-0.332687,0.00000592246,-0.943037,-0.332686,0,-0.943038,-0.332685,0,-0.943038,-0.391547,0,-0.920158,-0.42997,0,-0.902843,-0.448904,0,-0.89358,-0.448904,0,-0.89358,-0.448904,0,-0.89358,-0.448857,-0.0000019728,-0.893603,-0.448879,0,-0.893592,-0.448857,0.0000019728,-0.893603,-0.448879,0,-0.893592,-0.448858,0,-0.893603,-0.448858,0,-0.893603],\"metadata\":{\"uvs\":0,\"generator\":\"io_three\",\"faces\":95,\"vertices\":60,\"version\":3,\"normals\":72,\"type\":\"Geometry\"},\"uvs\":[],\"vertices\":[215.75,-0.999999,17.5,33.9362,-0.999999,17.5,44.4325,-0.999999,15.8488,59.6285,-0.999999,11.8704,66.3478,-1,9.49998,215.75,-1,9.49998,215.75,4,19,215.75,-4,19,215.75,-4,17.5,215.75,-4,9.49998,215.75,-4,6.5,215.75,4,6.5,215.75,4,9.49998,215.75,1,9.49998,215.75,1,17.5,215.75,4,17.5,33.9362,-4,17.5,66.3479,-4,9.49998,33.9362,4,17.5,28.928,4,18.2878,13.5006,4,19,13.5006,-4,19,28.928,-4,18.2878,109.517,-4,-9.5,215.75,-4,-9.50002,215.75,-4,-6.50003,206.75,-4,-8.00003,206.75,-4,8.00001,74.4451,-4,6.64343,88.8677,-4,0.506304,102.91,-4,-6.18101,206.75,4,8.00001,206.75,4,-8.00003,215.75,4,-6.50003,215.75,4,-9.50002,109.517,4,-9.5,102.91,4,-6.18101,88.8677,4,0.506304,74.4451,4,6.64343,66.3479,4,9.49998,66.3478,1,9.49998,59.6285,1,11.8704,44.4325,1,15.8488,33.9362,1,17.5,109.517,-1,-9.50002,215.75,-1,-9.50002,215.75,4,-19,215.75,4,-17.5,215.75,0.999999,-17.5,215.75,1,-9.50002,215.75,-1,-17.5,215.75,-4,-17.5,215.75,-4,-19,109.517,1,-9.50002,125.443,-1,-17.5,128.429,4,-19,128.429,-4,-19,125.443,4,-17.5,125.443,0.999999,-17.5,125.443,-4,-17.5],\"faces\":[32,5,0,1,0,0,0,32,5,1,2,1,1,1,32,3,4,5,2,2,2,32,2,3,5,3,3,3,32,15,6,7,4,4,4,32,7,8,0,5,5,5,32,5,9,10,6,6,6,32,5,10,11,7,7,7,32,11,12,13,8,8,8,32,14,15,7,6,6,6,32,5,11,13,9,9,9,32,14,7,0,10,10,10,32,0,5,13,5,5,5,32,0,13,14,6,6,6,33,1,0,8,16,11,11,11,11,33,17,9,5,4,12,12,12,12,32,20,6,15,13,13,13,32,15,18,19,14,14,14,32,15,19,20,15,15,15,33,21,7,6,20,16,16,16,16,32,8,7,21,17,17,17,32,22,16,8,18,18,18,32,21,22,8,17,17,17,32,30,23,24,17,17,17,32,24,25,26,19,19,19,32,27,10,9,20,20,20,32,30,24,26,21,21,21,32,27,9,17,22,22,22,32,30,26,27,23,23,23,32,29,30,27,24,24,24,32,27,17,28,25,25,25,32,27,28,29,26,26,26,33,27,31,11,10,27,27,27,27,32,32,33,34,28,28,28,32,34,35,36,29,29,29,32,34,36,37,30,30,30,32,32,34,37,31,31,31,32,38,39,12,15,15,15,32,32,37,38,32,32,32,32,12,11,31,33,33,33,32,31,32,38,34,34,34,32,31,38,12,33,33,33,33,40,13,12,39,12,12,12,12,32,43,14,13,35,35,35,32,13,40,41,36,36,36,32,42,43,13,37,37,37,32,13,41,42,38,38,38,33,18,15,14,43,39,39,39,39,33,44,45,24,23,40,40,40,40,32,52,46,47,6,6,6,32,52,47,48,8,8,8,32,50,51,52,6,6,6,32,25,24,45,5,5,5,32,50,52,48,5,5,5,32,33,25,45,7,7,7,32,45,50,48,5,5,5,32,49,34,33,6,6,6,32,45,48,49,6,6,6,32,49,33,45,8,8,8,33,25,33,32,26,41,41,41,41,33,27,26,32,31,6,6,6,6,33,35,34,49,53,42,42,42,42,33,50,45,44,54,43,43,43,43,33,55,46,52,56,44,44,44,44,33,57,47,46,55,13,13,13,13,33,58,48,47,57,45,45,45,45,33,48,58,53,49,46,46,46,46,33,59,51,50,54,47,47,47,47,33,56,52,51,59,48,48,48,48,33,22,21,20,19,49,49,49,49,32,42,2,1,50,50,50,32,1,16,22,51,51,51,32,22,19,18,52,52,52,32,43,42,1,50,50,50,32,22,18,43,53,53,53,32,1,22,43,53,53,53,33,3,2,42,41,54,54,54,54,32,38,28,17,55,55,55,32,4,3,41,56,56,56,32,38,17,4,57,57,57,32,40,39,38,58,58,58,32,4,41,40,59,59,59,32,4,40,38,60,60,60,33,29,28,38,37,61,61,61,61,33,30,29,37,36,62,62,62,62,32,58,57,55,63,63,63,32,55,56,59,64,64,64,32,55,59,54,65,65,65,32,58,55,54,64,64,64,32,44,23,30,66,66,66,32,58,54,44,67,67,67,32,36,35,53,68,68,68,32,53,58,44,69,69,69,32,44,30,36,70,70,70,32,44,36,53,71,71,71]},\"single_double_R_a\":{\"normals\":[0,0,-1,-1,0,0,-0.0445486,0,-0.999007,0.155718,0,0.987801,-0.155736,0,-0.987799,0.253644,0,0.967297,-0.253664,0,-0.967292,0,1,-4.47035e-8,0,1,-8.46131e-8,-8.14258e-9,1,-7.6445e-8,-5.92875e-9,1,-6.27385e-8,4.72257e-8,1,5.44613e-8,1.1424e-8,1,-1.80965e-8,1.31926e-9,1,-3.11904e-8,2.24156e-9,1,-4.09909e-8,-6.98805e-9,1,-7.05171e-8,-3.75876e-8,1,-1.27014e-7,-3.04131e-10,1,-4.47376e-8,1.89593e-10,1,-4.68631e-8,-1.01887e-9,1,-4.64883e-8,-6.56412e-7,1,-0.00000190795,-3.02055e-9,1,-5.13552e-8,7.1915e-9,1,-2.3228e-8,1.21781e-7,1,3.03618e-7,-5.63625e-8,1,-1.56149e-7,-2.77311e-9,1,-5.12607e-8,-8.77279e-15,1,-6.92356e-8,7.09665e-10,1,-4.05701e-8,-9.60341e-10,1,-4.17442e-8,5.0574e-8,1,7.5841e-8,2.69361e-10,1,-4.56591e-8,0.33301,0,0.942923,0.448878,0,0.893593,-0.333026,0,-0.942918,0.391771,0,0.920063,-0.391782,0,-0.920058,-8.89178e-8,-1,-1.33064e-7,-1.42174e-8,-1,5.6339e-9,-7.54731e-9,-1,1.40254e-9,0,-1,0,0,-1,4.47035e-8,2.21797e-9,-1,4.8377e-8,1.05009e-9,-1,4.25226e-8,9.03344e-9,-1,6.54495e-8,-5.58271e-8,-1,-7.86895e-8,1.46171e-9,-1,4.59577e-8,8.59902e-10,-1,5.76939e-8,3.65253e-9,-1,4.56714e-8,-2.9184e-10,-1,4.68948e-8,2.30254e-9,-1,4.9315e-8,-5.38174e-9,-1,2.74804e-8,1.03396e-9,-1,4.66897e-8,-1.18014e-7,-1,-1.90986e-7,-9.81745e-9,-1,1.57379e-8,2.87717e-8,-1,1.36409e-7,1.56263e-8,-1,7.96536e-8,-1.22058e-9,-1,4.43453e-8,3.30025e-11,-1,3.82077e-8,-0.332928,0,-0.942952,0.430095,0,0.902784,-0.430101,0,-0.902781,0,1,-7.94729e-8,-5.01934e-8,1,-3.0116e-7,-8.21348e-9,1,-1.82217e-7,1.32455e-8,1,-7.94729e-8,1.0537e-8,1,-2.98023e-8,-7.30786e-9,1,-4.63838e-8,0,1,-1.58946e-7,-6.75794e-9,1,-1.474e-7,-4.84757e-8,1,-1.85098e-7,-1.30259e-7,1,-3.46192e-7,9.6865e-8,1,1.57674e-7,8.16515e-9,1,-6.46645e-10,-2.86945e-8,1,-7.76445e-8,1.04077e-8,1,-3.21876e-8,-1.77051e-9,1,-4.9456e-8,7.29561e-9,1,-2.25177e-8,3.50621e-9,1,-4.26538e-8,-9.10971e-9,1,-6.43473e-8,6.73916e-10,1,-4.1367e-8,-4.49661e-14,1,-2.69599e-7,-3.55381e-8,1,-1.12435e-7,-4.28666e-9,1,-6.00129e-8,-3.23615e-9,1,-5.22795e-8,-0.391717,0,-0.920086,0.391771,0,0.920063,-0.430066,0,-0.902798,0.448878,0,0.893593,0.429975,0,0.902841,-0.42997,0,-0.902843,0.391555,0,0.920155,-0.391547,0,-0.920158,-0.430001,0,-0.902829,0.332696,0,0.943034,-0.332685,0,-0.943038,-0.3916,0,-0.920136,0.253277,0,0.967394,-0.253265,0,-0.967397,0.430066,0,0.902798,-0.332758,0,-0.943012,0.155412,0,0.98785,-0.155402,0,-0.987851,0.448882,0,0.893591,-0.448897,0,-0.893584,0.391717,0,0.920086,-0.253347,0,-0.967375,0.0460657,0,0.998938,-0.046112,0,-0.998936,-0.448878,0,-0.893593,-0.3916,0,-0.920136,0,1,0,0,1,0,-2.36216e-8,1,-1.50157e-7,1.39595e-8,1,-6.043e-9,-1.56654e-7,1,-3.64592e-7,0,1,0,1.09466e-7,1,4.17461e-7,2.21095e-8,1,7.66205e-9,-1.31505e-7,1,-3.14528e-7,1.40089e-9,1,-4.54348e-8,0,1,0,4.91841e-13,1,-4.62014e-7,0,1,0,-2.47888e-8,1,-1.5723e-7,4.15281e-8,1,1.61517e-7,-6.39491e-8,1,-2.43856e-7,1.46402e-8,1,-4.54072e-9,1.27928e-8,1,-3.9678e-9,1.46067e-8,1,-4.53034e-9,1.76371e-8,1,-5.47029e-9,1.55706e-8,1,-2.45392e-9,9.77349e-9,1,-2.15644e-8,1.38579e-8,1,-6.30428e-9,1.8977e-8,1,-8.63307e-9,5.40378e-7,1,0.00000114171,1.10852e-7,1,1.94058e-7,1.47634e-7,1,2.74235e-7,-0.430095,0,-0.902784,0.332928,0,0.942952,-0.155468,0,-0.987841,0,0,1,1,0,0,1,0,0,1,0,0,-3.31457e-7,-1,-6.24684e-7,-1.88262e-7,-1,-4.42427e-7,0,-1,0,-2.27477e-7,-1,-5.34224e-7,-3.86217e-7,-1,-7.33696e-7,-1.40089e-9,-1,4.54348e-8,0,-1,0,0,-1,0,5.13143e-8,-1,3.16914e-7,-3.52741e-8,-1,1.09406e-8,1.05839e-7,-1,3.00003e-7,2.75531e-7,-1,6.47057e-7,-3.11412e-8,-1,4.90784e-9,-5.40378e-7,-1,-0.00000114171,1.01484e-7,-1,3.03072e-7,-4.75679e-7,-1,-9.98808e-7,1.21751e-7,-1,2.93853e-7,4.85137e-7,-1,0.00000109554,-0.332758,0,-0.943012,0.430066,0,0.902798,3.44562e-8,-1,1.23883e-7,2.83957e-8,-1,1.80231e-7,0,-1,2.10966e-7,-8.82356e-9,-1,3.00895e-8,-4.0576e-9,-1,2.58022e-8,4.55856e-8,-1,1.52443e-7,4.13213e-15,-1,3.86096e-8,-9.5931e-9,-1,3.79701e-8,-2.76619e-9,-1,3.70459e-8,1.63881e-8,-1,1.03958e-7,2.85255e-8,-1,1.46867e-7,-2.02823e-9,-1,3.42362e-8,-2.30189e-9,-1,3.88556e-8,-9.04764e-9,-1,1.16105e-8,2.20644e-10,-1,5.55663e-8,0.448899,0,0.893583,5.12978e-8,1,1.95629e-7,2.21094e-8,1,7.66165e-9,-6.97694e-7,1,-0.00000150298,-1.82948e-13,1,-3.20504e-7,6.43057e-8,1,9.63576e-8,-1.73545e-8,1,-9.35235e-8,1.34174e-8,1,-1.61139e-7,6.86232e-8,1,1.07456e-7,9.77348e-9,1,-2.15645e-8,-2.30403e-8,1,-1.5742e-7,1.76371e-8,1,-5.47025e-9,-0.391772,0,-0.920062,0.253544,0,0.967324,0,-1,0,-1.97099e-7,-1,-4.6312e-7,-3.44848e-7,-1,-6.51341e-7,6.97664e-9,-1,6.15314e-8,0,-1,0,3.26013e-9,-1,2.98023e-8,2.49208e-7,-1,5.98806e-7,-7.7026e-9,-1,3.61459e-8,0,-1,0,-7.83753e-9,-1,3.38246e-8,3.6667e-8,-1,7.69718e-8,3.52359e-9,-1,2.86417e-8,-2.34658e-8,-1,9.32267e-8,-2.15936e-8,-1,3.51796e-8,1.27388e-8,-1,4.86012e-8,1.67233e-8,-1,4.73654e-8,-0.0457995,0,-0.998951,0.448883,0,0.893591,0,0,-1,0,0,1,0.4301,0,0.902781,-0.333009,0,-0.942923,0.155632,0,0.987815,-0.0446296,0,-0.999004,0.0445486,0,0.999007,-0.448878,0,-0.893593,0.0450295,0,0.998986,-0.430095,0,-0.902784,6.02103e-8,-1,3.81945e-7,1.65579e-7,-1,4.24542e-7,1.88293e-7,-1,5.31219e-7,-7.29038e-8,-1,-2.50245e-7,-3.73577e-8,-1,1.15867e-8,-8.90307e-8,-1,-1.82216e-7,0.391782,0,0.920058,-0.253644,0,-0.967298,9.71375e-9,1,1.11245e-9,1.99288e-8,1,3.85991e-9,-6.64634e-8,1,-1.77353e-7,-3.05372e-15,1,-2.85332e-8,-2.32503e-9,1,-5.29972e-8,9.70114e-9,1,-2.23863e-8,-1.1036e-9,1,-5.03617e-8,-2.15667e-9,1,-4.82755e-8,6.71821e-9,1,-2.22725e-8,-4.92195e-10,1,-4.52564e-8,-3.3872e-10,1,-4.5057e-8,-1.01903e-9,1,-4.96254e-8,-1.78189e-9,1,-4.62517e-8,-2.11519e-9,1,-4.61483e-8,-0.155718,0,-0.987802,0.155736,0,0.987799,0.333026,0,0.942918,0.253664,0,0.967292,-0.164399,0,0.986394,1,0,0,-0.164399,0,-0.986394,5.70813e-7,0,1,5.70813e-7,0,1,1.66789e-7,0,1,1.66789e-7,0,1,1.07023e-7,0,1,1.66789e-7,0,1,1.83594e-7,0,1,1.5088e-7,-3.63846e-7,1,1.26709e-7,0,1,1.83594e-7,0,1],\"metadata\":{\"uvs\":0,\"generator\":\"io_three\",\"faces\":361,\"vertices\":236,\"version\":3,\"normals\":260,\"type\":\"Geometry\"},\"uvs\":[],\"vertices\":[13.5,4,-19,0.25,4,-19,0.25,4,-19,25.072,4,-19.516,13.5,-4,-19,0.25,-4,-19,0.25,-4,-19,31.4168,4,-19,36.8779,4,-19.8609,36.5675,4,-21.3284,25.072,-4,-19.516,31.4168,0.999999,-19,36.8779,0.999999,-19.8609,48.8158,4,-22.9912,48.3715,4,-24.4239,36.5675,-4,-21.3284,48.8158,0.999999,-22.9912,61.1032,4,-27.3307,60.5549,4,-28.7269,48.3715,-4,-24.4239,36.8779,-4,-19.8609,31.4168,-4,-19,61.1032,0.999999,-27.3307,73.7534,4,-32.7173,73.1323,4,-34.0827,60.5549,-4,-28.7269,48.8158,-4,-22.9912,36.8779,-1,-19.8609,31.4168,-1,-19,61.5227,0.999999,-19,64.0275,0.999999,-19.8843,73.7534,0.999999,-32.7173,86.7543,4,-38.911,86.0904,4,-40.2561,73.1323,-4,-34.0827,61.1032,-4,-27.3307,48.8158,-1,-22.9912,61.5227,4,-19,64.0275,4,-19.8843,77.0661,0.999999,-25.4354,86.7543,0.999998,-38.911,86.0904,-4,-40.2561,73.7534,-4,-32.7173,61.1032,-1,-27.3307,77.0661,4,-25.4354,90.2952,0.999999,-31.7373,113.754,4,-52.4739,113.09,4,-53.819,86.7543,-4,-38.911,73.7534,-1,-32.7173,64.0275,-1,-19.8843,61.5227,-1,-19,90.2952,4,-31.7373,113.754,0.999998,-52.4739,127.753,4,-59.141,127.132,4,-60.5063,113.09,-4,-53.819,86.7543,-1,-38.911,77.0661,-1,-25.4354,64.0275,-4,-19.8843,61.5227,-4,-19,117.295,0.999998,-45.3002,127.753,0.999997,-59.141,142.103,4,-65.2472,141.555,4,-66.6434,127.132,-4,-60.5063,113.754,-4,-52.4739,90.2952,-1,-31.7373,77.0661,-4,-25.4354,107.266,4,-19,117.295,4,-45.3002,131.066,0.999998,-51.8591,142.103,0.999997,-65.2472,156.816,4,-70.4378,156.371,4,-71.8705,141.555,-4,-66.6434,127.753,-4,-59.141,113.754,-1,-52.4739,90.2952,-4,-31.7373,107.266,0.999999,-19,125.705,4,-28.2627,131.066,4,-51.8591,145.027,0.999997,-57.8009,156.816,0.999997,-70.4378,171.878,4,-74.3812,171.567,4,-75.8488,156.371,-4,-71.8705,142.103,-4,-65.2472,127.753,-1,-59.141,117.295,-1,-45.3002,125.705,0.999999,-28.2627,138.934,4,-34.5646,145.027,4,-57.8009,159.186,0.999997,-62.7969,171.878,0.999997,-74.3812,187.224,4,-76.7956,187.072,4,-78.2878,171.567,-4,-75.8488,156.816,-4,-70.4378,142.103,-1,-65.2472,131.066,-1,-51.8591,117.295,-4,-45.3002,107.266,-4,-19,125.087,0.999999,-19,129.246,0.999999,-21.089,138.934,0.999999,-34.5646,151.973,4,-40.1157,159.186,4,-62.7969,173.534,0.999997,-66.5545,187.224,0.999997,-76.7956,202.5,4,-77.5,202.5,4,-79,187.072,-4,-78.2878,171.878,-4,-74.3812,156.816,-1,-70.4378,145.027,-1,-57.8009,131.066,-4,-51.8591,125.705,-4,-28.2627,107.266,-1,-19,125.087,4,-19,129.246,4,-21.089,142.247,0.999999,-27.2827,151.973,0.999998,-40.1157,164.814,4,-44.6497,173.534,4,-66.5545,188.036,0.999997,-68.8369,202.5,0.999997,-77.5,215.75,4,-77.5,215.75,4,-79,202.5,-4,-79,187.224,-4,-76.7956,171.878,-1,-74.3812,159.186,-1,-62.7969,145.027,-4,-57.8009,138.934,-4,-34.5646,125.705,-1,-28.2627,128.429,4,-19,129.91,4,-19.7439,142.247,4,-27.2827,154.897,0.999999,-32.6693,164.814,0.999998,-44.6497,177.466,4,-47.9659,188.036,4,-68.8369,202.5,0.999997,-69.5,215.75,0.999997,-77.5,215.75,0.999998,-42.5,215.75,4,-42.5,215.75,4,-41,215.75,-4,-41,215.75,-4,-42.5,215.75,-1,-42.5,215.75,-1,-50.5,215.75,-4,-50.5,215.75,-4,-69.5,215.75,-1,-69.5,215.75,-1,-77.5,215.75,-4,-77.5,215.75,-4,-79,215.75,0.999997,-69.5,215.75,4,-69.5,215.75,4,-50.5,215.75,0.999998,-50.5,202.5,-4,-77.5,187.224,-1,-76.7956,173.534,-1,-66.5545,159.186,-4,-62.7969,151.973,-4,-40.1157,138.934,-1,-34.5646,129.246,-1,-21.089,125.087,-1,-19,128.429,-4,-19,129.91,-4,-19.7439,142.868,4,-25.9173,154.897,4,-32.6693,167.184,0.999998,-37.0088,177.466,0.999998,-47.9659,189.964,4,-49.9349,202.5,4,-69.5,202.5,0.999998,-42.5,202.5,0.999998,-50.5,202.5,4,-42.5,202.5,4,-41,202.5,-4,-41,202.5,-4,-42.5,202.5,-1,-42.5,202.5,-1,-50.5,202.5,-4,-50.5,202.5,-4,-69.5,202.5,-1,-69.5,202.5,-1,-77.5,202.5,4,-50.5,188.036,-1,-68.8369,173.534,-4,-66.5545,164.814,-4,-44.6497,151.973,-1,-40.1157,142.247,-1,-27.2827,129.246,-4,-21.089,125.087,-4,-19,142.868,-4,-25.9173,155.445,4,-31.2731,167.184,4,-37.0088,179.122,0.999998,-40.1391,189.964,0.999998,-49.9349,190.776,0.999998,-41.9762,190.776,4,-41.9762,190.928,4,-40.484,190.928,-4,-40.484,190.776,-4,-41.9762,190.776,-1,-41.9762,189.964,-1,-49.9349,189.964,-4,-49.9349,188.036,-4,-68.8369,177.466,-4,-47.9659,164.814,-1,-44.6497,154.897,-1,-32.6693,142.247,-4,-27.2827,155.445,-4,-31.2731,167.629,4,-35.5761,179.122,4,-40.1391,179.433,4,-38.6716,179.433,-4,-38.6716,179.122,-4,-40.1391,179.122,-1,-40.1391,177.466,-1,-47.9659,167.184,-1,-37.0088,154.897,-4,-32.6693,167.629,-4,-35.5761,167.184,-4,-37.0088,215.75,-4,-53.5,215.75,4,-53.5,215.75,-4,-66.5,215.75,4,-66.5,206.75,4,-68,206.75,4,-52,206.75,-4,-52,206.75,-4,-68],\"faces\":[33,1,0,4,5,0,0,0,0,33,2,1,5,6,1,1,1,1,33,0,3,10,4,2,2,2,2,33,11,12,8,7,3,3,3,3,33,3,9,15,10,4,4,4,4,33,12,16,13,8,5,5,5,5,33,9,14,19,15,6,6,6,6,32,143,158,144,7,7,7,32,144,126,109,8,8,8,32,109,94,83,9,9,9,32,83,72,62,10,10,10,32,62,53,40,11,11,11,32,83,62,40,12,12,12,32,144,109,83,13,13,13,32,125,143,144,14,14,14,32,108,125,144,15,15,15,32,83,40,31,16,16,16,32,108,144,83,17,17,17,32,93,108,83,18,18,18,32,93,83,31,19,19,19,32,82,93,31,20,20,20,32,82,31,22,21,21,21,32,71,82,22,22,22,22,32,71,22,16,23,23,23,32,39,45,61,24,24,24,32,61,71,16,25,25,25,32,12,11,29,26,26,26,32,39,61,16,27,27,27,32,16,12,29,28,28,28,32,29,30,39,29,29,29,32,16,29,39,30,30,30,33,16,22,17,13,31,31,31,31,33,40,53,46,32,32,32,32,32,33,14,18,25,19,33,33,33,33,33,21,20,27,28,3,3,3,3,33,22,31,23,17,34,34,34,34,33,18,24,34,25,35,35,35,35,33,20,26,36,27,5,5,5,5,32,57,77,88,36,36,36,32,88,99,114,37,37,37,32,114,131,163,38,38,38,32,163,189,155,39,39,39,32,155,154,188,40,40,40,32,155,188,191,41,41,41,32,114,163,155,42,42,42,32,57,88,114,43,43,43,32,49,57,114,44,44,44,32,114,155,191,45,45,45,32,114,191,164,46,46,46,32,114,164,132,47,47,47,32,114,132,115,48,48,48,32,49,114,115,49,49,49,32,49,115,100,50,50,50,32,43,49,100,51,51,51,32,89,67,58,52,52,52,32,43,100,89,53,53,53,32,36,43,89,54,54,54,32,89,58,50,55,55,55,32,50,51,28,39,39,39,32,50,28,27,39,39,39,32,36,89,50,56,56,56,32,50,27,36,57,57,57,33,37,38,30,29,58,58,58,58,33,31,40,32,23,59,59,59,59,33,24,33,41,34,60,60,60,60,33,26,35,43,36,31,31,31,31,32,190,160,229,61,61,61,32,190,229,233,62,62,62,32,176,190,233,63,63,63,32,232,231,159,64,64,64,32,176,233,232,65,65,65,32,141,176,232,66,66,66,32,232,159,177,67,67,67,32,177,142,124,68,68,68,32,124,107,92,69,69,69,32,92,81,70,70,70,70,32,92,70,52,71,71,71,32,177,124,92,72,72,72,32,141,232,177,73,73,73,32,123,141,177,74,74,74,32,177,92,52,75,75,75,32,177,52,44,76,76,76,32,106,123,177,77,77,77,32,91,106,177,78,78,78,32,177,44,38,79,79,79,32,38,37,69,80,80,80,32,80,91,177,81,81,81,32,38,69,80,82,82,82,32,177,38,80,83,83,83,33,38,44,39,30,84,84,84,84,33,35,42,49,43,85,85,85,85,33,44,52,45,39,86,86,86,86,33,42,48,57,49,59,59,59,59,33,51,50,59,60,58,58,58,58,33,48,66,77,57,87,87,87,87,33,53,62,54,46,88,88,88,88,33,47,55,65,56,89,89,89,89,33,50,58,68,59,84,84,84,84,33,62,72,63,54,90,90,90,90,33,55,64,75,65,91,91,91,91,33,58,67,78,68,86,86,86,86,33,70,81,71,61,92,92,92,92,33,72,83,73,63,93,93,93,93,33,64,74,86,75,94,94,94,94,33,66,76,88,77,88,88,88,88,33,81,92,82,71,95,95,95,95,33,83,94,84,73,96,96,96,96,33,74,85,97,86,97,97,97,97,33,76,87,99,88,90,90,90,90,33,90,105,91,80,98,98,98,98,33,92,107,93,82,99,99,99,99,33,94,109,95,84,100,100,100,100,33,85,96,112,97,101,101,101,101,33,87,98,114,99,93,93,93,93,33,89,100,116,101,92,92,92,92,33,79,90,80,69,102,102,102,102,33,119,120,104,103,103,103,103,103,33,105,122,106,91,104,104,104,104,33,107,124,108,93,105,105,105,105,33,109,126,110,95,106,106,106,106,33,96,111,129,112,107,107,107,107,33,52,70,61,45,108,108,108,108,33,98,113,131,114,96,96,96,96,33,100,115,133,116,109,109,109,109,32,110,127,128,110,110,110,32,128,111,96,111,111,111,32,96,85,74,112,112,112,32,74,64,55,113,113,113,32,55,47,33,114,114,114,32,110,128,96,115,115,115,32,95,110,96,110,110,110,32,0,1,2,111,111,111,32,7,8,13,116,116,116,32,13,17,23,117,117,117,32,23,32,46,118,118,118,32,13,23,46,119,119,119,32,0,2,7,120,120,120,32,3,0,7,121,121,121,32,84,95,96,122,122,122,32,9,3,7,123,123,123,32,84,96,74,124,124,124,32,14,9,7,125,125,125,32,73,84,74,126,126,126,32,14,7,13,127,127,127,32,63,73,74,128,128,128,32,18,14,13,129,129,129,32,54,63,74,130,130,130,32,24,18,13,131,131,131,32,54,74,55,132,132,132,32,54,55,33,133,133,133,32,24,13,46,134,134,134,32,54,33,24,135,135,135,32,24,46,54,136,136,136,33,120,138,121,104,137,137,137,137,33,122,140,123,106,138,138,138,138,33,124,142,125,108,139,139,139,139,33,126,144,127,110,140,140,140,140,32,145,146,147,141,141,141,32,147,148,149,141,141,141,32,147,149,150,142,142,142,32,145,147,150,143,143,143,32,151,152,228,141,141,141,32,145,150,151,141,141,141,32,229,160,161,143,143,143,32,161,145,151,143,143,143,32,151,228,229,142,142,142,32,151,229,161,141,141,141,33,111,128,157,129,0,0,0,0,32,41,56,65,144,144,144,32,65,75,86,145,145,145,32,86,97,112,39,39,39,32,112,129,157,39,39,39,32,157,156,162,146,146,146,32,157,162,130,39,39,39,32,6,5,4,39,39,39,32,26,20,21,39,39,39,32,42,35,26,147,147,147,32,66,48,42,148,148,148,32,66,42,26,149,149,149,32,21,6,4,39,39,39,32,21,4,10,39,39,39,32,112,157,130,150,150,150,32,21,10,15,39,39,39,32,112,130,113,151,151,151,32,21,15,19,39,39,39,32,86,112,113,150,150,150,32,26,21,19,146,146,146,32,86,113,98,152,152,152,32,26,19,25,153,153,153,32,86,98,87,154,154,154,32,26,25,34,155,155,155,32,86,87,76,156,156,156,32,66,26,34,157,157,157,32,65,86,76,158,158,158,32,76,66,34,159,159,159,32,41,65,76,160,160,160,32,34,41,76,161,161,161,33,113,130,163,131,100,100,100,100,33,115,132,165,133,162,162,162,162,33,117,134,167,135,163,163,163,163,32,167,194,213,164,164,164,32,213,223,209,165,165,165,32,209,185,151,166,166,166,32,151,150,184,40,40,40,32,151,184,208,167,167,167,32,213,209,151,168,168,168,32,135,167,213,169,169,169,32,169,118,135,170,170,170,32,168,169,135,171,171,171,32,135,213,151,172,172,172,32,151,208,222,173,173,173,32,151,222,224,174,174,174,32,195,168,135,175,175,175,32,214,195,135,176,176,176,32,135,151,224,177,177,177,32,224,214,135,178,178,178,33,170,171,137,136,179,179,179,179,32,181,147,146,110,110,110,32,146,180,204,111,111,111,32,204,218,200,180,180,180,32,200,173,138,181,181,181,32,138,120,119,182,182,182,32,119,136,137,183,183,183,32,119,137,172,184,184,184,32,200,138,119,185,185,185,32,181,146,204,115,115,115,32,205,181,204,186,186,186,32,200,119,172,187,187,187,32,200,172,199,188,188,188,32,205,204,200,189,189,189,32,219,205,200,115,115,115,32,200,199,217,190,190,190,32,219,200,217,120,120,120,33,138,173,139,121,191,191,191,191,33,140,175,141,123,192,192,192,192,32,192,211,187,146,146,146,32,187,153,230,193,193,193,32,187,230,235,151,151,151,32,165,192,187,39,39,39,32,116,133,165,194,194,194,32,78,101,116,195,195,195,32,78,116,165,196,196,196,32,165,187,235,197,197,197,32,234,228,152,150,150,150,32,165,235,234,198,198,198,32,68,78,165,199,199,199,32,102,60,59,39,39,39,32,102,59,68,39,39,39,32,117,102,68,200,200,200,32,234,152,186,201,201,201,32,234,186,210,39,39,39,32,117,68,165,202,202,202,32,134,117,165,203,203,203,32,165,234,210,204,204,204,32,165,210,212,205,205,205,32,166,134,165,206,206,206,32,165,212,193,207,207,207,32,193,166,165,208,208,208,33,142,177,143,125,209,209,209,209,33,102,117,135,118,210,210,210,210,33,180,146,145,178,211,211,211,211,33,182,148,147,181,212,212,212,212,33,184,150,149,183,211,211,211,211,33,186,152,151,185,140,140,140,140,33,188,154,153,187,211,211,211,211,33,162,156,155,189,140,140,140,140,33,177,159,158,143,211,211,211,211,33,179,161,160,190,140,140,140,140,33,130,162,189,163,106,106,106,106,33,132,164,192,165,105,105,105,105,33,134,166,194,167,104,104,104,104,33,169,168,196,197,103,103,103,103,33,171,198,172,137,213,213,213,213,33,173,200,174,139,214,214,214,214,33,175,202,176,141,215,215,215,215,33,204,180,178,203,216,216,216,216,33,206,182,181,205,217,217,217,217,33,33,47,56,41,218,218,218,218,33,208,184,183,207,216,216,216,216,33,210,186,185,209,219,219,219,219,33,191,188,187,211,209,209,209,209,33,202,179,190,176,219,219,219,219,33,164,191,211,192,139,139,139,139,33,166,193,213,194,138,138,138,138,33,168,195,215,196,220,220,220,220,32,215,225,227,146,146,146,32,227,221,207,221,221,221,32,207,183,149,39,39,39,32,149,148,182,146,146,146,32,149,182,206,39,39,39,32,196,215,227,222,222,222,32,170,197,196,39,39,39,32,171,170,196,39,39,39,32,207,149,206,150,150,150,32,207,206,220,151,151,151,32,198,171,196,39,39,39,32,216,198,196,223,223,223,32,227,207,220,224,224,224,32,227,220,226,225,225,225,32,216,196,227,226,226,226,32,227,226,216,151,151,151,33,198,216,199,172,227,227,227,227,33,200,218,201,174,228,228,228,228,32,178,145,161,7,7,7,32,161,179,202,111,111,111,32,202,175,140,229,229,229,32,140,122,105,230,230,230,32,105,90,79,231,231,231,32,79,103,104,232,232,232,32,79,104,121,233,233,233,32,140,105,79,234,234,234,32,161,202,140,235,235,235,32,203,178,161,236,236,236,32,201,203,161,237,237,237,32,140,79,121,238,238,238,32,140,121,139,239,239,239,32,201,161,140,240,240,240,32,140,139,174,241,241,241,32,174,201,140,242,242,242,33,218,204,203,201,243,243,243,243,33,220,206,205,219,244,244,244,244,33,222,208,207,221,243,243,243,243,33,212,210,209,223,215,215,215,215,33,193,212,223,213,192,192,192,192,33,195,214,225,215,191,191,191,191,33,216,226,217,199,245,245,245,245,33,226,220,219,217,246,246,246,246,33,224,222,221,227,228,228,228,228,33,214,224,227,225,214,214,214,214,33,67,89,101,78,108,108,108,108,33,230,231,232,235,247,247,247,247,32,159,231,230,143,143,143,32,230,153,154,142,142,142,32,155,156,157,141,141,141,32,155,157,128,142,142,142,32,128,127,144,143,143,143,32,158,159,230,141,141,141,32,155,128,144,141,141,141,32,158,230,154,248,248,248,32,154,155,144,142,142,142,32,154,144,158,141,141,141,33,233,234,235,232,142,142,142,142,33,229,228,234,233,249,249,249,249,32,170,136,119,250,250,250,32,170,119,103,251,251,251,32,169,197,170,251,251,251,32,60,102,118,252,252,252,32,169,170,103,250,250,250,32,51,60,118,253,253,253,32,118,169,103,254,254,254,32,79,69,37,252,252,252,32,118,103,79,254,254,254,32,28,51,118,120,120,120,32,118,79,37,255,255,255,32,118,37,29,253,253,253,32,6,21,28,256,256,256,32,28,118,29,257,257,257,32,11,7,2,256,256,256,32,28,29,11,258,258,258,32,2,6,28,259,259,259,32,11,2,28,256,256,256]},\"slope_curve_b\":{\"normals\":[-0.707107,0,0.707107,-0.707107,0,-0.707107,0.707107,0,-0.707107,0.707107,0,0.707107,-1.18309e-9,-1,4.37736e-8,2.36614e-8,1,-6.62519e-8,-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534995,0,-0.844855,-0.492897,0,-0.870087,-0.449607,0,-0.893226,-0.405241,0,-0.91421,-0.359892,-5.54748e-8,-0.932994,-0.0967965,0.994604,0.0373383,-0.0948477,0.994604,0.0420427,-0.0926707,0.994604,0.0466462,-0.0902702,0.994604,0.0511372,-0.0876521,0.994604,0.0555049,-0.0848231,0.994604,0.0597388,-0.0817895,0.994604,0.0638289,-0.081864,0.994139,0.0706161,0,1,0,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575808,0,0.817585,0.534995,0,0.844855,0.492898,0,0.870087,0.449607,1.14887e-7,0.893226,0.405241,1.7233e-7,0.91421,0.35989,0,0.932995,-0.10954,0.993084,0.0422537,-0.107334,0.993084,0.0475776,-0.104871,0.993084,0.0527873,-0.102154,0.993084,0.0578695,-0.0991912,0.993084,0.062812,-0.0959898,0.993084,0.0676033,-0.0925568,0.993084,0.0722317,-0.0926294,0.992489,0.0799024,-1.08592e-8,1,-1.54259e-7,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449604,0,0.893228,0.405245,0,0.914208,0.35989,0,0.932995,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.689069,0,-0.724696,0.359893,0,0.932994,0.405241,0,0.91421,0.449607,4.96085e-7,0.893226,0.492896,4.96085e-7,0.870088,0.534996,0,0.844855,0.575808,0,0.817585,0.615229,0,0.788348,0.653171,0,0.757211,0.689147,-5.07059e-7,0.724622,0,1,0,-0.689144,0,-0.724624,-0.35989,0,-0.932995,-0.405244,0,-0.914208,-0.449605,0,-0.893227,-0.492901,0,-0.870086,-0.534994,0,-0.844856,-0.0948538,0.994819,0.0365882,-0.0929438,0.994819,0.041199,-0.0908105,0.994819,0.0457101,-0.0884583,0.994819,0.0501109,-0.085893,0.994819,0.0543904,-0.083121,0.994819,0.0585391,-0.0801483,0.994819,0.0625473,-0.0802225,0.994372,0.0691997,0.359893,0,0.932994,0.405241,0,0.91421,0.449608,0,0.893226,0.492896,0,0.870088,0.534996,0,0.844855,0.575808,0,0.817585,0.615229,0,0.788348,0.653171,0,0.757211,0.689147,0,0.724622,-0.102777,0.993914,0.0396451,-0.100708,0.993914,0.0446403,-0.0983964,0.993914,0.0495283,-0.0958475,0.993914,0.0542966,-0.0930675,0.993914,0.058934,-0.0900638,0.993914,0.0634298,-0.0868428,0.993914,0.0677724,-0.0869168,0.99339,0.0749746,1.36475e-7,1,-1.36475e-7,6.41432e-8,1,-2.79935e-7,0,1,0,-0.405242,0,-0.914209,-0.449606,0,-0.893227,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,-0.112134,0.992751,0.0432543,-0.109877,0.992751,0.0487039,-0.107355,0.992751,0.0540368,-0.104574,0.992751,0.0592397,-0.10154,0.992751,0.0642999,-0.0982635,0.992751,0.0692044,-0.0947494,0.992751,0.0739421,-0.0948209,0.992128,0.0817924,-0.449605,0,-0.893227,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-9.63357e-8,1,-9.63357e-8,0.581237,0,0.813734,-0.813734,0,-0.581237,0.707109,0,-0.707105,0.707107,0,-0.707107,0.707108,0,-0.707106,0.707107,0,-0.707107,0.707107,-0.0000216099,-0.707107,0.707109,0.0000081038,-0.707105,0.707107,0,0.707107,0.707092,0.0000107896,-0.707122,0.707109,-0.0000094147,-0.707105,0.707106,0.0000406412,-0.707108,0.313679,0,0.949529,0.266711,0,0.963777,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,0.0735638,0,0.99729,0.111157,0,0.993803,-0.313679,-5.54752e-8,-0.949529,-0.266711,0,-0.963777,-0.2191,0,-0.975702,-0.170958,0,-0.985278,-0.122409,0,-0.99248,-0.0735639,0,-0.99729,0,0,-1,0,1,-4.469e-8,-0.103468,0.994604,0.00763205,-0.102968,0.994604,0.0126997,-0.102221,0.994604,0.0177368,-0.101228,0.994604,0.0227312,-0.0999906,0.994604,0.0276709,-0.0985127,0.994604,0.032544,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.170958,0,-0.985278,-0.122409,0,-0.99248,-0.0735638,0,-0.99729,-0.117089,0.993084,0.00863681,-0.116524,0.993084,0.0143715,-0.115679,0.993084,0.0200718,-0.114555,0.993084,0.0257238,-0.113154,0.993084,0.0313137,-0.111482,0.993084,0.0368282,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,0.0735639,0,0.997291,0.307795,0,0.951453,-0.073564,0,-0.99729,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.2191,0,-0.975702,-0.266711,0,-0.963776,-0.313679,0,-0.949529,0.111157,0,0.993803,0.122409,0,0.99248,0.170958,0,0.985278,0.2191,0,0.975702,0.266711,0,0.963777,0.313679,0,0.949529,0,1,0,-0.101391,0.994819,0.00747886,-0.100902,0.994819,0.0124447,-0.10017,0.994819,0.0173807,-0.0991961,0.994819,0.0222748,-0.0979837,0.994819,0.0271152,-0.0965356,0.994819,0.0318902,-8.87912e-9,1,-1.0507e-7,-0.10986,0.993914,0.00810358,-0.10933,0.993914,0.0134843,-0.108537,0.993914,0.0188327,-0.107482,0.993914,0.0241357,-0.106168,0.993914,0.0293805,-0.104599,0.993914,0.0345546,0.130446,0,0.991455,0.073564,0,0.99729,0.122409,8.61654e-8,0.99248,0.170958,1.43609e-7,0.985278,0.2191,1.43609e-7,0.975702,0.266711,8.61655e-8,0.963777,0.31368,5.74439e-8,0.949529,-0.119863,0.992751,0.00884132,-0.119283,0.992751,0.0147119,-0.118419,0.992751,0.0205473,-0.117268,0.992751,0.0263332,-0.115834,0.992751,0.0320554,-0.114122,0.992751,0.0377007,-0.073564,0,-0.997291,-0.170958,0,-0.985278,-0.266711,0,-0.963777,-0.313679,0,-0.949529,-0.335866,0,-0.94191,1.41633e-7,1,-8.29734e-8,0,0,1,-3.35118e-8,1,-1.52488e-7,1.81322e-7,1,-4.47033e-8,3.51029e-8,1,-5.19632e-8,-0.335866,0,-0.94191,-1.15856e-8,1,-4.44326e-8,-0.214645,0,-0.976692,-5.45142e-9,1,-4.45831e-8,-0.113723,0,-0.993513,0.164399,0,-0.986394,-1,0,-8.34465e-7,0.164399,0,0.986394,-1,0,-0.00000299154,-1,0,-0.00000224443,-1,0,-0.00000299154,-1,0,-0.00000224443,-1,0.0000025017,-0.00000216002,-1,0,-0.00000237009,-1,0.00000157221,-0.00000224443,0,0,0,-1,0,-0.00000197629,-1,0,-0.00000471824,-1,0,-0.00000197629,-1,0,-0.00000471824,-1,-2.98027e-8,-0.00000199615,-1,-0.00000620944,-0.00000264645,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534995,0,-0.844855,-0.449607,-1.1095e-7,-0.893226,-0.405241,-1.66424e-7,-0.91421,-0.359892,0,-0.932994,0.0967965,-0.994604,-0.0373382,0.0948477,-0.994604,-0.0420427,0.0926707,-0.994604,-0.0466462,0.0902702,-0.994604,-0.0511372,0.0876521,-0.994604,-0.0555049,0.0848231,-0.994604,-0.0597388,0.0817895,-0.994604,-0.0638289,0.081864,-0.994139,-0.0706161,9.72248e-9,-1,7.30422e-8,0.575807,0,0.817585,0.534995,0,0.844855,0.449607,0,0.893226,0.405241,1.14887e-7,0.91421,0.35989,5.74434e-8,0.932995,0.10954,-0.993084,-0.0422536,0.107334,-0.993084,-0.0475776,0.104871,-0.993084,-0.0527873,0.102154,-0.993084,-0.0578695,0.0991912,-0.993084,-0.062812,0.0959898,-0.993084,-0.0676033,0.0925568,-0.993084,-0.0722317,0.0926294,-0.992489,-0.0799026,0,-1,0,0.615228,0,0.78835,0.449604,0,0.893228,0.405245,0,0.914208,-0.653173,0,-0.757209,-0.689069,0,-0.724696,0.449607,0,0.893226,0.534996,4.96085e-7,0.844855,0.689147,5.07059e-7,0.724622,-0.35989,0,-0.932995,0.0948538,-0.994819,-0.0365882,0.0929438,-0.994819,-0.041199,0.0908105,-0.994819,-0.0457101,0.0884583,-0.994819,-0.0501109,0.0858926,-0.994819,-0.054391,0.0831207,-0.994819,-0.0585397,0.0801483,-0.994819,-0.0625472,0.0802225,-0.994372,-0.0691997,0.359893,5.51205e-8,0.932994,0.449607,1.10241e-7,0.893226,0.534996,0,0.844854,0.575808,0,0.817585,0.615229,0,0.788348,0.102777,-0.993914,-0.0396451,0.100708,-0.993914,-0.0446403,0.0983964,-0.993914,-0.0495283,0.0958475,-0.993914,-0.0542966,0.0930676,-0.993914,-0.0589341,0.0900638,-0.993914,-0.0634297,0.0868428,-0.993914,-0.0677723,0.0869169,-0.99339,-0.0749746,0,-1,0,-6.23536e-8,-1,6.23536e-8,-1.95847e-8,-1,8.54718e-8,-0.405242,0,-0.914209,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,0.112134,-0.992751,-0.0432545,0.109877,-0.992751,-0.0487042,0.107355,-0.992751,-0.0540368,0.104574,-0.992751,-0.0592397,0.10154,-0.992751,-0.0642999,0.0982633,-0.992751,-0.0692043,0.0947494,-0.992751,-0.0739421,0.0948211,-0.992128,-0.0817925,1.82526e-7,-1,2.65144e-7,-0.449605,0,-0.893227,-0.534994,0,-0.844856,-0.615228,0,-0.788349,0,-1,0,0.581237,0,0.813734,-0.813734,0,-0.581237,0.707107,0.0000216101,-0.707107,0.707109,-0.0000081038,-0.707105,0.707106,-0.0000431584,-0.707108,-0.0311752,-0.999028,0.0311752,0.707108,0.00000802851,-0.707105,0.313679,1.10242e-7,0.949529,0.2191,0,0.975702,0.170958,0,0.985278,0.0735638,0,0.99729,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.122409,0,-0.99248,-0.0735638,0,-0.99729,0,0,-1,0,-1,4.469e-8,0.103468,-0.994604,-0.00763205,0.102968,-0.994604,-0.0126997,0.102221,-0.994604,-0.0177368,0.101228,-0.994604,-0.0227313,0.0999906,-0.994604,-0.0276709,0.0985127,-0.994603,-0.032544,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.122409,0,-0.99248,0.117089,-0.993084,-0.00863679,0.116524,-0.993084,-0.0143715,0.115679,-0.993084,-0.0200718,0.114555,-0.993084,-0.0257238,0.113154,-0.993084,-0.0313137,0.111482,-0.993084,-0.0368282,0.122409,0,0.99248,-0.122409,0,-0.99248,-0.2191,0,-0.975702,-0.266711,0,-0.963776,0.122409,0,0.99248,0.170958,0,0.985278,0.2191,0,0.975702,0,-1,0,0.101391,-0.994819,-0.00747889,0.100902,-0.994819,-0.0124448,0.10017,-0.994819,-0.0173808,0.099196,-0.994819,-0.022275,0.0979836,-0.994819,-0.0271155,0.0965356,-0.994819,-0.0318903,0.10986,-0.993914,-0.00810358,0.10933,-0.993914,-0.0134843,0.108537,-0.993914,-0.0188327,0.107482,-0.993914,-0.0241357,0.106168,-0.993914,-0.0293805,0.104599,-0.993914,-0.0345546,0.122409,0,0.99248,0.170958,0,0.985278,0.2191,2.87219e-8,0.975702,0.266711,8.61655e-8,0.963776,0.31368,5.74439e-8,0.949529,0.119863,-0.992751,-0.00884132,0.119283,-0.992751,-0.0147118,0.118419,-0.992751,-0.0205472,0.117268,-0.992751,-0.0263332,0.115834,-0.992751,-0.0320553,0.114122,-0.992751,-0.0377006,-0.122409,0,-0.99248,2.14232e-8,-1,1.62827e-7,1.0122e-7,-1,4.47036e-8,9.12048e-8,-1,4.57583e-8,-1.15059e-7,-1,4.75413e-8,5.45142e-9,-1,4.45831e-8,-0.113723,0,-0.993512,-8.92414e-9,-1,1.05602e-7,-1,0,-0.00000224443,-1,-0.00000157222,-0.00000224443,-1,-0.0000025017,-0.00000216002,-1,0.00000815845,-0.00000199615,-1,0.00000100553,-0.00000264645],\"metadata\":{\"generator\":\"io_three\",\"normals\":399,\"uvs\":0,\"vertices\":504,\"version\":3,\"faces\":532,\"type\":\"Geometry\"},\"uvs\":[],\"vertices\":[181.019,-4,-24.3741,181.019,12,-24.3741,113.844,-4,-91.5492,113.844,12,-91.5492,191.626,-4,-34.9807,191.626,12,-34.9807,124.451,-4,-102.156,124.451,12,-102.156,156.808,20.5,-42.988,164.932,20.5,-50.7141,156.808,17.5,-42.988,79.1685,8.05,5.26306,89.9301,9.225,1.11191,100.475,10.4,-3.56231,110.778,11.575,-8.74826,120.814,12.75,-14.4335,130.559,13.925,-20.6044,139.989,15.1,-27.246,149.082,16.275,-34.3423,157.816,17.5,-41.8762,165.993,17.5,-49.6531,66.363,8.05,-30.5264,75.3838,9.225,-34.0061,84.223,10.4,-37.9243,92.8594,11.575,-42.2714,101.272,12.75,-47.0371,109.441,13.925,-52.2098,117.346,15.1,-57.7771,124.968,16.275,-63.7256,132.289,17.5,-70.0409,139.115,17.5,-76.5313,78.663,8.05,3.85031,89.3559,9.225,-0.274323,99.8334,10.4,-4.91869,110.07,11.575,-10.0715,120.042,12.75,-15.7205,129.725,13.925,-21.852,139.095,15.1,-28.4512,148.13,16.275,-35.5022,164.932,17.5,-50.7141,75.9671,8.05,-3.68433,86.2935,9.225,-7.66759,96.412,10.4,-12.1528,106.298,11.575,-17.129,115.928,12.75,-22.5844,125.279,13.925,-28.5057,134.328,15.1,-34.8788,143.054,16.275,-41.6881,151.434,17.5,-48.9174,159.274,17.5,-56.3727,69.5643,8.05,-21.5791,79.0204,9.225,-25.2266,88.286,10.4,-29.3338,97.339,11.575,-33.8906,106.157,12.75,-38.8862,114.72,13.925,-44.3084,123.006,15.1,-50.1443,130.997,16.275,-56.3798,138.671,17.5,-62.9997,145.835,17.5,-69.8117,66.8684,8.05,-29.1137,75.958,9.225,-32.6199,84.8645,10.4,-36.5679,93.5667,11.575,-40.9481,102.043,12.75,-45.7501,110.274,13.925,-50.9622,118.239,15.1,-56.5719,125.92,16.275,-62.5657,133.297,17.5,-68.9291,140.176,17.5,-75.4703,78.663,11.05,3.85031,89.3559,12.225,-0.274323,99.8334,13.4,-4.91869,110.07,14.575,-10.0715,120.042,15.75,-15.7205,129.725,16.925,-21.852,139.095,18.1,-28.4512,148.13,19.275,-35.5022,79.1685,11.05,5.26306,89.9301,12.225,1.11191,100.475,13.4,-3.56231,110.778,14.575,-8.74826,120.814,15.75,-14.4335,130.559,16.925,-20.6044,139.989,18.1,-27.246,149.082,19.275,-34.3423,157.816,20.5,-41.8762,165.993,20.5,-49.6531,75.9671,11.05,-3.68433,86.2935,12.225,-7.66759,96.412,13.4,-12.1528,106.298,14.575,-17.129,115.928,15.75,-22.5844,125.279,16.925,-28.5057,134.328,18.1,-34.8788,143.054,19.275,-41.6881,151.434,20.5,-48.9174,159.274,20.5,-56.3727,69.5643,11.05,-21.5791,79.0204,12.225,-25.2266,88.286,13.4,-29.3338,97.339,14.575,-33.8906,106.157,15.75,-38.8862,114.72,16.925,-44.3084,123.006,18.1,-50.1443,130.997,19.275,-56.3798,138.671,20.5,-62.9997,145.835,20.5,-69.8117,66.8684,11.05,-29.1137,75.958,12.225,-32.6199,84.8645,13.4,-36.5679,93.5667,14.575,-40.9481,102.043,15.75,-45.7501,110.274,16.925,-50.9622,118.239,18.1,-56.5719,125.92,19.275,-62.5657,133.297,20.5,-68.9291,140.176,20.5,-75.4703,66.363,11.05,-30.5264,75.3838,12.225,-34.0061,84.223,13.4,-37.9243,92.8594,14.575,-42.2714,101.272,15.75,-47.0371,109.441,16.925,-52.2098,117.346,18.1,-57.7771,124.968,19.275,-63.7256,132.289,20.5,-70.0409,139.115,20.5,-76.5313,164.226,20.5,-64.1488,153.265,20.5,-75.109,156.801,20.5,-58.8455,147.962,20.5,-67.6843,133.998,-37.5119,-77.7434,0.24996,1,19,11.5305,1,18.717,23.0336,2.175,17.8685,34.4812,3.35,16.4565,45.8457,4.525,14.4846,57.0998,5.7,11.9575,68.2164,6.875,8.88113,0.250039,0.999999,-19.0114,9.66539,0.999999,-19.2487,19.3078,2.175,-19.96,28.9038,3.35,-21.1435,38.4301,4.525,-22.7964,47.8638,5.7,-24.9148,57.1823,6.875,-27.4936,0.249963,1,17.4995,11.4568,1,17.2183,22.8865,2.175,16.3752,34.261,3.35,14.9723,45.553,4.525,13.013,56.7352,5.7,10.502,67.7808,6.875,7.44529,0.249979,1,9.49714,11.0642,1,9.22555,22.1021,2.175,8.41135,33.0868,3.35,7.05653,43.9918,4.525,5.16438,54.7908,5.7,2.7394,65.4578,6.875,-0.212545,0.250019,1,-9.50859,10.1317,1,-9.75728,20.2393,2.175,-10.5029,30.2982,3.35,-11.7435,40.284,4.525,-13.4762,50.1728,5.7,-15.6968,59.9408,6.875,-18.3999,0.250036,0.999999,-17.511,9.73901,0.999999,-17.7501,19.4549,2.175,-18.4667,29.124,3.35,-19.6593,38.7229,4.525,-21.3248,48.2284,5.7,-23.4593,57.6178,6.875,-26.0577,0.249963,4,17.4995,11.4568,4,17.2183,22.8865,5.175,16.3752,34.261,6.35,14.9723,45.553,7.525,13.013,56.7352,8.7,10.502,67.7808,9.875,7.44529,0.24996,4,19,11.5305,4,18.717,23.0336,5.175,17.8685,34.4812,6.35,16.4565,45.8457,7.525,14.4846,57.0998,8.7,11.9575,68.2164,9.875,8.88113,0.249979,4,9.49714,11.0642,4,9.22555,22.1021,5.175,8.41135,33.0868,6.35,7.05653,43.9918,7.525,5.16438,54.7908,8.7,2.7394,65.4578,9.875,-0.212545,0.250019,4,-9.50859,10.1317,4,-9.75728,20.2393,5.175,-10.5029,30.2982,6.35,-11.7435,40.284,7.525,-13.4762,50.1728,8.7,-15.6968,59.9408,9.875,-18.3999,0.250036,4,-17.511,9.73901,4,-17.7501,19.4549,5.175,-18.4667,29.124,6.35,-19.6593,38.7229,7.525,-21.3248,48.2284,8.7,-23.4593,57.6178,9.875,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,5.175,-19.96,28.9038,6.35,-21.1435,38.4301,7.525,-22.7964,47.8638,8.7,-24.9148,57.1823,9.875,-27.4936,8.99996,1,17.4995,8.99996,1,19,8.99998,1,9.49714,9.00002,1,-9.50859,9.00004,0.999999,-17.511,9.00004,0.999999,-19.0114,8.99996,4,17.4995,8.99996,4,19,8.99998,4,9.49714,9.00002,4,-9.50859,9.00004,4,-17.511,9.00004,4,-19.0114,9.25001,4,-8,9.24999,4,8,0.249993,4,6.5,0.25001,4,-6.5,192.513,-37.5119,-212.989,79.1685,7.05,5.26306,89.9301,8.225,1.11191,100.475,9.4,-3.56231,110.778,10.575,-8.74826,120.814,11.75,-14.4335,130.559,12.925,-20.6044,139.989,14.1,-27.246,149.082,15.275,-34.3423,157.816,16.5,-41.8762,165.993,16.5,-49.6531,66.363,7.05,-30.5264,75.3838,8.225,-34.0061,84.223,9.4,-37.9243,92.8594,10.575,-42.2714,101.272,11.75,-47.0371,109.441,12.925,-52.2098,117.346,14.1,-57.7771,124.968,15.275,-63.7256,132.289,16.5,-70.0409,139.115,16.5,-76.5313,156.808,12.5,-42.988,164.932,12.5,-50.7141,156.808,15.5,-42.988,79.1685,6.05,5.26306,89.9301,7.225,1.11191,100.475,8.4,-3.56231,110.778,9.575,-8.74826,120.814,10.75,-14.4335,130.559,11.925,-20.6044,139.989,13.1,-27.246,149.082,14.275,-34.3423,157.816,15.5,-41.8762,165.993,15.5,-49.6531,66.363,6.05,-30.5264,75.3838,7.225,-34.0061,84.223,8.4,-37.9243,92.8594,9.575,-42.2714,101.272,10.75,-47.0371,109.441,11.925,-52.2098,117.346,13.1,-57.7771,124.968,14.275,-63.7256,132.289,15.5,-70.0409,139.115,15.5,-76.5313,78.663,6.05,3.85031,89.3559,7.225,-0.274323,99.8334,8.4,-4.91869,110.07,9.575,-10.0715,120.042,10.75,-15.7205,129.725,11.925,-21.852,139.095,13.1,-28.4512,148.13,14.275,-35.5022,164.932,15.5,-50.7141,75.9671,6.05,-3.68433,86.2935,7.225,-7.66759,96.412,8.4,-12.1528,106.298,9.575,-17.129,115.928,10.75,-22.5844,125.279,11.925,-28.5057,134.328,13.1,-34.8788,143.054,14.275,-41.6881,151.434,15.5,-48.9174,159.274,15.5,-56.3727,69.5643,6.05,-21.5791,79.0204,7.225,-25.2266,88.286,8.4,-29.3338,97.339,9.575,-33.8906,106.157,10.75,-38.8862,114.72,11.925,-44.3084,123.006,13.1,-50.1443,130.997,14.275,-56.3798,138.671,15.5,-62.9997,145.835,15.5,-69.8117,66.8684,6.05,-29.1137,75.958,7.225,-32.6199,84.8645,8.4,-36.5679,93.5667,9.575,-40.9481,102.043,10.75,-45.7501,110.274,11.925,-50.9622,118.239,13.1,-56.5719,125.92,14.275,-62.5657,133.297,15.5,-68.9291,140.176,15.5,-75.4703,78.663,3.05,3.85031,89.3559,4.225,-0.274323,99.8334,5.4,-4.91869,110.07,6.575,-10.0715,120.042,7.75,-15.7205,129.725,8.925,-21.852,139.095,10.1,-28.4512,148.13,11.275,-35.5022,79.1685,3.05,5.26306,89.9301,4.225,1.11191,100.475,5.4,-3.56231,110.778,6.575,-8.74826,120.814,7.75,-14.4335,130.559,8.925,-20.6044,139.989,10.1,-27.246,149.082,11.275,-34.3423,157.816,12.5,-41.8762,165.993,12.5,-49.6531,75.9671,3.05,-3.68433,86.2935,4.225,-7.66759,96.412,5.4,-12.1528,106.298,6.575,-17.129,115.928,7.75,-22.5844,125.279,8.925,-28.5057,134.328,10.1,-34.8788,143.054,11.275,-41.6881,151.434,12.5,-48.9174,159.274,12.5,-56.3727,69.5643,3.05,-21.5791,79.0204,4.225,-25.2266,88.286,5.4,-29.3338,97.339,6.575,-33.8906,106.157,7.75,-38.8862,114.72,8.925,-44.3084,123.006,10.1,-50.1443,130.997,11.275,-56.3798,138.671,12.5,-62.9997,145.835,12.5,-69.8117,66.8684,3.05,-29.1137,75.958,4.225,-32.6199,84.8645,5.4,-36.5679,93.5667,6.575,-40.9481,102.043,7.75,-45.7501,110.274,8.925,-50.9622,118.239,10.1,-56.5719,125.92,11.275,-62.5657,133.297,12.5,-68.9291,140.176,12.5,-75.4703,66.363,3.05,-30.5264,75.3838,4.225,-34.0061,84.223,5.4,-37.9243,92.8594,6.575,-42.2714,101.272,7.75,-47.0371,109.441,8.925,-52.2098,117.346,10.1,-57.7771,124.968,11.275,-63.7256,132.289,12.5,-70.0409,139.115,12.5,-76.5313,164.226,12.5,-64.1488,153.265,12.5,-75.109,156.801,12.5,-58.8455,147.962,12.5,-67.6843,164.226,16.5,-64.1488,153.265,16.5,-75.109,156.801,16.5,-58.8455,147.962,16.5,-67.6843,133.998,37.5119,-77.7434,0.24996,8.30516e-7,19,11.5305,8.18144e-7,18.717,23.0336,1.175,17.8685,34.4812,2.35,16.4565,45.8457,3.525,14.4846,57.0998,4.7,11.9575,68.2164,5.875,8.88113,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,1.175,-19.96,28.9038,2.35,-21.1435,38.4301,3.525,-22.7964,47.8638,4.7,-24.9148,57.1823,5.875,-27.4936,0.24996,-0.999999,19,11.5305,-0.999999,18.717,23.0336,0.175001,17.8685,34.4812,1.35,16.4565,45.8457,2.525,14.4846,57.0998,3.7,11.9575,68.2164,4.875,8.88113,0.250039,-1,-19.0114,9.66539,-1,-19.2487,19.3078,0.174999,-19.96,28.9038,1.35,-21.1435,38.4301,2.525,-22.7964,47.8638,3.7,-24.9148,57.1823,4.875,-27.4936,0.249963,-0.999999,17.4995,11.4568,-0.999999,17.2183,22.8865,0.175001,16.3752,34.261,1.35,14.9723,45.553,2.525,13.013,56.7352,3.7,10.502,67.7808,4.875,7.44529,0.249979,-1,9.49714,11.0642,-1,9.22555,22.1021,0.175,8.41135,33.0868,1.35,7.05653,43.9918,2.525,5.16438,54.7908,3.7,2.7394,65.4578,4.875,-0.212545,0.250019,-1,-9.50859,10.1317,-1,-9.75728,20.2393,0.174999,-10.5029,30.2982,1.35,-11.7435,40.284,2.525,-13.4762,50.1728,3.7,-15.6968,59.9408,4.875,-18.3999,0.250036,-1,-17.511,9.73901,-1,-17.7501,19.4549,0.174999,-18.4667,29.124,1.35,-19.6593,38.7229,2.525,-21.3248,48.2284,3.7,-23.4593,57.6178,4.875,-26.0577,0.249963,-4,17.4995,11.4568,-4,17.2183,22.8865,-2.825,16.3752,34.261,-1.65,14.9723,45.553,-0.474999,13.013,56.7352,0.7,10.502,67.7808,1.875,7.44529,0.24996,-4,19,11.5305,-4,18.717,23.0336,-2.825,17.8685,34.4812,-1.65,16.4565,45.8457,-0.474999,14.4846,57.0998,0.7,11.9575,68.2164,1.875,8.88113,0.249979,-4,9.49714,11.0642,-4,9.22555,22.1021,-2.825,8.41135,33.0868,-1.65,7.05653,43.9918,-0.475,5.16438,54.7908,0.7,2.7394,65.4578,1.875,-0.212545,0.250019,-4,-9.50859,10.1317,-4,-9.75728,20.2393,-2.825,-10.5029,30.2982,-1.65,-11.7435,40.284,-0.475001,-13.4762,50.1728,0.699999,-15.6968,59.9408,1.875,-18.3999,0.250036,-4,-17.511,9.73901,-4,-17.7501,19.4549,-2.825,-18.4667,29.124,-1.65,-19.6593,38.7229,-0.475001,-21.3248,48.2284,0.699999,-23.4593,57.6178,1.875,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-2.825,-19.96,28.9038,-1.65,-21.1435,38.4301,-0.475001,-22.7964,47.8638,0.699999,-24.9148,57.1823,1.875,-27.4936,8.99996,8.30516e-7,19,9.00004,-8.31017e-7,-19.0114,8.99996,-0.999999,17.4995,8.99996,-0.999999,19,8.99998,-1,9.49714,9.00002,-1,-9.50859,9.00004,-1,-17.511,9.00004,-1,-19.0114,8.99996,-4,17.4995,8.99996,-4,19,8.99998,-4,9.49714,9.00002,-4,-9.50859,9.00004,-4,-17.511,9.00004,-4,-19.0114,9.25001,-4,-8,9.24999,-4,8,0.249993,-4,6.5,0.25001,-4,-6.5,9.25001,-3.49691e-7,-8,9.24999,3.49691e-7,8,0.249993,2.84124e-7,6.5,0.25001,-2.84124e-7,-6.5,192.513,37.5119,-212.989],\"faces\":[33,0,1,3,2,0,0,0,0,33,2,3,7,6,1,1,1,1,33,6,7,5,4,2,2,2,2,33,1,0,4,5,3,3,3,3,33,4,0,2,6,4,4,4,4,33,7,3,1,5,5,5,5,5,33,10,38,77,8,6,6,6,6,33,38,37,76,77,7,7,7,7,33,37,36,75,76,8,8,8,8,33,36,35,74,75,9,9,9,9,33,35,34,73,74,10,10,10,10,33,34,33,72,73,11,11,11,11,33,33,32,71,72,12,12,12,12,33,32,31,70,71,13,13,13,13,33,41,40,31,32,14,14,14,14,33,42,41,32,33,15,15,15,15,33,43,42,33,34,16,16,16,16,33,44,43,34,35,17,17,17,17,33,45,44,35,36,18,18,18,18,33,46,45,36,37,19,19,19,19,33,47,46,37,38,20,20,20,20,33,48,47,38,10,21,21,21,21,33,49,48,10,39,22,22,22,22,33,51,50,98,99,23,23,23,23,33,48,49,97,96,24,24,24,24,33,47,48,96,95,25,25,25,25,33,46,47,95,94,26,26,26,26,33,45,46,94,93,27,27,27,27,33,44,45,93,92,28,28,28,28,33,43,44,92,91,29,29,29,29,33,42,43,91,90,30,30,30,30,33,41,42,90,89,31,31,31,31,33,40,41,89,88,32,32,32,32,33,61,60,50,51,33,33,33,33,33,62,61,51,52,34,34,34,34,33,63,62,52,53,35,35,35,35,33,64,63,53,54,36,36,36,36,33,65,64,54,55,37,37,37,37,33,66,65,55,56,38,38,38,38,33,67,66,56,57,39,39,39,39,33,68,67,57,58,40,40,40,40,33,69,68,58,59,41,41,41,41,33,68,69,117,116,42,42,42,42,33,67,68,116,115,43,43,43,43,33,66,67,115,114,44,44,44,44,33,65,66,114,113,45,45,45,45,33,64,65,113,112,46,46,46,46,33,63,64,112,111,47,47,47,47,33,62,63,111,110,48,48,48,48,33,61,62,110,109,49,49,49,49,33,60,61,109,108,50,50,50,50,33,250,249,26,27,51,51,51,51,33,251,250,27,28,52,52,52,52,33,252,251,28,29,53,53,53,53,33,253,252,29,30,54,54,54,54,33,234,235,12,11,55,55,55,55,33,235,236,13,12,56,56,56,56,33,236,237,14,13,57,57,57,57,33,237,238,15,14,58,58,58,58,33,238,239,16,15,59,59,59,59,33,239,240,17,16,60,60,60,60,33,240,241,18,17,61,61,61,61,33,241,242,19,18,62,62,62,62,33,242,243,20,19,63,63,63,63,33,86,87,9,8,64,64,64,64,33,10,8,9,39,65,65,65,65,33,245,244,21,22,66,66,66,66,33,246,245,22,23,67,67,67,67,33,247,246,23,24,68,68,68,68,33,248,247,24,25,69,69,69,69,33,249,248,25,26,70,70,70,70,33,71,70,78,79,71,71,71,71,33,72,71,79,80,72,72,72,72,33,73,72,80,81,73,73,73,73,33,74,73,81,82,74,74,74,74,33,75,74,82,83,75,75,75,75,33,76,75,83,84,76,76,76,76,33,77,76,84,85,77,77,77,77,33,8,77,85,86,78,78,78,78,33,11,12,79,78,79,79,79,79,33,12,13,80,79,80,80,80,80,33,13,14,81,80,81,81,81,81,33,14,15,82,81,82,82,82,82,33,15,16,83,82,83,83,83,83,33,16,17,84,83,84,84,84,84,33,17,18,85,84,85,85,85,85,33,18,19,86,85,86,86,86,86,33,19,20,87,86,87,87,87,87,33,99,98,88,89,88,88,88,88,33,100,99,89,90,89,89,89,89,33,101,100,90,91,90,90,90,90,33,102,101,91,92,91,91,91,91,33,103,102,92,93,92,92,92,92,33,104,103,93,94,93,93,93,93,33,105,104,94,95,94,94,94,94,33,106,105,95,96,95,95,95,95,32,131,107,106,96,96,96,32,106,96,97,22,22,22,32,130,131,106,97,97,97,32,106,97,130,98,98,98,33,52,51,99,100,99,99,99,99,33,53,52,100,101,100,100,100,100,33,54,53,101,102,101,101,101,101,33,55,54,102,103,102,102,102,102,33,56,55,103,104,103,103,103,103,33,57,56,104,105,104,104,104,104,33,58,57,105,106,105,105,105,105,33,59,58,106,107,106,106,106,106,33,119,118,108,109,107,107,107,107,33,120,119,109,110,108,108,108,108,33,121,120,110,111,109,109,109,109,33,122,121,111,112,110,110,110,110,33,123,122,112,113,111,111,111,111,33,124,123,113,114,112,112,112,112,33,125,124,114,115,113,113,113,113,33,126,125,115,116,114,114,114,114,33,127,126,116,117,22,22,22,22,33,22,21,118,119,66,66,66,66,33,23,22,119,120,67,67,67,67,33,24,23,120,121,115,115,115,115,33,25,24,121,122,69,69,69,69,33,26,25,122,123,116,116,116,116,33,27,26,123,124,117,117,117,117,33,28,27,124,125,118,118,118,118,33,29,28,125,126,119,119,119,119,33,30,29,126,127,54,54,54,54,33,129,131,130,128,120,120,120,120,33,130,380,378,128,121,121,121,121,33,129,379,381,131,122,122,122,122,33,128,378,379,129,123,123,123,123,32,59,107,131,124,124,124,32,381,253,30,125,125,125,32,30,127,117,2,2,2,32,30,117,69,2,2,2,32,59,131,381,126,126,126,32,381,30,69,127,127,127,32,59,381,69,128,128,128,32,39,9,87,2,2,2,32,87,20,243,129,129,129,32,380,130,97,2,2,2,32,380,97,49,2,2,2,32,39,87,243,130,130,130,32,380,49,39,131,131,131,32,39,243,380,132,132,132,33,139,11,78,188,133,133,133,133,33,138,139,188,187,134,134,134,134,33,137,138,187,186,135,135,135,135,33,136,137,186,185,136,136,136,136,33,135,136,185,184,137,137,137,137,33,134,135,184,183,138,138,138,138,33,218,134,183,224,139,139,139,139,33,31,153,181,70,140,140,140,140,33,153,152,180,181,141,141,141,141,33,152,151,179,180,142,142,142,142,33,151,150,178,179,143,143,143,143,33,150,149,177,178,144,144,144,144,33,149,148,176,177,145,145,145,145,33,217,147,175,223,146,146,146,146,33,219,154,147,217,147,147,147,147,33,156,155,148,149,148,148,148,148,33,157,156,149,150,149,149,149,149,33,158,157,150,151,150,150,150,150,33,159,158,151,152,151,151,151,151,33,160,159,152,153,152,152,152,152,33,40,160,153,31,153,153,153,153,33,50,167,202,98,154,154,154,154,33,167,166,201,202,155,155,155,155,33,166,165,200,201,156,156,156,156,33,165,164,199,200,157,157,157,157,33,164,163,198,199,158,158,158,158,33,163,162,197,198,159,159,159,159,33,220,161,196,226,146,146,146,146,33,221,168,161,220,147,147,147,147,33,170,169,162,163,160,160,160,160,33,171,170,163,164,161,161,161,161,33,172,171,164,165,162,162,162,162,33,173,172,165,166,163,163,163,163,33,174,173,166,167,164,164,164,164,33,60,174,167,50,165,165,165,165,33,174,60,108,209,166,166,166,166,33,173,174,209,208,167,167,167,167,33,172,173,208,207,168,168,168,168,33,171,172,207,206,169,169,169,169,33,170,171,206,205,170,170,170,170,33,169,170,205,204,171,171,171,171,33,221,169,204,227,172,172,172,172,33,482,390,140,222,146,146,146,146,33,392,391,141,142,173,173,173,173,33,393,392,142,143,174,174,174,174,33,394,393,143,144,175,175,175,175,33,395,394,144,145,176,176,176,176,33,396,395,145,146,177,177,177,177,33,244,396,146,21,178,178,178,178,33,481,384,134,218,179,179,179,179,33,384,385,135,134,138,138,138,138,33,385,386,136,135,180,180,180,180,33,386,387,137,136,181,181,181,181,33,387,388,138,137,182,182,182,182,33,388,389,139,138,183,183,183,183,33,389,234,11,139,184,184,184,184,33,223,175,182,224,185,185,185,185,33,177,176,183,184,186,186,186,186,33,178,177,184,185,187,187,187,187,33,179,178,185,186,188,188,188,188,33,180,179,186,187,189,189,189,189,33,181,180,187,188,190,190,190,190,33,70,181,188,78,191,191,191,191,33,226,196,232,229,192,192,192,192,33,198,197,190,191,193,193,193,193,33,199,198,191,192,194,194,194,194,33,200,199,192,193,195,195,195,195,33,201,200,193,194,196,196,196,196,33,202,201,194,195,197,197,197,197,33,98,202,195,88,198,198,198,198,33,219,155,190,225,199,199,199,199,33,155,156,191,190,200,200,200,200,33,156,157,192,191,201,201,201,201,33,157,158,193,192,202,202,202,202,33,158,159,194,193,203,203,203,203,33,159,160,195,194,204,204,204,204,33,160,40,88,195,205,205,205,205,33,228,210,203,227,185,185,185,185,33,212,211,204,205,206,206,206,206,33,213,212,205,206,207,207,207,207,33,214,213,206,207,208,208,208,208,33,215,214,207,208,209,209,209,209,33,216,215,208,209,210,210,210,210,33,118,216,209,108,211,211,211,211,33,222,140,210,228,146,146,146,146,33,142,141,211,212,212,212,212,212,33,143,142,212,213,174,174,174,174,33,144,143,213,214,213,213,213,213,33,145,144,214,215,176,176,176,176,33,146,145,215,216,214,214,214,214,33,21,146,216,118,215,215,215,215,33,141,222,228,211,216,216,216,216,33,211,228,227,204,217,217,217,217,33,154,219,225,189,218,218,218,218,32,197,226,229,219,219,219,32,230,225,190,22,22,22,32,197,229,230,220,220,220,32,197,230,190,221,221,221,33,176,223,224,183,22,22,22,22,33,383,481,218,133,218,218,218,218,33,391,482,222,141,222,222,222,222,33,168,221,227,203,218,218,218,218,33,169,221,220,162,223,223,223,223,33,162,220,226,197,224,224,224,224,33,155,219,217,148,225,225,225,225,33,148,217,223,176,226,226,226,226,33,133,218,224,182,218,218,218,218,33,231,230,500,501,227,227,227,227,33,230,231,189,225,22,22,22,22,33,230,229,499,500,228,228,228,228,33,229,232,502,499,229,229,229,229,32,232,196,161,230,230,230,32,168,203,210,231,231,231,32,502,232,161,232,232,232,32,168,210,140,233,233,233,32,502,161,168,234,234,234,32,140,390,502,235,235,235,32,168,140,502,236,236,236,32,383,133,182,237,237,237,32,182,175,147,238,238,238,32,154,189,231,239,239,239,32,383,182,147,240,240,240,32,154,231,501,241,241,241,32,383,147,154,242,242,242,32,154,501,383,243,243,243,33,256,254,323,284,6,6,6,6,33,284,323,322,283,244,244,244,244,33,283,322,321,282,245,245,245,245,33,282,321,320,281,246,246,246,246,33,281,320,319,280,10,10,10,10,33,280,319,318,279,247,247,247,247,33,279,318,317,278,248,248,248,248,33,278,317,316,277,249,249,249,249,33,287,278,277,286,250,250,250,250,33,288,279,278,287,251,251,251,251,33,289,280,279,288,252,252,252,252,33,290,281,280,289,253,253,253,253,33,291,282,281,290,254,254,254,254,33,292,283,282,291,255,255,255,255,33,293,284,283,292,256,256,256,256,33,294,256,284,293,257,257,257,257,33,295,285,256,294,258,258,258,258,33,297,345,344,296,23,23,23,23,33,294,342,343,295,24,24,24,24,33,293,341,342,294,25,25,25,25,33,292,340,341,293,26,26,26,26,33,291,339,340,292,259,259,259,259,33,290,338,339,291,260,260,260,260,33,289,337,338,290,29,29,29,29,33,288,336,337,289,261,261,261,261,33,287,335,336,288,262,262,262,262,33,286,334,335,287,263,263,263,263,33,307,297,296,306,264,264,264,264,33,308,298,297,307,265,265,265,265,33,309,299,298,308,266,266,266,266,33,310,300,299,309,267,267,267,267,33,311,301,300,310,268,268,268,268,33,312,302,301,311,269,269,269,269,33,313,303,302,312,270,270,270,270,33,314,304,303,313,271,271,271,271,33,315,305,304,314,272,272,272,272,33,314,362,363,315,42,42,42,42,33,313,361,362,314,43,43,43,43,33,312,360,361,313,273,273,273,273,33,311,359,360,312,45,45,45,45,33,310,358,359,311,46,46,46,46,33,309,357,358,310,47,47,47,47,33,308,356,357,309,274,274,274,274,33,307,355,356,308,275,275,275,275,33,306,354,355,307,50,50,50,50,33,250,273,272,249,51,51,51,51,33,251,274,273,250,52,52,52,52,33,252,275,274,251,276,276,276,276,33,253,276,275,252,277,277,277,277,33,234,257,258,235,55,55,55,55,33,235,258,259,236,56,56,56,56,33,236,259,260,237,278,278,278,278,33,237,260,261,238,58,58,58,58,33,238,261,262,239,279,279,279,279,33,239,262,263,240,60,60,60,60,33,240,263,264,241,61,61,61,61,33,241,264,265,242,62,62,62,62,33,242,265,266,243,280,280,280,280,33,332,254,255,333,272,272,272,272,33,256,285,255,254,65,65,65,65,33,245,268,267,244,281,281,281,281,33,246,269,268,245,67,67,67,67,33,247,270,269,246,68,68,68,68,33,248,271,270,247,69,69,69,69,33,249,272,271,248,70,70,70,70,33,317,325,324,316,282,282,282,282,33,318,326,325,317,283,283,283,283,33,319,327,326,318,284,284,284,284,33,320,328,327,319,285,285,285,285,33,321,329,328,320,286,286,286,286,33,322,330,329,321,287,287,287,287,33,323,331,330,322,288,288,288,288,33,254,332,331,323,289,289,289,289,33,257,324,325,258,290,290,290,290,33,258,325,326,259,80,80,80,80,33,259,326,327,260,291,291,291,291,33,260,327,328,261,82,82,82,82,33,261,328,329,262,292,292,292,292,33,262,329,330,263,293,293,293,293,33,263,330,331,264,294,294,294,294,33,264,331,332,265,86,86,86,86,33,265,332,333,266,87,87,87,87,33,345,335,334,344,295,295,295,295,33,346,336,335,345,296,296,296,296,33,347,337,336,346,297,297,297,297,33,348,338,337,347,298,298,298,298,33,349,339,338,348,299,299,299,299,33,350,340,339,349,300,300,300,300,33,351,341,340,350,301,301,301,301,33,352,342,341,351,302,302,302,302,32,352,353,377,303,303,303,32,376,343,342,304,304,304,32,352,377,376,303,303,303,32,376,342,352,305,305,305,33,298,346,345,297,306,306,306,306,33,299,347,346,298,100,100,100,100,33,300,348,347,299,307,307,307,307,33,301,349,348,300,308,308,308,308,33,302,350,349,301,309,309,309,309,33,303,351,350,302,104,104,104,104,33,304,352,351,303,105,105,105,105,33,305,353,352,304,106,106,106,106,33,365,355,354,364,310,310,310,310,33,366,356,355,365,311,311,311,311,33,367,357,356,366,312,312,312,312,33,368,358,357,367,313,313,313,313,33,369,359,358,368,314,314,314,314,33,370,360,359,369,315,315,315,315,33,371,361,360,370,316,316,316,316,33,372,362,361,371,317,317,317,317,33,373,363,362,372,318,318,318,318,33,268,365,364,267,66,66,66,66,33,269,366,365,268,67,67,67,67,33,270,367,366,269,319,319,319,319,33,271,368,367,270,69,69,69,69,33,272,369,368,271,320,320,320,320,33,273,370,369,272,117,117,117,117,33,274,371,370,273,321,321,321,321,33,275,372,371,274,119,119,119,119,33,276,373,372,275,54,54,54,54,33,375,374,376,377,322,322,322,322,33,376,374,378,380,323,323,323,323,33,375,377,381,379,324,324,324,324,33,374,375,379,378,123,123,123,123,32,315,363,373,2,2,2,32,276,253,381,125,125,125,32,315,373,276,2,2,2,32,377,353,305,124,124,124,32,315,276,381,325,325,325,32,381,377,305,126,126,126,32,305,315,381,326,326,326,32,295,343,376,2,2,2,32,380,243,266,327,327,327,32,266,333,255,2,2,2,32,266,255,285,2,2,2,32,295,376,380,2,2,2,32,266,285,295,328,328,328,32,295,380,266,329,329,329,33,403,452,324,257,330,330,330,330,33,402,451,452,403,134,134,134,134,33,401,450,451,402,331,331,331,331,33,400,449,450,401,332,332,332,332,33,399,448,449,400,137,137,137,137,33,398,447,448,399,333,333,333,333,33,484,490,447,398,139,139,139,139,33,277,316,445,417,334,334,334,334,33,417,445,444,416,335,335,335,335,33,416,444,443,415,142,142,142,142,33,415,443,442,414,143,143,143,143,33,414,442,441,413,336,336,336,336,33,413,441,440,412,337,337,337,337,33,483,489,439,411,338,338,338,338,33,485,483,411,418,339,339,339,339,33,420,413,412,419,340,340,340,340,33,421,414,413,420,341,341,341,341,33,422,415,414,421,342,342,342,342,33,423,416,415,422,343,343,343,343,33,424,417,416,423,344,344,344,344,33,286,277,417,424,345,345,345,345,33,296,344,466,431,154,154,154,154,33,431,466,465,430,346,346,346,346,33,430,465,464,429,347,347,347,347,33,429,464,463,428,157,157,157,157,33,428,463,462,427,348,348,348,348,33,427,462,461,426,159,159,159,159,33,486,492,460,425,338,338,338,338,33,487,486,425,432,339,339,339,339,33,434,427,426,433,349,349,349,349,33,435,428,427,434,350,350,350,350,33,436,429,428,435,351,351,351,351,33,437,430,429,436,352,352,352,352,33,438,431,430,437,353,353,353,353,33,306,296,431,438,354,354,354,354,33,438,473,354,306,166,166,166,166,33,437,472,473,438,167,167,167,167,33,436,471,472,437,168,168,168,168,33,435,470,471,436,169,169,169,169,33,434,469,470,435,355,355,355,355,33,433,468,469,434,171,171,171,171,33,487,493,468,433,172,172,172,172,33,482,488,404,390,338,338,338,338,33,392,406,405,391,173,173,173,173,33,393,407,406,392,356,356,356,356,33,394,408,407,393,175,175,175,175,33,395,409,408,394,357,357,357,357,33,396,410,409,395,358,358,358,358,33,244,267,410,396,215,215,215,215,33,481,484,398,384,179,179,179,179,33,384,398,399,385,138,138,138,138,33,385,399,400,386,359,359,359,359,33,386,400,401,387,360,360,360,360,33,387,401,402,388,361,361,361,361,33,388,402,403,389,183,183,183,183,33,389,403,257,234,184,184,184,184,33,489,490,446,439,362,362,362,362,33,441,448,447,440,363,363,363,363,33,442,449,448,441,364,364,364,364,33,443,450,449,442,365,365,365,365,33,444,451,450,443,366,366,366,366,33,445,452,451,444,367,367,367,367,33,316,324,452,445,368,368,368,368,33,492,495,498,460,272,272,272,272,33,462,455,454,461,369,369,369,369,33,463,456,455,462,370,370,370,370,33,464,457,456,463,371,371,371,371,33,465,458,457,464,372,372,372,372,33,466,459,458,465,373,373,373,373,33,344,334,459,466,374,374,374,374,33,485,491,454,419,199,199,199,199,33,419,454,455,420,200,200,200,200,33,420,455,456,421,375,375,375,375,33,421,456,457,422,376,376,376,376,33,422,457,458,423,377,377,377,377,33,423,458,459,424,378,378,378,378,33,424,459,334,286,379,379,379,379,33,494,493,467,474,362,362,362,362,33,476,469,468,475,380,380,380,380,33,477,470,469,476,381,381,381,381,33,478,471,470,477,382,382,382,382,33,479,472,471,478,383,383,383,383,33,480,473,472,479,384,384,384,384,33,364,354,473,480,385,385,385,385,33,488,494,474,404,338,338,338,338,33,406,476,475,405,212,212,212,212,33,407,477,476,406,386,386,386,386,33,408,478,477,407,213,213,213,213,33,409,479,478,408,176,176,176,176,33,410,480,479,409,358,358,358,358,33,267,364,480,410,215,215,215,215,33,405,475,494,488,216,216,216,216,33,475,468,493,494,272,272,272,272,33,418,453,491,485,218,218,218,218,32,454,491,496,387,387,387,32,495,492,461,272,272,272,32,454,496,495,388,388,388,32,461,454,495,389,389,389,33,440,447,490,489,272,272,272,272,33,383,397,484,481,218,218,218,218,33,391,405,488,482,222,222,222,222,33,432,467,493,487,218,218,218,218,33,433,426,486,487,390,390,390,390,33,426,461,492,486,224,224,224,224,33,419,412,483,485,391,391,391,391,33,412,440,489,483,392,392,392,392,33,397,446,490,484,218,218,218,218,33,497,501,500,496,227,227,227,227,33,496,491,453,497,393,393,393,393,33,496,500,499,495,228,228,228,228,33,495,499,502,498,229,229,229,229,32,425,460,498,230,230,230,32,502,390,404,235,235,235,32,404,474,467,233,233,233,32,404,467,432,394,394,394,32,425,498,502,232,232,232,32,502,404,432,395,395,395,32,502,432,425,396,396,396,32,446,397,383,237,237,237,32,501,497,453,241,241,241,32,501,453,418,239,239,239,32,439,446,383,240,240,240,32,501,418,411,397,397,397,32,411,439,383,238,238,238,32,383,501,411,398,398,398]},\"eight_L_ab\":{\"uvs\":[],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":301,\"version\":3,\"normals\":326,\"type\":\"Geometry\",\"faces\":422},\"faces\":[33,44,0,2,8,0,0,0,0,33,8,7,43,44,1,1,1,1,33,7,6,42,43,2,2,2,2,33,6,5,41,42,3,3,3,3,33,5,4,40,41,4,4,4,4,33,4,3,39,40,5,5,5,5,33,3,131,133,39,6,6,6,6,33,149,89,90,150,7,7,7,7,33,144,84,85,145,8,8,8,8,33,146,86,87,147,9,9,9,9,33,20,19,62,63,10,10,10,10,33,17,18,61,60,11,11,11,11,33,16,17,60,59,12,12,12,12,33,15,16,59,58,13,13,13,13,33,14,15,58,57,14,14,14,14,33,13,14,57,56,15,15,15,15,33,12,13,56,55,16,16,16,16,33,11,12,55,54,17,17,17,17,33,10,11,54,53,18,18,18,18,33,258,116,82,142,19,19,19,19,33,37,38,81,80,20,20,20,20,33,36,37,80,79,21,21,21,21,33,35,36,79,78,22,22,22,22,33,34,35,78,77,23,23,23,23,33,33,34,77,76,24,24,24,24,33,32,33,76,75,25,25,25,25,33,31,32,75,74,26,26,26,26,33,30,31,74,73,27,27,27,27,33,29,30,73,72,28,28,28,28,32,98,130,128,29,29,29,32,128,127,96,30,30,30,32,96,97,19,31,31,31,32,19,20,21,32,32,32,32,21,22,23,33,33,33,32,23,24,25,34,34,34,32,25,26,27,35,35,35,32,27,28,38,36,36,36,32,27,38,37,37,37,37,32,23,25,27,38,38,38,32,19,21,23,39,39,39,32,128,96,19,40,40,40,32,99,98,128,41,41,41,32,100,99,128,42,42,42,32,128,19,23,43,43,43,32,23,27,37,44,44,44,32,23,37,36,45,45,45,32,101,100,128,46,46,46,32,102,101,128,47,47,47,32,23,36,35,48,48,48,32,23,35,34,49,49,49,32,102,128,23,50,50,50,32,29,102,23,51,51,51,32,23,34,33,52,52,52,32,23,33,32,53,53,53,32,30,29,23,54,54,54,32,23,32,31,55,55,55,32,23,31,30,56,56,56,33,252,110,117,280,57,57,57,57,33,140,51,50,139,58,58,58,58,33,147,87,88,148,59,59,59,59,33,138,49,48,137,60,60,60,60,33,145,85,86,146,61,61,61,61,33,141,52,51,140,62,62,62,62,33,256,114,115,257,63,63,63,63,33,254,112,113,255,64,64,64,64,33,2,0,1,9,65,65,65,65,33,136,47,46,135,66,66,66,66,33,148,88,89,149,67,67,67,67,33,142,82,83,143,68,68,68,68,33,143,83,84,144,69,69,69,69,32,103,126,125,70,70,70,32,121,122,53,71,71,71,32,103,125,121,72,72,72,32,104,103,121,73,73,73,32,121,53,54,74,74,74,32,54,55,56,75,75,75,32,56,57,58,76,76,76,32,58,59,60,77,77,77,32,60,61,94,78,78,78,32,94,92,93,79,79,79,32,95,71,70,80,80,80,32,94,93,95,81,81,81,32,58,60,94,82,82,82,32,54,56,58,83,83,83,32,104,121,54,84,84,84,32,62,104,54,85,85,85,32,54,58,94,86,86,86,32,94,95,70,87,87,87,32,94,70,69,88,88,88,32,63,62,54,89,89,89,32,64,63,54,90,90,90,32,54,94,69,91,91,91,32,54,69,68,92,92,92,32,65,64,54,93,93,93,32,66,65,54,94,94,94,32,54,68,67,95,95,95,32,54,67,66,96,96,96,33,150,90,91,151,97,97,97,97,33,21,20,63,64,98,98,98,98,33,22,21,64,65,99,99,99,99,33,23,22,65,66,100,100,100,100,33,24,23,66,67,101,101,101,101,33,25,24,67,68,102,102,102,102,33,26,25,68,69,103,103,103,103,33,27,26,69,70,104,104,104,104,33,28,27,70,71,105,105,105,105,33,132,299,134,45,106,106,106,106,32,10,123,124,107,107,107,32,124,131,3,108,108,108,32,3,4,5,109,109,109,32,5,6,7,110,110,110,32,7,8,2,111,111,111,32,2,9,18,112,112,112,32,2,18,17,113,113,113,32,5,7,2,114,114,114,32,124,3,5,115,115,115,32,11,10,124,116,116,116,32,12,11,124,117,117,117,32,124,5,2,118,118,118,32,2,17,16,119,119,119,32,2,16,15,120,120,120,32,12,124,2,121,121,121,32,13,12,2,122,122,122,32,2,15,14,123,123,123,32,14,13,2,124,124,124,33,94,250,248,92,125,125,125,125,33,93,249,251,95,126,126,126,126,33,92,248,249,93,127,127,127,127,32,28,71,95,128,128,128,32,151,91,81,129,129,129,32,151,81,38,129,129,129,32,28,95,251,130,130,130,32,151,38,28,131,131,131,32,28,251,151,132,132,132,32,9,1,52,129,129,129,32,250,94,61,129,129,129,32,250,61,18,129,129,129,32,9,52,141,133,133,133,32,250,18,9,134,134,134,32,9,141,250,135,135,135,33,19,97,104,62,136,136,136,136,33,97,96,103,104,137,137,137,137,33,96,127,126,103,138,138,138,138,33,253,111,112,254,139,139,139,139,33,102,29,72,109,140,140,140,140,33,101,102,109,108,141,141,141,141,33,100,101,108,107,142,142,142,142,33,99,100,107,106,143,143,143,143,33,98,99,106,105,144,144,144,144,33,257,115,116,258,145,145,145,145,33,139,50,49,138,146,146,146,146,33,137,48,47,136,147,147,147,147,32,112,111,117,148,148,148,32,117,110,119,149,149,149,32,118,129,105,150,150,150,32,117,119,118,151,151,151,32,112,117,118,152,152,152,32,118,105,106,153,153,153,32,106,107,108,154,154,154,32,108,109,72,155,155,155,32,72,73,74,156,156,156,32,74,75,76,157,157,157,32,76,77,78,158,158,158,32,78,79,80,159,159,159,32,80,81,91,160,160,160,32,80,91,90,161,161,161,32,76,78,80,162,162,162,32,72,74,76,163,163,163,32,106,108,72,164,164,164,32,112,118,106,154,154,154,32,113,112,106,154,154,154,32,80,90,89,165,165,165,32,80,89,88,166,166,166,32,114,113,106,154,154,154,32,115,114,106,167,167,167,32,76,80,88,168,168,168,32,76,88,87,169,169,169,32,115,106,72,170,170,170,32,116,115,72,154,154,154,32,76,87,86,171,171,171,32,76,86,85,172,172,172,32,82,116,72,173,173,173,32,83,82,72,174,174,174,32,72,76,85,175,175,175,32,84,83,72,176,176,176,32,85,84,72,177,177,177,33,253,280,117,111,178,178,178,178,32,39,133,132,179,179,179,32,132,45,46,180,180,180,32,46,47,48,181,181,181,32,48,49,50,182,182,182,32,50,51,52,183,183,183,32,52,1,0,184,184,184,32,52,0,44,185,185,185,32,48,50,52,186,186,186,32,132,46,48,187,187,187,32,40,39,132,188,188,188,32,41,40,132,189,189,189,32,48,52,44,190,190,190,32,48,44,43,191,191,191,32,41,132,48,192,192,192,32,48,43,42,193,193,193,32,42,41,48,194,194,194,33,135,46,45,134,195,195,195,195,33,122,123,10,53,196,196,196,196,32,296,285,120,197,197,197,32,120,119,110,198,198,198,32,110,252,296,199,199,199,32,120,110,296,200,200,200,33,129,130,98,105,201,201,201,201,33,255,113,114,256,202,202,202,202,33,154,152,196,160,0,0,0,0,33,160,196,195,159,1,1,1,1,33,159,195,194,158,2,2,2,2,33,158,194,193,157,3,3,3,3,33,157,193,192,156,4,4,4,4,33,156,192,191,155,203,203,203,203,33,155,191,300,297,6,6,6,6,33,149,150,242,241,7,7,7,7,33,144,145,237,236,8,8,8,8,33,146,147,239,238,9,9,9,9,33,172,215,214,171,10,10,10,10,33,169,212,213,170,11,11,11,11,33,168,211,212,169,12,12,12,12,33,167,210,211,168,13,13,13,13,33,166,209,210,167,14,14,14,14,33,165,208,209,166,15,15,15,15,33,164,207,208,165,16,16,16,16,33,163,206,207,164,17,17,17,17,33,162,205,206,163,18,18,18,18,33,258,142,234,279,19,19,19,19,33,189,232,233,190,20,20,20,20,33,188,231,232,189,21,21,21,21,33,187,230,231,188,22,22,22,22,33,186,229,230,187,23,23,23,23,33,185,228,229,186,24,24,24,24,33,184,227,228,185,25,25,25,25,33,183,226,227,184,26,26,26,26,33,182,225,226,183,27,27,27,27,33,181,224,225,182,28,28,28,28,32,189,190,180,204,204,204,32,180,179,178,205,205,205,32,178,177,176,206,206,206,32,176,175,174,207,207,207,32,174,173,172,208,208,208,32,172,171,260,209,209,209,32,260,259,292,210,210,210,32,293,295,261,211,211,211,32,260,292,293,212,212,212,32,174,172,260,213,213,213,32,178,176,174,214,214,214,32,189,180,178,215,215,215,32,188,189,178,216,216,216,32,178,174,260,217,217,217,32,260,293,261,218,218,218,32,260,261,262,219,219,219,32,187,188,178,220,220,220,32,186,187,178,221,221,221,32,260,262,263,222,222,222,32,260,263,264,223,223,223,32,186,178,260,224,224,224,32,185,186,260,225,225,225,32,260,264,265,226,226,226,32,260,265,181,227,227,227,32,184,185,260,228,228,228,32,183,184,260,229,229,229,32,260,181,182,230,230,230,32,182,183,260,231,231,231,33,252,280,281,273,232,232,232,232,33,140,139,202,203,58,58,58,58,33,147,148,240,239,59,59,59,59,33,138,137,200,201,60,60,60,60,33,145,146,238,237,61,61,61,61,33,141,140,203,204,233,233,233,233,33,256,257,278,277,63,63,63,63,33,254,255,276,275,64,64,64,64,33,154,161,153,152,65,65,65,65,33,136,135,198,199,66,66,66,66,33,148,149,241,240,67,67,67,67,33,142,143,235,234,68,68,68,68,33,143,144,236,235,69,69,69,69,32,222,223,247,234,234,234,32,247,245,244,235,235,235,32,246,213,212,236,236,236,32,247,244,246,237,237,237,32,221,222,247,238,238,238,32,220,221,247,239,239,239,32,247,246,212,240,240,240,32,212,211,210,241,241,241,32,210,209,208,242,242,242,32,208,207,206,243,243,243,32,206,205,287,244,244,244,32,206,287,286,245,245,245,32,210,208,206,246,246,246,32,247,212,210,247,247,247,32,219,220,247,248,248,248,32,219,247,210,249,249,249,32,210,206,286,250,250,250,32,290,291,266,251,251,251,32,210,286,290,252,252,252,32,218,219,210,253,253,253,32,217,218,210,254,254,254,32,210,290,266,255,255,255,32,210,266,267,256,256,256,32,216,217,210,251,251,251,32,215,216,210,257,257,257,32,210,267,214,258,258,258,32,214,215,210,259,259,259,33,150,151,243,242,97,97,97,97,33,173,216,215,172,98,98,98,98,33,174,217,216,173,99,99,99,99,33,175,218,217,174,100,100,100,100,33,176,219,218,175,101,101,101,101,33,177,220,219,176,102,102,102,102,33,178,221,220,177,103,103,103,103,33,179,222,221,178,104,104,104,104,33,180,223,222,179,105,105,105,105,33,298,197,134,299,260,260,260,260,32,169,170,161,261,261,261,32,161,154,160,262,262,262,32,160,159,158,263,263,263,32,158,157,156,264,264,264,32,156,155,297,265,265,265,32,289,288,162,266,266,266,32,156,297,289,267,267,267,32,160,158,156,268,268,268,32,169,161,160,269,269,269,32,168,169,160,270,270,270,32,160,156,289,271,271,271,32,289,162,163,272,272,272,32,289,163,164,273,273,273,32,167,168,160,274,274,274,32,166,167,160,275,275,275,32,160,289,164,276,276,276,32,165,166,160,277,277,277,32,160,164,165,278,278,278,33,246,244,248,250,125,125,125,125,33,245,247,251,249,126,126,126,126,33,244,245,249,248,127,127,127,127,32,190,233,243,129,129,129,32,251,247,223,130,130,130,32,251,223,180,130,130,130,32,190,243,151,129,129,129,32,251,180,190,279,279,279,32,190,151,251,280,280,280,32,170,213,246,129,129,129,32,141,204,153,281,281,281,32,141,153,161,282,282,282,32,170,246,250,130,130,130,32,141,161,170,283,283,283,32,170,250,141,284,284,284,33,171,214,267,260,136,136,136,136,33,260,267,266,259,137,137,137,137,33,259,266,291,292,138,138,138,138,33,253,254,275,274,139,139,139,139,33,265,272,224,181,140,140,140,140,33,264,271,272,265,141,141,141,141,33,263,270,271,264,142,142,142,142,33,262,269,270,263,143,143,143,143,33,261,268,269,262,144,144,144,144,33,257,258,279,278,145,145,145,145,33,139,138,201,202,146,146,146,146,33,137,136,199,200,147,147,147,147,32,242,243,233,285,285,285,32,233,232,231,286,286,286,32,231,230,229,287,287,287,32,229,228,227,288,288,288,32,227,226,225,289,289,289,32,225,224,272,290,290,290,32,272,271,270,251,251,251,32,270,269,268,251,251,251,32,268,294,282,291,291,291,32,282,283,273,292,292,292,32,281,274,275,251,251,251,32,282,273,281,293,293,293,32,270,268,282,294,294,294,32,225,272,270,295,295,295,32,229,227,225,296,296,296,32,233,231,229,297,297,297,32,241,242,233,298,298,298,32,240,241,233,299,299,299,32,270,282,281,300,300,300,32,270,281,275,251,251,251,32,240,233,229,301,301,301,32,239,240,229,302,302,302,32,270,275,276,251,251,251,32,270,276,277,251,251,251,32,238,239,229,303,303,303,32,237,238,229,304,304,304,32,270,277,278,219,219,219,32,270,278,279,305,305,305,32,237,229,225,306,306,306,32,236,237,225,307,307,307,32,225,270,279,308,308,308,32,225,279,234,251,251,251,32,235,236,225,302,302,302,32,225,234,235,251,251,251,33,253,274,281,280,178,178,178,178,32,152,153,204,309,309,309,32,204,203,202,310,310,310,32,202,201,200,311,311,311,32,200,199,198,312,312,312,32,198,197,298,313,313,313,32,298,300,191,251,251,251,32,298,191,192,314,314,314,32,200,198,298,315,315,315,32,204,202,200,316,316,316,32,196,152,204,317,317,317,32,196,204,200,318,318,318,32,200,298,192,319,319,319,32,200,192,193,320,320,320,32,195,196,200,321,321,321,32,200,193,194,322,322,322,32,194,195,200,323,323,323,33,135,134,197,198,195,195,195,195,33,287,205,162,288,196,196,196,196,32,284,285,296,197,197,197,32,296,252,273,199,199,199,32,273,283,284,324,324,324,32,296,273,284,325,325,325,33,294,268,261,295,201,201,201,201,33,255,256,277,276,202,202,202,202],\"vertices\":[156.808,4,-42.988,164.932,4,-50.7141,156.808,0.999998,-42.988,99.8334,1,-4.91867,110.07,1,-10.0715,120.042,0.999999,-15.7205,129.725,0.999999,-21.852,139.095,0.999999,-28.4512,148.13,0.999998,-35.5022,164.932,0.999998,-50.7141,86.2935,1,-7.66759,96.412,0.999999,-12.1528,106.298,0.999999,-17.129,115.928,0.999999,-22.5844,125.279,0.999999,-28.5057,134.328,0.999998,-34.8788,143.054,0.999998,-41.6881,151.434,0.999998,-48.9174,159.274,0.999998,-56.3727,69.5643,0.999999,-21.5791,79.0204,0.999999,-25.2266,88.286,0.999999,-29.3338,97.339,0.999999,-33.8906,106.157,0.999998,-38.8862,114.72,0.999998,-44.3084,123.006,0.999998,-50.1443,130.997,0.999998,-56.3798,138.671,0.999997,-62.9997,145.835,0.999997,-69.8117,66.8684,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5679,93.5667,0.999998,-40.9481,102.043,0.999998,-45.7501,110.274,0.999998,-50.9622,118.239,0.999998,-56.5719,125.92,0.999997,-62.5657,133.297,0.999997,-68.9291,140.176,0.999997,-75.4703,99.8334,4,-4.91867,110.07,4,-10.0715,120.042,4,-15.7205,129.725,4,-21.852,139.095,4,-28.4512,148.13,4,-35.5022,100.475,4,-3.56229,110.778,4,-8.74826,120.814,4,-14.4335,130.559,4,-20.6044,139.989,4,-27.246,149.082,4,-34.3423,157.816,4,-41.8762,165.993,4,-49.6531,86.2935,4,-7.66759,96.412,4,-12.1528,106.298,4,-17.129,115.928,4,-22.5844,125.279,4,-28.5057,134.328,4,-34.8788,143.054,4,-41.6881,151.434,4,-48.9174,159.274,4,-56.3727,69.5643,4,-21.5791,79.0204,4,-25.2266,88.286,4,-29.3338,97.339,4,-33.8906,106.157,4,-38.8862,114.72,4,-44.3084,123.006,4,-50.1443,130.997,4,-56.3798,138.671,4,-62.9997,145.835,4,-69.8117,66.8684,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5679,93.5667,4,-40.9481,102.043,4,-45.7501,110.274,4,-50.9622,118.239,4,-56.5719,125.92,4,-62.5657,133.297,4,-68.9291,140.176,4,-75.4703,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9243,92.8594,4,-42.2714,101.272,4,-47.0371,109.441,4,-52.2098,117.346,4,-57.7771,124.968,4,-63.7256,132.289,4,-70.0409,139.115,4,-76.5313,164.226,4,-64.1488,153.265,4,-75.109,156.801,4,-58.8455,147.962,4,-67.6843,50.1728,0.999999,-15.6968,59.9408,0.999999,-18.3999,19.4549,0.999999,-18.4667,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,50.1728,4,-15.6968,59.9408,4,-18.3999,19.4549,4,-18.4667,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,9.00004,4,-19.0114,11.5313,4,-18.7169,0.250021,4,-19,0.250039,3.97706,-19,79.1696,4,-5.26265,79.6142,4,-5.09115,79.6142,1,-5.09115,89.9312,1,-1.11145,45.8467,4,-14.4845,45.2417,4,-14.5894,45.2417,0.999999,-14.5894,34.4821,1,-16.4564,17.1888,4,-18.2996,17.1888,0.999999,-18.2996,90.5878,1,-0.820387,92.4385,4,-0.00000619491,90.5878,4,-0.820387,100.475,-1.55712e-7,-3.56229,110.778,-3.82399e-7,-8.74826,120.814,-6.30909e-7,-14.4335,130.559,-9.00646e-7,-20.6044,139.989,-0.00000119096,-27.246,149.082,-0.00000150115,-34.3423,157.816,-0.00000183047,-41.8762,165.993,-0.00000217041,-49.6531,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9243,92.8594,-0.00000184774,-42.2714,101.272,-0.00000205606,-47.0371,109.441,-0.00000228216,-52.2098,117.346,-0.00000252552,-57.7771,124.968,-0.00000278553,-63.7256,132.289,-0.00000306158,-70.0409,139.115,-0.00000334529,-76.5313,156.808,-4,-42.988,164.932,-4,-50.7141,156.808,-1,-42.988,99.8334,-1,-4.91867,110.07,-1,-10.0715,120.042,-1,-15.7205,129.725,-1,-21.852,139.095,-1,-28.4512,148.13,-1,-35.5022,164.932,-1,-50.7141,86.2935,-1,-7.66759,96.412,-1,-12.1528,106.298,-1,-17.129,115.928,-1,-22.5844,125.279,-1,-28.5057,134.328,-1,-34.8788,143.054,-1,-41.6881,151.434,-1,-48.9174,159.274,-1,-56.3727,69.5643,-1,-21.5791,79.0204,-1,-25.2266,88.286,-1,-29.3338,97.339,-1,-33.8906,106.157,-1,-38.8862,114.72,-1,-44.3084,123.006,-1,-50.1443,130.997,-1,-56.3798,138.671,-1,-62.9997,145.835,-1,-69.8117,66.8684,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5679,93.5667,-1,-40.9481,102.043,-1,-45.7501,110.274,-1,-50.9622,118.239,-1,-56.5719,125.92,-1,-62.5657,133.297,-1,-68.9291,140.176,-1,-75.4703,99.8334,-4,-4.91867,110.07,-4,-10.0715,120.042,-4,-15.7205,129.725,-4,-21.852,139.095,-4,-28.4512,148.13,-4,-35.5022,100.475,-4,-3.56229,110.778,-4,-8.74826,120.814,-4,-14.4335,130.559,-4,-20.6044,139.989,-4,-27.246,149.082,-4,-34.3423,157.816,-4,-41.8762,165.993,-4,-49.6531,86.2935,-4,-7.66759,96.412,-4,-12.1528,106.298,-4,-17.129,115.928,-4,-22.5844,125.279,-4,-28.5057,134.328,-4,-34.8788,143.054,-4,-41.6881,151.434,-4,-48.9174,159.274,-4,-56.3727,69.5643,-4,-21.5791,79.0204,-4,-25.2266,88.286,-4,-29.3338,97.339,-4,-33.8906,106.157,-4,-38.8862,114.72,-4,-44.3084,123.006,-4,-50.1443,130.997,-4,-56.3798,138.671,-4,-62.9997,145.835,-4,-69.8117,66.8684,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5679,93.5667,-4,-40.9481,102.043,-4,-45.7501,110.274,-4,-50.9622,118.239,-4,-56.5719,125.92,-4,-62.5657,133.297,-4,-68.9291,140.176,-4,-75.4703,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9243,92.8594,-4,-42.2714,101.272,-4,-47.0371,109.441,-4,-52.2098,117.346,-4,-57.7771,124.968,-4,-63.7256,132.289,-4,-70.0409,139.115,-4,-76.5313,164.226,-4,-64.1488,153.265,-4,-75.109,156.801,-4,-58.8455,147.962,-4,-67.6843,164.226,-0.00000280403,-64.1488,153.265,-0.00000328312,-75.109,156.801,-0.00000257222,-58.8455,147.962,-0.00000295858,-67.6843,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,50.1728,-1,-15.6968,59.9408,-1,-18.3999,19.4549,-1,-18.4667,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,50.1728,-4,-15.6968,59.9408,-4,-18.3999,19.4549,-4,-18.4667,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,9.00004,-8.31017e-7,-19.0114,9.00004,-4,-19.0114,11.5313,-4,-18.7169,0.250021,-4,-19,0.250039,-3.97706,-19,0.250039,-8.30515e-7,-19,79.1696,-4,-5.26265,79.6142,-4,-5.09115,79.6142,-1,-5.09115,89.9312,-1,-1.11145,45.8467,-4,-14.4845,45.2417,-4,-14.5894,45.2417,-1,-14.5894,34.4821,-1,-16.4564,17.1888,-4,-18.2996,17.1888,-1,-18.2996,0.250039,-8.30515e-7,-19,90.5878,-1,-0.820387,92.4385,-4,-0.00000584522,92.4385,-2.70962e-13,-0.00000619888,90.5878,-4,-0.820387],\"normals\":[-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534995,0,-0.844855,-0.492897,0,-0.870087,-0.449609,0,-0.893226,-0.405239,0,-0.914211,-0.653173,0,-0.757209,-0.449607,0,-0.893227,-0.534994,0,-0.844856,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,0.492898,0,0.870087,0.449609,0,0.893226,0.40524,0,0.91421,-0.313679,0,-0.949529,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,8.49644e-9,1,-2.41404e-7,1.46437e-8,1,1.13842e-8,-5.83066e-8,1,-2.32744e-7,1.63048e-8,1,-6.75393e-9,-3.83177e-8,1,-1.15366e-7,-1.13559e-7,1,-2.12309e-7,-5.55477e-8,1,-1.09415e-7,7.87512e-10,1,-4.29216e-8,-7.05463e-9,1,-4.38681e-8,2.2505e-9,1,-3.89867e-8,4.48924e-9,1,-3.52794e-8,1.47958e-8,1,8.24397e-9,-1.1416e-8,1,-9.25599e-8,-5.3903e-9,1,-1.0264e-7,1.02052e-8,1,-2.31939e-8,-3.65502e-9,1,-4.69494e-8,1.24506e-8,1,-3.24003e-8,-1.95472e-8,1,-1.14972e-7,-1.86136e-8,1,-1.13139e-7,1.55113e-8,1,-2.98459e-8,2.79401e-9,1,-3.85337e-8,-1.58827e-8,1,-1.06559e-7,9.85105e-9,1,-9.18901e-9,-4.18241e-9,1,-4.09121e-8,2.63507e-9,1,-4.49983e-8,-1.54479e-9,1,-5.50044e-8,1.47233e-9,1,-3.78981e-8,8.84563e-10,1,-4.32966e-8,0,0,-1,0.65317,0,0.757211,-0.575806,0,-0.817586,0.575808,0,0.817585,-0.492901,0,-0.870086,0.689147,-1.26765e-7,0.724622,-0.2191,0,-0.975702,-0.122409,0,-0.99248,-0.689144,0,-0.724624,0.492896,0,0.870088,-0.615228,0,-0.788349,-0.35989,0,-0.932995,-0.405242,0,-0.914209,2.22295e-7,1,9.89931e-7,-2.68124e-7,1,-6.95096e-7,-3.45826e-8,1,7.32565e-8,-3.57444e-9,1,-1.29164e-8,-2.1565e-7,1,-5.39657e-7,1.90036e-8,1,-1.01573e-8,1.79162e-8,1,-1.19715e-8,3.03409e-7,1,3.18758e-7,-3.1408e-8,1,-6.50063e-8,6.04374e-10,1,-4.41107e-8,-3.75655e-8,1,-7.45052e-8,2.1729e-8,1,-4.87029e-8,4.30703e-9,1,-4.57009e-8,1.85047e-8,1,-1.10907e-8,-4.57578e-9,1,-1.14508e-8,4.15446e-9,1,-6.24185e-8,-1.06405e-8,1,-5.97167e-8,-9.04154e-9,1,-1.79325e-8,2.65025e-9,1,-6.89579e-8,2.71626e-9,1,-5.83223e-8,-1.52553e-8,1,-3.44155e-8,5.53192e-9,1,-3.88005e-8,-9.79205e-9,1,-5.07835e-8,4.34641e-9,1,-4.36863e-8,2.2374e-9,1,-4.37762e-8,-4.27186e-9,1,-4.69193e-8,-5.1168e-10,1,-4.47784e-8,-0.689069,0,-0.724696,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,0.405239,2.71221e-8,0.914211,-7.19584e-8,1,-2.32817e-7,0.00000114435,1,0.000002538,-8.15418e-8,1,-1.96699e-7,-3.94001e-8,1,-1.01104e-7,-4.51062e-8,1,-1.00065e-7,-1.73552e-9,1,-4.03986e-8,-1.19829e-10,1,-4.0101e-8,-1.0661e-8,1,-5.80933e-8,5.39992e-7,1,9.66114e-7,-8.28495e-8,1,-2.26774e-7,-9.30431e-8,1,-2.32757e-7,1.4473e-7,1,1.51428e-7,4.91326e-10,1,-4.06549e-8,2.24424e-10,1,-4.34791e-8,-1.00796e-7,1,-2.40679e-7,4.86147e-10,1,-4.28452e-8,-1.96843e-9,1,-4.95581e-8,8.37623e-9,1,-2.70368e-8,0.581237,0,0.813734,-0.813734,0,-0.581237,0.707109,0,-0.707105,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707109,-0.0000040519,-0.707105,0.707108,0.00000518324,-0.707106,0.707092,0.0000107896,-0.707122,0.707109,-0.0000094147,-0.707105,0.707106,0.0000406412,-0.707108,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.073564,0,-0.99729,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,-0.266711,0,-0.963776,0.615229,0,0.788348,0.534996,0,0.844855,-9.34612e-8,1,-0.00000126703,0,1,0,-2.10705e-8,1,-2.85648e-7,1.04971e-9,1,8.00465e-7,5.45101e-8,1,3.41018e-7,-1.89308e-8,1,-3.53413e-7,0,1,0,1.56451e-7,1,4.73588e-7,2.26161e-8,1,-9.36869e-9,2.45794e-7,1,4.33885e-7,2.0354e-8,1,-1.36003e-8,-2.87904e-7,1,-4.08697e-7,1.77653e-8,1,-1.77653e-8,1.87606e-8,1,-1.70035e-8,-4.96921e-8,1,-1.18432e-7,6.99435e-8,1,1.04891e-7,-2.43616e-8,1,-1.22476e-7,1.82766e-8,1,-1.65649e-8,1.79755e-8,1,-1.70469e-8,7.56977e-8,1,2.24552e-7,-1.05769e-7,1,-1.94043e-7,-1.12801e-7,1,-2.02991e-7,-4.72355e-8,1,-2.13794e-7,-6.38776e-8,1,-1.46966e-7,-5.7187e-8,1,-1.50977e-7,-2.66336e-8,1,-1.59234e-7,-5.72032e-8,1,-1.48296e-7,-8.17808e-8,1,-2.15905e-7,2.35089e-8,1,-7.81434e-9,4.27686e-8,1,3.0122e-8,-0.335866,0,-0.94191,1.28936e-8,1,-2.90874e-8,7.78102e-8,1,1.0861e-7,1.77352e-8,1,-1.06291e-8,1.66078e-8,1,-1.23165e-8,3.02709e-7,1,2.87634e-7,1.50423e-8,1,-1.50423e-8,1.79275e-8,1,-1.10662e-8,-4.92416e-8,1,-1.01104e-7,3.33888e-8,1,1.54874e-8,-4.55899e-9,1,-5.53264e-8,-3.52584e-7,1,-6.64604e-7,-1.72781e-7,1,-2.51802e-7,1.92491e-7,1,1.79028e-7,8.35312e-9,1,-3.08309e-8,1.73023e-8,1,-1.1561e-8,1.73023e-8,1,-1.1561e-8,0.449609,0,0.893225,0.35989,0,0.932995,0,0,0,-0.999998,-0.000780729,-0.00156354,-1,0,-0.00000259551,-1,-4.98244e-12,-0.00000259725,0.0735638,0,0.99729,-0.170958,0,-0.985278,-0.449609,0,-0.893226,-6.11165e-9,-1,4.82457e-8,1.53142e-7,-1,2.13551e-7,1.19139e-7,-1,2.10018e-7,-2.0184e-8,-1,1.20962e-8,-1.18417e-7,-1,-2.09097e-7,-1.10784e-8,-1,3.962e-9,-7.56902e-8,-1,-2.29411e-7,-2.81945e-9,-1,-3.82227e-8,1.34072e-8,-1,1.14289e-7,9.3359e-9,-1,6.10168e-8,1.12661e-8,-1,6.45676e-8,-6.92244e-9,-1,3.67281e-8,5.42816e-10,-1,3.80965e-8,1.00574e-8,-1,6.27586e-8,9.9111e-11,-1,-6.00388e-8,0,-1,0,-5.87807e-10,-1,3.90244e-8,-6.26768e-10,-1,4.1611e-8,-2.36743e-9,-1,5.79304e-8,-1.28904e-9,-1,5.01076e-8,-3.37305e-11,-1,4.38794e-8,-5.41978e-8,-1,-3.9845e-8,2.1006e-10,-1,4.66372e-8,2.30964e-9,-1,4.60003e-8,-2.68474e-8,-1,2.25775e-9,-2.44973e-8,-1,5.7624e-9,5.39979e-9,-1,4.79984e-8,1.03769e-8,-1,5.36046e-8,0,0,-1,0.689147,1.26765e-7,0.724622,0,-1,0,-1.20852e-8,-1,5.55914e-8,-3.11768e-8,-1,3.11768e-8,-1.49857e-8,-1,6.89336e-8,8.74091e-8,-1,1.73362e-7,-1.92274e-7,-1,-2.46378e-7,3.84212e-9,-1,5.01059e-8,-5.73505e-7,-1,-6.64856e-7,-5.05552e-7,-1,-7.1783e-7,-4.32755e-7,-1,-7.6392e-7,-5.50057e-7,-1,-0.00000124092,-1.35834e-8,-1,3.52139e-8,-1.85047e-8,-1,1.10907e-8,1.20059e-8,-1,4.85954e-8,0.0000188358,-1,0.0000268264,2.79038e-9,-1,4.47654e-8,-3.26615e-8,-1,-1.25287e-8,0,-1,0,6.21958e-10,-1,4.94602e-8,1.38217e-8,-1,2.1827e-8,2.67622e-9,-1,1.00176e-7,-6.07289e-8,-1,-2.16712e-7,1.6375e-7,-1,7.6812e-7,1.91982e-8,-1,1.59409e-7,-1.94591e-8,-1,-5.89043e-8,-1.57449e-8,-1,-4.08175e-8,0.405239,5.42442e-8,0.914211,-2.84467e-9,-1,4.49787e-8,-1.37806e-8,-1,3.17983e-8,1.05346e-7,-1,1.85708e-7,-1.78493e-8,-1,1.06972e-8,-4.42102e-8,-1,-4.1562e-8,-6.6697e-8,-1,-1.26639e-7,0.00000111494,-1,0.00000239957,9.96257e-9,-1,5.70987e-8,-3.01652e-9,-1,4.36876e-8,-5.51898e-9,-1,4.30713e-8,1.97886e-7,-1,3.38347e-7,-6.76756e-8,-1,-1.26096e-7,-9.59372e-8,-1,-1.42684e-7,1.67864e-9,-1,3.71644e-8,2.70834e-9,-1,5.99614e-8,-7.17712e-8,-1,-1.17991e-7,-6.43258e-9,-1,3.01062e-8,-3.35108e-9,-1,3.77879e-8,0.707109,-0.0000081038,-0.707105,0.707108,0.00000259162,-0.707106,0.707107,-0.0000107896,-0.707107,0.707086,0,-0.707127,0.707109,-0.0000471927,-0.707105,0.707106,-0.00000586876,-0.707108,-3.58083e-8,-1,3.58083e-8,6.77559e-7,-1,7.85482e-7,5.74403e-7,-1,8.15592e-7,4.91707e-7,-1,8.67981e-7,4.04292e-7,-1,9.12064e-7,-3.5901e-7,-1,-9.30712e-7,-4.21409e-8,-1,-5.71296e-7,4.22664e-8,-1,6.60852e-11,0,-1,0.00000161897,-4.96176e-8,-1,-3.34501e-7,6.06857e-8,-1,2.42272e-7,-2.16157e-8,-1,1.15528e-8,-1.70076e-8,-1,1.81619e-8,-2.99378e-7,-1,-3.47062e-7,0.00000293013,-1,0.00000383481,7.55031e-8,-1,9.70087e-7,-2.13289e-7,-1,-2.21318e-7,0,-1,0,-4.10183e-8,-1,2.74076e-8,-2.29968e-7,-1,-4.05947e-7,-1.73245e-7,-1,-4.4112e-7,-2.1615e-8,-1,1.15542e-8,-2.55966e-7,-1,-3.98833e-7,1.15332e-7,-1,4.22417e-7,-3.00845e-8,-1,3.00845e-8,-1.83382e-8,-1,4.20327e-8,4.85152e-7,-1,6.88863e-7,4.15267e-7,-1,7.33053e-7,3.41421e-7,-1,7.70239e-7,-1.91497e-7,-1,-2.87904e-7,-3.33888e-8,-1,-1.54874e-8,1.13107e-7,-1,1.87218e-7,-3.5855e-8,-1,2.21324e-8,-4.27127e-7,-1,-4.7178e-7,1.06619e-8,-1,6.60106e-8,-2.51626e-7,-1,-4.44182e-7,3.14089e-7,-1,4.02468e-7,-3.46046e-8,-1,2.3122e-8,-3.46045e-8,-1,2.3122e-8,-0.999998,0.000780721,-0.00156354,-1,4.98244e-12,-0.00000259725]},\"autopoint_bc\":{\"normals\":[-1.95303e-8,-1,-4.40598e-8,0,-1,0,0,-1,0,-2.39925e-7,-1,2.36083e-7,-1.46876e-7,-1,2.82011e-7,0.42997,3.65771e-8,-0.902843,0.448898,0,-0.893583,0.448898,0,-0.893583,0.448898,0,-0.893583,0.448858,-0.00000144126,-0.893603,0.44888,0,-0.893592,0.448857,0.00000115719,-0.893603,0.44888,0,-0.893592,0.448857,5.32629e-8,-0.893604,0.448857,0,-0.893604,-2.85382e-7,-0.0000034968,1,-0.448858,-4.15648e-7,0.893603,-0.429975,0,0.902841,-0.00000328516,1,0.00000701397,3.44699e-14,1,-1.20785e-7,-2.68951e-7,1,6.07274e-7,0.00000187272,1,-0.0000028895,-1.07242e-7,1,2.74271e-7,0,0,-1,-9.0728e-14,1,3.17891e-7,3.40342e-7,0,1,3.40342e-7,0,1,3.40342e-7,0,1,-1.66789e-7,0,1,3.40342e-7,0,1,-1.26709e-7,0,1,-1.66789e-7,0,1,0,-1,0,-5.70813e-7,0,1,-1.50032e-7,3.83246e-7,1,-1.07023e-7,0,1,-5.70813e-7,0,1,-5.70813e-7,0,1,-9.0728e-14,-1,3.17891e-7,-2.53662e-8,-1,-4.71339e-9,4.25253e-15,-1,-1.49012e-8,-1.73763e-8,-1,-8.61904e-8,4.7016e-7,-1,-0.000001149,2.12138e-15,-1,-4.85088e-8,3.2909e-7,-1,-8.66388e-7,-4.59055e-8,-1,9.56591e-8,8.50544e-15,-1,-7.94727e-8,0,-1,-7.79341e-8,-1.1576e-8,-1,-1.93064e-7,8.07293e-8,-1,-3.61171e-7,8.50533e-15,-1,-7.94727e-8,1.00699e-14,-1,-7.94727e-8,6.35734e-9,-1,-4.21695e-8,9.65994e-9,-1,-1.2569e-7,-6.98657e-9,-1,-1.99909e-7,-1.00841e-13,-1,6.85482e-7,-7.41594e-7,-1,0.0000165999,2.57047e-8,-1,1.2398e-7,7.85275e-8,-1,0.00000503258,-2.85382e-7,0.00000381469,1,0.00000111239,1,-0.0000248999,-6.96287e-14,1,5.49515e-7,5.58609e-9,1,3.41806e-7,-4.31752e-7,1,-0.00000312065,-1.03194e-8,1,-6.31431e-7,-3.82745e-14,1,3.57627e-7,1.39076e-13,1,-8.56853e-7,-1.55376e-8,1,1.82497e-7,-3.8274e-14,1,3.57627e-7,0,1,4.47035e-8,1.66337e-7,1,-3.00953e-7,-1.27576e-14,1,4.47036e-8,1.26931e-14,1,-1.18603e-7,-1.06069e-14,1,2.42544e-7,-5.57363e-9,1,2.23503e-8,-9.46995e-9,1,6.35559e-8,-4.37222e-7,1,0.0000012487,2.60803e-8,1,-8.69697e-9,-1.17926e-8,1,9.52851e-8,-0.00000706047,1,0.0000145172,-4.87984e-8,1,2.54013e-7,-0.429975,-1.77268e-7,0.902841,-0.448858,4.87935e-7,0.893603,-0.448898,0,0.893583,0,-1,0,0,-1,0,0.155718,0,-0.987801,-0.332928,0,0.942952,-5.2299e-14,-1,3.17891e-7,0.448869,0,-0.893598,-5.2299e-14,1,3.17891e-7,0,1,0,4.92108e-7,1,0.0000060847,1.6231e-7,0,-1,0.0446301,0,-0.999004,-8.74639e-8,-0.00000445048,1,0.429999,-3.14309e-7,-0.90283,0.391601,-4.62348e-8,-0.920135,0.391601,-1.38704e-7,-0.920135,0.429999,3.77171e-8,-0.90283,-8.74639e-8,0.00000476837,1,0.00000140305,-1,-0.00000329672,1.01089e-13,-1,-7.70521e-7,-2.22361e-8,-1,-6.73103e-8,-2.02179e-13,1,0.00000154104,0.00000140973,1,-0.00000313531,5.04854e-8,1,-5.55431e-8,-0.170958,0,-0.985278,-0.359896,-5.56107e-8,-0.932993,-0.359895,0,-0.932993,-0.359893,0,-0.932994,-0.359895,0,-0.932993,-0.359893,-1.75761e-7,-0.932994,-0.359896,-5.56107e-8,-0.932993,-0.122409,0,-0.99248,-0.40524,-2.81543e-8,-0.91421,-0.0735616,0,-0.997291,-0.0735639,0,-0.99729,-0.0735616,0,-0.997291,-0.0735639,0,-0.99729,-0.0735639,0,-0.99729,-0.0735639,0,-0.99729,-0.111152,0,-0.993803,-0.313682,0,-0.949528,-0.313679,-1.50924e-7,-0.949529,-0.313679,0,-0.949529,-0.313679,-1.13193e-7,-0.949529,-0.313679,0,-0.949529,-0.2191,0,-0.975702,-0.266711,-1.14891e-7,-0.963777,-0.266711,5.25958e-7,-0.963777,-0.266711,0,-0.963776,-0.266713,-8.32295e-7,-0.963776,-0.266711,0,-0.963777,-0.266712,0,-0.963776],\"metadata\":{\"generator\":\"io_three\",\"normals\":135,\"uvs\":0,\"vertices\":96,\"version\":3,\"faces\":152,\"type\":\"Geometry\"},\"uvs\":[],\"vertices\":[199.14,-4,0.575707,210.91,-4,6.181,217.517,-4,9.49999,214.175,-4,9.49999,210.246,-4,7.52607,197.293,-4,1.35754,197.93,-4,1.11191,199.14,4,0.575707,210.91,4,6.181,233.443,4,17.5,236.429,4,19,236.429,-4,19,233.443,-4,17.5,233.443,-1,17.5,217.517,-1,9.5,217.517,4,9.49999,217.517,1,9.5,233.443,0.999999,17.5,214.175,-1,9.5,210.246,-1,7.52607,197.293,-1,1.35754,197.293,4,1.35754,210.246,4,7.52607,214.175,4,9.49999,197.93,4,1.11191,230.101,0.999999,17.5,230.101,4,17.5,233.087,4,19,117,-4,19,139.417,-4,19,139.417,-1,19,169.523,-1,19,169.523,-4,19,215.266,-4,19,215.266,-1,19,233.087,-1,19,233.087,-4,19,233.087,0.999999,19,215.266,0.999999,19,215.266,4,19,169.523,4,19,169.523,0.999999,19,139.417,0.999999,19,139.417,4,19,117,4,19,230.101,-4,17.5,230.101,-1,17.5,212.279,-1,17.5,165.274,-1,17.5,133.224,-1,18.0238,130.548,-1,17.9042,131.034,-1,17.8685,142.481,-1,16.4565,153.846,-1,14.4846,165.1,-1,11.9575,173.98,-1,9.5,195.787,-1,9.5,192.934,-1,8.14093,186.607,-1,5.44844,187.169,-1,5.26306,214.175,1,9.5,130.548,0.999999,17.9042,133.224,0.999999,18.0238,165.274,0.999999,17.5,212.279,0.999999,17.5,210.246,1,7.52607,197.293,1,1.35754,187.169,1,5.26306,186.607,1,5.44844,192.934,0.999999,8.14093,195.787,1,9.5,173.98,1,9.5,165.1,0.999999,11.9575,153.846,0.999999,14.4846,142.481,0.999998,16.4565,131.034,0.999998,17.8685,130.548,-4,17.9042,133.224,-4,18.0238,119.53,-4,18.717,165.274,-4,17.5,212.279,-4,17.5,212.279,4,17.5,165.274,4,17.5,133.224,4,18.0238,130.548,4,17.9042,119.53,4,18.717,173.98,-4,9.49998,195.787,-4,9.49999,192.934,-4,8.14093,186.607,-4,5.44844,186.607,4,5.44844,192.934,4,8.14093,195.787,4,9.49999,173.98,4,9.49998,176.216,-4,8.88113,176.216,4,8.88113],\"faces\":[32,6,0,1,0,0,0,32,1,2,3,1,1,1,32,4,5,6,2,2,2,32,1,3,4,3,3,3,32,1,4,6,4,4,4,33,1,0,7,8,5,5,5,5,32,17,9,10,6,6,6,32,10,11,12,7,7,7,32,10,12,13,8,8,8,32,17,10,13,7,7,7,32,14,2,1,9,9,9,32,17,13,14,10,10,10,32,8,15,16,11,11,11,32,16,17,14,12,12,12,32,14,1,8,13,13,13,32,14,8,16,14,14,14,33,14,18,3,2,15,15,15,15,33,18,19,4,3,16,16,16,16,33,5,4,19,20,17,17,17,17,32,24,21,22,18,18,18,32,22,23,15,19,19,19,32,15,8,7,20,20,20,32,7,24,22,21,21,21,32,22,15,7,22,22,22,33,17,25,26,9,23,23,23,23,33,26,27,10,9,24,24,24,24,32,44,28,29,25,25,25,32,44,29,30,26,26,26,32,42,43,44,27,27,27,32,39,40,41,28,28,28,32,42,44,30,29,29,29,32,38,39,41,28,28,28,32,41,42,30,30,30,30,32,31,32,33,31,31,31,32,41,30,31,30,30,30,32,37,38,41,32,32,32,32,41,31,33,31,31,31,32,41,33,34,31,31,31,32,10,27,37,33,33,33,32,37,41,34,34,34,34,32,35,36,11,33,33,33,32,37,34,35,35,35,35,32,11,10,37,36,36,36,32,35,11,37,37,37,37,33,12,11,36,45,38,38,38,38,33,12,45,46,13,23,23,23,23,32,59,20,19,39,39,39,32,18,14,13,40,40,40,32,59,19,18,41,41,41,32,57,58,59,42,42,42,32,54,55,56,43,43,43,32,56,57,59,44,44,44,32,59,18,13,45,45,45,32,46,35,34,46,46,46,32,59,13,46,47,47,47,32,53,54,56,48,48,48,32,56,59,46,49,49,49,32,46,34,47,50,50,50,32,48,31,30,51,51,51,32,46,47,48,32,32,32,32,53,56,46,52,52,52,32,52,53,46,53,53,53,32,48,30,49,54,54,54,32,52,46,48,55,55,55,32,49,50,51,56,56,56,32,51,52,48,57,57,57,32,48,49,51,58,58,58,33,15,23,60,16,59,59,59,59,32,75,61,62,60,60,60,32,62,42,41,61,61,61,32,62,41,63,62,62,62,32,74,75,62,63,63,63,32,74,62,63,64,64,64,32,64,38,37,65,65,65,32,74,63,64,66,66,66,32,73,74,64,67,67,67,32,64,37,25,68,68,68,32,25,17,16,69,69,69,32,60,65,66,70,70,70,32,25,16,60,71,71,71,32,73,64,25,72,72,72,32,70,71,72,73,73,73,32,72,73,25,74,74,74,32,25,60,66,75,75,75,32,67,68,69,76,76,76,32,25,66,67,77,77,77,32,70,72,25,78,78,78,32,67,69,70,79,79,79,32,25,67,70,80,80,80,33,66,65,22,21,81,81,81,81,33,23,22,65,60,82,82,82,82,33,25,37,27,26,83,83,83,83,32,78,76,77,84,84,84,32,77,29,28,85,85,85,32,77,28,78,32,32,32,33,29,77,49,30,86,86,86,86,33,79,32,31,48,87,87,87,87,33,32,79,80,33,88,88,88,88,33,47,34,33,80,89,89,89,89,33,45,36,35,46,83,83,83,83,33,81,39,38,64,89,89,89,89,33,82,40,39,81,90,90,90,90,33,63,41,40,82,87,87,87,87,33,42,62,83,43,86,86,86,86,32,43,83,84,91,91,91,32,84,85,44,92,92,92,32,84,44,43,91,91,91,33,80,79,48,47,93,93,93,93,33,50,49,77,76,94,94,94,94,33,86,87,56,55,95,95,95,95,33,87,88,57,56,96,96,96,96,33,58,57,88,89,97,97,97,97,33,84,83,62,61,94,94,94,94,33,64,63,82,81,93,93,93,93,33,90,91,69,68,98,98,98,98,33,70,69,91,92,99,99,99,99,33,71,70,92,93,100,100,100,100,32,89,88,87,101,101,101,32,87,86,94,102,102,102,32,87,94,89,103,103,103,32,95,93,92,104,104,104,32,92,91,90,105,105,105,32,92,90,95,106,106,106,33,53,52,74,73,107,107,107,107,32,21,24,6,108,108,108,32,6,5,20,109,109,109,32,20,59,67,110,110,110,32,66,21,6,111,111,111,32,20,67,66,112,112,112,32,6,20,66,113,113,113,33,52,51,75,74,114,114,114,114,33,0,6,24,7,115,115,115,115,32,61,75,51,116,116,116,32,50,76,78,117,117,117,32,61,51,50,118,118,118,32,85,84,61,119,119,119,32,50,78,85,120,120,120,32,50,85,61,121,121,121,33,78,28,44,85,122,122,122,122,32,68,67,59,123,123,123,32,58,89,94,124,124,124,32,68,59,58,123,123,123,32,95,90,68,125,125,125,32,58,94,95,126,126,126,32,58,95,68,127,127,127,33,54,53,73,72,128,128,128,128,32,93,95,94,129,129,129,32,94,86,55,130,130,130,32,55,54,72,131,131,131,32,71,93,94,132,132,132,32,55,72,71,133,133,133,32,94,55,71,134,134,134]},\"turount_R_a\":{\"uvs\":[],\"normals\":[-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534996,0,-0.844855,-1.12262e-14,1,-4.98865e-8,-2.01378e-9,1,-4.34445e-8,0,1,-4.98865e-8,-1.93861e-9,1,-4.48604e-8,1.80506e-10,1,-4.56916e-8,-2.06171e-9,1,-4.56455e-8,1.37714e-10,1,-4.43967e-8,-9.42067e-10,1,-4.02524e-8,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,3.37906e-9,1,-4.12318e-8,1.35172e-9,1,-4.13479e-8,-6.78548e-10,1,-4.13645e-8,2.51045e-9,1,-4.42373e-8,-4.72985e-9,1,-4.10987e-8,2.75902e-9,1,-4.29512e-8,6.48216e-10,1,-4.30349e-8,-1.62677e-9,1,-4.77945e-8,-3.05415e-9,1,-4.33853e-8,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.689069,0,-0.724696,0.575808,0,0.817585,0.615229,0,0.788348,0.65317,0,0.757211,0.689147,-5.07059e-7,0.724622,1.53516e-8,1,-1.46159e-8,-0.689144,0,-0.724624,-0.35989,0,-0.932995,-0.405242,0,-0.914209,-0.449607,0,-0.893227,-0.492901,0,-0.870086,-0.534994,0,-0.844856,2.3806e-8,1,-6.94077e-8,1.69538e-8,1,-1.19401e-8,-2.43728e-8,1,-8.17886e-8,-2.83562e-8,1,-8.04939e-8,0.575808,0,0.817585,0.615229,0,0.788348,0.653171,0,0.757211,0.689147,0,0.724622,-2.62771e-9,1,-8.01815e-8,-1.04234e-8,1,-5.2888e-8,9.81558e-10,1,-4.77594e-8,1.62811e-9,1,-4.48518e-8,0,1,-4.8034e-8,7.13915e-9,1,-5.39129e-8,-1.14e-9,1,-4.38361e-8,-3.28962e-9,1,-4.37273e-8,7.29344e-9,1,-4.5485e-8,5.0529e-9,1,-4.57882e-8,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,-1.71421e-8,1,-7.85686e-8,2.24578e-8,1,-9.95472e-9,2.19424e-8,1,-1.10446e-8,-2.84851e-8,1,-7.52021e-8,-6.42811e-8,1,-1.47428e-7,-7.14385e-8,1,-1.44097e-7,-7.84226e-8,1,-1.40419e-7,-2.40076e-8,1,-8.42456e-8,1.8261e-8,1,-1.73858e-8,-0.405242,0,-0.914209,-0.449607,0,-0.893226,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.813734,0,-0.581237,0.581237,0,0.813734,0.707109,0,-0.707104,0.707105,0,-0.707108,0.707108,0,-0.707106,0.707107,0,-0.707107,0.707105,0,-0.707108,0.707107,-0.0000165252,-0.707107,0.707109,0.0000121557,-0.707105,0.707107,0,0.707107,0.707105,0,-0.707108,0.707092,0.0000107896,-0.707122,0.707109,-0.0000134666,-0.707105,0.707105,0.000039978,-0.707108,-0.313679,0,-0.949529,0,1,0,2.65033e-9,1,-4.04452e-8,-1.69439e-9,1,-4.35346e-8,5.66244e-10,1,-4.15627e-8,-1.60987e-10,1,-3.94962e-8,0,1,-4.22264e-8,1.10567e-9,1,-4.28749e-8,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0,0,-1,-0.073564,0,-0.99729,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.2191,0,-0.975702,-0.266711,0,-0.963776,-0.313679,0,-0.949529,-2.01976e-14,1,-9.24436e-8,-1.44413e-8,1,-3.93227e-7,0,1,0,0,1,-2.48357e-7,8.87305e-9,1,-2.89678e-7,-5.42823e-9,1,-8.0233e-8,-9.35859e-9,1,-7.987e-8,-1.32662e-8,1,-7.93148e-8,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.335866,0,-0.94191,1.55275e-8,1,-9.17037e-7,-0.335866,0,-0.94191,-0.999994,0.00000982353,-0.00342704,-1,0,-0.00000259724,0.534996,0,0.844854,0.534996,0,0.844854,0.492898,0,0.870087,0.122409,0,0.99248,-5.60031e-8,1,-7.84047e-8,-3.92482e-8,1,-7.32504e-8,1.23404e-7,1,2.39221e-8,5.17879e-9,1,-2.95536e-8,-5.13503e-8,1,-9.95434e-9,1.05808e-8,1,-6.03808e-8,7.48412e-15,-1,3.32576e-8,-1.97224e-9,-1,3.71499e-8,0,-1,4.1799e-8,-1.82364e-9,-1,3.43507e-8,-1.80506e-10,-1,4.56916e-8,2.06171e-9,-1,4.56455e-8,-4.57433e-9,-1,4.3304e-8,-2.9771e-9,-1,4.39838e-8,4.89768e-9,-1,4.60248e-8,-1.35172e-9,-1,4.13479e-8,6.78548e-10,-1,4.13645e-8,1.16194e-9,-1,5.07199e-8,3.64912e-9,-1,5.06018e-8,6.12774e-9,-1,5.03618e-8,-7.2024e-10,-1,4.78166e-8,1.30142e-9,-1,3.82356e-8,-6.19593e-9,-1,4.70484e-8,0.689147,5.07059e-7,0.724622,-3.07033e-8,-1,2.92319e-8,0,-1,0,7.4569e-8,-1,1.41893e-7,8.14408e-8,-1,1.38062e-7,-3.14037e-8,-1,2.70887e-8,-1.58023e-8,-1,3.59186e-8,7.3317e-9,-1,3.40736e-8,-1.56263e-8,-1,6.78673e-8,9.14892e-9,-1,2.71325e-8,1.14e-9,-1,4.38361e-8,3.28962e-9,-1,4.37273e-8,5.43117e-9,-1,4.35133e-8,7.55968e-9,-1,4.31944e-8,0,-1,0,-4.38849e-8,-1,2.20892e-8,-4.15079e-8,-1,2.62846e-8,-3.87319e-8,-1,3.02262e-8,-3.65219e-8,-1,3.47717e-8,-0.534994,0,-0.844856,-0.575806,0,-0.817586,0,0,0,0.707109,-0.0000122749,-0.707105,0.707108,0.00000206432,-0.707106,0.707105,-0.0000431584,-0.707108,0.707107,0,-0.707107,0.707106,0,-0.707108,0.013,-0.999831,-0.0129999,0.707108,0.0000120428,-0.707105,0,-1,0,-2.65033e-9,-1,4.04452e-8,-3.31684e-10,-1,5.27921e-8,7.43291e-10,-1,5.15428e-8,2.49808e-9,-1,4.65707e-8,0,-1,4.62218e-8,1.08392e-9,-1,5.03428e-8,0,0,-1,0,-1,0,1.87172e-8,-1,1.5974e-7,2.65325e-8,-1,1.5863e-7,-0.266711,0,-0.963776,-0.999994,-0.00000982353,-0.00342704,0,-1,0,0,-1,0,1.84026e-7,-1,2.57468e-7,-8.68334e-9,-1,4.95528e-8,-1.40041e-7,-1,1.94647e-7],\"metadata\":{\"generator\":\"io_three\",\"normals\":214,\"uvs\":0,\"vertices\":315,\"version\":3,\"faces\":328,\"type\":\"Geometry\"},\"vertices\":[156.808,4,-42.988,164.932,4,-50.7141,156.808,0.999998,-42.988,130.559,0.999999,-20.6044,139.989,0.999999,-27.246,149.082,0.999999,-34.3423,157.816,0.999998,-41.8762,165.993,0.999998,-49.6531,66.363,0.999999,-30.5264,75.3838,0.999999,-34.0061,84.223,0.999998,-37.9243,92.8594,0.999998,-42.2714,101.272,0.999998,-47.0371,109.441,0.999998,-52.2098,117.346,0.999997,-57.7771,124.968,0.999997,-63.7256,132.289,0.999997,-70.0409,139.115,0.999997,-76.5313,129.725,0.999999,-21.852,139.095,0.999999,-28.4512,148.13,0.999998,-35.5022,164.932,0.999998,-50.7141,115.928,0.999999,-22.5844,125.279,0.999999,-28.5057,134.328,0.999998,-34.8788,143.054,0.999998,-41.6881,151.434,0.999998,-48.9174,159.274,0.999998,-56.3727,69.5643,0.999999,-21.5791,79.0204,0.999999,-25.2266,88.286,0.999999,-29.3338,97.339,0.999999,-33.8906,106.157,0.999998,-38.8862,114.72,0.999998,-44.3084,123.006,0.999998,-50.1443,130.997,0.999998,-56.3798,138.671,0.999997,-62.9997,145.835,0.999997,-69.8117,66.8684,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5679,93.5667,0.999998,-40.9481,102.043,0.999998,-45.7501,110.274,0.999998,-50.9622,118.239,0.999998,-56.5719,125.92,0.999997,-62.5657,133.297,0.999997,-68.9291,140.176,0.999997,-75.4703,129.725,4,-21.852,139.095,4,-28.4512,148.13,4,-35.5022,130.559,4,-20.6044,139.989,4,-27.246,149.082,4,-34.3423,157.816,4,-41.8762,165.993,4,-49.6531,115.928,4,-22.5844,125.279,4,-28.5057,134.328,4,-34.8788,143.054,4,-41.6881,151.434,4,-48.9174,159.274,4,-56.3727,69.5643,4,-21.5791,79.0204,4,-25.2266,88.286,4,-29.3338,97.339,4,-33.8906,106.157,4,-38.8862,114.72,4,-44.3084,123.006,4,-50.1443,130.997,4,-56.3798,138.671,4,-62.9997,145.835,4,-69.8117,66.8684,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5679,93.5667,4,-40.9481,102.043,4,-45.7501,110.274,4,-50.9622,118.239,4,-56.5719,125.92,4,-62.5657,133.297,4,-68.9291,140.176,4,-75.4703,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9243,92.8594,4,-42.2714,101.272,4,-47.0371,109.441,4,-52.2098,117.346,4,-57.7771,124.968,4,-63.7256,132.289,4,-70.0409,139.115,4,-76.5313,151.851,4,-51.0673,140.184,4,-62.7346,157.154,4,-58.492,147.609,4,-68.0379,0.250039,0.999999,-19.0114,9.66539,0.999999,-19.2487,19.3078,0.999999,-19.96,28.9038,0.999999,-21.1435,38.4301,0.999999,-22.7964,47.8638,0.999999,-24.9148,57.1823,0.999999,-27.4936,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,9.00004,0.999999,-19.0114,9.00004,4,-19.0114,109.601,4,-19,125.221,0.999999,-19,118.077,0.999999,-19,109.601,0.999999,-19,128.025,0.999999,-19,128.025,4,-19,125.221,4,-19,105.298,4,-19,93.1735,4,-19,81.5995,4,-19,70.4871,4,-19,61.7573,0.999999,-19,59.7588,0.999999,-19,61.7573,4,-19,49.3454,0.999999,-19,39.1853,0.999999,-19,29.2218,0.999999,-19,23.7784,4,-19,19.4024,4,-19,23.7784,0.999999,-19,9.67761,4,-19,9.00004,4,-19,0.250039,4,-19,0.25,-8.30515e-7,-19,130.559,-9.00646e-7,-20.6044,139.989,-0.00000119096,-27.246,149.082,-0.00000150115,-34.3423,157.816,-0.00000183047,-41.8762,165.993,-0.00000217041,-49.6531,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9243,92.8594,-0.00000184774,-42.2714,101.272,-0.00000205606,-47.0371,109.441,-0.00000228216,-52.2098,117.346,-0.00000252552,-57.7771,124.968,-0.00000278553,-63.7256,132.289,-0.00000306158,-70.0409,139.115,-0.00000334529,-76.5313,156.808,-4,-42.988,164.932,-4,-50.7141,156.808,-1,-42.988,130.559,-1,-20.6044,139.989,-1,-27.246,149.082,-1,-34.3423,157.816,-1,-41.8762,165.993,-1,-49.6531,66.363,-1,-30.5264,75.3838,-1,-34.0061,84.223,-1,-37.9243,92.8594,-1,-42.2714,101.272,-1,-47.0371,109.441,-1,-52.2098,117.346,-1,-57.7771,124.968,-1,-63.7256,132.289,-1,-70.0409,139.115,-1,-76.5313,129.725,-1,-21.852,139.095,-1,-28.4512,148.13,-1,-35.5022,164.932,-1,-50.7141,115.928,-1,-22.5844,125.279,-1,-28.5057,134.328,-1,-34.8788,143.054,-1,-41.6881,151.434,-1,-48.9174,159.274,-1,-56.3727,69.5643,-1,-21.5791,79.0204,-1,-25.2266,88.286,-1,-29.3338,97.339,-1,-33.8906,106.157,-1,-38.8862,114.72,-1,-44.3084,123.006,-1,-50.1443,130.997,-1,-56.3798,138.671,-1,-62.9997,145.835,-1,-69.8117,66.8684,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5679,93.5667,-1,-40.9481,102.043,-1,-45.7501,110.274,-1,-50.9622,118.239,-1,-56.5719,125.92,-1,-62.5657,133.297,-1,-68.9291,140.176,-1,-75.4703,129.725,-4,-21.852,139.095,-4,-28.4512,148.13,-4,-35.5022,130.559,-4,-20.6044,139.989,-4,-27.246,149.082,-4,-34.3423,157.816,-4,-41.8762,165.993,-4,-49.6531,115.928,-4,-22.5844,125.279,-4,-28.5057,134.328,-4,-34.8788,143.054,-4,-41.6881,151.434,-4,-48.9174,159.274,-4,-56.3727,69.5643,-4,-21.5791,79.0204,-4,-25.2266,88.286,-4,-29.3338,97.339,-4,-33.8906,106.157,-4,-38.8862,114.72,-4,-44.3084,123.006,-4,-50.1443,130.997,-4,-56.3798,138.671,-4,-62.9997,145.835,-4,-69.8117,66.8684,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5679,93.5667,-4,-40.9481,102.043,-4,-45.7501,110.274,-4,-50.9622,118.239,-4,-56.5719,125.92,-4,-62.5657,133.297,-4,-68.9291,140.176,-4,-75.4703,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9243,92.8594,-4,-42.2714,101.272,-4,-47.0371,109.441,-4,-52.2098,117.346,-4,-57.7771,124.968,-4,-63.7256,132.289,-4,-70.0409,139.115,-4,-76.5313,151.851,-4,-51.0673,140.184,-4,-62.7346,157.154,-4,-58.492,147.609,-4,-68.0379,151.851,-0.00000223222,-51.0673,140.184,-0.00000274222,-62.7346,157.154,-0.00000255676,-58.492,147.609,-0.00000297403,-68.0379,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,0.250039,-1,-19.0114,9.66539,-1,-19.2487,19.3078,-1,-19.96,28.9038,-1,-21.1435,38.4301,-1,-22.7964,47.8638,-1,-24.9148,57.1823,-1,-27.4936,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,9.00004,-8.31017e-7,-19.0114,9.00004,-1,-19.0114,9.00004,-4,-19.0114,128.025,-8.30516e-7,-19,109.601,-4,-19,125.221,-1,-19,118.077,-1,-19,109.601,-1,-19,128.025,-1,-19,128.025,-4,-19,125.221,-4,-19,105.298,-4,-19,93.1735,-4,-19,81.5995,-4,-19,70.4871,-4,-19,61.7573,-1,-19,59.7588,-1,-19,61.7573,-4,-19,49.3454,-1,-19,39.1853,-1,-19,29.2218,-1,-19,23.7784,-4,-19,19.4024,-4,-19,23.7784,-1,-19,9.67761,-4,-19,9.00004,-4,-19,0.250039,-4,-19],\"faces\":[33,50,0,2,20,0,0,0,0,33,20,19,49,50,1,1,1,1,33,19,18,48,49,2,2,2,2,33,18,121,126,48,3,3,3,3,32,22,123,122,4,4,4,32,18,23,22,5,5,5,32,22,122,121,6,6,6,32,22,121,18,7,7,7,33,24,23,18,19,8,8,8,8,33,25,24,19,20,9,9,9,9,33,26,25,20,2,10,10,10,10,33,27,26,2,21,11,11,11,11,33,29,28,62,63,12,12,12,12,33,26,27,61,60,13,13,13,13,33,25,26,60,59,14,14,14,14,33,24,25,59,58,15,15,15,15,33,23,24,58,57,16,16,16,16,33,22,23,57,56,17,17,17,17,33,39,38,28,29,18,18,18,18,33,40,39,29,30,19,19,19,19,33,41,40,30,31,20,20,20,20,33,42,41,31,32,21,21,21,21,33,43,42,32,33,22,22,22,22,33,44,43,33,34,23,23,23,23,33,45,44,34,35,24,24,24,24,33,46,45,35,36,25,25,25,25,33,47,46,36,37,26,26,26,26,33,46,47,81,80,27,27,27,27,33,45,46,80,79,28,28,28,28,33,44,45,79,78,29,29,29,29,33,43,44,78,77,30,30,30,30,33,42,43,77,76,31,31,31,31,33,41,42,76,75,32,32,32,32,33,40,41,75,74,33,33,33,33,33,39,40,74,73,34,34,34,34,33,38,39,73,72,35,35,35,35,33,155,154,13,14,36,36,36,36,33,156,155,14,15,37,37,37,37,33,157,156,15,16,38,38,38,38,33,158,157,16,17,39,39,39,39,33,144,145,4,3,40,40,40,40,33,145,146,5,4,41,41,41,41,33,146,147,6,5,42,42,42,42,33,147,148,7,6,43,43,43,43,33,1,0,54,55,44,44,44,44,33,2,0,1,21,45,45,45,45,33,150,149,8,9,46,46,46,46,33,151,150,9,10,47,47,47,47,33,152,151,10,11,48,48,48,48,33,153,152,11,12,49,49,49,49,33,154,153,12,13,50,50,50,50,33,48,126,125,51,51,51,51,51,33,49,48,51,52,52,52,52,52,33,50,49,52,53,53,53,53,53,33,0,50,53,54,54,54,54,54,33,3,4,52,51,55,55,55,55,33,4,5,53,52,56,56,56,56,33,5,6,54,53,57,57,57,57,33,6,7,55,54,58,58,58,58,33,63,62,130,129,59,59,59,59,33,64,63,129,128,60,60,60,60,33,65,64,128,127,61,61,61,61,32,56,66,65,62,62,62,32,65,127,120,63,63,63,32,65,120,56,64,64,64,33,67,66,56,57,65,65,65,65,33,68,67,57,58,66,66,66,66,33,69,68,58,59,67,67,67,67,33,70,69,59,60,68,68,68,68,33,30,29,63,64,69,69,69,69,33,31,30,64,65,70,70,70,70,33,32,31,65,66,71,71,71,71,33,33,32,66,67,72,72,72,72,33,34,33,67,68,73,73,73,73,33,35,34,68,69,74,74,74,74,33,36,35,69,70,75,75,75,75,33,37,36,70,71,76,76,76,76,33,83,82,72,73,77,77,77,77,33,84,83,73,74,78,78,78,78,33,85,84,74,75,79,79,79,79,33,86,85,75,76,80,80,80,80,33,87,86,76,77,81,81,81,81,33,88,87,77,78,82,82,82,82,33,89,88,78,79,83,83,83,83,33,90,89,79,80,84,84,84,84,33,91,90,80,81,85,85,85,85,33,9,8,82,83,46,46,46,46,33,10,9,83,84,86,86,86,86,33,11,10,84,85,87,87,87,87,33,12,11,85,86,49,49,49,49,33,13,12,86,87,88,88,88,88,33,14,13,87,88,89,89,89,89,33,15,14,88,89,90,90,90,90,33,16,15,89,90,91,91,91,91,33,17,16,90,91,39,39,39,39,33,94,257,255,92,92,92,92,92,33,93,256,258,95,93,93,93,93,33,92,255,256,93,94,94,94,94,32,37,71,95,95,95,95,32,258,158,17,96,96,96,32,17,91,81,97,97,97,32,17,81,47,97,97,97,32,37,95,258,98,98,98,32,258,17,47,99,99,99,32,37,258,47,100,100,100,32,21,1,55,97,97,97,32,55,7,148,101,101,101,32,257,94,61,102,102,102,32,257,61,27,102,102,102,32,21,55,148,103,103,103,32,257,27,21,104,104,104,32,21,148,257,105,105,105,33,28,131,133,62,106,106,106,106,32,103,139,136,107,107,107,33,104,103,136,135,108,108,108,108,33,105,104,135,134,109,109,109,109,33,106,105,134,132,110,110,110,110,32,28,38,106,111,111,111,32,106,132,131,112,112,112,32,106,131,28,113,113,113,33,106,38,72,110,114,114,114,114,33,105,106,110,109,115,115,115,115,33,104,105,109,108,116,116,116,116,33,103,104,108,107,117,117,117,117,33,288,259,96,118,118,118,118,118,33,261,260,97,98,119,119,119,119,33,262,261,98,99,120,120,120,120,33,263,262,99,100,121,121,121,121,33,264,263,100,101,122,122,122,122,33,265,264,101,102,123,123,123,123,33,149,265,102,8,124,124,124,124,32,62,133,130,125,125,125,33,119,111,142,141,107,107,107,107,33,113,112,140,138,126,126,126,126,32,107,114,113,127,127,127,32,113,138,137,128,128,128,32,113,137,107,129,129,129,33,115,114,107,108,107,107,107,107,33,116,115,108,109,130,130,130,130,33,117,116,109,110,131,131,131,131,33,82,117,110,72,132,132,132,132,33,118,96,111,119,118,118,118,118,33,98,97,112,113,119,119,119,119,33,99,98,113,114,133,133,133,133,33,100,99,114,115,134,134,134,134,33,101,100,115,116,122,122,122,122,33,102,101,116,117,123,123,123,123,33,8,102,117,82,124,124,124,124,33,97,118,119,112,135,135,135,135,33,112,119,141,140,136,136,136,136,33,260,288,118,97,137,137,137,137,32,259,143,142,138,138,138,32,142,111,96,139,139,139,32,142,96,259,139,139,139,33,125,124,3,51,140,140,140,140,33,124,291,144,3,141,141,141,141,33,120,123,22,56,142,142,142,142,33,137,139,103,107,143,143,143,143,32,93,95,71,144,144,144,32,60,61,94,145,145,145,32,60,94,92,146,146,146,32,93,71,70,147,147,147,32,60,92,93,148,148,148,32,93,70,60,149,149,149,33,161,159,209,179,0,0,0,0,33,179,209,208,178,1,1,1,1,33,178,208,207,177,2,2,2,2,33,177,207,298,293,3,3,3,3,32,181,294,295,150,150,150,32,181,182,177,151,151,151,32,177,293,294,152,152,152,32,177,294,181,153,153,153,33,183,178,177,182,154,154,154,154,33,184,179,178,183,155,155,155,155,33,185,161,179,184,156,156,156,156,33,186,180,161,185,157,157,157,157,33,188,222,221,187,12,12,12,12,33,185,219,220,186,13,13,13,13,33,184,218,219,185,14,14,14,14,33,183,217,218,184,15,15,15,15,33,182,216,217,183,16,16,16,16,33,181,215,216,182,17,17,17,17,33,198,188,187,197,158,158,158,158,33,199,189,188,198,159,159,159,159,33,200,190,189,199,160,160,160,160,33,201,191,190,200,161,161,161,161,33,202,192,191,201,162,162,162,162,33,203,193,192,202,163,163,163,163,33,204,194,193,203,164,164,164,164,33,205,195,194,204,165,165,165,165,33,206,196,195,205,166,166,166,166,33,205,239,240,206,27,27,27,27,33,204,238,239,205,28,28,28,28,33,203,237,238,204,29,29,29,29,33,202,236,237,203,30,30,30,30,33,201,235,236,202,31,31,31,31,33,200,234,235,201,32,32,32,32,33,199,233,234,200,33,33,33,33,33,198,232,233,199,34,34,34,34,33,197,231,232,198,35,35,35,35,33,155,173,172,154,36,36,36,36,33,156,174,173,155,37,37,37,37,33,157,175,174,156,38,38,38,38,33,158,176,175,157,39,39,39,39,33,144,162,163,145,40,40,40,40,33,145,163,164,146,41,41,41,41,33,146,164,165,147,42,42,42,42,33,147,165,166,148,167,167,167,167,33,213,159,160,214,168,168,168,168,33,161,180,160,159,45,45,45,45,33,150,168,167,149,46,46,46,46,33,151,169,168,150,47,47,47,47,33,152,170,169,151,48,48,48,48,33,153,171,170,152,49,49,49,49,33,154,172,171,153,50,50,50,50,33,207,210,297,298,169,169,169,169,33,208,211,210,207,170,170,170,170,33,209,212,211,208,171,171,171,171,33,159,213,212,209,172,172,172,172,33,162,210,211,163,55,55,55,55,33,163,211,212,164,56,56,56,56,33,164,212,213,165,57,57,57,57,33,165,213,214,166,58,58,58,58,33,222,301,302,221,169,169,169,169,33,223,300,301,222,173,173,173,173,33,224,299,300,223,174,174,174,174,32,224,225,215,175,175,175,32,215,292,299,169,169,169,32,215,299,224,176,176,176,33,226,216,215,225,177,177,177,177,33,227,217,216,226,178,178,178,178,33,228,218,217,227,179,179,179,179,33,229,219,218,228,180,180,180,180,33,189,223,222,188,69,69,69,69,33,190,224,223,189,70,70,70,70,33,191,225,224,190,71,71,71,71,33,192,226,225,191,72,72,72,72,33,193,227,226,192,73,73,73,73,33,194,228,227,193,74,74,74,74,33,195,229,228,194,75,75,75,75,33,196,230,229,195,76,76,76,76,33,242,232,231,241,181,181,181,181,33,243,233,232,242,169,169,169,169,33,244,234,233,243,182,182,182,182,33,245,235,234,244,181,181,181,181,33,246,236,235,245,183,183,183,183,33,247,237,236,246,169,169,169,169,33,248,238,237,247,184,184,184,184,33,249,239,238,248,181,181,181,181,33,250,240,239,249,185,185,185,185,33,168,242,241,167,46,46,46,46,33,169,243,242,168,86,86,86,86,33,170,244,243,169,87,87,87,87,33,171,245,244,170,49,49,49,49,33,172,246,245,171,186,186,186,186,33,173,247,246,172,187,187,187,187,33,174,248,247,173,90,90,90,90,33,175,249,248,174,91,91,91,91,33,176,250,249,175,39,39,39,39,33,253,251,255,257,92,92,92,92,33,252,254,258,256,93,93,93,93,33,251,252,256,255,94,94,94,94,32,206,240,250,97,97,97,32,250,176,158,188,188,188,32,258,254,230,98,98,98,32,258,230,196,98,98,98,32,206,250,158,97,97,97,32,258,196,206,189,189,189,32,206,158,258,190,190,190,32,186,220,253,102,102,102,32,257,148,166,191,191,191,32,166,214,160,192,192,192,32,166,160,180,97,97,97,32,186,253,257,193,193,193,32,166,180,186,194,194,194,32,186,257,166,195,195,195,33,187,221,305,303,106,106,106,106,32,273,308,311,196,196,196,33,274,307,308,273,197,197,197,197,33,275,306,307,274,198,198,198,198,33,276,304,306,275,199,199,199,199,32,276,197,187,200,200,200,32,187,303,304,201,201,201,32,187,304,276,202,202,202,33,276,280,231,197,114,114,114,114,33,275,279,280,276,115,115,115,115,33,274,278,279,275,116,116,116,116,33,273,277,278,274,117,117,117,117,33,288,289,266,259,203,203,203,203,33,261,268,267,260,119,119,119,119,33,262,269,268,261,120,120,120,120,33,263,270,269,262,121,121,121,121,33,264,271,270,263,122,122,122,122,33,265,272,271,264,123,123,123,123,33,149,167,272,265,124,124,124,124,32,221,302,305,196,196,196,33,290,313,314,281,169,169,169,169,33,283,310,312,282,181,181,181,181,32,283,284,277,204,204,204,32,277,309,310,169,169,169,32,277,310,283,169,169,169,33,285,278,277,284,169,169,169,169,33,286,279,278,285,169,169,169,169,33,287,280,279,286,205,205,205,205,33,241,231,280,287,206,206,206,206,33,289,290,281,266,203,203,203,203,33,268,283,282,267,119,119,119,119,33,269,284,283,268,133,133,133,133,33,270,285,284,269,134,134,134,134,33,271,286,285,270,122,122,122,122,33,272,287,286,271,207,207,207,207,33,167,241,287,272,124,124,124,124,33,267,282,290,289,135,135,135,135,33,282,312,313,290,169,169,169,169,33,260,267,289,288,137,137,137,137,32,314,143,259,208,208,208,32,266,281,314,139,139,139,32,259,266,314,139,139,139,33,297,210,162,296,140,140,140,140,33,296,162,144,291,141,141,141,141,33,292,215,181,295,142,142,142,142,33,309,277,273,311,143,143,143,143,32,251,253,220,209,209,209,32,229,230,254,209,209,209,32,229,254,252,210,210,210,32,251,220,219,211,211,211,32,229,252,251,212,212,212,32,251,219,229,213,213,213]},\"straight_f\":{\"vertices\":[53.75,-4,19,53.75,-4,17.5,53.75,-4,9.50001,9.25002,-4,8.00001,53.75,-4,6.50001,53.75,-0.999999,17.5,53.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.50001,0.25,-1,9.49999,0.25,-0.999999,17.5,44.75,-4,8.00001,53.75,-4,-19,9.25002,-4,1.15241e-7,53.75,-4,-17.5,53.75,-4,-9.50001,9.25002,-4,-8.00001,53.75,-4,-6.50001,53.75,-1,-17.5,53.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.50001,0.25,-1,-9.49999,0.25,-1,-17.5,44.75,-4,-8.00001,44.75,-4,1.15241e-7,53.75,4,19,53.75,4,17.5,53.75,4,9.50001,9.25002,4,8.00001,53.75,4,6.50001,53.75,1,17.5,53.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.50001,0.25,1,9.49999,0.25,1,17.5,44.75,4,8.00001,53.75,8.30517e-7,19,9.25002,3.49691e-7,8.00001,0.25,8.30515e-7,19,0.25,2.84124e-7,6.50001,53.75,2.84124e-7,6.50001,44.75,3.49691e-7,8.00001,53.75,4,-19,9.25002,4,-2.3445e-7,53.75,4,-17.5,53.75,4,-9.50001,9.25002,4,-8.00001,53.75,4,-6.50001,53.75,0.999999,-17.5,53.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.50001,0.25,1,-9.49999,0.25,0.999999,-17.5,44.75,4,-8.00001,44.75,4,-2.3445e-7,53.75,-8.30517e-7,-19,9.25002,-2.6054e-15,-5.96046e-8,9.25002,-3.49691e-7,-8.00001,0.25,-8.30515e-7,-19,0.25,-2.84124e-7,-6.50001,53.75,-2.84124e-7,-6.50001,44.75,-2.6054e-15,-5.96046e-8,44.75,-3.49691e-7,-8.00001],\"normals\":[-1.96562e-14,-1,4.47036e-8,-6.41724e-7,0,1,-4.27816e-7,-0.00000349681,1,0,-1,0,6.41724e-7,0,-1,0.164399,0,-0.986394,0,-1,2.98023e-8,1.32455e-8,-1,7.94729e-8,-1.60122e-15,-1,2.98023e-8,-1.32456e-8,-1,7.94738e-8,-9.91665e-14,-1,1.58947e-7,-8.54004e-15,-1,1.58949e-7,-0.164399,0,-0.986394,1,0,0,1,0,0,1,0,0,-1,-1.19209e-7,-5.96046e-8,-1,0,0,-1,0,0,-1,0,0,-1,0,0,1.96562e-14,-1,4.47036e-8,-6.41724e-7,0,-1,-4.27816e-7,-0.00000349681,-1,6.41724e-7,0,1,0.164399,0,0.986394,0,-1,5.96046e-8,3.20244e-15,-1,5.96046e-8,0,-1,0,-0.164399,0,0.986394,1,0,0,-1,-1.19209e-7,5.96046e-8,-1,0,0,1.96562e-14,1,-4.47036e-8,-4.27816e-7,0.00000349681,1,0,1,0,0,1,-5.96046e-8,3.20244e-15,1,-5.96046e-8,0,1,0,0,1,0,1,0,0,1,0,0,-1,1.19209e-7,-5.96046e-8,-1.96562e-14,1,-4.47036e-8,-4.27816e-7,0.00000349681,-1,0,1,-2.98023e-8,1.32455e-8,1,-7.94729e-8,-1.60122e-15,1,-2.98023e-8,-1.32456e-8,1,-7.94738e-8,-9.91665e-14,1,-1.58947e-7,-8.54004e-15,1,-1.58949e-7,-1,1.19209e-7,5.96046e-8,-1,0,0],\"uvs\":[],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":74,\"version\":3,\"normals\":53,\"type\":\"Geometry\",\"faces\":108},\"faces\":[33,5,12,11,6,0,0,0,0,33,7,0,44,46,1,1,1,1,33,6,11,9,2,2,2,2,2,33,0,7,8,1,3,3,3,3,33,1,8,12,5,4,4,4,4,33,45,3,10,47,5,5,5,5,32,3,15,29,6,6,6,32,13,4,2,7,7,7,32,3,29,13,8,8,8,32,9,10,3,9,9,9,32,13,2,9,10,10,10,32,13,9,3,11,11,11,33,48,4,13,49,12,12,12,12,32,44,0,1,13,13,13,32,44,1,5,14,14,14,32,2,4,48,14,14,14,32,44,5,6,13,13,13,32,6,2,48,14,14,14,32,6,48,44,15,15,15,33,3,45,67,15,16,16,16,16,33,29,72,49,13,13,13,13,13,32,12,8,7,17,17,17,32,47,10,9,18,18,18,32,47,9,11,19,19,19,32,12,7,46,20,20,20,32,47,11,12,19,19,19,32,46,47,12,17,17,17,33,20,21,26,27,21,21,21,21,33,66,14,22,69,22,22,22,22,33,21,17,24,26,23,23,23,23,33,14,16,23,22,3,3,3,3,33,16,20,27,23,24,24,24,24,33,68,70,25,18,25,25,25,25,32,29,15,18,26,26,26,32,18,25,24,3,3,3,32,17,19,28,3,3,3,32,28,29,18,27,27,27,32,18,24,17,3,3,3,32,18,17,28,28,28,28,33,71,73,28,19,29,29,29,29,32,16,14,66,14,14,14,32,71,19,17,13,13,13,32,71,17,21,14,14,14,32,20,16,66,14,14,14,32,71,21,20,13,13,13,32,66,71,20,30,30,30,33,18,15,67,68,31,31,31,31,33,29,28,73,72,13,13,13,13,32,22,23,27,20,20,20,32,26,24,25,17,17,17,32,69,22,27,19,19,19,32,26,25,70,20,20,20,32,69,27,26,19,19,19,32,26,70,69,32,32,32,33,35,36,41,42,33,33,33,33,33,44,30,37,46,1,1,1,1,33,36,32,39,41,34,34,34,34,33,30,31,38,37,35,35,35,35,33,31,35,42,38,4,4,4,4,33,45,47,40,33,5,5,5,5,32,65,51,33,36,36,36,32,33,40,39,35,35,35,32,32,34,43,35,35,35,32,43,65,33,37,37,37,32,33,39,32,38,38,38,32,33,32,43,39,39,39,33,48,49,43,34,12,12,12,12,32,31,30,44,40,40,40,32,48,34,32,13,13,13,32,48,32,36,40,40,40,32,35,31,44,13,13,13,32,48,36,35,13,13,13,32,44,48,35,41,41,41,33,33,51,67,45,42,42,42,42,33,65,43,49,72,40,40,40,40,32,37,38,42,17,17,17,32,41,39,40,17,17,17,32,46,37,42,17,17,17,32,41,40,47,17,17,17,32,46,42,41,17,17,17,32,41,47,46,19,19,19,33,56,63,62,57,43,43,43,43,33,66,69,58,50,22,22,22,22,33,57,62,60,53,44,44,44,44,33,50,58,59,52,38,38,38,38,33,52,59,63,56,24,24,24,24,33,68,54,61,70,25,25,25,25,32,54,51,65,45,45,45,32,64,55,53,46,46,46,32,54,65,64,47,47,47,32,60,61,54,48,48,48,32,64,53,60,49,49,49,32,64,60,54,50,50,50,33,71,55,64,73,29,29,29,29,32,66,50,52,13,13,13,32,66,52,56,40,40,40,32,53,55,71,40,40,40,32,66,56,57,13,13,13,32,57,53,71,13,13,13,32,57,71,66,30,30,30,33,54,68,67,51,51,51,51,51,33,65,72,73,64,14,14,14,14,32,63,59,58,17,17,17,32,70,61,60,52,52,52,32,70,60,62,17,17,17,32,63,58,69,17,17,17,32,70,62,63,17,17,17,32,69,70,63,32,32,32]},\"straight_m\":{\"normals\":[-1.96562e-14,-1,4.47036e-8,-6.41724e-7,0,1,-4.27816e-7,-0.00000349681,1,0,-1,0,6.41724e-7,0,-1,0.164399,0,0.986394,-5.2982e-9,-1,3.17891e-8,-4.24997e-14,-1,6.81196e-8,5.29819e-9,-1,3.17891e-8,-6.07145e-16,-1,6.81203e-8,0,-1,3.97364e-8,-3.54164e-16,-1,3.97364e-8,-0.164399,0,0.986394,1,0,0,1,0,0,-1,-1.19209e-7,-6.35782e-8,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,1.96562e-14,-1,4.47036e-8,-6.41724e-7,0,-1,-4.27816e-7,-0.00000349681,-1,6.41724e-7,0,1,0.164399,0,-0.986394,-1.05964e-8,-1,6.35782e-8,1.05964e-8,-1,6.35782e-8,0,-1,0,0,-1,7.94727e-8,7.08328e-16,-1,7.94727e-8,-0.164399,0,-0.986394,1,0,0,-1,-1.19209e-7,6.35782e-8,-1,0,0,-1,0,0,1.96562e-14,1,-4.47036e-8,-4.27816e-7,0.00000349681,1,0,1,0,-1.05964e-8,1,-6.35782e-8,0,1,0,1.05964e-8,1,-6.35782e-8,0,1,0,0,1,-7.94727e-8,7.08328e-16,1,-7.94727e-8,-1,1.19209e-7,-6.35782e-8,1,0,0,-1,0,0,-1.96562e-14,1,-4.47036e-8,-4.27816e-7,0.00000349681,-1,-5.2982e-9,1,-3.17891e-8,-4.24997e-14,1,-6.81196e-8,5.29819e-9,1,-3.17891e-8,-6.07145e-16,1,-6.81203e-8,0,1,-3.97364e-8,-3.54164e-16,1,-3.97364e-8,-1,1.19209e-7,6.35782e-8,1,0,0],\"faces\":[33,5,12,11,6,0,0,0,0,33,7,0,44,46,1,1,1,1,33,6,11,9,2,2,2,2,2,33,0,7,8,1,3,3,3,3,33,1,8,12,5,4,4,4,4,33,45,3,10,47,5,5,5,5,32,29,13,4,6,6,6,32,4,2,9,7,7,7,32,10,3,15,8,8,8,32,4,9,10,9,9,9,32,15,29,4,10,10,10,32,15,4,10,11,11,11,33,48,4,13,49,12,12,12,12,32,44,0,1,13,13,13,32,44,1,5,14,14,14,32,2,4,48,14,14,14,32,44,5,6,13,13,13,32,6,2,48,14,14,14,32,6,48,44,13,13,13,33,3,45,67,15,15,15,15,15,33,29,72,49,13,16,16,16,16,32,12,8,7,17,17,17,32,47,10,9,18,18,18,32,47,9,11,18,18,18,32,12,7,46,19,19,19,32,47,11,12,18,18,18,32,46,47,12,20,20,20,33,20,21,26,27,21,21,21,21,33,66,14,22,69,22,22,22,22,33,21,17,24,26,23,23,23,23,33,14,16,23,22,3,3,3,3,33,16,20,27,23,24,24,24,24,33,68,70,25,18,25,25,25,25,32,15,18,25,26,26,26,32,25,24,17,3,3,3,32,19,28,29,27,27,27,32,25,17,19,28,28,28,32,29,15,25,29,29,29,32,25,19,29,30,30,30,33,71,73,28,19,31,31,31,31,32,16,14,66,14,14,14,32,71,19,17,13,13,13,32,71,17,21,14,14,14,32,20,16,66,14,14,14,32,71,21,20,13,13,13,32,66,71,20,32,32,32,33,18,15,67,68,33,33,33,33,33,29,28,73,72,16,16,16,16,32,22,23,27,19,19,19,32,26,24,25,20,20,20,32,69,22,27,18,18,18,32,26,25,70,34,34,34,32,69,27,26,18,18,18,32,26,70,69,35,35,35,33,35,36,41,42,36,36,36,36,33,44,30,37,46,1,1,1,1,33,36,32,39,41,37,37,37,37,33,30,31,38,37,38,38,38,38,33,31,35,42,38,4,4,4,4,33,45,47,40,33,5,5,5,5,32,51,33,40,39,39,39,32,40,39,32,40,40,40,32,34,43,65,41,41,41,32,40,32,34,42,42,42,32,65,51,40,43,43,43,32,40,34,65,44,44,44,33,48,49,43,34,12,12,12,12,32,31,30,44,32,32,32,32,48,34,32,13,13,13,32,48,32,36,32,32,32,32,35,31,44,13,13,13,32,48,36,35,13,13,13,32,44,48,35,14,14,14,33,33,51,67,45,45,45,45,45,33,65,43,49,72,46,46,46,46,32,37,38,42,17,17,17,32,41,39,40,20,20,20,32,46,37,42,17,17,17,32,41,40,47,20,20,20,32,46,42,41,17,17,17,32,41,47,46,47,47,47,33,56,63,62,57,48,48,48,48,33,66,69,58,50,22,22,22,22,33,57,62,60,53,49,49,49,49,33,50,58,59,52,40,40,40,40,33,52,59,63,56,24,24,24,24,33,68,54,61,70,25,25,25,25,32,65,64,55,50,50,50,32,55,53,60,51,51,51,32,61,54,51,52,52,52,32,55,60,61,53,53,53,32,51,65,55,54,54,54,32,51,55,61,55,55,55,33,71,55,64,73,31,31,31,31,32,66,50,52,13,13,13,32,66,52,56,32,32,32,32,53,55,71,32,32,32,32,66,56,57,13,13,13,32,57,53,71,13,13,13,32,57,71,66,32,32,32,33,54,68,67,51,56,56,56,56,33,65,72,73,64,57,57,57,57,32,63,59,58,17,17,17,32,70,61,60,17,17,17,32,70,60,62,17,17,17,32,63,58,69,17,17,17,32,70,62,63,17,17,17,32,69,70,63,35,35,35],\"uvs\":[],\"vertices\":[53.75,-4,19,53.75,-4,17.5,53.75,-4,9.50001,-8.74998,-4,7.50001,53.75,-4,6.00001,53.75,-0.999999,17.5,53.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.00001,0.25,-1,9.49999,0.25,-0.999999,17.5,62.75,-4,7.50001,53.75,-4,-19,-8.74998,-4,1.15241e-7,53.75,-4,-17.5,53.75,-4,-9.50001,-8.74998,-4,-7.50001,53.75,-4,-6.00001,53.75,-1,-17.5,53.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.00001,0.25,-1,-9.49999,0.25,-1,-17.5,62.75,-4,-7.50001,62.75,-4,1.15241e-7,53.75,4,19,53.75,4,17.5,53.75,4,9.50001,-8.74998,4,7.50001,53.75,4,6.00001,53.75,1,17.5,53.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.00001,0.25,1,9.49999,0.25,1,17.5,62.75,4,7.50001,53.75,8.30517e-7,19,-8.74998,3.27836e-7,7.50001,0.25,8.30515e-7,19,0.25,2.62269e-7,6.00001,53.75,2.62269e-7,6.00001,62.75,3.27836e-7,7.50001,53.75,4,-19,-8.74998,4,-2.3445e-7,53.75,4,-17.5,53.75,4,-9.50001,-8.74998,4,-7.50001,53.75,4,-6.00001,53.75,0.999999,-17.5,53.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.00001,0.25,1,-9.49999,0.25,0.999999,-17.5,62.75,4,-7.50001,62.75,4,-2.3445e-7,53.75,-8.30517e-7,-19,-8.74998,-2.6054e-15,-5.96046e-8,-8.74998,-3.27836e-7,-7.50001,0.25,-8.30515e-7,-19,0.25,-2.62269e-7,-6.00001,53.75,-2.62269e-7,-6.00001,62.75,-2.6054e-15,-5.96046e-8,62.75,-3.27836e-7,-7.50001],\"metadata\":{\"uvs\":0,\"generator\":\"io_three\",\"normals\":58,\"vertices\":74,\"version\":3,\"faces\":108,\"type\":\"Geometry\"}},\"pier_4\":{\"normals\":[-1,0,0,0,0,-1,1,0,0,0,0,1,0,-1,4.5174e-8,0,1,-4.01547e-8],\"faces\":[33,0,1,3,2,0,0,0,0,33,2,3,7,6,1,1,1,1,33,6,7,5,4,2,2,2,2,33,1,0,4,5,3,3,3,3,33,4,0,2,6,4,4,4,4,33,7,3,1,5,5,5,5,5],\"uvs\":[],\"vertices\":[-7.5,-4,47.5,-7.5,12,47.5,-7.5,-4,-47.5,-7.5,12,-47.5,7.5,-4,47.5,7.5,12,47.5,7.5,-4,-47.5,7.5,12,-47.5],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":8,\"version\":3,\"normals\":6,\"type\":\"Geometry\",\"faces\":6}},\"stop\":{\"normals\":[-4.87984e-15,-1,4.47035e-8,-1.52153e-7,-1.65834e-13,1,-1.0621e-7,-0.00000349681,1,0,-1,0,0,-1,5.01934e-8,-1.91477e-14,-1,5.01934e-8,0,-1,0,-7.18021e-15,-1,5.01934e-8,1.59314e-7,0,-1,0.164399,0,-0.986394,0,-1,2.98023e-8,-5.29819e-9,-1,3.17891e-8,-1.0551e-14,-1,6.81196e-8,-1.32456e-8,-1,7.94738e-8,3.90529e-10,-1,4.03222e-8,1.63444e-9,-1,1.68756e-7,-0.164399,0,0.986394,1,0,0,1,0,0,-1,-1.19209e-7,-5.96046e-8,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-3.81469e-7,2.25554e-11,1,0.884918,0.00000257619,0.465746,-1.73889e-7,4.97501e-13,1,-0.884918,0.00000257619,0.465746,0,0,1,4.87984e-15,-1,4.47035e-8,-1.52153e-7,-1.65834e-13,-1,-1.0621e-7,-0.00000349681,-1,0,-1,0,1.59314e-7,0,1,0.164399,0,0.986394,0,-1,5.96046e-8,1.05964e-8,-1,6.35782e-8,2.84681e-9,-1,-1.70813e-8,-1.32296e-9,-1,8.14572e-8,-0.164399,0,-0.986394,1,0,0,-1,-1.19209e-7,5.96046e-8,-1,0,0,-1.90734e-7,1.12777e-11,-1,7.62939e-7,2.18279e-12,-1,-1.73889e-7,4.97501e-13,-1,-9.53674e-7,2.72848e-12,-1,-1.90735e-7,1.0914e-11,-1,4.87984e-15,1,-4.47035e-8,-1.52153e-7,1.65834e-13,1,-1.0621e-7,0.00000349681,1,0,1,0,0,1,0,0,1,9.53672e-7,0,1,0,-8.44683e-7,1,-0.00000115803,0,1,0,-1.36424e-13,1,9.53673e-7,0,1,-5.96046e-8,1.05964e-8,1,-6.35782e-8,2.84681e-9,1,1.70813e-8,-1.32296e-9,1,-8.14572e-8,-1,1.19209e-7,-5.96046e-8,1,0,0,-3.81469e-7,-2.25554e-11,1,0.884918,-0.00000257619,0.465746,-1.73889e-7,-4.97501e-13,1,-0.884918,-0.00000257619,0.465746,0,0,1,-4.87984e-15,1,-4.47035e-8,-1.52153e-7,1.65834e-13,-1,-1.0621e-7,0.00000349681,-1,0,1,-2.98023e-8,-5.29819e-9,1,-3.17891e-8,-1.0551e-14,1,-6.81196e-8,-1.32456e-8,1,-7.94738e-8,3.90529e-10,1,-4.03222e-8,1.63444e-9,1,-1.68756e-7,-1,1.19209e-7,5.96046e-8,1,0,0,-1,0,0,-1.90734e-7,-1.12777e-11,-1,7.62939e-7,-2.18279e-12,-1,-1.73889e-7,-4.97501e-13,-1,-9.53674e-7,-2.72848e-12,-1,-1.90735e-7,-1.0914e-11,-1,9.53675e-7,1,4.76837e-7,2.17982e-7,1,4.08717e-7,-5.48363e-7,1,4.76837e-7,0.00000165104,1,-8.94067e-7,1.7053e-13,1,-8.9407e-7,-2.86102e-7,1,-2.72478e-7,0,0,-1,0,0,1],\"metadata\":{\"uvs\":0,\"generator\":\"io_three\",\"faces\":163,\"vertices\":112,\"version\":3,\"normals\":95,\"type\":\"Geometry\"},\"uvs\":[],\"vertices\":[215.75,-4,19,215.75,-4,17.5,215.75,-4,9.50001,9.25002,-4,8.00001,215.75,-4,6.00001,215.75,-0.999999,17.5,215.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.50001,0.25,-1,9.49999,0.25,-0.999999,17.5,224.75,-4,7.50001,108,-4,38,128,-4,19,88,-4,19,98,-4,38,118,-4,38,215.75,-4,-19,9.25002,-4,1.15241e-7,215.75,-4,-17.5,215.75,-4,-9.50001,9.25002,-4,-8.00001,215.75,-4,-6.00001,215.75,-1,-17.5,215.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.50001,0.25,-1,-9.49999,0.25,-1,-17.5,224.75,-4,-7.50001,224.75,-4,1.15241e-7,108,-4,-19,128,-4,-19,88,-4,-19,98,-4,-19,118,-4,-19,215.75,4,19,215.75,4,17.5,215.75,4,9.50001,9.25002,4,8.00001,215.75,4,6.00001,215.75,1,17.5,215.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.50001,0.25,1,9.49999,0.25,1,17.5,224.75,4,7.50001,215.75,8.30517e-7,19,9.25002,3.49691e-7,8.00001,0.25,2.84124e-7,6.50001,0.25,8.30515e-7,19,215.75,2.62269e-7,6.00001,224.75,3.27836e-7,7.50001,108,4,38,108,0.00000166103,38,128,4,19,128,8.30516e-7,19,88,4,19,88,8.30516e-7,19,98,4,38,98,0.00000166103,38,118,4,38,118,0.00000166103,38,215.75,4,-19,9.25002,4,-2.3445e-7,215.75,4,-17.5,215.75,4,-9.50001,9.25002,4,-8.00001,215.75,4,-6.00001,215.75,0.999999,-17.5,215.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.50001,0.25,1,-9.49999,0.25,0.999999,-17.5,224.75,4,-7.50001,224.75,4,-2.3445e-7,215.75,-8.30517e-7,-19,9.25002,-2.6054e-15,-5.96046e-8,9.25002,-3.49691e-7,-8.00001,0.25,-2.84124e-7,-6.50001,0.25,-8.30515e-7,-19,215.75,-2.62269e-7,-6.00001,224.75,-2.6054e-15,-5.96046e-8,224.75,-3.27836e-7,-7.50001,108,4,-19,108,-8.30517e-7,-19,128,4,-19,128,-8.30516e-7,-19,88,4,-19,88,-8.30516e-7,-19,98,4,-19,98,-8.30516e-7,-19,118,4,-19,118,-8.30517e-7,-19,98,4,23,98,3.99999,30,118,4.00001,30,118,4,23,98,14,23,98,14,30,118,14,30,118,14,23],\"faces\":[33,5,12,11,6,0,0,0,0,33,15,0,54,63,1,1,1,1,33,6,11,9,2,2,2,2,2,32,1,0,15,3,3,3,32,15,18,14,4,4,4,32,14,17,16,5,5,5,32,16,7,8,3,3,3,32,8,1,15,6,6,6,32,15,14,16,7,7,7,32,15,16,8,3,3,3,33,1,8,12,5,8,8,8,8,33,55,3,10,56,9,9,9,9,32,3,20,34,10,10,10,32,34,13,4,11,11,11,32,4,2,9,12,12,12,32,9,10,3,13,13,13,32,3,34,4,14,14,14,32,4,9,3,15,15,15,33,58,4,13,59,16,16,16,16,32,54,0,1,17,17,17,32,54,1,5,18,18,18,32,2,4,58,18,18,18,32,54,5,6,17,17,17,32,6,2,58,18,18,18,32,6,58,54,17,17,17,33,3,55,87,20,19,19,19,19,33,34,92,59,13,20,20,20,20,32,12,8,7,21,21,21,32,56,10,9,22,22,22,32,56,9,11,23,23,23,32,12,7,57,24,24,24,32,56,11,12,23,23,23,32,57,56,12,21,21,21,33,14,61,67,17,25,25,25,25,33,15,63,69,18,26,26,26,26,33,16,65,57,7,27,27,27,27,33,17,67,65,16,28,28,28,28,33,18,69,61,14,29,29,29,29,33,25,26,31,32,30,30,30,30,33,86,19,36,97,31,31,31,31,33,26,22,29,31,32,32,32,32,32,36,19,21,33,33,33,32,21,28,27,3,3,3,32,37,38,35,3,3,3,32,21,27,37,3,3,3,32,39,36,21,3,3,3,32,37,35,39,3,3,3,32,21,37,39,3,3,3,33,21,25,32,28,34,34,34,34,33,88,89,30,23,35,35,35,35,32,34,20,23,36,36,36,32,23,30,29,3,3,3,32,29,22,24,33,33,33,32,24,33,34,37,37,37,32,34,23,29,38,38,38,32,29,24,34,39,39,39,33,91,93,33,24,40,40,40,40,32,21,19,86,18,18,18,32,91,24,22,17,17,17,32,91,22,26,18,18,18,32,25,21,86,18,18,18,32,91,26,25,17,17,17,32,86,91,25,41,41,41,33,23,20,87,88,42,42,42,42,33,34,33,93,92,20,20,20,20,32,27,28,32,24,24,24,32,31,29,30,21,21,21,32,90,27,32,23,23,23,32,31,30,89,24,24,24,32,90,32,31,23,23,23,32,31,89,90,43,43,43,33,35,38,101,95,44,44,44,44,33,36,39,103,97,45,45,45,45,33,37,27,90,99,46,46,46,46,33,38,37,99,101,47,47,47,47,33,39,35,95,103,48,48,48,48,33,45,46,51,52,49,49,49,49,33,54,40,62,63,50,50,50,50,33,46,42,49,51,51,51,51,51,32,62,40,41,52,52,52,32,41,48,47,53,53,53,32,64,104,107,54,54,54,32,41,47,64,55,55,55,32,107,106,62,56,56,56,32,62,41,64,57,57,57,32,64,107,62,58,58,58,33,41,45,52,48,8,8,8,8,33,55,56,50,43,9,9,9,9,32,85,71,43,59,59,59,32,43,50,49,53,53,53,32,49,42,44,52,52,52,32,44,53,85,60,60,60,32,85,43,49,61,61,61,32,49,44,85,62,62,62,33,58,59,53,44,16,16,16,16,32,41,40,54,41,41,41,32,58,44,42,17,17,17,32,58,42,46,41,41,41,32,45,41,54,17,17,17,32,58,46,45,17,17,17,32,54,58,45,18,18,18,33,43,71,87,55,63,63,63,63,33,85,53,59,92,64,64,64,64,32,47,48,52,21,21,21,32,51,49,50,21,21,21,32,57,47,52,21,21,21,32,51,50,56,21,21,21,32,57,52,51,21,21,21,32,51,56,57,23,23,23,33,60,66,67,61,65,65,65,65,33,62,68,69,63,66,66,66,66,33,64,47,57,65,67,67,67,67,33,66,64,65,67,68,68,68,68,33,68,60,61,69,69,69,69,69,33,76,83,82,77,70,70,70,70,33,86,97,96,70,71,71,71,71,33,77,82,80,73,72,72,72,72,32,72,70,96,53,53,53,32,96,102,94,53,53,53,32,94,100,98,55,55,55,32,98,78,79,55,55,55,32,79,72,96,52,52,52,32,96,94,98,53,53,53,32,96,98,79,55,55,55,33,72,79,83,76,34,34,34,34,33,88,74,81,89,35,35,35,35,32,74,71,85,73,73,73,32,85,84,75,74,74,74,32,75,73,80,75,75,75,32,80,81,74,76,76,76,32,74,85,75,77,77,77,32,75,80,74,78,78,78,33,91,75,84,93,40,40,40,40,32,86,70,72,17,17,17,32,86,72,76,41,41,41,32,73,75,91,41,41,41,32,86,76,77,17,17,17,32,77,73,91,17,17,17,32,77,91,86,41,41,41,33,74,88,87,71,79,79,79,79,33,85,92,93,84,80,80,80,80,32,83,79,78,21,21,21,32,89,81,80,81,81,81,32,89,80,82,21,21,21,32,83,78,90,21,21,21,32,89,82,83,21,21,21,32,90,89,83,43,43,43,33,94,95,101,100,82,82,82,82,33,96,97,103,102,83,83,83,83,33,98,99,90,78,84,84,84,84,33,100,101,99,98,85,85,85,85,33,102,103,95,94,86,86,86,86,32,68,62,106,87,87,87,32,105,104,64,88,88,88,32,68,106,105,89,89,89,32,66,60,68,55,55,55,32,105,64,66,90,90,90,32,105,66,68,91,91,91,33,106,107,111,110,17,17,17,17,33,108,109,110,111,92,92,92,92,33,104,105,109,108,43,43,43,43,33,107,104,108,111,93,93,93,93,33,105,106,110,109,94,94,94,94]},\"autopoint_ab\":{\"normals\":[0,0,1,0,0,-1,-0.332687,0,0.943037,-0.332686,0,0.943038,-0.332682,0.00000507633,0.943039,-0.332687,-0.0000050764,0.943037,-0.332686,0,0.943038,-0.332685,0,0.943038,3.79465e-7,0,1,-0.253266,0,0.967397,-0.391548,0,0.920158,-0.391548,0,0.920158,-0.391548,-5.48457e-8,0.920158,-0.391548,0,0.920158,-0.391548,0,0.920158,-0.155401,0,0.987851,-0.430179,-4.03558e-8,0.902744,-0.429172,-5.38363e-8,0.903223,-0.430179,-4.48398e-8,0.902744,-0.430179,-4.48398e-8,0.902744,-0.429172,-2.75711e-8,0.903223,-0.430179,-2.69039e-8,0.902744,-0.046112,0,0.998936,-0.0461121,0,0.998936,-0.046112,0,0.998936,-0.046112,0,0.998936,0,0,-1,0,0,-1,-3.58797e-7,0,-1,0,0,-1,-3.58797e-7,0,-1,0,1,0,-2.70486e-7,-0.00000211255,-1,0,0,-1,0.534993,0,0.844856,0.534993,0,0.844856,0.534998,0,0.844853,0.534993,0,0.844856,0.534998,0,0.844853,0,-1,0,3.01586e-13,-1,7.94767e-7,-4.2768e-13,-1,-0.00000119198,1.4717e-8,-1,2.59794e-8,0,-1,5.96042e-7,0,-1,-2.13814e-7,0,-1,1.32897e-7,-2.40239e-7,-1,-5.16307e-7,-2.72331e-9,-1,3.42715e-8,1.52851e-9,-1,-3.21687e-9,-1.98925e-7,-1,-3.46067e-7,0,-1,5.96042e-7,-0.00000112933,-1,-0.00000321992,1.34818e-8,-1,2.34541e-8,7.49147e-8,-1,6.36375e-9,-1.4852e-8,-1,-8.18996e-9,-1.70293e-8,-1,2.00998e-8,-1.70821e-9,-1,-6.9236e-9,0,-1,5.96041e-7,0,-1,0,-7.76877e-7,-1,0.00000552494,-1.1599e-8,-1,2.51271e-7,3.17071e-8,-1,-1.3372e-7,2.91422e-8,-1,-4.33429e-8,0,1,0,0,1,0,-4.02115e-13,1,-0.00000105969,-4.79319e-8,1,0.00000144422,4.63958e-8,1,3.76176e-7,-2.3578e-8,-1,4.94791e-8,0,-1,-2.08167e-7,-0.00000307235,-1,-0.00000605778,2.14347e-7,-1,4.25946e-7,2.33376e-7,-1,4.16946e-7,1.98027e-8,1,1.10795e-7,4.2659e-8,1,2.79277e-8,7.7937e-8,1,4.36052e-7,-1.6725e-8,-1,3.93045e-8,0,-1,-8.34638e-8,-5.294e-8,-1,-3.79659e-7,1.1789e-8,1,-2.47395e-8,4.32321e-8,1,3.99141e-8,0,1,6.34329e-7,-2.36004e-7,1,-4.16822e-7,1.50401e-7,1,2.65632e-7,0.492899,0,0.870086,0.492899,0,0.870086,0.492895,0,0.870089,0.492899,0,0.870086,0.492895,0,0.870089,0.492899,0,0.870086,-0.534993,0,-0.844856,0.492894,0,0.870089,-0.449609,0,-0.893225,-0.405239,0,-0.914211,0.405239,0,0.914211,0.35989,0,0.932995,0.449609,0,0.893225,1.4852e-8,1,8.18996e-9,6.90456e-9,1,-4.40976e-8,1.5396e-8,1,1.12117e-9,-9.05342e-8,1,-9.07234e-9,8.82948e-9,1,-1.85823e-8,0,1,-1.32897e-7,1.85677e-7,1,4.20922e-7,8.42498e-7,1,-0.00000599096,0,1,6.62738e-9,3.9498e-7,1,8.18117e-7,0,1,-5.1657e-7,0,1,-7.45059e-9,0,1,-9.49568e-8,0,1,0,1.34786e-8,1,-8.12291e-7,-5.06999e-8,1,3.6663e-7,-4.81483e-8,1,-9.12133e-8,2.52913e-7,1,-7.01111e-8,-3.30395e-8,1,2.08324e-7,-2.82724e-15,1,-7.45059e-9,0.405238,-7.00456e-8,0.914211,-0.313678,0,-0.94953,-0.26671,0,-0.963777,-4.63958e-8,-1,-3.76176e-7,0.122408,0,0.99248,-0.534993,0,-0.844856,0.492894,0,0.870089,0.405239,0,0.914211,0.35989,0,0.932995,-0.313678,0,-0.94953,-0.26671,0,-0.963777,0.122408,0,0.99248],\"metadata\":{\"generator\":\"io_three\",\"normals\":129,\"uvs\":0,\"vertices\":94,\"version\":3,\"faces\":152,\"type\":\"Geometry\"},\"uvs\":[],\"vertices\":[233.656,1,-17.5,230.852,1,-17.5,216.935,1,-9.49998,220.105,1,-9.49998,228.814,0.999999,-14.4335,233.656,4,-17.5,230.852,4,-17.5,216.935,4,-9.49998,220.105,4,-9.49998,174.348,1,-9.49998,198.427,1,-9.49998,214.953,1,-17.5,164.689,1,-17.5,167.629,1,-11.8704,182.445,4,-6.64343,174.348,4,-9.49998,167.629,-0.999999,-11.8704,174.348,-1,-9.49998,174.348,-4,-9.49998,182.445,-4,-6.64343,198.427,4,-9.49998,214.953,4,-17.5,164.689,4,-17.5,152.433,1,-15.8488,152.433,-0.999999,-15.8488,186.816,4,-4.78338,186.816,-4,-4.78338,186.816,-1,-4.78338,196.868,-1,-0.506286,196.868,1,-0.506286,186.816,1,-4.78338,164.689,-1,-17.5,214.953,-1,-17.5,198.427,-1,-9.49998,198.427,-4,-9.49998,136.928,0.999999,-18.2878,136.928,-1,-18.2878,199.14,4,0.575703,199.14,-4,0.575702,164.689,-4,-17.5,214.953,-4,-17.5,128.979,4,-18.6547,121.501,4,-19,121.501,-4,-19,128.979,-4,-18.6547,128.979,-1,-18.6547,128.979,0.999999,-18.6547,131.778,4,-19,131.778,0.999999,-19,169.757,0.999999,-19,169.757,4,-19,217.601,4,-19,217.601,0.999999,-19,233.221,0.999999,-19,233.221,4,-19,236.025,4,-19,236.025,-4,-19,233.221,-4,-19,233.221,-1,-19,217.601,-1,-19,217.601,-4,-19,169.757,-4,-19,169.757,-1,-19,131.778,-1,-19,131.778,-4,-19,233.656,-4,-17.5,230.852,-4,-17.5,167.941,-4,-18.3999,167.941,4,-18.3999,197.356,4,-0.274334,207.833,4,-4.91868,208.475,4,-3.5623,218.778,4,-8.74826,194.293,4,-7.6676,220.105,-4,-9.49998,218.778,-4,-8.74826,208.475,-4,-3.5623,216.935,-4,-9.49998,194.293,-4,-7.6676,197.356,-4,-0.274334,207.833,-4,-4.91868,216.935,-1,-9.49998,220.105,-1,-9.49998,230.852,-1,-17.5,233.656,-1,-17.5,228.814,-1,-14.4335,207.833,1,-4.91868,197.356,1,-0.274334,194.293,1,-7.6676,167.941,0.999999,-18.3999,207.833,-1,-4.91868,197.356,-1,-0.274334,194.293,-1,-7.6676,167.941,-1,-18.3999],\"faces\":[33,1,0,5,6,0,0,0,0,33,7,8,3,2,1,1,1,1,32,19,14,15,2,2,2,32,9,13,16,3,3,3,32,19,15,9,4,4,4,32,17,18,19,5,5,5,32,9,16,17,6,6,6,32,9,17,19,7,7,7,33,15,20,10,9,1,1,1,1,33,12,11,21,22,8,8,8,8,33,13,23,24,16,9,9,9,9,32,30,25,14,10,10,10,32,14,19,26,11,11,11,32,27,28,29,12,12,12,32,14,26,27,13,13,13,32,27,29,30,14,14,14,32,14,27,30,11,11,11,33,17,33,34,18,1,1,1,1,33,23,35,36,24,15,15,15,15,32,38,37,69,16,16,16,32,87,29,28,17,17,17,32,38,69,87,18,18,18,32,91,79,38,19,19,19,32,87,28,91,20,20,20,32,87,91,38,21,21,21,33,39,40,32,31,8,8,8,8,32,46,41,42,22,22,22,32,42,43,44,22,22,22,32,45,36,35,23,23,23,32,42,44,45,24,24,24,32,45,35,46,23,23,23,32,42,45,46,25,25,25,32,43,42,47,26,26,26,32,43,47,48,27,27,27,32,63,64,43,1,1,1,32,60,61,62,28,28,28,32,63,43,48,29,29,29,32,59,60,62,30,30,30,32,62,63,48,1,1,1,32,49,50,51,28,28,28,32,62,48,49,26,26,26,32,58,59,62,31,31,31,32,62,49,51,28,28,28,32,62,51,52,30,30,30,32,56,57,58,1,1,1,32,58,62,52,32,32,32,32,53,54,55,26,26,26,32,58,52,53,26,26,26,32,55,56,58,1,1,1,32,53,55,58,33,33,33,32,84,65,56,34,34,34,32,56,55,5,35,35,35,32,0,4,85,36,36,36,32,56,5,0,37,37,37,32,0,85,84,38,38,38,32,56,0,84,37,37,37,33,65,66,57,56,39,39,39,39,32,40,39,67,40,40,40,32,67,61,60,41,41,41,32,67,60,40,42,42,42,32,59,58,83,43,43,43,32,83,84,85,44,44,44,32,85,82,81,45,45,45,32,81,90,91,46,46,46,32,28,27,92,47,47,47,32,81,91,28,48,48,48,32,83,85,81,49,49,49,32,32,59,83,50,50,50,32,62,93,31,51,51,51,32,31,32,83,39,39,39,32,83,81,28,52,52,52,32,28,92,33,53,53,53,32,33,17,16,54,54,54,32,33,16,24,55,55,55,32,83,28,33,56,56,56,32,63,62,31,57,57,57,32,31,83,33,58,58,58,32,33,24,36,59,59,59,32,36,45,63,60,60,60,32,31,33,36,61,61,61,32,36,63,31,62,62,62,33,55,54,6,5,63,63,63,63,32,21,51,50,64,64,64,32,68,22,21,65,65,65,32,50,68,21,66,66,66,32,47,42,41,67,67,67,32,38,79,80,68,68,68,32,80,77,74,69,69,69,32,74,75,76,70,70,70,32,76,38,80,71,71,71,32,80,74,76,72,72,72,32,20,15,14,73,73,73,32,14,25,73,74,74,74,32,14,73,20,75,75,75,32,78,26,19,76,76,76,32,19,18,34,77,77,77,32,19,34,78,78,78,78,33,81,82,74,77,1,1,1,1,33,66,65,84,83,0,0,0,0,32,70,69,37,79,79,79,32,37,71,72,80,80,80,32,72,8,7,81,81,81,32,7,70,37,82,82,82,32,37,72,7,83,83,83,32,3,8,72,84,84,84,32,72,75,74,85,85,85,32,82,85,4,86,86,86,32,72,74,82,87,87,87,32,82,4,3,88,88,88,32,72,82,3,89,89,89,33,53,1,6,54,90,90,90,90,33,11,52,51,21,91,91,91,91,33,2,86,70,7,92,92,92,92,33,86,87,69,70,93,93,93,93,33,20,73,88,10,94,94,94,94,33,30,88,73,25,95,95,95,95,33,76,75,72,71,96,96,96,96,32,13,9,10,97,97,97,32,88,30,29,98,98,98,32,23,13,10,99,99,99,32,10,88,29,100,100,100,32,29,87,86,101,101,101,32,2,3,4,102,102,102,32,29,86,2,103,103,103,32,35,23,10,104,104,104,32,10,29,2,105,105,105,32,2,4,0,106,106,106,32,1,53,52,107,107,107,32,2,0,1,108,108,108,32,35,10,2,109,109,109,32,48,46,35,63,63,63,32,89,49,48,110,110,110,32,12,89,48,111,111,111,32,48,35,2,112,112,112,32,2,1,52,113,113,113,32,2,52,11,114,114,114,32,12,48,2,115,115,115,32,2,11,12,116,116,116,33,76,71,37,38,117,117,117,117,33,49,89,68,50,118,118,118,118,33,22,68,89,12,119,119,119,119,32,43,64,44,120,120,120,33,46,48,47,41,121,121,121,121,33,57,66,83,58,122,122,122,122,33,40,60,59,32,123,123,123,123,33,77,80,90,81,92,92,92,92,33,90,80,79,91,93,93,93,93,33,33,92,78,34,124,124,124,124,33,26,78,92,27,125,125,125,125,33,61,67,93,62,126,126,126,126,33,31,93,67,39,127,127,127,127,33,44,64,63,45,128,128,128,128]},\"autopoint_decoration\":{\"normals\":[5.81449e-14,1,-4.62033e-7,0,1,0,-1.63662e-9,1,-4.0771e-8,0,1,0,-2.25498e-8,1,8.43929e-9,1.30383e-7,1,-3.12294e-7,-1.94373e-9,1,-4.43854e-8,7.75433e-9,1,-3.68127e-8,-1.02859e-9,1,-5.60008e-8,-4.91442e-10,1,-4.42197e-8,-1.6125e-9,1,-4.51147e-8,-1.87501e-11,1,-3.88046e-8,3.36892e-10,1,-3.63598e-8,-0.486503,-0.0000772039,0.873679,0,0,1,0.044548,0,-0.999007,0.155736,0,-0.987799,0.253663,0,-0.967293,0.333026,0,-0.942918,0.391782,0,-0.920058,0.430101,0,-0.902781,0.448878,0,-0.893593,0.429969,0,-0.902843,0.391546,0,-0.920158,0.332686,0,-0.943038,0.253264,0,-0.967397,0.155403,0,-0.987851,0.0461111,0,-0.998936,0,-1,3.97364e-8,0,-1,0,2.29445e-7,-1,-5.38828e-7,3.88686e-7,-1,-7.38611e-7,1.94373e-9,-1,4.43854e-8,0,-1,0,-5.36337e-9,-1,3.89319e-8,-2.2217e-7,-1,5.37815e-7,2.98958e-9,-1,4.63352e-8,-2.79517e-9,-1,6.56882e-9,3.68328e-9,-1,8.07848e-8,1.25846e-7,0,-1,0,0,-1,0.00000339093,0.000197946,-1],\"metadata\":{\"generator\":\"io_three\",\"normals\":42,\"uvs\":0,\"vertices\":33,\"version\":3,\"faces\":47,\"type\":\"Geometry\"},\"uvs\":[],\"vertices\":[121.5,1,19,121.5,-0.999999,19,117,-0.999999,19,0.249992,1,19,108,1,79,310.5,1,79,295.072,1,78.2879,279.568,1,75.8488,264.371,1,71.8705,249.555,1,66.6434,235.132,1,60.5063,221.09,1,53.819,194.09,1,40.2561,181.132,1,34.0827,168.555,1,28.7269,156.371,1,24.4239,144.567,1,21.3284,133.072,1,19.516,0.249992,-0.999999,19,133.072,-0.999999,19.516,144.567,-0.999999,21.3284,156.371,-0.999999,24.4239,168.555,-0.999999,28.7269,181.132,-0.999999,34.0827,194.09,-0.999998,40.2561,221.09,-0.999998,53.819,235.132,-0.999997,60.5063,249.555,-0.999997,66.6434,264.371,-0.999997,71.8705,279.568,-0.999997,75.8488,295.072,-0.999997,78.2879,310.5,-0.999997,79,108,-0.999997,79],\"faces\":[32,17,0,3,0,0,0,32,4,5,6,1,1,1,32,4,6,7,1,1,1,32,17,3,4,2,2,2,32,15,16,17,3,3,3,32,13,14,15,4,4,4,32,11,12,13,5,5,5,32,11,13,15,6,6,6,32,15,17,4,7,7,7,32,4,7,8,8,8,8,32,4,8,9,9,9,9,32,11,15,4,10,10,10,32,4,9,10,11,11,11,32,4,10,11,12,12,12,33,32,4,3,18,13,13,13,13,33,5,4,32,31,14,14,14,14,33,0,17,19,1,15,15,15,15,33,20,19,17,16,16,16,16,16,33,21,20,16,15,17,17,17,17,33,22,21,15,14,18,18,18,18,33,23,22,14,13,19,19,19,19,33,24,23,13,12,20,20,20,20,33,25,24,12,11,21,21,21,21,33,26,25,11,10,22,22,22,22,33,27,26,10,9,23,23,23,23,33,28,27,9,8,24,24,24,24,33,29,28,8,7,25,25,25,25,33,30,29,7,6,26,26,26,26,33,31,30,6,5,27,27,27,27,32,32,18,2,28,28,28,32,2,1,19,29,29,29,32,19,20,21,29,29,29,32,21,22,23,30,30,30,32,23,24,25,31,31,31,32,21,23,25,32,32,32,32,2,19,21,29,29,29,32,30,31,32,33,33,33,32,29,30,32,33,33,33,32,32,2,21,34,34,34,32,21,25,26,35,35,35,32,32,21,26,36,36,36,32,28,29,32,33,33,33,32,32,26,27,37,37,37,32,27,28,32,38,38,38,32,3,0,1,39,39,39,32,2,18,3,40,40,40,32,1,2,3,41,41,41]},\"curve_8\":{\"normals\":[-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534995,0,-0.844855,-0.492897,0,-0.870087,-0.449609,0,-0.893226,-0.405239,0,-0.914211,-0.359892,0,-0.932994,-2.40551e-9,1,-4.29933e-8,3.25209e-10,1,-4.49677e-8,-1.88163e-9,1,-4.49296e-8,5.20002e-10,1,-4.73912e-8,-2.04816e-9,1,-4.27968e-8,1.80506e-10,1,-4.56916e-8,-2.06171e-9,1,-4.56455e-8,1.37714e-10,1,-4.43967e-8,-9.42067e-10,1,-4.02524e-8,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,0.492898,0,0.870087,0.449609,0,0.893226,0.40524,0,0.91421,0.35989,5.74434e-8,0.932995,3.37906e-9,1,-4.12318e-8,1.35172e-9,1,-4.13479e-8,-6.78548e-10,1,-4.13645e-8,2.51045e-9,1,-4.42373e-8,-4.72985e-9,1,-4.10987e-8,2.75902e-9,1,-4.29512e-8,6.48216e-10,1,-4.30349e-8,-1.62677e-9,1,-4.77945e-8,-3.05415e-9,1,-4.33853e-8,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.689069,0,-0.724696,0.359893,0,0.932994,0.405239,0,0.914211,0.449609,0,0.893225,0.492896,0,0.870088,0.534996,0,0.844855,0.575808,0,0.817585,0.615229,0,0.788348,0.65317,0,0.757211,0.689147,-5.07059e-7,0.724622,1.53516e-8,1,-1.46159e-8,-0.689144,0,-0.724624,-0.35989,0,-0.932995,-0.405242,0,-0.914209,-0.449607,0,-0.893227,-0.492901,0,-0.870086,-0.534994,0,-0.844856,0,1,0,1.89574e-8,1,-8.40323e-9,1.85223e-8,1,-9.32331e-9,1.80425e-8,1,-1.02209e-8,1.75192e-8,1,-1.10939e-8,1.69538e-8,1,-1.19401e-8,-2.43728e-8,1,-8.17886e-8,-2.83562e-8,1,-8.04939e-8,0.359893,0,0.932994,0.405239,0,0.914211,0.449609,0,0.893225,0.492896,0,0.870088,0.575808,0,0.817585,0.615229,0,0.788348,0.653171,0,0.757211,0.689147,0,0.724622,-5.31508e-9,1,-4.50232e-8,-7.51796e-9,1,-4.47081e-8,3.16227e-9,1,-4.37368e-8,1.01225e-9,1,-4.38392e-8,-1.14e-9,1,-4.38361e-8,-3.28962e-9,1,-4.37273e-8,7.29344e-9,1,-4.5485e-8,5.0529e-9,1,-4.57882e-8,-3.75655e-8,1,-7.45052e-8,-9.6079e-9,1,-4.20829e-8,-9.04154e-9,1,-1.79325e-8,1.15993e-8,1,-1.08014e-7,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,-1.71421e-8,1,-7.85686e-8,2.24578e-8,1,-9.95472e-9,2.19424e-8,1,-1.10446e-8,-2.84851e-8,1,-7.52021e-8,-6.42811e-8,1,-1.47428e-7,-7.14385e-8,1,-1.44097e-7,-7.84226e-8,1,-1.40419e-7,-2.40076e-8,1,-8.42456e-8,1.8261e-8,1,-1.73858e-8,-0.405242,0,-0.914209,-0.449607,0,-0.893226,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,1.0035e-8,1,-4.61608e-8,0.581237,0,0.813734,-0.813734,0,-0.581237,0.707109,0,-0.707105,0.707107,0,-0.707107,0.707108,0,-0.707106,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707107,-0.0000216099,-0.707107,0.707109,0.0000081038,-0.707105,0.707106,0.0000431584,-0.707108,-0.00260037,0.999993,0.00260032,0.707108,-0.00000802852,-0.707105,0.313679,0,0.949529,0.266711,0,0.963777,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,0.0735638,0,0.99729,0.111157,0,0.993803,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.170958,0,-0.985278,-0.122409,0,-0.99248,-0.0735639,0,-0.99729,0,0,-1,0,1,-4.469e-8,-3.28856e-9,1,-4.45824e-8,6.9156e-10,1,-3.76205e-8,-1.15513e-9,1,-3.76091e-8,5.31244e-10,1,-4.5936e-8,-1.72335e-9,1,-4.59067e-8,4.73139e-9,1,-4.47193e-8,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.170958,0,-0.985278,-0.122409,0,-0.99248,-0.0735638,0,-0.99729,2.69243e-9,1,-4.50235e-8,-2.04004e-9,1,-4.10371e-8,1.85785e-9,1,-4.19129e-8,-2.01031e-10,1,-4.19535e-8,-2.25938e-9,1,-4.18931e-8,1.38239e-9,1,-4.3613e-8,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,0.0735639,0,0.99729,0.307795,0,0.951453,-0.073564,0,-0.99729,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.2191,0,-0.975702,-0.266711,0,-0.963776,-0.313679,0,-0.949529,0.111157,0,0.993803,0.122409,0,0.99248,0.170958,0,0.985278,0.2191,0,0.975702,0.266711,0,0.963777,0.313679,0,0.949529,0,1,0,1.12414e-9,1,-1.60289e-7,-6.74186e-9,1,-1.60151e-7,3.938e-8,1,-1.30091e-8,-8.87912e-9,1,-1.0507e-7,-3.69242e-9,1,-5.00574e-8,-6.14413e-9,1,-4.98159e-8,1.57223e-8,1,-4.09356e-8,4.09801e-9,1,-3.30723e-8,-1.00404e-8,1,-3.62814e-8,9.54564e-9,1,-4.27995e-8,0.130446,0,0.991455,0.073564,0,0.99729,0.122409,0,0.99248,0.170958,0,0.985278,0.2191,2.87219e-8,0.975702,0.266711,8.61655e-8,0.963776,0.31368,5.74439e-8,0.949529,-1.16927e-8,1,-1.58515e-7,2.46206e-9,1,-8.03787e-8,-5.42823e-9,1,-8.0233e-8,-9.35859e-9,1,-7.987e-8,-1.32662e-8,1,-7.93148e-8,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.335866,0,-0.94191,1.41633e-7,1,-8.29734e-8,0,0,1,-3.35118e-8,1,-1.52488e-7,1.81322e-7,1,-4.47033e-8,3.51029e-8,1,-5.19632e-8,-0.335866,0,-0.94191,-1.15856e-8,1,-4.44326e-8,-0.214645,0,-0.976692,-5.45142e-9,1,-4.45831e-8,-0.113723,0,-0.993513,0.164399,0,-0.986394,-1,0,-8.34465e-7,0.164399,0,0.986394,-1,0,-0.00000299154,-1,0,-0.00000224443,-1,0,-0.00000299154,-1,0,-0.00000224443,-1,0.0000025017,-0.00000216002,-1,0,-0.00000237009,-1,0.00000157221,-0.00000224443,0,0,0,-1,0,-0.00000197629,-1,0,-0.00000471824,-1,0,-0.00000197629,-1,0,-0.00000471824,-1,-2.98027e-8,-0.00000199615,-1,-0.00000620944,-0.00000264645,-0.449609,0,-0.893226,-2.53136e-9,-1,4.48976e-8,5.83898e-10,-1,4.04899e-8,-5.50637e-9,-1,3.61365e-8,-3.72656e-9,-1,3.63632e-8,-1.93786e-9,-1,3.65022e-8,-1.80506e-10,-1,4.56916e-8,2.06171e-9,-1,4.56455e-8,-4.57433e-9,-1,4.3304e-8,-2.9771e-9,-1,4.39838e-8,0.35989,0,0.932995,4.89768e-9,-1,4.60248e-8,-1.35172e-9,-1,4.13479e-8,6.78548e-10,-1,4.13645e-8,1.16194e-9,-1,5.07199e-8,3.64912e-9,-1,5.06018e-8,6.12774e-9,-1,5.03618e-8,-7.2024e-10,-1,4.78166e-8,1.30142e-9,-1,3.82356e-8,-6.19593e-9,-1,4.70484e-8,0.689147,5.07059e-7,0.724622,-3.07033e-8,-1,2.92319e-8,-1.9347e-8,-1,7.46276e-9,0,-1,0,-3.70445e-8,-1,1.86466e-8,-3.50384e-8,-1,2.21879e-8,7.4569e-8,-1,1.41893e-7,8.14408e-8,-1,1.38062e-7,-3.14037e-8,-1,2.70887e-8,0.492896,0,0.870088,-7.43398e-9,-1,4.32162e-8,-5.30444e-9,-1,4.35289e-8,-3.16227e-9,-1,4.37368e-8,-1.01225e-9,-1,4.38392e-8,1.14e-9,-1,4.38361e-8,3.28962e-9,-1,4.37273e-8,5.43117e-9,-1,4.35133e-8,7.55968e-9,-1,4.31944e-8,0,-1,0,-3.11768e-8,-1,3.11768e-8,1.80831e-8,-1,3.58649e-8,1.36101e-8,-1,5.53858e-8,0,-1,0,-4.38849e-8,-1,2.20892e-8,-4.15079e-8,-1,2.62846e-8,-3.87319e-8,-1,3.02262e-8,-3.65219e-8,-1,3.47717e-8,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-1.338e-8,-1,6.15477e-8,0.707109,-0.0000081038,-0.707105,0.707108,0.00000259162,-0.707106,0.707106,-0.0000431584,-0.707108,0.013,-0.999831,-0.0129999,0.707108,0.00000802852,-0.707105,-0.313679,-5.54751e-8,-0.949529,-0.170958,0,-0.985278,-0.122409,0,-0.99248,0,0,-1,0,-1,4.469e-8,-1.98856e-9,-1,4.49716e-8,2.20459e-10,-1,4.5015e-8,2.42887e-9,-1,4.495e-8,-5.31244e-10,-1,4.5936e-8,-1.82011e-9,-1,4.3022e-8,1.63667e-9,-1,3.86923e-8,3.28856e-9,-1,4.45824e-8,5.4721e-9,-1,4.43673e-8,-4.17545e-9,-1,4.60959e-8,-1.90852e-9,-1,4.62453e-8,3.6297e-10,-1,4.62832e-8,2.63343e-9,-1,4.62097e-8,3.37093e-9,-1,8.00754e-8,7.29617e-9,-1,7.98135e-8,1.12036e-8,-1,7.93594e-8,1.5084e-8,-1,7.8714e-8,3.69242e-9,-1,5.00574e-8,-5.78385e-9,-1,4.49654e-8,6.43573e-9,-1,3.70908e-8,8.24803e-9,-1,3.67304e-8,-2.0798e-8,-1,5.13254e-8,1.57446e-8,-1,4.76601e-8,0.122409,0,0.99248,0.2191,5.74437e-8,0.975702,0.266711,8.61655e-8,0.963777,1.87172e-8,-1,1.5974e-7,2.65325e-8,-1,1.5863e-7,-0.266711,0,-0.963776,2.14232e-8,-1,1.62827e-7,1.0122e-7,-1,4.47036e-8,9.12048e-8,-1,4.57583e-8,-1.15059e-7,-1,4.75413e-8,5.45142e-9,-1,4.45831e-8,-0.113723,0,-0.993512,-8.92414e-9,-1,1.05602e-7,-1,0,-0.00000224443,-1,-0.00000157222,-0.00000224443,-1,-0.0000025017,-0.00000216002,-1,0.00000815845,-0.00000199615,-1,0.00000100553,-0.00000264645],\"faces\":[33,69,0,2,30,0,0,0,0,33,30,29,68,69,1,1,1,1,33,29,28,67,68,2,2,2,2,33,28,27,66,67,3,3,3,3,33,27,26,65,66,4,4,4,4,33,26,25,64,65,5,5,5,5,33,25,24,63,64,6,6,6,6,33,24,23,62,63,7,7,7,7,33,33,32,23,24,8,8,8,8,33,34,33,24,25,9,9,9,9,33,35,34,25,26,10,10,10,10,33,36,35,26,27,11,11,11,11,33,37,36,27,28,12,12,12,12,33,38,37,28,29,13,13,13,13,33,39,38,29,30,14,14,14,14,33,40,39,30,2,15,15,15,15,33,41,40,2,31,16,16,16,16,33,43,42,90,91,17,17,17,17,33,40,41,89,88,18,18,18,18,33,39,40,88,87,19,19,19,19,33,38,39,87,86,20,20,20,20,33,37,38,86,85,21,21,21,21,33,36,37,85,84,22,22,22,22,33,35,36,84,83,23,23,23,23,33,34,35,83,82,24,24,24,24,33,33,34,82,81,25,25,25,25,33,32,33,81,80,26,26,26,26,33,53,52,42,43,27,27,27,27,33,54,53,43,44,28,28,28,28,33,55,54,44,45,29,29,29,29,33,56,55,45,46,30,30,30,30,33,57,56,46,47,31,31,31,31,33,58,57,47,48,32,32,32,32,33,59,58,48,49,33,33,33,33,33,60,59,49,50,34,34,34,34,33,61,60,50,51,35,35,35,35,33,60,61,109,108,36,36,36,36,33,59,60,108,107,37,37,37,37,33,58,59,107,106,38,38,38,38,33,57,58,106,105,39,39,39,39,33,56,57,105,104,40,40,40,40,33,55,56,104,103,41,41,41,41,33,54,55,103,102,42,42,42,42,33,53,54,102,101,43,43,43,43,33,52,53,101,100,44,44,44,44,33,242,241,18,19,45,45,45,45,33,243,242,19,20,46,46,46,46,33,244,243,20,21,47,47,47,47,33,245,244,21,22,48,48,48,48,33,226,227,4,3,49,49,49,49,33,227,228,5,4,50,50,50,50,33,228,229,6,5,51,51,51,51,33,229,230,7,6,52,52,52,52,33,230,231,8,7,53,53,53,53,33,231,232,9,8,54,54,54,54,33,232,233,10,9,55,55,55,55,33,233,234,11,10,56,56,56,56,33,234,235,12,11,57,57,57,57,33,1,0,78,79,58,58,58,58,33,2,0,1,31,59,59,59,59,33,237,236,13,14,60,60,60,60,33,238,237,14,15,61,61,61,61,33,239,238,15,16,62,62,62,62,33,240,239,16,17,63,63,63,63,33,241,240,17,18,64,64,64,64,33,63,62,70,71,65,65,65,65,33,64,63,71,72,66,66,66,66,33,65,64,72,73,67,67,67,67,33,66,65,73,74,68,68,68,68,33,67,66,74,75,69,69,69,69,33,68,67,75,76,70,70,70,70,33,69,68,76,77,71,71,71,71,33,0,69,77,78,72,72,72,72,33,3,4,71,70,73,73,73,73,33,4,5,72,71,74,74,74,74,33,5,6,73,72,75,75,75,75,33,6,7,74,73,76,76,76,76,33,7,8,75,74,53,53,53,53,33,8,9,76,75,77,77,77,77,33,9,10,77,76,78,78,78,78,33,10,11,78,77,79,79,79,79,33,11,12,79,78,80,80,80,80,33,91,90,80,81,81,81,81,81,33,92,91,81,82,82,82,82,82,33,93,92,82,83,83,83,83,83,33,94,93,83,84,84,84,84,84,33,95,94,84,85,85,85,85,85,33,96,95,85,86,86,86,86,86,33,97,96,86,87,87,87,87,87,33,98,97,87,88,88,88,88,88,32,123,99,98,89,89,89,32,98,88,89,90,90,90,32,122,123,98,91,91,91,32,98,89,122,92,92,92,33,44,43,91,92,93,93,93,93,33,45,44,92,93,94,94,94,94,33,46,45,93,94,95,95,95,95,33,47,46,94,95,96,96,96,96,33,48,47,95,96,97,97,97,97,33,49,48,96,97,98,98,98,98,33,50,49,97,98,99,99,99,99,33,51,50,98,99,100,100,100,100,33,111,110,100,101,101,101,101,101,33,112,111,101,102,102,102,102,102,33,113,112,102,103,103,103,103,103,33,114,113,103,104,104,104,104,104,33,115,114,104,105,105,105,105,105,33,116,115,105,106,106,106,106,106,33,117,116,106,107,107,107,107,107,33,118,117,107,108,108,108,108,108,33,119,118,108,109,109,109,109,109,33,14,13,110,111,60,60,60,60,33,15,14,111,112,110,110,110,110,33,16,15,112,113,111,111,111,111,33,17,16,113,114,63,63,63,63,33,18,17,114,115,112,112,112,112,33,19,18,115,116,113,113,113,113,33,20,19,116,117,114,114,114,114,33,21,20,117,118,115,115,115,115,33,22,21,118,119,48,48,48,48,33,121,123,122,120,116,116,116,116,33,122,372,370,120,117,117,117,117,33,121,371,373,123,118,118,118,118,33,120,370,371,121,119,119,119,119,32,51,99,123,120,120,120,32,373,245,22,121,121,121,32,22,119,109,122,122,122,32,22,109,61,122,122,122,32,51,123,373,123,123,123,32,373,22,61,124,124,124,32,51,373,61,125,125,125,32,31,1,79,122,122,122,32,12,235,372,126,126,126,32,31,79,12,122,122,122,32,122,89,41,122,122,122,32,41,31,12,127,127,127,32,372,122,41,122,122,122,32,12,372,41,128,128,128,33,131,3,70,180,129,129,129,129,33,130,131,180,179,130,130,130,130,33,129,130,179,178,131,131,131,131,33,128,129,178,177,132,132,132,132,33,127,128,177,176,133,133,133,133,33,126,127,176,175,134,134,134,134,33,210,126,175,216,135,135,135,135,33,23,145,173,62,136,136,136,136,33,145,144,172,173,137,137,137,137,33,144,143,171,172,138,138,138,138,33,143,142,170,171,139,139,139,139,33,142,141,169,170,140,140,140,140,33,141,140,168,169,141,141,141,141,33,209,139,167,215,142,142,142,142,33,211,146,139,209,143,143,143,143,33,148,147,140,141,144,144,144,144,33,149,148,141,142,145,145,145,145,33,150,149,142,143,146,146,146,146,33,151,150,143,144,147,147,147,147,33,152,151,144,145,148,148,148,148,33,32,152,145,23,149,149,149,149,33,42,159,194,90,150,150,150,150,33,159,158,193,194,151,151,151,151,33,158,157,192,193,152,152,152,152,33,157,156,191,192,153,153,153,153,33,156,155,190,191,154,154,154,154,33,155,154,189,190,155,155,155,155,33,212,153,188,218,142,142,142,142,33,213,160,153,212,143,143,143,143,33,162,161,154,155,156,156,156,156,33,163,162,155,156,157,157,157,157,33,164,163,156,157,158,158,158,158,33,165,164,157,158,159,159,159,159,33,166,165,158,159,160,160,160,160,33,52,166,159,42,161,161,161,161,33,166,52,100,201,162,162,162,162,33,165,166,201,200,163,163,163,163,33,164,165,200,199,164,164,164,164,33,163,164,199,198,165,165,165,165,33,162,163,198,197,166,166,166,166,33,161,162,197,196,167,167,167,167,33,213,161,196,219,168,168,168,168,33,474,382,132,214,142,142,142,142,33,384,383,133,134,169,169,169,169,33,385,384,134,135,170,170,170,170,33,386,385,135,136,171,171,171,171,33,387,386,136,137,172,172,172,172,33,388,387,137,138,173,173,173,173,33,236,388,138,13,174,174,174,174,33,473,376,126,210,175,175,175,175,33,376,377,127,126,134,134,134,134,33,377,378,128,127,176,176,176,176,33,378,379,129,128,177,177,177,177,33,379,380,130,129,178,178,178,178,33,380,381,131,130,179,179,179,179,33,381,226,3,131,180,180,180,180,33,215,167,174,216,181,181,181,181,33,169,168,175,176,65,65,65,65,33,170,169,176,177,182,182,182,182,33,171,170,177,178,183,183,183,183,33,172,171,178,179,65,65,65,65,33,173,172,179,180,181,181,181,181,33,62,173,180,70,184,184,184,184,33,218,188,224,221,185,185,185,185,33,190,189,182,183,186,186,186,186,33,191,190,183,184,187,187,187,187,33,192,191,184,185,188,188,188,188,33,193,192,185,186,189,189,189,189,33,194,193,186,187,190,190,190,190,33,90,194,187,80,191,191,191,191,33,211,147,182,217,192,192,192,192,33,147,148,183,182,193,193,193,193,33,148,149,184,183,194,194,194,194,33,149,150,185,184,195,195,195,195,33,150,151,186,185,196,196,196,196,33,151,152,187,186,197,197,197,197,33,152,32,80,187,198,198,198,198,33,220,202,195,219,181,181,181,181,33,204,203,196,197,199,199,199,199,33,205,204,197,198,200,200,200,200,33,206,205,198,199,65,65,65,65,33,207,206,199,200,201,201,201,201,33,208,207,200,201,202,202,202,202,33,110,208,201,100,203,203,203,203,33,214,132,202,220,142,142,142,142,33,134,133,203,204,169,169,169,169,33,135,134,204,205,204,204,204,204,33,136,135,205,206,205,205,205,205,33,137,136,206,207,172,172,172,172,33,138,137,207,208,173,173,173,173,33,13,138,208,110,174,174,174,174,33,133,214,220,203,206,206,206,206,33,203,220,219,196,207,207,207,207,33,146,211,217,181,208,208,208,208,32,189,218,221,209,209,209,32,222,217,182,65,65,65,32,189,221,222,210,210,210,32,189,222,182,211,211,211,33,168,215,216,175,65,65,65,65,33,375,473,210,125,208,208,208,208,33,383,474,214,133,212,212,212,212,33,160,213,219,195,208,208,208,208,33,161,213,212,154,213,213,213,213,33,154,212,218,189,214,214,214,214,33,147,211,209,140,215,215,215,215,33,140,209,215,168,216,216,216,216,33,125,210,216,174,208,208,208,208,33,223,222,492,493,217,217,217,217,33,222,223,181,217,65,65,65,65,33,222,221,491,492,218,218,218,218,33,221,224,494,491,219,219,219,219,32,224,188,153,220,220,220,32,160,195,202,221,221,221,32,494,224,153,222,222,222,32,160,202,132,223,223,223,32,494,153,160,224,224,224,32,132,382,494,225,225,225,32,160,132,494,226,226,226,32,375,125,174,227,227,227,32,174,167,139,228,228,228,32,146,181,223,229,229,229,32,375,174,139,230,230,230,32,146,223,493,231,231,231,32,375,139,146,232,232,232,32,146,493,375,233,233,233,33,248,246,315,276,0,0,0,0,33,276,315,314,275,1,1,1,1,33,275,314,313,274,2,2,2,2,33,274,313,312,273,3,3,3,3,33,273,312,311,272,4,4,4,4,33,272,311,310,271,234,234,234,234,33,271,310,309,270,6,6,6,6,33,270,309,308,269,7,7,7,7,33,279,270,269,278,235,235,235,235,33,280,271,270,279,236,236,236,236,33,281,272,271,280,237,237,237,237,33,282,273,272,281,238,238,238,238,33,283,274,273,282,239,239,239,239,33,284,275,274,283,240,240,240,240,33,285,276,275,284,241,241,241,241,33,286,248,276,285,242,242,242,242,33,287,277,248,286,243,243,243,243,33,289,337,336,288,17,17,17,17,33,286,334,335,287,18,18,18,18,33,285,333,334,286,19,19,19,19,33,284,332,333,285,20,20,20,20,33,283,331,332,284,21,21,21,21,33,282,330,331,283,22,22,22,22,33,281,329,330,282,23,23,23,23,33,280,328,329,281,24,24,24,24,33,279,327,328,280,25,25,25,25,33,278,326,327,279,244,244,244,244,33,299,289,288,298,245,245,245,245,33,300,290,289,299,246,246,246,246,33,301,291,290,300,247,247,247,247,33,302,292,291,301,248,248,248,248,33,303,293,292,302,249,249,249,249,33,304,294,293,303,250,250,250,250,33,305,295,294,304,251,251,251,251,33,306,296,295,305,252,252,252,252,33,307,297,296,306,253,253,253,253,33,306,354,355,307,36,36,36,36,33,305,353,354,306,37,37,37,37,33,304,352,353,305,38,38,38,38,33,303,351,352,304,39,39,39,39,33,302,350,351,303,40,40,40,40,33,301,349,350,302,41,41,41,41,33,300,348,349,301,42,42,42,42,33,299,347,348,300,43,43,43,43,33,298,346,347,299,44,44,44,44,33,242,265,264,241,45,45,45,45,33,243,266,265,242,46,46,46,46,33,244,267,266,243,47,47,47,47,33,245,268,267,244,48,48,48,48,33,226,249,250,227,49,49,49,49,33,227,250,251,228,50,50,50,50,33,228,251,252,229,51,51,51,51,33,229,252,253,230,52,52,52,52,33,230,253,254,231,53,53,53,53,33,231,254,255,232,54,54,54,54,33,232,255,256,233,55,55,55,55,33,233,256,257,234,56,56,56,56,33,234,257,258,235,254,254,254,254,33,324,246,247,325,255,255,255,255,33,248,277,247,246,59,59,59,59,33,237,260,259,236,60,60,60,60,33,238,261,260,237,61,61,61,61,33,239,262,261,238,62,62,62,62,33,240,263,262,239,63,63,63,63,33,241,264,263,240,64,64,64,64,33,309,317,316,308,256,256,256,256,33,310,318,317,309,257,257,257,257,33,311,319,318,310,258,258,258,258,33,312,320,319,311,257,257,257,257,33,313,321,320,312,259,259,259,259,33,314,322,321,313,260,260,260,260,33,315,323,322,314,261,261,261,261,33,246,324,323,315,262,262,262,262,33,249,316,317,250,73,73,73,73,33,250,317,318,251,74,74,74,74,33,251,318,319,252,75,75,75,75,33,252,319,320,253,263,263,263,263,33,253,320,321,254,53,53,53,53,33,254,321,322,255,77,77,77,77,33,255,322,323,256,78,78,78,78,33,256,323,324,257,79,79,79,79,33,257,324,325,258,80,80,80,80,33,337,327,326,336,264,264,264,264,33,338,328,327,337,265,265,265,265,33,339,329,328,338,266,266,266,266,33,340,330,329,339,267,267,267,267,33,341,331,330,340,268,268,268,268,33,342,332,331,341,269,269,269,269,33,343,333,332,342,270,270,270,270,33,344,334,333,343,271,271,271,271,32,344,345,369,272,272,272,32,368,335,334,273,273,273,32,344,369,368,274,274,274,32,368,334,344,275,275,275,33,290,338,337,289,93,93,93,93,33,291,339,338,290,94,94,94,94,33,292,340,339,291,95,95,95,95,33,293,341,340,292,96,96,96,96,33,294,342,341,293,97,97,97,97,33,295,343,342,294,98,98,98,98,33,296,344,343,295,99,99,99,99,33,297,345,344,296,100,100,100,100,33,357,347,346,356,276,276,276,276,33,358,348,347,357,257,257,257,257,33,359,349,348,358,277,277,277,277,33,360,350,349,359,276,276,276,276,33,361,351,350,360,278,278,278,278,33,362,352,351,361,257,257,257,257,33,363,353,352,362,279,279,279,279,33,364,354,353,363,276,276,276,276,33,365,355,354,364,280,280,280,280,33,260,357,356,259,60,60,60,60,33,261,358,357,260,110,110,110,110,33,262,359,358,261,111,111,111,111,33,263,360,359,262,63,63,63,63,33,264,361,360,263,281,281,281,281,33,265,362,361,264,282,282,282,282,33,266,363,362,265,114,114,114,114,33,267,364,363,266,115,115,115,115,33,268,365,364,267,48,48,48,48,33,367,366,368,369,283,283,283,283,33,368,366,370,372,117,117,117,117,33,367,369,373,371,118,118,118,118,33,366,367,371,370,119,119,119,119,32,307,355,365,122,122,122,32,365,268,245,227,227,227,32,373,369,345,123,123,123,32,373,345,297,123,123,123,32,307,365,245,122,122,122,32,373,297,307,284,284,284,32,307,245,373,285,285,285,32,287,335,368,122,122,122,32,372,235,258,286,286,286,32,258,325,247,123,123,123,32,258,247,277,122,122,122,32,287,368,372,123,123,123,32,258,277,287,287,287,287,32,287,372,258,288,288,288,33,395,444,316,249,129,129,129,129,33,394,443,444,395,130,130,130,130,33,393,442,443,394,131,131,131,131,33,392,441,442,393,132,132,132,132,33,391,440,441,392,133,133,133,133,33,390,439,440,391,134,134,134,134,33,476,482,439,390,135,135,135,135,33,269,308,437,409,289,289,289,289,33,409,437,436,408,137,137,137,137,33,408,436,435,407,138,138,138,138,33,407,435,434,406,290,290,290,290,33,406,434,433,405,291,291,291,291,33,405,433,432,404,141,141,141,141,33,475,481,431,403,292,292,292,292,33,477,475,403,410,293,293,293,293,33,412,405,404,411,294,294,294,294,33,413,406,405,412,295,295,295,295,33,414,407,406,413,296,296,296,296,33,415,408,407,414,297,297,297,297,33,416,409,408,415,298,298,298,298,33,278,269,409,416,299,299,299,299,33,288,336,458,423,150,150,150,150,33,423,458,457,422,151,151,151,151,33,422,457,456,421,152,152,152,152,33,421,456,455,420,153,153,153,153,33,420,455,454,419,154,154,154,154,33,419,454,453,418,155,155,155,155,33,478,484,452,417,292,292,292,292,33,479,478,417,424,293,293,293,293,33,426,419,418,425,300,300,300,300,33,427,420,419,426,301,301,301,301,33,428,421,420,427,302,302,302,302,33,429,422,421,428,303,303,303,303,33,430,423,422,429,304,304,304,304,33,298,288,423,430,305,305,305,305,33,430,465,346,298,162,162,162,162,33,429,464,465,430,163,163,163,163,33,428,463,464,429,164,164,164,164,33,427,462,463,428,165,165,165,165,33,426,461,462,427,166,166,166,166,33,425,460,461,426,167,167,167,167,33,479,485,460,425,168,168,168,168,33,474,480,396,382,292,292,292,292,33,384,398,397,383,169,169,169,169,33,385,399,398,384,170,170,170,170,33,386,400,399,385,171,171,171,171,33,387,401,400,386,172,172,172,172,33,388,402,401,387,173,173,173,173,33,236,259,402,388,174,174,174,174,33,473,476,390,376,175,175,175,175,33,376,390,391,377,134,134,134,134,33,377,391,392,378,176,176,176,176,33,378,392,393,379,177,177,177,177,33,379,393,394,380,178,178,178,178,33,380,394,395,381,179,179,179,179,33,381,395,249,226,180,180,180,180,33,481,482,438,431,276,276,276,276,33,433,440,439,432,257,257,257,257,33,434,441,440,433,257,257,257,257,33,435,442,441,434,306,306,306,306,33,436,443,442,435,307,307,307,307,33,437,444,443,436,308,308,308,308,33,308,316,444,437,309,309,309,309,33,484,487,490,452,257,257,257,257,33,454,447,446,453,310,310,310,310,33,455,448,447,454,311,311,311,311,33,456,449,448,455,312,312,312,312,33,457,450,449,456,313,313,313,313,33,458,451,450,457,314,314,314,314,33,336,326,451,458,315,315,315,315,33,477,483,446,411,192,192,192,192,33,411,446,447,412,193,193,193,193,33,412,447,448,413,316,316,316,316,33,413,448,449,414,195,195,195,195,33,414,449,450,415,317,317,317,317,33,415,450,451,416,318,318,318,318,33,416,451,326,278,198,198,198,198,33,486,485,459,466,276,276,276,276,33,468,461,460,467,257,257,257,257,33,469,462,461,468,257,257,257,257,33,470,463,462,469,257,257,257,257,33,471,464,463,470,257,257,257,257,33,472,465,464,471,319,319,319,319,33,356,346,465,472,320,320,320,320,33,480,486,466,396,292,292,292,292,33,398,468,467,397,169,169,169,169,33,399,469,468,398,204,204,204,204,33,400,470,469,399,205,205,205,205,33,401,471,470,400,172,172,172,172,33,402,472,471,401,321,321,321,321,33,259,356,472,402,174,174,174,174,33,397,467,486,480,206,206,206,206,33,467,460,485,486,257,257,257,257,33,410,445,483,477,208,208,208,208,32,446,483,488,322,322,322,32,487,484,453,257,257,257,32,446,488,487,323,323,323,32,453,446,487,324,324,324,33,432,439,482,481,257,257,257,257,33,375,389,476,473,208,208,208,208,33,383,397,480,474,212,212,212,212,33,424,459,485,479,208,208,208,208,33,425,418,478,479,325,325,325,325,33,418,453,484,478,214,214,214,214,33,411,404,475,477,326,326,326,326,33,404,432,481,475,327,327,327,327,33,389,438,482,476,208,208,208,208,33,489,493,492,488,217,217,217,217,33,488,483,445,489,328,328,328,328,33,488,492,491,487,218,218,218,218,33,487,491,494,490,219,219,219,219,32,417,452,490,220,220,220,32,494,382,396,225,225,225,32,396,466,459,223,223,223,32,396,459,424,329,329,329,32,417,490,494,222,222,222,32,494,396,424,330,330,330,32,494,424,417,331,331,331,32,438,389,375,227,227,227,32,493,489,445,231,231,231,32,493,445,410,229,229,229,32,431,438,375,230,230,230,32,493,410,403,332,332,332,32,403,431,375,228,228,228,32,375,493,403,333,333,333],\"uvs\":[],\"vertices\":[156.808,4,-42.988,164.932,4,-50.7141,156.808,0.999998,-42.988,79.1685,1,5.26306,89.9301,1,1.11191,100.475,1,-3.56229,110.778,1,-8.74826,120.814,0.999999,-14.4335,130.559,0.999999,-20.6044,139.989,0.999999,-27.246,149.082,0.999999,-34.3423,157.816,0.999998,-41.8762,165.993,0.999998,-49.6531,66.363,0.999999,-30.5264,75.3838,0.999999,-34.0061,84.223,0.999998,-37.9243,92.8594,0.999998,-42.2714,101.272,0.999998,-47.0371,109.441,0.999998,-52.2098,117.346,0.999997,-57.7771,124.968,0.999997,-63.7256,132.289,0.999997,-70.0409,139.115,0.999997,-76.5313,78.663,1,3.85031,89.3559,1,-0.274323,99.8334,1,-4.91867,110.07,1,-10.0715,120.042,0.999999,-15.7205,129.725,0.999999,-21.852,139.095,0.999999,-28.4512,148.13,0.999998,-35.5022,164.932,0.999998,-50.7141,75.9671,1,-3.68433,86.2935,1,-7.66759,96.412,0.999999,-12.1528,106.298,0.999999,-17.129,115.928,0.999999,-22.5844,125.279,0.999999,-28.5057,134.328,0.999998,-34.8788,143.054,0.999998,-41.6881,151.434,0.999998,-48.9174,159.274,0.999998,-56.3727,69.5643,0.999999,-21.5791,79.0204,0.999999,-25.2266,88.286,0.999999,-29.3338,97.339,0.999999,-33.8906,106.157,0.999998,-38.8862,114.72,0.999998,-44.3084,123.006,0.999998,-50.1443,130.997,0.999998,-56.3798,138.671,0.999997,-62.9997,145.835,0.999997,-69.8117,66.8684,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5679,93.5667,0.999998,-40.9481,102.043,0.999998,-45.7501,110.274,0.999998,-50.9622,118.239,0.999998,-56.5719,125.92,0.999997,-62.5657,133.297,0.999997,-68.9291,140.176,0.999997,-75.4703,78.663,4,3.85031,89.3559,4,-0.274323,99.8334,4,-4.91867,110.07,4,-10.0715,120.042,4,-15.7205,129.725,4,-21.852,139.095,4,-28.4512,148.13,4,-35.5022,79.1685,4,5.26306,89.9301,4,1.11191,100.475,4,-3.56229,110.778,4,-8.74826,120.814,4,-14.4335,130.559,4,-20.6044,139.989,4,-27.246,149.082,4,-34.3423,157.816,4,-41.8762,165.993,4,-49.6531,75.9671,4,-3.68433,86.2935,4,-7.66759,96.412,4,-12.1528,106.298,4,-17.129,115.928,4,-22.5844,125.279,4,-28.5057,134.328,4,-34.8788,143.054,4,-41.6881,151.434,4,-48.9174,159.274,4,-56.3727,69.5643,4,-21.5791,79.0204,4,-25.2266,88.286,4,-29.3338,97.339,4,-33.8906,106.157,4,-38.8862,114.72,4,-44.3084,123.006,4,-50.1443,130.997,4,-56.3798,138.671,4,-62.9997,145.835,4,-69.8117,66.8684,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5679,93.5667,4,-40.9481,102.043,4,-45.7501,110.274,4,-50.9622,118.239,4,-56.5719,125.92,4,-62.5657,133.297,4,-68.9291,140.176,4,-75.4703,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9243,92.8594,4,-42.2714,101.272,4,-47.0371,109.441,4,-52.2098,117.346,4,-57.7771,124.968,4,-63.7256,132.289,4,-70.0409,139.115,4,-76.5313,164.226,4,-64.1488,153.265,4,-75.109,156.801,4,-58.8455,147.962,4,-67.6843,133.998,-37.5119,-77.7434,0.24996,1,19,11.5305,1,18.717,23.0336,1,17.8685,34.4812,1,16.4565,45.8457,1,14.4846,57.0998,1,11.9575,68.2164,1,8.88113,0.250039,0.999999,-19.0114,9.66539,0.999999,-19.2487,19.3078,0.999999,-19.96,28.9038,0.999999,-21.1435,38.4301,0.999999,-22.7964,47.8638,0.999999,-24.9148,57.1823,0.999999,-27.4936,0.249963,1,17.4995,11.4568,1,17.2183,22.8865,1,16.3752,34.261,1,14.9723,45.553,1,13.013,56.7352,1,10.502,67.7808,1,7.44529,0.249979,1,9.49714,11.0642,1,9.22555,22.1021,1,8.41135,33.0868,1,7.05653,43.9918,1,5.16438,54.7908,1,2.7394,65.4578,1,-0.212544,0.250019,1,-9.50859,10.1317,1,-9.75728,20.2393,1,-10.5029,30.2982,0.999999,-11.7435,40.284,0.999999,-13.4762,50.1728,0.999999,-15.6968,59.9408,0.999999,-18.3999,0.250036,0.999999,-17.511,9.73901,0.999999,-17.7501,19.4549,0.999999,-18.4667,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,0.249963,4,17.4995,11.4568,4,17.2183,22.8865,4,16.3752,34.261,4,14.9723,45.553,4,13.013,56.7352,4,10.502,67.7808,4,7.44529,0.24996,4,19,11.5305,4,18.717,23.0336,4,17.8685,34.4812,4,16.4565,45.8457,4,14.4846,57.0998,4,11.9575,68.2164,4,8.88113,0.249979,4,9.49714,11.0642,4,9.22555,22.1021,4,8.41135,33.0868,4,7.05653,43.9918,4,5.16438,54.7908,4,2.7394,65.4578,4,-0.212545,0.250019,4,-9.50859,10.1317,4,-9.75728,20.2393,4,-10.5029,30.2982,4,-11.7435,40.284,4,-13.4762,50.1728,4,-15.6968,59.9408,4,-18.3999,0.250036,4,-17.511,9.73901,4,-17.7501,19.4549,4,-18.4667,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,8.99996,1,17.4995,8.99996,1,19,8.99998,1,9.49714,9.00002,1,-9.50859,9.00004,0.999999,-17.511,9.00004,0.999999,-19.0114,8.99996,4,17.4995,8.99996,4,19,8.99998,4,9.49714,9.00002,4,-9.50859,9.00004,4,-17.511,9.00004,4,-19.0114,9.25001,4,-8,9.24999,4,8,0.249993,4,6.5,0.25001,4,-6.5,192.513,-37.5119,-212.989,79.1685,2.30056e-7,5.26306,89.9301,4.8603e-8,1.11191,100.475,-1.55712e-7,-3.56229,110.778,-3.82399e-7,-8.74826,120.814,-6.30909e-7,-14.4335,130.559,-9.00646e-7,-20.6044,139.989,-0.00000119096,-27.246,149.082,-0.00000150115,-34.3423,157.816,-0.00000183047,-41.8762,165.993,-0.00000217041,-49.6531,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9243,92.8594,-0.00000184774,-42.2714,101.272,-0.00000205606,-47.0371,109.441,-0.00000228216,-52.2098,117.346,-0.00000252552,-57.7771,124.968,-0.00000278553,-63.7256,132.289,-0.00000306158,-70.0409,139.115,-0.00000334529,-76.5313,156.808,-4,-42.988,164.932,-4,-50.7141,156.808,-1,-42.988,79.1685,-1,5.26306,89.9301,-1,1.11191,100.475,-1,-3.56229,110.778,-1,-8.74826,120.814,-1,-14.4335,130.559,-1,-20.6044,139.989,-1,-27.246,149.082,-1,-34.3423,157.816,-1,-41.8762,165.993,-1,-49.6531,66.363,-1,-30.5264,75.3838,-1,-34.0061,84.223,-1,-37.9243,92.8594,-1,-42.2714,101.272,-1,-47.0371,109.441,-1,-52.2098,117.346,-1,-57.7771,124.968,-1,-63.7256,132.289,-1,-70.0409,139.115,-1,-76.5313,78.663,-1,3.85031,89.3559,-1,-0.274322,99.8334,-1,-4.91867,110.07,-1,-10.0715,120.042,-1,-15.7205,129.725,-1,-21.852,139.095,-1,-28.4512,148.13,-1,-35.5022,164.932,-1,-50.7141,75.9671,-1,-3.68433,86.2935,-1,-7.66759,96.412,-1,-12.1528,106.298,-1,-17.129,115.928,-1,-22.5844,125.279,-1,-28.5057,134.328,-1,-34.8788,143.054,-1,-41.6881,151.434,-1,-48.9174,159.274,-1,-56.3727,69.5643,-1,-21.5791,79.0204,-1,-25.2266,88.286,-1,-29.3338,97.339,-1,-33.8906,106.157,-1,-38.8862,114.72,-1,-44.3084,123.006,-1,-50.1443,130.997,-1,-56.3798,138.671,-1,-62.9997,145.835,-1,-69.8117,66.8684,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5679,93.5667,-1,-40.9481,102.043,-1,-45.7501,110.274,-1,-50.9622,118.239,-1,-56.5719,125.92,-1,-62.5657,133.297,-1,-68.9291,140.176,-1,-75.4703,78.663,-4,3.85031,89.3559,-4,-0.274322,99.8334,-4,-4.91867,110.07,-4,-10.0715,120.042,-4,-15.7205,129.725,-4,-21.852,139.095,-4,-28.4512,148.13,-4,-35.5022,79.1685,-4,5.26306,89.9301,-4,1.11191,100.475,-4,-3.56229,110.778,-4,-8.74826,120.814,-4,-14.4335,130.559,-4,-20.6044,139.989,-4,-27.246,149.082,-4,-34.3423,157.816,-4,-41.8762,165.993,-4,-49.6531,75.9671,-4,-3.68433,86.2935,-4,-7.66759,96.412,-4,-12.1528,106.298,-4,-17.129,115.928,-4,-22.5844,125.279,-4,-28.5057,134.328,-4,-34.8788,143.054,-4,-41.6881,151.434,-4,-48.9174,159.274,-4,-56.3727,69.5643,-4,-21.5791,79.0204,-4,-25.2266,88.286,-4,-29.3338,97.339,-4,-33.8906,106.157,-4,-38.8862,114.72,-4,-44.3084,123.006,-4,-50.1443,130.997,-4,-56.3798,138.671,-4,-62.9997,145.835,-4,-69.8117,66.8684,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5679,93.5667,-4,-40.9481,102.043,-4,-45.7501,110.274,-4,-50.9622,118.239,-4,-56.5719,125.92,-4,-62.5657,133.297,-4,-68.9291,140.176,-4,-75.4703,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9243,92.8594,-4,-42.2714,101.272,-4,-47.0371,109.441,-4,-52.2098,117.346,-4,-57.7771,124.968,-4,-63.7256,132.289,-4,-70.0409,139.115,-4,-76.5313,164.226,-4,-64.1488,153.265,-4,-75.109,156.801,-4,-58.8455,147.962,-4,-67.6843,164.226,-0.00000280403,-64.1488,153.265,-0.00000328312,-75.109,156.801,-0.00000257222,-58.8455,147.962,-0.00000295858,-67.6843,133.998,37.5119,-77.7434,0.24996,8.30516e-7,19,11.5305,8.18144e-7,18.717,23.0336,7.81055e-7,17.8685,34.4812,7.19338e-7,16.4565,45.8457,6.33144e-7,14.4846,57.0998,5.22678e-7,11.9575,68.2164,3.88207e-7,8.88113,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,0.24996,-0.999999,19,11.5305,-0.999999,18.717,23.0336,-0.999999,17.8685,34.4812,-0.999999,16.4565,45.8457,-0.999999,14.4846,57.0998,-0.999999,11.9575,68.2164,-1,8.88113,0.250039,-1,-19.0114,9.66539,-1,-19.2487,19.3078,-1,-19.96,28.9038,-1,-21.1435,38.4301,-1,-22.7964,47.8638,-1,-24.9148,57.1823,-1,-27.4936,0.249963,-0.999999,17.4995,11.4568,-0.999999,17.2183,22.8865,-0.999999,16.3752,34.261,-0.999999,14.9723,45.553,-0.999999,13.013,56.7352,-1,10.502,67.7808,-1,7.44529,0.249979,-1,9.49714,11.0642,-1,9.22555,22.1021,-1,8.41135,33.0868,-1,7.05653,43.9918,-1,5.16438,54.7908,-1,2.7394,65.4578,-1,-0.212544,0.250019,-1,-9.50859,10.1317,-1,-9.75728,20.2393,-1,-10.5029,30.2982,-1,-11.7435,40.284,-1,-13.4762,50.1728,-1,-15.6968,59.9408,-1,-18.3999,0.250036,-1,-17.511,9.73901,-1,-17.7501,19.4549,-1,-18.4667,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,0.249963,-4,17.4995,11.4568,-4,17.2183,22.8865,-4,16.3752,34.261,-4,14.9723,45.553,-4,13.013,56.7352,-4,10.502,67.7808,-4,7.44529,0.24996,-4,19,11.5305,-4,18.717,23.0336,-4,17.8685,34.4812,-4,16.4565,45.8457,-4,14.4846,57.0998,-4,11.9575,68.2164,-4,8.88113,0.249979,-4,9.49714,11.0642,-4,9.22555,22.1021,-4,8.41135,33.0868,-4,7.05653,43.9918,-4,5.16438,54.7908,-4,2.7394,65.4578,-4,-0.212544,0.250019,-4,-9.50859,10.1317,-4,-9.75728,20.2393,-4,-10.5029,30.2982,-4,-11.7435,40.284,-4,-13.4762,50.1728,-4,-15.6968,59.9408,-4,-18.3999,0.250036,-4,-17.511,9.73901,-4,-17.7501,19.4549,-4,-18.4667,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,8.99996,8.30516e-7,19,9.00004,-8.31017e-7,-19.0114,8.99996,-0.999999,17.4995,8.99996,-0.999999,19,8.99998,-1,9.49714,9.00002,-1,-9.50859,9.00004,-1,-17.511,9.00004,-1,-19.0114,8.99996,-4,17.4995,8.99996,-4,19,8.99998,-4,9.49714,9.00002,-4,-9.50859,9.00004,-4,-17.511,9.00004,-4,-19.0114,9.25001,-4,-8,9.24999,-4,8,0.249993,-4,6.5,0.25001,-4,-6.5,9.25001,-3.49691e-7,-8,9.24999,3.49691e-7,8,0.249993,2.84124e-7,6.5,0.25001,-2.84124e-7,-6.5,192.513,37.5119,-212.989],\"metadata\":{\"generator\":\"io_three\",\"normals\":334,\"uvs\":0,\"vertices\":496,\"version\":3,\"faces\":526,\"type\":\"Geometry\"}},\"curve_outer\":{\"uvs\":[],\"vertices\":[0.249976,1,17.5,14.401,1,17.1465,28.7677,1,16.0868,43.0651,1,14.3233,57.2588,1,11.8605,71.3145,1,8.70423,85.1984,1,4.86203,98.8771,1,0.343235,112.318,1,-4.84133,125.487,1,-10.6791,138.355,0.999999,-17.1561,150.889,0.999999,-24.2567,163.06,0.999999,-31.9637,174.838,0.999998,-40.2587,186.195,0.999998,-49.1215,197.103,0.999997,-58.531,207.359,0.999997,-68.2875,0.249975,1,19,14.4746,1,18.6447,28.9147,1,17.5795,43.2852,1,15.8071,57.5514,1,13.3317,71.6789,1,10.1593,85.6338,1,6.29746,99.3824,1,1.75556,112.892,1,-3.4555,126.129,1,-9.32311,139.062,0.999999,-15.8332,151.66,0.999999,-22.9701,163.893,0.999999,-30.7165,175.731,0.999998,-39.0538,187.146,0.999998,-47.962,198.11,0.999997,-57.4195,208.42,0.999997,-67.2269,0.249985,1,9.5,14.0085,1,9.15613,27.9836,1,8.12528,41.8913,1,6.40991,55.6981,1,4.01422,69.3706,1,0.943973,82.8761,1,-2.79348,96.1819,1,-7.18911,109.256,0.999999,-12.2324,122.067,0.999999,-17.911,134.584,0.999999,-24.2115,146.776,0.999999,-31.1185,158.615,0.999998,-38.6155,170.072,0.999998,-46.6843,181.119,0.999998,-55.3056,191.73,0.999997,-64.4586,201.702,0.999997,-73.9444,0.250007,1,-9.5,13.0762,1,-9.82098,26.1212,1,-10.7832,39.1034,0.999999,-12.3844,51.9914,0.999999,-14.6207,64.7541,0.999999,-17.4866,77.3607,0.999999,-20.9754,89.781,0.999999,-25.0784,101.985,0.999999,-29.7861,113.943,0.999998,-35.0868,125.627,0.999998,-40.968,137.008,0.999998,-47.4153,148.06,0.999998,-54.4134,158.754,0.999997,-61.9453,169.066,0.999997,-69.9928,178.971,0.999997,-78.5366,188.267,0.999996,-87.3794,0.250017,0.999999,-17.5,12.6837,0.999999,-17.8113,25.3371,0.999999,-18.7447,37.9295,0.999999,-20.2978,50.4307,0.999999,-22.467,62.8102,0.999999,-25.2469,75.0385,0.999999,-28.6309,87.0859,0.999999,-32.6108,98.9236,0.999998,-37.1771,110.523,0.999998,-42.3187,121.856,0.999998,-48.0233,132.896,0.999998,-54.2772,143.615,0.999997,-61.0651,153.988,0.999997,-68.3709,163.991,0.999997,-76.1769,173.598,0.999996,-84.4643,182.61,0.999996,-93.0362,0.250019,0.999999,-19,12.6101,0.999999,-19.3095,25.1901,0.999999,-20.2375,37.7094,0.999999,-21.7816,50.138,0.999999,-23.9382,62.4458,0.999999,-26.7019,74.603,0.999999,-30.0663,86.5806,0.999999,-34.0231,98.3496,0.999998,-38.563,109.882,0.999998,-43.6747,121.149,0.999998,-49.3462,132.124,0.999998,-55.5638,142.782,0.999997,-62.3123,153.095,0.999997,-69.5757,163.039,0.999997,-77.3364,172.591,0.999996,-85.5757,181.55,0.999996,-94.0969,0.250017,0.999999,-17.5,12.6837,0.999999,-17.8113,25.3371,0.999999,-18.7447,37.9295,0.999999,-20.2978,50.4307,0.999999,-22.467,62.8102,0.999999,-25.2469,75.0385,0.999999,-28.6309,87.0859,0.999999,-32.6108,98.9236,0.999998,-37.1771,110.523,0.999998,-42.3187,121.856,0.999998,-48.0233,132.896,0.999998,-54.2772,143.615,0.999997,-61.0651,153.988,0.999997,-68.3709,163.991,0.999997,-76.1769,173.598,0.999996,-84.4643,182.61,0.999996,-93.0362,0.250019,0.999999,-19,12.6101,0.999999,-19.3095,25.1901,0.999999,-20.2375,37.7094,0.999999,-21.7816,50.138,0.999999,-23.9382,62.4458,0.999999,-26.7019,74.603,0.999999,-30.0663,86.5806,0.999999,-34.0231,98.3496,0.999998,-38.563,109.882,0.999998,-43.6747,121.149,0.999998,-49.3462,132.124,0.999998,-55.5638,142.782,0.999997,-62.3123,153.095,0.999997,-69.5757,163.039,0.999997,-77.3364,172.591,0.999996,-85.5757,181.55,0.999996,-94.0969,0.249976,4,17.5,14.401,4,17.1465,28.7677,4,16.0868,43.0651,4,14.3233,57.2588,4,11.8605,71.3145,4,8.70423,85.1984,4,4.86203,98.8771,4,0.343235,112.318,4,-4.84133,125.487,4,-10.6791,138.355,4,-17.1561,150.889,4,-24.2567,163.06,4,-31.9637,174.838,4,-40.2587,186.195,4,-49.1215,197.103,4,-58.531,207.359,4,-68.2875,0.249975,4,19,14.4746,4,18.6447,28.9147,4,17.5795,43.2852,4,15.8071,57.5514,4,13.3317,71.6789,4,10.1593,85.6338,4,6.29746,99.3824,4,1.75556,112.892,4,-3.4555,126.129,4,-9.32311,139.062,4,-15.8332,151.66,4,-22.9701,163.893,4,-30.7165,175.731,4,-39.0538,187.146,4,-47.962,198.11,4,-57.4195,208.42,4,-67.2269,0.249985,4,9.5,14.0085,4,9.15613,27.9836,4,8.12528,41.8913,4,6.40991,55.6981,4,4.01422,69.3706,4,0.943973,82.8761,4,-2.79348,96.1819,4,-7.18911,109.256,4,-12.2324,122.067,4,-17.911,134.584,4,-24.2115,146.776,4,-31.1185,158.615,4,-38.6155,170.072,4,-46.6843,181.119,4,-55.3056,191.73,4,-64.4586,201.702,4,-73.9444,0.250007,4,-9.5,13.0762,4,-9.82098,26.1212,4,-10.7832,39.1034,4,-12.3844,51.9914,4,-14.6207,64.7541,4,-17.4866,77.3607,4,-20.9754,89.781,4,-25.0784,101.985,4,-29.7861,113.943,4,-35.0868,125.627,4,-40.968,137.008,4,-47.4153,148.06,4,-54.4134,158.754,4,-61.9453,169.066,4,-69.9928,178.971,4,-78.5366,188.267,4,-87.3794,0.250017,4,-17.5,12.6837,4,-17.8113,25.3371,4,-18.7447,37.9295,4,-20.2978,50.4307,4,-22.467,62.8102,4,-25.2469,75.0385,4,-28.6309,87.0859,4,-32.6108,98.9236,4,-37.1771,110.523,4,-42.3187,121.856,4,-48.0233,132.896,4,-54.2772,143.615,4,-61.0651,153.988,4,-68.3709,163.991,4,-76.1769,173.598,4,-84.4643,182.61,4,-93.0362,0.250019,4,-19,12.6101,4,-19.3095,25.1901,4,-20.2375,37.7094,4,-21.7816,50.138,4,-23.9382,62.4458,4,-26.7019,74.603,4,-30.0663,86.5806,4,-34.0231,98.3496,4,-38.563,109.882,4,-43.6747,121.149,4,-49.3462,132.124,4,-55.5638,142.782,4,-62.3123,153.095,4,-69.5757,163.039,4,-77.3364,172.591,4,-85.5757,181.55,4,-94.0969,199.227,4,-76.4193,190.742,4,-84.9045,199.227,4,-76.4193,190.742,4,-84.9045,206.652,4,-81.7226,196.046,4,-92.3292,0.25,4,-6.5,0.249993,4,6.5,9.24999,4,8,9.25,4,-8,0.249975,8.30516e-7,19,14.4746,8.14985e-7,18.6447,28.9147,7.68426e-7,17.5795,43.2852,6.9095e-7,15.8071,57.5514,5.82747e-7,13.3317,71.6789,4.44076e-7,10.1593,85.6338,2.75271e-7,6.29746,99.3824,7.67379e-8,1.75556,112.892,-1.51045e-7,-3.4555,126.129,-4.07526e-7,-9.32311,139.062,-6.92092e-7,-15.8332,151.66,-0.00000100405,-22.9701,163.893,-0.00000134266,-30.7165,175.731,-0.0000017071,-39.0538,187.146,-0.00000209649,-47.962,198.11,-0.00000250989,-57.4195,208.42,-0.00000293858,-67.2269,0.249976,7.64949e-7,17.5,207.359,-0.00000298494,-68.2875,0.249985,4.15258e-7,9.5,201.702,-0.00000323221,-73.9444,0.250017,-7.64949e-7,-17.5,12.6837,-7.78558e-7,-17.8113,25.3371,-8.19358e-7,-18.7447,37.9295,-8.87247e-7,-20.2978,50.4307,-9.82063e-7,-22.467,62.8102,-0.00000110358,-25.2469,75.0385,-0.0000012515,-28.6309,87.0859,-0.00000142546,-32.6108,98.9236,-0.00000162506,-37.1771,110.523,-0.00000184981,-42.3187,121.856,-0.00000209917,-48.0233,132.896,-0.00000237253,-54.2772,143.615,-0.00000266924,-61.0651,153.988,-0.00000298859,-68.3709,163.991,-0.0000033298,-76.1769,173.598,-0.00000369205,-84.4643,182.61,-0.00000406674,-93.0362,0.250007,-4.15258e-7,-9.5,188.267,-0.00000381947,-87.3794,0.250019,-8.30516e-7,-19,12.6101,-8.44047e-7,-19.3095,25.1901,-8.84609e-7,-20.2375,37.7094,-9.52104e-7,-21.7816,50.138,-0.00000104637,-23.9382,62.4458,-0.00000116718,-26.7019,74.603,-0.00000131424,-30.0663,86.5806,-0.0000014872,-34.0231,98.3496,-0.00000168564,-38.563,109.882,-0.00000190908,-43.6747,121.149,-0.00000215699,-49.3462,132.124,-0.00000242877,-55.5638,142.782,-0.00000272376,-62.3123,153.095,-0.00000304125,-69.5757,163.039,-0.00000338048,-77.3364,172.591,-0.00000374063,-85.5757,181.55,-0.00000411311,-94.0969,0.250017,-7.64949e-7,-17.5,12.6837,-7.78558e-7,-17.8113,25.3371,-8.19358e-7,-18.7447,37.9295,-8.87247e-7,-20.2978,50.4307,-9.82063e-7,-22.467,62.8102,-0.00000110358,-25.2469,75.0385,-0.0000012515,-28.6309,87.0859,-0.00000142546,-32.6108,98.9236,-0.00000162506,-37.1771,110.523,-0.00000184981,-42.3187,121.856,-0.00000209917,-48.0233,132.896,-0.00000237253,-54.2772,143.615,-0.00000266924,-61.0651,153.988,-0.00000298859,-68.3709,163.991,-0.0000033298,-76.1769,173.598,-0.00000369205,-84.4643,182.61,-0.00000406674,-93.0362,0.250019,-8.30516e-7,-19,12.6101,-8.44047e-7,-19.3095,25.1901,-8.84609e-7,-20.2375,37.7094,-9.52104e-7,-21.7816,50.138,-0.00000104637,-23.9382,62.4458,-0.00000116718,-26.7019,74.603,-0.00000131424,-30.0663,86.5806,-0.0000014872,-34.0231,98.3496,-0.00000168564,-38.563,109.882,-0.00000190908,-43.6747,121.149,-0.00000215699,-49.3462,132.124,-0.00000242877,-55.5638,142.782,-0.00000272376,-62.3123,153.095,-0.00000304125,-69.5757,163.039,-0.00000338048,-77.3364,172.591,-0.00000374063,-85.5757,181.55,-0.00000411311,-94.0969,0.249976,-0.999999,17.5,14.401,-0.999999,17.1465,28.7677,-0.999999,16.0868,43.0651,-0.999999,14.3233,57.2588,-0.999999,11.8605,71.3145,-1,8.70423,85.1984,-1,4.86203,98.8771,-1,0.343236,112.318,-1,-4.84133,125.487,-1,-10.6791,138.355,-1,-17.1561,150.889,-1,-24.2567,163.06,-1,-31.9637,174.838,-1,-40.2587,186.195,-1,-49.1215,197.103,-1,-58.531,207.359,-1,-68.2875,0.249975,-0.999999,19,14.4746,-0.999999,18.6447,28.9147,-0.999999,17.5795,43.2852,-0.999999,15.8071,57.5514,-0.999999,13.3317,71.6789,-1,10.1593,85.6338,-1,6.29746,99.3824,-1,1.75556,112.892,-1,-3.4555,126.129,-1,-9.32311,139.062,-1,-15.8332,151.66,-1,-22.9701,163.893,-1,-30.7165,175.731,-1,-39.0538,187.146,-1,-47.962,198.11,-1,-57.4195,208.42,-1,-67.2269,0.249985,-1,9.5,14.0085,-1,9.15613,27.9836,-1,8.12528,41.8913,-1,6.40991,55.6981,-1,4.01422,69.3706,-1,0.943973,82.8761,-1,-2.79348,96.1819,-1,-7.18911,109.256,-1,-12.2324,122.067,-1,-17.911,134.584,-1,-24.2115,146.776,-1,-31.1185,158.615,-1,-38.6155,170.072,-1,-46.6843,181.119,-1,-55.3056,191.73,-1,-64.4586,201.702,-1,-73.9444,0.250007,-1,-9.5,13.0762,-1,-9.82098,26.1212,-1,-10.7832,39.1034,-1,-12.3844,51.9914,-1,-14.6207,64.7541,-1,-17.4866,77.3607,-1,-20.9754,89.781,-1,-25.0784,101.985,-1,-29.7861,113.943,-1,-35.0868,125.627,-1,-40.968,137.008,-1,-47.4153,148.06,-1,-54.4134,158.754,-1,-61.9453,169.066,-1,-69.9928,178.971,-1,-78.5366,188.267,-1,-87.3794,0.250017,-1,-17.5,12.6837,-1,-17.8113,25.3371,-1,-18.7447,37.9295,-1,-20.2978,50.4307,-1,-22.467,62.8102,-1,-25.2469,75.0385,-1,-28.6309,87.0859,-1,-32.6108,98.9236,-1,-37.1771,110.523,-1,-42.3187,121.856,-1,-48.0233,132.896,-1,-54.2772,143.615,-1,-61.0651,153.988,-1,-68.3709,163.991,-1,-76.1769,173.598,-1,-84.4643,182.61,-1,-93.0362,0.250019,-1,-19,12.6101,-1,-19.3095,25.1901,-1,-20.2375,37.7094,-1,-21.7816,50.138,-1,-23.9382,62.4458,-1,-26.7019,74.603,-1,-30.0663,86.5806,-1,-34.0231,98.3496,-1,-38.563,109.882,-1,-43.6747,121.149,-1,-49.3462,132.124,-1,-55.5638,142.782,-1,-62.3123,153.095,-1,-69.5757,163.039,-1,-77.3364,172.591,-1,-85.5757,181.55,-1,-94.0969,0.250017,-1,-17.5,12.6837,-1,-17.8113,25.3371,-1,-18.7447,37.9295,-1,-20.2978,50.4307,-1,-22.467,62.8102,-1,-25.2469,75.0385,-1,-28.6309,87.0859,-1,-32.6108,98.9236,-1,-37.1771,110.523,-1,-42.3187,121.856,-1,-48.0233,132.896,-1,-54.2772,143.615,-1,-61.0651,153.988,-1,-68.3709,163.991,-1,-76.1769,173.598,-1,-84.4643,182.61,-1,-93.0362,0.250019,-1,-19,12.6101,-1,-19.3095,25.1901,-1,-20.2375,37.7094,-1,-21.7816,50.138,-1,-23.9382,62.4458,-1,-26.7019,74.603,-1,-30.0663,86.5806,-1,-34.0231,98.3496,-1,-38.563,109.882,-1,-43.6747,121.149,-1,-49.3462,132.124,-1,-55.5638,142.782,-1,-62.3123,153.095,-1,-69.5757,163.039,-1,-77.3364,172.591,-1,-85.5757,181.55,-1,-94.0969,0.249976,-4,17.5,14.401,-4,17.1465,28.7677,-4,16.0868,43.0651,-4,14.3233,57.2588,-4,11.8605,71.3145,-4,8.70423,85.1984,-4,4.86203,98.8771,-4,0.343236,112.318,-4,-4.84133,125.487,-4,-10.6791,138.355,-4,-17.1561,150.889,-4,-24.2567,163.06,-4,-31.9637,174.838,-4,-40.2587,186.195,-4,-49.1215,197.103,-4,-58.531,207.359,-4,-68.2875,0.249975,-4,19,14.4746,-4,18.6447,28.9147,-4,17.5795,43.2852,-4,15.8071,57.5514,-4,13.3317,71.6789,-4,10.1593,85.6338,-4,6.29746,99.3824,-4,1.75556,112.892,-4,-3.4555,126.129,-4,-9.32311,139.062,-4,-15.8332,151.66,-4,-22.9701,163.893,-4,-30.7165,175.731,-4,-39.0538,187.146,-4,-47.962,198.11,-4,-57.4195,208.42,-4,-67.2269,0.249985,-4,9.5,14.0085,-4,9.15613,27.9836,-4,8.12528,41.8913,-4,6.40991,55.6981,-4,4.01422,69.3706,-4,0.943973,82.8761,-4,-2.79348,96.1819,-4,-7.18911,109.256,-4,-12.2324,122.067,-4,-17.911,134.584,-4,-24.2115,146.776,-4,-31.1185,158.615,-4,-38.6155,170.072,-4,-46.6843,181.119,-4,-55.3056,191.73,-4,-64.4586,201.702,-4,-73.9444,0.250007,-4,-9.5,13.0762,-4,-9.82098,26.1212,-4,-10.7832,39.1034,-4,-12.3844,51.9914,-4,-14.6207,64.7541,-4,-17.4866,77.3607,-4,-20.9754,89.781,-4,-25.0784,101.985,-4,-29.7861,113.943,-4,-35.0868,125.627,-4,-40.968,137.008,-4,-47.4153,148.06,-4,-54.4134,158.754,-4,-61.9453,169.066,-4,-69.9928,178.971,-4,-78.5366,188.267,-4,-87.3794,0.250017,-4,-17.5,12.6837,-4,-17.8113,25.3371,-4,-18.7447,37.9295,-4,-20.2978,50.4307,-4,-22.467,62.8102,-4,-25.2469,75.0385,-4,-28.6309,87.0859,-4,-32.6108,98.9236,-4,-37.1771,110.523,-4,-42.3187,121.856,-4,-48.0233,132.896,-4,-54.2772,143.615,-4,-61.0651,153.988,-4,-68.3709,163.991,-4,-76.1769,173.598,-4,-84.4643,182.61,-4,-93.0362,0.250019,-4,-19,12.6101,-4,-19.3095,25.1901,-4,-20.2375,37.7094,-4,-21.7816,50.138,-4,-23.9382,62.4458,-4,-26.7019,74.603,-4,-30.0663,86.5806,-4,-34.0231,98.3496,-4,-38.563,109.882,-4,-43.6747,121.149,-4,-49.3462,132.124,-4,-55.5638,142.782,-4,-62.3123,153.095,-4,-69.5757,163.039,-4,-77.3364,172.591,-4,-85.5757,181.55,-4,-94.0969,199.227,-0.00000334039,-76.4193,199.227,-4,-76.4193,190.742,-0.00000371129,-84.9045,190.742,-4,-84.9045,199.227,-4,-76.4193,199.227,-0.00000334039,-76.4193,190.742,-0.00000371129,-84.9045,190.742,-4,-84.9045,206.652,-4,-81.7226,206.652,-0.00000357221,-81.7226,196.046,-0.00000403584,-92.3292,196.046,-4,-92.3292,0.25,-2.84124e-7,-6.5,0.25,-4,-6.5,0.249993,-4,6.5,0.249992,2.84124e-7,6.5,9.24999,3.49691e-7,8,9.25,-3.49691e-7,-8,9.24999,-4,8,9.25,-4,-8],\"faces\":[33,32,33,169,168,0,0,0,0,33,31,32,168,167,1,1,1,1,33,30,31,167,166,2,2,2,2,33,29,30,166,165,3,3,3,3,33,28,29,165,164,4,4,4,4,33,27,28,164,163,5,5,5,5,33,26,27,163,162,6,6,6,6,33,25,26,162,161,7,7,7,7,33,24,25,161,160,8,8,8,8,33,23,24,160,159,9,9,9,9,33,22,23,159,158,10,10,10,10,33,21,22,158,157,11,11,11,11,33,20,21,157,156,12,12,12,12,33,19,20,156,155,13,13,13,13,33,18,19,155,154,14,14,14,14,33,17,18,154,153,15,15,15,15,33,16,15,151,152,16,16,16,16,33,15,14,150,151,17,17,17,17,33,14,13,149,150,18,18,18,18,33,13,12,148,149,19,19,19,19,33,12,11,147,148,20,20,20,20,33,11,10,146,147,21,21,21,21,33,10,9,145,146,22,22,22,22,33,9,8,144,145,23,23,23,23,33,0,1,35,34,24,24,24,24,33,1,2,36,35,25,25,25,25,33,2,3,37,36,26,26,26,26,33,3,4,38,37,27,27,27,27,33,4,5,39,38,28,28,28,28,33,5,6,40,39,29,29,29,29,33,6,7,41,40,30,30,30,30,33,7,8,42,41,31,31,31,31,33,8,9,43,42,32,32,32,32,33,9,10,44,43,33,33,33,33,33,10,11,45,44,34,34,34,34,33,11,12,46,45,35,35,35,35,33,12,13,47,46,36,36,36,36,33,13,14,48,47,37,37,37,37,33,14,15,49,48,38,38,38,38,33,15,16,50,49,39,39,39,39,33,67,66,202,203,40,40,40,40,33,66,65,201,202,41,41,41,41,33,65,64,200,201,42,42,42,42,33,64,63,199,200,43,43,43,43,33,63,62,198,199,44,44,44,44,33,62,61,197,198,45,45,45,45,33,61,60,196,197,46,46,46,46,33,60,59,195,196,47,47,47,47,33,59,58,194,195,48,48,48,48,33,58,57,193,194,49,49,49,49,33,57,56,192,193,50,50,50,50,33,56,55,191,192,51,51,51,51,33,55,54,190,191,52,52,52,52,33,54,53,189,190,53,53,53,53,33,53,52,188,189,54,54,54,54,33,52,51,187,188,55,55,55,55,33,69,68,51,52,56,56,56,56,33,70,69,52,53,57,57,57,57,33,71,70,53,54,58,58,58,58,33,72,71,54,55,59,59,59,59,33,73,72,55,56,60,60,60,60,33,74,73,56,57,61,61,61,61,33,75,74,57,58,62,62,62,62,33,76,75,58,59,63,63,63,63,33,77,76,59,60,64,64,64,64,33,78,77,60,61,65,65,65,65,33,79,78,61,62,66,66,66,66,33,80,79,62,63,67,67,67,67,33,81,80,63,64,68,68,68,68,33,82,81,64,65,69,69,69,69,33,83,82,65,66,70,70,70,70,33,84,83,66,67,71,71,71,71,33,101,100,236,237,72,72,72,72,33,100,99,235,236,73,73,73,73,33,99,98,234,235,74,74,74,74,33,98,97,233,234,75,75,75,75,33,97,96,232,233,76,76,76,76,33,96,95,231,232,77,77,77,77,33,95,94,230,231,78,78,78,78,33,94,93,229,230,79,79,79,79,33,93,92,228,229,80,80,80,80,33,92,91,227,228,81,81,81,81,33,91,90,226,227,82,82,82,82,33,90,89,225,226,83,83,83,83,33,89,88,224,225,84,84,84,84,33,88,87,223,224,85,85,85,85,33,87,86,222,223,86,86,86,86,33,85,86,120,119,87,87,87,87,33,86,87,121,120,87,87,87,87,33,87,88,122,121,87,87,87,87,33,88,89,123,122,87,87,87,87,33,89,90,124,123,87,87,87,87,33,90,91,125,124,87,87,87,87,33,91,92,126,125,87,87,87,87,33,92,93,127,126,87,87,87,87,33,93,94,128,127,87,87,87,87,33,94,95,129,128,87,87,87,87,33,95,96,130,129,87,87,87,87,33,96,97,131,130,87,87,87,87,33,97,98,132,131,87,87,87,87,33,98,99,133,132,87,87,87,87,33,99,100,134,133,87,87,87,87,33,100,101,135,134,87,87,87,87,33,69,68,102,103,87,87,87,87,33,70,69,103,104,87,87,87,87,33,71,70,104,105,87,87,87,87,33,72,71,105,106,87,87,87,87,33,73,72,106,107,87,87,87,87,33,74,73,107,108,87,87,87,87,33,75,74,108,109,87,87,87,87,33,76,75,109,110,87,87,87,87,33,77,76,110,111,87,87,87,87,33,78,77,111,112,87,87,87,87,33,79,78,112,113,87,87,87,87,33,80,79,113,114,87,87,87,87,33,81,80,114,115,87,87,87,87,33,82,81,115,116,87,87,87,87,33,83,82,116,117,87,87,87,87,33,84,83,117,118,87,87,87,87,33,248,249,18,17,88,88,88,88,33,249,250,19,18,89,89,89,89,33,250,251,20,19,90,90,90,90,33,251,252,21,20,91,91,91,91,33,252,253,22,21,92,92,92,92,33,253,254,23,22,93,93,93,93,33,254,255,24,23,94,94,94,94,33,328,327,124,125,95,95,95,95,33,255,256,25,24,96,96,96,96,33,329,328,125,126,97,97,97,97,33,330,329,126,127,80,80,80,80,33,256,257,26,25,7,7,7,7,33,331,330,127,128,98,98,98,98,33,332,331,128,129,78,78,78,78,33,257,258,27,26,6,6,6,6,33,333,332,129,130,99,99,99,99,33,334,333,130,131,100,100,100,100,33,258,259,28,27,101,101,101,101,33,335,334,131,132,102,102,102,102,33,336,335,132,133,74,74,74,74,33,259,260,29,28,4,4,4,4,33,337,336,133,134,103,103,103,103,33,338,337,134,135,72,72,72,72,33,260,261,30,29,104,104,104,104,33,261,262,31,30,2,2,2,2,33,262,263,32,31,105,105,105,105,33,263,264,33,32,0,0,0,0,32,264,266,268,106,106,106,32,268,577,238,107,107,107,32,238,186,50,107,107,107,32,16,152,169,108,108,108,32,268,238,50,107,107,107,32,16,169,33,108,108,108,32,268,50,16,109,109,109,32,33,264,268,110,110,110,32,268,16,33,111,111,111,33,323,322,119,120,112,112,112,112,33,324,323,120,121,86,86,86,86,33,325,324,121,122,113,113,113,113,33,326,325,122,123,114,114,114,114,33,327,326,123,124,115,115,115,115,33,153,154,137,136,116,116,116,116,33,154,155,138,137,117,117,117,117,33,155,156,139,138,118,118,118,118,33,156,157,140,139,119,119,119,119,33,157,158,141,140,119,119,119,119,33,158,159,142,141,120,120,120,120,33,159,160,143,142,121,121,121,121,33,160,161,144,143,122,122,122,122,33,161,162,145,144,123,123,123,123,33,162,163,146,145,124,124,124,124,33,163,164,147,146,125,125,125,125,33,164,165,148,147,126,126,126,126,33,165,166,149,148,127,127,127,127,33,166,167,150,149,128,128,128,128,33,167,168,151,150,129,129,129,129,33,168,169,152,151,130,130,130,130,33,1,0,136,137,131,131,131,131,33,2,1,137,138,132,132,132,132,33,3,2,138,139,133,133,133,133,33,4,3,139,140,134,134,134,134,33,5,4,140,141,135,135,135,135,33,6,5,141,142,136,136,136,136,33,7,6,142,143,49,49,49,49,33,8,7,143,144,137,137,137,137,33,171,172,189,188,138,138,138,138,33,172,173,190,189,139,139,139,139,33,173,174,191,190,140,140,140,140,33,174,175,192,191,141,141,141,141,33,175,176,193,192,142,142,142,142,33,176,177,194,193,143,143,143,143,33,177,178,195,194,144,144,144,144,33,178,179,196,195,145,145,145,145,33,179,180,197,196,146,146,146,146,33,180,181,198,197,147,147,147,147,33,181,182,199,198,148,148,148,148,33,182,183,200,199,149,149,149,149,33,183,184,201,200,150,150,150,150,33,184,185,202,201,151,151,151,151,32,202,185,186,152,152,152,32,238,239,203,153,153,153,32,202,186,238,154,154,154,32,238,203,202,155,155,155,33,34,35,171,170,156,156,156,156,33,35,36,172,171,157,157,157,157,33,36,37,173,172,158,158,158,158,33,37,38,174,173,159,159,159,159,33,38,39,175,174,160,160,160,160,33,39,40,176,175,161,161,161,161,33,40,41,177,176,162,162,162,162,33,41,42,178,177,163,163,163,163,33,42,43,179,178,164,164,164,164,33,43,44,180,179,165,165,165,165,33,44,45,181,180,166,166,166,166,33,45,46,182,181,167,167,167,167,33,46,47,183,182,168,168,168,168,33,47,48,184,183,169,169,169,169,33,48,49,185,184,170,170,170,170,33,49,50,186,185,171,171,171,171,33,204,205,222,221,172,172,172,172,33,205,206,223,222,173,173,173,173,33,206,207,224,223,174,174,174,174,33,207,208,225,224,119,119,119,119,33,208,209,226,225,175,175,175,175,33,209,210,227,226,176,176,176,176,33,210,211,228,227,177,177,177,177,33,211,212,229,228,178,178,178,178,33,212,213,230,229,179,179,179,179,33,213,214,231,230,180,180,180,180,33,214,215,232,231,181,181,181,181,33,215,216,233,232,182,182,182,182,33,216,217,234,233,183,183,183,183,33,217,218,235,234,184,184,184,184,33,218,219,236,235,185,185,185,185,33,219,220,237,236,186,186,186,186,33,68,69,205,204,187,187,187,187,33,69,70,206,205,188,188,188,188,33,70,71,207,206,189,189,189,189,33,71,72,208,207,190,190,190,190,33,72,73,209,208,191,191,191,191,33,73,74,210,209,192,192,192,192,33,74,75,211,210,193,193,193,193,33,75,76,212,211,194,194,194,194,33,76,77,213,212,195,195,195,195,33,77,78,214,213,196,196,196,196,33,78,79,215,214,197,197,197,197,33,79,80,216,215,4,4,4,4,33,80,81,217,216,198,198,198,198,33,81,82,218,217,199,199,199,199,33,82,83,219,218,200,200,200,200,33,83,84,220,219,201,201,201,201,33,86,85,221,222,202,202,202,202,32,203,239,579,203,203,203,32,579,287,285,204,204,204,32,67,203,579,205,205,205,32,237,220,84,206,206,206,32,84,67,579,207,207,207,32,285,304,338,87,87,87,32,135,101,237,87,87,87,32,285,338,135,206,206,206,32,84,579,285,208,208,208,32,135,237,84,206,206,206,32,285,135,84,206,206,206,33,241,240,242,243,209,209,209,209,33,239,238,240,241,87,87,87,87,33,238,577,582,240,87,87,87,87,33,579,239,241,583,87,87,87,87,33,242,586,587,243,210,210,210,210,33,240,582,586,242,211,211,211,211,33,583,241,243,587,212,212,212,212,32,267,265,248,213,213,213,32,17,153,136,214,214,214,32,267,248,17,214,214,214,32,245,592,267,215,215,215,32,34,170,245,216,216,216,32,17,136,0,217,217,217,32,34,245,267,218,218,218,32,267,17,0,217,217,217,32,0,34,267,217,217,217,32,286,589,244,219,219,219,32,244,187,51,220,220,220,32,68,204,221,221,221,221,32,286,244,51,220,220,220,32,286,51,68,222,222,222,32,322,288,269,87,87,87,32,269,286,68,223,223,223,32,221,85,119,87,87,87,32,119,322,269,224,224,224,32,269,68,221,225,225,225,32,221,119,269,226,226,226,33,593,246,247,594,227,227,227,227,33,244,589,594,247,228,228,228,228,32,245,170,171,229,229,229,32,188,187,244,230,230,230,32,188,244,247,231,231,231,32,246,245,171,232,232,232,32,188,247,246,233,233,233,32,171,188,246,234,234,234,33,592,245,246,593,235,235,235,235,33,288,289,323,322,87,87,87,87,33,289,290,324,323,87,87,87,87,33,290,291,325,324,87,87,87,87,33,291,292,326,325,87,87,87,87,33,292,293,327,326,87,87,87,87,33,293,294,328,327,87,87,87,87,33,294,295,329,328,87,87,87,87,33,295,296,330,329,87,87,87,87,33,296,297,331,330,87,87,87,87,33,297,298,332,331,87,87,87,87,33,298,299,333,332,87,87,87,87,33,299,300,334,333,87,87,87,87,33,300,301,335,334,87,87,87,87,33,301,302,336,335,87,87,87,87,33,302,303,337,336,87,87,87,87,33,303,304,338,337,87,87,87,87,33,270,269,305,306,87,87,87,87,33,271,270,306,307,87,87,87,87,33,272,271,307,308,87,87,87,87,33,273,272,308,309,87,87,87,87,33,274,273,309,310,87,87,87,87,33,275,274,310,311,87,87,87,87,33,276,275,311,312,87,87,87,87,33,277,276,312,313,87,87,87,87,33,278,277,313,314,87,87,87,87,33,279,278,314,315,87,87,87,87,33,280,279,315,316,87,87,87,87,33,281,280,316,317,87,87,87,87,33,282,281,317,318,87,87,87,87,33,283,282,318,319,87,87,87,87,33,284,283,319,320,87,87,87,87,33,285,284,320,321,87,87,87,87,33,371,507,508,372,0,0,0,0,33,370,506,507,371,1,1,1,1,33,369,505,506,370,2,2,2,2,33,368,504,505,369,3,3,3,3,33,367,503,504,368,4,4,4,4,33,366,502,503,367,5,5,5,5,33,365,501,502,366,6,6,6,6,33,364,500,501,365,236,236,236,236,33,363,499,500,364,237,237,237,237,33,362,498,499,363,9,9,9,9,33,361,497,498,362,238,238,238,238,33,360,496,497,361,11,11,11,11,33,359,495,496,360,12,12,12,12,33,358,494,495,359,13,13,13,13,33,357,493,494,358,239,239,239,239,33,356,492,493,357,15,15,15,15,33,355,491,490,354,16,16,16,16,33,354,490,489,353,17,17,17,17,33,353,489,488,352,18,18,18,18,33,352,488,487,351,19,19,19,19,33,351,487,486,350,20,20,20,20,33,350,486,485,349,21,21,21,21,33,349,485,484,348,22,22,22,22,33,348,484,483,347,23,23,23,23,33,339,373,374,340,240,240,240,240,33,340,374,375,341,241,241,241,241,33,341,375,376,342,242,242,242,242,33,342,376,377,343,243,243,243,243,33,343,377,378,344,244,244,244,244,33,344,378,379,345,245,245,245,245,33,345,379,380,346,246,246,246,246,33,346,380,381,347,247,247,247,247,33,347,381,382,348,248,248,248,248,33,348,382,383,349,249,249,249,249,33,349,383,384,350,250,250,250,250,33,350,384,385,351,251,251,251,251,33,351,385,386,352,252,252,252,252,33,352,386,387,353,253,253,253,253,33,353,387,388,354,254,254,254,254,33,354,388,389,355,255,255,255,255,33,406,542,541,405,40,40,40,40,33,405,541,540,404,41,41,41,41,33,404,540,539,403,42,42,42,42,33,403,539,538,402,43,43,43,43,33,402,538,537,401,44,44,44,44,33,401,537,536,400,45,45,45,45,33,400,536,535,399,46,46,46,46,33,399,535,534,398,256,256,256,256,33,398,534,533,397,48,48,48,48,33,397,533,532,396,49,49,49,49,33,396,532,531,395,50,50,50,50,33,395,531,530,394,257,257,257,257,33,394,530,529,393,52,52,52,52,33,393,529,528,392,53,53,53,53,33,392,528,527,391,54,54,54,54,33,391,527,526,390,55,55,55,55,33,408,391,390,407,258,258,258,258,33,409,392,391,408,259,259,259,259,33,410,393,392,409,260,260,260,260,33,411,394,393,410,261,261,261,261,33,412,395,394,411,262,262,262,262,33,413,396,395,412,263,263,263,263,33,414,397,396,413,264,264,264,264,33,415,398,397,414,265,265,265,265,33,416,399,398,415,266,266,266,266,33,417,400,399,416,267,267,267,267,33,418,401,400,417,268,268,268,268,33,419,402,401,418,269,269,269,269,33,420,403,402,419,270,270,270,270,33,421,404,403,420,271,271,271,271,33,422,405,404,421,272,272,272,272,33,423,406,405,422,273,273,273,273,33,440,576,575,439,72,72,72,72,33,439,575,574,438,73,73,73,73,33,438,574,573,437,74,74,74,74,33,437,573,572,436,75,75,75,75,33,436,572,571,435,274,274,274,274,33,435,571,570,434,77,77,77,77,33,434,570,569,433,78,78,78,78,33,433,569,568,432,79,79,79,79,33,432,568,567,431,80,80,80,80,33,431,567,566,430,81,81,81,81,33,430,566,565,429,82,82,82,82,33,429,565,564,428,83,83,83,83,33,428,564,563,427,84,84,84,84,33,427,563,562,426,85,85,85,85,33,426,562,561,425,86,86,86,86,33,424,458,459,425,87,87,87,87,33,425,459,460,426,87,87,87,87,33,426,460,461,427,87,87,87,87,33,427,461,462,428,87,87,87,87,33,428,462,463,429,87,87,87,87,33,429,463,464,430,87,87,87,87,33,430,464,465,431,87,87,87,87,33,431,465,466,432,87,87,87,87,33,432,466,467,433,87,87,87,87,33,433,467,468,434,87,87,87,87,33,434,468,469,435,87,87,87,87,33,435,469,470,436,87,87,87,87,33,436,470,471,437,87,87,87,87,33,437,471,472,438,87,87,87,87,33,438,472,473,439,87,87,87,87,33,439,473,474,440,87,87,87,87,33,408,442,441,407,87,87,87,87,33,409,443,442,408,87,87,87,87,33,410,444,443,409,87,87,87,87,33,411,445,444,410,87,87,87,87,33,412,446,445,411,87,87,87,87,33,413,447,446,412,87,87,87,87,33,414,448,447,413,87,87,87,87,33,415,449,448,414,87,87,87,87,33,416,450,449,415,87,87,87,87,33,417,451,450,416,87,87,87,87,33,418,452,451,417,87,87,87,87,33,419,453,452,418,87,87,87,87,33,420,454,453,419,87,87,87,87,33,421,455,454,420,87,87,87,87,33,422,456,455,421,87,87,87,87,33,423,457,456,422,87,87,87,87,33,248,356,357,249,88,88,88,88,33,249,357,358,250,89,89,89,89,33,250,358,359,251,90,90,90,90,33,251,359,360,252,91,91,91,91,33,252,360,361,253,92,92,92,92,33,253,361,362,254,93,93,93,93,33,254,362,363,255,9,9,9,9,33,328,464,463,327,95,95,95,95,33,255,363,364,256,96,96,96,96,33,329,465,464,328,97,97,97,97,33,330,466,465,329,80,80,80,80,33,256,364,365,257,7,7,7,7,33,331,467,466,330,98,98,98,98,33,332,468,467,331,78,78,78,78,33,257,365,366,258,6,6,6,6,33,333,469,468,332,99,99,99,99,33,334,470,469,333,100,100,100,100,33,258,366,367,259,101,101,101,101,33,335,471,470,334,102,102,102,102,33,336,472,471,335,74,74,74,74,33,259,367,368,260,4,4,4,4,33,337,473,472,336,103,103,103,103,33,338,474,473,337,72,72,72,72,33,260,368,369,261,104,104,104,104,33,261,369,370,262,2,2,2,2,33,262,370,371,263,105,105,105,105,33,263,371,372,264,0,0,0,0,32,266,264,372,208,208,208,32,372,508,491,108,108,108,32,372,491,355,108,108,108,32,268,266,372,275,275,275,32,578,577,268,107,107,107,32,389,525,578,107,107,107,32,268,372,355,276,276,276,32,389,578,268,107,107,107,32,355,389,268,109,109,109,33,323,459,458,322,112,112,112,112,33,324,460,459,323,86,86,86,86,33,325,461,460,324,113,113,113,113,33,326,462,461,325,114,114,114,114,33,327,463,462,326,115,115,115,115,33,492,475,476,493,277,277,277,277,33,493,476,477,494,277,277,277,277,33,494,477,478,495,278,278,278,278,33,495,478,479,496,279,279,279,279,33,496,479,480,497,278,278,278,278,33,497,480,481,498,280,280,280,280,33,498,481,482,499,281,281,281,281,33,499,482,483,500,278,278,278,278,33,500,483,484,501,282,282,282,282,33,501,484,485,502,283,283,283,283,33,502,485,486,503,284,284,284,284,33,503,486,487,504,285,285,285,285,33,504,487,488,505,286,286,286,286,33,505,488,489,506,287,287,287,287,33,506,489,490,507,288,288,288,288,33,507,490,491,508,289,289,289,289,33,340,476,475,339,290,290,290,290,33,341,477,476,340,132,132,132,132,33,342,478,477,341,133,133,133,133,33,343,479,478,342,134,134,134,134,33,344,480,479,343,135,135,135,135,33,345,481,480,344,136,136,136,136,33,346,482,481,345,49,49,49,49,33,347,483,482,346,137,137,137,137,33,510,527,528,511,291,291,291,291,33,511,528,529,512,292,292,292,292,33,512,529,530,513,293,293,293,293,33,513,530,531,514,294,294,294,294,33,514,531,532,515,295,295,295,295,33,515,532,533,516,296,296,296,296,33,516,533,534,517,297,297,297,297,33,517,534,535,518,298,298,298,298,33,518,535,536,519,299,299,299,299,33,519,536,537,520,300,300,300,300,33,520,537,538,521,301,301,301,301,33,521,538,539,522,302,302,302,302,33,522,539,540,523,303,303,303,303,33,523,540,541,524,304,304,304,304,32,525,524,541,305,305,305,32,541,542,580,306,306,306,32,578,525,541,307,307,307,32,541,580,578,308,308,308,33,373,509,510,374,156,156,156,156,33,374,510,511,375,309,309,309,309,33,375,511,512,376,310,310,310,310,33,376,512,513,377,159,159,159,159,33,377,513,514,378,311,311,311,311,33,378,514,515,379,161,161,161,161,33,379,515,516,380,312,312,312,312,33,380,516,517,381,163,163,163,163,33,381,517,518,382,164,164,164,164,33,382,518,519,383,165,165,165,165,33,383,519,520,384,166,166,166,166,33,384,520,521,385,313,313,313,313,33,385,521,522,386,168,168,168,168,33,386,522,523,387,169,169,169,169,33,387,523,524,388,170,170,170,170,33,388,524,525,389,171,171,171,171,33,543,560,561,544,277,277,277,277,33,544,561,562,545,277,277,277,277,33,545,562,563,546,278,278,278,278,33,546,563,564,547,278,278,278,278,33,547,564,565,548,314,314,314,314,33,548,565,566,549,315,315,315,315,33,549,566,567,550,278,278,278,278,33,550,567,568,551,316,316,316,316,33,551,568,569,552,317,317,317,317,33,552,569,570,553,318,318,318,318,33,553,570,571,554,319,319,319,319,33,554,571,572,555,320,320,320,320,33,555,572,573,556,278,278,278,278,33,556,573,574,557,321,321,321,321,33,557,574,575,558,322,322,322,322,33,558,575,576,559,323,323,323,323,33,407,543,544,408,324,324,324,324,33,408,544,545,409,188,188,188,188,33,409,545,546,410,189,189,189,189,33,410,546,547,411,190,190,190,190,33,411,547,548,412,191,191,191,191,33,412,548,549,413,192,192,192,192,33,413,549,550,414,193,193,193,193,33,414,550,551,415,194,194,194,194,33,415,551,552,416,325,325,325,325,33,416,552,553,417,196,196,196,196,33,417,553,554,418,197,197,197,197,33,418,554,555,419,4,4,4,4,33,419,555,556,420,198,198,198,198,33,420,556,557,421,326,326,326,326,33,421,557,558,422,200,200,200,200,33,422,558,559,423,201,201,201,201,33,425,561,560,424,202,202,202,202,33,577,582,583,579,87,87,87,87,32,579,580,542,327,327,327,32,579,542,406,205,205,205,32,287,579,406,328,328,328,32,423,559,576,206,206,206,32,287,406,423,109,109,109,32,338,304,285,87,87,87,32,285,287,423,109,109,109,32,576,440,474,87,87,87,32,474,338,285,206,206,206,32,285,423,576,206,206,206,32,576,474,285,206,206,206,33,584,588,585,581,329,329,329,329,33,580,584,581,578,87,87,87,87,33,578,581,582,577,87,87,87,87,33,579,583,584,580,87,87,87,87,33,585,588,587,586,330,330,330,330,33,581,585,586,582,211,211,211,211,33,583,587,588,584,331,331,331,331,32,265,267,592,332,332,332,32,592,591,509,333,333,333,32,592,509,373,334,334,334,32,356,248,265,214,214,214,32,265,592,373,335,335,335,32,339,475,492,217,217,217,32,265,373,339,217,217,217,32,492,356,265,214,214,214,32,265,339,492,217,217,217,32,590,589,286,219,219,219,32,269,288,322,87,87,87,32,458,424,560,87,87,87,32,269,322,458,224,224,224,32,390,526,590,220,220,220,32,560,543,407,221,221,221,32,390,590,286,220,220,220,32,458,560,407,226,226,226,32,407,390,286,222,222,222,32,286,269,458,336,336,336,32,286,458,407,337,337,337,33,593,594,596,595,227,227,227,227,33,590,596,594,589,228,228,228,228,32,510,509,591,338,338,338,32,510,591,595,339,339,339,32,590,526,527,278,278,278,32,510,595,596,340,340,340,32,596,590,527,278,278,278,32,596,527,510,341,341,341,33,592,593,595,591,235,235,235,235],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":597,\"version\":3,\"normals\":342,\"type\":\"Geometry\",\"faces\":629},\"normals\":[0.689228,0,0.724544,0.653173,0,0.757208,0.615232,0,0.788346,0.575809,0,0.817585,0.534997,0,0.844854,0.492899,0,0.870087,0.449612,0,0.893224,0.40524,0,0.91421,0.359895,8.78191e-8,0.932993,0.313681,0,0.949528,0.266712,0,0.963776,0.2191,0,0.975702,0.170961,0,0.985278,0.122411,0,0.99248,0.0735635,0,0.997291,0.0249712,0,0.999688,-0.689226,0,-0.724546,-0.653173,0,-0.757208,-0.615231,0,-0.788347,-0.575809,0,-0.817584,-0.534998,0,-0.844853,-0.492899,0,-0.870087,-0.449612,0,-0.893224,-0.405239,0,-0.914211,-1.11701e-9,1,-4.4703e-8,-3.28951e-9,1,-4.45958e-8,2.85251e-9,1,-4.54076e-8,6.21083e-10,1,-4.54929e-8,-1.61182e-9,1,-4.54686e-8,-3.841e-9,1,-4.53347e-8,1.08261e-9,1,-4.3527e-8,2.24338e-9,1,-4.08058e-8,2.38619e-10,1,-4.08668e-8,1.97976e-9,1,-4.27152e-8,-1.18528e-10,1,-4.27609e-8,-2.21657e-9,1,-4.27036e-8,2.98072e-9,1,-4.31198e-8,8.61419e-10,1,-4.32141e-8,-1.26006e-9,1,-4.32043e-8,1.10025e-9,1,-4.22093e-8,-0.689193,0,-0.724577,-0.653174,0,-0.757208,-0.615231,0,-0.788347,-0.575809,0,-0.817584,-0.534997,0,-0.844854,-0.492898,0,-0.870087,-0.449613,0,-0.893223,-0.405238,0,-0.914211,-0.359897,0,-0.932992,-0.31368,0,-0.949529,-0.266712,0,-0.963776,-0.2191,0,-0.975702,-0.170961,0,-0.985278,-0.122411,0,-0.99248,-0.0735638,0,-0.99729,-0.0250177,0,-0.999687,-1.11904e-9,1,-4.4703e-8,1.32409e-9,1,-4.49361e-8,-8.82415e-10,1,-4.4947e-8,-1.70707e-10,1,-4.15734e-8,2.30344e-9,1,-4.25286e-8,-3.00931e-9,1,-4.55648e-8,-8.48676e-10,1,-4.68135e-8,3.54251e-10,1,-4.40711e-8,1.81639e-9,1,-4.15662e-8,-2.25476e-10,1,-4.16052e-8,1.75845e-9,1,-4.38242e-8,-3.93923e-10,1,-4.38577e-8,-2.54553e-9,1,-4.37855e-8,-1.0438e-9,1,-4.64541e-8,8.6346e-10,1,-4.50361e-8,-4.48702e-11,1,-4.11191e-8,-0.689181,0,-0.72459,-0.653174,0,-0.757208,-0.61523,0,-0.788348,-0.575809,0,-0.817584,-0.534998,0,-0.844853,-0.492899,0,-0.870087,-0.449612,0,-0.893224,-0.405239,0,-0.914211,-0.359897,0,-0.932992,-0.31368,0,-0.949529,-0.266712,0,-0.963776,-0.2191,0,-0.975702,-0.170961,0,-0.985278,-0.122409,0,-0.99248,-0.0735649,0,-0.99729,0,0,0,0.0249712,0,0.999688,0.0735635,0,0.99729,0.122411,0,0.99248,0.170961,0,0.985278,0.2191,0,0.975703,0.266712,0,0.963776,0.313681,0,0.949528,-0.266712,0,-0.963776,0.359895,0,0.932993,-0.31368,0,-0.949529,-0.405239,0,-0.914211,-0.492899,0,-0.870087,-0.534998,0,-0.844853,0.492899,0,0.870087,-0.575809,0,-0.817585,-0.653174,0,-0.757208,0.575809,0,0.817585,0.653173,0,0.757208,-1.22715e-8,1,-3.15554e-8,0.707105,0,-0.707109,0.707107,0,-0.707107,0.707106,0,-0.707108,0.707106,0,-0.707108,0.707107,-0.0000108084,-0.707107,-0.0250357,0,-0.999687,-0.122409,0,-0.99248,-0.170961,0,-0.985278,-0.2191,0,-0.975702,0,1,0,4.76728e-9,1,-1.59777e-7,-3.07873e-9,1,-1.59819e-7,0,1,0,-2.64952e-8,1,-1.57636e-7,-3.4198e-8,1,-1.56146e-7,1.54019e-8,1,-5.94113e-9,1.50919e-8,1,-6.68974e-9,1.47454e-8,1,-7.42221e-9,1.43635e-8,1,-8.13678e-9,2.78938e-8,1,-1.76635e-8,1.34967e-8,1,-9.50548e-9,2.60282e-8,1,-2.03125e-8,2.50001e-8,1,-2.15653e-8,-3.6542e-8,1,-7.49744e-8,-0.0249739,0,-0.999688,-0.0735624,0,-0.997291,-0.122411,0,-0.992479,-0.170962,0,-0.985278,-0.219099,0,-0.975703,-0.266712,0,-0.963776,-0.359896,0,-0.932992,-3.69353e-9,1,-5.00725e-8,-6.14609e-9,1,-4.98309e-8,1.85e-8,1,-4.77989e-8,-8.25049e-9,1,-3.67414e-8,6.91871e-9,1,-4.09863e-8,-5.42507e-9,1,-4.44755e-8,-7.60102e-9,1,-4.41556e-8,8.29986e-10,1,-4.1558e-8,3.82807e-9,1,-5.1111e-8,1.31556e-9,1,-5.12373e-8,-5.27695e-9,1,-4.12299e-8,3.51468e-9,1,-4.08571e-8,1.50577e-9,1,-4.09804e-8,-5.06905e-10,1,-4.10048e-8,8.37629e-9,1,-4.14627e-8,0.00909792,0.999917,-0.00909797,0,1,0,5.07843e-9,1,-4.8585e-8,0.0249856,0,0.999688,0.0735637,0,0.997291,0.122411,0,0.992479,0.170961,0,0.985278,0.219099,0,0.975703,0.266712,4.53707e-8,0.963776,0.313681,0,0.949529,0.359897,0,0.932992,0.405238,0,0.914211,0.449613,0,0.893223,0.492899,0,0.870087,0.534997,0,0.844854,0.575809,0,0.817584,0.615231,0,0.788347,0.653173,0,0.757209,0.689217,0,0.724555,7.62006e-9,1,-7.97076e-8,-1.16963e-8,1,-1.58562e-7,-3.79122e-10,1,-8.00523e-8,1.83879e-8,1,-4.1291e-9,-1.21212e-8,1,-7.91304e-8,-1.59892e-8,1,-7.84402e-8,1.75829e-8,1,-6.78246e-9,1.7229e-8,1,-7.63711e-9,1.68336e-8,1,-8.47335e-9,1.63974e-8,1,-9.28904e-9,1.59219e-8,1,-1.00824e-8,3.0816e-8,1,-2.17031e-8,1.4857e-8,1,-1.15945e-8,-3.05201e-8,1,-7.86601e-8,-3.39017e-8,1,-7.7488e-8,0.0250323,0,0.999687,0.0735649,0,0.99729,0.12241,0,0.99248,0.170961,0,0.985278,0.2191,0,0.975702,0.266712,0,0.963776,0.31368,0,0.949529,0.359897,0,0.932992,0.405238,0,0.914211,0.449612,0,0.893224,0.492899,0,0.870087,0.575808,0,0.817585,0.615231,0,0.788347,0.653174,0,0.757208,0.689182,0,0.724588,-0.0250357,0,-0.999686,0.707105,-0.0000053948,-0.707109,7.79445e-9,1,-5.13517e-8,0.707109,0,-0.707105,0.707102,0,-0.707112,0.707106,-0.0000154972,-0.707108,0.707107,0,-0.707107,-6.24399e-9,1,-4.37078e-8,0.707106,-0.00000273387,-0.707107,0.581239,0,0.813733,-0.813733,8.88437e-7,-0.581239,-1,0,-0.00000111262,-1,0,-0.00000110269,-1,8.56817e-8,-0.00000240405,-1,0,-0.0000025183,-1,0,-0.00000110269,-1,0,-0.0000025183,-1,0,-0.0000021855,-1,0,-0.0000021855,-1,0,-0.00000129143,-1,0,-0.00000124052,-1,0,-0.00000124052,-1,0,-0.00000129143,-1,0,-0.00000129143,-1,0,-0.00000129143,-1,0,-4.76837e-7,0.164399,0,0.986394,0,1,0,-1.98885e-9,1,-7.94729e-8,-3.35815e-8,1,-2.01489e-7,0,1,0,4.10366e-8,1,-4.47035e-8,1.23573e-8,1,-5.0861e-8,0.164399,0,-0.986394,0.40524,8.78192e-8,0.91421,0.359895,8.78191e-8,0.932993,0.266712,0,0.963776,0.0735635,0,0.997291,1.11701e-9,-1,4.4703e-8,-8.93851e-10,-1,4.49044e-8,1.31068e-9,-1,4.48941e-8,-6.21083e-10,-1,4.54929e-8,-1.25104e-9,-1,4.22922e-8,8.2573e-10,-1,4.23027e-8,-1.90522e-9,-1,4.77233e-8,1.67027e-9,-1,3.92961e-8,-4.07349e-9,-1,4.25667e-8,5.11796e-9,-1,4.74863e-8,1.18528e-10,-1,4.27609e-8,-5.31461e-9,-1,3.86512e-8,-3.41165e-9,-1,3.88654e-8,-1.50057e-9,-1,3.8986e-8,2.10591e-9,-1,4.73959e-8,4.0364e-9,-1,4.76093e-8,-0.405238,0,-0.914211,-0.2191,0,-0.975702,-8.3138e-9,-1,4.49345e-8,3.28957e-9,-1,4.45958e-8,-2.98873e-11,-1,3.75502e-8,1.81266e-9,-1,3.75064e-8,7.6991e-10,-1,4.56576e-8,-3.43706e-9,-1,3.96158e-8,-1.48913e-9,-1,3.97368e-8,-1.17122e-9,-1,4.83803e-8,1.20378e-9,-1,4.83796e-8,3.57636e-9,-1,4.82622e-8,5.94022e-9,-1,4.80286e-8,3.93923e-10,-1,4.38577e-8,-5.52816e-9,-1,4.0356e-8,-3.5414e-9,-1,4.05787e-8,-1.54596e-9,-1,4.07035e-8,4.48702e-11,-1,4.11191e-8,-0.534998,0,-0.844853,0.707106,-0.00000202656,-0.707108,0.707107,0.0000108084,-0.707107,0,-1,0,0,-1,0,-1.6265e-8,-1,2.82223e-9,-1.59101e-8,-1,4.40288e-9,-1.56749e-8,-1,5.17822e-9,-3.01837e-8,-1,1.33795e-8,5.67401e-8,-1,1.49439e-7,6.40046e-8,-1,1.46476e-7,-2.78938e-8,-1,1.76635e-8,-2.69935e-8,-1,1.9011e-8,8.48036e-8,-1,1.35498e-7,9.13506e-8,-1,1.31174e-7,-2.43328e-8,-1,2.31669e-8,-0.0249739,0,-0.999688,-5.54415e-9,-1,4.44608e-8,4.60957e-9,-1,3.73732e-8,6.43777e-9,-1,3.7102e-8,-1.61324e-8,-1,4.86491e-8,1.33912e-8,-1,4.83898e-8,-4.8993e-9,-1,4.12765e-8,-2.86786e-9,-1,4.14671e-8,-8.29986e-10,-1,4.1558e-8,1.21035e-9,-1,4.15486e-8,3.24757e-9,-1,4.14391e-8,-1.63075e-8,-1,4.0041e-8,7.29372e-9,-1,4.09213e-8,9.29276e-9,-1,4.05142e-8,-1.02558e-8,-1,4.20003e-8,-8.37629e-9,-1,4.14627e-8,-2.62872e-8,-1,2.62873e-8,0,-1,0,-6.55961e-9,-1,6.27554e-8,0.0735637,0,0.99729,0.122412,0,0.99248,0.219099,4.53707e-8,0.975703,0.313681,4.53707e-8,0.949529,0.534997,0,0.844854,0,-1,0,-3.63262e-8,-1,1.00528e-8,3.96383e-8,-1,1.55122e-7,4.72013e-8,-1,1.52991e-7,5.46519e-8,-1,1.5049e-7,6.19706e-8,-1,1.47628e-7,-3.18439e-8,-1,2.01649e-8,-2.9714e-8,-1,2.3189e-8,-2.85403e-8,-1,2.46191e-8,-2.78481e-8,-1,2.65139e-8,0.0250323,0,0.999687,0.405238,0,0.914211,0.615231,0,0.788347,0.707105,0.0000053948,-0.707109,0.707109,0,-0.707105,2.49759e-8,-1,2.49759e-8,0.707106,0.00000273387,-0.707107,-0.813733,-8.88437e-7,-0.581239,-7.27996e-9,-1,4.37114e-8,-1,-8.56817e-8,-0.0000025183,-1,0,-0.00000240405,-1,0.00000283935,-0.0000014576,-1,-7.63685e-8,-0.00000124052,-1,4.07299e-7,-0.00000129143,1.9863e-9,-1,7.94729e-8,-1.09451e-7,-1,6.56708e-7,3.92428e-8,-1,4.47035e-8,2.33707e-8,-1,4.91058e-8]},\"double_turnout_L_ab\":{\"uvs\":[],\"normals\":[7.40111e-8,0,-1,0,-0.0000038147,1,-1.51608e-7,1,-3.93033e-7,2.07632e-7,1,3.66523e-7,0,1,-5.2041e-8,1.66955e-9,1,-4.7569e-8,-2.88362e-8,1,-9.66328e-8,-2.24719e-7,1,-8.12033e-7,0,1,0,6.16733e-8,1,5.40497e-8,9.10059e-8,1,1.70734e-7,-2.42863e-7,1,-6.29603e-7,3.90571e-8,1,4.46223e-8,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,1.04082e-7,-4.15264e-7,-1,-7.33047e-7,-1.70711e-7,-1,-3.85121e-7,1.1236e-7,-1,4.06016e-7,0,-1,1.16036e-7,5.39531e-8,-1,1.6332e-7,-4.18842e-8,-1,-7.4103e-8,-3.30259e-8,-1,1.56201e-8,-4.48989e-8,-1,-5.85933e-8,4.92664e-8,-1,1.66608e-7,1.57999e-7,1,4.09602e-7,-1.10081e-14,1,-1.30113e-7,7.94728e-9,1,-4.76837e-8,-1.32022e-9,1,-6.81199e-8,-2.67083e-8,1,-1.06626e-7,-1.07483e-7,1,-8.71463e-7,-2.15483e-8,1,-2.92125e-7,-3.84672e-10,1,-1.98482e-8,-9.93411e-9,1,-5.96047e-8,7.98763e-9,1,-5.26507e-8,1.77783e-8,1,-5.96046e-8,-1.50433e-7,-0.00000301997,-1,0,0,1,-5.81655e-8,-0.00000429153,-1,7.58931e-8,0,1,0,0.0000038147,1,0,1,0,7.94676e-9,1,2.45649e-8,0,1,-4.46421e-8,-1.41634e-15,1,-4.46421e-8,8.3981e-10,1,-5.31783e-8,-1.30176e-9,1,-1.03267e-7,-1.4635e-9,1,-5.28845e-9,-4.94241e-10,1,-4.26192e-8,-4.85207e-15,1,-3.97363e-8,-3.39269e-15,1,-4.47036e-8,-4.91172e-10,1,-4.57182e-8,0,1,-3.88739e-8,2.0078e-9,1,-3.65656e-8,6.77491e-9,1,-1.72438e-8,8.59102e-9,1,-3.31619e-8,4.56913e-8,1,5.17432e-8,-1.34498e-14,1,-4.47036e-8,-2.18239e-9,1,-5.0549e-8,-2.28122e-8,1,-1.20559e-7,1.36331e-9,1,-4.23318e-8,8.60887e-8,1,1.94277e-7,0,1,-4.85089e-8,-5.65843e-8,1,-2.04471e-7,-1.16856e-10,1,-4.52101e-8,-1.05366e-10,1,-4.07641e-8,-4.27694e-10,1,-4.90756e-8,3.48976e-10,1,-3.55531e-8,2.63304e-9,1,-3.74333e-8,4.42583e-9,1,-3.4947e-8,0,1,-4.46876e-8,0,1,0,3.7228e-9,1,-4.15464e-8,-4.07229e-9,1,-4.91401e-8,0,1,0,-1.76744e-9,1,-5.79828e-8,1.0481e-9,1,-3.68289e-8,-1.50433e-7,0.00000301997,-1,-5.81655e-8,0.00000429153,-1,7.58931e-8,0,1,0,1,0,0.534994,0,0.844856,0.534995,0,0.844855,0.534994,0,0.844856,0.534995,0,0.844855,0.534995,0,0.844855,0.492896,-2.58934e-7,0.870088,0.492896,0,0.870088,0.492896,0,0.870088,0.492898,2.58926e-7,0.870087,0.492897,0,0.870088,0.449608,0,0.893226,0.2191,0,0.975703,0.405239,6.20109e-8,0.914211,0.313679,0,0.949529,0.164399,0,-0.986394,0.266712,0.00000107147,0.963776,0.266712,0,0.963776,0.266711,0,0.963776,0.266708,-0.0000010714,0.963777,0.266711,0,0.963776,0.266711,0,0.963777,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,0,0.99248,0.111157,0,0.993803,-0.534994,0,-0.844856,0.492894,0,0.870089,-0.449608,1.2479e-7,-0.893226,-0.405239,0,-0.914211,-0.359892,-5.5475e-8,-0.932994,0.405238,-5.27264e-8,0.914211,-0.313679,0,-0.949529,0.359892,0,0.932994,-0.266711,2.06319e-7,-0.963777,0.313679,5.74437e-8,0.949529,0.266711,5.74437e-8,0.963776,0.2191,2.87219e-8,0.975702,0.359892,0,0.932994,0.170958,0,0.985278,-8.10658e-8,0,-1,-8.10658e-8,0,-1,-7.97327e-8,0,-1,-7.97327e-8,0,-1,0,0,-1,0,0,-1,0,0,-1,-1.22107e-7,0,-1,-9.4011e-8,-2.19431e-7,-1,-8.88974e-8,0,-1,0.122409,0,0.99248,0.0735639,0,0.99729,0.130446,0,0.991455,0,0,1,-3.55814e-7,-1,-8.02711e-7,-1.37712e-7,-1,-4.16863e-7,3.22961e-8,-1,4.37832e-7,7.94729e-9,-1,4.76837e-8,1.71216e-9,-1,6.81754e-8,-2.14441e-8,-1,-1.07808e-7,5.5392e-8,-1,2.19719e-7,-9.9341e-9,-1,5.96046e-8,2.55712e-9,-1,6.58842e-8,3.68108e-9,-1,6.15742e-8,3.56333e-9,-1,5.96046e-8,-2.1798e-7,0,1,-1,-4.66916e-7,-0.00000256301,-1,0,-0.00000256301,-1,4.66911e-7,-0.00000149578,-1,0,-0.0000021628,-1,0,-0.0000022417,-1,0,-0.00000233627,-1,0,-0.00000233627,-1,0,-0.0000022417,0.164399,0,0.986394,0.122409,0,0.99248,9.70414e-15,-1,7.94727e-8,0,-1,3.88739e-8,9.53378e-15,-1,7.94727e-8,-2.25869e-7,-1,-6.83722e-7,4.66343e-15,-1,3.88739e-8,7.98245e-15,-1,7.94727e-8,2.95026e-15,-1,3.88739e-8,1.454e-14,-1,4.83272e-8,-9.4002e-8,-1,-1.60731e-7,2.34514e-8,-1,1.04149e-7,0,-1,4.85089e-8,-2.37094e-8,-1,-2.76579e-8,-4.05394e-10,-1,4.73511e-8,-4.64339e-9,-1,2.89099e-8,4.27694e-10,-1,4.90756e-8,-1.14714e-8,-1,-3.58855e-8,-3.30738e-15,-1,4.46876e-8,-1.22906e-8,-1,-9.34148e-8,0,-1,4.46876e-8,2.26448e-9,-1,5.44224e-8,2.25635e-9,-1,2.99678e-8,4.76479e-8,-1,6.45952e-7,2.94014e-9,-1,2.38384e-8,-2.2601e-9,-1,3.50035e-8,-7.19162e-10,-1,4.62172e-8,2.23968e-10,-1,4.58105e-8,-3.42055e-9,-1,8.73126e-8,0,-1,4.46421e-8,1.41634e-15,-1,4.46421e-8,2.78334e-9,-1,4.75421e-8,-1.89279e-9,-1,4.07298e-8,0,-1,4.46421e-8,2.20629e-9,-1,4.87193e-8,1.75777e-9,-1,4.67352e-8,6.13036e-9,-1,7.57476e-8,-2.52079e-9,-1,2.6706e-8,0.307795,0,0.951453,0.170958,0,0.985278,0.0735639,0,0.99729,0.2191,5.74437e-8,0.975702,0.0735638,0,0.99729,0.122409,0,0.99248,0.266711,5.74437e-8,0.963777,-0.266711,-2.06319e-7,-0.963777,0.359892,5.74437e-8,0.932994,-1,0,-0.00000404365,-1,0,-0.00000404365,-1,7.45058e-8,-0.00000198682,-1,0,-0.00000213583,-1,-7.45058e-8,-0.00000198682,-1,0,-0.00000213583,-1,0,-0.00000196812,-1,0,-0.00000196812,-0.313679,-5.5475e-8,-0.949529,0.405238,5.27264e-8,0.914211,-0.266711,0,-0.963776,-1,0,-8.90096e-7,-0.405239,-1.1095e-7,-0.914211,-0.313679,0,-0.949529,-0.449608,-1.2479e-7,-0.893226,0.170958,0,0.985278],\"metadata\":{\"generator\":\"io_three\",\"normals\":221,\"uvs\":0,\"vertices\":178,\"version\":3,\"faces\":280,\"type\":\"Geometry\"},\"vertices\":[45.8457,-0.999999,14.4846,34.4812,-0.999999,16.4565,26.0211,-0.999999,17.5,0.249964,-0.999999,17.5,60.356,-1,9.5,65.98,-1,9.5,57.0998,-0.999999,11.9575,26.0211,-4,17.5,0.249963,-4,17.5,60.356,-4,9.49999,65.9801,-4,9.49999,0.24996,-4,19,9.00009,-4,19,9.00009,4,19,0.24996,4,19,23.0336,-4,17.8685,11.5305,-4,18.717,54.7908,-4,2.7394,43.9918,-4,5.16438,33.0868,-4,7.05653,22.1021,-4,8.41135,11.0642,-4,9.22555,8.99998,-4,9.49714,0.249979,-4,9.49714,0.249994,-4,6,-8.75,-4,7.5,0.250019,-4,-9.49998,90.4273,-4,-9.49999,86.2935,-4,-7.66759,75.9672,-4,-3.68433,65.4578,-4,-0.212544,-8.74999,-4,-7.5,0.25001,-4,-6,89.93,-4,1.11192,79.1686,-4,5.26305,68.2164,-4,8.88113,67.7808,-4,7.44529,78.6631,-4,3.8503,108.935,-4,-9.49999,112.105,-4,-9.49999,110.778,-4,-8.74818,100.475,-4,-3.56224,89.3558,-4,-0.274315,99.8333,-4,-4.91864,112.105,-1,-9.5,108.935,-1,-9.5,122.852,-1,-17.5,125.656,-1,-17.5,120.814,-1,-14.4334,122.852,-4,-17.5,125.656,-4,-17.5,90.4274,-1,-9.5,106.953,-1,-17.5,0.250017,-1,-9.5,56.6889,-1,-17.5,56.6889,-4,-17.5,106.953,-4,-17.5,128.025,-4,-19,125.221,-4,-19,125.221,-1,-19,109.601,-1,-19,109.601,-4,-19,61.7573,-4,-19,61.7573,-1,-19,23.7785,-1,-19,23.7785,-4,-19,0.250039,-4,-19,0.250039,4,-19,23.7785,4,-19,23.7785,0.999999,-19,61.7573,0.999999,-19,61.7573,4,-19,109.601,4,-19,109.601,0.999999,-19,125.221,0.999999,-19,125.221,4,-19,128.025,4,-19,59.9408,-4,-18.3999,19.4549,-4,-18.4667,9.73901,-4,-17.7501,9.00004,-4,-17.511,0.250036,-4,-17.511,34.4812,1,16.4565,45.8457,1,14.4846,57.0998,1,11.9575,65.98,1,9.5,60.356,1,9.5,0.249964,1,17.5,26.0211,1,17.5,65.9801,4,9.49999,60.356,4,9.49999,0.249963,4,17.5,26.0211,4,17.5,11.5305,4,18.717,23.0336,4,17.8685,68.2164,4,8.88113,79.1686,4,5.26305,89.93,4,1.11192,78.6631,4,3.8503,67.7808,4,7.44529,100.475,4,-3.56224,110.778,4,-8.74818,112.105,4,-9.49999,108.935,4,-9.49999,99.8333,4,-4.91864,89.3558,4,-0.274315,-8.75,4,7.5,0.249994,4,6,0.249979,4,9.49714,8.99998,4,9.49714,11.0642,4,9.22555,22.1021,4,8.41135,33.0868,4,7.05653,43.9918,4,5.16438,54.7908,4,2.7394,65.4578,4,-0.212545,75.9672,4,-3.68433,86.2935,4,-7.66759,90.4273,4,-9.49999,0.250019,4,-9.49998,0.25001,4,-6,-8.74999,4,-7.5,125.656,0.999999,-17.5,122.852,0.999999,-17.5,108.935,1,-9.5,112.105,1,-9.5,120.814,0.999999,-14.4334,125.656,4,-17.5,122.852,4,-17.5,106.953,0.999999,-17.5,90.4274,1,-9.5,56.6889,0.999999,-17.5,0.250017,1,-9.5,106.953,4,-17.5,56.6889,4,-17.5,59.9408,4,-18.3999,0.250036,4,-17.511,9.00004,4,-17.511,9.73901,4,-17.7501,19.4549,4,-18.4667,99.8333,1,-4.91864,89.3558,1,-0.274315,86.2935,1,-7.66759,78.6631,1,3.8503,75.9672,1,-3.68433,67.7808,1,7.44529,65.4578,1,-0.212544,54.7908,1,2.7394,43.9918,1,5.16438,33.0868,1,7.05653,22.1021,1,8.41135,11.0642,1,9.22555,8.99998,1,9.49714,0.249979,1,9.49714,0.249979,-1,9.49714,8.99998,-1,9.49714,11.0642,-1,9.22555,0.250036,0.999999,-17.511,22.1021,-1,8.41135,9.00004,0.999999,-17.511,0.250036,-1,-17.511,33.0868,-1,7.05653,9.73901,0.999999,-17.7501,9.00004,-1,-17.511,43.9918,-1,5.16438,19.4549,0.999999,-18.4667,9.73901,-1,-17.7501,54.7908,-1,2.7394,19.4549,-1,-18.4667,65.4578,-1,-0.212544,67.7808,-1,7.44529,75.9672,-1,-3.68433,78.6631,-1,3.8503,86.2935,-1,-7.66759,89.3558,-1,-0.274315,59.9408,0.999999,-18.3999,99.8333,-1,-4.91864,59.9408,-1,-18.3999],\"faces\":[33,7,8,3,2,0,0,0,0,33,5,4,9,10,1,1,1,1,32,96,97,100,2,2,2,32,100,101,102,3,3,3,32,102,103,104,4,4,4,32,102,104,105,5,5,5,32,96,100,102,6,6,6,32,89,95,96,7,7,7,32,99,90,89,8,8,8,32,98,99,89,9,9,9,32,89,96,102,10,10,10,32,105,98,89,11,11,11,32,102,105,89,12,12,12,32,16,12,11,13,13,13,32,11,8,7,14,14,14,32,7,15,16,15,15,15,32,11,7,16,16,16,16,32,43,38,39,17,17,17,32,39,40,41,18,18,18,32,41,33,34,19,19,19,32,34,35,10,20,20,20,32,10,9,36,21,21,21,32,10,36,37,22,22,22,32,41,34,10,23,23,23,32,43,39,41,24,24,24,32,10,37,42,25,25,25,32,42,43,41,14,14,14,32,41,10,42,26,26,26,32,113,114,115,8,8,8,32,115,116,117,27,27,27,32,117,118,119,28,28,28,32,120,121,106,29,29,29,32,117,119,120,30,30,30,32,113,115,117,31,31,31,32,111,112,113,32,32,32,32,108,109,110,8,8,8,32,110,111,113,33,33,33,32,113,117,120,34,34,34,32,120,106,107,35,35,35,32,107,108,110,8,8,8,32,110,113,120,36,36,36,32,120,107,110,37,37,37,33,39,38,45,44,38,38,38,38,33,47,46,49,50,39,39,39,39,33,27,26,53,51,40,40,40,40,33,52,54,55,56,41,41,41,41,33,50,49,58,57,13,13,13,13,32,61,56,55,13,13,13,32,77,62,61,13,13,13,32,55,77,61,13,13,13,32,81,66,65,13,13,13,32,65,78,79,13,13,13,32,79,80,81,13,13,13,32,65,79,81,13,13,13,33,89,90,86,85,42,42,42,42,33,88,87,91,92,0,0,0,0,32,94,92,91,43,43,43,32,91,14,13,8,8,8,32,93,94,91,43,43,43,32,91,13,93,8,8,8,32,165,162,159,44,44,44,32,159,157,132,45,45,45,32,159,132,130,46,46,46,32,70,69,165,8,8,8,32,165,159,130,47,47,47,32,175,70,165,48,48,48,32,131,175,165,49,49,49,32,131,165,130,50,50,50,32,74,73,129,51,51,51,32,129,131,130,52,52,52,32,74,129,130,53,53,53,32,126,122,123,54,54,54,32,123,74,130,55,55,55,32,123,130,142,56,56,56,32,125,126,123,57,57,57,32,141,140,124,58,58,58,32,124,125,123,59,59,59,32,123,142,144,60,60,60,32,123,144,146,61,61,61,32,141,124,123,62,62,62,32,145,143,141,63,63,63,32,84,85,86,64,64,64,32,86,145,141,65,65,65,32,141,123,146,66,66,66,32,141,146,147,67,67,67,32,83,84,86,68,68,68,32,86,141,147,69,69,69,32,86,147,148,70,70,70,32,82,83,86,71,71,71,32,87,88,82,8,8,8,32,152,153,87,72,72,72,32,150,151,152,73,73,73,32,86,148,149,74,74,74,32,150,152,87,75,75,75,32,86,149,150,76,76,76,32,87,82,86,77,77,77,32,150,87,86,78,78,78,33,127,128,123,122,39,39,39,39,33,125,124,103,102,79,79,79,79,33,130,132,119,118,80,80,80,80,33,133,134,131,129,81,81,81,81,33,76,75,128,127,8,8,8,8,32,133,72,71,82,82,82,32,135,134,133,8,8,8,32,71,135,133,73,73,73,32,139,68,67,82,82,82,32,67,136,137,8,8,8,32,138,139,67,43,43,43,32,67,137,138,8,8,8,32,122,126,48,83,83,83,32,47,50,57,84,84,84,32,122,48,47,85,85,85,32,76,127,122,86,86,86,32,47,57,76,87,87,87,32,122,47,76,84,84,84,32,125,102,101,88,88,88,32,101,40,39,89,89,89,32,44,48,126,90,90,90,32,101,39,44,91,91,91,32,44,126,125,90,90,90,32,101,44,125,92,92,92,33,40,101,100,41,93,93,93,93,33,83,0,6,84,94,94,94,94,33,97,33,41,100,95,95,95,95,33,96,95,35,34,96,96,96,96,33,31,121,120,32,97,97,97,97,32,5,10,35,98,98,98,32,35,95,89,99,99,99,32,85,84,6,100,100,100,32,35,89,85,101,101,101,32,85,6,5,102,102,102,32,35,85,5,103,103,103,32,88,92,94,104,104,104,32,94,15,7,105,105,105,32,2,1,82,106,106,106,32,94,7,2,107,107,107,32,2,82,88,106,106,106,32,94,2,88,108,108,108,33,93,13,12,16,109,109,109,109,33,74,123,128,75,110,110,110,110,33,129,73,72,133,111,111,111,111,33,124,140,104,103,112,112,112,112,33,140,141,105,104,113,113,113,113,33,141,143,98,105,114,114,114,114,33,118,117,142,130,115,115,115,115,33,143,145,99,98,116,116,116,116,33,144,142,117,116,117,117,117,117,33,90,99,145,86,118,118,118,118,33,146,144,116,115,119,119,119,119,33,147,146,115,114,120,120,120,120,33,148,147,114,113,121,121,121,121,33,96,34,33,97,122,122,122,122,33,149,148,113,112,123,123,123,123,32,65,66,67,124,124,124,32,67,68,69,125,125,125,32,70,71,72,126,126,126,32,70,72,73,127,127,127,32,74,75,76,128,128,128,32,69,70,73,13,13,13,32,74,76,57,129,129,129,32,69,73,74,8,8,8,32,57,58,59,130,130,130,32,60,61,62,127,127,127,32,74,57,59,130,130,130,32,60,62,63,126,126,126,32,74,59,60,131,131,131,32,69,74,60,132,132,132,32,60,63,64,8,8,8,32,69,60,64,133,133,133,32,64,65,67,125,125,125,32,67,69,64,125,125,125,33,150,149,112,111,134,134,134,134,33,151,150,111,110,135,135,135,135,33,152,151,110,109,136,136,136,136,33,153,152,109,108,137,137,137,137,32,32,26,27,13,13,13,32,27,28,29,138,138,138,32,29,30,17,139,139,139,32,17,18,19,13,13,13,32,19,20,21,140,140,140,32,21,22,23,13,13,13,32,24,25,31,141,141,141,32,21,23,24,142,142,142,32,17,19,21,143,143,143,32,27,29,17,144,144,144,32,24,31,32,145,145,145,32,32,27,17,146,146,146,32,17,21,24,147,147,147,32,17,24,32,148,148,148,33,13,14,11,12,149,149,149,149,32,53,26,32,150,150,150,32,32,120,119,151,151,151,32,32,119,132,152,152,152,32,53,32,132,153,153,153,32,157,136,67,154,154,154,32,53,132,157,155,155,155,32,66,81,160,154,154,154,32,160,53,157,156,156,156,32,157,67,66,157,157,157,32,157,66,160,157,157,157,33,154,23,22,155,137,137,137,137,33,155,22,21,156,136,136,136,136,33,156,21,20,158,135,135,135,135,33,24,107,106,25,158,158,158,158,33,157,159,137,136,137,137,137,137,33,158,20,19,161,159,159,159,159,32,52,60,59,160,160,160,32,46,47,48,161,161,161,32,52,59,46,162,162,162,32,63,177,54,163,163,163,32,52,46,48,164,164,164,32,64,63,54,165,165,165,32,54,52,48,166,166,166,32,48,44,45,167,167,167,32,45,176,174,168,168,168,32,174,172,170,169,169,169,32,4,5,6,170,170,170,32,174,170,4,171,171,171,32,54,48,45,172,172,172,32,45,174,4,173,173,173,32,4,6,0,174,174,174,32,0,1,2,175,175,175,32,2,3,154,176,176,176,32,155,156,158,177,177,177,32,2,154,155,178,178,178,32,4,0,2,179,179,179,32,64,54,45,180,180,180,32,163,166,168,181,181,181,32,168,64,45,182,182,182,32,45,4,2,183,183,183,32,2,155,158,184,184,184,32,2,158,161,185,185,185,32,163,168,45,186,186,186,32,53,160,163,187,187,187,32,51,53,163,188,188,188,32,2,161,164,189,189,189,32,2,164,167,190,190,190,32,51,163,45,191,191,191,32,173,51,45,13,13,13,32,45,2,167,192,192,192,32,45,167,169,193,193,193,32,171,173,45,194,194,194,32,45,169,171,195,195,195,33,159,162,138,137,196,196,196,196,33,160,81,80,163,137,137,137,137,33,161,19,18,164,197,197,197,197,33,162,165,139,138,198,198,198,198,33,163,80,79,166,196,196,196,196,33,164,18,17,167,199,199,199,199,33,94,93,16,15,200,200,200,200,33,68,139,165,69,201,201,201,201,33,166,79,78,168,198,198,198,198,33,167,17,30,169,202,202,202,202,33,64,168,78,65,201,201,201,201,33,169,30,29,171,119,119,119,119,33,4,170,36,9,203,203,203,203,33,171,29,28,173,204,204,204,204,32,108,107,24,205,205,205,32,24,23,154,206,206,206,32,3,8,11,207,207,207,32,3,11,14,208,208,208,32,14,91,87,209,209,209,32,153,108,24,206,206,206,32,3,14,87,210,210,210,32,153,24,154,205,205,205,32,154,3,87,211,211,211,32,154,87,153,212,212,212,33,172,37,36,170,213,213,213,213,33,51,173,28,27,214,214,214,214,33,174,42,37,172,114,114,114,114,33,134,135,175,131,215,215,215,215,33,25,106,121,31,216,216,216,216,33,176,43,42,174,217,217,217,217,33,70,175,135,71,218,218,218,218,33,54,177,77,55,215,215,215,215,33,38,43,176,45,219,219,219,219,33,62,77,177,63,218,218,218,218,33,58,49,46,59,110,110,110,110,33,56,61,60,52,111,111,111,111,33,0,83,82,1,220,220,220,220]},\"turnout_R_a\":{\"uvs\":[],\"vertices\":[156.808,4,-42.988,164.932,4,-50.7141,156.808,0.999998,-42.988,130.559,0.999999,-20.6044,139.989,0.999999,-27.246,149.082,0.999999,-34.3423,157.816,0.999998,-41.8762,165.993,0.999998,-49.6531,66.363,0.999999,-30.5264,75.3838,0.999999,-34.0061,84.223,0.999998,-37.9243,92.8594,0.999998,-42.2714,101.272,0.999998,-47.0371,109.441,0.999998,-52.2098,117.346,0.999997,-57.7771,124.968,0.999997,-63.7256,132.289,0.999997,-70.0409,139.115,0.999997,-76.5313,129.725,0.999999,-21.852,139.095,0.999999,-28.4512,148.13,0.999998,-35.5022,164.932,0.999998,-50.7141,115.928,0.999999,-22.5844,125.279,0.999999,-28.5057,134.328,0.999998,-34.8788,143.054,0.999998,-41.6881,151.434,0.999998,-48.9174,159.274,0.999998,-56.3727,69.5643,0.999999,-21.5791,79.0204,0.999999,-25.2266,88.286,0.999999,-29.3338,97.339,0.999999,-33.8906,106.157,0.999998,-38.8862,114.72,0.999998,-44.3084,123.006,0.999998,-50.1443,130.997,0.999998,-56.3798,138.671,0.999997,-62.9997,145.835,0.999997,-69.8117,66.8684,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5679,93.5667,0.999998,-40.9481,102.043,0.999998,-45.7501,110.274,0.999998,-50.9622,118.239,0.999998,-56.5719,125.92,0.999997,-62.5657,133.297,0.999997,-68.9291,140.176,0.999997,-75.4703,129.725,4,-21.852,139.095,4,-28.4512,148.13,4,-35.5022,130.559,4,-20.6044,139.989,4,-27.246,149.082,4,-34.3423,157.816,4,-41.8762,165.993,4,-49.6531,115.928,4,-22.5844,125.279,4,-28.5057,134.328,4,-34.8788,143.054,4,-41.6881,151.434,4,-48.9174,159.274,4,-56.3727,69.5643,4,-21.5791,79.0204,4,-25.2266,88.286,4,-29.3338,97.339,4,-33.8906,106.157,4,-38.8862,114.72,4,-44.3084,123.006,4,-50.1443,130.997,4,-56.3798,138.671,4,-62.9997,145.835,4,-69.8117,66.8684,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5679,93.5667,4,-40.9481,102.043,4,-45.7501,110.274,4,-50.9622,118.239,4,-56.5719,125.92,4,-62.5657,133.297,4,-68.9291,140.176,4,-75.4703,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9243,92.8594,4,-42.2714,101.272,4,-47.0371,109.441,4,-52.2098,117.346,4,-57.7771,124.968,4,-63.7256,132.289,4,-70.0409,139.115,4,-76.5313,151.851,4,-51.0673,140.184,4,-62.7346,157.154,4,-58.492,147.609,4,-68.0379,0.250039,0.999999,-19.0114,9.66539,0.999999,-19.2487,19.3078,0.999999,-19.96,28.9038,0.999999,-21.1435,38.4301,0.999999,-22.7964,47.8638,0.999999,-24.9148,57.1823,0.999999,-27.4936,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,9.00004,0.999999,-19.0114,9.00004,4,-19.0114,109.601,4,-19,125.221,0.999999,-19,118.077,0.999999,-19,109.601,0.999999,-19,128.025,0.999999,-19,128.025,4,-19,125.221,4,-19,105.298,4,-19,93.1735,4,-19,81.5995,4,-19,70.4871,4,-19,61.7573,0.999999,-19,59.7588,0.999999,-19,61.7573,4,-19,49.3454,0.999999,-19,39.1853,0.999999,-19,29.2218,0.999999,-19,23.7784,4,-19,19.4024,4,-19,23.7784,0.999999,-19,9.67761,4,-19,9.00004,4,-19,0.250039,4,-19,0.25,-8.30515e-7,-19,130.559,-9.00646e-7,-20.6044,139.989,-0.00000119096,-27.246,149.082,-0.00000150115,-34.3423,157.816,-0.00000183047,-41.8762,165.993,-0.00000217041,-49.6531,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9243,92.8594,-0.00000184774,-42.2714,101.272,-0.00000205606,-47.0371,109.441,-0.00000228216,-52.2098,117.346,-0.00000252552,-57.7771,124.968,-0.00000278553,-63.7256,132.289,-0.00000306158,-70.0409,139.115,-0.00000334529,-76.5313,156.808,-4,-42.988,164.932,-4,-50.7141,156.808,-1,-42.988,130.559,-1,-20.6044,139.989,-1,-27.246,149.082,-1,-34.3423,157.816,-1,-41.8762,165.993,-1,-49.6531,66.363,-1,-30.5264,75.3838,-1,-34.0061,84.223,-1,-37.9243,92.8594,-1,-42.2714,101.272,-1,-47.0371,109.441,-1,-52.2098,117.346,-1,-57.7771,124.968,-1,-63.7256,132.289,-1,-70.0409,139.115,-1,-76.5313,129.725,-1,-21.852,139.095,-1,-28.4512,148.13,-1,-35.5022,164.932,-1,-50.7141,115.928,-1,-22.5844,125.279,-1,-28.5057,134.328,-1,-34.8788,143.054,-1,-41.6881,151.434,-1,-48.9174,159.274,-1,-56.3727,69.5643,-1,-21.5791,79.0204,-1,-25.2266,88.286,-1,-29.3338,97.339,-1,-33.8906,106.157,-1,-38.8862,114.72,-1,-44.3084,123.006,-1,-50.1443,130.997,-1,-56.3798,138.671,-1,-62.9997,145.835,-1,-69.8117,66.8684,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5679,93.5667,-1,-40.9481,102.043,-1,-45.7501,110.274,-1,-50.9622,118.239,-1,-56.5719,125.92,-1,-62.5657,133.297,-1,-68.9291,140.176,-1,-75.4703,129.725,-4,-21.852,139.095,-4,-28.4512,148.13,-4,-35.5022,130.559,-4,-20.6044,139.989,-4,-27.246,149.082,-4,-34.3423,157.816,-4,-41.8762,165.993,-4,-49.6531,115.928,-4,-22.5844,125.279,-4,-28.5057,134.328,-4,-34.8788,143.054,-4,-41.6881,151.434,-4,-48.9174,159.274,-4,-56.3727,69.5643,-4,-21.5791,79.0204,-4,-25.2266,88.286,-4,-29.3338,97.339,-4,-33.8906,106.157,-4,-38.8862,114.72,-4,-44.3084,123.006,-4,-50.1443,130.997,-4,-56.3798,138.671,-4,-62.9997,145.835,-4,-69.8117,66.8684,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5679,93.5667,-4,-40.9481,102.043,-4,-45.7501,110.274,-4,-50.9622,118.239,-4,-56.5719,125.92,-4,-62.5657,133.297,-4,-68.9291,140.176,-4,-75.4703,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9243,92.8594,-4,-42.2714,101.272,-4,-47.0371,109.441,-4,-52.2098,117.346,-4,-57.7771,124.968,-4,-63.7256,132.289,-4,-70.0409,139.115,-4,-76.5313,151.851,-4,-51.0673,140.184,-4,-62.7346,157.154,-4,-58.492,147.609,-4,-68.0379,151.851,-0.00000223222,-51.0673,140.184,-0.00000274222,-62.7346,157.154,-0.00000255676,-58.492,147.609,-0.00000297403,-68.0379,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,0.250039,-1,-19.0114,9.66539,-1,-19.2487,19.3078,-1,-19.96,28.9038,-1,-21.1435,38.4301,-1,-22.7964,47.8638,-1,-24.9148,57.1823,-1,-27.4936,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,9.00004,-8.31017e-7,-19.0114,9.00004,-1,-19.0114,9.00004,-4,-19.0114,128.025,-8.30516e-7,-19,109.601,-4,-19,125.221,-1,-19,118.077,-1,-19,109.601,-1,-19,128.025,-1,-19,128.025,-4,-19,125.221,-4,-19,105.298,-4,-19,93.1735,-4,-19,81.5995,-4,-19,70.4871,-4,-19,61.7573,-1,-19,59.7588,-1,-19,61.7573,-4,-19,49.3454,-1,-19,39.1853,-1,-19,29.2218,-1,-19,23.7784,-4,-19,19.4024,-4,-19,23.7784,-1,-19,9.67761,-4,-19,9.00004,-4,-19,0.250039,-4,-19],\"normals\":[-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534996,0,-0.844855,-1.12262e-14,1,-4.98865e-8,-2.01378e-9,1,-4.34445e-8,0,1,-4.98865e-8,-1.93861e-9,1,-4.48604e-8,1.80506e-10,1,-4.56916e-8,-2.06171e-9,1,-4.56455e-8,1.37714e-10,1,-4.43967e-8,-9.42067e-10,1,-4.02524e-8,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,3.37906e-9,1,-4.12318e-8,1.35172e-9,1,-4.13479e-8,-6.78548e-10,1,-4.13645e-8,2.51045e-9,1,-4.42373e-8,-4.72985e-9,1,-4.10987e-8,2.75902e-9,1,-4.29512e-8,6.48216e-10,1,-4.30349e-8,-1.62677e-9,1,-4.77945e-8,-3.05415e-9,1,-4.33853e-8,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.689069,0,-0.724696,0.575808,0,0.817585,0.615229,0,0.788348,0.65317,0,0.757211,0.689147,-5.07059e-7,0.724622,1.53516e-8,1,-1.46159e-8,-0.689144,0,-0.724624,-0.35989,0,-0.932995,-0.405242,0,-0.914209,-0.449607,0,-0.893227,-0.492901,0,-0.870086,-0.534994,0,-0.844856,2.3806e-8,1,-6.94077e-8,1.69538e-8,1,-1.19401e-8,-2.43728e-8,1,-8.17886e-8,-2.83562e-8,1,-8.04939e-8,0.575808,0,0.817585,0.615229,0,0.788348,0.653171,0,0.757211,0.689147,0,0.724622,-2.62771e-9,1,-8.01815e-8,-1.04234e-8,1,-5.2888e-8,9.81558e-10,1,-4.77594e-8,1.62811e-9,1,-4.48518e-8,0,1,-4.8034e-8,7.13915e-9,1,-5.39129e-8,-1.14e-9,1,-4.38361e-8,-3.28962e-9,1,-4.37273e-8,7.29344e-9,1,-4.5485e-8,5.0529e-9,1,-4.57882e-8,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,-1.71421e-8,1,-7.85686e-8,2.24578e-8,1,-9.95472e-9,2.19424e-8,1,-1.10446e-8,-2.84851e-8,1,-7.52021e-8,-6.42811e-8,1,-1.47428e-7,-7.14385e-8,1,-1.44097e-7,-7.84226e-8,1,-1.40419e-7,-2.40076e-8,1,-8.42456e-8,1.8261e-8,1,-1.73858e-8,-0.405242,0,-0.914209,-0.449607,0,-0.893226,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.813734,0,-0.581237,0.581237,0,0.813734,0.707109,0,-0.707104,0.707105,0,-0.707108,0.707108,0,-0.707106,0.707107,0,-0.707107,0.707105,0,-0.707108,0.707107,-0.0000165252,-0.707107,0.707109,0.0000121557,-0.707105,0.707107,0,0.707107,0.707105,0,-0.707108,0.707092,0.0000107896,-0.707122,0.707109,-0.0000134666,-0.707105,0.707105,0.000039978,-0.707108,-0.313679,0,-0.949529,0,1,0,2.65033e-9,1,-4.04452e-8,-1.69439e-9,1,-4.35346e-8,5.66244e-10,1,-4.15627e-8,-1.60987e-10,1,-3.94962e-8,0,1,-4.22264e-8,1.10567e-9,1,-4.28749e-8,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0,0,-1,-0.073564,0,-0.99729,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.2191,0,-0.975702,-0.266711,0,-0.963776,-0.313679,0,-0.949529,-2.01976e-14,1,-9.24436e-8,-1.44413e-8,1,-3.93227e-7,0,1,0,0,1,-2.48357e-7,8.87305e-9,1,-2.89678e-7,-5.42823e-9,1,-8.0233e-8,-9.35859e-9,1,-7.987e-8,-1.32662e-8,1,-7.93148e-8,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.335866,0,-0.94191,1.55275e-8,1,-9.17037e-7,-0.335866,0,-0.94191,-0.999994,0.00000982353,-0.00342704,-1,0,-0.00000259724,0.534996,0,0.844854,0.534996,0,0.844854,0.492898,0,0.870087,0.122409,0,0.99248,-5.60031e-8,1,-7.84047e-8,-3.92482e-8,1,-7.32504e-8,1.23404e-7,1,2.39221e-8,5.17879e-9,1,-2.95536e-8,-5.13503e-8,1,-9.95434e-9,1.05808e-8,1,-6.03808e-8,7.48412e-15,-1,3.32576e-8,-1.97224e-9,-1,3.71499e-8,0,-1,4.1799e-8,-1.82364e-9,-1,3.43507e-8,-1.80506e-10,-1,4.56916e-8,2.06171e-9,-1,4.56455e-8,-4.57433e-9,-1,4.3304e-8,-2.9771e-9,-1,4.39838e-8,4.89768e-9,-1,4.60248e-8,-1.35172e-9,-1,4.13479e-8,6.78548e-10,-1,4.13645e-8,1.16194e-9,-1,5.07199e-8,3.64912e-9,-1,5.06018e-8,6.12774e-9,-1,5.03618e-8,-7.2024e-10,-1,4.78166e-8,1.30142e-9,-1,3.82356e-8,-6.19593e-9,-1,4.70484e-8,0.689147,5.07059e-7,0.724622,-3.07033e-8,-1,2.92319e-8,0,-1,0,7.4569e-8,-1,1.41893e-7,8.14408e-8,-1,1.38062e-7,-3.14037e-8,-1,2.70887e-8,-1.58023e-8,-1,3.59186e-8,7.3317e-9,-1,3.40736e-8,-1.56263e-8,-1,6.78673e-8,9.14892e-9,-1,2.71325e-8,1.14e-9,-1,4.38361e-8,3.28962e-9,-1,4.37273e-8,5.43117e-9,-1,4.35133e-8,7.55968e-9,-1,4.31944e-8,0,-1,0,-4.38849e-8,-1,2.20892e-8,-4.15079e-8,-1,2.62846e-8,-3.87319e-8,-1,3.02262e-8,-3.65219e-8,-1,3.47717e-8,-0.534994,0,-0.844856,-0.575806,0,-0.817586,0,0,0,0.707109,-0.0000122749,-0.707105,0.707108,0.00000206432,-0.707106,0.707105,-0.0000431584,-0.707108,0.707107,0,-0.707107,0.707106,0,-0.707108,0.013,-0.999831,-0.0129999,0.707108,0.0000120428,-0.707105,0,-1,0,-2.65033e-9,-1,4.04452e-8,-3.31684e-10,-1,5.27921e-8,7.43291e-10,-1,5.15428e-8,2.49808e-9,-1,4.65707e-8,0,-1,4.62218e-8,1.08392e-9,-1,5.03428e-8,0,0,-1,0,-1,0,1.87172e-8,-1,1.5974e-7,2.65325e-8,-1,1.5863e-7,-0.266711,0,-0.963776,-0.999994,-0.00000982353,-0.00342704,0,-1,0,0,-1,0,1.84026e-7,-1,2.57468e-7,-8.68334e-9,-1,4.95528e-8,-1.40041e-7,-1,1.94647e-7],\"metadata\":{\"generator\":\"io_three\",\"normals\":214,\"uvs\":0,\"vertices\":315,\"version\":3,\"faces\":328,\"type\":\"Geometry\"},\"faces\":[33,50,0,2,20,0,0,0,0,33,20,19,49,50,1,1,1,1,33,19,18,48,49,2,2,2,2,33,18,121,126,48,3,3,3,3,32,22,123,122,4,4,4,32,18,23,22,5,5,5,32,22,122,121,6,6,6,32,22,121,18,7,7,7,33,24,23,18,19,8,8,8,8,33,25,24,19,20,9,9,9,9,33,26,25,20,2,10,10,10,10,33,27,26,2,21,11,11,11,11,33,29,28,62,63,12,12,12,12,33,26,27,61,60,13,13,13,13,33,25,26,60,59,14,14,14,14,33,24,25,59,58,15,15,15,15,33,23,24,58,57,16,16,16,16,33,22,23,57,56,17,17,17,17,33,39,38,28,29,18,18,18,18,33,40,39,29,30,19,19,19,19,33,41,40,30,31,20,20,20,20,33,42,41,31,32,21,21,21,21,33,43,42,32,33,22,22,22,22,33,44,43,33,34,23,23,23,23,33,45,44,34,35,24,24,24,24,33,46,45,35,36,25,25,25,25,33,47,46,36,37,26,26,26,26,33,46,47,81,80,27,27,27,27,33,45,46,80,79,28,28,28,28,33,44,45,79,78,29,29,29,29,33,43,44,78,77,30,30,30,30,33,42,43,77,76,31,31,31,31,33,41,42,76,75,32,32,32,32,33,40,41,75,74,33,33,33,33,33,39,40,74,73,34,34,34,34,33,38,39,73,72,35,35,35,35,33,155,154,13,14,36,36,36,36,33,156,155,14,15,37,37,37,37,33,157,156,15,16,38,38,38,38,33,158,157,16,17,39,39,39,39,33,144,145,4,3,40,40,40,40,33,145,146,5,4,41,41,41,41,33,146,147,6,5,42,42,42,42,33,147,148,7,6,43,43,43,43,33,1,0,54,55,44,44,44,44,33,2,0,1,21,45,45,45,45,33,150,149,8,9,46,46,46,46,33,151,150,9,10,47,47,47,47,33,152,151,10,11,48,48,48,48,33,153,152,11,12,49,49,49,49,33,154,153,12,13,50,50,50,50,33,48,126,125,51,51,51,51,51,33,49,48,51,52,52,52,52,52,33,50,49,52,53,53,53,53,53,33,0,50,53,54,54,54,54,54,33,3,4,52,51,55,55,55,55,33,4,5,53,52,56,56,56,56,33,5,6,54,53,57,57,57,57,33,6,7,55,54,58,58,58,58,33,63,62,130,129,59,59,59,59,33,64,63,129,128,60,60,60,60,33,65,64,128,127,61,61,61,61,32,56,66,65,62,62,62,32,65,127,120,63,63,63,32,65,120,56,64,64,64,33,67,66,56,57,65,65,65,65,33,68,67,57,58,66,66,66,66,33,69,68,58,59,67,67,67,67,33,70,69,59,60,68,68,68,68,33,30,29,63,64,69,69,69,69,33,31,30,64,65,70,70,70,70,33,32,31,65,66,71,71,71,71,33,33,32,66,67,72,72,72,72,33,34,33,67,68,73,73,73,73,33,35,34,68,69,74,74,74,74,33,36,35,69,70,75,75,75,75,33,37,36,70,71,76,76,76,76,33,83,82,72,73,77,77,77,77,33,84,83,73,74,78,78,78,78,33,85,84,74,75,79,79,79,79,33,86,85,75,76,80,80,80,80,33,87,86,76,77,81,81,81,81,33,88,87,77,78,82,82,82,82,33,89,88,78,79,83,83,83,83,33,90,89,79,80,84,84,84,84,33,91,90,80,81,85,85,85,85,33,9,8,82,83,46,46,46,46,33,10,9,83,84,86,86,86,86,33,11,10,84,85,87,87,87,87,33,12,11,85,86,49,49,49,49,33,13,12,86,87,88,88,88,88,33,14,13,87,88,89,89,89,89,33,15,14,88,89,90,90,90,90,33,16,15,89,90,91,91,91,91,33,17,16,90,91,39,39,39,39,33,94,257,255,92,92,92,92,92,33,93,256,258,95,93,93,93,93,33,92,255,256,93,94,94,94,94,32,37,71,95,95,95,95,32,258,158,17,96,96,96,32,17,91,81,97,97,97,32,17,81,47,97,97,97,32,37,95,258,98,98,98,32,258,17,47,99,99,99,32,37,258,47,100,100,100,32,21,1,55,97,97,97,32,55,7,148,101,101,101,32,257,94,61,102,102,102,32,257,61,27,102,102,102,32,21,55,148,103,103,103,32,257,27,21,104,104,104,32,21,148,257,105,105,105,33,28,131,133,62,106,106,106,106,32,103,139,136,107,107,107,33,104,103,136,135,108,108,108,108,33,105,104,135,134,109,109,109,109,33,106,105,134,132,110,110,110,110,32,28,38,106,111,111,111,32,106,132,131,112,112,112,32,106,131,28,113,113,113,33,106,38,72,110,114,114,114,114,33,105,106,110,109,115,115,115,115,33,104,105,109,108,116,116,116,116,33,103,104,108,107,117,117,117,117,33,288,259,96,118,118,118,118,118,33,261,260,97,98,119,119,119,119,33,262,261,98,99,120,120,120,120,33,263,262,99,100,121,121,121,121,33,264,263,100,101,122,122,122,122,33,265,264,101,102,123,123,123,123,33,149,265,102,8,124,124,124,124,32,62,133,130,125,125,125,33,119,111,142,141,107,107,107,107,33,113,112,140,138,126,126,126,126,32,107,114,113,127,127,127,32,113,138,137,128,128,128,32,113,137,107,129,129,129,33,115,114,107,108,107,107,107,107,33,116,115,108,109,130,130,130,130,33,117,116,109,110,131,131,131,131,33,82,117,110,72,132,132,132,132,33,118,96,111,119,118,118,118,118,33,98,97,112,113,119,119,119,119,33,99,98,113,114,133,133,133,133,33,100,99,114,115,134,134,134,134,33,101,100,115,116,122,122,122,122,33,102,101,116,117,123,123,123,123,33,8,102,117,82,124,124,124,124,33,97,118,119,112,135,135,135,135,33,112,119,141,140,136,136,136,136,33,260,288,118,97,137,137,137,137,32,259,143,142,138,138,138,32,142,111,96,139,139,139,32,142,96,259,139,139,139,33,125,124,3,51,140,140,140,140,33,124,291,144,3,141,141,141,141,33,120,123,22,56,142,142,142,142,33,137,139,103,107,143,143,143,143,32,93,95,71,144,144,144,32,60,61,94,145,145,145,32,60,94,92,146,146,146,32,93,71,70,147,147,147,32,60,92,93,148,148,148,32,93,70,60,149,149,149,33,161,159,209,179,0,0,0,0,33,179,209,208,178,1,1,1,1,33,178,208,207,177,2,2,2,2,33,177,207,298,293,3,3,3,3,32,181,294,295,150,150,150,32,181,182,177,151,151,151,32,177,293,294,152,152,152,32,177,294,181,153,153,153,33,183,178,177,182,154,154,154,154,33,184,179,178,183,155,155,155,155,33,185,161,179,184,156,156,156,156,33,186,180,161,185,157,157,157,157,33,188,222,221,187,12,12,12,12,33,185,219,220,186,13,13,13,13,33,184,218,219,185,14,14,14,14,33,183,217,218,184,15,15,15,15,33,182,216,217,183,16,16,16,16,33,181,215,216,182,17,17,17,17,33,198,188,187,197,158,158,158,158,33,199,189,188,198,159,159,159,159,33,200,190,189,199,160,160,160,160,33,201,191,190,200,161,161,161,161,33,202,192,191,201,162,162,162,162,33,203,193,192,202,163,163,163,163,33,204,194,193,203,164,164,164,164,33,205,195,194,204,165,165,165,165,33,206,196,195,205,166,166,166,166,33,205,239,240,206,27,27,27,27,33,204,238,239,205,28,28,28,28,33,203,237,238,204,29,29,29,29,33,202,236,237,203,30,30,30,30,33,201,235,236,202,31,31,31,31,33,200,234,235,201,32,32,32,32,33,199,233,234,200,33,33,33,33,33,198,232,233,199,34,34,34,34,33,197,231,232,198,35,35,35,35,33,155,173,172,154,36,36,36,36,33,156,174,173,155,37,37,37,37,33,157,175,174,156,38,38,38,38,33,158,176,175,157,39,39,39,39,33,144,162,163,145,40,40,40,40,33,145,163,164,146,41,41,41,41,33,146,164,165,147,42,42,42,42,33,147,165,166,148,167,167,167,167,33,213,159,160,214,168,168,168,168,33,161,180,160,159,45,45,45,45,33,150,168,167,149,46,46,46,46,33,151,169,168,150,47,47,47,47,33,152,170,169,151,48,48,48,48,33,153,171,170,152,49,49,49,49,33,154,172,171,153,50,50,50,50,33,207,210,297,298,169,169,169,169,33,208,211,210,207,170,170,170,170,33,209,212,211,208,171,171,171,171,33,159,213,212,209,172,172,172,172,33,162,210,211,163,55,55,55,55,33,163,211,212,164,56,56,56,56,33,164,212,213,165,57,57,57,57,33,165,213,214,166,58,58,58,58,33,222,301,302,221,169,169,169,169,33,223,300,301,222,173,173,173,173,33,224,299,300,223,174,174,174,174,32,224,225,215,175,175,175,32,215,292,299,169,169,169,32,215,299,224,176,176,176,33,226,216,215,225,177,177,177,177,33,227,217,216,226,178,178,178,178,33,228,218,217,227,179,179,179,179,33,229,219,218,228,180,180,180,180,33,189,223,222,188,69,69,69,69,33,190,224,223,189,70,70,70,70,33,191,225,224,190,71,71,71,71,33,192,226,225,191,72,72,72,72,33,193,227,226,192,73,73,73,73,33,194,228,227,193,74,74,74,74,33,195,229,228,194,75,75,75,75,33,196,230,229,195,76,76,76,76,33,242,232,231,241,181,181,181,181,33,243,233,232,242,169,169,169,169,33,244,234,233,243,182,182,182,182,33,245,235,234,244,181,181,181,181,33,246,236,235,245,183,183,183,183,33,247,237,236,246,169,169,169,169,33,248,238,237,247,184,184,184,184,33,249,239,238,248,181,181,181,181,33,250,240,239,249,185,185,185,185,33,168,242,241,167,46,46,46,46,33,169,243,242,168,86,86,86,86,33,170,244,243,169,87,87,87,87,33,171,245,244,170,49,49,49,49,33,172,246,245,171,186,186,186,186,33,173,247,246,172,187,187,187,187,33,174,248,247,173,90,90,90,90,33,175,249,248,174,91,91,91,91,33,176,250,249,175,39,39,39,39,33,253,251,255,257,92,92,92,92,33,252,254,258,256,93,93,93,93,33,251,252,256,255,94,94,94,94,32,206,240,250,97,97,97,32,250,176,158,188,188,188,32,258,254,230,98,98,98,32,258,230,196,98,98,98,32,206,250,158,97,97,97,32,258,196,206,189,189,189,32,206,158,258,190,190,190,32,186,220,253,102,102,102,32,257,148,166,191,191,191,32,166,214,160,192,192,192,32,166,160,180,97,97,97,32,186,253,257,193,193,193,32,166,180,186,194,194,194,32,186,257,166,195,195,195,33,187,221,305,303,106,106,106,106,32,273,308,311,196,196,196,33,274,307,308,273,197,197,197,197,33,275,306,307,274,198,198,198,198,33,276,304,306,275,199,199,199,199,32,276,197,187,200,200,200,32,187,303,304,201,201,201,32,187,304,276,202,202,202,33,276,280,231,197,114,114,114,114,33,275,279,280,276,115,115,115,115,33,274,278,279,275,116,116,116,116,33,273,277,278,274,117,117,117,117,33,288,289,266,259,203,203,203,203,33,261,268,267,260,119,119,119,119,33,262,269,268,261,120,120,120,120,33,263,270,269,262,121,121,121,121,33,264,271,270,263,122,122,122,122,33,265,272,271,264,123,123,123,123,33,149,167,272,265,124,124,124,124,32,221,302,305,196,196,196,33,290,313,314,281,169,169,169,169,33,283,310,312,282,181,181,181,181,32,283,284,277,204,204,204,32,277,309,310,169,169,169,32,277,310,283,169,169,169,33,285,278,277,284,169,169,169,169,33,286,279,278,285,169,169,169,169,33,287,280,279,286,205,205,205,205,33,241,231,280,287,206,206,206,206,33,289,290,281,266,203,203,203,203,33,268,283,282,267,119,119,119,119,33,269,284,283,268,133,133,133,133,33,270,285,284,269,134,134,134,134,33,271,286,285,270,122,122,122,122,33,272,287,286,271,207,207,207,207,33,167,241,287,272,124,124,124,124,33,267,282,290,289,135,135,135,135,33,282,312,313,290,169,169,169,169,33,260,267,289,288,137,137,137,137,32,314,143,259,208,208,208,32,266,281,314,139,139,139,32,259,266,314,139,139,139,33,297,210,162,296,140,140,140,140,33,296,162,144,291,141,141,141,141,33,292,215,181,295,142,142,142,142,33,309,277,273,311,143,143,143,143,32,251,253,220,209,209,209,32,229,230,254,209,209,209,32,229,254,252,210,210,210,32,251,220,219,211,211,211,32,229,252,251,212,212,212,32,251,219,229,213,213,213]},\"pier\":{\"vertices\":[7.5,-4,-47.5,7.5,-4,47.5,-7.5,-4,47.5,-7.49999,-4,-47.5,7.5,61.5,-47.5,-7.5,61.5,-47.5,7.5,4,35.5,7.49999,56,35.5,7.5,56,-35.5,7.49999,61.5,47.5,7.5,4,-35.5,-7.5,61.5,47.5,-7.5,4,35.5,-7.5,4,-35.5,-7.5,56,-35.5,-7.5,56,35.5,-7.5,-4,19.5,-7.5,4,19.5,-7.5,-4,-19.5,-7.5,4,-19.5,7.5,-4,-19.5,7.5,4,-19.5,7.5,-4,19.5,7.5,4,19.5],\"faces\":[33,0,20,18,3,0,0,0,0,33,4,0,3,5,1,1,1,1,33,1,9,11,2,2,2,2,2,32,1,22,23,3,3,3,32,1,23,6,4,4,4,32,21,20,0,5,5,5,32,10,21,0,6,6,6,32,9,1,6,7,7,7,32,9,6,7,8,8,8,32,10,0,4,9,9,9,32,9,7,8,10,10,10,32,8,10,4,11,11,11,32,4,9,8,12,12,12,32,3,18,19,13,13,13,32,3,19,13,14,14,14,32,17,16,2,15,15,15,32,12,17,2,16,16,16,32,5,3,13,17,17,17,32,5,13,14,18,18,18,32,12,2,11,19,19,19,32,5,14,15,20,20,20,32,15,12,11,21,21,21,32,15,11,5,22,22,22,33,4,5,11,9,23,23,23,23,33,14,13,10,8,24,24,24,24,33,8,7,15,14,25,25,25,25,33,13,19,21,10,26,26,26,26,33,7,6,12,15,27,27,27,27,33,19,18,20,21,28,28,28,28,33,23,17,12,6,29,29,29,29,33,16,22,1,2,30,30,30,30,33,22,16,17,23,31,31,31,31],\"uvs\":[],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":24,\"version\":3,\"normals\":32,\"type\":\"Geometry\",\"faces\":32},\"normals\":[-8.66186e-14,-1,1.36239e-7,0.00000152588,2.91198e-7,-1,-0.00000165304,-1.45599e-7,1,1,0,0,1,2.08616e-7,5.96046e-8,1,-1.19209e-7,1.6241e-14,1,-3.27825e-7,5.96047e-8,1,6.55196e-8,-3.57932e-8,1,1.83399e-8,1.90276e-7,1,-5.09597e-8,-1.24973e-7,1,3.16263e-7,5.37281e-8,1,0,1.1921e-7,1,-8.48731e-8,8.03095e-8,-1,-5.96047e-8,-3.40598e-8,-1,-7.45058e-8,-2.98023e-8,-1,0,-3.40598e-8,-1,1.19209e-7,-2.84217e-14,-1,-3.63998e-8,-5.52064e-8,-1,-2.75098e-8,-1.26087e-8,-1,-2.18399e-8,-9.4033e-8,-1,-8.79187e-8,-4.02961e-8,-1,-3.66798e-8,-2.29249e-8,-1,-1.00389e-8,-3.51354e-8,2.04238e-13,1,-8.03095e-8,0,0,1,0,-1,5.37281e-8,0,1,-1.19209e-7,0,0,-1,0,4.76837e-7,1,0,1,-2.38419e-7,-4.33093e-14,-1,1.36239e-7,6.35783e-8,-1.19209e-7,-1]},\"eight_L_A\":{\"uvs\":[],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":182,\"version\":3,\"normals\":229,\"type\":\"Geometry\",\"faces\":312},\"faces\":[33,37,0,1,40,0,0,0,0,32,41,43,2,1,1,1,32,3,4,5,2,2,2,32,41,2,3,3,3,3,32,16,0,37,4,4,4,32,41,3,5,5,5,5,32,15,16,37,6,6,6,32,41,5,6,7,7,7,32,14,15,37,8,8,8,32,41,6,7,9,9,9,32,13,14,37,10,10,10,32,41,7,8,11,11,11,32,12,13,37,12,12,12,32,11,12,37,13,13,13,32,9,10,11,14,14,14,32,8,9,11,15,15,15,32,41,8,11,16,16,16,32,11,37,41,17,17,17,32,59,1,0,18,18,18,32,16,31,36,19,19,19,32,170,59,0,20,20,20,32,16,36,117,21,21,21,32,170,0,16,22,22,22,32,16,117,170,23,23,23,33,42,40,1,59,24,24,24,24,33,2,43,60,17,25,25,25,25,33,2,17,18,3,26,26,26,26,33,4,3,18,19,27,27,27,27,32,106,20,21,28,28,28,32,106,21,5,29,29,29,32,19,22,105,30,30,30,32,106,5,4,31,31,31,32,4,19,105,32,32,32,32,4,105,106,33,33,33,32,21,23,24,34,34,34,32,24,35,8,35,35,35,32,7,6,5,36,36,36,32,24,8,7,35,35,35,32,5,21,24,37,37,37,32,24,7,5,38,38,38,32,109,9,8,39,39,39,32,8,35,34,40,40,40,32,120,109,8,41,41,41,32,8,34,120,42,42,42,32,10,9,109,43,43,43,32,109,117,36,44,44,44,32,36,25,10,45,45,45,32,109,36,10,46,46,46,33,11,10,25,26,47,47,47,47,33,26,27,12,11,48,48,48,48,32,27,28,29,49,49,49,32,29,30,15,50,50,50,32,15,14,13,51,51,51,32,13,12,27,52,52,52,32,27,29,15,53,53,53,32,15,13,27,54,54,54,33,16,15,30,31,55,55,55,55,32,60,76,32,56,56,56,32,32,33,22,57,57,57,32,22,19,18,24,24,24,32,18,17,60,58,58,58,32,32,22,18,57,57,57,32,32,18,60,59,59,59,33,120,34,20,106,60,60,60,60,32,20,34,35,49,49,49,32,35,24,23,49,49,49,32,23,21,20,57,57,57,32,35,23,20,57,57,57,33,105,22,33,123,61,61,61,61,32,27,26,25,24,24,24,32,25,36,31,62,62,62,32,31,30,29,63,63,63,32,28,27,25,49,49,49,32,31,29,28,64,64,64,32,28,25,31,65,65,65,33,180,126,32,76,66,66,66,66,33,33,32,126,123,67,67,67,67,33,37,40,39,38,68,68,68,68,33,41,42,40,37,69,69,69,69,32,43,41,37,70,70,70,32,37,38,58,71,71,71,32,57,56,55,72,72,72,32,37,58,57,73,73,73,32,44,43,37,74,74,74,32,47,46,45,2,2,2,32,45,44,37,75,75,75,32,37,57,55,76,76,76,32,55,54,53,77,77,77,32,53,52,51,78,78,78,32,51,50,49,79,79,79,32,48,47,45,80,80,80,32,51,49,48,81,81,81,32,37,55,53,82,82,82,32,53,51,48,83,83,83,32,48,45,37,84,84,84,32,37,53,48,85,85,85,32,38,39,59,86,86,86,32,169,81,75,87,87,87,32,169,75,58,88,88,88,32,38,59,170,89,89,89,32,169,58,38,90,90,90,32,170,169,38,91,91,91,33,42,59,39,40,92,92,92,92,33,44,61,60,43,93,93,93,93,33,44,45,62,61,94,94,94,94,33,46,63,62,45,95,95,95,95,32,65,64,158,96,96,96,32,157,66,63,97,97,97,32,157,63,46,98,98,98,32,47,65,158,99,99,99,32,157,46,47,100,100,100,32,158,157,47,101,101,101,32,67,65,47,102,102,102,32,47,48,49,49,49,49,32,68,67,47,103,103,103,32,50,80,68,104,104,104,32,68,47,49,105,105,105,32,49,50,68,104,104,104,32,50,51,161,106,106,106,32,174,79,80,107,107,107,32,50,161,174,108,108,108,32,174,80,50,109,109,109,32,161,51,52,110,110,110,32,52,69,81,111,111,111,32,81,169,161,112,112,112,32,52,81,161,113,113,113,33,53,70,69,52,114,114,114,114,33,70,53,54,71,115,115,115,115,32,73,72,71,116,116,116,32,71,54,55,117,117,117,32,56,57,74,118,118,118,32,71,55,56,119,119,119,32,74,73,71,120,120,120,32,71,56,74,121,121,121,33,58,75,74,57,122,122,122,122,32,77,76,60,123,123,123,32,60,61,62,124,124,124,32,62,63,66,125,125,125,32,66,78,77,49,49,49,32,77,60,62,126,126,126,32,62,66,77,127,127,127,33,174,158,64,79,128,128,128,128,32,80,79,64,49,49,49,32,64,65,67,49,49,49,32,67,68,80,49,49,49,32,64,67,80,49,49,49,33,157,177,78,66,129,129,129,129,32,73,74,75,49,49,49,32,75,81,69,130,130,130,32,69,70,71,131,131,131,32,72,73,75,132,132,132,32,69,71,72,133,133,133,32,75,69,72,134,134,134,33,180,76,77,181,135,135,135,135,33,78,177,181,77,136,136,136,136,33,127,130,83,82,0,0,0,0,32,133,131,127,70,70,70,32,127,82,98,137,137,137,32,97,96,95,138,138,138,32,127,98,97,139,139,139,32,84,133,127,140,140,140,32,87,86,85,141,141,141,32,85,84,127,142,142,142,32,127,97,95,143,143,143,32,95,94,93,144,144,144,32,93,92,91,145,145,145,32,91,90,89,146,146,146,32,88,87,85,147,147,147,32,91,89,88,148,148,148,32,127,95,93,149,149,149,32,93,91,88,150,150,150,32,88,85,127,151,151,151,32,127,93,88,152,152,152,32,82,83,149,18,18,18,32,117,125,116,153,153,153,32,117,116,98,154,154,154,32,82,149,170,20,20,20,32,117,98,82,155,155,155,32,170,117,82,156,156,156,33,132,149,83,130,157,157,157,157,33,84,99,150,133,25,25,25,25,33,84,85,100,99,158,158,158,158,33,86,101,100,85,27,27,27,27,32,103,102,106,28,28,28,32,105,104,101,159,159,159,32,105,101,86,32,32,32,32,87,103,106,160,160,160,32,105,86,87,161,161,161,32,106,105,87,162,162,162,32,107,103,87,128,128,128,32,87,88,89,34,34,34,32,108,107,87,163,163,163,32,90,122,108,35,35,35,32,108,87,89,38,38,38,32,89,90,108,35,35,35,32,90,91,109,39,39,39,32,120,121,122,42,42,42,32,90,109,120,164,164,164,32,120,122,90,40,40,40,32,109,91,92,43,43,43,32,92,110,125,45,45,45,32,125,117,109,44,44,44,32,92,125,109,165,165,165,33,93,111,110,92,47,47,47,47,33,111,93,94,112,48,48,48,48,32,114,113,112,166,166,166,32,112,94,95,52,52,52,32,96,97,115,167,167,167,32,112,95,96,168,168,168,32,115,114,112,169,169,169,32,112,96,115,170,170,170,33,98,116,115,97,171,171,171,171,32,118,171,150,172,172,172,32,150,99,100,173,173,173,32,100,101,104,174,174,174,32,104,119,118,34,34,34,32,118,150,100,175,175,175,32,100,104,118,176,176,176,33,120,106,102,121,102,102,102,102,32,122,121,102,177,177,177,32,102,103,107,177,177,177,32,107,108,122,177,177,177,32,102,107,122,34,34,34,33,105,123,119,104,178,178,178,178,32,114,115,116,34,34,34,32,116,125,110,179,179,179,32,110,111,112,180,180,180,32,113,114,116,181,181,181,32,110,112,113,182,182,182,32,116,110,113,183,183,183,33,180,171,118,126,66,66,66,66,33,119,123,126,118,67,67,67,67,32,124,117,109,184,184,184,33,127,128,129,130,68,68,68,68,33,131,127,130,132,69,69,69,69,32,131,133,134,185,185,185,32,135,136,137,141,141,141,32,131,134,135,186,186,186,32,148,128,127,187,187,187,32,131,135,137,188,188,188,32,147,148,127,189,189,189,32,131,137,138,190,190,190,32,146,147,127,191,191,191,32,131,138,139,192,192,192,32,145,146,127,193,193,193,32,131,139,140,194,194,194,32,144,145,127,195,195,195,32,143,144,127,196,196,196,32,141,142,143,197,197,197,32,140,141,143,198,198,198,32,131,140,143,199,199,199,32,143,127,131,200,200,200,32,149,129,128,86,86,86,32,148,168,179,87,87,87,32,170,149,128,89,89,89,32,148,179,169,201,201,201,32,170,128,148,202,202,202,32,148,169,170,203,203,203,33,132,130,129,149,204,204,204,204,33,134,133,150,151,93,93,93,93,33,134,151,152,135,205,205,205,205,33,136,135,152,153,206,206,206,206,32,158,154,155,96,96,96,32,158,155,137,207,207,207,32,153,156,157,208,208,208,32,158,137,136,209,209,209,32,136,153,157,98,98,98,32,136,157,158,210,210,210,32,155,159,160,49,49,49,32,160,176,140,104,104,104,32,139,138,137,211,211,211,32,160,140,139,104,104,104,32,137,155,160,212,212,212,32,160,139,137,105,105,105,32,161,141,140,106,106,106,32,140,176,175,109,109,109,32,174,161,140,213,213,213,32,140,175,174,107,107,107,32,142,141,161,110,110,110,32,161,169,179,112,112,112,32,179,162,142,111,111,111,32,161,179,142,214,214,214,33,143,142,162,163,114,114,114,114,33,163,164,144,143,115,115,115,115,32,164,165,166,177,177,177,32,166,167,147,215,215,215,32,147,146,145,216,216,216,32,145,144,164,117,117,117,32,164,166,147,217,217,217,32,147,145,164,218,218,218,33,148,147,167,168,219,219,219,219,32,150,171,172,220,220,220,32,172,173,156,177,177,177,32,156,153,152,204,204,204,32,152,151,150,221,221,221,32,172,156,152,177,177,177,32,172,152,150,222,222,222,33,174,175,154,158,206,206,206,206,32,154,175,176,34,34,34,32,176,160,159,177,177,177,32,159,155,154,177,177,177,32,176,159,154,177,177,177,33,157,156,173,177,223,223,223,223,32,164,163,162,204,204,204,32,162,179,168,224,224,224,32,168,167,166,225,225,225,32,165,164,162,177,177,177,32,168,166,165,226,226,226,32,165,162,168,227,227,227,33,180,181,172,171,135,135,135,135,33,173,172,181,177,136,136,136,136,32,178,161,169,228,228,228],\"vertices\":[90.5878,1,0.820373,90.5878,4,0.820373,43.9918,1,5.16438,8.99998,1,9.49713,0.249979,1,9.49713,0.249964,1,17.511,0.25,1,17.511,9.73972,1,17.7501,17.1888,1,18.2996,34.4812,1,16.4565,45.2417,1,14.5894,41.4173,1,13.7306,45.553,1,13.013,56.7352,1,10.502,67.7808,1,7.4453,77.4427,1,4.25346,79.6142,1,5.09113,43.9918,4,5.16438,8.99998,4,9.49713,0.249979,4,9.49713,0.24996,4,19,0.249963,4,17.511,0.249997,4,6.50002,0.25,4,17.511,9.73972,4,17.7501,45.2417,4,14.5894,41.4173,4,13.7306,45.553,4,13.013,56.7352,4,10.502,67.7808,4,7.4453,77.4427,4,4.25346,79.6142,4,5.09113,9.24999,4,8,0.249993,4,6.5,8.99996,4,19,17.1888,4,18.2996,79.1685,4,5.26306,88.6447,1,-4.37114e-8,90.5878,1,-0.820374,90.5878,4,-0.820374,88.6447,4,-1.74846e-7,88.6447,1,-4.37114e-8,88.6447,4,-1.74846e-7,64.6898,1,-4.37114e-8,43.9918,1,-5.16438,8.99998,1,-9.49713,0.249979,1,-9.49713,0.249964,0.999999,-17.511,0.25,0.999999,-17.511,9.73972,0.999999,-17.7501,17.1888,0.999999,-18.2996,34.4812,0.999999,-16.4565,45.2417,0.999999,-14.5894,41.4173,0.999999,-13.7306,45.553,0.999999,-13.013,56.7352,1,-10.502,67.7808,1,-7.4453,77.4427,1,-4.25346,79.6142,1,-5.09113,92.4385,4,-1.74846e-7,64.6898,4,-1.74846e-7,43.9918,4,-5.16438,8.99998,4,-9.49713,0.249979,4,-9.49713,0.24996,4,-19,0.249963,4,-17.511,0.249997,4,-6.50002,0.25,4,-17.511,9.73972,4,-17.7501,45.2417,4,-14.5894,41.4173,4,-13.7306,45.553,4,-13.013,56.7352,4,-10.502,67.7808,4,-7.4453,77.4427,4,-4.25346,79.6142,4,-5.09113,9.25,4,-1.74846e-7,9.24999,4,-8,0.249993,4,-6.5,8.99996,4,-19,17.1888,4,-18.2996,79.1685,4,-5.26306,90.5878,-1,0.820374,90.5878,-4,0.820374,43.9918,-1,5.16438,8.99998,-1,9.49713,0.249979,-1,9.49713,0.249964,-0.999999,17.511,0.25,-0.999999,17.511,9.73972,-0.999999,17.7501,17.1888,-0.999999,18.2996,34.4812,-0.999999,16.4565,45.2417,-0.999999,14.5894,41.4173,-0.999999,13.7306,45.553,-0.999999,13.013,56.7352,-1,10.502,67.7808,-1,7.4453,77.4427,-1,4.25346,79.6142,-1,5.09113,43.9918,-4,5.16438,8.99998,-4,9.49713,0.249979,-4,9.49713,0.24996,-4,19,0.249963,-4,17.511,0.249997,-4,6.50002,0.25,2.84125e-7,6.50002,0.24996,8.30516e-7,19,0.25,-4,17.511,9.73972,-4,17.7501,34.4812,7.19338e-7,16.4565,45.2417,-4,14.5894,41.4173,-4,13.7306,45.553,-4,13.013,56.7352,-4,10.502,67.7808,-4,7.4453,77.4427,-4,4.25346,79.6142,-4,5.09113,79.1685,2.30056e-7,5.26306,9.24999,-4,8,0.249993,-4,6.5,8.99996,8.30516e-7,19,8.99996,-4,19,17.1888,-4,18.2996,0.249993,2.84124e-7,6.5,57.0998,5.22678e-7,11.9575,79.1685,-4,5.26306,9.24999,3.49691e-7,8,88.6447,-1,4.37114e-8,90.5878,-1,-0.820373,90.5878,-4,-0.820373,88.6447,-4,1.74846e-7,88.6447,-1,4.37114e-8,88.6447,-4,1.74846e-7,64.6898,-1,4.37114e-8,43.9918,-1,-5.16438,8.99998,-1,-9.49713,0.249979,-1,-9.49713,0.249964,-1,-17.511,0.25,-1,-17.511,9.73972,-1,-17.7501,17.1888,-1,-18.2996,34.4812,-1,-16.4565,45.2417,-1,-14.5894,41.4173,-1,-13.7306,45.553,-1,-13.013,56.7352,-1,-10.502,67.7808,-1,-7.4453,77.4427,-1,-4.25346,79.6142,-1,-5.09113,92.4385,-4,1.74846e-7,64.6898,-4,1.74846e-7,43.9918,-4,-5.16438,8.99998,-4,-9.49713,0.249979,-4,-9.49713,0.24996,-4,-19,0.249963,-4,-17.511,0.249997,-4,-6.50002,0.25,-2.84125e-7,-6.50002,0.24996,-8.30516e-7,-19,0.25,-4,-17.511,9.73972,-4,-17.7501,34.4812,-7.19338e-7,-16.4565,45.2417,-4,-14.5894,41.4173,-4,-13.7306,45.553,-4,-13.013,56.7352,-4,-10.502,67.7808,-4,-7.4453,77.4427,-4,-4.25346,79.6142,-4,-5.09113,79.1685,-2.30056e-7,-5.26306,92.4385,0,0,9.25,-4,1.74846e-7,9.24999,-4,-8,0.249993,-4,-6.5,8.99996,-8.30516e-7,-19,8.99996,-4,-19,17.1888,-4,-18.2996,0.249993,-2.84124e-7,-6.5,57.0998,-5.22678e-7,-11.9575,79.1685,-4,-5.26306,9.25,0,0,9.24999,-3.49691e-7,-8],\"normals\":[-0.388952,3.76793e-8,0.921258,0,1,-4.61659e-8,0,1,-4.46261e-8,3.2713e-8,1,2.36681e-7,1.13053e-8,1,-2.67773e-8,-9.55496e-10,1,-4.56694e-8,1.07257e-8,1,-2.78054e-8,0,1,-4.08461e-8,-4.75406e-8,1,-1.81256e-7,-1.02314e-8,1,-9.24939e-8,-1.11361e-8,1,-7.92405e-8,2.61151e-9,1,-3.54028e-8,1.46271e-9,1,-4.09602e-8,-1.86816e-8,1,-1.07666e-7,6.24947e-9,1,-2.78302e-8,3.06355e-9,1,-3.59368e-8,4.70801e-9,1,-2.72164e-8,0,-1,4.341e-8,0.40524,3.63274e-8,0.91421,0.359908,0,0.932988,0.40524,3.99614e-8,0.91421,0.359908,0,0.932988,0.361119,-0.0928731,0.927883,0.368672,-0.00449755,0.929549,0,1,0,0.242089,0,0.970254,0.122883,0,0.992421,0,0,1,-1,0,-0.00000197148,-1,-7.45058e-8,-0.00000217163,-1,-8.15839e-7,-0.00000580213,-1,2.27019e-7,-0.00000196913,-1,0,-0.00000689096,-1,-0.00001116,-0.00000316739,0,-1,0,0.0735656,0,-0.99729,0,1,-4.98564e-7,0.0251882,1.87666e-9,-0.999683,0.0251882,0,-0.999683,0.105981,0,0.994368,0.0852211,0,0.996362,0.0986573,-0.115616,0.988382,0.0852211,0,0.996362,0.170959,0,0.985278,0.242978,0,0.970032,0.265064,0,0.964231,0.100041,-0.994002,0.0441822,-0.219101,0,0.975702,-0.170959,0,-0.985278,0,1,0,-0.31368,0,-0.949529,-2.81545e-9,-1,2.88257e-8,-0.2191,0,-0.975702,-0.23575,0.242095,-0.941176,-0.278513,-0.26558,-0.922983,0.359895,0,-0.932993,0,1,-5.96046e-8,0,1,0,2.70517e-8,1,1.08418e-7,8.81337e-9,1,1.47179e-9,0,0,1,-0.952473,-3.88532e-7,0.304624,4.89062e-8,1,1.26779e-7,2.65849e-8,1,-6.89187e-8,1.43347e-7,1,5.17995e-7,6.2216e-8,1,1.74945e-7,-1,0,-8.34465e-7,0.164399,0,-0.986394,-0.388952,-3.76793e-8,-0.921258,0,4.37114e-8,1,0,0,0,6.23449e-9,1,-5.78887e-8,-3.60623e-8,1,7.18147e-8,5.57143e-9,1,-5.67126e-8,0,1,-4.61659e-8,-8.58615e-9,1,2.80725e-8,-8.31239e-9,1,-2.0148e-8,3.6239e-8,1,-2.08854e-7,3.66859e-9,1,-5.30667e-8,-1.40984e-9,1,-1.91125e-8,0,1,-4.46261e-8,-7.83437e-10,1,-3.10934e-8,4.97207e-9,1,-6.05117e-8,-4.27635e-10,1,-4.26439e-8,9.50922e-11,1,-4.47299e-8,-5.22234e-10,1,-4.16137e-8,0.40524,-3.63274e-8,-0.91421,0.359908,0,-0.932988,0.359908,0,-0.932988,0.40524,-3.99614e-8,-0.91421,0.362687,-0.00142386,-0.93191,0.367494,-0.0800054,-0.926578,0,1,0,0.242089,0,-0.970254,0.122883,0,-0.992421,0,0,-1,-1,0,0.00000197148,-1,-8.15839e-7,0.00000580213,-1,0,0.00000689096,-1,-7.45058e-8,0.00000217163,-1,-0.0000147513,0.00000196913,-1,-0.0000015572,0.00000316739,0,0,1,0.0251883,-3.05897e-7,0.999683,0.0735656,0,0.99729,0.0251882,0,0.999683,0.105981,0,-0.994368,0.0852211,0,-0.996362,0.0986573,-0.115616,-0.988382,0.0852211,0,-0.996362,0.170959,0,-0.985278,0.265064,0,-0.964231,0.242978,0,-0.970032,0.100041,-0.994002,-0.0441826,-0.219101,0,-0.975702,-0.170959,0,0.985278,9.28953e-8,1,-4.13683e-7,-0.2191,0,0.975702,-0.31368,0,0.949529,-0.262145,-0.184234,0.947279,-4.43657e-8,1,1.34298e-7,-0.261001,-0.170361,0.950187,0.359895,0,0.932993,0,1,-2.98023e-8,-2.1781e-9,1,-3.74365e-8,0,1,-7.95493e-8,1.91407e-8,1,-1.62447e-7,-2.58227e-8,1,-1.54938e-7,0,0,-1,-0.952473,-3.88532e-7,-0.304624,-4.89062e-8,1,1.26779e-7,-3.25203e-8,1,-1.44819e-7,5.52009e-8,1,-2.77471e-7,3.55379e-8,1,-1.58258e-7,1.00718e-8,1,-8.66501e-8,-1,0,8.34465e-7,0.164399,0,0.986394,6.23449e-9,-1,5.78887e-8,-3.60623e-8,-1,-7.18147e-8,5.57143e-9,-1,5.67126e-8,0,-1,4.61659e-8,0,-1,4.46261e-8,-8.58615e-9,-1,-2.80725e-8,-8.31239e-9,-1,2.0148e-8,3.6239e-8,-1,2.08854e-7,3.66859e-9,-1,5.30667e-8,-1.40984e-9,-1,1.91125e-8,0,-1,4.46261e-8,-7.83437e-10,-1,3.10934e-8,4.97207e-9,-1,6.05117e-8,-4.27635e-10,-1,4.26439e-8,9.50922e-11,-1,4.47299e-8,-5.22234e-10,-1,4.16137e-8,0.359908,0,0.932988,0.359908,0,0.932988,0.362687,0.00142386,0.93191,0.367494,0.0800054,0.926578,0,-1,0,0.122883,0,0.992421,-1,8.15839e-7,-0.00000580213,-1,7.45058e-8,-0.00000217163,-1,0.0000147513,-0.00000196913,-1,0.0000015572,-0.00000316739,0.0251883,3.05897e-7,-0.999683,0.0986573,0.115616,0.988382,0.100041,0.994002,0.0441826,9.28953e-8,-1,4.13683e-7,-0.31368,0,-0.949529,-0.262145,0.184234,-0.947279,-4.43657e-8,-1,-1.34298e-7,-0.261001,0.170361,-0.950187,0.359895,0,-0.932993,0,-1,2.98023e-8,-2.1781e-9,-1,3.74365e-8,0,-1,7.95493e-8,1.91407e-8,-1,1.62447e-7,-2.58227e-8,-1,1.54938e-7,0,-1,0,-0.952473,3.88532e-7,0.304624,-4.89062e-8,-1,-1.26779e-7,-3.25203e-8,-1,1.44819e-7,5.52009e-8,-1,2.77471e-7,3.55379e-8,-1,1.58258e-7,1.00718e-8,-1,8.66501e-8,0,1,-4.37114e-8,0,-1,4.61659e-8,3.2713e-8,-1,-2.36681e-7,1.13053e-8,-1,2.67773e-8,-9.55496e-10,-1,4.56694e-8,1.07257e-8,-1,2.78054e-8,0,-1,4.08461e-8,-4.75406e-8,-1,1.81256e-7,-1.02314e-8,-1,9.24939e-8,-1.11361e-8,-1,7.92405e-8,2.61151e-9,-1,3.54028e-8,1.46271e-9,-1,4.09602e-8,-1.86816e-8,-1,1.07666e-7,6.24947e-9,-1,2.78302e-8,3.06355e-9,-1,3.59368e-8,4.70801e-9,-1,2.72164e-8,0,1,-4.341e-8,0.359908,0,-0.932988,0.361119,0.0928731,-0.927883,0.368672,0.00449755,-0.929549,0,-1,0,0.122883,0,-0.992421,0,0,-1,-1,7.45058e-8,0.00000217163,-1,8.15839e-7,0.00000580213,-1,-2.27019e-7,0.00000196913,-1,0.00001116,0.00000316739,0,-1,4.98564e-7,0.0251882,-1.87666e-9,0.999683,0.0986573,0.115616,-0.988382,0.100041,0.994002,-0.0441822,-0.31368,0,0.949529,-2.81545e-9,1,-2.88257e-8,-0.23575,-0.242095,0.941176,-0.278513,0.26558,0.922983,0.359895,0,0.932993,0,-1,5.96046e-8,2.70517e-8,-1,-1.08418e-7,8.81337e-9,-1,-1.47179e-9,-0.952473,3.88532e-7,-0.304624,4.89062e-8,-1,-1.26779e-7,2.65849e-8,-1,6.89187e-8,1.43347e-7,-1,-5.17995e-7,6.2216e-8,-1,-1.74945e-7,4.36167e-15,1,-4.37114e-8]},\"eight_L_B\":{\"uvs\":[],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":319,\"version\":3,\"normals\":337,\"type\":\"Geometry\",\"faces\":446},\"faces\":[33,0,1,2,3,0,0,0,0,33,1,7,8,2,1,1,1,1,33,5,4,12,13,2,2,2,2,33,7,15,16,8,3,3,3,3,33,18,12,4,11,4,4,4,4,33,14,5,13,19,5,5,5,5,33,15,23,24,16,6,6,6,6,32,45,58,74,7,7,7,32,74,88,100,8,8,8,32,100,89,75,9,9,9,32,75,59,46,10,10,10,32,46,35,25,11,11,11,32,25,17,9,12,12,12,32,9,10,3,13,13,13,32,9,3,2,13,13,13,32,46,25,9,14,14,14,32,100,75,46,15,15,15,32,45,74,100,16,16,16,32,45,100,46,17,17,17,32,9,2,8,18,18,18,32,9,8,16,19,19,19,32,34,45,46,20,20,20,32,24,34,46,21,21,21,32,46,9,16,22,22,22,32,16,24,46,23,23,23,33,309,301,116,125,24,24,24,24,33,22,14,19,28,25,25,25,25,33,257,239,59,75,26,26,26,26,33,30,31,21,20,27,27,27,27,33,23,33,34,24,28,28,28,28,32,132,137,136,29,29,29,32,136,130,129,30,30,30,32,129,135,131,31,31,31,32,131,121,112,32,32,32,32,112,97,84,33,33,33,32,84,69,55,34,34,34,32,55,54,64,29,29,29,32,64,78,91,35,35,35,32,91,105,115,29,29,29,32,115,124,133,29,29,29,32,133,139,141,29,29,29,32,141,142,140,13,13,13,32,141,140,138,29,29,29,32,115,133,141,13,13,13,32,64,91,115,36,36,36,32,84,55,64,37,37,37,32,131,112,84,38,38,38,32,136,129,131,39,39,39,32,132,136,131,29,29,29,32,115,141,138,13,13,13,32,115,138,134,13,13,13,32,132,131,84,40,40,40,32,122,132,84,41,41,41,32,115,134,125,29,29,29,32,115,125,116,42,42,42,32,113,122,84,43,43,43,32,98,113,84,44,44,44,32,64,115,116,45,45,45,32,64,116,106,46,46,46,32,85,98,84,29,29,29,32,71,85,84,47,47,47,32,64,106,92,48,48,48,32,64,92,79,49,49,49,32,71,84,64,50,50,50,32,64,79,70,42,42,42,32,64,70,71,42,42,42,33,37,30,20,26,51,51,51,51,33,32,22,28,38,52,52,52,52,32,81,94,107,53,53,53,32,107,118,119,29,29,29,32,107,119,108,54,54,54,32,81,107,108,55,55,55,32,109,102,101,29,29,29,32,81,108,109,56,56,56,32,66,81,109,29,29,29,32,109,101,93,54,54,54,32,80,65,50,57,57,57,32,109,93,80,58,58,58,32,51,66,109,59,59,59,32,39,51,109,60,60,60,32,109,80,50,61,61,61,32,50,38,28,62,62,62,32,28,19,13,63,63,63,32,13,12,18,64,64,64,32,13,18,27,65,65,65,32,50,28,13,66,66,66,32,39,109,50,67,67,67,32,29,39,50,68,68,68,32,50,13,27,69,69,69,32,61,60,47,29,29,29,32,50,27,61,70,70,70,32,21,29,50,29,29,29,32,20,21,50,71,71,71,32,50,61,47,72,72,72,32,50,47,36,73,73,73,32,26,20,50,74,74,74,32,50,36,26,75,75,75,33,31,40,29,21,76,76,76,76,33,276,262,79,92,77,77,77,77,33,33,44,45,34,78,78,78,78,33,9,169,170,10,79,79,79,79,33,48,37,26,36,80,80,80,80,33,43,32,38,50,81,81,81,81,33,40,52,39,29,82,82,82,82,33,288,276,92,106,83,83,83,83,33,42,41,54,55,84,84,84,84,33,44,57,58,45,85,85,85,85,33,193,181,17,25,86,86,86,86,33,298,306,122,113,87,87,87,87,33,62,48,36,47,88,88,88,88,33,41,49,64,54,89,89,89,89,33,56,43,50,65,90,90,90,90,33,52,67,51,39,91,91,91,91,33,89,100,256,271,92,92,92,92,33,53,42,55,69,93,93,93,93,33,315,309,125,134,94,94,94,94,33,57,73,74,58,95,95,95,95,32,56,72,86,96,96,96,32,86,99,87,97,97,97,32,87,73,57,98,98,98,32,57,44,33,99,99,99,32,33,23,15,100,100,100,32,15,7,1,101,101,101,32,1,0,6,102,102,102,32,6,11,4,103,103,103,32,6,4,5,104,104,104,32,15,1,6,105,105,105,32,57,33,15,106,106,106,32,86,87,57,107,107,107,32,56,86,57,108,108,108,32,57,15,6,109,109,109,32,6,5,14,110,110,110,32,6,14,22,111,111,111,32,43,56,57,112,112,112,32,6,22,32,113,113,113,32,32,43,57,114,114,114,32,57,6,32,115,115,115,33,76,62,47,60,116,116,116,116,33,49,63,78,64,117,117,117,117,33,72,56,65,80,118,118,118,118,33,207,193,25,35,119,119,119,119,33,67,82,66,51,120,120,120,120,33,68,53,69,84,121,121,121,121,33,262,249,70,79,122,122,122,122,33,73,87,88,74,123,123,123,123,33,63,77,91,78,124,124,124,124,33,318,315,134,138,125,125,125,125,33,86,72,80,93,126,126,126,126,33,82,95,81,66,127,127,127,127,33,83,68,84,97,128,128,128,128,32,256,100,88,129,129,129,32,256,88,87,130,130,130,32,101,102,255,130,130,130,32,256,87,99,131,131,131,32,99,101,255,132,132,132,32,99,255,256,133,133,133,33,77,90,105,91,134,134,134,134,33,270,284,98,85,135,135,135,135,33,99,86,93,101,136,136,136,136,33,95,110,94,81,137,137,137,137,33,96,83,97,112,138,138,138,138,33,250,270,85,71,139,139,139,139,33,284,298,113,98,140,140,140,140,33,249,250,71,70,141,141,141,141,33,102,109,272,255,142,142,142,142,33,90,103,115,105,143,143,143,143,33,306,311,132,122,144,144,144,144,33,110,117,107,94,145,145,145,145,33,109,108,280,272,146,146,146,146,33,111,96,112,121,147,147,147,147,33,181,169,9,17,148,148,148,148,33,103,114,124,115,149,149,149,149,33,224,207,35,46,150,150,150,150,33,310,304,136,137,151,151,151,151,33,117,127,118,107,152,152,152,152,32,119,118,127,153,153,153,32,128,129,130,129,129,129,32,295,119,127,154,154,154,32,128,130,294,155,155,155,32,295,127,128,156,156,156,32,128,294,295,157,157,157,33,108,119,295,280,158,158,158,158,33,120,111,121,131,159,159,159,159,33,133,124,114,123,160,160,160,160,33,304,294,130,136,161,161,161,161,32,111,120,126,162,162,162,32,126,128,127,163,163,163,32,127,117,110,164,164,164,32,110,95,82,165,165,165,32,82,67,52,166,166,166,32,52,40,31,167,167,167,32,31,30,37,168,168,168,32,37,48,62,169,169,169,32,62,76,104,170,170,170,32,104,123,114,171,171,171,32,104,114,103,172,172,172,32,37,62,104,173,173,173,32,52,31,37,174,174,174,32,110,82,52,175,175,175,32,126,127,110,176,176,176,32,111,126,110,177,177,177,32,110,52,37,178,178,178,32,37,104,103,179,179,179,32,37,103,90,180,180,180,32,96,111,110,181,181,181,32,83,96,110,182,182,182,32,37,90,77,183,183,183,32,37,77,63,184,184,184,32,83,110,37,185,185,185,32,68,83,37,186,186,186,32,37,63,49,187,187,187,32,37,49,41,188,188,188,32,53,68,37,189,189,189,32,37,41,42,190,190,190,32,37,42,53,191,191,191,33,126,120,131,135,192,192,192,192,33,128,126,135,129,193,193,193,193,33,317,318,138,140,194,194,194,194,33,271,257,75,89,195,195,195,195,33,301,288,106,116,196,196,196,196,33,239,224,46,59,197,197,197,197,33,316,317,140,142,198,198,198,198,33,311,310,137,132,199,199,199,199,33,143,146,145,144,0,0,0,0,33,144,145,151,150,200,200,200,200,33,148,156,155,147,2,2,2,2,33,150,151,159,158,3,3,3,3,33,161,154,147,155,4,4,4,4,33,157,162,156,148,5,5,5,5,33,158,159,167,166,6,6,6,6,32,145,146,153,201,201,201,32,153,152,160,202,202,202,32,160,168,180,203,203,203,32,180,192,206,204,204,204,32,223,238,252,205,205,205,32,180,206,223,206,206,206,32,153,160,180,207,207,207,32,151,145,153,208,208,208,32,159,151,153,209,209,209,32,180,223,252,210,210,210,32,252,237,222,211,211,211,32,222,205,191,212,212,212,32,252,222,191,213,213,213,32,159,153,180,214,214,214,32,167,159,180,215,215,215,32,180,252,191,216,216,216,32,179,167,180,217,217,217,32,180,191,179,218,218,218,33,309,287,275,301,24,24,24,24,33,165,173,162,157,25,25,25,25,33,257,223,206,239,26,26,26,26,33,175,163,164,176,219,219,219,219,33,166,167,179,178,28,28,28,28,32,303,305,297,220,220,220,32,292,293,303,221,221,221,32,296,302,292,221,221,221,32,268,282,296,222,222,222,32,233,247,268,223,223,223,32,202,217,233,221,221,221,32,212,201,202,224,224,224,32,241,227,212,225,225,225,32,274,260,241,221,221,221,32,299,286,274,221,221,221,32,313,308,299,221,221,221,32,312,314,313,221,221,221,32,307,312,313,221,221,221,32,313,299,274,215,215,215,32,274,241,212,226,226,226,32,212,202,233,227,227,227,32,233,268,296,228,228,228,32,296,292,303,229,229,229,32,296,303,297,230,230,230,32,307,313,274,215,215,215,32,300,307,274,215,215,215,32,233,296,297,231,231,231,32,233,297,283,232,232,232,32,287,300,274,221,221,221,32,275,287,274,233,233,233,32,233,283,269,234,234,234,32,233,269,248,235,235,235,32,275,274,212,236,236,236,32,261,275,212,237,237,237,32,233,248,234,238,238,238,32,233,234,219,221,221,221,32,242,261,212,239,239,239,32,228,242,212,215,215,215,32,212,233,219,240,240,240,32,218,228,212,233,233,233,32,219,218,212,241,241,241,33,183,171,163,175,242,242,242,242,33,177,184,173,165,52,52,52,52,32,194,208,209,221,221,221,32,172,161,155,215,215,215,32,194,209,172,243,243,243,32,182,194,172,244,244,244,32,172,155,156,221,221,221,32,156,162,173,245,245,245,32,173,184,197,246,246,246,32,197,213,229,247,247,247,32,229,243,253,221,221,221,32,253,254,265,248,248,248,32,264,279,278,249,249,249,32,229,253,265,229,229,229,32,264,278,263,250,250,250,32,229,265,264,251,251,251,32,173,197,229,252,252,252,32,172,156,173,253,253,253,32,171,182,172,254,254,254,32,163,171,172,255,255,255,32,172,173,229,256,256,256,32,264,263,244,221,221,221,32,172,229,264,257,257,257,32,164,163,172,258,258,258,32,174,164,172,259,259,259,32,172,264,244,260,260,260,32,172,244,230,261,261,261,32,185,174,172,262,262,262,32,198,185,172,263,263,263,32,172,230,214,264,264,264,32,198,172,214,265,265,265,33,176,164,174,186,76,76,76,76,33,276,242,228,262,266,266,266,266,33,178,179,191,190,78,78,78,78,33,152,153,170,169,267,267,267,267,33,195,182,171,183,80,80,80,80,33,189,197,184,177,81,81,81,81,33,186,174,185,199,82,82,82,82,33,288,261,242,276,268,268,268,268,33,188,202,201,187,269,269,269,269,33,190,191,205,204,85,85,85,85,33,193,168,160,181,86,86,86,86,33,298,269,283,306,87,87,87,87,33,210,194,182,195,88,88,88,88,33,187,201,212,196,89,89,89,89,33,203,213,197,189,90,90,90,90,33,199,185,198,215,91,91,91,91,33,238,271,256,252,92,92,92,92,33,200,217,202,188,270,270,270,270,33,315,300,287,309,94,94,94,94,33,204,205,222,221,95,95,95,95,32,235,220,203,271,271,271,32,236,251,235,272,272,272,32,204,221,236,273,273,273,32,178,190,204,274,274,274,32,158,166,178,275,275,275,32,144,150,158,276,276,276,32,149,143,144,277,277,277,32,147,154,149,278,278,278,32,148,147,149,279,279,279,32,149,144,158,280,280,280,32,158,178,204,281,281,281,32,204,236,235,282,282,282,32,204,235,203,283,283,283,32,149,158,204,284,284,284,32,157,148,149,285,285,285,32,165,157,149,286,286,286,32,204,203,189,287,287,287,32,177,165,149,288,288,288,32,204,189,177,289,289,289,32,177,149,204,290,290,290,33,225,208,194,210,291,291,291,291,33,196,212,227,211,292,292,292,292,33,220,229,213,203,118,118,118,118,33,207,180,168,193,119,119,119,119,33,215,198,214,231,120,120,120,120,33,216,233,217,200,121,121,121,121,33,262,228,218,249,122,122,122,122,33,221,222,237,236,123,123,123,123,33,211,227,241,226,293,293,293,293,33,318,307,300,315,125,125,125,125,33,235,243,229,220,294,294,294,294,33,231,214,230,245,127,127,127,127,33,232,247,233,216,295,295,295,295,32,237,252,256,129,129,129,32,255,254,253,130,130,130,32,255,253,251,132,132,132,32,236,237,256,155,155,155,32,255,251,236,296,296,296,32,256,255,236,297,297,297,33,226,241,260,240,134,134,134,134,33,270,234,248,284,135,135,135,135,33,251,253,243,235,136,136,136,136,33,245,230,244,266,137,137,137,137,33,246,268,247,232,138,138,138,138,33,250,219,234,270,139,139,139,139,33,284,248,269,298,140,140,140,140,33,249,218,219,250,298,298,298,298,33,254,255,272,265,299,299,299,299,33,240,260,274,258,143,143,143,143,33,306,283,297,311,144,144,144,144,33,266,244,263,277,145,145,145,145,33,265,272,280,264,146,146,146,146,33,267,282,268,246,147,147,147,147,33,181,160,152,169,148,148,148,148,33,258,274,286,273,149,149,149,149,33,224,192,180,207,150,150,150,150,33,310,305,303,304,151,151,151,151,33,277,263,278,290,161,161,161,161,32,290,278,279,300,300,300,32,294,293,292,155,155,155,32,294,292,291,129,129,129,32,290,279,295,154,154,154,32,294,291,290,129,129,129,32,295,294,290,301,301,301,33,264,280,295,279,158,158,158,158,33,281,296,282,267,302,302,302,302,33,299,285,273,286,160,160,160,160,33,304,303,293,294,161,161,161,161,32,273,285,259,303,303,303,32,259,225,210,304,304,304,32,210,195,183,305,305,305,32,183,175,176,306,306,306,32,176,186,199,307,307,307,32,199,215,231,308,308,308,32,231,245,266,309,309,309,32,266,277,290,310,310,310,32,290,291,289,311,311,311,32,289,281,267,312,312,312,32,290,289,267,313,313,313,32,231,266,290,314,314,314,32,176,199,231,315,315,315,32,210,183,176,316,316,316,32,273,259,210,317,317,317,32,258,273,210,318,318,318,32,210,176,231,319,319,319,32,231,290,267,320,320,320,32,231,267,246,321,321,321,32,240,258,210,322,322,322,32,226,240,210,323,323,323,32,231,246,232,324,324,324,32,231,232,216,325,325,325,32,211,226,210,326,326,326,32,196,211,210,327,327,327,32,210,231,216,328,328,328,32,210,216,200,329,329,329,32,187,196,210,330,330,330,32,210,200,188,331,331,331,32,188,187,210,332,332,332,33,289,302,296,281,333,333,333,333,33,291,292,302,289,334,334,334,334,33,317,312,307,318,194,194,194,194,33,271,238,223,257,195,195,195,195,33,301,275,261,288,196,196,196,196,33,239,206,192,224,197,197,197,197,33,316,314,312,317,335,335,335,335,33,311,297,305,310,336,336,336,336],\"vertices\":[90.5878,1,0.820389,99.8345,1,4.91922,99.8345,4,4.91922,90.5878,4,0.820389,86.2945,1,7.66806,96.413,1,12.1533,89.9301,1,1.11191,110.071,1,10.0721,110.071,4,10.0721,100.476,4,3.56284,92.4385,4,0.0000305176,79.6142,1,5.09113,86.2945,4,7.66806,96.413,4,12.1533,106.299,1,17.1296,120.043,1,15.7211,120.043,4,15.7211,110.779,4,8.74879,79.6142,4,5.09113,106.299,4,17.1296,79.0213,4,25.2271,88.287,4,29.3342,115.929,1,22.5849,129.726,1,21.8525,129.726,4,21.8525,120.815,4,14.4341,69.5653,4,21.5794,79.1685,4,5.26306,115.929,4,22.5849,97.3398,4,33.8911,79.0213,1,25.2271,88.287,1,29.3342,125.28,1,28.5063,139.096,1,28.4518,139.096,4,28.4518,130.559,4,20.6049,59.9418,4,18.4002,69.5653,1,21.5794,125.28,4,28.5063,106.158,4,38.8867,97.3398,1,33.8911,75.9589,1,32.6203,84.8654,1,36.5683,134.329,1,34.8793,148.131,1,35.5027,148.131,4,35.5027,139.99,4,27.2466,50.1738,4,15.697,59.9418,1,18.4002,66.8694,1,29.114,134.329,4,34.8793,114.721,4,44.3089,106.158,1,38.8867,93.5675,1,40.9486,75.9589,4,32.6203,84.8654,4,36.5683,143.054,1,41.6887,156.809,1,42.9886,156.809,4,42.9886,149.083,4,34.3428,45.2417,4,14.5895,45.8457,4,14.4847,50.1738,1,15.697,57.6188,1,26.058,66.8694,4,29.114,143.054,4,41.6887,123.007,4,50.1448,114.721,1,44.3089,102.044,1,45.7506,93.5675,4,40.9486,75.3847,4,34.0065,84.2239,4,37.9247,151.435,1,48.9179,158.745,1,44.527,158.745,4,44.527,157.817,4,41.8768,45.2417,1,14.5895,48.2293,1,23.4596,57.6188,4,26.058,66.3639,4,30.5268,151.435,4,48.9179,130.997,4,56.3803,123.007,1,50.1448,110.275,1,50.9627,102.044,4,45.7506,92.8602,4,42.2719,153.087,1,50.1855,164.932,1,50.7142,164.932,4,50.7142,159.806,4,43.466,38.7237,1,21.325,48.2293,4,23.4596,57.1832,4,27.4939,153.087,4,50.1855,138.671,4,63.0002,130.997,1,56.3803,118.24,1,56.5724,110.275,4,50.9627,101.273,4,47.0376,159.274,1,56.3727,165.993,4,49.6532,159.274,4,56.3727,157.154,4,58.492,29.1247,1,19.6595,34.4812,1,16.4566,38.7237,4,21.325,47.8648,4,24.9151,139.648,4,63.6245,140.537,4,62.3811,151.851,4,51.0674,138.671,1,63.0002,125.92,1,62.5662,118.24,4,56.5724,109.441,4,52.2103,19.4556,1,18.4668,29.1247,4,19.6595,38.431,4,22.7966,139.648,1,63.6245,145.835,4,69.8117,147.962,4,67.6844,133.297,1,68.9296,125.92,4,62.5662,117.346,4,57.7776,17.1889,1,18.2996,19.4556,4,18.4668,28.9046,4,21.1436,133.989,1,69.2831,145.835,1,69.8117,140.176,1,75.4703,140.176,4,75.4703,139.115,4,76.5312,133.297,4,68.9296,124.969,4,63.7261,17.1889,4,18.2996,19.3085,4,19.9601,133.989,4,69.2831,132.928,4,70.3441,132.29,4,70.0414,9.66609,4,19.2487,11.5305,4,18.717,0.249969,4,19.0115,8.99995,4,19,0.249969,4,19,90.5878,-1,0.820389,99.8345,-1,4.91922,99.8345,-4,4.91922,90.5878,-4,0.820389,86.2945,-1,7.66806,96.413,-1,12.1533,89.9301,-1,1.11191,110.071,-1,10.0721,110.071,-4,10.0721,100.476,-4,3.56284,92.4385,-4,0.0000305176,79.6142,-1,5.09113,86.2945,-4,7.66806,96.413,-4,12.1533,106.299,-0.999999,17.1296,120.043,-0.999999,15.7211,120.043,-4,15.7211,110.779,-4,8.74879,79.6142,-4,5.09113,106.299,-4,17.1296,79.0213,-4,25.2271,88.287,-4,29.3342,115.929,-0.999999,22.5849,129.726,-0.999999,21.8525,129.726,-4,21.8525,120.815,-4,14.4341,100.476,1.55736e-7,3.56284,92.4385,9.09495e-13,0.0000305176,69.5653,-4,21.5794,79.1685,-4,5.26306,115.929,-4,22.5849,97.3398,-4,33.8911,79.0213,-0.999999,25.2271,88.287,-0.999999,29.3342,125.28,-0.999999,28.5063,139.096,-0.999999,28.4518,139.096,-4,28.4518,130.559,-4,20.6049,110.779,3.82422e-7,8.74879,59.9418,-4,18.4002,69.5653,-0.999999,21.5794,125.28,-4,28.5063,106.158,-4,38.8867,97.3398,-0.999999,33.8911,75.9589,-0.999999,32.6203,84.8654,-0.999998,36.5683,134.329,-0.999998,34.8793,148.131,-0.999998,35.5027,148.131,-4,35.5027,139.99,-4,27.2466,120.815,6.30934e-7,14.4341,50.1738,-4,15.697,59.9418,-0.999999,18.4002,66.8694,-0.999999,29.114,134.329,-4,34.8793,114.721,-4,44.3089,106.158,-0.999998,38.8867,93.5675,-0.999998,40.9486,75.9589,-4,32.6203,84.8654,-4,36.5683,143.054,-0.999998,41.6887,156.809,-0.999998,42.9886,156.809,-4,42.9886,149.083,-4,34.3428,130.559,9.0067e-7,20.6049,45.2417,-4,14.5895,45.8457,-4,14.4847,50.1738,-0.999999,15.697,57.6188,-0.999999,26.058,66.8694,-4,29.114,143.054,-4,41.6887,123.007,-4,50.1448,114.721,-0.999998,44.3089,102.044,-0.999998,45.7506,93.5675,-4,40.9486,75.3847,-4,34.0065,84.2239,-4,37.9247,151.435,-0.999998,48.9179,158.745,-0.999998,44.527,158.745,-4,44.527,157.817,-4,41.8768,139.99,0.00000119099,27.2466,45.2417,-0.999999,14.5895,48.2293,-0.999999,23.4596,57.6188,-4,26.058,66.3639,-4,30.5268,151.435,-4,48.9179,130.997,-4,56.3803,123.007,-0.999998,50.1448,110.275,-0.999998,50.9627,102.044,-4,45.7506,92.8602,-4,42.2719,153.087,-0.999998,50.1855,164.932,-0.999998,50.7142,164.932,-4,50.7142,159.806,-4,43.466,149.083,0.00000150117,34.3428,38.7237,-0.999999,21.325,48.2293,-4,23.4596,57.1832,-4,27.4939,153.087,-4,50.1855,138.671,-4,63.0002,130.997,-0.999998,56.3803,118.24,-0.999997,56.5724,110.275,-4,50.9627,101.273,-4,47.0376,75.3847,0.00000148647,34.0065,84.2239,0.00000165774,37.9247,159.274,-0.999998,56.3727,165.993,-4,49.6532,159.274,-4,56.3727,157.154,-4,58.492,157.154,0.00000255677,58.492,165.993,0.00000217041,49.6532,157.817,0.00000183049,41.8768,29.1247,-0.999999,19.6595,34.4812,-0.999999,16.4566,38.7237,-4,21.325,47.8648,-4,24.9151,66.3639,0.00000133437,30.5268,139.648,-4,63.6245,140.537,-4,62.3811,151.851,-4,51.0674,138.671,-0.999997,63.0002,125.92,-0.999997,62.5662,118.24,-4,56.5724,109.441,-4,52.2103,92.8602,0.00000184776,42.2719,159.806,0.00000189996,43.466,151.851,0.00000223223,51.0674,19.4556,-0.999999,18.4668,29.1247,-4,19.6595,38.431,-4,22.7966,57.1832,0.00000120179,27.4939,139.648,-0.999997,63.6245,145.835,-4,69.8117,147.962,-4,67.6844,140.537,0.00000272676,62.3811,133.297,-0.999997,68.9296,125.92,-4,62.5662,117.346,-4,57.7776,101.273,0.00000205608,47.0376,17.1889,-0.999999,18.2996,19.4556,-4,18.4668,28.9046,-4,21.1436,47.8648,0.00000108907,24.9151,133.989,-0.999997,69.2831,145.835,-0.999997,69.8117,140.176,-0.999997,75.4703,140.176,-4,75.4703,139.115,-4,76.5312,139.115,0.00000334529,76.5312,147.962,0.00000295858,67.6844,133.297,-4,68.9296,124.969,-4,63.7261,109.441,0.00000228218,52.2103,17.1889,-4,18.2996,19.3085,-4,19.9601,38.431,9.96472e-7,22.7966,133.989,-4,69.2831,132.928,-4,70.3441,132.928,0.00000307484,70.3441,132.29,-4,70.0414,117.346,0.00000252554,57.7776,9.66609,-4,19.2487,11.5305,-4,18.717,28.9046,9.24217e-7,21.1436,132.29,0.00000306161,70.0414,124.969,0.00000278555,63.7261,0.249969,-4,19.0115,8.99995,-4,19,0.249969,-4,19,19.3085,8.72481e-7,19.9601,0.249969,8.30518e-7,19,0.249969,8.31019e-7,19.0115,9.66609,8.41389e-7,19.2487],\"normals\":[-0.405246,0,0.914208,-0.449615,0,0.893223,0.405242,0,-0.914209,-0.492899,0,0.870087,0.359903,0,-0.93299,0.449614,0,-0.893223,-0.534999,0,0.844853,6.42024e-7,1,-8.07983e-7,-3.85342e-8,1,-3.85342e-8,3.06014e-7,1,-3.83082e-7,-3.19657e-8,1,-2.6235e-8,-4.85121e-7,1,6.88815e-7,-4.15265e-7,1,7.33041e-7,0,1,0,-1.77565e-8,1,-1.06423e-8,-2.315e-8,1,-3.6977e-8,-1.68993e-7,1,1.45929e-7,-3.48958e-8,1,-2.33456e-8,-3.76228e-8,1,-1.77948e-8,2.51619e-7,1,-4.4417e-7,1.9557e-7,1,-2.50601e-7,1.49612e-7,1,-2.84687e-7,-1.77551e-8,1,-1.06446e-8,2.40275e-7,1,-4.57203e-7,-0.170966,0,0.985277,0.492897,0,-0.870087,0.653175,0,-0.757207,-0.405239,0,0.914211,-0.575813,0,0.817582,0,1,0,-3.85343e-8,1,-3.85343e-8,8.05603e-8,1,-1.57629e-7,-6.51545e-7,1,7.55318e-7,-5.74369e-7,1,8.15537e-7,-4.91616e-7,1,8.67818e-7,2.66025e-7,1,-9.61293e-7,4.87232e-8,1,-2.44948e-7,9.55808e-8,1,-2.30749e-7,-1.96869e-8,1,-1.45992e-8,-5.55309e-8,1,-1.45021e-8,1.63101e-7,1,-2.61059e-7,-0.00000446989,1,0.00000564745,0,1,0,2.68668e-7,1,-3.81478e-7,-4.23145e-8,1,-2.53616e-8,-4.9167e-8,1,1.45851e-7,-0.00000155497,1,0.00000692438,1.67856e-7,1,-4.43154e-7,-1.24447e-7,1,4.49698e-7,-4.6449e-8,1,-1.6619e-8,-1.9823e-7,1,3.90458e-7,-0.359901,0,0.932991,0.535,0,-0.844852,1.78237e-7,1,-2.78658e-7,0,1,0,-3.44661e-8,1,-2.46667e-8,-1.44085e-8,1,-5.65555e-8,-5.73505e-7,1,6.64852e-7,-1.39131e-7,1,-1.94898e-7,2.73764e-9,1,-8.55943e-8,-1.80227e-8,1,2.84609e-8,1.83318e-7,1,-2.5734e-7,-5.05562e-7,1,7.17835e-7,-4.32819e-7,1,7.64034e-7,-5.50092e-7,1,0.00000124098,-1.35827e-8,1,-3.52109e-8,-1.8505e-8,1,-1.10904e-8,7.40599e-9,1,-6.69286e-8,2.67644e-9,1,-1.00176e-7,-3.26489e-8,1,1.25071e-8,6.22178e-10,1,-4.94603e-8,1.91989e-8,1,-1.59411e-7,-6.08447e-8,1,2.17217e-7,1.63766e-7,1,-7.68175e-7,-1.57448e-8,1,4.0816e-8,-1.9459e-8,1,5.89025e-8,-0.449615,0,0.893222,-0.313683,0,0.949528,-0.615231,0,0.788347,0.405244,0,-0.914209,-0.313686,0,0.949527,0.575812,0,-0.817582,-0.492899,0,0.870086,-0.266711,0,0.963777,0.405249,0,-0.914206,-0.653173,0,0.757209,0.4929,0,-0.870086,-0.57581,0,0.817583,-0.266712,0,0.963776,0.359896,0,-0.932992,0.615232,0,-0.788346,-0.534999,0,0.844853,0.707107,0,-0.707107,0.44961,0,-0.893225,-0.122411,0,0.99248,-0.622114,0,0.782926,3.44216e-7,1,-4.48511e-7,-7.83333e-9,1,-4.99677e-8,2.23614e-7,1,-2.81416e-7,-2.41287e-8,1,-1.98022e-8,-1.73018e-8,1,-1.15619e-8,-1.83524e-8,1,-9.8093e-9,-1.28913e-8,1,-2.90855e-8,2.63384e-9,1,-5.30879e-8,4.95308e-10,1,-5.42738e-8,-2.52918e-8,1,3.17331e-9,4.22429e-8,1,-1.00676e-7,-8.3912e-9,1,-3.7468e-8,-5.278e-9,1,-3.58578e-8,-7.35144e-9,1,-3.38062e-8,2.1456e-8,1,-6.65809e-8,1.27888e-9,1,-4.59611e-8,-6.09599e-9,1,-2.72023e-8,-4.33891e-8,1,8.12201e-9,-4.94795e-9,1,-3.03848e-8,7.56842e-9,1,-5.76339e-8,-0.219106,0,0.975701,0.313685,0,-0.949527,0.653173,0,-0.757209,0.534999,0,-0.844853,-0.575815,0,0.81758,0.492901,0,-0.870085,-0.359896,0,0.932992,-0.707105,0,0.707109,0.266712,0,-0.963776,-0.0735681,0,0.99729,0.60883,0,-0.793301,-0.615233,0,0.788346,0.535,0,-0.844852,0.707107,0,0.707107,0.707107,0,0.707107,0.707103,-0.00000810377,0.707111,0.707107,0,0.707107,0.707104,0.000010376,0.707109,0.219103,0,-0.975702,-0.492897,0,0.870088,0.707108,0,-0.707105,-0.653171,0,0.75721,0.57581,0,-0.817583,-0.449618,0,0.893221,-0.534998,0,0.844853,-0.405246,0,0.914208,-0.813734,0,0.581237,0.17096,0,-0.985278,-0.615233,0,0.788345,-0.538831,0,0.842414,0.707105,0,0.707109,0.615234,0,-0.788345,0.449612,0,-0.893224,0.122419,0,-0.992478,0.57581,0,-0.817583,-0.428549,0,0.903519,-0.707107,0,0.707107,0.707097,0,0.707117,0.707097,0,0.707117,0.707107,0,0.707107,0.707107,0.0000431407,0.707107,0.707104,0.00000518324,0.707109,0.581237,0,-0.813734,0.653174,0,-0.757208,0.0735576,0,-0.997291,-0.707107,0,0.707107,4.69876e-8,1,-9.19386e-8,-7.83368e-9,1,-4.99678e-8,1.02592e-7,1,-1.60394e-7,-1.7477e-7,1,1.66592e-7,-1.9566e-8,1,-1.30725e-8,9.7407e-8,1,-2.19673e-7,7.54165e-8,1,-2.28188e-7,-1.12587e-8,1,-3.41622e-9,-4.28585e-9,1,-8.85471e-8,2.81952e-9,1,-3.82269e-8,3.80583e-9,1,-3.08546e-8,-1.69183e-9,1,-3.49538e-8,-1.59726e-8,1,-7.55584e-9,1.44225e-8,1,-6.39394e-8,-8.10067e-9,1,-4.39847e-8,1.25962e-9,1,-3.70086e-8,4.13339e-9,1,-5.00662e-8,-1.09389e-9,1,-3.90488e-8,6.1983e-10,1,-7.51454e-8,1.41558e-9,1,-4.15911e-8,3.07592e-9,1,-4.68686e-8,4.78212e-10,1,-5.79762e-8,1.17135e-9,1,-5.01106e-8,5.15133e-9,1,-5.17645e-8,-5.75934e-9,1,-3.66481e-8,2.4984e-9,1,-4.65708e-8,4.56428e-9,1,-4.58316e-8,-1.24852e-8,1,-2.76106e-8,7.74926e-9,1,-4.76759e-8,-1.51824e-8,1,-2.42682e-8,0.455086,0,-0.890447,0.707107,0,-0.707107,-0.0251875,0,0.999683,0.624133,0,-0.781318,-0.219107,0,0.975701,0.61523,0,-0.788347,-1,0,0,-0.653171,0,0.75721,-0.449615,0,0.893222,2.57839e-8,-1,5.81682e-8,4.96998e-7,-1,-9.87363e-7,4.50757e-7,-1,-7.11821e-7,5.18391e-7,-1,-6.64259e-7,-3.06014e-7,-1,3.83082e-7,-1.51173e-7,-1,2.38543e-7,3.33813e-8,-1,-1.54745e-8,-2.00631e-7,-1,3.98581e-7,0.00000254345,-1,-0.00000440541,-7.17045e-8,-1,1.36713e-7,3.85342e-8,-1,3.85342e-8,-6.42024e-7,-1,8.07983e-7,1.68993e-7,-1,-1.45929e-7,-1.52668e-7,-1,3.28734e-7,0,-1,0,4.27103e-7,-1,-4.71747e-7,3.46047e-8,-1,2.31223e-8,-3.14053e-7,-1,4.02422e-7,-0.405239,0,0.914211,-7.95598e-8,-1,1.67738e-7,0,-1,0,3.78383e-8,-1,3.10694e-8,5.74369e-7,-1,-8.15537e-7,-3.58945e-7,-1,9.30525e-7,3.12875e-7,-1,-9.47077e-7,-4.87232e-8,-1,2.44948e-7,1.17737e-7,-1,-2.20269e-7,-1.19068e-7,-1,2.22259e-7,0,-1,0,4.92206e-8,-1,1.28542e-8,1.18612e-7,-1,-9.8213e-8,0.00000446989,-1,-0.00000564745,0,-1,0,-2.68668e-7,-1,3.81478e-7,-1.7007e-7,-1,2.68569e-7,4.9167e-8,-1,-1.45851e-7,0.00000155497,-1,-0.00000692438,-1.14372e-7,-1,3.01952e-7,-7.81867e-8,-1,4.67444e-7,-1.76073e-7,-1,4.00934e-7,2.36105e-7,-1,-4.10939e-7,-0.359901,0,0.932991,-7.19818e-9,-1,2.56976e-8,-7.14916e-9,-1,2.58338e-8,4.32819e-7,-1,-7.64034e-7,5.05562e-7,-1,-7.17835e-7,3.33141e-8,-1,2.73391e-8,-9.37852e-8,-1,1.31213e-7,-9.3393e-8,-1,1.3075e-7,4.49202e-8,-1,3.21486e-8,-3.53091e-8,-1,6.83764e-9,-1.04813e-7,-1,1.95648e-7,-7.23403e-8,-1,1.81049e-7,-8.08297e-9,-1,2.44672e-8,3.19091e-8,-1,4.8005e-8,-3.46256e-8,-1,1.01011e-7,3.35664e-9,-1,3.8135e-8,-2.11057e-8,-1,4.76141e-8,-2.46413e-8,-1,4.89534e-8,1.02104e-8,-1,3.07711e-8,2.38825e-7,-1,-2.04835e-7,5.49657e-8,-1,-1.57625e-9,-5.4793e-8,-1,8.65273e-8,-1.39508e-7,-1,1.78763e-7,8.84884e-8,-1,-4.39345e-8,-0.313683,0,0.949528,0.405244,0,-0.914209,-0.266711,0,0.963777,0.405249,0,-0.914206,0.44961,0,-0.893225,-3.44216e-7,-1,4.48511e-7,-1.80014e-9,-1,4.03341e-8,-1.49076e-7,-1,1.87611e-7,2.41287e-8,-1,1.98022e-8,1.73018e-8,-1,1.15619e-8,-1.81461e-7,-1,3.83631e-7,1.28913e-8,-1,2.90855e-8,-2.63384e-9,-1,5.30879e-8,-9.95212e-9,-1,4.90298e-8,2.52918e-8,-1,-3.17331e-9,-4.22429e-8,-1,1.00676e-7,-1.44516e-9,-1,3.23803e-8,5.278e-9,-1,3.58578e-8,7.35144e-9,-1,3.38062e-8,3.37602e-9,-1,4.12041e-8,-1.27888e-9,-1,4.59611e-8,6.09599e-9,-1,2.72023e-8,-1.12612e-8,-1,5.80476e-8,-8.88417e-9,-1,6.87298e-8,6.62278e-9,-1,3.49699e-8,-0.219106,0,0.975701,0.313685,0,-0.949527,0.266712,0,-0.963776,0.608829,0,-0.793301,0.535,0,-0.844852,0.707103,-0.0000162075,0.707111,0.707104,0.0000048828,0.707109,-0.405246,0,0.914208,-0.813734,0,0.581237,0.707097,0,0.707117,0.707104,-0.0000329288,0.707109,0.653174,0,-0.757208,-2.81952e-9,-1,3.82269e-8,4.28585e-9,-1,8.85471e-8,1.12587e-8,-1,3.41622e-9,-7.54165e-8,-1,2.28188e-7,-9.7407e-8,-1,2.19673e-7,1.9566e-8,-1,1.30725e-8,-1.29303e-7,-1,2.03922e-7,-6.83947e-8,-1,1.06929e-7,-1.79989e-9,-1,4.03342e-8,-4.69876e-8,-1,9.19386e-8,-1.67369e-9,-1,3.7506e-8,6.8097e-8,-1,-3.66111e-8,-1.31363e-8,-1,6.20145e-8,-6.33088e-9,-1,6.14009e-8,4.49738e-9,-1,9.29175e-8,-2.2419e-9,-1,1.81755e-8,3.20432e-9,-1,3.4752e-8,-5.9983e-9,-1,4.93923e-8,-7.84102e-9,-1,4.98245e-8,3.746e-9,-1,4.99842e-8,-6.52978e-9,-1,2.90782e-8,3.75284e-9,-1,5.84232e-8,1.33386e-9,-1,2.07651e-8,3.9244e-9,-1,3.16969e-8,1.94558e-9,-1,3.31188e-8,-5.42072e-9,-1,5.2988e-8,1.53113e-7,-1,-2.2063e-7,2.40785e-8,-1,5.57747e-9,4.45273e-8,-1,-3.40305e-8,-1.64838e-8,-1,6.73803e-8,0.455086,0,-0.890447,0.707107,0,-0.707107,-1,0,0,-0.653171,0,0.75721]},\"curve_4\":{\"uvs\":[],\"normals\":[0.788345,0,0.615233,0.757206,0,0.653176,0.724245,0,0.689543,0.689538,0,0.72425,0.653171,0,0.75721,0.615228,0,0.788349,0.575806,0,0.817586,0.534995,0,0.844855,0.492896,0,0.870088,0.449608,0,0.893226,0.405239,0,0.914211,0.359892,0,0.932994,-0.99729,0,-0.0735675,0.313679,0,0.949529,-0.992479,0,-0.122412,0.266711,0,0.963777,-0.985277,0,-0.170963,0.2191,0,0.975702,-0.975701,0,-0.219105,0.170958,0,0.985278,-0.963776,0,-0.266713,0.122409,0,0.99248,-0.949527,0,-0.313684,0.0735638,0,0.99729,-0.932992,0,-0.359897,0.111157,0,0.993803,-0.914208,0,-0.405244,-0.893223,0,-0.449614,-0.870086,0,-0.4929,-0.844851,0,-0.535001,-0.817583,0,-0.575811,-0.788345,0,-0.615233,-0.757206,0,-0.653176,-0.724245,0,-0.689543,-0.689538,0,-0.72425,-0.653171,0,-0.75721,-0.615228,0,-0.788349,-0.575806,0,-0.817586,-0.534995,0,-0.844855,-0.492896,0,-0.870088,-0.449608,0,-0.893226,-0.405239,0,-0.914211,-0.359892,-5.5475e-8,-0.932994,-0.313679,-5.5475e-8,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.170958,0,-0.985278,-0.122409,0,-0.99248,-0.0735639,0,-0.99729,0,0,-1,0,1,-4.469e-8,-3.28856e-9,1,-4.45824e-8,6.9156e-10,1,-3.76205e-8,-1.15513e-9,1,-3.76091e-8,5.31244e-10,1,-4.5936e-8,-1.72335e-9,1,-4.59067e-8,4.73135e-9,1,-4.47193e-8,-2.40549e-9,1,-4.29933e-8,3.25331e-10,1,-4.49678e-8,-1.88151e-9,1,-4.49296e-8,5.20149e-10,1,-4.73912e-8,-2.04807e-9,1,-4.27969e-8,1.80646e-10,1,-4.56917e-8,-2.06146e-9,1,-4.56456e-8,1.37862e-10,1,-4.43967e-8,-1.38815e-9,1,-3.98276e-8,3.07886e-10,1,-4.35438e-8,2.71982e-9,1,-4.30765e-8,6.02834e-10,1,-4.3158e-8,-3.03781e-9,1,-4.74438e-8,-3.6303e-9,1,-4.30093e-8,3.35452e-9,1,-4.3711e-8,1.20565e-9,1,-4.38229e-8,-9.46043e-10,1,-4.38293e-8,1.33234e-9,1,-4.48578e-8,1.83697e-9,1,-4.11884e-8,4.10971e-9,1,-4.27852e-8,2.00539e-9,1,-4.29353e-8,-1.03772e-10,1,-4.2982e-8,1.8085e-9,1,-4.50949e-8,3.11418e-9,1,-4.22168e-8,1.06248e-9,1,-4.32779e-8,-0.914208,0,-0.405246,-0.893223,0,-0.449613,-0.870085,0,-0.492901,-0.844852,0,-0.535,-0.817582,0,-0.575811,-0.788345,0,-0.615233,-0.757207,0,-0.653175,-0.724245,0,-0.689543,-0.689538,0,-0.72425,-0.653171,0,-0.757211,-0.615228,0,-0.788349,-0.575807,0,-0.817586,-0.534994,0,-0.844856,-0.492897,0,-0.870088,-0.449608,0,-0.893226,-0.405238,0,-0.914211,-0.359892,0,-0.932994,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.170958,0,-0.985278,-0.122409,0,-0.99248,-0.0735638,0,-0.99729,0.999685,0,0.0251075,0.99729,0,0.0735672,0.992479,0,0.122414,0.985278,0,0.170963,0.975701,0,0.219105,0.963776,0,0.266712,0.949527,0,0.313686,0.932992,0,0.359896,0.914208,0,0.405245,0.893223,0,0.449613,0.870085,0,0.492901,0.844852,0,0.535,2.69243e-9,1,-4.50235e-8,-2.04004e-9,1,-4.10371e-8,1.85785e-9,1,-4.19129e-8,-2.01031e-10,1,-4.19535e-8,-2.25938e-9,1,-4.18931e-8,1.38233e-9,1,-4.3613e-8,3.3791e-9,1,-4.12318e-8,1.35188e-9,1,-4.13479e-8,-6.78551e-10,1,-4.13645e-8,2.51064e-9,1,-4.42373e-8,-4.72973e-9,1,-4.10988e-8,2.75919e-9,1,-4.29512e-8,6.48478e-10,1,-4.3035e-8,-1.62664e-9,1,-4.77944e-8,-3.57283e-9,1,-4.28913e-8,3.22787e-9,1,-4.66107e-8,-2.98037e-9,1,-4.21718e-8,-1.35642e-9,1,-4.67026e-8,-3.64637e-9,1,-4.65797e-8,-1.176e-9,1,-4.6885e-8,-1.71173e-9,1,-4.23257e-8,8.8915e-10,1,-4.31941e-8,-1.23132e-9,1,-4.31858e-8,-3.34887e-9,1,-4.30733e-8,-9.80458e-10,1,-4.45359e-8,1.2255e-9,1,-4.63304e-8,1.92847e-9,1,-4.25927e-8,-1.63791e-10,1,-4.26361e-8,1.80871e-9,1,-4.50966e-8,3.08837e-9,1,-4.18669e-8,1.05686e-9,1,-4.3049e-8,0.999683,0,0.0251866,0.99729,0,0.0735664,0.992479,0,0.122415,0.985277,0,0.170963,0.975701,0,0.219105,0.963777,0,0.266711,0.949526,0,0.313687,0.932993,0,0.359894,0.914207,0,0.405247,0.893224,0,0.449613,0.870085,0,0.492902,0.844853,0,0.534999,0.817582,0,0.575812,0.788346,0,0.615232,0.757206,0,0.653176,0.724245,0,0.689543,0.689537,0,0.72425,0.653171,0,0.757211,0.615228,0,0.78835,0.575807,0,0.817586,0.534994,0,0.844856,0.492897,0,0.870088,0.449608,0,0.893226,0.405238,0,0.914211,0.359892,0,0.932994,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,0.0735639,0,0.99729,0.307795,0,0.951453,-0.985277,0,-0.170963,0.492896,0,0.870088,-0.992479,0,-0.122414,0.534995,0,0.844855,-0.99729,0,-0.0735666,0.575806,0,0.817586,-0.999683,0,-0.0251908,0.615228,0,0.788349,0.689538,0,0.72425,0.724245,0,0.689543,0.757206,0,0.653176,0.817583,0,0.575811,0.844852,0,0.535001,0.870086,0,0.4929,0.893223,0,0.449614,0.914208,0,0.405244,0.932992,0,0.359897,0.949527,0,0.313684,0.963776,0,0.266714,0.975702,0,0.219104,0.985277,0,0.170963,0.992479,0,0.122413,0.99729,0,0.0735674,0.999685,-5.70441e-7,0.0250852,-7.81473e-8,1,-5.49694e-8,-0.999685,0,-0.0250881,-0.073564,0,-0.99729,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.2191,0,-0.975702,-0.266711,0,-0.963776,-0.313679,0,-0.949529,-0.359892,0,-0.932994,-0.405238,0,-0.914211,-0.449609,0,-0.893226,-0.492897,0,-0.870088,-0.534994,0,-0.844856,-0.575807,0,-0.817586,-0.615228,0,-0.788349,-0.653171,0,-0.757211,-0.689537,0,-0.72425,-0.724245,0,-0.689543,-0.757206,0,-0.653175,-0.788345,0,-0.615233,0.111157,0,0.993803,-0.817582,0,-0.575812,-0.844853,0,-0.534999,0.122409,0,0.99248,-0.870085,0,-0.492902,0.170958,0,0.985278,-0.893223,0,-0.449613,0.2191,0,0.975702,-0.914208,0,-0.405246,0.266711,0,0.963777,-0.932993,0,-0.359894,0.313679,0,0.949529,-0.949526,0,-0.313688,-0.963777,0,-0.26671,0.405239,0,0.914211,-0.975701,0,-0.219105,0.449608,0,0.893226,0,1,0,0,1,0,1.12414e-9,1,-1.60289e-7,-6.74186e-9,1,-1.60151e-7,3.93798e-8,1,-1.30092e-8,1.89575e-8,1,-8.40326e-9,1.85224e-8,1,-9.32333e-9,1.80426e-8,1,-1.0221e-8,1.75193e-8,1,-1.10939e-8,1.69539e-8,1,-1.19402e-8,-2.43725e-8,1,-8.17889e-8,-2.83565e-8,1,-8.04943e-8,1.50184e-8,1,-1.42986e-8,2.85974e-8,1,-3.00365e-8,1.35445e-8,1,-1.57018e-8,2.55155e-8,1,-3.26949e-8,2.38805e-8,1,-3.39075e-8,-5.05019e-8,1,-6.87968e-8,-5.38168e-8,1,-6.62359e-8,1.86469e-8,1,-3.70444e-8,1.68067e-8,1,-3.79148e-8,1.49261e-8,1,-3.86937e-8,1.30094e-8,1,-3.93795e-8,1.10614e-8,1,-3.99705e-8,9.08672e-9,1,-4.04651e-8,7.09039e-9,1,-4.08622e-8,5.07695e-9,1,-4.11609e-8,-7.54438e-8,1,-5.75472e-8,0.817583,0,0.575811,0.844852,0,0.535001,0.914208,0,0.405244,0.963776,0,0.266714,0.985278,0,0.170963,0.99729,0,0.0735674,0.999685,0,0.0250853,-8.87912e-9,1,-1.0507e-7,-3.69242e-9,1,-5.00574e-8,-6.14413e-9,1,-4.98159e-8,1.57223e-8,1,-4.09356e-8,4.09801e-9,1,-3.30723e-8,-1.00404e-8,1,-3.62814e-8,9.54559e-9,1,-4.27994e-8,-5.31508e-9,1,-4.50232e-8,-7.51785e-9,1,-4.47082e-8,3.16235e-9,1,-4.37368e-8,1.01241e-9,1,-4.38393e-8,-1.13985e-9,1,-4.38362e-8,-3.28948e-9,1,-4.37274e-8,7.29368e-9,1,-4.54851e-8,5.05299e-9,1,-4.57882e-8,-9.66993e-9,1,-4.27715e-8,5.40598e-10,1,-4.6063e-8,-1.72029e-9,1,-4.6034e-8,-3.97707e-9,1,-4.5894e-8,5.38018e-9,1,-5.12242e-8,-9.17138e-9,1,-3.24266e-8,3.33475e-10,1,-5.1505e-8,-1.64568e-9,1,-3.85944e-8,6.75526e-9,1,-4.62044e-8,4.47998e-9,1,-4.64803e-8,2.1939e-9,1,-4.66442e-8,2.95032e-9,1,-3.4185e-8,9.8548e-9,1,-4.38851e-8,7.68961e-9,1,-4.43158e-8,5.50589e-9,1,-4.46396e-8,3.30889e-9,1,-4.48563e-8,0,1,-4.82513e-8,2.16341e-9,1,-4.40363e-8,9.20485e-14,1,-4.82513e-8,-0.932993,0,-0.359895,-0.949527,0,-0.313686,-0.963776,0,-0.266712,-0.975701,0,-0.219104,-0.985278,0,-0.170962,-0.992479,0,-0.122415,-0.99729,0,-0.0735668,-0.999683,0,-0.0251615,0.130446,0,0.991455,0.073564,0,0.99729,0.122409,0,0.99248,0.170958,0,0.985278,0.2191,2.87219e-8,0.975702,0.266711,8.61655e-8,0.963776,0.313679,5.74437e-8,0.949529,0.359892,5.74437e-8,0.932994,0.405239,0,0.914211,0.492896,0,0.870088,0.534995,0,0.844855,0.575807,0,0.817586,0.615228,0,0.788349,0.653171,0,0.757211,0.689538,0,0.72425,0.724245,0,0.689543,0.757206,0,0.653176,0.788346,0,0.615233,0.817583,0,0.575811,-1.16927e-8,1,-1.58515e-7,2.46206e-9,1,-8.03787e-8,-5.42823e-9,1,-8.0233e-8,-9.35859e-9,1,-7.987e-8,-1.32662e-8,1,-7.93146e-8,-1.7142e-8,1,-7.85681e-8,2.24579e-8,1,-9.9548e-9,2.19425e-8,1,-1.10448e-8,-2.84849e-8,1,-7.52024e-8,-6.42809e-8,1,-1.47429e-7,-7.14378e-8,1,-1.44097e-7,-7.84217e-8,1,-1.40418e-7,-2.40076e-8,1,-8.42457e-8,1.77914e-8,1,-1.69388e-8,1.69389e-8,1,-1.77913e-8,3.20908e-8,1,-3.7202e-8,1.51134e-8,1,-1.93659e-8,-4.37583e-8,1,-7.58875e-8,-4.74294e-8,1,-7.36489e-8,-5.09859e-8,1,-7.12332e-8,-5.442e-8,1,-6.86454e-8,1.99098e-8,1,-4.49154e-8,8.84103e-9,1,-2.29192e-8,1.54116e-8,1,-4.66508e-8,1.31038e-8,1,-4.73508e-8,1.07645e-8,1,-4.79366e-8,4.19978e-9,1,-2.42035e-8,6.01434e-9,1,-4.87607e-8,3.61444e-9,1,-4.89976e-8,1.23755e-9,1,-5.04123e-8,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.359892,0,-0.932994,-0.449609,0,-0.893226,-0.492897,0,-0.870088,-0.534994,0,-0.844856,-0.575807,0,-0.817586,-0.653171,0,-0.757211,-0.689537,0,-0.72425,-0.724245,0,-0.689543,-0.757207,0,-0.653176,-0.817582,0,-0.575812,-0.844853,0,-0.534999,-0.870085,0,-0.492902,-0.949526,0,-0.313688,-0.975701,0,-0.219105,-0.992479,0,-0.122414,-0.99729,0,-0.0735665,-0.999683,0,-0.0251908,-0.335866,0,-0.94191,1.41633e-7,1,-8.29734e-8,0,0,1,-3.35118e-8,1,-1.52488e-7,1.81322e-7,1,-4.47033e-8,3.51029e-8,1,-5.19632e-8,-0.335866,0,-0.94191,-1.15856e-8,1,-4.44326e-8,-0.214645,0,-0.976692,-5.45142e-9,1,-4.45831e-8,-0.113723,0,-0.993513,0.164399,0,-0.986394,-1,0,-8.34465e-7,0.164399,0,0.986394,-1,0,-0.00000299154,-1,0,-0.00000224443,-1,0,-0.00000299154,-1,0,-0.00000224443,-1,0.0000025017,-0.00000216002,-1,0,-0.00000237009,-1,0.00000157221,-0.00000224443,0,0,0,-1,0,-0.00000197629,-1,0,-0.00000471824,-1,0,-0.00000197629,-1,0,-0.00000471824,-1,-2.98027e-8,-0.00000199615,-1,-0.00000620944,-0.00000264645,4.33093e-14,1,-2.6491e-8,0.986394,0,0.164401,-0.986394,0,0.164401,0.00000196887,0,-1,0,0,-1,0.00000121959,0,-1,0,0,-1,0,-0.0000152588,-1,0.00000190677,0.0000057367,-1,-0.00000117375,0.0000457764,-1,0.00000436321,0,-1,0,0.0000305176,-1,0.00000436321,0,-1,0.00000190677,0.00000859052,-1,0.492896,0,0.870088,-0.975701,0,-0.219105,-0.949527,0,-0.313684,-0.932992,0,-0.359897,-0.914208,0,-0.405244,-0.575806,0,-0.817586,-0.449608,0,-0.893226,-0.405239,-1.1095e-7,-0.914211,-0.313679,0,-0.949529,-0.170958,0,-0.985278,-0.122409,0,-0.99248,0,0,-1,0,-1,4.469e-8,-1.98856e-9,-1,4.49716e-8,2.20459e-10,-1,4.5015e-8,2.42887e-9,-1,4.495e-8,-5.31244e-10,-1,4.5936e-8,-1.82011e-9,-1,4.3022e-8,1.63669e-9,-1,3.86923e-8,-2.53141e-9,-1,4.48976e-8,5.83791e-10,-1,4.04899e-8,-5.50648e-9,-1,3.61365e-8,-3.72668e-9,-1,3.63632e-8,-1.93795e-9,-1,3.65023e-8,-1.80646e-10,-1,4.56917e-8,2.06146e-9,-1,4.56456e-8,-4.57449e-9,-1,4.3304e-8,-2.44418e-9,-1,4.34763e-8,-3.07886e-10,-1,4.35438e-8,1.82911e-9,-1,4.35064e-8,3.96172e-9,-1,4.33642e-8,-3.05365e-9,-1,4.31537e-8,-9.32473e-10,-1,4.32515e-8,1.19088e-9,-1,4.32452e-8,-5.72271e-9,-1,4.45112e-8,5.4239e-9,-1,4.29202e-8,7.52337e-9,-1,4.26023e-8,8.70376e-10,-1,4.48692e-8,3.07098e-9,-1,4.47724e-8,5.26415e-9,-1,4.45677e-8,-8.00867e-10,-1,4.81955e-8,-5.1819e-9,-1,4.2013e-8,-3.11418e-9,-1,4.22168e-8,-1.06248e-9,-1,4.32779e-8,3.28856e-9,-1,4.45824e-8,5.4721e-9,-1,4.43673e-8,-4.17545e-9,-1,4.60959e-8,-1.90852e-9,-1,4.62453e-8,3.6297e-10,-1,4.62832e-8,2.63348e-9,-1,4.62097e-8,4.89768e-9,-1,4.60248e-8,-1.35188e-9,-1,4.13479e-8,6.78551e-10,-1,4.13645e-8,1.16173e-9,-1,5.072e-8,3.64896e-9,-1,5.06019e-8,6.12757e-9,-1,5.03619e-8,-7.20531e-10,-1,4.78167e-8,1.30131e-9,-1,3.82355e-8,-5.51114e-9,-1,4.63962e-8,5.04281e-9,-1,3.79238e-8,-9.36852e-10,-1,4.67129e-8,1.35642e-9,-1,4.67026e-8,3.64637e-9,-1,4.65797e-8,5.92757e-9,-1,4.63447e-8,-1.2443e-9,-1,4.75438e-8,-2.86846e-9,-1,3.88407e-8,-9.59208e-10,-1,3.89348e-8,-3.36437e-9,-1,5.01256e-8,2.86168e-9,-1,3.88414e-8,1.56507e-9,-1,5.0214e-8,6.65507e-9,-1,3.83737e-8,6.47938e-9,-1,4.98187e-8,2.25563e-9,-1,4.25766e-8,4.34203e-9,-1,4.2415e-8,6.39136e-9,-1,4.32366e-8,0.999685,5.70441e-7,0.0250852,-1.04038e-9,-1,4.23806e-8,0,-1,0,0,-1,0,3.37093e-9,-1,8.00754e-8,7.29617e-9,-1,7.98135e-8,1.12036e-8,-1,7.93594e-8,1.5084e-8,-1,7.87141e-8,-1.9347e-8,-1,7.46294e-9,-3.70447e-8,-1,1.86467e-8,-3.50386e-8,-1,2.21879e-8,7.4568e-8,-1,1.41892e-7,8.14402e-8,-1,1.38062e-7,-3.14038e-8,-1,2.7089e-8,-3.00368e-8,-1,2.85973e-8,-2.7089e-8,-1,3.14035e-8,-2.55155e-8,-1,3.26949e-8,-2.38805e-8,-1,3.39075e-8,-2.2188e-8,-1,3.50383e-8,-2.04421e-8,-1,3.60849e-8,-1.86469e-8,-1,3.70444e-8,-1.68067e-8,-1,3.79148e-8,-1.49261e-8,-1,3.86937e-8,-1.30094e-8,-1,3.93795e-8,-1.10614e-8,-1,3.99705e-8,-9.08672e-9,-1,4.04651e-8,-7.09039e-9,-1,4.08622e-8,-5.07695e-9,-1,4.11609e-8,-3.05106e-9,-1,4.13604e-8,0.893223,0,0.449614,0.932992,0,0.359897,0.949527,0,0.313684,0.975702,0,0.219104,3.69242e-9,-1,5.00574e-8,-5.78385e-9,-1,4.49654e-8,6.43573e-9,-1,3.70908e-8,8.24803e-9,-1,3.67304e-8,-2.0798e-8,-1,5.13254e-8,1.57446e-8,-1,4.76601e-8,-7.43406e-9,-1,4.32163e-8,-5.30458e-9,-1,4.3529e-8,-3.16235e-9,-1,4.37368e-8,-1.01241e-9,-1,4.38393e-8,1.13985e-9,-1,4.38362e-8,3.28948e-9,-1,4.37274e-8,5.431e-9,-1,4.35134e-8,7.55962e-9,-1,4.31945e-8,9.66993e-9,-1,4.27715e-8,-1.28382e-8,-1,4.98804e-8,-1.03752e-8,-1,5.04502e-8,1.58413e-8,-1,4.08896e-8,1.78285e-8,-1,4.00631e-8,-2.86023e-9,-1,5.14264e-8,-3.33475e-10,-1,5.1505e-8,2.19424e-9,-1,5.14591e-8,4.71654e-9,-1,5.12896e-8,3.61377e-9,-1,2.54982e-8,-1.41089e-8,-1,4.27079e-8,-1.19963e-8,-1,4.33488e-8,-9.8548e-9,-1,4.38851e-8,-7.68961e-9,-1,4.43158e-8,-5.50589e-9,-1,4.46396e-8,-3.30889e-9,-1,4.48563e-8,0,-1,4.82513e-8,-2.16341e-9,-1,4.40363e-8,-9.20485e-14,-1,4.82513e-8,0.122409,0,0.99248,0.2191,5.74437e-8,0.975702,0.266711,8.61655e-8,0.963777,0.359892,5.74437e-8,0.932994,0.405239,0,0.914211,0.449608,0,0.893226,0.492896,0,0.870088,1.87172e-8,-1,1.5974e-7,2.65325e-8,-1,1.58629e-7,-4.38849e-8,-1,2.20896e-8,-4.15083e-8,-1,2.62847e-8,-3.87321e-8,-1,3.02266e-8,-3.55828e-8,-1,3.38776e-8,-3.38777e-8,-1,3.55826e-8,-3.02268e-8,-1,3.87318e-8,-2.82898e-8,-1,4.01681e-8,1.21144e-7,-1,1.0579e-7,1.26188e-7,-1,9.97187e-8,-2.20897e-8,-1,4.38844e-8,-1.99098e-8,-1,4.49154e-8,-1.76821e-8,-1,4.58383e-8,-1.54116e-8,-1,4.66508e-8,-1.07645e-8,-1,4.79366e-8,-8.39957e-9,-1,4.8407e-8,-6.01434e-9,-1,4.87607e-8,-3.61444e-9,-1,4.89976e-8,-1.23755e-9,-1,5.04123e-8,-0.266711,0,-0.963776,-0.575807,0,-0.817586,-0.844853,0,-0.534999,2.14232e-8,-1,1.62827e-7,1.0122e-7,-1,4.47036e-8,9.12048e-8,-1,4.57583e-8,-1.15059e-7,-1,4.75413e-8,5.45142e-9,-1,4.45831e-8,-0.113723,0,-0.993512,-8.92414e-9,-1,1.05602e-7,-1,0,-0.00000224443,-1,-0.00000157222,-0.00000224443,-1,-0.0000025017,-0.00000216002,-1,0.00000815845,-0.00000199615,-1,0.00000100553,-0.00000264645,-8.66186e-14,-1,5.2982e-8,0,0,-1,0.00000190677,-0.0000057367,-1,0.00000121959,0.00000182994,-1,-0.00000117375,-0.0000457764,-1,0,-0.0000305176,-1,0.00000190677,-0.00000859052,-1],\"faces\":[33,21,22,250,249,0,0,0,0,33,20,21,249,248,1,1,1,1,33,19,20,248,247,2,2,2,2,33,18,19,247,246,3,3,3,3,33,17,18,246,245,4,4,4,4,33,16,17,245,244,5,5,5,5,33,15,16,244,243,6,6,6,6,33,14,15,243,242,7,7,7,7,33,13,14,242,241,8,8,8,8,33,12,13,241,240,9,9,9,9,33,11,12,240,239,10,10,10,10,33,10,11,239,238,11,11,11,11,33,230,0,2,99,12,12,12,12,33,9,10,238,237,13,13,13,13,33,99,98,229,230,14,14,14,14,33,8,9,237,236,15,15,15,15,33,98,97,228,229,16,16,16,16,33,7,8,236,235,17,17,17,17,33,97,96,227,228,18,18,18,18,33,6,7,235,234,19,19,19,19,33,96,95,226,227,20,20,20,20,33,5,6,234,233,21,21,21,21,33,95,94,225,226,22,22,22,22,33,4,5,233,232,23,23,23,23,33,94,93,224,225,24,24,24,24,33,397,4,232,403,25,25,25,25,33,93,92,223,224,26,26,26,26,33,92,91,222,223,27,27,27,27,33,91,90,221,222,28,28,28,28,33,90,89,220,221,29,29,29,29,33,89,88,219,220,30,30,30,30,33,88,87,218,219,31,31,31,31,33,87,86,217,218,32,32,32,32,33,86,85,216,217,33,33,33,33,33,85,84,215,216,34,34,34,34,33,84,83,214,215,35,35,35,35,33,83,82,213,214,36,36,36,36,33,82,81,212,213,37,37,37,37,33,81,80,211,212,38,38,38,38,33,80,79,210,211,39,39,39,39,33,79,78,209,210,40,40,40,40,33,78,77,208,209,41,41,41,41,33,77,76,207,208,42,42,42,42,33,76,75,206,207,43,43,43,43,33,75,74,205,206,44,44,44,44,33,74,73,204,205,45,45,45,45,33,73,72,203,204,46,46,46,46,33,72,71,202,203,47,47,47,47,33,71,70,201,202,48,48,48,48,33,396,69,200,402,49,49,49,49,33,398,101,69,396,50,50,50,50,33,103,102,70,71,51,51,51,51,33,104,103,71,72,52,52,52,52,33,105,104,72,73,53,53,53,53,33,106,105,73,74,54,54,54,54,33,107,106,74,75,55,55,55,55,33,108,107,75,76,56,56,56,56,33,109,108,76,77,57,57,57,57,33,110,109,77,78,58,58,58,58,33,111,110,78,79,59,59,59,59,33,112,111,79,80,60,60,60,60,33,113,112,80,81,61,61,61,61,33,114,113,81,82,62,62,62,62,33,115,114,82,83,63,63,63,63,33,116,115,83,84,64,64,64,64,33,117,116,84,85,65,65,65,65,33,118,117,85,86,66,66,66,66,33,119,118,86,87,67,67,67,67,33,120,119,87,88,68,68,68,68,33,121,120,88,89,69,69,69,69,33,122,121,89,90,70,70,70,70,33,123,122,90,91,71,71,71,71,33,124,123,91,92,72,72,72,72,33,125,124,92,93,73,73,73,73,33,126,125,93,94,74,74,74,74,33,127,126,94,95,75,75,75,75,33,128,127,95,96,76,76,76,76,33,129,128,96,97,77,77,77,77,33,130,129,97,98,78,78,78,78,33,131,130,98,99,79,79,79,79,33,132,131,99,2,80,80,80,80,33,133,132,2,100,81,81,81,81,33,158,157,320,321,82,82,82,82,33,157,156,319,320,83,83,83,83,33,156,155,318,319,84,84,84,84,33,155,154,317,318,85,85,85,85,33,154,153,316,317,86,86,86,86,33,153,152,315,316,87,87,87,87,33,152,151,314,315,88,88,88,88,33,151,150,313,314,89,89,89,89,33,150,149,312,313,90,90,90,90,33,149,148,311,312,91,91,91,91,33,148,147,310,311,92,92,92,92,33,147,146,309,310,93,93,93,93,33,146,145,308,309,94,94,94,94,33,145,144,307,308,95,95,95,95,33,144,143,306,307,96,96,96,96,33,143,142,305,306,97,97,97,97,33,142,141,304,305,98,98,98,98,33,141,140,303,304,99,99,99,99,33,140,139,302,303,100,100,100,100,33,139,138,301,302,101,101,101,101,33,138,137,300,301,102,102,102,102,33,137,136,299,300,103,103,103,103,33,136,135,298,299,104,104,104,104,33,399,134,297,405,49,49,49,49,33,132,133,296,295,105,105,105,105,33,131,132,295,294,106,106,106,106,33,130,131,294,293,107,107,107,107,33,129,130,293,292,108,108,108,108,33,128,129,292,291,109,109,109,109,33,127,128,291,290,110,110,110,110,33,126,127,290,289,111,111,111,111,33,125,126,289,288,112,112,112,112,33,124,125,288,287,113,113,113,113,33,123,124,287,286,114,114,114,114,33,122,123,286,285,115,115,115,115,33,121,122,285,284,116,116,116,116,33,400,167,134,399,50,50,50,50,33,169,168,135,136,117,117,117,117,33,170,169,136,137,118,118,118,118,33,171,170,137,138,119,119,119,119,33,172,171,138,139,120,120,120,120,33,173,172,139,140,121,121,121,121,33,174,173,140,141,122,122,122,122,33,175,174,141,142,123,123,123,123,33,176,175,142,143,124,124,124,124,33,177,176,143,144,125,125,125,125,33,178,177,144,145,126,126,126,126,33,179,178,145,146,127,127,127,127,33,180,179,146,147,128,128,128,128,33,181,180,147,148,129,129,129,129,33,182,181,148,149,130,130,130,130,33,183,182,149,150,131,131,131,131,33,184,183,150,151,132,132,132,132,33,185,184,151,152,133,133,133,133,33,186,185,152,153,134,134,134,134,33,187,186,153,154,135,135,135,135,33,188,187,154,155,136,136,136,136,33,189,188,155,156,137,137,137,137,33,190,189,156,157,138,138,138,138,33,191,190,157,158,139,139,139,139,33,192,191,158,159,140,140,140,140,33,193,192,159,160,141,141,141,141,33,194,193,160,161,142,142,142,142,33,195,194,161,162,143,143,143,143,33,196,195,162,163,144,144,144,144,33,197,196,163,164,145,145,145,145,33,198,197,164,165,146,146,146,146,33,199,198,165,166,147,147,147,147,33,198,199,362,361,148,148,148,148,33,197,198,361,360,149,149,149,149,33,196,197,360,359,150,150,150,150,33,195,196,359,358,151,151,151,151,33,194,195,358,357,152,152,152,152,33,193,194,357,356,153,153,153,153,33,192,193,356,355,154,154,154,154,33,191,192,355,354,155,155,155,155,33,190,191,354,353,156,156,156,156,33,189,190,353,352,157,157,157,157,33,188,189,352,351,158,158,158,158,33,187,188,351,350,159,159,159,159,33,186,187,350,349,160,160,160,160,33,185,186,349,348,161,161,161,161,33,184,185,348,347,162,162,162,162,33,183,184,347,346,163,163,163,163,33,182,183,346,345,164,164,164,164,33,181,182,345,344,165,165,165,165,33,180,181,344,343,166,166,166,166,33,179,180,343,342,167,167,167,167,33,178,179,342,341,168,168,168,168,33,177,178,341,340,169,169,169,169,33,176,177,340,339,170,170,170,170,33,175,176,339,338,171,171,171,171,33,174,175,338,337,172,172,172,172,33,173,174,337,336,173,173,173,173,33,172,173,336,335,174,174,174,174,33,171,172,335,334,175,175,175,175,33,170,171,334,333,176,176,176,176,33,169,170,333,332,177,177,177,177,33,168,169,332,331,178,178,178,178,33,400,168,331,406,179,179,179,179,33,479,478,64,65,180,180,180,180,33,427,428,14,13,181,181,181,181,33,480,479,65,66,182,182,182,182,33,428,429,15,14,183,183,183,183,33,481,480,66,67,184,184,184,184,33,429,430,16,15,185,185,185,185,33,482,481,67,68,186,186,186,186,33,430,431,17,16,187,187,187,187,33,431,432,18,17,4,4,4,4,33,432,433,19,18,188,188,188,188,33,433,434,20,19,189,189,189,189,33,434,435,21,20,190,190,190,190,33,435,436,22,21,0,0,0,0,33,436,437,23,22,191,191,191,191,33,437,438,24,23,192,192,192,192,33,438,439,25,24,193,193,193,193,33,439,440,26,25,194,194,194,194,33,440,441,27,26,195,195,195,195,33,441,442,28,27,196,196,196,196,33,442,443,29,28,197,197,197,197,33,443,444,30,29,198,198,198,198,33,444,445,31,30,199,199,199,199,33,445,446,32,31,200,200,200,200,33,446,447,33,32,201,201,201,201,33,447,448,34,33,202,202,202,202,33,448,449,35,34,203,203,203,203,33,1,0,262,263,204,204,204,204,33,2,0,1,100,205,205,205,205,33,880,450,36,401,49,49,49,49,33,452,451,37,38,206,206,206,206,33,453,452,38,39,207,207,207,207,33,454,453,39,40,208,208,208,208,33,455,454,40,41,209,209,209,209,33,456,455,41,42,210,210,210,210,33,457,456,42,43,211,211,211,211,33,458,457,43,44,212,212,212,212,33,459,458,44,45,213,213,213,213,33,460,459,45,46,214,214,214,214,33,461,460,46,47,215,215,215,215,33,462,461,47,48,216,216,216,216,33,463,462,48,49,217,217,217,217,33,464,463,49,50,218,218,218,218,33,465,464,50,51,219,219,219,219,33,466,465,51,52,220,220,220,220,33,467,466,52,53,221,221,221,221,33,468,467,53,54,222,222,222,222,33,469,468,54,55,223,223,223,223,33,879,418,4,397,224,224,224,224,33,470,469,55,56,225,225,225,225,33,418,419,5,4,23,23,23,23,33,471,470,56,57,226,226,226,226,33,419,420,6,5,227,227,227,227,33,472,471,57,58,228,228,228,228,33,420,421,7,6,229,229,229,229,33,473,472,58,59,230,230,230,230,33,421,422,8,7,231,231,231,231,33,474,473,59,60,232,232,232,232,33,422,423,9,8,233,233,233,233,33,475,474,60,61,234,234,234,234,33,423,424,10,9,235,235,235,235,33,476,475,61,62,236,236,236,236,33,424,425,11,10,11,11,11,11,33,477,476,62,63,237,237,237,237,33,425,426,12,11,238,238,238,238,33,478,477,63,64,239,239,239,239,33,426,427,13,12,240,240,240,240,33,402,200,231,403,241,241,241,241,33,202,201,232,233,242,242,242,242,33,203,202,233,234,243,243,243,243,33,204,203,234,235,244,244,244,244,33,205,204,235,236,242,242,242,242,33,206,205,236,237,241,241,241,241,33,207,206,237,238,245,245,245,245,33,208,207,238,239,242,242,242,242,33,209,208,239,240,246,246,246,246,33,210,209,240,241,247,247,247,247,33,211,210,241,242,248,248,248,248,33,212,211,242,243,249,249,249,249,33,213,212,243,244,250,250,250,250,33,214,213,244,245,251,251,251,251,33,215,214,245,246,252,252,252,252,33,216,215,246,247,253,253,253,253,33,217,216,247,248,254,254,254,254,33,218,217,248,249,255,255,255,255,33,219,218,249,250,256,256,256,256,33,220,219,250,251,257,257,257,257,33,221,220,251,252,258,258,258,258,33,222,221,252,253,259,259,259,259,33,223,222,253,254,260,260,260,260,33,224,223,254,255,261,261,261,261,33,225,224,255,256,262,262,262,262,33,226,225,256,257,263,263,263,263,33,227,226,257,258,264,264,264,264,33,228,227,258,259,265,265,265,265,33,229,228,259,260,266,266,266,266,33,230,229,260,261,267,267,267,267,33,0,230,261,262,268,268,268,268,33,22,23,251,250,269,269,269,269,33,23,24,252,251,270,270,270,270,33,24,25,253,252,193,193,193,193,33,25,26,254,253,194,194,194,194,33,26,27,255,254,271,271,271,271,33,27,28,256,255,196,196,196,196,33,28,29,257,256,197,197,197,197,33,29,30,258,257,272,272,272,272,33,30,31,259,258,199,199,199,199,33,31,32,260,259,273,273,273,273,33,32,33,261,260,201,201,201,201,33,33,34,262,261,274,274,274,274,33,34,35,263,262,275,275,275,275,33,405,297,411,408,276,276,276,276,33,299,298,265,266,277,277,277,277,33,300,299,266,267,278,278,278,278,33,301,300,267,268,279,279,279,279,33,302,301,268,269,280,280,280,280,33,303,302,269,270,281,281,281,281,33,304,303,270,271,282,282,282,282,33,305,304,271,272,283,283,283,283,33,306,305,272,273,284,284,284,284,33,307,306,273,274,285,285,285,285,33,308,307,274,275,286,286,286,286,33,309,308,275,276,287,287,287,287,33,310,309,276,277,288,288,288,288,33,311,310,277,278,289,289,289,289,33,312,311,278,279,290,290,290,290,33,313,312,279,280,291,291,291,291,33,314,313,280,281,292,292,292,292,33,315,314,281,282,293,293,293,293,33,316,315,282,283,294,294,294,294,33,317,316,283,284,295,295,295,295,33,318,317,284,285,296,296,296,296,33,319,318,285,286,297,297,297,297,33,320,319,286,287,298,298,298,298,33,321,320,287,288,299,299,299,299,33,322,321,288,289,300,300,300,300,33,323,322,289,290,301,301,301,301,33,324,323,290,291,302,302,302,302,33,325,324,291,292,303,303,303,303,33,326,325,292,293,304,304,304,304,33,327,326,293,294,305,305,305,305,33,328,327,294,295,306,306,306,306,32,415,329,328,307,307,307,32,328,295,296,308,308,308,32,296,414,415,242,242,242,32,328,296,415,309,309,309,33,159,158,321,322,310,310,310,310,33,160,159,322,323,311,311,311,311,33,161,160,323,324,312,312,312,312,33,162,161,324,325,313,313,313,313,33,163,162,325,326,314,314,314,314,33,164,163,326,327,315,315,315,315,33,165,164,327,328,316,316,316,316,33,166,165,328,329,317,317,317,317,33,398,102,265,404,318,318,318,318,33,102,103,266,265,319,319,319,319,33,103,104,267,266,320,320,320,320,33,104,105,268,267,321,321,321,321,33,105,106,269,268,322,322,322,322,33,106,107,270,269,323,323,323,323,33,107,108,271,270,324,324,324,324,33,108,109,272,271,325,325,325,325,33,109,110,273,272,326,326,326,326,33,110,111,274,273,240,240,240,240,33,111,112,275,274,327,327,327,327,33,112,113,276,275,328,328,328,328,33,113,114,277,276,329,329,329,329,33,114,115,278,277,330,330,330,330,33,115,116,279,278,331,331,331,331,33,116,117,280,279,332,332,332,332,33,117,118,281,280,333,333,333,333,33,118,119,282,281,334,334,334,334,33,119,120,283,282,335,335,335,335,33,120,121,284,283,336,336,336,336,33,407,363,330,406,241,241,241,241,33,365,364,331,332,337,337,337,337,33,366,365,332,333,338,338,338,338,33,367,366,333,334,242,242,242,242,33,368,367,334,335,339,339,339,339,33,369,368,335,336,340,340,340,340,33,370,369,336,337,341,341,341,341,33,371,370,337,338,342,342,342,342,33,372,371,338,339,343,343,343,343,33,373,372,339,340,344,344,344,344,33,374,373,340,341,345,345,345,345,33,375,374,341,342,346,346,346,346,33,376,375,342,343,347,347,347,347,33,377,376,343,344,348,348,348,348,33,378,377,344,345,349,349,349,349,33,379,378,345,346,350,350,350,350,33,380,379,346,347,351,351,351,351,33,381,380,347,348,352,352,352,352,33,382,381,348,349,353,353,353,353,33,383,382,349,350,354,354,354,354,33,384,383,350,351,355,355,355,355,33,385,384,351,352,356,356,356,356,33,386,385,352,353,357,357,357,357,33,387,386,353,354,358,358,358,358,33,388,387,354,355,359,359,359,359,33,389,388,355,356,360,360,360,360,33,390,389,356,357,361,361,361,361,33,391,390,357,358,362,362,362,362,33,392,391,358,359,363,363,363,363,33,393,392,359,360,364,364,364,364,33,394,393,360,361,365,365,365,365,33,395,394,361,362,366,366,366,366,33,401,36,363,407,49,49,49,49,33,38,37,364,365,206,206,206,206,33,39,38,365,366,367,367,367,367,33,40,39,366,367,368,368,368,368,33,41,40,367,368,209,209,209,209,33,42,41,368,369,210,210,210,210,33,43,42,369,370,211,211,211,211,33,44,43,370,371,369,369,369,369,33,45,44,371,372,213,213,213,213,33,46,45,372,373,370,370,370,370,33,47,46,373,374,371,371,371,371,33,48,47,374,375,372,372,372,372,33,49,48,375,376,373,373,373,373,33,50,49,376,377,218,218,218,218,33,51,50,377,378,374,374,374,374,33,52,51,378,379,375,375,375,375,33,53,52,379,380,376,376,376,376,33,54,53,380,381,377,377,377,377,33,55,54,381,382,223,223,223,223,33,56,55,382,383,378,378,378,378,33,57,56,383,384,379,379,379,379,33,58,57,384,385,380,380,380,380,33,59,58,385,386,230,230,230,230,33,60,59,386,387,232,232,232,232,33,61,60,387,388,234,234,234,234,33,62,61,388,389,381,381,381,381,33,63,62,389,390,237,237,237,237,33,64,63,390,391,382,382,382,382,33,65,64,391,392,180,180,180,180,33,66,65,392,393,383,383,383,383,33,67,66,393,394,384,384,384,384,33,68,67,394,395,385,385,385,385,33,37,401,407,364,386,386,386,386,33,364,407,406,331,387,387,387,387,33,101,398,404,264,388,388,388,388,32,298,405,408,389,389,389,32,409,404,265,242,242,242,32,298,408,409,390,390,390,32,298,409,265,391,391,391,33,201,402,403,232,242,242,242,242,33,417,879,397,3,388,388,388,388,33,451,880,401,37,392,392,392,392,33,167,400,406,330,388,388,388,388,33,168,400,399,135,393,393,393,393,33,135,399,405,298,394,394,394,394,33,102,398,396,70,395,395,395,395,33,70,396,402,201,396,396,396,396,33,3,397,403,231,388,388,388,388,33,410,409,898,899,397,397,397,397,33,409,410,264,404,242,242,242,242,33,409,408,897,898,398,398,398,398,33,408,411,900,897,399,399,399,399,32,411,297,134,400,400,400,32,167,330,363,401,401,401,32,900,411,134,402,402,402,32,167,363,36,403,403,403,32,900,134,167,404,404,404,32,36,450,900,405,405,405,32,167,36,900,406,406,406,32,417,3,231,407,407,407,32,231,200,69,408,408,408,32,101,264,410,409,409,409,32,417,231,69,410,410,410,32,101,410,899,411,411,411,32,417,69,101,412,412,412,32,101,899,417,413,413,413,33,413,415,414,412,414,414,414,414,33,414,907,905,412,415,415,415,415,33,413,906,908,415,416,416,416,416,33,412,905,906,413,417,417,417,417,32,166,329,415,418,418,418,32,908,482,68,419,419,419,32,68,395,362,418,418,418,32,68,362,199,420,420,420,32,166,415,908,420,420,420,32,908,68,199,421,421,421,32,166,908,199,422,422,422,32,100,1,263,418,418,418,32,35,449,907,423,423,423,32,100,263,35,420,420,420,32,414,296,133,424,424,424,32,100,35,907,425,425,425,32,907,414,133,426,426,426,32,100,907,133,427,427,427,33,504,732,733,505,0,0,0,0,33,503,731,732,504,1,1,1,1,33,502,730,731,503,2,2,2,2,33,501,729,730,502,3,3,3,3,33,500,728,729,501,4,4,4,4,33,499,727,728,500,5,5,5,5,33,498,726,727,499,6,6,6,6,33,497,725,726,498,7,7,7,7,33,496,724,725,497,428,428,428,428,33,495,723,724,496,9,9,9,9,33,494,722,723,495,10,10,10,10,33,493,721,722,494,11,11,11,11,33,485,483,713,582,12,12,12,12,33,492,720,721,493,13,13,13,13,33,582,713,712,581,14,14,14,14,33,491,719,720,492,15,15,15,15,33,581,712,711,580,16,16,16,16,33,490,718,719,491,17,17,17,17,33,580,711,710,579,429,429,429,429,33,489,717,718,490,19,19,19,19,33,579,710,709,578,20,20,20,20,33,488,716,717,489,21,21,21,21,33,578,709,708,577,430,430,430,430,33,487,715,716,488,23,23,23,23,33,577,708,707,576,431,431,431,431,33,882,888,715,487,25,25,25,25,33,576,707,706,575,432,432,432,432,33,575,706,705,574,27,27,27,27,33,574,705,704,573,28,28,28,28,33,573,704,703,572,29,29,29,29,33,572,703,702,571,30,30,30,30,33,571,702,701,570,31,31,31,31,33,570,701,700,569,32,32,32,32,33,569,700,699,568,33,33,33,33,33,568,699,698,567,34,34,34,34,33,567,698,697,566,35,35,35,35,33,566,697,696,565,36,36,36,36,33,565,696,695,564,433,433,433,433,33,564,695,694,563,38,38,38,38,33,563,694,693,562,39,39,39,39,33,562,693,692,561,434,434,434,434,33,561,692,691,560,435,435,435,435,33,560,691,690,559,42,42,42,42,33,559,690,689,558,436,436,436,436,33,558,689,688,557,44,44,44,44,33,557,688,687,556,45,45,45,45,33,556,687,686,555,437,437,437,437,33,555,686,685,554,438,438,438,438,33,554,685,684,553,48,48,48,48,33,881,887,683,552,439,439,439,439,33,883,881,552,584,440,440,440,440,33,586,554,553,585,441,441,441,441,33,587,555,554,586,442,442,442,442,33,588,556,555,587,443,443,443,443,33,589,557,556,588,444,444,444,444,33,590,558,557,589,445,445,445,445,33,591,559,558,590,446,446,446,446,33,592,560,559,591,447,447,447,447,33,593,561,560,592,448,448,448,448,33,594,562,561,593,449,449,449,449,33,595,563,562,594,450,450,450,450,33,596,564,563,595,451,451,451,451,33,597,565,564,596,452,452,452,452,33,598,566,565,597,453,453,453,453,33,599,567,566,598,454,454,454,454,33,600,568,567,599,455,455,455,455,33,601,569,568,600,456,456,456,456,33,602,570,569,601,457,457,457,457,33,603,571,570,602,458,458,458,458,33,604,572,571,603,459,459,459,459,33,605,573,572,604,460,460,460,460,33,606,574,573,605,461,461,461,461,33,607,575,574,606,462,462,462,462,33,608,576,575,607,463,463,463,463,33,609,577,576,608,464,464,464,464,33,610,578,577,609,465,465,465,465,33,611,579,578,610,466,466,466,466,33,612,580,579,611,467,467,467,467,33,613,581,580,612,468,468,468,468,33,614,582,581,613,469,469,469,469,33,615,485,582,614,470,470,470,470,33,616,583,485,615,471,471,471,471,33,641,804,803,640,82,82,82,82,33,640,803,802,639,83,83,83,83,33,639,802,801,638,84,84,84,84,33,638,801,800,637,85,85,85,85,33,637,800,799,636,86,86,86,86,33,636,799,798,635,87,87,87,87,33,635,798,797,634,88,88,88,88,33,634,797,796,633,89,89,89,89,33,633,796,795,632,90,90,90,90,33,632,795,794,631,91,91,91,91,33,631,794,793,630,92,92,92,92,33,630,793,792,629,93,93,93,93,33,629,792,791,628,94,94,94,94,33,628,791,790,627,95,95,95,95,33,627,790,789,626,96,96,96,96,33,626,789,788,625,97,97,97,97,33,625,788,787,624,98,98,98,98,33,624,787,786,623,99,99,99,99,33,623,786,785,622,100,100,100,100,33,622,785,784,621,101,101,101,101,33,621,784,783,620,102,102,102,102,33,620,783,782,619,103,103,103,103,33,619,782,781,618,104,104,104,104,33,884,890,780,617,439,439,439,439,33,615,778,779,616,105,105,105,105,33,614,777,778,615,106,106,106,106,33,613,776,777,614,107,107,107,107,33,612,775,776,613,108,108,108,108,33,611,774,775,612,109,109,109,109,33,610,773,774,611,110,110,110,110,33,609,772,773,610,111,111,111,111,33,608,771,772,609,112,112,112,112,33,607,770,771,608,113,113,113,113,33,606,769,770,607,114,114,114,114,33,605,768,769,606,115,115,115,115,33,604,767,768,605,116,116,116,116,33,885,884,617,650,440,440,440,440,33,652,619,618,651,472,472,472,472,33,653,620,619,652,473,473,473,473,33,654,621,620,653,474,474,474,474,33,655,622,621,654,475,475,475,475,33,656,623,622,655,476,476,476,476,33,657,624,623,656,477,477,477,477,33,658,625,624,657,478,478,478,478,33,659,626,625,658,479,479,479,479,33,660,627,626,659,480,480,480,480,33,661,628,627,660,481,481,481,481,33,662,629,628,661,482,482,482,482,33,663,630,629,662,483,483,483,483,33,664,631,630,663,484,484,484,484,33,665,632,631,664,485,485,485,485,33,666,633,632,665,486,486,486,486,33,667,634,633,666,487,487,487,487,33,668,635,634,667,488,488,488,488,33,669,636,635,668,489,489,489,489,33,670,637,636,669,490,490,490,490,33,671,638,637,670,491,491,491,491,33,672,639,638,671,492,492,492,492,33,673,640,639,672,493,493,493,493,33,674,641,640,673,494,494,494,494,33,675,642,641,674,495,495,495,495,33,676,643,642,675,496,496,496,496,33,677,644,643,676,497,497,497,497,33,678,645,644,677,498,498,498,498,33,679,646,645,678,499,499,499,499,33,680,647,646,679,500,500,500,500,33,681,648,647,680,501,501,501,501,33,682,649,648,681,502,502,502,502,33,681,844,845,682,148,148,148,148,33,680,843,844,681,149,149,149,149,33,679,842,843,680,150,150,150,150,33,678,841,842,679,151,151,151,151,33,677,840,841,678,152,152,152,152,33,676,839,840,677,153,153,153,153,33,675,838,839,676,154,154,154,154,33,674,837,838,675,155,155,155,155,33,673,836,837,674,156,156,156,156,33,672,835,836,673,157,157,157,157,33,671,834,835,672,158,158,158,158,33,670,833,834,671,159,159,159,159,33,669,832,833,670,160,160,160,160,33,668,831,832,669,161,161,161,161,33,667,830,831,668,162,162,162,162,33,666,829,830,667,163,163,163,163,33,665,828,829,666,164,164,164,164,33,664,827,828,665,165,165,165,165,33,663,826,827,664,166,166,166,166,33,662,825,826,663,167,167,167,167,33,661,824,825,662,168,168,168,168,33,660,823,824,661,169,169,169,169,33,659,822,823,660,170,170,170,170,33,658,821,822,659,171,171,171,171,33,657,820,821,658,172,172,172,172,33,656,819,820,657,173,173,173,173,33,655,818,819,656,174,174,174,174,33,654,817,818,655,175,175,175,175,33,653,816,817,654,176,176,176,176,33,652,815,816,653,177,177,177,177,33,651,814,815,652,178,178,178,178,33,885,891,814,651,179,179,179,179,33,479,548,547,478,180,180,180,180,33,427,496,497,428,181,181,181,181,33,480,549,548,479,182,182,182,182,33,428,497,498,429,183,183,183,183,33,481,550,549,480,184,184,184,184,33,429,498,499,430,185,185,185,185,33,482,551,550,481,186,186,186,186,33,430,499,500,431,187,187,187,187,33,431,500,501,432,4,4,4,4,33,432,501,502,433,188,188,188,188,33,433,502,503,434,189,189,189,189,33,434,503,504,435,190,190,190,190,33,435,504,505,436,0,0,0,0,33,436,505,506,437,191,191,191,191,33,437,506,507,438,192,192,192,192,33,438,507,508,439,193,193,193,193,33,439,508,509,440,194,194,194,194,33,440,509,510,441,195,195,195,195,33,441,510,511,442,196,196,196,196,33,442,511,512,443,197,197,197,197,33,443,512,513,444,198,198,198,198,33,444,513,514,445,199,199,199,199,33,445,514,515,446,200,200,200,200,33,446,515,516,447,201,201,201,201,33,447,516,517,448,202,202,202,202,33,448,517,518,449,503,503,503,503,33,745,483,484,746,504,504,504,504,33,485,583,484,483,205,205,205,205,33,880,886,519,450,439,439,439,439,33,452,521,520,451,206,206,206,206,33,453,522,521,452,207,207,207,207,33,454,523,522,453,208,208,208,208,33,455,524,523,454,209,209,209,209,33,456,525,524,455,210,210,210,210,33,457,526,525,456,211,211,211,211,33,458,527,526,457,212,212,212,212,33,459,528,527,458,213,213,213,213,33,460,529,528,459,214,214,214,214,33,461,530,529,460,215,215,215,215,33,462,531,530,461,216,216,216,216,33,463,532,531,462,217,217,217,217,33,464,533,532,463,218,218,218,218,33,465,534,533,464,219,219,219,219,33,466,535,534,465,220,220,220,220,33,467,536,535,466,221,221,221,221,33,468,537,536,467,222,222,222,222,33,469,538,537,468,223,223,223,223,33,879,882,487,418,224,224,224,224,33,470,539,538,469,225,225,225,225,33,418,487,488,419,23,23,23,23,33,471,540,539,470,226,226,226,226,33,419,488,489,420,227,227,227,227,33,472,541,540,471,228,228,228,228,33,420,489,490,421,229,229,229,229,33,473,542,541,472,230,230,230,230,33,421,490,491,422,231,231,231,231,33,474,543,542,473,232,232,232,232,33,422,491,492,423,233,233,233,233,33,475,544,543,474,234,234,234,234,33,423,492,493,424,235,235,235,235,33,476,545,544,475,236,236,236,236,33,424,493,494,425,11,11,11,11,33,477,546,545,476,237,237,237,237,33,425,494,495,426,238,238,238,238,33,478,547,546,477,239,239,239,239,33,426,495,496,427,240,240,240,240,33,887,888,714,683,505,505,505,505,33,685,716,715,684,506,506,506,506,33,686,717,716,685,506,506,506,506,33,687,718,717,686,507,507,507,507,33,688,719,718,687,508,508,508,508,33,689,720,719,688,509,509,509,509,33,690,721,720,689,510,510,510,510,33,691,722,721,690,511,511,511,511,33,692,723,722,691,506,506,506,506,33,693,724,723,692,512,512,512,512,33,694,725,724,693,506,506,506,506,33,695,726,725,694,513,513,513,513,33,696,727,726,695,514,514,514,514,33,697,728,727,696,515,515,515,515,33,698,729,728,697,516,516,516,516,33,699,730,729,698,517,517,517,517,33,700,731,730,699,505,505,505,505,33,701,732,731,700,518,518,518,518,33,702,733,732,701,519,519,519,519,33,703,734,733,702,520,520,520,520,33,704,735,734,703,521,521,521,521,33,705,736,735,704,522,522,522,522,33,706,737,736,705,523,523,523,523,33,707,738,737,706,524,524,524,524,33,708,739,738,707,525,525,525,525,33,709,740,739,708,526,526,526,526,33,710,741,740,709,527,527,527,527,33,711,742,741,710,528,528,528,528,33,712,743,742,711,529,529,529,529,33,713,744,743,712,530,530,530,530,33,483,745,744,713,531,531,531,531,33,505,733,734,506,269,269,269,269,33,506,734,735,507,270,270,270,270,33,507,735,736,508,193,193,193,193,33,508,736,737,509,532,532,532,532,33,509,737,738,510,195,195,195,195,33,510,738,739,511,533,533,533,533,33,511,739,740,512,534,534,534,534,33,512,740,741,513,272,272,272,272,33,513,741,742,514,535,535,535,535,33,514,742,743,515,273,273,273,273,33,515,743,744,516,201,201,201,201,33,516,744,745,517,274,274,274,274,33,517,745,746,518,275,275,275,275,33,890,893,896,780,506,506,506,506,33,782,749,748,781,536,536,536,536,33,783,750,749,782,537,537,537,537,33,784,751,750,783,538,538,538,538,33,785,752,751,784,539,539,539,539,33,786,753,752,785,540,540,540,540,33,787,754,753,786,541,541,541,541,33,788,755,754,787,542,542,542,542,33,789,756,755,788,543,543,543,543,33,790,757,756,789,544,544,544,544,33,791,758,757,790,545,545,545,545,33,792,759,758,791,546,546,546,546,33,793,760,759,792,547,547,547,547,33,794,761,760,793,548,548,548,548,33,795,762,761,794,549,549,549,549,33,796,763,762,795,550,550,550,550,33,797,764,763,796,551,551,551,551,33,798,765,764,797,552,552,552,552,33,799,766,765,798,553,553,553,553,33,800,767,766,799,554,554,554,554,33,801,768,767,800,555,555,555,555,33,802,769,768,801,556,556,556,556,33,803,770,769,802,557,557,557,557,33,804,771,770,803,558,558,558,558,33,805,772,771,804,559,559,559,559,33,806,773,772,805,560,560,560,560,33,807,774,773,806,561,561,561,561,33,808,775,774,807,562,562,562,562,33,809,776,775,808,563,563,563,563,33,810,777,776,809,564,564,564,564,33,811,778,777,810,565,565,565,565,32,811,812,904,566,566,566,32,904,903,779,506,506,506,32,779,778,811,567,567,567,32,904,779,811,568,568,568,33,642,805,804,641,310,310,310,310,33,643,806,805,642,311,311,311,311,33,644,807,806,643,312,312,312,312,33,645,808,807,644,313,313,313,313,33,646,809,808,645,314,314,314,314,33,647,810,809,646,315,315,315,315,33,648,811,810,647,316,316,316,316,33,649,812,811,648,317,317,317,317,33,883,889,748,585,318,318,318,318,33,585,748,749,586,319,319,319,319,33,586,749,750,587,569,569,569,569,33,587,750,751,588,321,321,321,321,33,588,751,752,589,570,570,570,570,33,589,752,753,590,571,571,571,571,33,590,753,754,591,324,324,324,324,33,591,754,755,592,572,572,572,572,33,592,755,756,593,573,573,573,573,33,593,756,757,594,574,574,574,574,33,594,757,758,595,575,575,575,575,33,595,758,759,596,328,328,328,328,33,596,759,760,597,329,329,329,329,33,597,760,761,598,330,330,330,330,33,598,761,762,599,331,331,331,331,33,599,762,763,600,332,332,332,332,33,600,763,764,601,333,333,333,333,33,601,764,765,602,334,334,334,334,33,602,765,766,603,335,335,335,335,33,603,766,767,604,336,336,336,336,33,892,891,813,846,505,505,505,505,33,848,815,814,847,506,506,506,506,33,849,816,815,848,506,506,506,506,33,850,817,816,849,506,506,506,506,33,851,818,817,850,506,506,506,506,33,852,819,818,851,576,576,576,576,33,853,820,819,852,577,577,577,577,33,854,821,820,853,505,505,505,505,33,855,822,821,854,506,506,506,506,33,856,823,822,855,578,578,578,578,33,857,824,823,856,506,506,506,506,33,858,825,824,857,579,579,579,579,33,859,826,825,858,506,506,506,506,33,860,827,826,859,580,580,580,580,33,861,828,827,860,505,505,505,505,33,862,829,828,861,581,581,581,581,33,863,830,829,862,582,582,582,582,33,864,831,830,863,506,506,506,506,33,865,832,831,864,583,583,583,583,33,866,833,832,865,584,584,584,584,33,867,834,833,866,585,585,585,585,33,868,835,834,867,586,586,586,586,33,869,836,835,868,587,587,587,587,33,870,837,836,869,588,588,588,588,33,871,838,837,870,589,589,589,589,33,872,839,838,871,590,590,590,590,33,873,840,839,872,506,506,506,506,33,874,841,840,873,591,591,591,591,33,875,842,841,874,592,592,592,592,33,876,843,842,875,593,593,593,593,33,877,844,843,876,594,594,594,594,33,878,845,844,877,595,595,595,595,33,886,892,846,519,439,439,439,439,33,521,848,847,520,206,206,206,206,33,522,849,848,521,367,367,367,367,33,523,850,849,522,368,368,368,368,33,524,851,850,523,209,209,209,209,33,525,852,851,524,596,596,596,596,33,526,853,852,525,211,211,211,211,33,527,854,853,526,369,369,369,369,33,528,855,854,527,213,213,213,213,33,529,856,855,528,370,370,370,370,33,530,857,856,529,371,371,371,371,33,531,858,857,530,372,372,372,372,33,532,859,858,531,597,597,597,597,33,533,860,859,532,218,218,218,218,33,534,861,860,533,374,374,374,374,33,535,862,861,534,375,375,375,375,33,536,863,862,535,376,376,376,376,33,537,864,863,536,377,377,377,377,33,538,865,864,537,223,223,223,223,33,539,866,865,538,378,378,378,378,33,540,867,866,539,598,598,598,598,33,541,868,867,540,380,380,380,380,33,542,869,868,541,230,230,230,230,33,543,870,869,542,232,232,232,232,33,544,871,870,543,234,234,234,234,33,545,872,871,544,381,381,381,381,33,546,873,872,545,237,237,237,237,33,547,874,873,546,382,382,382,382,33,548,875,874,547,180,180,180,180,33,549,876,875,548,383,383,383,383,33,550,877,876,549,384,384,384,384,33,551,878,877,550,385,385,385,385,33,520,847,892,886,386,386,386,386,33,847,814,891,892,506,506,506,506,33,584,747,889,883,388,388,388,388,32,748,889,894,599,599,599,32,893,890,781,506,506,506,32,748,894,893,600,600,600,32,781,748,893,601,601,601,33,684,715,888,887,506,506,506,506,33,417,486,882,879,388,388,388,388,33,451,520,886,880,392,392,392,392,33,650,813,891,885,388,388,388,388,33,651,618,884,885,602,602,602,602,33,618,781,890,884,394,394,394,394,33,585,553,881,883,603,603,603,603,33,553,684,887,881,604,604,604,604,33,486,714,888,882,388,388,388,388,33,895,899,898,894,397,397,397,397,33,894,889,747,895,605,605,605,605,33,894,898,897,893,398,398,398,398,33,893,897,900,896,399,399,399,399,32,617,780,896,400,400,400,32,900,450,519,405,405,405,32,519,846,813,403,403,403,32,519,813,650,606,606,606,32,617,896,900,402,402,402,32,900,519,650,607,607,607,32,900,650,617,608,608,608,32,714,486,417,407,407,407,32,899,895,747,411,411,411,32,899,747,584,409,409,409,32,683,714,417,410,410,410,32,899,584,552,609,609,609,32,552,683,417,408,408,408,32,417,899,552,610,610,610,33,902,901,903,904,611,611,611,611,33,903,901,905,907,415,415,415,415,33,902,904,908,906,416,416,416,416,33,901,902,906,905,417,417,417,417,32,682,845,878,439,439,439,32,878,551,482,407,407,407,32,908,904,812,439,439,439,32,908,812,649,439,439,439,32,682,878,482,612,612,612,32,908,649,682,613,613,613,32,682,482,908,614,614,614,32,616,779,903,424,424,424,32,907,449,518,615,615,615,32,518,746,484,439,439,439,32,518,484,583,439,439,439,32,616,903,907,426,426,426,32,907,518,583,616,616,616,32,583,616,907,617,617,617],\"vertices\":[233.218,3.99999,-204.542,233.5,3.99999,-215.75,233.218,0.999991,-204.542,0.24996,1,19,11.5305,1,18.717,23.0336,1,17.8685,34.4812,1,16.4565,45.8457,1,14.4846,57.0998,1,11.9575,68.2164,1,8.88113,79.1686,1,5.26305,89.93,1,1.11192,100.475,1,-3.56224,110.778,1,-8.74818,120.814,0.999999,-14.4334,130.558,0.999999,-20.6042,139.989,0.999999,-27.2458,149.082,0.999999,-34.3421,157.816,0.999998,-41.876,166.17,0.999998,-49.8293,174.123,0.999997,-58.183,181.657,0.999997,-66.917,188.753,0.999997,-76.0101,195.395,0.999996,-85.4404,201.566,0.999996,-95.1853,207.251,0.999995,-105.221,212.437,0.999995,-115.524,217.111,0.999995,-126.069,221.263,0.999994,-136.83,224.881,0.999994,-147.783,227.957,0.999993,-158.899,230.484,0.999993,-170.153,232.456,0.999992,-181.518,233.868,0.999992,-192.966,234.717,0.999991,-204.469,235,0.999991,-215.75,0.250039,0.999999,-19.0114,9.66539,0.999999,-19.2487,19.3078,0.999999,-19.96,28.9038,0.999999,-21.1435,38.4301,0.999999,-22.7964,47.8638,0.999999,-24.9148,57.1823,0.999999,-27.4936,66.363,0.999999,-30.5264,75.3838,0.999999,-34.0061,84.223,0.999998,-37.9242,92.8593,0.999998,-42.2713,101.272,0.999998,-47.037,109.44,0.999998,-52.2097,117.345,0.999997,-57.777,124.968,0.999997,-63.7254,132.289,0.999997,-70.0407,139.291,0.999997,-76.7076,145.958,0.999996,-83.7101,152.274,0.999996,-91.0313,158.222,0.999996,-98.6535,163.79,0.999995,-106.559,168.962,0.999995,-114.727,173.728,0.999995,-123.14,178.075,0.999994,-131.776,181.994,0.999994,-140.615,185.473,0.999993,-149.636,188.506,0.999993,-158.817,191.085,0.999993,-168.135,193.203,0.999992,-177.569,194.856,0.999992,-187.095,196.04,0.999991,-196.691,196.751,0.999991,-206.334,196.989,0.999991,-215.75,0.249963,1,17.4995,11.4568,1,17.2183,22.8865,1,16.3752,34.261,1,14.9723,45.553,1,13.013,56.7352,1,10.502,67.7808,1,7.44529,78.6631,1,3.8503,89.3558,1,-0.274315,99.8333,1,-4.91864,110.07,1,-10.0715,120.042,0.999999,-15.7204,129.725,0.999999,-21.8518,139.095,0.999999,-28.451,148.13,0.999998,-35.5019,156.808,0.999998,-42.9877,165.109,0.999998,-50.8903,173.011,0.999997,-59.1907,180.497,0.999997,-67.8688,187.548,0.999997,-76.9039,194.147,0.999996,-86.274,200.279,0.999996,-95.9567,205.928,0.999995,-105.928,211.081,0.999995,-116.166,215.725,0.999994,-126.643,219.85,0.999994,-137.336,223.445,0.999994,-148.218,226.502,0.999993,-159.264,229.013,0.999993,-170.446,230.972,0.999992,-181.738,232.375,0.999992,-193.113,233.5,0.999991,-215.75,0.249979,1,9.49714,11.0642,1,9.22555,22.1021,1,8.41135,33.0868,1,7.05653,43.9918,1,5.16438,54.7908,1,2.7394,65.4578,1,-0.212544,75.9672,1,-3.68433,86.2935,1,-7.66759,96.4119,0.999999,-12.1527,106.298,0.999999,-17.129,115.928,0.999999,-22.5843,125.279,0.999999,-28.5056,134.328,0.999998,-34.8786,143.053,0.999998,-41.6879,151.434,0.999998,-48.9171,159.45,0.999998,-56.5489,167.082,0.999997,-64.5648,174.311,0.999997,-72.9455,181.121,0.999996,-81.6709,187.494,0.999996,-90.7199,193.415,0.999996,-100.071,198.87,0.999995,-109.701,203.847,0.999995,-119.587,208.332,0.999994,-129.705,212.315,0.999994,-140.032,215.787,0.999993,-150.541,218.739,0.999993,-161.208,221.164,0.999992,-172.007,223.056,0.999992,-182.912,224.411,0.999992,-193.897,225.226,0.999991,-204.935,225.497,0.999991,-215.75,0.250019,1,-9.50859,10.1317,1,-9.75728,20.2393,1,-10.5029,30.2982,0.999999,-11.7435,40.284,0.999999,-13.4762,50.1728,0.999999,-15.6968,59.9408,0.999999,-18.3999,69.5644,0.999999,-21.5791,79.0203,0.999999,-25.2266,88.286,0.999999,-29.3337,97.3389,0.999999,-33.8905,106.157,0.999998,-38.8861,114.72,0.999998,-44.3083,123.006,0.999998,-50.1442,130.996,0.999998,-56.3796,138.671,0.999997,-62.9995,146.011,0.999997,-69.988,153,0.999997,-77.3283,159.62,0.999996,-85.0027,165.855,0.999996,-92.9927,171.691,0.999996,-101.279,177.113,0.999995,-109.842,182.109,0.999995,-118.66,186.666,0.999994,-127.713,190.773,0.999994,-136.979,194.421,0.999994,-146.435,197.6,0.999993,-156.058,200.303,0.999993,-165.826,202.524,0.999992,-175.715,204.256,0.999992,-185.701,205.497,0.999991,-195.76,206.243,0.999991,-205.868,206.491,0.999991,-215.75,0.250036,0.999999,-17.511,9.73901,0.999999,-17.7501,19.4549,0.999999,-18.4667,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,66.8685,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5678,93.5666,0.999998,-40.9481,102.043,0.999998,-45.75,110.274,0.999998,-50.9621,118.239,0.999998,-56.5718,125.92,0.999997,-62.5655,133.297,0.999997,-68.9289,140.352,0.999997,-75.6466,147.07,0.999996,-82.7024,153.434,0.999996,-90.0794,159.427,0.999996,-97.7597,165.037,0.999995,-105.725,170.249,0.999995,-113.956,175.051,0.999995,-122.432,179.432,0.999994,-131.135,183.38,0.999994,-140.041,186.886,0.999994,-149.131,189.942,0.999993,-158.381,192.54,0.999993,-167.771,194.675,0.999992,-177.276,196.341,0.999992,-186.875,197.533,0.999991,-196.544,198.25,0.999991,-206.26,198.489,0.999991,-215.75,0.249963,4,17.4995,11.4568,4,17.2183,22.8865,4,16.3752,34.261,4,14.9723,45.553,4,13.013,56.7352,4,10.502,67.7808,4,7.44529,78.6631,4,3.8503,89.3558,4,-0.274315,99.8333,4,-4.91864,110.07,4,-10.0715,120.042,4,-15.7204,129.725,4,-21.8518,139.095,4,-28.451,148.13,4,-35.5019,156.808,4,-42.9877,165.109,4,-50.8903,173.011,4,-59.1907,180.497,4,-67.8688,187.548,4,-76.9039,194.147,4,-86.274,200.279,4,-95.9567,205.928,4,-105.928,211.081,3.99999,-116.166,215.725,3.99999,-126.643,219.85,3.99999,-137.336,223.445,3.99999,-148.218,226.502,3.99999,-159.264,229.013,3.99999,-170.446,230.972,3.99999,-181.738,232.375,3.99999,-193.113,0.24996,4,19,11.5305,4,18.717,23.0336,4,17.8685,34.4812,4,16.4565,45.8457,4,14.4846,57.0998,4,11.9575,68.2164,4,8.88113,79.1686,4,5.26305,89.93,4,1.11192,100.475,4,-3.56224,110.778,4,-8.74818,120.814,4,-14.4334,130.558,4,-20.6042,139.989,4,-27.2458,149.082,4,-34.3421,157.816,4,-41.876,166.17,4,-49.8293,174.123,4,-58.183,181.657,4,-66.917,188.753,4,-76.0101,195.395,4,-85.4404,201.566,4,-95.1853,207.251,4,-105.221,212.437,3.99999,-115.524,217.111,3.99999,-126.069,221.263,3.99999,-136.83,224.881,3.99999,-147.783,227.957,3.99999,-158.899,230.484,3.99999,-170.153,232.456,3.99999,-181.518,233.868,3.99999,-192.966,234.717,3.99999,-204.469,235,3.99999,-215.75,0.249979,4,9.49714,11.0642,4,9.22555,22.1021,4,8.41135,33.0868,4,7.05653,43.9918,4,5.16438,54.7908,4,2.7394,65.4578,4,-0.212545,75.9672,4,-3.68433,86.2935,4,-7.66759,96.4119,4,-12.1527,106.298,4,-17.129,115.928,4,-22.5843,125.279,4,-28.5056,134.328,4,-34.8786,143.053,4,-41.6879,151.434,4,-48.9171,159.45,4,-56.5489,167.082,4,-64.5648,174.311,4,-72.9455,181.121,4,-81.6709,187.494,4,-90.7199,193.415,4,-100.071,198.87,4,-109.701,203.847,3.99999,-119.587,208.332,3.99999,-129.705,212.315,3.99999,-140.032,215.787,3.99999,-150.541,218.739,3.99999,-161.208,221.164,3.99999,-172.007,223.056,3.99999,-182.912,224.411,3.99999,-193.897,225.226,3.99999,-204.935,225.497,3.99999,-215.75,0.250019,4,-9.50859,10.1317,4,-9.75728,20.2393,4,-10.5029,30.2982,4,-11.7435,40.284,4,-13.4762,50.1728,4,-15.6968,59.9408,4,-18.3999,69.5644,4,-21.5791,79.0203,4,-25.2266,88.286,4,-29.3337,97.3389,4,-33.8905,106.157,4,-38.8861,114.72,4,-44.3083,123.006,4,-50.1442,130.996,4,-56.3796,138.671,4,-62.9995,146.011,4,-69.988,153,4,-77.3283,159.62,4,-85.0027,165.855,4,-92.9927,171.691,4,-101.279,177.113,4,-109.842,182.109,3.99999,-118.66,186.666,3.99999,-127.713,190.773,3.99999,-136.979,194.421,3.99999,-146.435,197.6,3.99999,-156.058,200.303,3.99999,-165.826,202.524,3.99999,-175.715,204.256,3.99999,-185.701,205.497,3.99999,-195.76,206.243,3.99999,-205.868,206.491,3.99999,-215.75,0.250036,4,-17.511,9.73901,4,-17.7501,19.4549,4,-18.4667,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,66.8685,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5678,93.5666,4,-40.9481,102.043,4,-45.75,110.274,4,-50.9621,118.239,4,-56.5718,125.92,4,-62.5655,133.297,4,-68.9289,140.352,4,-75.6466,147.07,4,-82.7024,153.434,4,-90.0794,159.427,4,-97.7597,165.037,4,-105.725,170.249,3.99999,-113.956,175.051,3.99999,-122.432,179.432,3.99999,-131.135,183.38,3.99999,-140.041,186.886,3.99999,-149.131,189.942,3.99999,-158.381,192.54,3.99999,-167.771,194.675,3.99999,-177.276,196.341,3.99999,-186.875,197.533,3.99999,-196.544,198.25,3.99999,-206.26,198.489,3.99999,-215.75,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9242,92.8593,4,-42.2713,101.272,4,-47.037,109.44,4,-52.2097,117.345,4,-57.777,124.968,4,-63.7254,132.289,4,-70.0407,139.291,4,-76.7076,145.958,4,-83.7101,152.274,4,-91.0313,158.222,4,-98.6535,163.79,4,-106.559,168.962,3.99999,-114.727,173.728,3.99999,-123.14,178.075,3.99999,-131.776,181.994,3.99999,-140.615,185.473,3.99999,-149.636,188.506,3.99999,-158.817,191.085,3.99999,-168.135,193.203,3.99999,-177.569,194.856,3.99999,-187.095,196.04,3.99999,-196.691,196.751,3.99999,-206.334,196.989,3.99999,-215.75,8.99996,1,17.4995,8.99996,1,19,8.99998,1,9.49714,9.00002,1,-9.50859,9.00004,0.999999,-17.511,9.00004,0.999999,-19.0114,8.99996,4,17.4995,8.99996,4,19,8.99998,4,9.49714,9.00002,4,-9.50859,9.00004,4,-17.511,9.00004,4,-19.0114,9.25001,4,-8,9.24999,4,8,0.249993,4,6.5,0.25001,4,-6.5,223.5,3.99999,-224.75,208,3.99999,-224.75,222,3.99999,-215.75,209.5,3.99999,-215.75,192.513,-37.5119,-212.989,0.24996,8.30516e-7,19,11.5305,8.18144e-7,18.717,23.0336,7.81055e-7,17.8685,34.4812,7.19338e-7,16.4565,45.8457,6.33144e-7,14.4846,57.0998,5.22678e-7,11.9575,68.2164,3.88207e-7,8.88113,79.1686,2.30055e-7,5.26305,89.93,4.86037e-8,1.11192,100.475,-1.5571e-7,-3.56224,110.778,-3.82395e-7,-8.74818,120.814,-6.30905e-7,-14.4334,130.558,-9.0064e-7,-20.6042,139.989,-0.00000119095,-27.2458,149.082,-0.00000150114,-34.3421,157.816,-0.00000183046,-41.876,166.17,-0.00000217811,-49.8293,174.123,-0.00000254326,-58.183,181.657,-0.00000292503,-66.917,188.753,-0.00000332251,-76.0101,195.395,-0.00000373472,-85.4404,201.566,-0.00000416068,-95.1853,207.251,-0.00000459936,-105.221,212.437,-0.00000504971,-115.524,217.111,-0.00000551064,-126.069,221.263,-0.00000598104,-136.83,224.881,-0.00000645978,-147.783,227.957,-0.0000069457,-158.899,230.484,-0.00000743764,-170.153,232.456,-0.0000079344,-181.518,233.868,-0.00000843479,-192.966,234.717,-0.00000893761,-204.469,235,-0.00000943073,-215.75,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9242,92.8593,-0.00000184774,-42.2713,101.272,-0.00000205605,-47.037,109.44,-0.00000228216,-52.2097,117.345,-0.00000252551,-57.777,124.968,-0.00000278553,-63.7254,132.289,-0.00000306157,-70.0407,139.291,-0.00000335299,-76.7076,145.958,-0.00000365908,-83.7101,152.274,-0.0000039791,-91.0313,158.222,-0.00000431228,-98.6535,163.79,-0.00000465782,-106.559,168.962,-0.00000501488,-114.727,173.728,-0.00000538261,-123.14,178.075,-0.00000576012,-131.776,181.994,-0.00000614649,-140.615,185.473,-0.0000065408,-149.636,188.506,-0.0000069421,-158.817,191.085,-0.00000734943,-168.135,193.203,-0.00000776179,-177.569,194.856,-0.0000081782,-187.095,196.04,-0.00000859766,-196.691,196.751,-0.00000901914,-206.334,196.989,-0.00000943073,-215.75,233.218,-4.00001,-204.542,233.5,-4.00001,-215.75,233.218,-1.00001,-204.542,0.24996,-0.999999,19,11.5305,-0.999999,18.717,23.0336,-0.999999,17.8685,34.4812,-0.999999,16.4565,45.8457,-0.999999,14.4846,57.0998,-0.999999,11.9575,68.2164,-1,8.88113,79.1686,-1,5.26305,89.93,-1,1.11192,100.475,-1,-3.56224,110.778,-1,-8.74818,120.814,-1,-14.4334,130.558,-1,-20.6042,139.989,-1,-27.2458,149.082,-1,-34.3421,157.816,-1,-41.876,166.17,-1,-49.8293,174.123,-1,-58.183,181.657,-1,-66.917,188.753,-1,-76.0101,195.395,-1,-85.4404,201.566,-1,-95.1853,207.251,-1,-105.221,212.437,-1.00001,-115.524,217.111,-1.00001,-126.069,221.263,-1.00001,-136.83,224.881,-1.00001,-147.783,227.957,-1.00001,-158.899,230.484,-1.00001,-170.153,232.456,-1.00001,-181.518,233.868,-1.00001,-192.966,234.717,-1.00001,-204.469,235,-1.00001,-215.75,0.250039,-1,-19.0114,9.66539,-1,-19.2487,19.3078,-1,-19.96,28.9038,-1,-21.1435,38.4301,-1,-22.7964,47.8638,-1,-24.9148,57.1823,-1,-27.4936,66.363,-1,-30.5264,75.3838,-1,-34.0061,84.223,-1,-37.9242,92.8593,-1,-42.2713,101.272,-1,-47.037,109.44,-1,-52.2097,117.345,-1,-57.777,124.968,-1,-63.7254,132.289,-1,-70.0407,139.291,-1,-76.7076,145.958,-1,-83.7101,152.274,-1,-91.0313,158.222,-1,-98.6535,163.79,-1,-106.559,168.962,-1.00001,-114.727,173.728,-1.00001,-123.14,178.075,-1.00001,-131.776,181.994,-1.00001,-140.615,185.473,-1.00001,-149.636,188.506,-1.00001,-158.817,191.085,-1.00001,-168.135,193.203,-1.00001,-177.569,194.856,-1.00001,-187.095,196.04,-1.00001,-196.691,196.751,-1.00001,-206.334,196.989,-1.00001,-215.75,0.249963,-0.999999,17.4995,11.4568,-0.999999,17.2183,22.8865,-0.999999,16.3752,34.261,-0.999999,14.9723,45.553,-0.999999,13.013,56.7352,-1,10.502,67.7808,-1,7.44529,78.6631,-1,3.8503,89.3558,-1,-0.274315,99.8333,-1,-4.91864,110.07,-1,-10.0715,120.042,-1,-15.7204,129.725,-1,-21.8518,139.095,-1,-28.451,148.13,-1,-35.5019,156.808,-1,-42.9877,165.109,-1,-50.8903,173.011,-1,-59.1907,180.497,-1,-67.8688,187.548,-1,-76.9039,194.147,-1,-86.274,200.279,-1,-95.9567,205.928,-1,-105.928,211.081,-1.00001,-116.166,215.725,-1.00001,-126.643,219.85,-1.00001,-137.336,223.445,-1.00001,-148.218,226.502,-1.00001,-159.264,229.013,-1.00001,-170.446,230.972,-1.00001,-181.738,232.375,-1.00001,-193.113,233.5,-1.00001,-215.75,0.249979,-1,9.49714,11.0642,-1,9.22555,22.1021,-1,8.41135,33.0868,-1,7.05653,43.9918,-1,5.16438,54.7908,-1,2.7394,65.4578,-1,-0.212544,75.9672,-1,-3.68433,86.2935,-1,-7.66759,96.4119,-1,-12.1527,106.298,-1,-17.129,115.928,-1,-22.5843,125.279,-1,-28.5056,134.328,-1,-34.8786,143.053,-1,-41.6879,151.434,-1,-48.9171,159.45,-1,-56.5489,167.082,-1,-64.5648,174.311,-1,-72.9455,181.121,-1,-81.6709,187.494,-1,-90.7199,193.415,-1,-100.071,198.87,-1,-109.701,203.847,-1.00001,-119.587,208.332,-1.00001,-129.705,212.315,-1.00001,-140.032,215.787,-1.00001,-150.541,218.739,-1.00001,-161.208,221.164,-1.00001,-172.007,223.056,-1.00001,-182.912,224.411,-1.00001,-193.897,225.226,-1.00001,-204.935,225.497,-1.00001,-215.75,0.250019,-1,-9.50859,10.1317,-1,-9.75728,20.2393,-1,-10.5029,30.2982,-1,-11.7435,40.284,-1,-13.4762,50.1728,-1,-15.6968,59.9408,-1,-18.3999,69.5644,-1,-21.5791,79.0203,-1,-25.2266,88.286,-1,-29.3337,97.3389,-1,-33.8905,106.157,-1,-38.8861,114.72,-1,-44.3083,123.006,-1,-50.1442,130.996,-1,-56.3796,138.671,-1,-62.9995,146.011,-1,-69.988,153,-1,-77.3283,159.62,-1,-85.0027,165.855,-1,-92.9927,171.691,-1,-101.279,177.113,-1,-109.842,182.109,-1.00001,-118.66,186.666,-1.00001,-127.713,190.773,-1.00001,-136.979,194.421,-1.00001,-146.435,197.6,-1.00001,-156.058,200.303,-1.00001,-165.826,202.524,-1.00001,-175.715,204.256,-1.00001,-185.701,205.497,-1.00001,-195.76,206.243,-1.00001,-205.868,206.491,-1.00001,-215.75,0.250036,-1,-17.511,9.73901,-1,-17.7501,19.4549,-1,-18.4667,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,66.8685,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5678,93.5666,-1,-40.9481,102.043,-1,-45.75,110.274,-1,-50.9621,118.239,-1,-56.5718,125.92,-1,-62.5655,133.297,-1,-68.9289,140.352,-1,-75.6466,147.07,-1,-82.7024,153.434,-1,-90.0794,159.427,-1,-97.7597,165.037,-1,-105.725,170.249,-1.00001,-113.956,175.051,-1.00001,-122.432,179.432,-1.00001,-131.135,183.38,-1.00001,-140.041,186.886,-1.00001,-149.131,189.942,-1.00001,-158.381,192.54,-1.00001,-167.771,194.675,-1.00001,-177.276,196.341,-1.00001,-186.875,197.533,-1.00001,-196.544,198.25,-1.00001,-206.26,198.489,-1.00001,-215.75,0.249963,-4,17.4995,11.4568,-4,17.2183,22.8865,-4,16.3752,34.261,-4,14.9723,45.553,-4,13.013,56.7352,-4,10.502,67.7808,-4,7.44529,78.6631,-4,3.8503,89.3558,-4,-0.274315,99.8333,-4,-4.91864,110.07,-4,-10.0715,120.042,-4,-15.7204,129.725,-4,-21.8518,139.095,-4,-28.451,148.13,-4,-35.5019,156.808,-4,-42.9877,165.109,-4,-50.8903,173.011,-4,-59.1907,180.497,-4,-67.8688,187.548,-4,-76.9039,194.147,-4,-86.274,200.279,-4,-95.9567,205.928,-4,-105.928,211.081,-4.00001,-116.166,215.725,-4.00001,-126.643,219.85,-4.00001,-137.336,223.445,-4.00001,-148.218,226.502,-4.00001,-159.264,229.013,-4.00001,-170.446,230.972,-4.00001,-181.738,232.375,-4.00001,-193.113,0.24996,-4,19,11.5305,-4,18.717,23.0336,-4,17.8685,34.4812,-4,16.4565,45.8457,-4,14.4846,57.0998,-4,11.9575,68.2164,-4,8.88113,79.1686,-4,5.26305,89.93,-4,1.11192,100.475,-4,-3.56224,110.778,-4,-8.74818,120.814,-4,-14.4334,130.558,-4,-20.6042,139.989,-4,-27.2458,149.082,-4,-34.3421,157.816,-4,-41.876,166.17,-4,-49.8293,174.123,-4,-58.183,181.657,-4,-66.917,188.753,-4,-76.0101,195.395,-4,-85.4404,201.566,-4,-95.1853,207.251,-4,-105.221,212.437,-4.00001,-115.524,217.111,-4.00001,-126.069,221.263,-4.00001,-136.83,224.881,-4.00001,-147.783,227.957,-4.00001,-158.899,230.484,-4.00001,-170.153,232.456,-4.00001,-181.518,233.868,-4.00001,-192.966,234.717,-4.00001,-204.469,235,-4.00001,-215.75,0.249979,-4,9.49714,11.0642,-4,9.22555,22.1021,-4,8.41135,33.0868,-4,7.05653,43.9918,-4,5.16438,54.7908,-4,2.7394,65.4578,-4,-0.212544,75.9672,-4,-3.68433,86.2935,-4,-7.66759,96.4119,-4,-12.1527,106.298,-4,-17.129,115.928,-4,-22.5843,125.279,-4,-28.5056,134.328,-4,-34.8786,143.053,-4,-41.6879,151.434,-4,-48.9171,159.45,-4,-56.5489,167.082,-4,-64.5648,174.311,-4,-72.9455,181.121,-4,-81.6709,187.494,-4,-90.7199,193.415,-4,-100.071,198.87,-4,-109.701,203.847,-4.00001,-119.587,208.332,-4.00001,-129.705,212.315,-4.00001,-140.032,215.787,-4.00001,-150.541,218.739,-4.00001,-161.208,221.164,-4.00001,-172.007,223.056,-4.00001,-182.912,224.411,-4.00001,-193.897,225.226,-4.00001,-204.935,225.497,-4.00001,-215.75,0.250019,-4,-9.50859,10.1317,-4,-9.75728,20.2393,-4,-10.5029,30.2982,-4,-11.7435,40.284,-4,-13.4762,50.1728,-4,-15.6968,59.9408,-4,-18.3999,69.5644,-4,-21.5791,79.0203,-4,-25.2266,88.286,-4,-29.3337,97.3389,-4,-33.8905,106.157,-4,-38.8861,114.72,-4,-44.3083,123.006,-4,-50.1442,130.996,-4,-56.3796,138.671,-4,-62.9995,146.011,-4,-69.988,153,-4,-77.3283,159.62,-4,-85.0027,165.855,-4,-92.9927,171.691,-4,-101.279,177.113,-4,-109.842,182.109,-4.00001,-118.66,186.666,-4.00001,-127.713,190.773,-4.00001,-136.979,194.421,-4.00001,-146.435,197.6,-4.00001,-156.058,200.303,-4.00001,-165.826,202.524,-4.00001,-175.715,204.256,-4.00001,-185.701,205.497,-4.00001,-195.76,206.243,-4.00001,-205.868,206.491,-4.00001,-215.75,0.250036,-4,-17.511,9.73901,-4,-17.7501,19.4549,-4,-18.4667,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,66.8685,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5678,93.5666,-4,-40.9481,102.043,-4,-45.75,110.274,-4,-50.9621,118.239,-4,-56.5718,125.92,-4,-62.5655,133.297,-4,-68.9289,140.352,-4,-75.6466,147.07,-4,-82.7024,153.434,-4,-90.0794,159.427,-4,-97.7597,165.037,-4,-105.725,170.249,-4,-113.956,175.051,-4.00001,-122.432,179.432,-4.00001,-131.135,183.38,-4.00001,-140.041,186.886,-4.00001,-149.131,189.942,-4.00001,-158.381,192.54,-4.00001,-167.771,194.675,-4.00001,-177.276,196.341,-4.00001,-186.875,197.533,-4.00001,-196.544,198.25,-4.00001,-206.26,198.489,-4.00001,-215.75,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9242,92.8593,-4,-42.2713,101.272,-4,-47.037,109.44,-4,-52.2097,117.345,-4,-57.777,124.968,-4,-63.7254,132.289,-4,-70.0407,139.291,-4,-76.7076,145.958,-4,-83.7101,152.274,-4,-91.0313,158.222,-4,-98.6535,163.79,-4,-106.559,168.962,-4.00001,-114.727,173.728,-4.00001,-123.14,178.075,-4.00001,-131.776,181.994,-4.00001,-140.615,185.473,-4.00001,-149.636,188.506,-4.00001,-158.817,191.085,-4.00001,-168.135,193.203,-4.00001,-177.569,194.856,-4.00001,-187.095,196.04,-4.00001,-196.691,196.751,-4.00001,-206.334,196.989,-4.00001,-215.75,8.99996,8.30516e-7,19,9.00004,-8.31017e-7,-19.0114,8.99996,-0.999999,17.4995,8.99996,-0.999999,19,8.99998,-1,9.49714,9.00002,-1,-9.50859,9.00004,-1,-17.511,9.00004,-1,-19.0114,8.99996,-4,17.4995,8.99996,-4,19,8.99998,-4,9.49714,9.00002,-4,-9.50859,9.00004,-4,-17.511,9.00004,-4,-19.0114,9.25001,-4,-8,9.24999,-4,8,0.249993,-4,6.5,0.25001,-4,-6.5,9.25001,-3.49691e-7,-8,9.24999,3.49691e-7,8,0.249993,2.84124e-7,6.5,0.25001,-2.84124e-7,-6.5,223.5,-4.00001,-224.75,208,-4.00001,-224.75,222,-4.00001,-215.75,209.5,-4.00001,-215.75,223.5,-0.00000982413,-224.75,208,-0.00000982413,-224.75,222,-0.00000943073,-215.75,209.5,-0.00000943073,-215.75,192.513,37.5119,-212.989],\"metadata\":{\"uvs\":0,\"generator\":\"io_three\",\"normals\":618,\"vertices\":910,\"version\":3,\"faces\":942,\"type\":\"Geometry\"}},\"straight_1\":{\"uvs\":[],\"metadata\":{\"generator\":\"io_three\",\"normals\":57,\"uvs\":0,\"vertices\":74,\"version\":3,\"faces\":108,\"type\":\"Geometry\"},\"normals\":[-4.87984e-15,-1,4.47035e-8,-1.59314e-7,0,1,-1.0621e-7,-0.00000349681,1,0,-1,0,1.59314e-7,0,-1,0.164399,0,-0.986394,0,-1,2.98023e-8,-5.29819e-9,-1,3.17891e-8,-1.0551e-14,-1,6.81196e-8,-1.32456e-8,-1,7.94738e-8,3.90529e-10,-1,4.03222e-8,1.63444e-9,-1,1.68756e-7,-0.164399,0,0.986394,1,0,0,1,0,0,-1,-1.19209e-7,-5.96046e-8,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,4.87984e-15,-1,4.47035e-8,-1.59314e-7,0,-1,-1.0621e-7,-0.00000349681,-1,1.59314e-7,0,1,0.164399,0,0.986394,0,-1,5.96046e-8,0,-1,0,1.05964e-8,-1,6.35782e-8,2.84681e-9,-1,-1.70813e-8,-1.32296e-9,-1,8.14572e-8,-0.164399,0,-0.986394,1,0,0,-1,-1.19209e-7,5.96046e-8,-1,0,0,4.87984e-15,1,-4.47035e-8,-1.0621e-7,0.00000349681,1,0,1,0,0,1,-5.96046e-8,0,1,0,1.05964e-8,1,-6.35782e-8,2.84681e-9,1,1.70813e-8,-1.32296e-9,1,-8.14572e-8,-1,1.19209e-7,-5.96046e-8,1,0,0,-4.87984e-15,1,-4.47035e-8,-1.0621e-7,0.00000349681,-1,0,1,0,0,1,-2.98023e-8,-5.29819e-9,1,-3.17891e-8,-1.0551e-14,1,-6.81196e-8,-1.32456e-8,1,-7.94738e-8,3.90529e-10,1,-4.03222e-8,1.63444e-9,1,-1.68756e-7,-1,1.19209e-7,5.96046e-8,1,0,0,-1,0,0],\"vertices\":[215.75,-4,19,215.75,-4,17.5,215.75,-4,9.50001,9.25002,-4,8.00001,215.75,-4,6.00001,215.75,-0.999999,17.5,215.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.50001,0.25,-1,9.49999,0.25,-0.999999,17.5,224.75,-4,7.50001,215.75,-4,-19,9.25002,-4,1.15241e-7,215.75,-4,-17.5,215.75,-4,-9.50001,9.25002,-4,-8.00001,215.75,-4,-6.00001,215.75,-1,-17.5,215.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.50001,0.25,-1,-9.49999,0.25,-1,-17.5,224.75,-4,-7.50001,224.75,-4,1.15241e-7,215.75,4,19,215.75,4,17.5,215.75,4,9.50001,9.25002,4,8.00001,215.75,4,6.00001,215.75,1,17.5,215.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.50001,0.25,1,9.49999,0.25,1,17.5,224.75,4,7.50001,215.75,8.30517e-7,19,9.25002,3.49691e-7,8.00001,0.25,2.84124e-7,6.50001,0.25,8.30515e-7,19,215.75,2.62269e-7,6.00001,224.75,3.27836e-7,7.50001,215.75,4,-19,9.25002,4,-2.3445e-7,215.75,4,-17.5,215.75,4,-9.50001,9.25002,4,-8.00001,215.75,4,-6.00001,215.75,0.999999,-17.5,215.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.50001,0.25,1,-9.49999,0.25,0.999999,-17.5,224.75,4,-7.50001,224.75,4,-2.3445e-7,215.75,-8.30517e-7,-19,9.25002,-2.6054e-15,-5.96046e-8,9.25002,-3.49691e-7,-8.00001,0.25,-2.84124e-7,-6.50001,0.25,-8.30515e-7,-19,215.75,-2.62269e-7,-6.00001,224.75,-2.6054e-15,-5.96046e-8,224.75,-3.27836e-7,-7.50001],\"faces\":[33,5,12,11,6,0,0,0,0,33,7,0,44,47,1,1,1,1,33,6,11,9,2,2,2,2,2,33,0,7,8,1,3,3,3,3,33,1,8,12,5,4,4,4,4,33,45,3,10,46,5,5,5,5,32,3,15,29,6,6,6,32,29,13,4,7,7,7,32,4,2,9,8,8,8,32,9,10,3,9,9,9,32,3,29,4,10,10,10,32,4,9,3,11,11,11,33,48,4,13,49,12,12,12,12,32,44,0,1,13,13,13,32,44,1,5,14,14,14,32,2,4,48,14,14,14,32,44,5,6,13,13,13,32,6,2,48,14,14,14,32,6,48,44,13,13,13,33,3,45,67,15,15,15,15,15,33,29,72,49,13,16,16,16,16,32,12,8,7,17,17,17,32,46,10,9,18,18,18,32,46,9,11,19,19,19,32,12,7,47,20,20,20,32,46,11,12,19,19,19,32,47,46,12,17,17,17,33,20,21,26,27,21,21,21,21,33,66,14,22,70,22,22,22,22,33,21,17,24,26,23,23,23,23,33,14,16,23,22,3,3,3,3,33,16,20,27,23,24,24,24,24,33,68,69,25,18,25,25,25,25,32,29,15,18,26,26,26,32,18,25,24,3,3,3,32,24,17,19,27,27,27,32,19,28,29,28,28,28,32,29,18,24,29,29,29,32,24,19,29,30,30,30,33,71,73,28,19,31,31,31,31,32,16,14,66,14,14,14,32,71,19,17,13,13,13,32,71,17,21,14,14,14,32,20,16,66,14,14,14,32,71,21,20,13,13,13,32,66,71,20,32,32,32,33,18,15,67,68,33,33,33,33,33,29,28,73,72,16,16,16,16,32,22,23,27,20,20,20,32,26,24,25,17,17,17,32,70,22,27,19,19,19,32,26,25,69,20,20,20,32,70,27,26,19,19,19,32,26,69,70,34,34,34,33,35,36,41,42,35,35,35,35,33,44,30,37,47,1,1,1,1,33,36,32,39,41,36,36,36,36,33,30,31,38,37,37,37,37,37,33,31,35,42,38,4,4,4,4,33,45,46,40,33,5,5,5,5,32,65,51,33,38,38,38,32,33,40,39,37,37,37,32,39,32,34,39,39,39,32,34,43,65,40,40,40,32,65,33,39,41,41,41,32,39,34,65,42,42,42,33,48,49,43,34,12,12,12,12,32,31,30,44,32,32,32,32,48,34,32,13,13,13,32,48,32,36,32,32,32,32,35,31,44,13,13,13,32,48,36,35,13,13,13,32,44,48,35,14,14,14,33,33,51,67,45,43,43,43,43,33,65,43,49,72,44,44,44,44,32,37,38,42,17,17,17,32,41,39,40,17,17,17,32,47,37,42,17,17,17,32,41,40,46,17,17,17,32,47,42,41,17,17,17,32,41,46,47,19,19,19,33,56,63,62,57,45,45,45,45,33,66,70,58,50,22,22,22,22,33,57,62,60,53,46,46,46,46,33,50,58,59,52,47,47,47,47,33,52,59,63,56,24,24,24,24,33,68,54,61,69,25,25,25,25,32,54,51,65,48,48,48,32,65,64,55,49,49,49,32,55,53,60,50,50,50,32,60,61,54,51,51,51,32,54,65,55,52,52,52,32,55,60,54,53,53,53,33,71,55,64,73,31,31,31,31,32,66,50,52,13,13,13,32,66,52,56,32,32,32,32,53,55,71,32,32,32,32,66,56,57,13,13,13,32,57,53,71,13,13,13,32,57,71,66,32,32,32,33,54,68,67,51,54,54,54,54,33,65,72,73,64,55,55,55,55,32,63,59,58,17,17,17,32,69,61,60,56,56,56,32,69,60,62,17,17,17,32,63,58,70,17,17,17,32,69,62,63,17,17,17,32,70,69,63,34,34,34]},\"turnout_R_ab\":{\"uvs\":[],\"vertices\":[125.221,0.999999,-19,122.852,1,-17.5,122.852,4,-17.5,125.221,4,-19,125.656,4,-17.5,128.025,4,-19,109.601,0.999999,-19,106.953,1,-17.5,125.656,1,-17.5,109.601,4,-19,106.953,4,-17.5,120.814,0.999999,-14.4335,112.105,1,-9.5,112.105,4,-9.5,110.778,4,-8.74826,100.475,4,-3.56229,89.9301,4,1.11191,108.935,4,-9.5,99.8334,4,-4.91867,61.7573,4,-19,59.9408,4,-18.3999,79.1685,4,5.26306,89.3559,4,-0.274323,108.935,1,-9.5,99.8334,1,-4.91867,61.7573,0.999999,-19,59.9408,0.999999,-18.3999,56.6889,4,-17.5,65.98,1,9.5,57.0998,1,11.9575,68.2164,4,8.88113,78.663,4,3.85031,89.3559,1,-0.274323,56.6889,1,-17.5,45.8457,1,14.4846,65.9801,4,9.49999,67.7808,4,7.44529,78.663,1,3.85031,90.4274,1,-9.5,86.2935,1,-7.66759,34.4812,1,16.4565,60.356,4,9.49999,67.7808,1,7.44529,75.9671,1,-3.68433,90.4274,4,-9.49999,86.2935,4,-7.66759,26.0211,1,17.5,60.356,1,9.5,65.4578,1,-0.212544,75.9671,4,-3.68433,26.0211,4,17.5,23.0336,4,17.8685,54.7908,1,2.7394,65.4578,4,-0.212545,23.7784,0.999999,-19,19.4549,0.999999,-18.4667,11.5305,4,18.717,54.7908,4,2.7394,43.9918,1,5.16438,23.7784,4,-19,19.4549,4,-18.4667,9.73901,0.999999,-17.7501,9.00015,4,19,43.9918,4,5.16438,33.0868,1,7.05653,9.73901,4,-17.7501,9.00004,0.999999,-17.511,33.0868,4,7.05653,22.1021,1,8.41135,9.00004,4,-17.511,0.250036,0.999999,-17.511,0.249963,4,17.5,0.24996,4,19,22.1021,4,8.41135,11.0642,1,9.22555,0.250036,4,-17.511,0.250039,4,-19,0.25001,4,-6,0.250019,4,-9.49998,0.250017,1,-9.5,0.249964,0.999999,17.5,0.249963,1,17.4995,0.249979,1,9.49714,0.249979,4,9.49714,0.249993,4,6,11.0642,4,9.22555,8.99998,1,9.49714,-8.74999,4,-7.5,8.99998,4,9.49714,-8.75001,4,7.5,125.221,-1,-19,122.852,-1,-17.5,122.852,-4,-17.5,125.221,-4,-19,125.656,-4,-17.5,128.025,-4,-19,109.601,-1,-19,106.953,-1,-17.5,125.656,-1,-17.5,109.601,-4,-19,106.953,-4,-17.5,120.814,-1,-14.4335,120.814,-6.30909e-7,-14.4335,128.025,-8.30516e-7,-19,110.778,-3.82399e-7,-8.74826,112.105,-1,-9.5,100.475,-1.55712e-7,-3.56229,112.105,-4,-9.5,110.778,-4,-8.74826,89.9301,4.8603e-8,1.11191,100.475,-4,-3.56229,79.1685,2.30056e-7,5.26306,89.9301,-4,1.11191,108.935,-4,-9.5,99.8334,-4,-4.91867,61.7573,-4,-19,59.9408,-4,-18.3999,68.2164,3.88207e-7,8.88113,79.1685,-4,5.26306,89.3559,-4,-0.274322,108.935,-1,-9.5,99.8334,-1,-4.91867,61.7573,-1,-19,59.9408,-1,-18.3999,56.6889,-4,-17.5,57.0998,5.22678e-7,11.9575,65.98,-0.999999,9.5,57.0998,-0.999999,11.9575,68.2164,-4,8.88113,78.663,-4,3.85031,89.3559,-1,-0.274322,56.6889,-1,-17.5,45.8457,6.33144e-7,14.4846,45.8457,-0.999999,14.4846,65.9801,-4,9.49999,67.7808,-4,7.44529,78.663,-1,3.85031,90.4274,-1,-9.5,86.2935,-1,-7.66759,34.4812,7.19338e-7,16.4565,34.4812,-0.999999,16.4565,60.356,-4,9.49999,67.7808,-1,7.44529,75.9671,-1,-3.68433,90.4274,-4,-9.49999,86.2935,-4,-7.66759,23.0336,7.81055e-7,17.8685,26.0211,-0.999998,17.5,60.356,-0.999999,9.5,65.4578,-1,-0.212544,75.9671,-4,-3.68433,11.5305,8.18144e-7,18.717,26.0211,-4,17.5,23.0336,-4,17.8685,54.7908,-1,2.7394,65.4578,-4,-0.212544,23.7784,-1,-19,19.4549,-1,-18.4667,9.00015,8.30515e-7,19,11.5305,-4,18.717,54.7908,-4,2.7394,43.9918,-1,5.16438,23.7784,-4,-19,19.4549,-4,-18.4667,9.73901,-1,-17.7501,9.00015,-4,19,43.9918,-4,5.16438,33.0868,-1,7.05653,9.73901,-4,-17.7501,9.00004,-1,-17.511,33.0868,-4,7.05653,22.1021,-1,8.41135,9.00004,-4,-17.511,0.250036,-1,-17.511,0.249963,-4,17.5,0.24996,-4,19,22.1021,-4,8.41135,11.0642,-1,9.22555,0.250036,-4,-17.511,0.250039,-4,-19,0.250039,-8.30515e-7,-19,0.25001,-2.62268e-7,-6,0.25001,-4,-6,0.250019,-4,-9.49998,0.250017,-1,-9.5,0.249964,-0.999998,17.5,0.249963,-0.999999,17.4995,0.249979,-1,9.49714,0.249979,-4,9.49714,0.249993,-4,6,0.249993,2.62268e-7,6,0.24996,8.30515e-7,19,11.0642,-4,9.22555,8.99998,-1,9.49714,-8.74999,-4,-7.5,-8.74999,-3.27835e-7,-7.5,8.99998,-4,9.49714,-8.75001,-4,7.5,-8.75001,3.27835e-7,7.5],\"normals\":[-0.534995,0,-0.844855,0.111157,0,0.993803,0,1,0,0.492896,8.4744e-7,0.870088,0.492896,0,0.870088,0.492895,0,0.870089,0.492896,-0.00000190559,0.870088,0.492898,0,0.870087,0.359893,0,0.932994,0.313679,0,0.949529,0,1,0,0,1,0,-0.449609,-3.11977e-7,-0.893226,-0.313679,0,-0.949529,-0.405239,0,-0.914211,-0.266711,0,-0.963777,0.2191,0,0.975702,-0.359892,0,-0.932994,0.449609,0,0.893225,0.170958,0,0.985278,0,1,0,-2.24718e-7,1,-8.1203e-7,-1.51608e-7,1,-3.93033e-7,2.07635e-7,1,3.66528e-7,0,1,-5.20414e-8,1.67115e-9,1,-4.75651e-8,-2.88375e-8,1,-9.66355e-8,5.03246e-8,1,4.4104e-8,3.91862e-8,1,-1.40205e-8,8.2554e-8,1,1.51878e-7,-0.313679,0,-0.949529,0.40524,3.86662e-7,0.91421,-0.266711,-4.12639e-8,-0.963777,0.35989,5.74434e-8,0.932995,0,1,-4.469e-8,-1.89797e-8,0.999995,0.00322308,-3.91239e-7,1,-0.00000231527,-2.03793e-7,1,-9.54707e-7,-4.5931e-7,1,-0.00000145668,2.23043e-14,1,-1.31534e-7,3.46846e-8,1,4.85011e-7,-4.07253e-9,1,-4.9143e-8,-6.89949e-9,1,-5.59403e-8,-7.53277e-9,1,-1.53462e-7,-9.34533e-8,1,-2.71173e-7,4.80487e-7,1,0.00000103263,0,1,-1.5706e-7,0,1,2.91563e-7,-8.73373e-14,1,-7.15254e-7,-8.58041e-14,1,-7.15254e-7,2.574e-7,1,4.62695e-7,8.07787e-9,1,3.00647e-8,1.43312e-8,1,1.08173e-8,1.38127e-8,1,1.66043e-8,6.71869e-9,1,2.65896e-8,0.0000017505,1,0.00000519956,7.94676e-9,1,2.45649e-8,0,1,-1.71128e-7,5.28776e-9,1,-1.65352e-7,-9.119e-10,1,-7.23403e-8,-2.10661e-8,1,-7.86435e-7,-2.12719e-8,1,1.04611e-7,1.43295e-8,1,1.46537e-8,1.50635e-8,1,1.40495e-8,2.14784e-15,1,1.49012e-8,1.36506e-7,1,5.68177e-7,-2.73892e-9,1,4.69816e-9,-9.37245e-8,1,-2.87867e-7,-2.22886e-7,1,-7.26195e-7,0.31368,5.74439e-8,0.949529,0.0735638,0,0.99729,0.266711,8.61655e-8,0.963776,0.122409,0,0.99248,0.2191,2.87219e-8,0.975702,7.94728e-9,1,-4.76837e-8,-9.93411e-9,1,-5.96047e-8,-7.20405e-15,1,-6.81199e-8,-3.86699e-7,1,-0.00000100249,-1.17089e-7,1,-4.2311e-7,1.92367e-7,1,8.56653e-7,3.30491e-10,1,-5.96046e-8,-4.78997e-9,1,-5.29058e-8,-2.1548e-8,1,-2.18783e-7,6.70923e-9,1,-2.24938e-8,9.02292e-9,1,-1.26879e-8,0,1,0,0.0735639,0,0.99729,0.170958,0,0.985278,0.307795,0,0.951453,0.122409,0,0.99248,0.405239,0,0.914211,0,0,1,-1,0,-0.00000224171,-1,0,-0.00000256301,-1,4.66912e-7,-0.0000020294,-1,0,-0.00000224171,-1,-6.0714e-7,-0.00000233627,-1,5.51298e-8,-0.00000227874,-1,0,-0.00000197688,-0.986871,-0.161512,-0.00000196273,-1,-7.45058e-8,-0.00000217556,-1,0,-0.00000404365,-1,2.36664e-7,-0.00000196812,-1,0,-0.00000404365,-1,-0.00000524216,-0.00000254466,0.073564,0,0.99729,0.164399,0,-0.986394,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,-1.11879e-7,0.99248,0.164399,0,0.986394,0.130446,0,0.991455,-1,0,-8.90096e-7,0,1,0,0.266712,0,0.963776,0.266711,0,0.963776,0.266711,-2.62115e-7,0.963777,0.266711,-2.06703e-7,0.963777,0.534996,0,0.844855,0.534997,0,0.844854,0.534996,-0.00000134076,0.844854,0.534997,0,0.844854,0,0.00000190735,-1,-7.93166e-8,0.00000333786,-1,1.51786e-7,0,1,-1.6957e-7,0.00000254313,1,1.48022e-7,0,-1,-0.534995,0,-0.844855,0,-1,0,0.492896,-8.4744e-7,0.870088,0.492896,0,0.870088,0.492896,0.00000165362,0.870088,0.492898,0,0.870087,0,-1,0,0,-1,0,-0.449609,3.11977e-7,-0.893226,-0.266711,0,-0.963777,0,-1,1.04083e-7,-4.1527e-7,-1,-7.33057e-7,-1.70711e-7,-1,-3.8512e-7,1.12359e-7,-1,4.06015e-7,-1.96762e-14,-1,1.16036e-7,5.3953e-8,-1,1.6332e-7,-4.18842e-8,-1,-7.4103e-8,-3.30261e-8,-1,1.56203e-8,-4.48977e-8,-1,-5.85904e-8,0,-1,0,4.92677e-8,-1,1.66611e-7,-0.313679,-5.54751e-8,-0.949529,0.40524,-3.86662e-7,0.91421,-0.266711,4.12639e-8,-0.963777,0.35989,0,0.932995,5.28777e-9,-1,-7.44035e-8,4.76479e-8,-1,6.45952e-7,0,-1,-1.48807e-8,-6.61553e-9,-1,5.23625e-8,0.00000158106,-1,0.00000478598,-6.7929e-14,-1,-5.56309e-7,-7.32463e-9,-1,-5.81058e-7,-6.67365e-14,-1,-5.56309e-7,-2.82085e-8,-1,2.23273e-7,0,-1,0,0,-1,3.49875e-7,0,-1,-4.83263e-8,2.92488e-7,-1,7.11181e-7,2.3451e-8,-1,1.04148e-7,2.4677e-14,-1,-1.45526e-7,-3.07164e-7,-1,-8.19867e-7,2.2847e-7,-1,5.01773e-7,-1.20875e-9,-1,8.7885e-8,-6.15996e-8,-1,-2.27146e-7,-4.0129e-7,-1,-0.00000228251,-1.90005e-8,-0.999994,0.00336321,0,-1,4.469e-8,-1.22906e-8,-1,-9.34148e-8,-9.29987e-10,-1,4.36732e-8,3.69955e-8,-1,5.99041e-7,3.91887e-7,-1,0.00000109295,1.50349e-14,-1,1.04308e-7,3.07136e-15,-1,1.04308e-7,1.80803e-9,-1,6.68838e-8,3.35707e-10,-1,4.67165e-8,5.40685e-9,-1,6.26621e-8,1.3409e-14,-1,2.60224e-7,-2.05218e-8,-1,6.65346e-9,-6.25059e-9,-1,2.13235e-8,-3.35578e-8,-1,-6.72447e-8,-4.59746e-8,-1,-1.25462e-7,-4.6328e-8,-1,-1.27026e-7,0.266711,8.61655e-8,0.963777,0.2191,5.74437e-8,0.975702,-7.94728e-9,-1,4.76837e-8,-3.55784e-7,-1,-8.02638e-7,-1.37709e-7,-1,-4.16853e-7,3.22962e-8,-1,4.37832e-7,9.93411e-9,-1,5.96047e-8,1.71216e-9,-1,6.81754e-8,-2.14441e-8,-1,-1.07808e-7,5.53928e-8,-1,2.19722e-7,2.31339e-9,-1,5.96046e-8,3.68108e-9,-1,6.15742e-8,4.22992e-9,-1,7.07548e-8,0.122409,0,0.99248,-1,-4.66914e-7,-0.00000256301,-1,0,-0.00000224171,-1,0,-0.0000021628,-1,-1.40796e-7,-0.00000233627,-1,4.05773e-7,-0.00000227874,-0.987922,0.154951,-0.00000197897,-1,7.45058e-8,-0.00000217556,-1,0.00000725842,-0.00000196812,-1,6.28157e-7,-0.00000254466,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,8.26813e-8,0.99248,0.266711,0,0.963777,0.266711,2.62119e-7,0.963776,0.266711,2.07006e-7,0.963776,0.266711,0,0.963776,0.534997,0,0.844854,0.534996,0,0.844854,0.534996,0.0000019966,0.844855,0,-0.00000190735,-1,-7.93166e-8,-0.00000333786,-1,1.51786e-7,0,1,-1.6957e-7,-0.00000254313,1,1.48022e-7,0,-1],\"metadata\":{\"generator\":\"io_three\",\"normals\":228,\"uvs\":0,\"vertices\":199,\"version\":3,\"faces\":288,\"type\":\"Geometry\"},\"faces\":[33,0,1,2,3,0,0,0,0,33,151,56,62,158,1,1,1,1,33,3,2,4,5,2,2,2,2,32,12,13,14,3,3,3,32,104,102,11,4,4,4,32,12,14,104,5,5,5,32,104,11,12,6,6,6,33,7,6,9,10,7,7,7,7,33,109,16,21,111,8,8,8,8,33,111,21,30,117,9,9,9,9,32,20,27,10,2,2,2,32,10,9,19,10,10,10,32,20,10,19,11,11,11,33,23,24,18,17,12,12,12,12,33,25,26,20,19,13,13,13,13,33,24,32,22,18,14,14,14,14,33,27,20,26,33,15,15,15,15,33,132,125,29,34,16,16,16,16,33,32,37,31,22,17,17,17,17,33,104,14,15,106,18,18,18,18,33,139,132,34,40,19,19,19,19,32,36,41,35,20,20,20,32,35,30,21,21,21,21,32,21,16,15,22,22,22,32,15,14,13,23,23,23,32,13,17,18,24,24,24,32,13,18,22,25,25,25,32,21,15,13,26,26,26,32,36,35,21,27,27,27,32,31,36,21,28,28,28,32,21,13,22,29,29,29,32,31,21,22,2,2,2,33,37,42,36,31,30,30,30,30,33,44,45,39,38,31,31,31,31,33,41,36,42,47,32,32,32,32,33,43,39,45,49,33,33,33,33,32,68,74,86,2,2,2,32,86,82,81,34,34,34,32,81,80,46,35,35,35,32,46,40,34,36,36,36,32,34,29,28,37,37,37,32,47,42,37,38,38,38,32,34,28,47,39,39,39,32,81,46,34,40,40,40,32,68,86,81,41,41,41,32,64,68,81,42,42,42,32,81,34,47,43,43,43,32,47,37,32,44,44,44,32,32,24,23,45,45,45,32,23,12,11,46,46,46,32,11,8,1,47,47,47,32,1,0,6,48,48,48,32,1,6,7,49,49,49,32,23,11,1,50,50,50,32,47,32,23,51,51,51,32,64,81,47,52,52,52,32,58,64,47,53,53,53,32,47,23,1,54,54,54,32,1,7,33,20,20,20,32,33,26,25,55,55,55,32,25,54,55,2,2,2,32,55,61,66,56,56,56,32,66,70,79,57,57,57,32,66,79,38,58,58,58,32,25,55,66,59,59,59,32,33,25,66,60,60,60,32,33,66,38,61,61,61,32,52,58,47,62,62,62,32,48,52,47,63,63,63,32,1,33,38,64,64,64,32,1,38,39,65,65,65,32,48,47,1,66,66,66,32,1,39,43,67,67,67,32,1,43,48,68,68,68,33,48,43,49,53,69,69,69,69,33,146,51,56,151,70,70,70,70,33,52,48,53,57,71,71,71,71,33,59,60,55,54,72,72,72,72,33,58,52,57,63,73,73,73,73,32,77,87,89,74,74,74,32,84,83,88,20,20,20,32,77,89,84,75,75,75,32,44,78,77,76,76,76,32,49,45,44,77,77,77,32,57,53,49,78,78,78,32,67,63,57,79,79,79,32,85,73,67,2,2,2,32,84,88,85,2,2,2,32,44,77,84,80,80,80,32,57,49,44,81,81,81,32,85,67,57,82,82,82,32,44,84,85,83,83,83,32,85,57,44,84,84,84,32,75,69,65,2,2,2,32,65,60,59,2,2,2,32,59,76,75,2,2,2,32,65,59,75,85,85,85,33,61,55,60,65,86,86,86,86,33,64,58,63,67,87,87,87,87,33,66,61,65,69,88,88,88,88,33,68,64,67,73,89,89,89,89,33,106,15,16,109,90,90,90,90,33,70,66,69,75,91,91,91,91,32,70,75,76,92,92,92,32,181,77,78,93,93,93,32,181,78,79,94,94,94,32,70,76,180,95,95,95,32,181,79,70,96,96,96,32,70,180,181,97,97,97,32,191,72,71,98,98,98,32,80,81,82,99,99,99,32,191,71,80,100,100,100,32,83,84,190,101,101,101,32,191,80,82,102,102,102,32,82,83,190,103,103,103,32,82,190,191,104,104,104,33,74,68,73,85,105,105,105,105,33,87,77,181,195,106,106,106,106,33,82,86,88,83,91,91,91,91,32,46,50,51,107,107,107,32,146,139,40,108,108,108,32,46,51,146,109,109,109,32,146,40,46,110,110,110,33,84,89,198,190,111,111,111,111,33,86,74,85,88,112,112,112,112,33,89,87,195,198,113,113,113,113,32,50,71,72,114,114,114,32,72,62,56,2,2,2,32,56,51,50,2,2,2,32,72,56,50,2,2,2,32,117,30,35,115,115,115,32,28,29,125,116,116,116,32,117,35,28,117,117,117,32,117,28,125,118,118,118,32,8,11,102,119,119,119,32,103,5,4,120,120,120,32,8,102,103,121,121,121,32,8,103,4,122,122,122,33,1,8,4,2,91,91,91,91,33,12,23,17,13,123,123,123,123,33,38,79,78,44,124,124,124,124,33,33,7,10,27,125,125,125,125,33,47,28,35,41,126,126,126,126,33,46,80,71,50,127,127,127,127,33,90,93,92,91,128,128,128,128,33,151,158,165,159,1,1,1,1,33,93,95,94,92,129,129,129,129,32,108,107,105,130,130,130,32,105,101,102,131,131,131,32,104,108,105,5,5,5,32,105,102,104,132,132,132,33,97,100,99,96,133,133,133,133,33,109,111,118,112,8,8,8,8,33,111,117,128,118,9,9,9,9,32,116,115,99,134,134,134,32,99,100,124,134,134,134,32,116,99,124,135,135,135,33,120,113,114,121,136,136,136,136,33,122,115,116,123,13,13,13,13,33,121,114,119,130,14,14,14,14,33,124,131,123,116,137,137,137,137,33,132,133,127,125,16,16,16,16,33,130,119,129,136,17,17,17,17,33,104,106,110,108,18,18,18,18,33,139,140,133,132,19,19,19,19,32,114,113,107,138,138,138,32,107,108,110,139,139,139,32,110,112,118,140,140,140,32,118,128,134,141,141,141,32,134,141,135,142,142,142,32,134,135,129,143,143,143,32,110,118,134,144,144,144,32,114,107,110,145,145,145,32,134,129,119,146,146,146,32,119,114,110,147,147,147,32,119,110,134,148,148,148,33,136,129,135,142,149,149,149,149,33,144,137,138,145,150,150,150,150,33,141,148,142,135,151,151,151,151,33,143,150,145,138,152,152,152,152,32,137,184,173,153,153,153,32,169,164,157,154,154,154,32,137,173,169,155,155,155,32,137,169,157,156,156,156,32,157,156,122,134,134,134,32,122,123,131,157,157,157,32,97,96,90,158,158,158,32,157,122,131,159,159,159,32,97,90,91,160,160,160,32,137,157,131,161,161,161,32,131,97,91,162,162,162,32,91,98,101,163,163,163,32,101,105,120,164,164,164,32,120,121,130,165,165,165,32,130,136,142,166,166,166,32,148,126,127,167,167,167,32,130,142,148,168,168,168,32,91,101,120,169,169,169,32,120,130,148,170,170,170,32,148,127,133,171,171,171,32,133,140,147,172,172,172,32,147,185,186,173,173,173,32,186,187,193,174,174,174,32,193,177,171,175,175,175,32,186,193,171,176,176,176,32,133,147,186,177,177,177,32,120,148,133,178,178,178,32,131,91,120,179,179,179,32,137,131,120,180,180,180,32,120,133,186,181,181,181,32,186,171,167,182,182,182,32,186,167,161,183,183,183,32,138,137,120,184,184,184,32,143,138,120,185,185,185,32,186,161,154,186,186,186,32,149,143,120,187,187,187,32,120,186,154,188,188,188,32,154,149,120,189,189,189,33,149,155,150,143,69,69,69,69,33,146,151,159,153,70,70,70,70,33,154,160,155,149,190,190,190,190,33,162,156,157,163,72,72,72,72,33,161,166,160,154,191,191,191,191,32,197,194,182,192,192,192,32,182,183,144,162,162,162,32,144,145,150,193,193,193,32,150,155,160,194,194,194,32,160,166,170,134,134,134,32,170,176,192,195,195,195,32,192,196,188,134,134,134,32,189,197,182,196,196,196,32,192,188,189,197,197,197,32,160,170,192,198,198,198,32,144,150,160,199,199,199,32,189,182,144,200,200,200,32,160,192,189,201,201,201,32,144,160,189,202,202,202,32,168,172,178,134,134,134,32,178,179,162,134,134,134,32,162,163,168,134,134,134,32,178,162,168,135,135,135,33,164,168,163,157,86,86,86,86,33,167,170,166,161,87,87,87,87,33,169,172,168,164,88,88,88,88,33,171,176,170,167,203,203,203,203,33,106,109,112,110,90,90,90,90,33,173,178,172,169,91,91,91,91,32,184,183,182,204,204,204,32,180,179,178,95,95,95,32,180,178,173,205,205,205,32,184,182,181,206,206,206,32,180,173,184,207,207,207,32,184,181,180,208,208,208,32,174,175,191,98,98,98,32,190,189,188,101,101,101,32,187,186,185,209,209,209,32,190,188,187,103,103,103,32,185,174,191,210,210,210,32,190,187,185,211,211,211,32,191,190,185,212,212,212,33,177,192,176,171,105,105,105,105,33,194,195,181,182,106,106,106,106,33,187,188,196,193,91,91,91,91,32,153,152,147,213,213,213,32,147,140,139,214,214,214,32,146,153,147,109,109,109,32,147,139,146,215,215,215,33,189,190,198,197,111,111,111,111,33,193,196,192,177,112,112,112,112,33,197,198,195,194,113,113,113,113,32,175,174,152,147,147,147,32,152,153,159,134,134,134,32,159,165,175,134,134,134,32,152,159,175,134,134,134,32,117,125,127,216,216,216,32,126,134,128,217,217,217,32,117,127,126,218,218,218,32,117,126,128,219,219,219,32,98,94,95,220,220,220,32,103,102,101,221,221,221,32,98,95,103,120,120,120,32,98,103,101,222,222,222,33,91,92,94,98,91,91,91,91,33,105,107,113,120,223,223,223,223,33,137,144,183,184,224,224,224,224,33,131,124,100,97,225,225,225,225,33,148,141,134,126,226,226,226,226,33,147,152,174,185,227,227,227,227]},\"autopoint_abc\":{\"normals\":[0,-1,0,-1.02081e-7,-1,2.1435e-7,1.0193e-7,-1,2.64251e-7,0,-1,0,1.23458e-7,-1,1.20928e-7,0,-1,-8.34642e-8,0,-1,0,-1.73717e-8,-1,-6.82215e-9,0,0,-1,0.04463,0,-0.999004,0,-0.00000508626,1,5.89901e-9,1,-0.00000190145,0,1,0,3.49348e-9,1,-0.00000112606,-3.8832e-8,1,0.00000302246,0.04463,0,-0.999004,0,0.00000508626,1,-3.02574e-7,1,0.00000102844,-1.35154e-8,1,2.94796e-7,2.64912e-8,1,1.58947e-7,-2.64656e-8,1,-1.59098e-7,-3.93266e-9,1,3.41494e-7,0,1,0,-9.29242e-9,1,-5.96047e-8,2.51576e-8,1,-8.55102e-8,-2.06716e-7,1,-9.20551e-7,2.57594e-7,1,0.00000173659,1.51469e-8,1,-3.14947e-8,0.170958,0,0.985278,-1.34211e-7,1,-4.88871e-7,-0.00000131379,1,-0.00000397695,-5.2535e-8,1,-4.60407e-8,-1.23993e-7,1,0.00000406729,-3.93266e-9,1,6.40494e-7,1.08509e-7,1,0.00000147104,2.34309e-9,1,0.00000115154,-6.98235e-7,-1,-0.0000094659,3.93266e-9,-1,-4.8037e-7,-1.73258e-8,-1,-0.00000100588,-1.95258e-9,-1,-9.5962e-7,0.359887,-2.78054e-8,0.932996,0.359893,0,0.932993,0.359887,-3.70739e-8,0.932996,0.359887,-3.70739e-8,0.932996,0.359893,0,0.932994,0.359887,0,0.932996,-2.64912e-8,-1,-1.58947e-7,-4.11975e-8,-1,1.57308e-7,-1.32586e-8,-1,-4.79108e-8,-1.92364e-7,-1,-8.56639e-7,-3.22973e-8,-1,-4.37843e-7,0,-1,0,1.32581e-8,-1,-7.95489e-8,1.60017e-9,-1,-3.27499e-7,-3.69073e-10,-1,-1.61469e-7,3.95992e-9,-1,2.98023e-8,6.98508e-10,-1,-4.28097e-8,4.29921e-8,-1,3.26591e-7,-2.00288e-9,-1,-1.50737e-8,-8.60466e-9,-1,-2.12505e-8,-3.07269e-8,-1,7.21987e-8,7.75323e-7,-1,0.00000241641,0,-1,-2.32073e-7,-1.03591e-7,-1,-3.22858e-7,0.0457989,0.00000182231,-0.998951,-2.00026e-14,0.0000101725,-1,0.155468,0,-0.987841,0.253347,4.28659e-8,-0.967375,0.332758,7.58552e-8,-0.943012,-0.391556,0,0.920154,-0.332696,1.49214e-7,0.943034,0,0.00000508626,-1,0.332685,0.0000014123,-0.943038,0.332685,0,-0.943038,0.332684,0,-0.943038,0.332686,-0.00000141228,-0.943038,0.332684,0,-0.943038,0.332685,0,-0.943038,0.253266,0,-0.967397,0.391546,0,-0.920158,0.391547,5.48457e-8,-0.920158,0.391546,0,-0.920158,0.391546,0,-0.920158,0.391547,0,-0.920158,0,-0.00000508626,-1,0.155402,0,-0.987851,0.440425,4.45937e-8,-0.897789,0.429966,4.03603e-8,-0.902845,0.429964,5.38138e-8,-0.902846,0.42997,4.48447e-8,-0.902843,0.429978,0.00000352874,-0.902839,0.429964,2.75915e-8,-0.902846,0.42997,2.69068e-8,-0.902843,-0.332696,-1.49214e-7,0.943034,-0.391556,0,0.920154,0.332758,7.58552e-8,-0.943012,0.253347,4.28659e-8,-0.967375,0.0457989,-0.00000182231,-0.998951,0,-0.0000101725,-1,0.0461122,0,-0.998936,0.0461108,0,-0.998936,0.0461122,0,-0.998936,0.0461122,0,-0.998936,0,0,-1,0.391599,0,-0.920136,-0.429969,-3.42744e-8,0.902844,-0.391546,-3.67916e-8,0.920158,-0.391546,-4.20475e-8,0.920158,-0.429969,-3.42744e-8,0.902844,-3.93268e-9,-1,0.00000126763,0,-1,-0.00000336964,-3.49348e-9,-1,0.00000112606,7.99522e-9,-1,0,7.99693e-8,1,-5.97551e-8,0,1,1.12125e-7,3.89439e-8,1,1.00958e-7,4.55077e-8,1,3.13452e-8,0,1,0,0,1,0,-1,0,-9.53674e-7,0,0,1,2.4583e-8,1,1.86852e-7,0,1,-4.469e-8,0,0.999993,0.00364581,-6.13606e-7,1,0.0000116707,-1.74906e-7,1,-8.26068e-7,-4.09108e-7,1,-0.00000136231,0,1,-1.19576e-7,-1.28955e-7,1,-8.69361e-7,1.37638e-8,1,1.56115e-7,2.16675e-8,1,1.5167e-7,-8.1054e-8,1,-3.55523e-7,-2.39198e-7,1,5.62042e-7,-5.54271e-8,1,-2.05427e-7,3.06017e-8,1,1.60126e-7,2.64246e-8,1,1.52292e-7,-4.84657e-8,1,-1.56167e-7,9.38028e-9,1,1.10161e-7,6.995e-9,1,-1.80085e-8,-6.5013e-8,1,-2.22198e-7,1.66459e-8,1,-3.49534e-8,3.20998e-8,1,8.5646e-8,7.00188e-9,1,-1.80907e-8,8.31976e-9,1,-4.74236e-8,-3.39393e-7,1,9.90046e-7,4.66939e-8,1,-1.09731e-7,-9.99344e-10,1,4.55745e-8,8.30697e-10,1,2.85528e-8,1.73559e-7,1,-4.07863e-7,0,1,5.029e-8,-2.74058e-7,1,0.00000110675,1.06489e-8,1,-2.30696e-7,0,1,-1.41367e-7,5.21466e-9,1,5.70436e-8,-6.61359e-8,1,1.12055e-7,-5.11165e-10,1,3.71088e-8,6.65263e-9,1,-1.45104e-7,9.09259e-10,1,4.64525e-8,-2.00433e-9,1,-1.28146e-7,-2.45068e-9,1,-1.25201e-7,0.122409,0,0.99248,-0.359896,3.74801e-8,-0.932993,0.359896,0,0.932992,0.164399,0,-0.986394,0.405245,-3.37851e-8,0.914208,0.266711,0,0.963776,0.266711,5.24236e-7,0.963776,0.266711,0,0.963776,0.266711,-5.24236e-7,0.963776,0.266711,0,0.963777,0.313679,0,0.949529,0.313678,0,0.949529,0.313679,0,0.949529,0.313679,0,0.949529,-1.22915e-8,-1,-9.34259e-8,0,-1,4.469e-8,0,-0.999995,-0.00312498,6.05401e-7,-1,-0.000011782,-5.11318e-9,-1,7.58499e-10,2.32677e-7,-1,0.00000108333,6.0695e-7,-1,0.00000196119,0,-1,1.43492e-7,1.17955e-7,-1,8.30435e-7,-1.17975e-8,-1,-1.27429e-7,-1.49619e-8,-1,-1.25649e-7,7.39976e-8,-1,3.58898e-7,1.79399e-7,-1,-4.21531e-7,1.94812e-8,-1,3.95955e-8,-9.42457e-9,-1,-1.20408e-7,-5.07324e-8,-1,-1.97882e-7,3.27487e-8,-1,1.30683e-7,-7.1766e-9,-1,-9.02182e-8,-4.99686e-9,-1,2.69066e-8,-1.66459e-8,-1,3.49534e-8,-2.91815e-8,-1,-9.25042e-8,-3.50094e-9,-1,9.04534e-9,2.78851e-9,-1,-7.20463e-9,-8.31976e-9,-1,4.74236e-8,2.11155e-7,-1,-6.40569e-7,-4.66939e-8,-1,1.09731e-7,3.80416e-9,-1,-5.35231e-8,8.26389e-9,-1,-9.50041e-8,-1.73559e-7,-1,4.07863e-7,0,-1,-5.029e-8,2.48888e-7,-1,-9.95623e-7,-4.76468e-8,-1,-6.45943e-7,0,-1,1.56247e-7,0,-1,1.56247e-7,1.95232e-9,-1,-1.03374e-7,6.37234e-8,-1,-1.09802e-7,-1.70416e-9,-1,-3.14458e-8,-1.15828e-8,-1,1.62754e-7,1.56476e-9,-1,-9.94245e-9,9.60345e-9,-1,9.2901e-8,4.26684e-9,-1,1.28102e-7,0.0735638,0,0.99729,0.0735638,0,0.997291,0.0735632,0,0.997291,0.0735638,0,0.99729,-1,-2.58703e-11,-0.00000254316,-1,0,-0.00000254316,-1,2.58696e-11,-0.00000254309,-1,0,-0.00000254313,-1,0,0,-1,0,-0.00000285709,-1,0,0,-1,0,-0.00000285709,-1,0,0,-1,0,0,0.111158,0,0.993803,-0.313679,0,-0.949529,-0.26671,2.68216e-7,-0.963777,0.266711,-6.17239e-8,0.963777,0.219101,-2.87219e-8,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,0.0735647,0,0.99729,0.13044,0,0.991456,0,0,1,0.2191,0,0.975703,-1,0,-0.00000509113,-1,0,-0.00000509113,-1,-0.000522994,-0.00000190675,-1,0,0,-1,0,0,-1,0,0,-1,4.36426e-10,-0.00000190677,-1,0,-0.00000190666,0.307799,0,0.951451,0.0735633,0,0.99729,0.307799,0,0.951451,0.219101,-2.87219e-8,0.975702,0.122405,0,0.99248,0.266711,-6.17239e-8,0.963777,0.122405,0,0.99248,-0.26671,-2.68216e-7,-0.963777,-0.313679,0,-0.949529,0.359896,0,0.932992,0.164399,0,0.986394],\"metadata\":{\"generator\":\"io_three\",\"normals\":259,\"uvs\":0,\"vertices\":188,\"version\":3,\"faces\":302,\"type\":\"Geometry\"},\"uvs\":[],\"vertices\":[197.355,-4,-0.274109,196.247,-4,0.859039,195.377,-4,0.489013,197.356,-4,-0.273712,197.293,-4,1.35753,197.93,-4,1.11191,199.14,-4,0.575699,184.808,-4,-4.00856,186.816,-4,-4.78339,181.897,-4,-5.24725,182.445,-4,-6.64345,174.348,-4,-9.49998,169.842,-4,-9.49998,0.249962,-1,17.5,121.5,-1,17.5,121.5,-4,17.5,0.249962,-4,17.5,0.249962,-0.999999,17.4995,168.356,-1,9.5,173.98,-1,9.5,165.1,-1,11.9575,153.846,-0.999999,14.4846,142.481,-0.999999,16.4565,131.034,-0.999999,17.8685,130.548,-1,17.9042,130.548,-4,17.9042,168.356,-4,9.49998,173.98,-4,9.49998,117,4,19,119.53,4,18.717,121.5,4,17.5,130.548,4,17.9042,0.249962,4,19,0.249962,4,17.5,121.5,0.999999,17.5,0.249962,0.999999,17.5,130.548,1,17.9042,131.034,1,17.8685,142.481,1,16.4565,153.846,1,14.4846,165.1,1,11.9575,173.98,1,9.5,168.356,1,9.5,0.249962,1,17.4995,173.98,4,9.49998,168.356,4,9.49998,0.250008,4,-6.5,9.25001,4,-8,0.250015,4,-9.49997,9.24999,4,8,119.064,4,9.22556,130.102,4,8.41135,175.781,4,7.4453,141.087,4,7.05653,135.964,4,-8.83687,121.501,4,-9.49997,151.992,4,5.16438,150.466,4,-6.55447,0.249977,4,9.49713,117,4,9.49713,0.249992,4,6.5,162.791,4,2.7394,164.814,4,-2.79686,186.607,4,5.44844,184.518,4,4.55907,176.216,4,8.88113,172.718,4,-0.00784284,128.979,4,-18.6547,121.5,4,-19,0.250038,4,-19,0.250038,4,-17.511,117,4,-17.511,117.739,4,-17.7501,127.455,4,-18.4667,128.979,-4,-18.6547,127.455,-4,-18.4667,117.739,-4,-17.7501,121.5,-4,-19,117,-4,-17.511,0.250038,-4,-19,0.250038,-4,-17.511,135.964,-4,-8.83687,141.087,-4,7.05653,130.102,-4,8.41135,121.501,-4,-9.49997,119.064,-4,9.22556,9.24999,-4,8,9.25001,-4,-8,0.250015,-4,-9.49997,0.250008,-4,-6.5,186.607,-4,5.44844,176.216,-4,8.88113,184.518,-4,4.55907,175.781,-4,7.4453,0.249977,-4,9.49713,0.249992,-4,6.5,117,-4,9.49713,151.992,-4,5.16438,150.466,-4,-6.55447,162.791,-4,2.73939,172.718,-4,-0.00784319,164.814,-4,-2.79686,135.964,1,-8.83687,121.5,1,-9.5,0.250015,1,-9.5,150.466,1,-6.55447,164.814,1,-2.79686,172.718,1,-0.00784297,184.808,1,-4.00856,181.897,1,-5.24725,169.842,1,-9.5,174.348,1,-9.5,167.629,1,-11.8704,184.808,4,-4.00856,181.897,4,-5.24725,169.842,4,-9.49998,174.348,4,-9.49998,182.445,4,-6.64345,174.348,-1,-9.5,167.629,-0.999999,-11.8704,152.433,-0.999999,-15.8488,152.433,1,-15.8488,186.816,4,-4.78339,186.816,1,-4.78339,196.868,1,-0.506317,196.868,-1,-0.506317,186.816,-1,-4.78339,169.842,-1,-9.5,181.897,-1,-5.24725,184.808,-1,-4.00856,172.718,-1,-0.00784306,164.814,-1,-2.79686,150.466,-1,-6.55447,135.964,-1,-8.83687,121.5,-1,-9.5,0.250015,-1,-9.5,136.928,-1,-18.2878,136.928,0.999999,-18.2878,197.355,4,-0.274109,197.356,4,-0.273712,199.14,4,0.575699,197.355,-1,-0.274109,197.355,1,-0.274109,128.979,0.999999,-18.6547,128.979,-1,-18.6547,186.607,1,5.44844,184.518,1,4.55907,197.293,1,1.35753,196.247,1,0.859039,195.377,1,0.489014,187.169,1,5.26306,197.293,4,1.35753,196.247,4,0.859039,195.377,4,0.489014,196.247,-1,0.859039,195.377,-1,0.489014,197.293,-1,1.35753,187.169,-1,5.26306,186.607,-1,5.44844,184.518,-1,4.55907,119.53,-4,18.717,117,-4,19,0.249962,-4,19,197.93,4,1.11191,175.781,1,7.4453,162.791,1,2.7394,151.992,1,5.16438,141.087,1,7.05653,130.102,1,8.41135,119.064,1,9.22556,117,1,9.49713,0.249977,1,9.49713,0.249977,-1,9.49713,117,-1,9.49713,119.064,-1,9.22556,0.250038,0.999999,-17.511,130.102,-1,8.41135,117,0.999999,-17.511,0.250038,-1,-17.511,141.087,-1,7.05653,117.739,0.999999,-17.7501,117,-1,-17.511,151.992,-1,5.16438,127.455,0.999999,-18.4667,117.739,-1,-17.7501,162.791,-1,2.7394,127.455,-1,-18.4667,175.781,-1,7.4453],\"faces\":[32,2,0,3,0,0,0,32,3,6,5,1,1,1,32,5,4,1,2,2,2,32,1,2,3,3,3,3,32,3,5,1,4,4,4,32,12,11,10,5,5,5,32,10,8,7,6,6,6,32,9,12,10,7,7,7,32,10,7,9,6,6,6,33,13,14,15,16,8,8,8,8,33,25,15,14,24,9,9,9,9,33,19,18,26,27,10,10,10,10,32,31,30,33,11,11,11,32,33,32,28,12,12,12,32,29,31,33,13,13,13,32,33,28,29,14,14,14,33,33,30,34,35,8,8,8,8,33,36,34,30,31,15,15,15,15,33,44,45,42,41,16,16,16,16,32,66,62,57,17,17,17,32,57,54,55,18,18,18,32,48,46,47,19,19,19,32,49,60,58,20,20,20,32,55,48,47,21,21,21,32,49,58,59,22,22,22,32,55,47,49,23,23,23,32,66,57,55,24,24,24,32,56,61,66,25,25,25,32,51,53,56,26,26,26,32,49,59,50,12,12,12,32,50,51,56,12,12,12,32,56,66,55,27,27,27,32,55,49,50,12,12,12,32,55,50,56,12,12,12,33,38,22,21,39,28,28,28,28,32,63,64,52,29,29,29,32,52,45,44,22,22,22,32,44,65,63,30,30,30,32,52,44,63,31,31,31,32,73,67,68,32,32,32,32,68,69,70,33,33,33,32,70,71,72,12,12,12,32,72,73,68,34,34,34,32,68,70,72,35,35,35,32,74,75,76,36,36,36,32,76,78,80,3,3,3,32,80,79,77,37,37,37,32,77,74,76,38,38,38,32,76,80,77,39,39,39,32,5,163,151,40,40,40,32,147,150,157,41,41,41,32,5,151,147,42,42,42,32,156,4,5,43,43,43,32,147,157,156,44,44,44,32,147,156,5,45,45,45,32,87,89,88,46,46,46,32,88,84,81,0,0,0,32,81,98,101,47,47,47,32,101,100,99,48,48,48,32,99,97,82,49,49,49,32,82,83,85,50,50,50,32,85,96,94,51,51,51,32,94,95,86,52,52,52,32,87,88,81,53,53,53,32,85,94,86,54,54,54,32,86,87,81,55,55,55,32,81,101,99,56,56,56,32,99,82,85,57,57,57,32,85,86,81,58,58,58,32,81,99,85,59,59,59,32,93,92,90,60,60,60,32,90,91,27,61,61,61,32,27,26,93,62,62,62,32,93,90,27,63,63,63,33,55,54,102,103,64,64,64,64,33,48,55,103,104,65,65,65,65,33,54,57,105,102,66,66,66,66,33,57,62,106,105,67,67,67,67,33,107,106,62,66,68,68,68,68,33,109,108,113,114,69,69,69,69,33,110,109,114,115,70,70,70,70,33,111,110,115,116,71,71,71,71,32,111,116,117,72,72,72,32,117,10,11,73,73,73,32,118,119,112,74,74,74,32,117,11,118,75,75,75,32,118,112,111,76,76,76,32,117,118,111,77,77,77,33,112,119,120,121,78,78,78,78,32,10,117,122,79,79,79,32,123,124,125,80,80,80,32,10,122,123,81,81,81,32,126,8,10,82,82,82,32,123,125,126,83,83,83,32,123,126,10,79,79,79,33,11,12,127,118,84,84,84,84,33,137,121,120,136,85,85,85,85,32,142,138,139,86,86,86,32,139,140,6,87,87,87,32,6,3,0,3,3,3,32,141,125,124,88,88,88,32,6,0,141,89,89,89,32,142,139,6,90,90,90,32,141,124,142,91,91,91,32,6,141,142,92,92,92,33,12,9,128,127,93,93,93,93,33,9,7,129,128,94,94,94,94,33,100,101,131,130,95,95,95,95,33,132,131,101,98,96,96,96,96,33,133,132,98,81,66,66,66,66,33,134,133,81,84,97,97,97,97,33,135,134,84,88,98,98,98,98,32,77,68,67,99,99,99,32,143,137,136,100,100,100,32,77,67,143,101,101,101,32,144,74,77,101,101,101,32,143,136,144,100,100,100,32,143,144,77,102,102,102,33,77,79,69,68,103,103,103,103,33,64,63,145,146,104,104,104,104,33,151,152,148,147,105,105,105,105,33,149,148,152,153,106,106,106,106,33,2,1,154,155,107,107,107,107,33,156,154,1,4,108,108,108,108,33,159,158,90,92,104,104,104,104,32,16,15,25,109,109,109,32,160,161,162,110,110,110,32,16,25,160,111,111,111,32,160,162,16,112,112,112,32,122,117,116,113,113,113,32,116,115,114,114,114,114,32,114,113,122,115,115,115,32,116,114,122,116,116,116,32,163,140,139,117,117,117,32,139,138,153,118,118,118,32,152,151,163,12,12,12,32,139,153,152,12,12,12,32,139,152,163,12,12,12,33,86,49,47,87,119,119,119,119,33,162,161,28,32,120,120,120,120,32,168,169,170,121,121,121,32,170,171,43,122,122,122,32,43,35,34,123,123,123,32,34,36,37,124,124,124,32,37,38,39,12,12,12,32,39,40,41,125,125,125,32,42,164,146,126,126,126,32,39,41,42,127,127,127,32,34,37,39,128,128,128,32,170,43,34,129,129,129,32,168,170,34,130,130,130,32,34,39,42,131,131,131,32,146,145,150,132,132,132,32,34,42,146,133,133,133,32,167,168,34,134,134,134,32,166,167,34,135,135,135,32,146,150,147,136,136,136,32,166,34,146,137,137,137,32,165,166,146,138,138,138,32,146,147,148,139,139,139,32,149,142,124,140,140,140,32,146,148,149,141,141,141,32,107,165,146,142,142,142,32,107,146,149,12,12,12,32,149,124,123,143,143,143,32,108,109,110,144,144,144,32,149,123,108,145,145,145,32,106,107,149,146,146,146,32,105,106,149,147,147,147,32,149,108,110,148,148,148,32,110,111,112,149,149,149,32,112,121,137,150,150,150,32,137,143,183,151,151,151,32,183,180,177,12,12,12,32,177,175,104,152,152,152,32,177,104,103,152,152,152,32,137,183,177,153,153,153,32,110,112,137,154,154,154,32,105,149,110,155,155,155,32,177,103,102,156,156,156,32,102,105,110,157,157,157,32,110,137,177,158,158,158,32,110,177,102,159,159,159,33,37,23,22,38,160,160,160,160,33,142,149,153,138,161,161,161,161,33,108,123,122,113,162,162,162,162,33,95,60,49,86,163,163,163,163,33,163,5,6,140,164,164,164,164,32,41,40,20,165,165,165,32,19,27,91,166,166,166,32,41,20,19,167,167,167,32,65,44,41,168,168,168,32,19,91,65,169,169,169,32,19,65,41,169,169,169,32,65,91,90,170,170,170,32,158,157,150,171,171,171,32,65,90,158,172,172,172,32,145,63,65,173,173,173,32,158,150,145,171,171,171,32,158,145,65,173,173,173,32,173,174,176,174,174,174,32,17,172,173,175,175,175,32,14,13,17,176,176,176,32,23,24,14,177,177,177,32,21,22,23,178,178,178,32,19,20,21,179,179,179,32,159,187,18,180,180,180,32,18,19,21,181,181,181,32,21,23,14,182,182,182,32,14,17,173,183,183,183,32,14,173,176,184,184,184,32,18,21,14,185,185,185,32,157,158,159,186,186,186,32,159,18,14,187,187,187,32,14,176,179,188,188,188,32,14,179,182,189,189,189,32,156,157,159,190,190,190,32,159,14,182,191,191,191,32,159,182,185,192,192,192,32,154,156,159,6,6,6,32,125,141,155,193,193,193,32,155,154,159,194,194,194,32,159,185,130,195,195,195,32,155,159,130,196,196,196,32,126,125,155,197,197,197,32,127,128,129,198,198,198,32,129,126,155,199,199,199,32,155,130,131,200,200,200,32,155,131,132,201,201,201,32,127,129,155,202,202,202,32,119,118,127,203,203,203,32,136,120,119,204,204,204,32,186,144,136,0,0,0,32,181,184,186,205,205,205,32,135,178,181,206,206,206,32,134,135,181,207,207,207,32,181,186,136,208,208,208,32,136,119,127,209,209,209,32,127,155,132,210,210,210,32,133,134,181,211,211,211,32,127,132,133,212,212,212,32,181,136,127,213,213,213,32,133,181,127,214,214,214,32,31,29,160,215,215,215,32,160,25,24,216,216,216,32,24,23,37,217,217,217,32,36,31,160,216,216,216,32,24,37,36,217,217,217,32,160,24,36,218,218,218,32,135,88,89,219,219,219,32,89,46,48,220,220,220,32,89,48,104,221,221,221,32,135,89,104,222,222,222,32,175,70,69,223,223,223,32,135,104,175,224,224,224,32,79,80,178,225,225,225,32,178,135,175,226,226,226,32,175,69,79,227,227,227,32,175,79,178,228,228,228,33,29,28,161,160,229,229,229,229,33,146,164,52,64,230,230,230,230,33,45,52,164,42,231,231,231,231,33,66,61,165,107,232,232,232,232,33,166,165,61,56,233,233,233,233,33,167,166,56,53,234,234,234,234,33,168,167,53,51,235,235,235,235,33,169,168,51,50,236,236,236,236,33,170,169,50,59,237,237,237,237,33,171,170,59,58,238,238,238,238,33,39,21,20,40,239,239,239,239,33,172,94,96,173,238,238,238,238,33,173,96,85,174,237,237,237,237,32,58,60,95,240,240,240,32,95,94,172,241,241,241,32,171,58,95,241,241,241,32,35,43,171,242,242,242,32,32,33,35,223,223,223,32,16,162,32,243,243,243,32,13,16,32,244,244,244,32,13,32,35,245,245,245,32,17,13,35,225,225,225,32,171,95,172,240,240,240,32,172,17,35,246,246,246,32,172,35,171,247,247,247,33,174,85,83,176,236,236,236,236,33,175,177,71,70,238,238,238,238,33,176,83,82,179,235,235,235,235,33,177,180,72,71,248,248,248,248,33,178,80,78,181,238,238,238,238,33,179,82,97,182,234,234,234,234,33,180,183,73,72,249,249,249,249,33,181,78,76,184,250,250,250,250,33,182,97,99,185,251,251,251,251,33,67,73,183,143,252,252,252,252,33,184,76,75,186,249,249,249,249,33,130,185,99,100,253,253,253,253,33,144,186,75,74,254,254,254,254,33,18,187,93,26,255,255,255,255,33,92,93,187,159,256,256,256,256,33,0,2,155,141,161,161,161,161,33,7,8,126,129,257,257,257,257,33,87,47,46,89,258,258,258,258]},\"turnout_L_b\":{\"normals\":[-5.29267e-9,1,4.47035e-8,-0.2173,0.913796,-0.343158,-4.02558e-9,1,-1.52085e-7,-2.68937e-8,1,2.8797e-7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1.90536e-7,0,1,-8.74127e-8,0.00000301997,-1,0,0,-1,-1.07264e-8,1,-8.46932e-9,-0.266718,0.000006783,-0.963775,-2.98023e-8,1,-5.96046e-8,-0.266712,0,-0.963776,-0.26671,0,-0.963777,-0.266712,-0.00000409272,-0.963776,-0.164399,0,-0.986394,-5.29823e-9,1,3.17891e-8,-9.20132e-9,1,6.81199e-8,6.62271e-9,1,3.97363e-8,6.3676e-9,1,6.81199e-8,-0.0110048,0.999384,-0.0333122,5.21617e-9,1,1.88484e-8,-8.24284e-9,1,3.97363e-8,1.48278e-7,1,-0.00000100688,7.88812e-9,1,1.55671e-7,-0.0019304,0.999989,-0.00435488,9.83016e-9,1,-2.04254e-7,2.77211e-10,1,4.65246e-8,-7.97221e-11,1,5.08274e-8,-0.164401,0,0.986394,0,0,1,2.51326e-9,1,-1.49011e-8,3.1838e-9,1,-3.52311e-7,1.00661e-8,1,9.19979e-8,6.69923e-8,1,0.0000015143,2.46268e-9,1,-1.67169e-7,4.4254e-9,1,0,5.02689e-9,1,-0.00000190032,-0.0441647,0.799732,-0.59873,3.04696e-8,1,0.00000374174,8.89046e-9,1,1.20526e-7,-1.68165e-7,0,1,2.0106e-7,0,-1,-0.492902,2.41203e-7,-0.870085,-0.492896,0,-0.870088,-0.492902,0,-0.870085,-0.492897,-0.00000959098,-0.870088,-0.219099,0,-0.975703,-0.40524,0,-0.91421,-0.405244,3.63274e-8,-0.914209,-0.405239,7.2655e-8,-0.914211,-0.40524,0,-0.91421,-0.40524,-0.00000391356,-0.91421,-0.313679,0,-0.949529,-0.313678,0,-0.949529,-0.313682,-0.00000968444,-0.949528,-0.449608,0,-0.893226,-0.535003,0,-0.84485,-0.534997,0,-0.844854,-0.534998,-0.0000122842,-0.844853,-0.535003,0,-0.84485,-0.534989,0.0000456737,-0.844859,-0.025081,0,-0.999685,-0.0735641,0,-0.99729,-0.0735679,0,-0.99729,-0.0735627,-0.00000402435,-0.997291,-0.170959,0,-0.985278,-0.359892,3.70739e-8,-0.932994,-0.359892,0,-0.932994,-0.359892,0,-0.932994,-0.12241,0,-0.99248,-0.122407,0,-0.99248,-0.12241,0,-0.99248,-0.122408,-0.00000768935,-0.99248,0.122408,0.00000745465,0.99248,-5.29268e-9,-1,-4.47035e-8,-4.60067e-9,-1,-2.49753e-7,-0.217972,-0.913237,-0.344219,-2.93152e-8,-1,2.25833e-7,1,0,0,1,0,0,-8.74127e-8,-0.00000301997,-1,0,0,-1,-1.07264e-8,-1,-8.46932e-9,-0.266712,0.000003657,-0.963776,-0.266718,-0.000006783,-0.963775,-0.266712,0.00000402235,-0.963776,5.29823e-9,-1,-3.17891e-8,6.3676e-9,-1,-6.81199e-8,-0.0104337,-0.999447,-0.0315836,8.69361e-9,-1,3.1414e-8,-6.62271e-9,-1,-3.97363e-8,-9.20134e-9,-1,-6.81199e-8,2.95753e-8,-1,-0.00000121642,7.30415e-9,-1,-3.97363e-8,-2.85209e-9,-1,-1.40427e-7,-1.01485e-9,-1,-4.799e-8,0.0019304,-0.999989,0.00435488,-1.29952e-8,-1,-2.63427e-7,-1.13269e-9,-1,-5.35626e-8,0,0,1,2.51328e-9,-1,-9.68575e-8,6.85833e-8,-1,0.00000147007,2.78582e-9,-1,-4.26512e-7,7.2688e-10,-1,-2.9808e-7,9.30355e-9,-1,-5.74008e-9,4.4254e-9,-1,0,-0.0456476,-0.784195,-0.618833,3.85846e-8,-1,0.00000490762,5.02702e-9,-1,-0.00000254734,1.01605e-8,-1,1.37744e-7,-1.68165e-7,0,1,2.0106e-7,0,-1,-0.492902,-2.41203e-7,-0.870085,-0.492897,0,-0.870088,-0.492896,0.0000110524,-0.870088,-0.40524,0,-0.91421,-0.405239,5.44912e-8,-0.914211,-0.40524,0.00000372817,-0.91421,-0.313682,0.00000968444,-0.949528,-1,0,0,-0.534998,0,-0.844853,-0.535003,0,-0.84485,-0.534989,0.0000318312,-0.844859,-0.535003,0,-0.84485,-0.534997,-0.0000201114,-0.844854,-0.0735627,0.00000402435,-0.997291,-0.359892,0,-0.932994,-0.12241,0,-0.99248,-0.122408,0,-0.99248,-0.122407,0.0000104048,-0.99248,0.122408,-0.00000745465,0.99248],\"uvs\":[],\"vertices\":[215.75,1,-17.5,125.656,1,-17.5,120.814,0.999999,-14.4335,112.105,1,-9.50002,215.75,1,-9.50002,215.75,4,-19,215.75,4,-17.5,215.75,4,-9.50002,215.75,4,-6.00003,125.656,4,-17.5,112.105,4,-9.5,128.025,4,-19,110.778,4,-8.74826,100.475,4,-3.5623,92.4385,4,-0.000017945,224.75,4,-7.50003,224.75,4,7.50001,89.9301,4,1.1119,79.1685,4,5.26304,68.2164,4,8.88112,65.9801,4,9.49998,215.75,4,9.49998,215.75,4,6,215.75,0.999999,9.49998,65.98,1,9.49998,215.75,4,19,215.75,0.999999,17.5,215.75,4,17.5,57.0998,1,11.9575,45.8457,1,14.4846,34.4812,1,16.4565,26.0212,1,17.5,26.0212,4,17.5,23.0336,4,17.8684,11.5305,4,18.7169,0.25,4,19,89.9301,1,1.1119,100.475,1,-3.5623,26.0311,0.738152,17.4987,123.372,0.999993,-16.0534,71.1734,4,7.90423,14.6363,3.99999,18.4878,215.75,-0.999999,-17.5,125.656,-0.999999,-17.5,120.814,-0.999998,-14.4335,112.105,-0.999999,-9.50002,215.75,-1,-9.50002,215.75,-4,-19,215.75,-4,-17.5,215.75,-4,-9.50002,215.75,-4,-6.00003,215.75,2.6227e-7,-6.00003,215.75,8.30517e-7,-19,125.656,-4,-17.5,112.105,-4,-9.5,128.025,8.30517e-7,-19,128.025,-4,-19,110.778,-4,-8.74826,100.475,-4,-3.5623,92.4385,-4,-0.0000182947,224.75,-4,-7.50003,224.75,3.27837e-7,-7.50003,224.75,-4,7.50001,89.9301,-4,1.1119,79.1685,-4,5.26304,68.2164,-4,8.88112,65.9801,-4,9.49998,215.75,-4,9.49998,215.75,-4,6,215.75,-2.62268e-7,6,224.75,-3.27836e-7,7.50001,215.75,-1,9.49998,65.98,-1,9.49998,215.75,-4,19,215.75,-8.30516e-7,19,215.75,-1,17.5,215.75,-4,17.5,57.0998,-1,11.9575,45.8457,-1,14.4846,34.4812,-1,16.4565,26.0212,-1,17.5,26.0212,-4,17.5,23.0336,-4,17.8684,11.5305,-4,18.7169,0.25,-4,19,0.25,-8.30515e-7,19,79.1685,-2.30055e-7,5.26304,89.9301,-1,1.1119,89.9301,-4.86029e-8,1.1119,68.2164,-3.88206e-7,8.88112,100.475,-0.999999,-3.5623,100.475,1.55713e-7,-3.5623,57.0998,-5.22677e-7,11.9575,110.778,3.82399e-7,-8.74826,45.8457,-6.33143e-7,14.4846,120.814,6.3091e-7,-14.4335,34.4812,-7.19338e-7,16.4565,23.0336,-7.81054e-7,17.8684,11.5305,-8.18144e-7,18.7169,26.0311,-0.738154,17.4987,59.9902,-4.87714e-7,11.1576,123.372,-0.999992,-16.0534,71.1734,-4,7.90423,14.6363,-3.99999,18.4878],\"faces\":[32,4,0,1,0,0,0,32,1,39,2,1,1,1,32,2,3,4,2,2,2,32,1,2,4,3,3,3,32,52,5,6,4,4,4,32,52,6,0,5,5,5,32,7,8,51,6,6,6,32,52,0,4,7,7,7,32,4,7,51,7,7,7,32,4,51,52,8,8,8,33,1,0,6,9,9,9,9,9,33,4,3,10,7,10,10,10,10,33,52,55,11,5,11,11,11,11,33,5,11,9,6,12,12,12,12,32,24,20,19,13,13,13,32,89,100,92,14,14,14,32,92,28,24,15,15,15,32,24,19,89,16,16,16,32,24,89,92,17,17,17,33,51,8,15,61,18,18,18,18,32,22,16,15,19,19,19,32,8,7,10,20,20,20,32,22,15,8,21,21,21,32,20,21,22,22,22,22,32,18,40,19,23,23,23,32,19,20,22,24,24,24,32,22,8,10,25,25,25,32,22,10,12,26,26,26,32,18,19,22,27,27,27,32,13,14,17,28,28,28,32,17,18,22,29,29,29,32,22,12,13,30,30,30,32,13,17,22,31,31,31,33,69,70,16,22,32,32,32,32,33,23,21,20,24,33,33,33,33,32,27,25,74,5,5,5,32,69,22,21,4,4,4,32,69,21,23,5,5,5,32,26,27,74,7,7,7,32,69,23,26,7,7,7,32,74,69,26,7,7,7,32,31,26,23,34,34,34,32,23,24,28,35,35,35,32,23,28,29,36,36,36,32,30,31,23,37,37,37,32,23,29,30,38,38,38,32,35,25,27,39,39,39,32,27,32,33,40,40,40,32,33,41,34,41,41,41,32,34,35,27,42,42,42,32,27,33,34,43,43,43,33,74,25,35,85,44,44,44,44,33,32,27,26,31,45,45,45,45,32,12,10,3,46,46,46,32,3,2,95,47,47,47,32,93,12,3,48,48,48,32,3,95,93,49,49,49,33,28,92,94,29,50,50,50,50,32,91,88,36,51,51,51,32,36,17,14,52,52,52,32,14,13,37,53,53,53,32,37,91,36,54,54,54,32,36,14,37,55,55,55,32,86,89,19,56,56,56,32,40,18,86,57,57,57,32,19,40,86,58,58,58,32,91,37,13,7,7,7,32,13,12,93,59,59,59,32,13,93,91,59,59,59,33,15,16,70,61,5,5,5,5,32,1,9,11,60,60,60,32,55,95,2,61,61,61,32,55,2,39,62,62,62,32,1,11,55,63,63,63,32,1,55,39,64,64,64,33,98,85,35,34,65,65,65,65,32,33,97,98,66,66,66,32,98,34,41,67,67,67,32,98,41,33,68,68,68,33,29,94,96,30,69,69,69,69,32,18,17,36,70,70,70,32,36,88,86,71,71,71,32,36,86,18,72,72,72,32,33,32,31,73,73,73,32,31,30,96,74,74,74,32,97,33,31,75,75,75,32,31,96,97,76,76,76,33,30,31,38,96,77,77,77,77,32,19,24,20,13,13,13,32,43,42,46,78,78,78,32,46,45,44,79,79,79,32,44,101,43,80,80,80,32,46,44,43,81,81,81,32,48,47,52,82,82,82,32,51,50,49,82,82,82,32,51,49,46,83,83,83,32,42,48,52,83,83,83,32,51,46,42,83,83,83,32,52,51,42,6,6,6,33,48,42,43,53,9,9,9,9,33,46,49,54,45,84,84,84,84,33,52,47,56,55,85,85,85,85,33,47,48,53,56,86,86,86,86,32,72,77,92,15,15,15,32,72,92,100,87,87,87,32,65,66,72,88,88,88,32,72,100,89,89,89,89,32,72,89,65,16,16,16,33,51,61,60,50,18,18,18,18,32,60,62,68,90,90,90,32,68,67,66,91,91,91,32,65,102,64,92,92,92,32,68,66,65,93,93,93,32,50,60,68,94,94,94,32,54,49,50,95,95,95,32,57,54,50,96,96,96,32,50,68,65,97,97,97,32,50,65,64,98,98,98,32,58,57,50,99,99,99,32,63,59,58,100,100,100,32,50,64,63,101,101,101,32,63,58,50,102,102,102,33,69,68,62,70,32,32,32,32,33,71,72,66,67,103,103,103,103,32,74,73,76,7,7,7,32,74,76,75,83,83,83,32,67,68,69,4,4,4,32,74,75,71,83,83,83,32,71,67,69,83,83,83,32,71,69,74,4,4,4,32,71,75,80,104,104,104,32,71,80,79,105,105,105,32,77,72,71,106,106,106,32,71,79,78,107,107,107,32,78,77,71,108,108,108,32,76,73,84,109,109,109,32,83,103,82,110,110,110,32,76,84,83,111,111,111,32,82,81,76,112,112,112,32,83,82,76,113,113,113,33,74,85,84,73,114,114,114,114,33,81,80,75,76,115,115,115,115,32,45,54,57,116,116,116,32,93,95,44,117,117,117,32,45,57,93,48,48,48,32,93,44,45,118,118,118,33,77,78,94,92,50,50,50,50,32,87,88,91,119,119,119,32,91,90,58,7,7,7,32,59,63,87,52,52,52,32,91,58,59,120,120,120,32,91,59,87,121,121,121,32,65,89,86,56,56,56,32,86,64,102,57,57,57,32,86,102,65,122,122,122,32,58,90,91,123,123,123,32,91,93,57,59,59,59,32,91,57,58,59,59,59,33,60,61,70,62,7,7,7,7,32,101,44,95,124,124,124,32,55,56,53,125,125,125,32,43,101,95,126,126,126,32,55,53,43,127,127,127,32,43,95,55,128,128,128,33,98,83,84,85,65,65,65,65,32,98,97,82,66,66,66,32,103,83,98,67,67,67,32,82,103,98,129,129,129,33,78,79,96,94,69,69,69,69,32,87,63,64,70,70,70,32,64,86,88,72,72,72,32,64,88,87,130,130,130,32,80,81,82,131,131,131,32,97,96,79,132,132,132,32,80,82,97,75,75,75,32,97,79,80,133,133,133,33,79,96,99,80,134,134,134,134,32,65,66,72,88,88,88],\"metadata\":{\"generator\":\"io_three\",\"normals\":135,\"uvs\":0,\"vertices\":104,\"version\":3,\"faces\":178,\"type\":\"Geometry\"}},\"single_double_L_a\":{\"faces\":[33,1,0,4,5,0,0,0,0,33,2,1,5,6,1,1,1,1,33,0,3,10,4,2,2,2,2,33,11,12,8,7,3,3,3,3,33,3,9,15,10,4,4,4,4,33,12,16,13,8,5,5,5,5,33,9,14,19,15,6,6,6,6,32,143,158,144,7,7,7,32,144,126,109,8,8,8,32,109,94,83,9,9,9,32,83,72,62,10,10,10,32,62,53,40,11,11,11,32,83,62,40,12,12,12,32,144,109,83,13,13,13,32,125,143,144,14,14,14,32,108,125,144,15,15,15,32,83,40,31,16,16,16,32,108,144,83,17,17,17,32,93,108,83,18,18,18,32,93,83,31,19,19,19,32,82,93,31,20,20,20,32,82,31,22,21,21,21,32,71,82,22,22,22,22,32,71,22,16,23,23,23,32,39,45,61,24,24,24,32,61,71,16,25,25,25,32,12,11,29,26,26,26,32,39,61,16,27,27,27,32,16,12,29,28,28,28,32,29,30,39,29,29,29,32,16,29,39,30,30,30,33,16,22,17,13,31,31,31,31,33,40,53,46,32,32,32,32,32,33,14,18,25,19,33,33,33,33,33,21,20,27,28,3,3,3,3,33,22,31,23,17,34,34,34,34,33,18,24,34,25,35,35,35,35,33,20,26,36,27,5,5,5,5,32,57,77,88,36,36,36,32,88,99,114,37,37,37,32,114,131,163,38,38,38,32,163,189,155,39,39,39,32,155,154,188,40,40,40,32,155,188,191,41,41,41,32,114,163,155,42,42,42,32,57,88,114,43,43,43,32,49,57,114,44,44,44,32,114,155,191,45,45,45,32,114,191,164,46,46,46,32,114,164,132,47,47,47,32,114,132,115,48,48,48,32,49,114,115,49,49,49,32,49,115,100,50,50,50,32,43,49,100,51,51,51,32,89,67,58,52,52,52,32,43,100,89,53,53,53,32,36,43,89,54,54,54,32,89,58,50,55,55,55,32,50,51,28,39,39,39,32,50,28,27,39,39,39,32,36,89,50,56,56,56,32,50,27,36,57,57,57,33,37,38,30,29,58,58,58,58,33,31,40,32,23,59,59,59,59,33,24,33,41,34,60,60,60,60,33,26,35,43,36,31,31,31,31,32,190,160,229,61,61,61,32,229,233,232,62,62,62,32,231,159,177,61,61,61,32,229,232,231,63,63,63,32,176,190,229,64,64,64,32,141,176,229,65,65,65,32,229,231,177,66,66,66,32,177,142,124,67,67,67,32,124,107,92,68,68,68,32,92,81,70,69,69,69,32,92,70,52,70,70,70,32,177,124,92,71,71,71,32,141,229,177,72,72,72,32,123,141,177,73,73,73,32,177,92,52,74,74,74,32,177,52,44,75,75,75,32,106,123,177,76,76,76,32,91,106,177,77,77,77,32,177,44,38,78,78,78,32,38,37,69,79,79,79,32,80,91,177,80,80,80,32,38,69,80,81,81,81,32,177,38,80,82,82,82,33,38,44,39,30,83,83,83,83,33,35,42,49,43,84,84,84,84,33,44,52,45,39,85,85,85,85,33,42,48,57,49,59,59,59,59,33,51,50,59,60,58,58,58,58,33,48,66,77,57,86,86,86,86,33,53,62,54,46,87,87,87,87,33,47,55,65,56,88,88,88,88,33,50,58,68,59,83,83,83,83,33,62,72,63,54,89,89,89,89,33,55,64,75,65,90,90,90,90,33,58,67,78,68,85,85,85,85,33,70,81,71,61,91,91,91,91,33,72,83,73,63,92,92,92,92,33,64,74,86,75,93,93,93,93,33,66,76,88,77,87,87,87,87,33,81,92,82,71,94,94,94,94,33,83,94,84,73,95,95,95,95,33,74,85,97,86,96,96,96,96,33,76,87,99,88,89,89,89,89,33,90,105,91,80,97,97,97,97,33,92,107,93,82,98,98,98,98,33,94,109,95,84,99,99,99,99,33,85,96,112,97,100,100,100,100,33,87,98,114,99,92,92,92,92,33,89,100,116,101,91,91,91,91,33,79,90,80,69,101,101,101,101,33,119,120,104,103,102,102,102,102,33,105,122,106,91,103,103,103,103,33,107,124,108,93,104,104,104,104,33,109,126,110,95,105,105,105,105,33,96,111,129,112,106,106,106,106,33,52,70,61,45,107,107,107,107,33,98,113,131,114,95,95,95,95,33,100,115,133,116,108,108,108,108,32,110,127,128,109,109,109,32,128,111,96,110,110,110,32,96,85,74,111,111,111,32,74,64,55,112,112,112,32,55,47,33,113,113,113,32,110,128,96,114,114,114,32,95,110,96,109,109,109,32,0,1,2,110,110,110,32,7,8,13,115,115,115,32,13,17,23,116,116,116,32,23,32,46,117,117,117,32,13,23,46,118,118,118,32,0,2,7,119,119,119,32,3,0,7,120,120,120,32,84,95,96,121,121,121,32,9,3,7,122,122,122,32,84,96,74,123,123,123,32,14,9,7,124,124,124,32,73,84,74,125,125,125,32,14,7,13,126,126,126,32,63,73,74,127,127,127,32,18,14,13,128,128,128,32,54,63,74,129,129,129,32,24,18,13,130,130,130,32,54,74,55,131,131,131,32,54,55,33,132,132,132,32,24,13,46,133,133,133,32,54,33,24,134,134,134,32,24,46,54,135,135,135,33,120,138,121,104,136,136,136,136,33,122,140,123,106,137,137,137,137,33,124,142,125,108,138,138,138,138,33,126,144,127,110,139,139,139,139,32,145,146,147,140,140,140,32,147,148,149,140,140,140,32,147,149,150,141,141,141,32,145,147,150,142,142,142,32,151,152,228,140,140,140,32,145,150,151,140,140,140,32,229,160,161,142,142,142,32,161,145,151,142,142,142,32,151,228,229,141,141,141,32,151,229,161,140,140,140,33,111,128,157,129,0,0,0,0,32,41,56,65,143,143,143,32,65,75,86,144,144,144,32,86,97,112,39,39,39,32,112,129,157,39,39,39,32,157,156,162,145,145,145,32,157,162,130,39,39,39,32,6,5,4,39,39,39,32,26,20,21,39,39,39,32,42,35,26,146,146,146,32,66,48,42,147,147,147,32,66,42,26,148,148,148,32,21,6,4,39,39,39,32,21,4,10,39,39,39,32,112,157,130,149,149,149,32,21,10,15,39,39,39,32,112,130,113,150,150,150,32,21,15,19,39,39,39,32,86,112,113,149,149,149,32,26,21,19,145,145,145,32,86,113,98,151,151,151,32,26,19,25,152,152,152,32,86,98,87,153,153,153,32,26,25,34,154,154,154,32,86,87,76,155,155,155,32,66,26,34,156,156,156,32,65,86,76,157,157,157,32,76,66,34,158,158,158,32,41,65,76,159,159,159,32,34,41,76,160,160,160,33,113,130,163,131,99,99,99,99,33,115,132,165,133,161,161,161,161,33,117,134,167,135,162,162,162,162,32,167,194,213,163,163,163,32,213,223,209,164,164,164,32,209,185,151,165,165,165,32,151,150,184,40,40,40,32,151,184,208,166,166,166,32,213,209,151,167,167,167,32,135,167,213,168,168,168,32,169,118,135,169,169,169,32,168,169,135,170,170,170,32,135,213,151,171,171,171,32,151,208,222,172,172,172,32,151,222,224,173,173,173,32,195,168,135,174,174,174,32,214,195,135,175,175,175,32,135,151,224,176,176,176,32,224,214,135,177,177,177,33,170,171,137,136,178,178,178,178,32,181,147,146,109,109,109,32,146,180,204,110,110,110,32,204,218,200,179,179,179,32,200,173,138,180,180,180,32,138,120,119,181,181,181,32,119,136,137,182,182,182,32,119,137,172,183,183,183,32,200,138,119,184,184,184,32,181,146,204,114,114,114,32,205,181,204,185,185,185,32,200,119,172,186,186,186,32,200,172,199,187,187,187,32,205,204,200,188,188,188,32,219,205,200,114,114,114,32,200,199,217,189,189,189,32,219,200,217,119,119,119,33,138,173,139,121,190,190,190,190,33,140,175,141,123,191,191,191,191,32,192,211,187,145,145,145,32,187,153,230,149,149,149,32,230,235,234,192,192,192,32,228,152,186,39,39,39,32,230,234,228,193,193,193,32,192,187,230,194,194,194,32,133,165,192,195,195,195,32,101,116,133,196,196,196,32,78,101,133,197,197,197,32,133,192,230,198,198,198,32,230,228,186,199,199,199,32,230,186,210,200,200,200,32,78,133,230,201,201,201,32,68,78,230,202,202,202,32,230,210,212,203,203,203,32,230,212,193,204,204,204,32,59,68,230,205,205,205,32,102,60,59,39,39,39,32,117,102,59,206,206,206,32,59,230,193,207,207,207,32,59,193,166,208,208,208,32,134,117,59,209,209,209,32,166,134,59,210,210,210,33,142,177,143,125,211,211,211,211,33,102,117,135,118,212,212,212,212,33,180,146,145,178,213,213,213,213,33,182,148,147,181,214,214,214,214,33,184,150,149,183,213,213,213,213,33,186,152,151,185,139,139,139,139,33,188,154,153,187,213,213,213,213,33,162,156,155,189,139,139,139,139,33,177,159,158,143,213,213,213,213,33,179,161,160,190,139,139,139,139,33,130,162,189,163,105,105,105,105,33,132,164,192,165,104,104,104,104,33,134,166,194,167,103,103,103,103,33,169,168,196,197,102,102,102,102,33,171,198,172,137,215,215,215,215,33,173,200,174,139,216,216,216,216,33,175,202,176,141,217,217,217,217,33,204,180,178,203,218,218,218,218,33,206,182,181,205,219,219,219,219,33,33,47,56,41,220,220,220,220,33,208,184,183,207,218,218,218,218,33,210,186,185,209,221,221,221,221,33,191,188,187,211,211,211,211,211,33,202,179,190,176,221,221,221,221,33,164,191,211,192,138,138,138,138,33,166,193,213,194,137,137,137,137,33,168,195,215,196,222,222,222,222,32,215,225,227,145,145,145,32,227,221,207,223,223,223,32,207,183,149,39,39,39,32,149,148,182,145,145,145,32,149,182,206,39,39,39,32,196,215,227,224,224,224,32,170,197,196,39,39,39,32,171,170,196,39,39,39,32,207,149,206,149,149,149,32,207,206,220,150,150,150,32,198,171,196,39,39,39,32,216,198,196,225,225,225,32,227,207,220,226,226,226,32,227,220,226,227,227,227,32,216,196,227,228,228,228,32,227,226,216,150,150,150,33,198,216,199,172,229,229,229,229,33,200,218,201,174,230,230,230,230,32,178,145,161,7,7,7,32,161,179,202,110,110,110,32,202,175,140,231,231,231,32,140,122,105,232,232,232,32,105,90,79,233,233,233,32,79,103,104,234,234,234,32,79,104,121,235,235,235,32,140,105,79,236,236,236,32,161,202,140,237,237,237,32,203,178,161,238,238,238,32,201,203,161,239,239,239,32,140,79,121,240,240,240,32,140,121,139,241,241,241,32,201,161,140,242,242,242,32,140,139,174,243,243,243,32,174,201,140,244,244,244,33,218,204,203,201,245,245,245,245,33,220,206,205,219,246,246,246,246,33,222,208,207,221,245,245,245,245,33,212,210,209,223,217,217,217,217,33,193,212,223,213,191,191,191,191,33,195,214,225,215,190,190,190,190,33,216,226,217,199,247,247,247,247,33,226,220,219,217,248,248,248,248,33,224,222,221,227,230,230,230,230,33,214,224,227,225,216,216,216,216,33,67,89,101,78,107,107,107,107,33,230,231,232,235,249,249,249,249,32,159,231,230,142,142,142,32,230,153,154,141,141,141,32,155,156,157,140,140,140,32,155,157,128,141,141,141,32,128,127,144,142,142,142,32,158,159,230,140,140,140,32,155,128,144,140,140,140,32,158,230,154,250,250,250,32,154,155,144,141,141,141,32,154,144,158,140,140,140,33,233,234,235,232,141,141,141,141,33,229,228,234,233,251,251,251,251,32,170,136,119,252,252,252,32,170,119,103,253,253,253,32,169,197,170,253,253,253,32,60,102,118,254,254,254,32,169,170,103,252,252,252,32,51,60,118,255,255,255,32,118,169,103,256,256,256,32,79,69,37,254,254,254,32,118,103,79,256,256,256,32,28,51,118,119,119,119,32,118,79,37,257,257,257,32,118,37,29,255,255,255,32,6,21,28,258,258,258,32,28,118,29,259,259,259,32,11,7,2,258,258,258,32,28,29,11,260,260,260,32,2,6,28,261,261,261,32,11,2,28,258,258,258],\"metadata\":{\"generator\":\"io_three\",\"uvs\":0,\"vertices\":236,\"version\":3,\"normals\":262,\"type\":\"Geometry\",\"faces\":361},\"uvs\":[],\"vertices\":[13.5,4,-19,0.25,4,-19,0.25,4,-19,25.072,4,-19.516,13.5,-4,-19,0.25,-4,-19,0.25,-4,-19,31.4168,4,-19,36.8779,4,-19.8609,36.5675,4,-21.3284,25.072,-4,-19.516,31.4168,0.999999,-19,36.8779,0.999999,-19.8609,48.8158,4,-22.9912,48.3715,4,-24.4239,36.5675,-4,-21.3284,48.8158,0.999999,-22.9912,61.1032,4,-27.3307,60.5549,4,-28.7269,48.3715,-4,-24.4239,36.8779,-4,-19.8609,31.4168,-4,-19,61.1032,0.999999,-27.3307,73.7534,4,-32.7173,73.1323,4,-34.0827,60.5549,-4,-28.7269,48.8158,-4,-22.9912,36.8779,-1,-19.8609,31.4168,-1,-19,61.5227,0.999999,-19,64.0275,0.999999,-19.8843,73.7534,0.999999,-32.7173,86.7543,4,-38.911,86.0904,4,-40.2561,73.1323,-4,-34.0827,61.1032,-4,-27.3307,48.8158,-1,-22.9912,61.5227,4,-19,64.0275,4,-19.8843,77.0661,0.999999,-25.4354,86.7543,0.999998,-38.911,86.0904,-4,-40.2561,73.7534,-4,-32.7173,61.1032,-1,-27.3307,77.0661,4,-25.4354,90.2952,0.999999,-31.7373,113.754,4,-52.4739,113.09,4,-53.819,86.7543,-4,-38.911,73.7534,-1,-32.7173,64.0275,-1,-19.8843,61.5227,-1,-19,90.2952,4,-31.7373,113.754,0.999998,-52.4739,127.753,4,-59.141,127.132,4,-60.5063,113.09,-4,-53.819,86.7543,-1,-38.911,77.0661,-1,-25.4354,64.0275,-4,-19.8843,61.5227,-4,-19,117.295,0.999998,-45.3002,127.753,0.999997,-59.141,142.103,4,-65.2472,141.555,4,-66.6434,127.132,-4,-60.5063,113.754,-4,-52.4739,90.2952,-1,-31.7373,77.0661,-4,-25.4354,107.266,4,-19,117.295,4,-45.3002,131.066,0.999998,-51.8591,142.103,0.999997,-65.2472,156.816,4,-70.4378,156.371,4,-71.8705,141.555,-4,-66.6434,127.753,-4,-59.141,113.754,-1,-52.4739,90.2952,-4,-31.7373,107.266,0.999999,-19,125.705,4,-28.2627,131.066,4,-51.8591,145.027,0.999997,-57.8009,156.816,0.999997,-70.4378,171.878,4,-74.3812,171.567,4,-75.8488,156.371,-4,-71.8705,142.103,-4,-65.2472,127.753,-1,-59.141,117.295,-1,-45.3002,125.705,0.999999,-28.2627,138.934,4,-34.5646,145.027,4,-57.8009,159.186,0.999997,-62.7969,171.878,0.999997,-74.3812,187.224,4,-76.7956,187.072,4,-78.2878,171.567,-4,-75.8488,156.816,-4,-70.4378,142.103,-1,-65.2472,131.066,-1,-51.8591,117.295,-4,-45.3002,107.266,-4,-19,125.087,0.999999,-19,129.246,0.999999,-21.089,138.934,0.999999,-34.5646,151.973,4,-40.1157,159.186,4,-62.7969,173.534,0.999997,-66.5545,187.224,0.999997,-76.7956,202.5,4,-77.5,202.5,4,-79,187.072,-4,-78.2878,171.878,-4,-74.3812,156.816,-1,-70.4378,145.027,-1,-57.8009,131.066,-4,-51.8591,125.705,-4,-28.2627,107.266,-1,-19,125.087,4,-19,129.246,4,-21.089,142.247,0.999999,-27.2827,151.973,0.999998,-40.1157,164.814,4,-44.6497,173.534,4,-66.5545,188.036,0.999997,-68.8369,202.5,0.999997,-77.5,215.75,4,-77.5,215.75,4,-79,202.5,-4,-79,187.224,-4,-76.7956,171.878,-1,-74.3812,159.186,-1,-62.7969,145.027,-4,-57.8009,138.934,-4,-34.5646,125.705,-1,-28.2627,128.429,4,-19,129.91,4,-19.7439,142.247,4,-27.2827,154.897,0.999999,-32.6693,164.814,0.999998,-44.6497,177.466,4,-47.9659,188.036,4,-68.8369,202.5,0.999997,-69.5,215.75,0.999997,-77.5,215.75,0.999998,-42.5,215.75,4,-42.5,215.75,4,-41,215.75,-4,-41,215.75,-4,-42.5,215.75,-1,-42.5,215.75,-1,-50.5,215.75,-4,-50.5,215.75,-4,-69.5,215.75,-1,-69.5,215.75,-1,-77.5,215.75,-4,-77.5,215.75,-4,-79,215.75,0.999997,-69.5,215.75,4,-69.5,215.75,4,-50.5,215.75,0.999998,-50.5,202.5,-4,-77.5,187.224,-1,-76.7956,173.534,-1,-66.5545,159.186,-4,-62.7969,151.973,-4,-40.1157,138.934,-1,-34.5646,129.246,-1,-21.089,125.087,-1,-19,128.429,-4,-19,129.91,-4,-19.7439,142.868,4,-25.9173,154.897,4,-32.6693,167.184,0.999998,-37.0088,177.466,0.999998,-47.9659,189.964,4,-49.9349,202.5,4,-69.5,202.5,0.999998,-42.5,202.5,0.999998,-50.5,202.5,4,-42.5,202.5,4,-41,202.5,-4,-41,202.5,-4,-42.5,202.5,-1,-42.5,202.5,-1,-50.5,202.5,-4,-50.5,202.5,-4,-69.5,202.5,-1,-69.5,202.5,-1,-77.5,202.5,4,-50.5,188.036,-1,-68.8369,173.534,-4,-66.5545,164.814,-4,-44.6497,151.973,-1,-40.1157,142.247,-1,-27.2827,129.246,-4,-21.089,125.087,-4,-19,142.868,-4,-25.9173,155.445,4,-31.2731,167.184,4,-37.0088,179.122,0.999998,-40.1391,189.964,0.999998,-49.9349,190.776,0.999998,-41.9762,190.776,4,-41.9762,190.928,4,-40.484,190.928,-4,-40.484,190.776,-4,-41.9762,190.776,-1,-41.9762,189.964,-1,-49.9349,189.964,-4,-49.9349,188.036,-4,-68.8369,177.466,-4,-47.9659,164.814,-1,-44.6497,154.897,-1,-32.6693,142.247,-4,-27.2827,155.445,-4,-31.2731,167.629,4,-35.5761,179.122,4,-40.1391,179.433,4,-38.6716,179.433,-4,-38.6716,179.122,-4,-40.1391,179.122,-1,-40.1391,177.466,-1,-47.9659,167.184,-1,-37.0088,154.897,-4,-32.6693,167.629,-4,-35.5761,167.184,-4,-37.0088,215.75,-4,-54,215.75,4,-54,215.75,-4,-66,215.75,4,-66,224.75,4,-67.5,224.75,4,-52.5,224.75,-4,-52.5,224.75,-4,-67.5],\"normals\":[0,0,-1,-1,0,0,-0.0445486,0,-0.999007,0.155718,0,0.987801,-0.155736,0,-0.987799,0.253644,0,0.967297,-0.253664,0,-0.967292,0,1,-4.47035e-8,0,1,-8.46131e-8,-8.14258e-9,1,-7.6445e-8,-5.92875e-9,1,-6.27385e-8,4.72257e-8,1,5.44613e-8,1.1424e-8,1,-1.80965e-8,1.31926e-9,1,-3.11904e-8,2.24156e-9,1,-4.09909e-8,-6.98805e-9,1,-7.05171e-8,-3.75876e-8,1,-1.27014e-7,-3.04131e-10,1,-4.47376e-8,1.89593e-10,1,-4.68631e-8,-1.01887e-9,1,-4.64883e-8,-6.56412e-7,1,-0.00000190795,-3.02055e-9,1,-5.13552e-8,7.1915e-9,1,-2.3228e-8,1.21781e-7,1,3.03618e-7,-5.63625e-8,1,-1.56149e-7,-2.77311e-9,1,-5.12607e-8,-8.77279e-15,1,-6.92356e-8,7.09665e-10,1,-4.05701e-8,-9.60341e-10,1,-4.17442e-8,5.0574e-8,1,7.5841e-8,2.69361e-10,1,-4.56591e-8,0.33301,0,0.942923,0.448878,0,0.893593,-0.333026,0,-0.942918,0.391771,0,0.920063,-0.391782,0,-0.920058,-8.89178e-8,-1,-1.33064e-7,-1.42174e-8,-1,5.6339e-9,-7.54731e-9,-1,1.40254e-9,0,-1,0,0,-1,4.47035e-8,2.21797e-9,-1,4.8377e-8,1.05009e-9,-1,4.25226e-8,9.03344e-9,-1,6.54495e-8,-5.58271e-8,-1,-7.86895e-8,1.46171e-9,-1,4.59577e-8,8.59902e-10,-1,5.76939e-8,3.65253e-9,-1,4.56714e-8,-2.9184e-10,-1,4.68948e-8,2.30254e-9,-1,4.9315e-8,-5.38174e-9,-1,2.74804e-8,1.03396e-9,-1,4.66897e-8,-1.18014e-7,-1,-1.90986e-7,-9.81745e-9,-1,1.57379e-8,2.87717e-8,-1,1.36409e-7,1.56263e-8,-1,7.96536e-8,-1.22058e-9,-1,4.43453e-8,3.30025e-11,-1,3.82077e-8,-0.332928,0,-0.942952,0.430095,0,0.902784,-0.430101,0,-0.902781,0,1,-6.81196e-8,5.29819e-9,1,-3.17891e-8,-6.62274e-9,1,-3.97364e-8,-3.70227e-9,1,-8.21353e-8,-0.0000155111,1,-0.0000984507,-7.49744e-9,1,-3.97364e-8,-6.75794e-9,1,-1.474e-7,-4.84757e-8,1,-1.85098e-7,-1.30259e-7,1,-3.46192e-7,9.6865e-8,1,1.57674e-7,8.16515e-9,1,-6.46645e-10,-9.21426e-10,1,-4.53579e-8,1.04077e-8,1,-3.21876e-8,-1.77051e-9,1,-4.9456e-8,7.29561e-9,1,-2.25177e-8,3.50621e-9,1,-4.26538e-8,-9.10971e-9,1,-6.43473e-8,6.73916e-10,1,-4.1367e-8,-4.49661e-14,1,-2.69599e-7,-3.55381e-8,1,-1.12435e-7,-4.28666e-9,1,-6.00129e-8,-3.23615e-9,1,-5.22795e-8,-0.391717,0,-0.920086,0.391771,0,0.920063,-0.430066,0,-0.902798,0.448878,0,0.893593,0.429975,0,0.902841,-0.42997,0,-0.902843,0.391555,0,0.920155,-0.391547,0,-0.920158,-0.430001,0,-0.902829,0.332696,0,0.943034,-0.332685,0,-0.943038,-0.3916,0,-0.920136,0.253277,0,0.967394,-0.253265,0,-0.967397,0.430066,0,0.902798,-0.332758,0,-0.943012,0.155412,0,0.98785,-0.155402,0,-0.987851,0.448882,0,0.893591,-0.448897,0,-0.893584,0.391717,0,0.920086,-0.253347,0,-0.967375,0.0460657,0,0.998938,-0.046112,0,-0.998936,-0.448878,0,-0.893593,-0.3916,0,-0.920136,0,1,0,0,1,0,-2.36216e-8,1,-1.50157e-7,1.39595e-8,1,-6.043e-9,-1.56654e-7,1,-3.64592e-7,0,1,0,1.09466e-7,1,4.17461e-7,2.21095e-8,1,7.66205e-9,-1.31505e-7,1,-3.14528e-7,1.40089e-9,1,-4.54348e-8,0,1,0,4.91841e-13,1,-4.62014e-7,0,1,0,-2.47888e-8,1,-1.5723e-7,4.15281e-8,1,1.61517e-7,-6.39491e-8,1,-2.43856e-7,1.46402e-8,1,-4.54072e-9,1.27928e-8,1,-3.9678e-9,1.46067e-8,1,-4.53034e-9,1.76371e-8,1,-5.47029e-9,1.55706e-8,1,-2.45392e-9,9.77349e-9,1,-2.15644e-8,1.38579e-8,1,-6.30428e-9,1.8977e-8,1,-8.63307e-9,5.40378e-7,1,0.00000114171,1.10852e-7,1,1.94058e-7,1.47634e-7,1,2.74235e-7,-0.430095,0,-0.902784,0.332928,0,0.942952,-0.155468,0,-0.987841,0,0,1,1,0,0,1,0,0,1,0,0,-3.31457e-7,-1,-6.24684e-7,-1.88262e-7,-1,-4.42427e-7,0,-1,0,-2.27477e-7,-1,-5.34224e-7,-3.86217e-7,-1,-7.33696e-7,-1.40089e-9,-1,4.54348e-8,0,-1,0,0,-1,0,5.13143e-8,-1,3.16914e-7,-3.52741e-8,-1,1.09406e-8,1.05839e-7,-1,3.00003e-7,2.75531e-7,-1,6.47057e-7,-3.11412e-8,-1,4.90784e-9,-5.40378e-7,-1,-0.00000114171,1.01484e-7,-1,3.03072e-7,-4.75679e-7,-1,-9.98808e-7,1.21751e-7,-1,2.93853e-7,4.85137e-7,-1,0.00000109554,-0.332758,0,-0.943012,0.430066,0,0.902798,3.44562e-8,-1,1.23883e-7,2.83957e-8,-1,1.80231e-7,0,-1,2.10966e-7,-8.82356e-9,-1,3.00895e-8,-4.0576e-9,-1,2.58022e-8,4.55856e-8,-1,1.52443e-7,4.13213e-15,-1,3.86096e-8,-9.5931e-9,-1,3.79701e-8,-2.76619e-9,-1,3.70459e-8,1.63881e-8,-1,1.03958e-7,2.85255e-8,-1,1.46867e-7,-2.02823e-9,-1,3.42362e-8,-2.30189e-9,-1,3.88556e-8,-9.04764e-9,-1,1.16105e-8,2.20644e-10,-1,5.55663e-8,0.448899,0,0.893583,5.12978e-8,1,1.95629e-7,2.21094e-8,1,7.66165e-9,-6.97694e-7,1,-0.00000150298,-1.82948e-13,1,-3.20504e-7,6.43057e-8,1,9.63576e-8,-1.73545e-8,1,-9.35235e-8,1.34174e-8,1,-1.61139e-7,6.86232e-8,1,1.07456e-7,9.77348e-9,1,-2.15645e-8,-2.30403e-8,1,-1.5742e-7,1.76371e-8,1,-5.47025e-9,-0.391772,0,-0.920062,0.253544,0,0.967324,5.29819e-9,-1,3.17891e-8,-6.62274e-9,-1,3.97364e-8,0,-1,0,9.69514e-8,-1,3.70197e-7,2.90708e-7,-1,6.83072e-7,-1.31181e-8,-1,9.04302e-9,-6.86111e-10,-1,5.22388e-8,1.04964e-8,-1,3.97364e-8,1.44225e-9,-1,3.19966e-8,-3.30489e-9,-1,2.96503e-8,2.1707e-8,-1,1.21233e-7,-4.48092e-8,-1,-4.22415e-8,3.12474e-8,-1,1.19215e-7,-4.39445e-8,-1,-1.03219e-7,-1.0117e-9,-1,4.94655e-8,3.65778e-9,-1,5.33944e-8,-3.11212e-8,-1,-8.81446e-8,-1.08152e-8,-1,-2.27034e-8,1.93989e-8,-1,1.31465e-7,-0.0457995,0,-0.998951,0.448883,0,0.893591,0,0,-1,0,0,1,0.4301,0,0.902781,-0.333009,0,-0.942923,0.155632,0,0.987815,-0.0446296,0,-0.999004,0.0445486,0,0.999007,-0.448878,0,-0.893593,0.0450295,0,0.998986,-0.430095,0,-0.902784,6.02103e-8,-1,3.81945e-7,1.65579e-7,-1,4.24542e-7,1.88293e-7,-1,5.31219e-7,-7.29038e-8,-1,-2.50245e-7,-3.73577e-8,-1,1.15867e-8,-8.90307e-8,-1,-1.82216e-7,0.391782,0,0.920058,-0.253644,0,-0.967298,9.71375e-9,1,1.11245e-9,1.99288e-8,1,3.85991e-9,-6.64634e-8,1,-1.77353e-7,-3.05372e-15,1,-2.85332e-8,-2.32503e-9,1,-5.29972e-8,9.70114e-9,1,-2.23863e-8,-1.1036e-9,1,-5.03617e-8,-2.15667e-9,1,-4.82755e-8,6.71821e-9,1,-2.22725e-8,-4.92195e-10,1,-4.52564e-8,-3.3872e-10,1,-4.5057e-8,-1.01903e-9,1,-4.96254e-8,-1.78189e-9,1,-4.62517e-8,-2.11519e-9,1,-4.61483e-8,-0.155718,0,-0.987802,0.155736,0,0.987799,0.333026,0,0.942918,0.253664,0,0.967292,-0.164399,0,-0.986394,1,0,0,-0.164399,0,0.986394,5.70813e-7,0,1,5.70813e-7,0,1,1.66789e-7,0,1,1.66789e-7,0,1,1.07023e-7,0,1,1.66789e-7,0,1,1.83594e-7,0,1,1.5088e-7,-3.63846e-7,1,1.26709e-7,0,1,1.83594e-7,0,1]},\"double_turnout_L_b\":{\"uvs\":[],\"normals\":[-5.70954e-15,-1,4.47035e-8,-1.68678e-15,-1,4.69663e-8,-1.06014e-10,-1,4.35162e-8,5.06085e-7,1,7.99196e-7,-7.73778e-15,1,-6.63412e-8,-1.09959e-8,1,-1.94107e-8,4.71079e-15,1,-4.03677e-8,1.39766e-8,1,5.05052e-8,-4.04011e-9,1,-5.40004e-8,-3.87055e-9,1,-5.97396e-8,-2.45412e-8,1,-2.06081e-7,0,1,0,1.2772e-7,0,-1,-7.78152e-8,-0.00000111262,1,-0.111152,0,-0.993803,0,-1,0,-0.405239,-6.20109e-8,-0.914211,-8.04385e-8,0,1,0,1,0,-0.164399,0,-0.986394,-7.78152e-8,0.00000111262,1,5.70954e-15,1,-4.47035e-8,1.68678e-15,1,-4.69663e-8,1.06014e-10,1,-4.35162e-8,-8.86652e-8,-7.94729e-7,-1,-0.164399,0,0.986394,1,0,0,4.36474e-15,-1,4.47035e-8,0,-1,0,1,0,0,1,0,0,1,0,0,1.48026e-7,0,1,-0.359892,0,-0.932994,-8.86652e-8,7.94729e-7,-1,-4.36474e-15,1,-4.47035e-8,-0.65317,0,-0.757211,-0.653173,-0.00000168497,-0.757209,-0.653173,-4.51332e-8,-0.757209,-0.65317,0,-0.757211,-0.653174,0.00000168497,-0.757208,-0.653173,0,-0.757209,-0.615231,0,-0.788347,-0.615227,0,-0.78835,-0.615227,0,-0.78835,-0.615227,0,-0.78835,-0.615227,0,-0.78835,-0.689541,0,-0.724247,-0.724246,0,-0.689542,-0.724248,0.00000109599,-0.68954,-0.724246,-0.000001096,-0.689542,-0.724263,0,-0.689524,-0.724247,0,-0.689541,-0.724263,0,-0.689524,-0.724245,0,-0.689542,-0.724245,0,-0.689542,-0.757204,0,-0.653179,-5.9585e-15,-1,5.07397e-8,1.00876e-10,-1,5.79415e-8,4.3456e-8,-1,1.2837e-7,-2.42607e-15,-1,4.85088e-8,5.31584e-11,-1,3.05335e-8,-5.96262e-11,-1,4.69054e-8,-3.07074e-10,-1,4.30661e-8,1.17433e-7,0,-1,1.32455e-8,1,-7.94729e-8,-1.4666e-14,1,-1.13718e-7,8.25008e-15,1,-6.8914e-8,-1.95216e-9,1,-1.70659e-7,-5.1136e-10,1,-4.47034e-8,-1.5829e-8,1,9.49742e-8,-5.08434e-9,1,-2.922e-8,-0.122409,0,-0.99248,-0.122409,0,-0.99248,-0.122409,0,-0.99248,-0.122409,0,-0.99248,-0.313679,0,-0.949529,-8.3355e-8,-0.00000445048,1,0,-1,0,-0.266711,0,-0.963777,-0.266711,-1.54052e-7,-0.963776,-0.266711,0,-0.963776,-0.266711,1.54052e-7,-0.963776,-0.266711,0,-0.963776,-0.449608,0,-0.893226,1.32455e-8,-1,7.94729e-8,-1.90283e-14,-1,1.58946e-7,5.1136e-10,-1,4.47034e-8,-1.95942e-9,-1,6.66425e-8,-2.98627e-10,-1,4.74459e-8,-8.33587e-8,0,1,0,1,0,1.17433e-7,0,-1,5.16731e-15,1,-1.03319e-7,-1.06576e-9,1,-5.236e-8,-1.56082e-7,1,-3.52119e-7,-1.05584e-9,1,-5.18729e-8,8.0088e-10,1,-5.58385e-8,-2.10326e-10,1,-3.52526e-8,-8.3355e-8,0.00000445048,1,-0.0735638,0,-0.99729,1.94707e-7,-1,3.42804e-7,-5.49449e-15,-1,4.70833e-8,-4.98303e-9,-1,-1.80065e-8,9.3918e-10,-1,5.27295e-8,-1.04549e-8,-1,7.11775e-8,1.07989e-9,-1,6.91652e-8,4.79774e-9,-1,1.08236e-8,9.3457e-10,-1,5.98575e-8,-1.13958e-7,0,-1,-1.0326e-7,0,-1,-0.170958,0,-0.985278,-8.16452e-8,-0.00000333786,-1,-8.16452e-8,0.00000333786,-1,-0.492896,0,-0.870088,-0.492896,-4.41377e-7,-0.870088,-0.492896,0,-0.870088,-0.492894,4.41357e-7,-0.870089,-0.492895,0,-0.870089,7.35902e-14,-1,0.00000157735,5.92024e-15,-1,3.88739e-8,-2.82837e-9,-1,4.33344e-8,-2.51679e-7,-1,-2.91774e-7,-7.00034e-10,-1,2.91913e-8,0,1,0,-2.25468e-15,1,-4.83272e-8,1.6909e-10,1,-3.86069e-8,-3.32512e-7,1,-4.72156e-7,-3.44631e-10,1,-4.60797e-8,-0.2191,0,-0.975703,1.52293e-7,0,1,0.615233,0,0.788346,0.575808,4.87319e-8,0.817585,0.575788,0,0.817599,0.575809,0.00000233913,0.817584,0.575808,-0.00000233913,0.817585,0.575808,0,0.817585,0.653162,0,0.757218,0.653173,0,0.757209,0.653173,0,0.757209,0.653162,0,0.757218,0.653173,0,0.757209,0.534998,0,0.844853,0.4929,0,0.870086,0.492899,0,0.870087,0.492899,-4.41407e-7,0.870086,0.4929,4.4141e-7,0.870086,0.492899,0,0.870087,0.4929,0,0.870086,0.449612,0,0.893224,0.405238,0,0.914211,0.40524,0,0.91421,0.40524,0,0.91421,0.40524,0,0.91421,0.40524,0,0.91421,-0.534995,0,-0.844855,-0.534993,0,-0.844857,-0.534995,0,-0.844855,-0.534993,0,-0.844857,-0.534993,0,-0.844857],\"metadata\":{\"generator\":\"io_three\",\"normals\":160,\"uvs\":0,\"vertices\":130,\"version\":3,\"faces\":210,\"type\":\"Geometry\"},\"vertices\":[269.75,-0.999999,17.5,180.147,-0.999999,17.5,187.146,-0.999999,12.0382,190.088,-1,9.5,269.75,-1,9.50001,269.75,-4,19,269.75,-4,17.5,269.75,-4,9.50001,269.75,-4,6.50001,180.147,-4,17.5,190.088,-4,9.5,178.225,-4,19,260.75,-4,8.00001,198.11,-4,2.58069,269.75,4,19,269.75,4,6.50001,269.75,4,9.50001,269.75,1,9.50001,269.75,1,17.5,269.75,4,17.5,178.225,4,19,210.593,-4,-9.5,269.75,-4,-9.50001,269.75,-4,-6.50001,260.75,-4,-8.00001,208.596,-4,-7.40343,260.75,4,8.00001,180.147,4,17.5,190.088,4,9.5,198.11,4,2.58069,190.088,1,9.5,187.146,1,12.0382,180.147,1,17.5,210.593,-1,-9.5,269.75,-1,-9.50001,269.75,-4,-19,269.75,-1,-17.5,269.75,-4,-17.5,260.75,4,-8.00001,269.75,4,-6.50001,269.75,4,-9.50001,210.593,4,-9.5,208.596,4,-7.40343,218.209,-1,-17.5,218.209,-4,-17.5,218.581,-4,-17.8901,219.538,-4,-19,269.75,4,-19,269.75,4,-17.5,269.75,0.999999,-17.5,269.75,1,-9.50001,210.593,1,-9.5,219.538,4,-19,218.581,4,-17.8901,218.209,4,-17.5,218.209,0.999999,-17.5,107.232,-0.999999,17.5,26.0211,-0.999999,17.5,34.4812,-0.999999,16.4565,45.8457,-0.999999,14.4846,57.0998,-0.999999,11.9575,65.9801,-1,9.5,123.186,-1,9.5,121.149,-1,10.6538,109.882,-0.999999,16.3253,107.232,-4,17.5,26.0211,-4,17.5,23.0336,-4,17.8685,68.2164,-4,8.88113,65.9801,-4,9.49998,123.186,-4,9.49999,103.848,-4,19,8.99996,-4,19,11.5305,-4,18.717,23.0336,4,17.8685,26.0211,4,17.5,26.0211,1,17.5,34.4812,1,16.4565,45.8457,1,14.4846,57.0998,1,11.9575,65.9801,1,9.5,65.9801,4,9.49998,68.2164,4,8.88113,79.1686,-4,5.26305,132.124,-4,4.43623,89.93,-4,1.11192,11.5305,4,18.717,107.232,4,17.5,8.99996,4,19,103.848,4,19,107.232,1,17.5,123.186,1,9.5,109.882,1,16.3253,121.149,1,10.6538,123.186,4,9.49999,132.124,4,4.43623,89.93,4,1.11192,79.1686,4,5.26305,100.475,-4,-3.56224,112.105,-4,-9.49999,152.987,-4,-9.49999,142.782,-4,-2.31235,110.778,-4,-8.74818,142.782,4,-2.31235,152.987,4,-9.49999,112.105,4,-9.49999,110.778,4,-8.74818,100.475,4,-3.56224,120.814,-1,-14.4334,112.105,-1,-9.5,152.987,-1,-9.5,152.987,1,-9.5,112.105,1,-9.5,120.814,0.999999,-14.4334,128.025,-4,-19,125.656,-4,-17.5,125.656,-1,-17.5,163.229,-1,-17.5,163.039,-1,-17.3363,153.095,-1,-9.57558,163.229,0.999999,-17.5,125.656,0.999999,-17.5,153.095,1,-9.57558,163.039,0.999999,-17.3363,125.656,4,-17.5,128.025,4,-19,164.968,-4,-19,163.229,-4,-17.5,163.229,4,-17.5,164.968,4,-19],\"faces\":[32,4,0,1,0,0,0,32,2,3,4,1,1,1,32,1,2,4,2,2,2,32,94,95,103,3,3,3,32,103,104,105,4,4,4,32,103,105,106,5,5,5,32,81,94,103,6,6,6,32,82,81,103,7,7,7,32,103,106,107,8,8,8,32,103,107,96,9,9,9,32,97,82,103,10,10,10,32,103,96,97,11,11,11,33,1,0,6,9,12,12,12,12,33,10,7,4,3,13,13,13,13,33,88,86,73,72,14,14,14,14,33,5,11,9,6,15,15,15,15,33,85,96,107,98,16,16,16,16,33,89,88,72,71,17,17,17,17,33,14,19,27,20,18,18,18,18,33,12,26,15,8,19,19,19,19,33,30,17,16,28,20,20,20,20,32,32,18,17,21,21,21,32,17,30,31,22,22,22,32,17,31,32,23,23,23,33,27,19,18,32,12,12,12,12,33,33,34,22,21,24,24,24,24,33,23,39,38,24,25,25,25,25,33,12,24,38,26,26,26,26,26,33,36,34,33,43,27,27,27,27,32,46,35,37,28,28,28,32,37,44,45,15,15,15,32,37,45,46,15,15,15,32,19,14,5,29,29,29,32,5,6,0,30,30,30,32,4,7,8,26,26,26,32,4,8,15,30,30,30,32,15,16,17,29,29,29,32,18,19,5,26,26,26,32,4,15,17,26,26,26,32,18,5,0,31,31,31,32,0,4,17,30,30,30,32,0,17,18,26,26,26,33,37,36,43,44,32,32,32,32,33,97,96,85,83,33,33,33,33,33,41,40,50,51,34,34,34,34,32,48,47,52,18,18,18,32,53,54,48,11,11,11,32,52,53,48,11,11,11,33,48,54,55,49,32,32,32,32,33,49,55,51,50,35,35,35,35,32,2,31,30,36,36,36,32,30,28,29,37,37,37,32,29,13,10,38,38,38,32,3,2,30,39,39,39,32,29,10,3,40,40,40,32,30,29,3,41,41,41,32,31,2,1,42,42,42,32,1,9,11,43,43,43,32,11,20,27,44,44,44,32,32,31,1,42,42,42,32,11,27,32,45,45,45,32,1,11,32,46,46,46,33,29,42,25,13,47,47,47,47,32,25,42,41,48,48,48,32,25,41,51,49,49,49,32,33,21,25,50,50,50,32,45,44,43,51,51,51,32,33,25,51,52,52,52,32,53,45,43,53,53,53,32,43,33,51,54,54,54,32,55,54,53,51,51,51,32,43,51,55,55,55,55,32,55,53,43,53,53,53,33,53,52,46,45,56,56,56,56,32,64,56,57,57,57,57,32,64,57,58,58,58,58,32,62,63,64,59,59,59,32,60,61,62,60,60,60,32,64,58,59,61,61,61,32,59,60,62,62,62,62,32,59,62,64,63,63,63,33,57,56,65,66,64,64,64,64,32,38,39,40,65,65,65,32,40,41,42,66,66,66,32,29,28,16,67,67,67,32,38,40,42,68,68,68,32,16,15,26,18,18,18,32,26,38,42,69,69,69,32,29,16,26,70,70,70,32,26,42,29,71,71,71,32,66,67,74,72,72,72,32,74,75,76,73,73,73,32,76,77,58,74,74,74,32,57,66,74,75,75,75,32,76,58,57,74,74,74,32,74,76,57,75,75,75,33,82,97,83,68,76,76,76,76,33,69,70,62,61,77,77,77,77,32,65,71,72,15,15,15,32,72,73,67,15,15,15,32,67,66,65,78,78,78,32,72,67,65,15,15,15,32,61,60,79,79,79,79,32,80,81,82,80,80,80,32,61,79,80,81,81,81,32,68,69,61,82,82,82,32,80,82,68,83,83,83,32,80,68,61,83,83,83,33,107,106,102,98,84,84,84,84,32,25,21,22,15,15,15,32,22,23,24,15,15,15,32,12,8,7,85,85,85,32,25,22,24,28,28,28,32,12,7,10,86,86,86,32,25,24,12,87,87,87,32,12,10,13,88,88,88,32,12,13,25,89,89,89,33,5,14,20,11,90,90,90,90,32,35,47,48,26,26,26,32,35,48,49,29,29,29,32,36,37,35,26,26,26,32,23,22,34,30,30,30,32,36,35,49,30,30,30,32,39,23,34,30,30,30,32,34,36,49,30,30,30,32,50,40,39,26,26,26,32,34,49,50,26,26,26,32,50,39,34,29,29,29,32,89,87,75,91,91,91,32,74,86,88,11,11,11,32,89,75,74,18,18,18,32,74,88,89,11,11,11,33,75,87,90,76,92,92,92,92,32,93,91,80,93,93,93,32,93,80,79,94,94,94,32,90,92,93,95,95,95,32,77,76,90,11,11,11,32,93,79,78,96,96,96,32,78,77,90,97,97,97,32,78,90,93,98,98,98,33,80,91,94,81,99,99,99,99,33,86,74,67,73,100,100,100,100,32,102,99,100,15,15,15,32,100,101,84,101,101,101,32,84,70,69,102,102,102,32,84,69,68,103,103,103,32,102,100,84,104,104,104,32,98,102,84,105,105,105,32,84,68,83,106,106,106,32,85,98,84,107,107,107,32,84,83,85,108,108,108,33,46,52,47,35,109,109,109,109,33,114,125,129,126,110,110,110,110,33,77,78,59,58,111,111,111,111,33,109,110,100,99,112,112,112,112,33,105,104,111,112,113,113,113,113,32,99,102,106,114,114,114,32,106,105,112,115,115,115,32,112,113,108,116,116,116,32,109,99,106,117,117,117,32,112,108,109,116,116,116,32,106,112,109,118,118,118,32,119,110,109,119,119,119,32,108,116,117,120,120,120,32,119,109,108,121,121,121,32,117,118,119,122,122,122,32,108,117,119,123,123,123,32,123,120,121,124,124,124,32,113,112,111,125,125,125,32,123,121,113,126,126,126,32,111,122,123,127,127,127,32,113,111,123,128,128,128,33,78,79,60,59,129,129,129,129,33,127,115,114,126,15,15,15,15,33,117,116,115,127,130,130,130,130,33,128,124,121,120,130,130,130,130,33,129,125,124,128,11,11,11,11,33,119,118,123,122,131,131,131,131,32,103,101,100,132,132,132,32,110,119,122,133,133,133,32,103,100,110,134,134,134,32,111,104,103,135,135,135,32,110,122,111,133,133,133,32,110,111,103,136,136,136,32,123,118,117,137,137,137,32,117,127,126,138,138,138,32,126,129,128,139,139,139,32,120,123,117,140,140,140,32,126,128,120,138,138,138,32,117,126,120,141,141,141,33,103,95,84,101,142,142,142,142,32,84,95,94,143,143,143,32,91,93,63,144,144,144,32,84,94,91,145,145,145,32,62,70,84,146,146,146,32,91,63,62,147,147,147,32,91,62,84,148,148,148,33,93,92,64,63,149,149,149,149,32,64,92,90,150,150,150,32,90,87,89,151,151,151,32,89,71,65,152,152,152,32,56,64,90,150,150,150,32,89,65,56,153,153,153,32,90,89,56,154,154,154,32,116,108,113,155,155,155,32,121,124,125,156,156,156,32,116,113,121,157,157,157,32,114,115,116,158,158,158,32,121,125,114,159,159,159,32,121,114,116,159,159,159]},\"double_turnout_L_2\":{\"uvs\":[],\"normals\":[-4.25988e-15,-1,4.47035e-8,-4.3323e-10,-1,3.16964e-8,0,-1,0,3.0038e-11,-1,4.83306e-8,1.90432e-10,-1,5.72133e-8,-0.164399,0,0.986394,9.52919e-8,0,-1,-5.84811e-8,-0.0000038147,1,1,0,0,1,0,0,1,0,0,1,0,0,0,-1,0,0,-1,0,0,1,0,0,1,0,0,1,0,1.32455e-8,-1,7.94729e-8,0,-1,0,-1.85908e-14,-1,1.58947e-7,-4.39362e-10,-1,4.47034e-8,-3.98686e-9,-1,7.22717e-8,-6.9924e-10,-1,7.19204e-8,1.34278e-9,-1,3.48102e-9,-4.95769e-10,-1,5.09924e-8,-5.84811e-8,0.0000038147,1,4.25988e-15,1,-4.47035e-8,0,1,-1.8082e-7,4.83952e-10,1,-3.54217e-8,2.03976e-9,1,1.65378e-8,2.83479e-10,1,-4.65238e-8,-9.31908e-8,-0.00000190735,-1,0,1,0,0,1,0,-3.05594e-9,1,-9.94271e-8,-6.48449e-10,1,-5.96046e-8,9.91537e-10,1,-1.01985e-7,0,1,0,-0.1644,0,-0.986394,5.33968e-15,-1,4.47035e-8,3.00706e-15,-1,5.64686e-8,2.52085e-9,-1,4.44996e-9,-1.41548e-7,0,1,1.19447e-7,0,1,-9.31908e-8,0.00000190735,-1,1.19447e-7,0,1,-5.33968e-15,1,-4.47035e-8,-3.00706e-15,1,-5.64686e-8,-2.52085e-9,1,-4.44996e-9,-0.0249712,0,-0.999688,-0.0735636,0,-0.99729,-0.122394,0,-0.992482,-0.122412,0,-0.992479,-0.122394,0,-0.992482,-0.122394,0,-0.992482,-0.122394,0,-0.992482,-0.170961,0,-0.985278,-0.219099,0,-0.975703,-0.26671,0,-0.963777,-0.266712,-0.00000192677,-0.963776,-0.266712,0,-0.963776,-0.26671,0,-0.963777,-0.266713,0.00000192674,-0.963776,-0.266712,0,-0.963776,-0.313681,-2.30525e-7,-0.949528,-0.359895,-2.30525e-7,-0.932993,-0.40524,0,-0.91421,-0.449609,0,-0.893225,-0.449612,0,-0.893224,-0.44965,0.00000226379,-0.893205,-0.449609,-0.00000226397,-0.893225,-0.449612,0,-0.893224,-0.449625,0,-0.893218,-0.492896,0,-0.870089,-0.492898,0,-0.870087,-0.492898,0,-0.870087,-0.492896,0,-0.870089,-0.492898,0,-0.870087,-1.52469e-7,0,-1],\"metadata\":{\"generator\":\"io_three\",\"normals\":79,\"uvs\":0,\"vertices\":68,\"version\":3,\"faces\":110,\"type\":\"Geometry\"},\"vertices\":[269.75,-0.999997,77.5,29.5597,-0.999997,77.5,43.2852,-0.999997,75.8071,57.5514,-0.999997,73.3317,71.6789,-0.999997,70.1593,74.0613,-0.999997,69.5,269.75,-0.999997,69.5,269.75,-4,79,269.75,-4,77.5,269.75,-4,69.5,269.75,-4,66.5,29.5597,-4,77.5,74.0613,-4,69.5,0.250891,-4,79,14.4746,-4,78.6447,28.9147,-4,77.5795,260.75,-4,68,85.6338,-4,66.2975,99.3824,-4,61.7556,269.75,4,79,269.75,4,66.5,269.75,4,69.5,269.75,1,69.5,269.75,1,77.5,269.75,4,77.5,0.250891,4,79,126.48,-4,50.5,269.75,-4,50.5,269.75,-4,53.5,260.75,-4,52,112.892,-4,56.5445,126.129,-4,50.6769,260.75,4,68,29.5597,4,77.5,28.9147,4,77.5795,14.4746,4,78.6447,74.0613,4,69.5,99.3824,4,61.7556,85.6338,4,66.2975,74.0613,1,69.5,71.6789,1,70.1593,57.5514,1,73.3317,43.2852,1,75.8071,29.5597,1,77.5,126.48,-0.999998,50.5,269.75,-0.999998,50.5,269.75,-4,41,269.75,-0.999998,42.5,269.75,-4,42.5,260.75,4,52,269.75,4,53.5,269.75,4,50.5,126.48,4,50.5,126.129,4,50.6769,112.892,4,56.5445,139.062,-0.999998,44.1668,142.004,-0.999998,42.5,142.004,-4,42.5,144.652,-4,41,269.75,4,41,269.75,4,42.5,269.75,1,42.5,269.75,1,50.5,126.48,1,50.5,144.652,4,41,142.004,4,42.5,142.004,1,42.5,139.062,1,44.1668],\"faces\":[32,6,0,1,0,0,0,32,6,1,2,1,1,1,32,4,5,6,2,2,2,32,6,2,3,3,3,3,32,3,4,6,4,4,4,33,28,50,49,29,5,5,5,5,33,1,0,8,11,6,6,6,6,33,12,9,6,5,7,7,7,7,32,24,19,7,8,8,8,32,7,8,0,9,9,9,32,6,9,10,10,10,10,32,6,10,20,9,9,9,32,20,21,22,8,8,8,32,23,24,7,10,10,10,32,6,20,22,10,10,10,32,23,7,0,11,11,11,32,0,6,22,9,9,9,32,0,22,23,10,10,10,32,8,7,13,12,12,12,32,8,13,14,2,2,2,32,15,11,8,13,13,13,32,14,15,8,2,2,2,33,29,49,32,16,10,10,10,10,32,25,19,24,14,14,14,32,24,33,34,15,15,15,32,35,25,24,16,16,16,32,24,34,35,16,16,16,32,31,26,27,2,2,2,32,27,28,29,2,2,2,32,16,10,9,17,17,17,32,31,27,29,18,18,18,32,16,9,12,19,19,19,32,31,29,16,20,20,20,32,30,31,16,21,21,21,32,16,12,17,22,22,22,32,18,30,16,23,23,23,32,16,17,18,24,24,24,33,39,22,21,36,25,25,25,25,32,43,23,22,26,26,26,32,22,39,40,27,27,27,32,22,40,41,28,28,28,32,42,43,22,29,29,29,32,22,41,42,30,30,30,33,33,24,23,43,6,6,6,6,33,44,45,27,26,31,31,31,31,32,49,50,51,32,32,32,32,51,52,53,16,16,16,32,51,53,54,16,16,16,32,49,51,54,33,33,33,32,49,54,37,34,34,34,32,21,20,32,15,15,15,32,32,49,37,35,35,35,32,38,36,21,16,16,16,32,32,37,38,36,36,36,32,32,38,21,37,37,37,32,46,59,60,10,10,10,32,46,60,61,8,8,8,32,47,48,46,10,10,10,32,28,27,45,9,9,9,32,47,46,61,9,9,9,32,50,28,45,9,9,9,32,45,47,61,9,9,9,32,62,51,50,10,10,10,32,45,61,62,10,10,10,32,62,50,45,8,8,8,33,16,32,20,10,38,38,38,38,32,56,47,45,39,39,39,32,45,44,55,40,40,40,32,45,55,56,41,41,41,33,46,48,57,58,2,2,2,2,33,7,19,25,13,42,42,42,42,33,48,47,56,57,43,43,43,43,33,52,51,62,63,44,44,44,44,33,59,64,65,60,16,16,16,16,33,60,65,66,61,45,45,45,45,32,62,61,66,46,46,46,32,67,63,62,47,47,47,32,66,67,62,48,48,48,33,14,13,25,35,49,49,49,49,33,35,34,15,14,50,50,50,50,32,15,34,33,51,51,51,32,43,42,2,52,52,52,32,15,33,43,53,53,53,32,1,11,15,54,54,54,32,43,2,1,52,52,52,32,43,1,15,55,55,55,33,42,41,3,2,56,56,56,56,33,41,40,4,3,57,57,57,57,32,4,40,39,58,58,58,32,39,36,38,59,59,59,32,38,17,12,60,60,60,32,5,4,39,61,61,61,32,38,12,5,62,62,62,32,39,38,5,63,63,63,33,38,37,18,17,64,64,64,64,33,37,54,30,18,65,65,65,65,33,54,53,31,30,66,66,66,66,32,31,53,52,67,67,67,32,63,67,55,68,68,68,32,31,52,63,69,69,69,32,44,26,31,70,70,70,32,63,55,44,71,71,71,32,63,44,31,72,72,72,32,55,67,66,73,73,73,32,66,65,64,74,74,74,32,64,58,57,75,75,75,32,56,55,66,76,76,76,32,64,57,56,77,77,77,32,66,64,56,75,75,75,33,58,64,59,46,78,78,78,78]},\"double_turnout_L_1\":{\"uvs\":[],\"normals\":[0.893225,0,0.44961,6.38891e-7,1,2.11152e-7,9.56354e-9,1,-3.15234e-8,6.67655e-7,1,8.24242e-8,-6.62864e-7,1,-1.14938e-7,0,1,-3.3521e-8,1.6535e-9,1,-3.36541e-8,7.25866e-9,1,-4.89374e-8,1.71921e-7,1,1.77269e-8,1.55293e-8,1,-2.90521e-8,1.82996e-8,1,-2.73917e-8,8.04951e-8,1,2.10451e-8,0,1,-4.41289e-8,-2.1189e-8,1,-5.85232e-8,3.47295e-8,1,-1.64136e-8,3.24966e-9,1,-6.61411e-8,5.99957e-7,1,4.06469e-8,-1.27375e-7,1,-1.36158e-7,1.58725e-8,1,-2.93069e-8,7.26633e-9,1,-4.89361e-8,-5.85919e-7,1,-1.35261e-7,1.70223e-8,1,-2.83998e-8,1.70222e-8,1,-2.83998e-8,1.60907e-8,1,-6.42363e-8,8.04536e-9,1,-3.21181e-8,1.55286e-8,1,-2.90524e-8,1.41563e-8,1,-2.99316e-8,6.67901e-9,1,-3.26535e-8,2.83132e-8,1,-5.98646e-8,-0.00000281061,1,-0.00000104944,-5.48171e-7,1,-2.46933e-7,0.870088,0,0.492897,0,-1,6.73908e-8,6.97381e-7,-1,8.44629e-8,-6.70963e-7,-1,-4.95738e-8,-8.00561e-9,-1,3.19545e-8,-6.48313e-7,-1,-1.79489e-7,-1.40697e-8,-1,2.97867e-8,-1.69364e-8,-1,2.8255e-8,-1.96251e-8,-1,2.64582e-8,0,-1,4.83904e-8,-2.12046e-8,-1,2.58377e-8,-1.83232e-8,-1,2.74237e-8,1.39287e-7,-1,1.02319e-7,1.56571e-7,-1,7.31789e-8,-2.14763e-7,-1,3.92616e-8,-3.24559e-9,-1,3.2951e-8,-2.10052e-8,-1,2.55946e-8,-2.22474e-8,-1,2.48172e-8,-3.24559e-9,-1,3.2951e-8,-1.81652e-9,-1,3.32799e-8,-1.83375e-8,-1,2.74144e-8,-1.44119e-8,-1,3.00528e-8,0.00000293385,-1,6.25615e-7,-6.11744e-7,-1,-6.95219e-8,-1.56082e-8,-1,2.92008e-8,-9.61151e-9,-1,3.16847e-8,-9.61152e-9,-1,3.16847e-8,-1.69931e-8,-1,2.8675e-8,5.47323e-7,-1,2.82084e-7,-0.00000278482,-1,-0.00000110888,0.914211,0,0.405239,0.932992,0,0.359898,0.949529,0,0.313679,0.963776,0,0.266712,0.975702,0,0.219104,0.985278,0,0.170961,0.992479,0,0.122411,0.99729,0,0.0735636,0.999688,0,0.0249726,0,0,-1,0,0,-1,0,0,-1,-0.00000190735,-0.00000572205,-1,-0.00000190735,0.00000572205,-1,-0.00000138716,0,-1,-0.999688,0,-0.0249732,-0.99729,0,-0.0735646,-0.992479,0,-0.122412,-0.985278,0,-0.170962,-0.975702,0,-0.219101,-0.963776,0,-0.266713,-0.949529,0,-0.313681,-0.932991,0,-0.359899,-0.914211,0,-0.405238,-0.893225,0,-0.44961,-0.870087,0,-0.492899,-0.844854,0,-0.534997,-0.817583,0,-0.57581,-0.788347,0,-0.615231,-0.757209,0,-0.653172,0.757209,0,0.653173,0.757209,0,0.653173,0.788347,0,0.61523,0.817583,0,0.575811,0.844854,0,0.534998,-0.985278,0,-0.170962,0,-1,4.5242e-8,1.51335e-10,-1,4.50692e-8,-2.60547e-8,-1,2.1654e-8,1.19482e-7,-1,1.24635e-7,-1.6624e-7,-1,-4.66206e-8,-1.58554e-8,-1,3.82312e-8,-1.20147e-8,-1,3.96058e-8,-8.07513e-9,-1,4.05927e-8,-1.72245e-7,-1,2.87824e-8,8.0336e-14,-1,4.21192e-8,-2.12555e-9,-1,4.32678e-8,3.53342e-8,-1,4.92273e-8,-1.39648e-8,-1,3.90143e-8,-1.9173e-8,-1,3.19883e-8,3.22319e-9,-1,4.5676e-8,3.22511e-9,-1,4.56806e-8,2.19702e-9,-1,4.4797e-8,-2.1452e-9,-1,4.36678e-8,1.56969e-8,-1,4.38085e-8,4.09671e-9,-1,4.45054e-8,7.16907e-9,-1,4.48166e-8,8.4923e-9,-1,4.39047e-8,5.5523e-9,-1,4.4134e-8,-2.65995e-8,-1,3.38175e-8,6.0416e-8,-1,6.85061e-8,4.20526e-9,-1,4.45385e-8,4.02749e-9,-1,4.52482e-8,-1.69152e-8,-1,3.57576e-8,2.34057e-8,-1,5.69025e-8,5.34996e-9,-1,4.65634e-8,9.65312e-9,-1,4.93136e-8,0.999688,0,0.0249872,0,-1,0,-1.64208e-8,-1,3.46999e-8,5.02196e-7,-1,4.78135e-7,-2.02751e-8,-1,2.73408e-8,-1.74998e-8,-1,2.91953e-8,-6.48568e-7,-1,-2.50267e-7,-1.1467e-8,-1,3.20486e-8,6.60105e-7,-1,2.17982e-7,-4.99466e-9,-1,3.36698e-8,7.21631e-7,-1,8.73506e-8,0,-1,5.29819e-8,0,-1,5.2982e-8,-1.19741e-8,-1,5.09862e-8,8.24553e-8,-1,3.92394e-8,0,-1,5.09062e-8,-1.78404e-7,-1,7.94695e-9,-1.76538e-7,-1,-2.70148e-8,-1.89329e-8,-1,2.83363e-8,-2.56556e-9,-1,2.7737e-8,-4.12396e-9,-1,4.45853e-8,2.01695e-8,-1,5.44637e-8,7.05178e-9,-1,4.48364e-8,1.818e-7,-1,8.65163e-8,-4.75516e-7,-1,-2.19191e-8,-3.34219e-9,-1,4.36327e-8,-1.94472e-9,-1,4.32179e-8,-1.18681e-8,-1,4.61743e-8,1.6747e-8,-1,3.99045e-8,-8.12785e-10,-1,4.32484e-8,-4.68804e-9,-1,4.01795e-8,1.47419e-8,-1,4.06723e-8,1.36096e-8,-1,4.15904e-8,-8.32759e-9,-1,3.71794e-8,-9.76373e-9,-1,3.5897e-8,1.32519e-8,-1,4.27696e-8,-1.03494e-8,-1,3.52882e-8,2.74994e-8,-1,8.87523e-8,-0.986394,0,0.164399,0,1,0,2.15949e-8,1,-2.63109e-8,-5.4807e-7,1,-4.27615e-7,1.60458e-8,1,-3.00189e-8,1.30392e-8,1,-3.14422e-8,-6.48606e-7,1,-2.50107e-7,6.63987e-9,1,-3.33843e-8,-6.84918e-7,1,-1.18763e-7,0,1,-3.46567e-8,6.94673e-7,1,-1.68761e-7,-1.65299e-7,1,-6.7585e-8,-1.48931e-7,1,-9.85323e-8,1.70651e-7,1,5.26188e-8,-8.35933e-9,1,-5.08936e-8,-2.53554e-8,1,-8.23628e-8,1.83005e-8,1,-3.86962e-8,1.10065e-7,1,-2.67387e-8,0,1,-5.2982e-8,0,1,-3.96564e-8,-1.91568e-8,1,-6.85728e-8,-1.77194e-8,1,-6.34276e-8,-7.44365e-7,1,7.1079e-8,-2.39362e-8,1,-3.77748e-8,-1.97909e-8,1,-1.54449e-8,1.19728e-9,1,-4.37443e-8,-2.18839e-8,1,-3.81673e-8,7.44235e-8,1,-6.42813e-8,4.88756e-9,1,-4.504e-8,7.58702e-8,1,4.89606e-9,8.94355e-9,1,-3.54468e-8,8.86034e-9,1,-3.53723e-8,5.01901e-8,1,-1.34645e-8,-1.27313e-7,1,-1.45707e-7,8.86032e-9,1,-3.53722e-8,8.82197e-9,1,-3.54774e-8,7.98802e-9,1,-3.63349e-8,8.60626e-9,1,-3.57524e-8,1.97255e-8,1,-2.65934e-8,1.63764e-7,1,5.47286e-8,1.76786e-8,1,-3.7423e-8,1.3944e-8,1,-3.89684e-8,1.00562e-8,1,-4.01478e-8,6.07191e-9,1,-4.09403e-8,1.57151e-7,1,-3.81934e-8,-8.26281e-14,1,-4.33209e-8,1.25826e-9,1,-4.25578e-8,-4.19157e-8,1,-4.80586e-8,1.20292e-8,1,-3.96536e-8,-1.86402e-8,1,-5.46004e-8,2.54465e-9,1,-3.93355e-8,-2.02014e-8,1,-6.44756e-8,5.77249e-9,1,-4.15515e-8,-3.88546e-9,1,-4.42965e-8,-7.71111e-9,1,-4.38084e-8,-1.24057e-8,1,-5.56399e-8,-6.94838e-9,1,-4.85863e-8,-6.3855e-9,1,-4.42786e-8,-6.24278e-9,1,-4.49961e-8,-5.46267e-9,1,-4.54674e-8,-6.27558e-9,1,-4.42508e-8,-7.62807e-9,1,-4.62446e-8,-1.20609e-8,1,-4.87804e-8,9.64049e-9,1,-4.34247e-8,-3.44138e-8,1,-5.54179e-8,-1.41618e-8,1,-4.98086e-8,2.89353e-8,1,-3.37015e-8,6.71477e-8,1,-1.9688e-8,0.724244,0,0.689544,0.757209,0,0.653172,0.788346,0,0.615232,0.817585,0,0.575808,0.844854,0,0.534997,0.870086,0,0.4929,0.893226,0,0.449607,0.914211,0,0.405239,0.932992,0,0.359898,0.949528,0,0.313681,0.963776,0,0.266712,0.975702,0,0.219101,0.985278,0,0.170961,0.992479,0,0.122411,0.99729,0,0.0735637,-0.689542,0,-0.724245,-0.724245,0,-0.689543,-0.757208,0,-0.653174,-0.788347,0,-0.615231,-0.817585,0,-0.575808,-0.844854,0,-0.534998,-0.870087,0,-0.492898,-0.893225,0,-0.44961,-0.914211,0,-0.405238,-0.932992,0,-0.359898,-0.949529,0,-0.31368,-0.963777,0,-0.26671,-0.975702,0,-0.219103,-0.985278,0,-0.170961,-0.992479,0,-0.122411,-0.99729,0,-0.0735636,-0.999687,0,-0.0250195,0,0.0000038147,-1,0.00000508626,0,-1,0,-0.0000038147,-1,-0.00000190735,0.0000209808,-1,-0.00000190735,-0.0000209808,-1,0,0,-1,0.986394,0,0.164396,0.986394,-0.00000815271,0.164396,0.986393,0.00000815273,0.164403,0.844854,0,0.534997,0.870086,0,0.4929,-0.997291,0,-0.0735636,-0.932992,0,-0.359898,-0.914211,0,-0.405238,-0.893225,0,-0.44961,-0.788347,0,-0.615231,-0.757208,0,-0.653174,-0.724245,0,-0.689543,-5.46019e-14,-1,4.36341e-8,1.29869e-9,-1,4.22414e-8,8.68812e-8,-1,1.33052e-7,1.23282e-7,-1,1.42451e-7,-2.02613e-8,-1,3.03179e-8,-1.71893e-8,-1,3.21593e-8,-1.87285e-7,-1,-3.31722e-8,-1.32326e-8,-1,4.36183e-8,1.74095e-7,-1,7.64566e-8,-1.88801e-7,-1,2.26265e-8,8.8634e-14,-1,4.64697e-8,1.3019e-8,-1,3.86756e-8,-6.0265e-9,-1,4.06281e-8,2.91214e-8,-1,5.64661e-8,-1.87695e-8,-1,3.13147e-8,-2.81262e-8,-1,1.81935e-8,-1.38678e-8,-1,3.86882e-8,2.48836e-8,-1,5.86892e-8,-3.51181e-9,-1,4.04598e-8,-2.15992e-8,-1,3.83181e-8,1.25594e-8,-1,4.80317e-8,1.39675e-8,-1,4.90565e-8,2.26425e-9,-1,4.47336e-8,1.18109e-7,-1,1.39844e-7,-2.02588e-8,-1,3.46285e-8,5.84369e-8,-1,6.12701e-8,3.3818e-8,-1,6.97848e-8,1.77782e-8,-1,5.57415e-8,9.7767e-9,-1,4.61773e-8,6.2884e-8,-1,5.6397e-8,1.22259e-8,-1,5.01195e-8,1.05549e-8,-1,4.73876e-8,-2.1366e-8,-1,4.24167e-8,1.11802e-8,-1,4.60656e-8,1.39836e-8,-1,4.56754e-8,0.999687,0,0.0250341,-2.28236e-7,-1,-1.84903e-7,5.00242e-7,-1,5.79924e-7,-2.52427e-8,-1,2.78583e-8,-2.23924e-8,-1,3.01968e-8,-1.93271e-8,-1,3.22449e-8,-1.60556e-8,-1,3.3993e-8,-1.26617e-8,-1,3.53972e-8,-9.13511e-9,-1,3.64667e-8,-5.51455e-9,-1,3.71868e-8,-7.59826e-7,-1,1.9322e-8,0,-1,3.85779e-8,5.12542e-7,-1,1.13614e-7,1.92626e-7,-1,6.65781e-8,-1.09267e-8,-1,3.6018e-8,-1.77389e-8,-1,3.31968e-8,-2.38789e-8,-1,2.90944e-8,-1.60354e-8,-1,1.60356e-8,-2.67375e-8,-1,2.67379e-8,-9.13277e-7,-1,-4.28856e-8,-8.69759e-9,-1,3.70152e-8,-2.77994e-8,-1,2.59425e-8,-2.38722e-8,-1,2.90999e-8,-7.37681e-9,-1,3.70864e-8,-7.37682e-9,-1,3.70864e-8,-2.00238e-8,-1,3.23236e-8,-2.10073e-8,-1,3.14406e-8,-6.13042e-9,-1,3.75257e-8,-1.09189e-8,-1,3.60203e-8,-2.10073e-8,-1,3.14405e-8,-2.22005e-8,-1,3.08692e-8,-1.57558e-8,-1,3.46061e-8,-1.44703e-8,-1,3.49346e-8,-1.77635e-8,-1,3.31836e-8,-1.44706e-8,-1,3.49355e-8,-1.33447e-8,-1,3.56031e-8,-0.999686,0,-0.0250375,2.65821e-8,1,-2.6583e-8,2.38539e-8,1,-2.90563e-8,2.08863e-8,1,-3.12576e-8,1.7722e-8,1,-3.31542e-8,1.44036e-8,1,-3.47252e-8,1.09155e-8,1,-3.5974e-8,-7.39908e-7,1,-2.04671e-7,3.68688e-9,1,-3.74123e-8,0,1,-3.83495e-8,1.89266e-9,1,-3.85305e-8,1.96372e-7,1,-1.84344e-8,1.26835e-8,1,-3.54377e-8,1.93506e-8,1,-3.22837e-8,2.52758e-8,1,-2.78893e-8,-1.72592e-7,1,-2.72601e-7,-2.19264e-7,1,-2.303e-7,1.85517e-9,1,-3.77673e-8,5.55144e-10,1,-3.80195e-8,2.90357e-8,1,-2.45498e-8,2.52803e-8,1,-2.78853e-8,-9.17004e-7,1,-1.83588e-7,5.56744e-7,1,1.98702e-8,2.15818e-8,1,-3.13058e-8,2.25248e-8,1,-3.03718e-8,9.18791e-9,1,-3.66797e-8,9.18789e-9,1,-3.66796e-8,2.25248e-8,1,-3.03719e-8,2.36871e-8,1,-2.97435e-8,7.9589e-9,1,-3.71819e-8,1.26645e-8,1,-3.54445e-8,1.93487e-8,1,-3.22849e-8,1.50637e-8,1,-3.49122e-8,1.74183e-8,1,-3.37974e-8,1.61671e-8,1,-3.41824e-8,1.61675e-8,1,-3.41833e-8,0.999687,0,0.0250341,5.23048e-14,1,-4.17984e-8,-1.16144e-7,1,-1.48329e-7,2.17206e-8,1,-2.92901e-8,1.87458e-8,1,-3.12776e-8,-1.50324e-7,1,-1.16478e-7,-1.60985e-7,1,-1.01172e-7,-1.70161e-7,1,-8.49135e-8,1.89687e-7,1,-1.33345e-8,-1.59722e-8,1,-4.68695e-8,-9.14324e-14,1,-4.79369e-8,1.72407e-8,1,-3.64125e-8,-4.6643e-8,1,-4.83908e-8,1.19229e-8,1,-3.9304e-8,-2.26806e-8,1,-5.61076e-8,-1.41895e-8,1,-5.59229e-8,-1.3946e-9,1,-4.52509e-8,-6.19162e-10,1,-4.15276e-8,1.02463e-9,1,-4.34369e-8,-4.17774e-9,1,-4.41881e-8,-1.86331e-8,1,-4.9632e-8,5.43858e-8,1,-2.8707e-8,-1.65367e-9,1,-4.04931e-8,1.44942e-8,1,-3.713e-8,-1.00761e-8,1,-4.53643e-8,5.10221e-8,1,-3.66902e-8,1.20522e-8,1,-3.82664e-8,-7.12106e-8,1,-8.46279e-8,3.81765e-8,1,-3.81786e-8,-8.18243e-10,1,-3.98503e-8,2.03829e-8,1,-3.05021e-8,1.12888e-8,1,-3.73351e-8,4.7953e-10,1,-4.00964e-8,4.35651e-9,1,-4.94562e-8,1.36647e-8,1,-3.54526e-8,1.42828e-8,1,-3.48853e-8,0.65317,0,0.757211,0.689541,0,0.724247,0.724243,0,0.689545,0.75721,0,0.653172,0.788348,0,0.61523,0.817584,0,0.57581,0.844854,0,0.534997,0.870087,0,0.492899,0.893225,0,0.449611,0.914211,0,0.405238,0.932992,0,0.359897,0.949528,0,0.313681,0.963776,0,0.266712,0.975702,0,0.219102,0.985278,0,0.170958,0.992479,0,0.122413,0.997291,0,0.0735623,-0.65317,0,-0.757211,-0.65317,0,-0.757211,-0.65317,0,-0.757211,-0.68954,0,-0.724247,-0.724243,0,-0.689545,-0.757209,0,-0.653173,-0.817585,0,-0.575808,-0.844854,0,-0.534996,-0.870087,0,-0.492899,-0.893224,0,-0.449611,-0.914211,0,-0.405239,-0.932993,0,-0.359896,-0.949528,0,-0.313683,-0.963776,0,-0.266711,-0.975702,0,-0.2191,-0.985278,0,-0.17096,-0.992479,0,-0.122413,-0.997291,0,-0.0735622,0.817584,0,0.57581,0.844854,0,0.534997,0.992479,0,0.122413,0.997291,0,0.0735623,0,0,1,0,0,1,0,0,1,5.63744e-7,0,1,-0.00000125136,0.0000654141,1,5.63744e-7,0,1,5.63744e-7,-0.00000733648,1,0,0,1,0,0,1,0,0,1,-0.00000125136,0.00000287288,1,5.63744e-7,-0.0000234272,1,0,1,0,0,1,0,3.14691e-7,1,4.35396e-7,0,1,-9.07104e-8,-6.24377e-7,1,-0.00000104787,3.27495e-7,1,4.56423e-7,-1.39481e-7,1,-2.56203e-7,-0.615229,0,-0.788348,-0.575806,0,-0.817586,-0.534998,0,-0.844853,-0.492901,0,-0.870086,-0.00000112376,0.00000762939,1,2.11337e-7,6.42951e-7,1,0,0.0000305176,1,7.12763e-7,-0.0000193563,1,0.492901,0,0.870085,0.492901,0,0.870085,0.534997,0,0.844854,0.575807,0,0.817586,0.615231,0,0.788347,0.615231,0,0.788347,0,1,-4.53552e-8,2.0641e-8,1,-1.38071e-8,0,1,0,2.66915e-9,1,-4.62031e-8,1.83679e-10,1,-4.44237e-8,-2.25318e-9,1,-5.02248e-8,2.9965e-9,1,-4.29709e-8,1.35275e-8,1,-1.0639e-8,-0.00000112376,-0.00000762939,1,2.11337e-7,0.00000573923,1,7.12763e-7,-0.0000530506,1,0.449614,0,0.893223,0,1,-9.14971e-8,3.70995e-7,1,5.85862e-7,5.46674e-9,1,-2.39838e-8,-2.15938e-7,1,-0.0000010217,-8.64662e-9,1,-1.09464e-7,1.71173e-8,1,5.18151e-8,1.41323e-8,1,3.66364e-8,-0.266712,0,-0.963776,1.71676e-8,1,-6.13994e-9,1.64818e-8,1,-7.79591e-9,1.10045e-10,1,-6.2118e-8,1.68648e-8,1,-6.98605e-9,-1.0481e-9,1,-6.09972e-8,3.28118e-9,1,-3.97799e-8,-1.43011e-8,1,-6.31801e-8,-1.64555e-9,1,-5.02105e-8,3.96064e-9,1,-4.79165e-8,-2.93287e-9,1,-4.58254e-8,0.122411,0,0.99248,1.567e-7,1,9.03085e-7,2.75631e-7,1,7.14542e-7,0,1,0,-4.65954e-8,1,-1.8602e-7,8.37523e-9,1,-4.00314e-7,-1.35958e-7,1,-5.32064e-7,-2.93852e-8,1,-3.32678e-7,2.80171e-7,1,8.91185e-7,-0.999653,0,0.026358,0,-1,0,1.65851e-7,-1,2.92686e-7,0,-1,6.00534e-8,-1.91808e-8,-1,1.14965e-8,-1.41999e-8,-1,8.51105e-9,-2.6595e-8,-1,1.97247e-8,-7.84035e-8,-1,-7.28681e-8,0.575809,0,0.817585,0.534999,0,0.844853,0.492897,0,0.870088,4.68792e-8,-1,3.80086e-7,8.39065e-8,-1,3.73655e-7,1.20116e-7,-1,3.636e-7,0,-1,6.23663e-8,-3.66381e-8,-1,1.51761e-8,-9.00452e-9,-1,2.73152e-9,-8.15554e-9,-1,1.4608e-8,-3.3279e-8,-1,-2.69822e-7,0,-1,0,6.79792e-8,-1,2.66032e-7,-1.85431e-8,-1,3.68839e-9,-9.0046e-9,-1,2.73129e-9,-9.12718e-8,-1,-2.58949e-7,-1.79331e-9,-1,4.46217e-8,2.28586e-8,-1,1.12775e-7,2.07923e-8,-1,9.18857e-8,-2.28512e-7,-1,-4.03299e-7,0,-1,4.67747e-8,-1.72784e-9,-1,3.46799e-8,2.03166e-8,-1,9.07373e-8,-5.42138e-10,-1,3.74791e-8,-2.60546e-10,-1,4.17222e-8,9.77996e-10,-1,4.71291e-8,-3.22698e-10,-1,5.16749e-8,7.533e-10,-1,4.72095e-8,-2.1719e-9,-1,5.15326e-8,-5.07258e-8,-1,-5.50255e-8,4.28084e-7,-1,7.07818e-7,3.57585e-11,-1,4.06104e-8,2.78599e-8,-1,9.11801e-8,-1.38278e-9,-1,4.70603e-8,7.93491e-10,-1,4.67686e-8,2.27472e-10,-1,4.37393e-8,0,-1,3.43114e-8,-2.83821e-9,-1,3.81379e-8,6.657e-8,-1,1.51528e-7,2.69034e-7,-1,4.25117e-7,-5.53311e-14,-1,4.99929e-8,-7.24731e-9,-1,3.62581e-8,1.9477e-8,-1,7.36071e-8,-1.1764e-9,-1,4.15213e-8,-0.492974,0,-0.870044,-0.449614,0,-0.893223,-0.405238,0,-0.914211,-0.359896,0,-0.932992,-0.313681,0,-0.949529,0.40524,0,0.91421,0.359897,0,0.932992,0.31368,0,0.949529,0.266712,0,0.963776,0.2191,0,0.975702,0.170961,0,0.985278,-0.405241,0,-0.91421,-0.405241,0,-0.91421,-0.359897,0,-0.932992,-0.31368,0,-0.949529,-0.266712,0,-0.963776,-0.219099,0,-0.975703,-0.170963,0,-0.985278,-0.122409,0,-0.99248,-0.073565,0,-0.99729,-0.0250357,0,-0.999687,0.266712,0,0.963776,0.2191,0,0.975702,0.170961,0,0.985278,-0.405238,0,-0.914211,-0.359896,0,-0.932992,-0.31368,0,-0.949529,0.534999,0,0.844853,2.05153e-7,-5.00029e-7,-1,0.00000110678,0.0000643632,-1,2.05153e-7,-7.5915e-7,-1,0,-0.0000152588,-1,0.00000110678,0.0000026976,-1],\"metadata\":{\"generator\":\"io_three\",\"normals\":623,\"uvs\":0,\"vertices\":496,\"version\":3,\"faces\":768,\"type\":\"Geometry\"},\"vertices\":[260.167,4,-76.9381,260.167,-4,-76.9381,266.677,-4,-89.8714,266.677,4,-89.8714,272.544,4,-103.108,277.755,3.99999,-116.617,282.297,3.99999,-130.366,286.159,3.99999,-144.321,289.332,3.99999,-158.448,291.807,3.99999,-172.715,293.579,3.99999,-187.085,294.645,3.99999,-201.525,295,3.99999,-215.75,293.5,3.99999,-215.75,293.146,3.99999,-201.599,292.087,3.99999,-187.232,290.323,3.99999,-172.935,287.86,3.99999,-158.741,284.704,3.99999,-144.685,280.862,3.99999,-130.801,276.343,3.99999,-117.123,271.159,4,-103.682,265.321,4,-90.5128,258.844,4,-77.6452,251.743,4,-65.1109,244.036,4,-52.9402,235.741,4,-41.1623,226.879,4,-29.8056,217.558,4,-19,219.538,4,-19,228.038,4,-28.854,236.946,4,-40.2688,245.284,4,-52.1069,253.03,4,-64.3398,253.03,-4,-64.3398,276.343,-4.00001,-117.123,280.862,-4.00001,-130.801,284.704,-4.00001,-144.685,287.86,-4.00001,-158.741,290.323,-4.00001,-172.935,292.087,-4.00001,-187.232,293.146,-4.00001,-201.599,293.5,-4.00001,-215.75,295,-4.00001,-215.75,294.645,-4.00001,-201.525,293.579,-4.00001,-187.085,291.807,-4.00001,-172.715,289.332,-4.00001,-158.448,286.159,-4.00001,-144.321,282.297,-4.00001,-130.366,277.755,-4.00001,-116.617,272.544,-4,-103.108,245.284,-4,-52.1069,236.946,-4,-40.2688,228.038,-4,-28.854,219.538,-4,-19,217.558,-4,-19,226.879,-4,-29.8056,235.741,-4,-41.1623,244.036,-4,-52.9402,251.743,-4,-65.1109,258.844,-4,-77.6452,265.321,-4,-90.5128,271.159,-4,-103.682,293.5,-1.00001,-215.75,285.5,-1.00001,-215.75,285.5,-4.00001,-215.75,282.5,-4.00001,-215.75,282.5,-0.00000943074,-215.75,282.5,3.99999,-215.75,285.5,3.99999,-215.75,285.5,0.999991,-215.75,293.5,0.999991,-215.75,293.146,0.999991,-201.599,292.087,0.999992,-187.232,290.323,0.999992,-172.935,287.86,0.999993,-158.741,284.704,0.999994,-144.685,280.862,0.999994,-130.801,276.343,0.999995,-117.123,271.159,0.999995,-103.682,265.321,0.999996,-90.5128,258.844,0.999997,-77.6452,251.743,0.999997,-65.1109,244.036,0.999998,-52.9402,235.741,0.999998,-41.1623,226.879,0.999999,-29.8056,217.558,0.999999,-19,219.538,-8.30519e-7,-19,276.343,-1.00001,-117.123,271.159,-1,-103.682,280.862,-1.00001,-130.801,284.704,-1.00001,-144.685,287.86,-1.00001,-158.741,290.323,-1.00001,-172.935,292.087,-1.00001,-187.232,293.146,-1.00001,-201.599,217.558,-1,-19,226.879,-1,-29.8056,235.741,-1,-41.1623,244.036,-1,-52.9402,251.743,-1,-65.1109,258.844,-1,-77.6452,265.321,-1,-90.5128,206.524,-1,-19,211.542,-1,-24.2699,220.694,-1,-34.8807,229.316,-1,-45.9279,237.385,-1,-57.3848,244.882,-1,-69.2238,251.789,-1,-81.4164,258.089,-1,-93.9332,263.768,-1,-106.744,268.811,-1.00001,-119.818,273.206,-1.00001,-133.124,276.944,-1.00001,-146.629,280.014,-1.00001,-160.302,282.41,-1.00001,-174.109,284.125,-1.00001,-188.016,285.156,-1.00001,-201.991,285.156,-4.00001,-201.991,179.457,-4,-19,188.444,-4,-27.556,197.463,-4,-37.0295,206.007,-4,-46.9342,214.055,-4,-57.2462,221.587,-4,-67.9406,228.585,-4,-78.9917,235.032,-4,-90.3729,240.913,-4,-102.057,246.214,-4,-114.015,250.922,-4.00001,-126.219,255.025,-4.00001,-138.639,258.513,-4.00001,-151.246,261.379,-4.00001,-164.008,263.616,-4.00001,-176.896,265.217,-4.00001,-189.879,266.179,-4.00001,-202.924,266.5,-4.00001,-215.75,269.5,-4.00001,-215.75,268,-4.00001,-206.75,284,-4.00001,-206.75,284.125,-4.00001,-188.016,282.41,-4.00001,-174.109,280.014,-4.00001,-160.302,276.944,-4.00001,-146.629,273.206,-4.00001,-133.124,268.811,-4.00001,-119.818,263.768,-4,-106.744,258.089,-4,-93.9332,251.789,-4,-81.4164,244.882,-4,-69.2238,237.385,-4,-57.3848,229.316,-4,-45.9279,220.694,-4,-34.8807,211.542,-4,-24.2699,206.524,-4,-19,284,3.99999,-206.75,206.524,4,-19,211.542,4,-24.2699,220.694,4,-34.8807,229.316,4,-45.9279,237.385,4,-57.3848,244.882,4,-69.2238,251.789,4,-81.4164,258.089,4,-93.9332,263.768,4,-106.744,268.811,3.99999,-119.818,273.206,3.99999,-133.124,276.944,3.99999,-146.629,280.014,3.99999,-160.302,282.41,3.99999,-174.109,284.125,3.99999,-188.016,285.156,3.99999,-201.991,268,3.99999,-206.75,269.5,3.99999,-215.75,266.5,3.99999,-215.75,266.179,3.99999,-202.924,265.217,3.99999,-189.879,263.616,3.99999,-176.896,261.379,3.99999,-164.008,258.513,3.99999,-151.246,255.025,3.99999,-138.639,250.922,3.99999,-126.219,246.214,3.99999,-114.015,240.913,4,-102.057,235.032,4,-90.3729,228.585,4,-78.9917,221.587,4,-67.9406,214.055,4,-57.2462,206.007,4,-46.9342,197.463,4,-37.0295,188.444,4,-27.556,179.457,4,-19,285.156,0.999991,-201.991,284.125,0.999992,-188.016,282.41,0.999992,-174.109,280.014,0.999993,-160.302,276.944,0.999994,-146.629,273.206,0.999994,-133.124,268.811,0.999995,-119.818,263.768,0.999995,-106.744,258.089,0.999996,-93.9332,251.789,0.999996,-81.4164,244.882,0.999997,-69.2238,237.385,0.999997,-57.3848,229.316,0.999998,-45.9279,220.694,0.999998,-34.8807,211.542,0.999999,-24.2699,206.524,0.999999,-19,179.457,-1,-19,188.444,-1,-27.556,197.463,-1,-37.0295,206.007,-1,-46.9342,214.055,-1,-57.2462,221.587,-1,-67.9406,228.585,-1,-78.9917,235.032,-1,-90.3729,240.913,-1,-102.057,246.214,-1.00001,-114.015,250.922,-1.00001,-126.219,255.025,-1.00001,-138.639,258.513,-1.00001,-151.246,261.379,-1.00001,-164.008,263.616,-1.00001,-176.896,265.217,-1.00001,-189.879,266.179,-1.00001,-202.924,266.5,-1.00001,-215.75,258.5,-1.00001,-215.75,258.5,-4.00001,-215.75,257,-4.00001,-215.75,257,3.99999,-215.75,258.5,3.99999,-215.75,258.5,0.999991,-215.75,266.5,0.999991,-215.75,269.5,-0.00000943074,-215.75,266.179,0.999991,-202.924,265.217,0.999992,-189.879,263.616,0.999992,-176.896,261.379,0.999993,-164.008,258.513,0.999993,-151.246,255.025,0.999994,-138.639,250.922,0.999995,-126.219,246.214,0.999995,-114.015,240.913,0.999996,-102.057,235.032,0.999996,-90.3729,228.585,0.999997,-78.9917,221.587,0.999997,-67.9406,214.055,0.999997,-57.2462,206.007,0.999998,-46.9342,197.463,0.999998,-37.0295,188.444,0.999999,-27.556,179.457,0.999999,-19,167.264,-1,-19,173.598,-1,-24.4641,182.787,-1,-33.2129,191.536,-1,-42.402,199.823,-1,-52.0093,207.629,-1,-62.0118,214.935,-1,-72.3851,221.723,-1,-83.1045,227.977,-1,-94.1441,233.681,-1,-105.477,238.823,-1.00001,-117.076,243.389,-1.00001,-128.914,247.369,-1.00001,-140.961,250.753,-1.00001,-153.19,253.533,-1.00001,-165.569,255.702,-1.00001,-178.07,257.255,-1.00001,-190.663,258.189,-1.00001,-203.316,258.189,-4.00001,-203.316,164.968,-4,-19,172.591,-4,-25.5755,181.726,-4,-34.2735,190.424,-4,-43.4093,198.664,-4,-52.9609,206.424,-4,-62.9053,213.688,-4,-73.2185,220.436,-4,-83.8757,226.654,-4,-94.8512,232.325,-4,-106.119,237.437,-4.00001,-117.65,241.977,-4.00001,-129.419,245.934,-4.00001,-141.397,249.298,-4.00001,-153.554,252.062,-4.00001,-165.862,254.218,-4.00001,-178.29,255.762,-4.00001,-190.81,256.69,-4.00001,-203.39,257.255,-4.00001,-190.663,255.702,-4.00001,-178.07,253.533,-4.00001,-165.569,250.753,-4.00001,-153.19,247.369,-4.00001,-140.961,243.389,-4.00001,-128.914,238.823,-4.00001,-117.076,233.681,-4,-105.477,227.977,-4,-94.1441,221.723,-4,-83.1045,214.935,-4,-72.3851,207.629,-4,-62.0118,199.823,-4,-52.0093,191.536,-4,-42.402,182.787,-4,-33.2129,173.598,-4,-24.4641,167.264,-4,-19,256.69,3.99999,-203.39,167.264,4,-19,173.598,4,-24.4641,182.787,4,-33.2129,191.536,4,-42.402,199.823,4,-52.0093,207.629,4,-62.0118,214.935,4,-72.3851,221.723,4,-83.1045,227.977,4,-94.1441,233.681,4,-105.477,238.823,3.99999,-117.076,243.389,3.99999,-128.914,247.369,3.99999,-140.961,250.753,3.99999,-153.19,253.533,3.99999,-165.569,255.702,3.99999,-178.07,257.255,3.99999,-190.663,258.189,3.99999,-203.316,255.762,3.99999,-190.81,254.218,3.99999,-178.29,252.062,3.99999,-165.862,249.298,3.99999,-153.554,245.934,3.99999,-141.397,241.977,3.99999,-129.419,237.437,3.99999,-117.65,232.325,4,-106.119,226.654,4,-94.8512,220.436,4,-83.8757,213.688,4,-73.2185,206.424,4,-62.9053,198.664,4,-52.9609,190.424,4,-43.4093,181.726,4,-34.2735,172.591,4,-25.5755,164.968,4,-19,258.189,0.999991,-203.316,257.255,0.999992,-190.663,255.702,0.999992,-178.07,253.533,0.999993,-165.569,250.753,0.999993,-153.19,247.369,0.999994,-140.961,243.389,0.999994,-128.914,238.823,0.999995,-117.076,233.681,0.999995,-105.477,227.977,0.999996,-94.1441,221.723,0.999996,-83.1045,214.935,0.999997,-72.3851,207.629,0.999997,-62.0118,199.823,0.999998,-52.0093,191.536,0.999998,-42.402,182.787,0.999999,-33.2129,173.598,0.999999,-24.4641,167.264,0.999999,-19,164.968,-8.30518e-7,-19,175.788,4,19,174.838,4,19.7415,163.06,4,28.0362,150.889,4,35.7433,141.61,4,41,144.652,4,41,151.66,4,37.0299,163.893,4,29.2834,175.731,4,20.9463,178.225,4,19,175.788,1,19,174.838,1,19.7415,163.06,1,28.0362,150.889,1,35.7433,141.61,1,41,144.652,0.00000179217,41,124.23,1,41,124.23,4,41,70.2226,4,41,70.2226,1,41,27.4067,1,41,27.4067,4,41,0.250019,0.00000179217,41,144.652,-4,41,151.66,-4,37.0299,163.893,-4,29.2834,175.731,-4,20.9463,178.225,-4,19,178.225,8.30514e-7,19,162.001,1,19,158.615,1,21.3845,146.776,1,28.8815,134.584,1,35.7885,27.4067,-4,41,27.4067,-0.999998,41,70.2226,-0.999998,41,70.2226,-4,41,124.23,-4,41,124.23,-0.999998,41,141.61,-0.999998,41,141.61,-4,41,134.584,4,35.7885,146.776,4,28.8815,158.615,4,21.3845,162.001,4,19,125.684,4,19,125.627,4,19.032,113.943,4,24.9131,101.985,4,30.2139,89.781,4,34.9215,77.3607,4,39.0246,77.3607,1,39.0246,89.781,1,34.9215,101.985,1,30.2139,113.943,1,24.9131,125.627,1,19.032,125.684,1,19,107.548,1,19,98.9236,1,22.8228,87.0859,1,27.3892,75.0385,1,31.3691,62.8102,1,34.7531,50.4306,1,37.533,37.9295,1,39.7021,37.9295,4,39.7021,50.4306,4,37.533,62.8102,4,34.7531,75.0385,4,31.3691,87.0859,4,27.3892,98.9236,4,22.8228,107.548,4,19,103.848,4,19,98.3496,4,21.437,86.5806,4,25.9769,74.6031,4,29.9337,62.4457,4,33.298,50.138,4,36.0618,37.7094,4,38.2184,25.1901,4,39.7625,12.6101,4,40.6904,0.250019,4,41,150.889,-4,35.7433,163.06,-4,28.0362,174.838,-4,19.7415,175.788,-4,19,0.250019,-4,41,12.6101,-4,40.6904,25.1901,-4,39.7625,37.7094,-4,38.2184,50.138,-4,36.0618,62.4457,-4,33.298,74.6031,-4,29.9337,86.5806,-4,25.9769,98.3496,-4,21.437,103.848,-4,19,107.548,-4,19,98.9236,-4,22.8228,87.0859,-4,27.3892,75.0385,-4,31.3691,62.8102,-4,34.7531,50.4306,-4,37.533,37.9295,-4,39.7021,37.9295,-0.999998,39.7021,50.4306,-0.999998,37.533,62.8102,-0.999998,34.7531,75.0385,-0.999999,31.3691,87.0859,-0.999999,27.3892,98.9236,-0.999999,22.8228,107.548,-0.999999,19,125.684,-0.999999,19,125.627,-0.999999,19.032,113.943,-0.999999,24.9131,101.985,-0.999999,30.2139,89.781,-0.999998,34.9215,77.3607,-0.999998,39.0246,77.3607,-4,39.0246,89.781,-4,34.9215,101.985,-4,30.2139,113.943,-4,24.9131,125.627,-4,19.032,125.684,-4,19,162.001,-4,19,158.615,-4,21.3845,146.776,-4,28.8815,134.584,-4,35.7885,134.584,-0.999998,35.7885,146.776,-0.999999,28.8815,158.615,-0.999999,21.3845,162.001,-0.999999,19,175.788,-0.999999,19,174.838,-0.999999,19.7415,163.06,-0.999999,28.0362,150.889,-0.999998,35.7433,103.848,8.30514e-7,19],\"faces\":[33,0,1,2,3,0,0,0,0,32,3,4,5,1,1,1,32,5,6,7,2,2,2,32,7,8,9,3,3,3,32,9,10,11,4,4,4,32,11,12,13,5,5,5,32,11,13,14,6,6,6,32,7,9,11,7,7,7,32,3,5,7,8,8,8,32,33,0,3,9,9,9,32,31,32,33,10,10,10,32,29,30,31,11,11,11,32,27,28,29,12,12,12,32,26,27,29,13,13,13,32,29,31,33,14,14,14,32,11,14,15,15,15,15,32,11,15,16,16,16,16,32,26,29,33,17,17,17,32,25,26,33,18,18,18,32,7,11,16,19,19,19,32,7,16,17,20,20,20,32,24,25,33,21,21,21,32,23,24,33,22,22,22,32,7,17,18,23,23,23,32,7,18,19,24,24,24,32,23,33,3,25,25,25,32,22,23,3,26,26,26,32,7,19,20,27,27,27,32,21,22,3,28,28,28,32,3,7,20,29,29,29,32,20,21,3,30,30,30,33,1,0,33,34,31,31,31,31,32,41,42,43,32,32,32,32,43,44,45,33,33,33,32,45,46,47,34,34,34,32,47,48,49,35,35,35,32,49,50,51,36,36,36,32,51,2,1,37,37,37,32,1,34,52,38,38,38,32,52,53,54,39,39,39,32,54,55,56,40,40,40,32,54,56,57,41,41,41,32,1,52,54,42,42,42,32,49,51,1,43,43,43,32,45,47,49,44,44,44,32,41,43,45,45,45,45,32,40,41,45,46,46,46,32,54,57,58,47,47,47,32,54,58,59,48,48,48,32,39,40,45,49,49,49,32,38,39,45,50,50,50,32,1,54,59,51,51,51,32,1,59,60,52,52,52,32,38,45,49,53,53,53,32,37,38,49,54,54,54,32,1,60,61,55,55,55,32,1,61,62,55,55,55,32,36,37,49,56,56,56,32,35,36,49,57,57,57,32,1,62,63,58,58,58,32,63,35,49,59,59,59,32,49,1,63,60,60,60,33,4,3,2,51,61,61,61,61,33,4,51,50,5,62,62,62,62,33,6,5,50,49,63,63,63,63,33,7,6,49,48,64,64,64,64,33,7,48,47,8,65,65,65,65,33,8,47,46,9,66,66,66,66,33,9,46,45,10,67,67,67,67,33,11,10,45,44,68,68,68,68,33,11,44,43,12,69,69,69,69,32,13,12,43,70,70,70,32,43,42,64,70,70,70,32,65,66,67,70,70,70,32,65,67,68,70,70,70,32,68,69,70,71,71,71,32,68,70,71,72,72,72,32,64,65,68,73,73,73,32,72,13,43,71,71,71,32,68,71,72,74,74,74,32,72,43,64,70,70,70,32,64,68,72,75,75,75,33,72,73,14,13,76,76,76,76,33,73,74,15,14,77,77,77,77,33,74,75,16,15,78,78,78,78,33,75,76,17,16,79,79,79,79,33,76,77,18,17,80,80,80,80,33,77,78,19,18,81,81,81,81,33,78,79,20,19,82,82,82,82,33,79,80,21,20,83,83,83,83,33,80,81,22,21,84,84,84,84,33,81,82,23,22,85,85,85,85,33,82,83,24,23,86,86,86,86,33,83,84,25,24,87,87,87,87,33,84,85,26,25,88,88,88,88,33,85,86,27,26,89,89,89,89,33,28,27,86,87,90,90,90,90,32,88,55,54,91,91,91,32,54,30,29,92,92,92,32,54,29,88,91,91,91,33,30,54,53,31,93,93,93,93,33,31,53,52,32,94,94,94,94,33,32,52,34,33,95,95,95,95,33,89,35,63,90,83,83,83,83,33,91,36,35,89,82,82,82,82,33,92,37,36,91,81,81,81,81,33,93,38,37,92,80,80,80,80,33,94,39,38,93,96,96,96,96,33,95,40,39,94,78,78,78,78,33,96,41,40,95,77,77,77,77,33,64,42,41,96,76,76,76,76,33,97,98,57,56,90,90,90,90,33,99,58,57,98,89,89,89,89,33,100,59,58,99,88,88,88,88,33,101,60,59,100,87,87,87,87,33,102,61,60,101,86,86,86,86,33,103,62,61,102,85,85,85,85,33,90,63,62,103,84,84,84,84,32,97,104,105,97,97,97,32,97,105,106,98,98,98,32,99,98,97,99,99,99,32,101,100,99,100,100,100,32,103,102,101,101,101,101,32,89,90,103,102,102,102,32,92,91,89,103,103,103,32,94,93,92,104,104,104,32,96,95,94,105,105,105,32,65,64,96,106,106,106,32,119,65,96,107,107,107,32,96,94,92,108,108,108,32,92,89,103,109,109,109,32,103,101,99,110,110,110,32,99,97,106,111,111,111,32,99,106,107,112,112,112,32,92,103,99,113,113,113,32,119,96,92,114,114,114,32,118,119,92,115,115,115,32,99,107,108,116,116,116,32,99,108,109,117,117,117,32,117,118,92,118,118,118,32,116,117,92,119,119,119,32,99,109,110,120,120,120,32,99,110,111,121,121,121,32,115,116,92,122,122,122,32,114,115,92,123,123,123,32,92,99,111,124,124,124,32,92,111,112,125,125,125,32,113,114,92,126,126,126,32,112,113,92,127,127,127,33,119,120,66,65,128,128,128,128,32,156,121,122,129,129,129,32,156,122,123,130,130,130,32,154,155,156,131,131,131,32,152,153,154,132,132,132,32,150,151,152,133,133,133,32,148,149,150,134,134,134,32,146,147,148,135,135,135,32,144,145,146,136,136,136,32,142,143,144,137,137,137,32,66,120,142,138,138,138,32,141,67,66,139,139,139,32,138,139,140,140,140,140,32,141,66,142,141,141,141,32,137,138,140,142,142,142,32,140,141,142,143,143,143,32,142,144,146,144,144,144,32,146,148,150,145,145,145,32,150,152,154,146,146,146,32,154,156,123,147,147,147,32,154,123,124,148,148,148,32,146,150,154,149,149,149,32,140,142,146,150,150,150,32,136,137,140,151,151,151,32,135,136,140,152,152,152,32,154,124,125,153,153,153,32,154,125,126,154,154,154,32,135,140,146,155,155,155,32,134,135,146,156,156,156,32,146,154,126,157,157,157,32,146,126,127,158,158,158,32,133,134,146,159,159,159,32,132,133,146,160,160,160,32,146,127,128,161,161,161,32,146,128,129,162,162,162,32,131,132,146,163,163,163,32,146,129,130,164,164,164,32,130,131,146,165,165,165,32,68,67,141,166,166,166,32,141,157,69,166,166,166,32,141,69,68,166,166,166,32,193,158,159,167,167,167,32,159,160,161,168,168,168,32,161,162,163,169,169,169,32,163,164,165,170,170,170,32,165,166,167,171,171,171,32,167,168,169,172,172,172,32,169,170,171,173,173,173,32,171,172,173,174,174,174,32,173,70,69,175,175,175,32,173,69,157,176,176,176,32,169,171,173,177,177,177,32,165,167,169,178,178,178,32,161,163,165,179,179,179,32,193,159,161,180,180,180,32,192,193,161,181,181,181,32,161,165,169,182,182,182,32,169,173,157,183,183,183,32,174,175,176,184,184,184,32,169,157,174,185,185,185,32,191,192,161,186,186,186,32,190,191,161,187,187,187,32,169,174,176,188,188,188,32,169,176,177,189,189,189,32,189,190,161,190,190,190,32,188,189,161,191,191,191,32,169,177,178,192,192,192,32,169,178,179,193,193,193,32,188,161,169,194,194,194,32,187,188,169,195,195,195,32,169,179,180,196,196,196,32,169,180,181,197,197,197,32,186,187,169,198,198,198,32,185,186,169,199,199,199,32,169,181,182,200,200,200,32,169,182,183,201,201,201,32,184,185,169,202,202,202,32,169,183,184,203,203,203,33,194,71,70,173,128,128,128,128,32,209,87,86,12,12,12,32,86,85,84,204,204,204,32,84,83,82,205,205,205,32,82,81,80,206,206,206,32,80,79,78,207,207,207,32,78,77,76,208,208,208,32,76,75,74,209,209,209,32,74,73,72,210,210,210,32,72,71,194,211,211,211,32,72,194,195,212,212,212,32,76,74,72,213,213,213,32,80,78,76,214,214,214,32,84,82,80,215,215,215,32,209,86,84,216,216,216,32,208,209,84,217,217,217,32,84,80,76,218,218,218,32,76,72,195,219,219,219,32,76,195,196,220,220,220,32,207,208,84,221,221,221,32,206,207,84,222,222,222,32,76,196,197,223,223,223,32,76,197,198,224,224,224,32,205,206,84,225,225,225,32,204,205,84,226,226,226,32,76,198,199,227,227,227,32,76,199,200,228,228,228,32,203,204,84,229,229,229,32,202,203,84,230,230,230,32,84,76,200,231,231,231,32,201,202,84,232,232,232,32,84,200,201,233,233,233,33,156,155,105,104,234,234,234,234,33,105,155,154,106,235,235,235,235,33,106,154,153,107,236,236,236,236,33,107,153,152,108,237,237,237,237,33,108,152,151,109,238,238,238,238,33,109,151,150,110,239,239,239,239,33,110,150,149,111,240,240,240,240,33,111,149,148,112,241,241,241,241,33,112,148,147,113,242,242,242,242,33,113,147,146,114,243,243,243,243,33,114,146,145,115,244,244,244,244,33,115,145,144,116,245,245,245,245,33,116,144,143,117,246,246,246,246,33,117,143,142,118,247,247,247,247,33,118,142,120,119,248,248,248,248,33,210,211,122,121,249,249,249,249,33,212,123,122,211,250,250,250,250,33,213,124,123,212,251,251,251,251,33,214,125,124,213,252,252,252,252,33,215,126,125,214,253,253,253,253,33,216,127,126,215,254,254,254,254,33,217,128,127,216,255,255,255,255,33,218,129,128,217,256,256,256,256,33,219,130,129,218,257,257,257,257,33,220,131,130,219,258,258,258,258,33,221,132,131,220,259,259,259,259,33,222,133,132,221,260,260,260,260,33,223,134,133,222,261,261,261,261,33,224,135,134,223,262,262,262,262,33,225,136,135,224,263,263,263,263,33,226,137,136,225,264,264,264,264,33,227,138,137,226,265,265,265,265,32,235,139,138,266,266,266,32,235,138,227,267,267,267,32,176,175,235,268,268,268,32,234,176,235,267,267,267,32,235,227,228,269,269,269,32,228,229,230,70,70,70,32,230,231,232,71,71,71,32,233,234,235,270,270,270,32,230,232,233,72,72,72,32,233,235,228,70,70,70,32,228,230,233,271,271,271,32,175,174,140,272,272,272,32,140,139,235,273,273,273,32,140,235,175,274,274,274,33,141,140,174,157,271,271,271,271,33,209,208,159,158,234,234,234,234,33,208,207,160,159,235,235,235,235,33,207,206,161,160,236,236,236,236,33,206,205,162,161,237,237,237,237,33,205,204,163,162,275,275,275,275,33,204,203,164,163,276,276,276,276,33,203,202,165,164,240,240,240,240,33,202,201,166,165,241,241,241,241,33,201,200,167,166,242,242,242,242,33,200,199,168,167,243,243,243,243,33,199,198,169,168,244,244,244,244,33,198,197,170,169,245,245,245,245,33,197,196,171,170,246,246,246,246,33,196,195,172,171,247,247,247,247,33,195,194,173,172,248,248,248,248,33,234,236,177,176,265,265,265,265,33,236,237,178,177,277,277,277,277,33,237,238,179,178,263,263,263,263,33,238,239,180,179,262,262,262,262,33,239,240,181,180,261,261,261,261,33,240,241,182,181,260,260,260,260,33,241,242,183,182,259,259,259,259,33,242,243,184,183,278,278,278,278,33,243,244,185,184,279,279,279,279,33,244,245,186,185,280,280,280,280,33,245,246,187,186,255,255,255,255,33,246,247,188,187,254,254,254,254,33,247,248,189,188,253,253,253,253,33,248,249,190,189,281,281,281,281,33,249,250,191,190,282,282,282,282,33,250,251,192,191,283,283,283,283,33,193,192,251,252,249,249,249,249,32,210,253,254,284,284,284,32,210,254,255,285,285,285,32,212,211,210,286,286,286,32,214,213,212,287,287,287,32,216,215,214,288,288,288,32,218,217,216,289,289,289,32,220,219,218,290,290,290,32,222,221,220,291,291,291,32,224,223,222,292,292,292,32,226,225,224,293,293,293,32,228,227,226,294,294,294,32,270,228,226,295,295,295,32,226,224,222,296,296,296,32,222,220,218,297,297,297,32,218,216,214,298,298,298,32,214,212,210,299,299,299,32,210,255,256,300,300,300,32,210,256,257,301,301,301,32,218,214,210,302,302,302,32,226,222,218,303,303,303,32,269,270,226,304,304,304,32,268,269,226,305,305,305,32,218,210,257,306,306,306,32,218,257,258,307,307,307,32,267,268,226,308,308,308,32,266,267,226,309,309,309,32,218,258,259,310,310,310,32,218,259,260,311,311,311,32,266,226,218,312,312,312,32,265,266,218,313,313,313,32,218,260,261,314,314,314,32,218,261,262,315,315,315,32,264,265,218,316,316,316,32,218,262,263,317,317,317,32,263,264,218,318,318,318,33,270,271,229,228,319,319,319,319,32,306,272,273,129,129,129,32,306,273,274,320,320,320,32,304,305,306,321,321,321,32,302,303,304,322,322,322,32,300,301,302,323,323,323,32,298,299,300,324,324,324,32,296,297,298,325,325,325,32,294,295,296,326,326,326,32,292,293,294,327,327,327,32,290,291,292,328,328,328,32,229,271,290,329,329,329,32,289,230,229,330,330,330,32,288,289,229,331,331,331,32,229,290,292,332,332,332,32,292,294,296,333,333,333,32,296,298,300,334,334,334,32,300,302,304,335,335,335,32,304,306,274,336,336,336,32,304,274,275,337,337,337,32,288,229,292,338,338,338,32,287,288,292,339,339,339,32,304,275,276,340,340,340,32,300,304,276,341,341,341,32,286,287,292,342,342,342,32,285,286,292,343,343,343,32,300,276,277,344,344,344,32,300,277,278,345,345,345,32,284,285,292,346,346,346,32,284,292,296,347,347,347,32,300,278,279,348,348,348,32,300,279,280,349,349,349,32,283,284,296,350,350,350,32,282,283,296,351,351,351,32,296,300,280,352,352,352,32,281,282,296,353,353,353,32,280,281,296,354,354,354,33,231,230,289,307,355,355,355,355,32,342,308,309,167,167,167,32,309,310,311,356,356,356,32,311,312,313,357,357,357,32,313,314,315,358,358,358,32,315,316,317,359,359,359,32,317,318,319,360,360,360,32,319,320,321,361,361,361,32,321,322,323,362,362,362,32,323,324,325,363,363,363,32,325,232,231,364,364,364,32,325,231,307,365,365,365,32,321,323,325,366,366,366,32,317,319,321,367,367,367,32,313,315,317,368,368,368,32,309,311,313,369,369,369,32,341,342,309,370,370,370,32,340,341,309,371,371,371,32,325,307,326,372,372,372,32,325,326,327,373,373,373,32,339,340,309,374,374,374,32,339,309,313,375,375,375,32,321,325,327,376,376,376,32,321,327,328,377,377,377,32,338,339,313,378,378,378,32,337,338,313,379,379,379,32,321,328,329,380,380,380,32,321,329,330,381,381,381,32,336,337,313,382,382,382,32,335,336,313,383,383,383,32,321,330,331,384,384,384,32,317,321,331,385,385,385,32,335,313,317,386,386,386,32,334,335,317,387,387,387,32,317,331,332,388,388,388,32,333,334,317,389,389,389,32,317,332,333,390,390,390,33,343,233,232,325,391,391,391,391,32,360,252,251,392,392,392,32,251,250,249,393,393,393,32,249,248,247,394,394,394,32,247,246,245,395,395,395,32,245,244,243,396,396,396,32,243,242,241,397,397,397,32,241,240,239,398,398,398,32,239,238,237,399,399,399,32,237,236,234,400,400,400,32,234,233,343,401,401,401,32,234,343,344,402,402,402,32,239,237,234,403,403,403,32,243,241,239,404,404,404,32,247,245,243,405,405,405,32,251,249,247,406,406,406,32,359,360,251,407,407,407,32,358,359,251,408,408,408,32,251,247,243,409,409,409,32,243,239,234,410,410,410,32,234,344,345,411,411,411,32,234,345,346,412,412,412,32,357,358,251,413,413,413,32,356,357,251,414,414,414,32,243,234,346,415,415,415,32,243,346,347,416,416,416,32,355,356,251,417,417,417,32,354,355,251,418,418,418,32,243,347,348,419,419,419,32,243,348,349,420,420,420,32,354,251,243,421,421,421,32,353,354,243,422,422,422,32,243,349,350,423,423,423,32,243,350,351,424,424,424,32,352,353,243,425,425,425,32,243,351,352,426,426,426,33,306,305,254,253,427,427,427,427,33,254,305,304,255,428,428,428,428,33,255,304,303,256,429,429,429,429,33,256,303,302,257,430,430,430,430,33,257,302,301,258,431,431,431,431,33,258,301,300,259,432,432,432,432,33,259,300,299,260,433,433,433,433,33,260,299,298,261,434,434,434,434,33,261,298,297,262,435,435,435,435,33,262,297,296,263,436,436,436,436,33,263,296,295,264,437,437,437,437,33,264,295,294,265,438,438,438,438,33,265,294,293,266,439,439,439,439,33,266,293,292,267,440,440,440,440,33,267,292,291,268,441,441,441,441,33,268,291,290,269,442,442,442,442,33,269,290,271,270,443,443,443,443,32,342,341,273,444,444,444,32,273,272,361,445,445,445,32,273,361,342,446,446,446,33,340,274,273,341,447,447,447,447,33,339,275,274,340,448,448,448,448,33,276,275,339,338,449,449,449,449,33,276,338,337,277,281,281,281,281,33,337,336,278,277,450,450,450,450,33,335,279,278,336,451,451,451,451,33,334,280,279,335,452,452,452,452,33,333,281,280,334,453,453,453,453,33,332,282,281,333,454,454,454,454,33,331,283,282,332,455,455,455,455,33,330,284,283,331,456,456,456,456,33,329,285,284,330,457,457,457,457,33,329,328,286,285,458,458,458,458,33,328,327,287,286,459,459,459,459,33,327,326,288,287,460,460,460,460,33,288,326,307,289,461,461,461,461,33,360,359,309,308,427,427,427,427,33,359,358,310,309,428,428,428,428,33,358,357,311,310,429,429,429,429,33,357,356,312,311,430,430,430,430,33,356,355,313,312,431,431,431,431,33,355,354,314,313,462,462,462,462,33,354,353,315,314,463,463,463,463,33,353,352,316,315,434,434,434,434,33,352,351,317,316,435,435,435,435,33,351,350,318,317,436,436,436,436,33,350,349,319,318,437,437,437,437,33,349,348,320,319,438,438,438,438,33,348,347,321,320,439,439,439,439,33,347,346,322,321,440,440,440,440,33,346,345,323,322,441,441,441,441,33,345,344,324,323,464,464,464,464,33,344,343,325,324,465,465,465,465,32,361,272,306,466,466,466,32,361,306,253,467,467,467,32,56,55,88,467,467,467,32,97,56,88,466,466,466,32,88,361,253,468,468,468,32,210,121,156,469,469,469,32,88,253,210,470,470,470,32,104,97,88,467,467,467,32,210,156,104,471,471,471,32,210,104,88,472,472,472,32,88,29,28,473,473,473,32,88,28,87,474,474,474,32,308,342,361,475,475,475,32,360,308,361,474,474,474,32,361,88,87,467,467,467,32,209,158,193,471,471,471,32,361,87,209,474,474,474,32,252,360,361,476,476,476,32,209,193,252,469,469,469,32,209,252,361,477,477,477,32,371,362,363,478,478,478,32,371,363,364,479,479,479,32,369,370,371,167,167,167,32,367,368,369,480,480,480,32,365,366,367,481,481,481,32,371,364,365,482,482,482,32,367,369,371,483,483,483,32,365,367,371,484,484,484,33,372,373,363,362,485,485,485,485,33,373,374,364,363,486,486,486,486,33,374,375,365,364,487,487,487,487,33,366,365,375,376,488,488,488,488,32,377,367,366,474,474,474,32,377,366,376,474,474,474,32,383,442,384,489,489,489,32,382,383,384,474,474,474,32,384,377,376,490,490,490,32,378,379,380,474,474,474,32,384,376,378,491,491,491,32,381,382,384,492,492,492,32,378,380,381,474,474,474,32,378,381,384,491,491,491,32,377,385,386,493,493,493,32,386,368,367,494,494,494,32,386,367,377,493,493,493,33,368,386,387,369,495,495,495,495,33,369,387,388,370,496,496,496,496,32,371,370,388,497,497,497,32,388,389,390,498,498,498,32,388,390,371,498,498,498,32,378,376,375,499,499,499,32,375,374,373,500,500,500,32,373,372,391,501,501,501,32,373,391,392,502,502,502,32,378,375,373,503,503,503,32,394,378,373,504,504,504,32,373,392,393,505,505,505,32,373,393,394,506,506,506,32,384,447,395,507,507,507,32,384,395,396,467,467,467,32,402,385,377,467,467,467,32,401,402,377,466,466,466,32,377,384,396,508,508,508,32,397,398,399,466,466,466,32,377,396,397,509,509,509,32,400,401,377,467,467,467,32,397,399,400,467,467,467,32,397,400,377,467,467,467,33,378,394,403,379,510,510,510,510,32,380,379,403,511,511,511,32,403,404,405,512,512,512,32,405,406,407,501,501,501,32,405,407,408,478,478,478,32,380,403,405,513,513,513,32,412,380,405,514,514,514,32,405,408,409,478,478,478,32,405,409,410,515,515,515,32,411,412,405,516,516,516,32,405,410,411,517,517,517,33,380,412,413,381,518,518,518,518,32,382,381,413,167,167,167,32,413,414,415,519,519,519,32,415,416,417,520,520,520,32,417,418,419,501,501,501,32,417,419,420,521,521,521,32,413,415,417,522,522,522,32,425,382,413,167,167,167,32,424,425,413,523,523,523,32,413,417,420,524,524,524,32,413,420,421,525,525,525,32,423,424,413,526,526,526,32,413,421,422,527,527,527,32,413,422,423,528,528,528,33,382,425,426,383,529,529,529,529,32,383,426,427,530,530,530,32,427,428,429,167,167,167,32,429,430,431,531,531,531,32,431,432,433,501,501,501,32,431,433,434,532,532,532,32,427,429,431,533,533,533,32,441,442,383,167,167,167,32,440,441,383,534,534,534,32,431,434,435,478,478,478,32,431,435,436,535,535,535,32,440,383,427,536,536,536,32,439,440,427,479,479,479,32,427,431,436,537,537,537,32,427,436,437,532,532,532,32,438,439,427,167,167,167,32,427,437,438,532,532,532,32,442,447,384,538,538,538,32,446,389,388,539,539,539,32,388,387,386,540,540,540,32,386,385,402,541,541,541,32,386,402,443,542,542,542,32,445,446,388,539,539,539,32,386,443,444,543,543,543,32,444,445,388,544,544,544,32,388,386,444,545,545,545,33,406,405,392,391,546,546,546,546,33,393,392,405,404,547,547,547,547,33,394,393,404,403,548,548,548,548,32,395,447,448,129,129,129,32,395,448,449,129,129,129,32,462,463,395,549,549,549,32,460,461,462,550,550,550,32,458,459,460,551,551,551,32,456,457,458,552,552,552,32,455,456,458,553,553,553,32,458,460,462,554,554,554,32,462,395,449,555,555,555,32,462,449,450,556,556,556,32,454,455,458,557,557,557,32,453,454,458,558,558,558,32,462,450,451,559,559,559,32,462,451,452,129,129,129,32,453,458,462,560,560,560,32,452,453,462,561,561,561,33,395,463,464,396,529,529,529,529,32,397,396,464,129,129,129,32,397,464,465,562,562,562,32,475,476,397,563,563,563,32,473,474,475,564,564,564,32,471,472,473,565,565,565,32,469,470,471,566,566,566,32,468,469,471,567,567,567,32,471,473,475,568,568,568,32,475,397,465,569,569,569,32,475,465,466,570,570,570,32,468,471,475,571,571,571,32,475,466,467,572,572,572,32,467,468,475,573,573,573,33,397,476,477,398,518,518,518,518,32,399,398,477,129,129,129,32,399,477,478,574,574,574,32,485,486,399,575,575,575,32,483,484,485,576,576,576,32,481,482,483,129,129,129,32,480,481,483,577,577,577,32,483,485,399,578,578,578,32,399,478,479,579,579,579,32,479,480,483,580,580,580,32,479,483,399,581,581,581,33,399,486,487,400,510,510,510,510,32,401,400,487,582,582,582,32,401,487,488,583,583,583,32,493,494,401,584,584,584,32,491,492,493,585,585,585,32,489,490,491,586,586,586,32,401,488,489,587,587,587,32,491,493,401,588,588,588,32,489,491,401,589,589,589,33,401,494,443,402,488,488,488,488,33,418,417,408,407,590,590,590,590,33,417,416,409,408,591,591,591,591,33,416,415,410,409,592,592,592,592,33,415,414,411,410,593,593,593,593,33,414,413,412,411,594,594,594,594,33,432,431,420,419,595,595,595,595,33,421,420,431,430,596,596,596,596,33,422,421,430,429,597,597,597,597,33,423,422,429,428,598,598,598,598,33,424,423,428,427,599,599,599,599,33,425,424,427,426,600,600,600,600,32,455,434,433,601,601,601,32,495,456,455,602,602,602,32,433,495,455,602,602,602,33,434,455,454,435,603,603,603,603,33,436,435,454,453,604,604,604,604,33,436,453,452,437,605,605,605,605,33,437,452,451,438,606,606,606,606,33,438,451,450,439,607,607,607,607,33,440,439,450,449,608,608,608,608,33,441,440,449,448,609,609,609,609,33,441,448,447,442,610,610,610,610,33,493,444,443,494,487,487,487,487,33,492,445,444,493,486,486,486,486,33,446,445,492,491,485,485,485,485,33,470,469,458,457,595,595,595,595,33,468,459,458,469,596,596,596,596,33,467,460,459,468,597,597,597,597,33,466,461,460,467,611,611,611,611,33,465,462,461,466,612,612,612,612,33,464,463,462,465,613,613,613,613,33,482,481,472,471,590,590,590,590,33,472,481,480,473,591,591,591,591,33,473,480,479,474,614,614,614,614,33,474,479,478,475,615,615,615,615,33,475,478,477,476,616,616,616,616,33,490,489,484,483,546,546,546,546,33,488,485,484,489,617,617,617,617,33,487,486,485,488,548,548,548,548,32,390,389,446,70,70,70,32,390,446,491,70,70,70,32,457,456,495,70,70,70,32,470,457,495,70,70,70,32,495,390,491,618,618,618,32,490,483,482,70,70,70,32,495,491,490,619,619,619,32,471,470,495,70,70,70,32,490,482,471,70,70,70,32,490,471,495,70,70,70,32,495,433,432,71,71,71,32,495,432,419,72,72,72,32,362,371,390,70,70,70,32,372,362,390,71,71,71,32,390,495,419,620,620,620,32,418,407,406,71,71,71,32,390,419,418,621,621,621,32,391,372,390,622,622,622,32,418,406,391,72,72,72,32,418,391,390,621,621,621]},\"eight_R_b\":{\"uvs\":[],\"normals\":[-0.405246,0,0.914208,-0.449615,0,0.893223,0.405242,0,-0.914209,-0.492899,0,0.870087,0.359903,0,-0.93299,0.449614,0,-0.893223,-0.534999,0,0.844853,6.42024e-7,1,-8.07983e-7,-3.85342e-8,1,-3.85342e-8,3.06014e-7,1,-3.83082e-7,-3.19657e-8,1,-2.6235e-8,-4.85121e-7,1,6.88815e-7,-4.15265e-7,1,7.33041e-7,0,1,0,-1.77565e-8,1,-1.06423e-8,-2.315e-8,1,-3.6977e-8,-1.68993e-7,1,1.45929e-7,-3.48958e-8,1,-2.33456e-8,-3.76228e-8,1,-1.77948e-8,2.51619e-7,1,-4.4417e-7,1.9557e-7,1,-2.50601e-7,1.49612e-7,1,-2.84687e-7,-1.77551e-8,1,-1.06446e-8,2.40275e-7,1,-4.57203e-7,-0.170966,0,0.985277,0.492897,0,-0.870087,0.653175,0,-0.757207,-0.405239,0,0.914211,-0.575813,0,0.817582,0,1,0,-3.85343e-8,1,-3.85343e-8,8.05603e-8,1,-1.57629e-7,-6.51545e-7,1,7.55318e-7,-5.74369e-7,1,8.15537e-7,-4.91616e-7,1,8.67818e-7,2.66025e-7,1,-9.61293e-7,4.87232e-8,1,-2.44948e-7,9.55808e-8,1,-2.30749e-7,-1.96869e-8,1,-1.45992e-8,-5.55309e-8,1,-1.45021e-8,1.63101e-7,1,-2.61059e-7,-0.00000446989,1,0.00000564745,0,1,0,2.68668e-7,1,-3.81478e-7,-4.23145e-8,1,-2.53616e-8,-4.9167e-8,1,1.45851e-7,-0.00000155497,1,0.00000692438,1.67856e-7,1,-4.43154e-7,-1.24447e-7,1,4.49698e-7,-4.6449e-8,1,-1.6619e-8,-1.9823e-7,1,3.90458e-7,-0.359901,0,0.932991,0.535,0,-0.844852,1.78237e-7,1,-2.78658e-7,0,1,0,-3.44661e-8,1,-2.46667e-8,-1.44085e-8,1,-5.65555e-8,-5.73505e-7,1,6.64852e-7,-1.39131e-7,1,-1.94898e-7,2.73764e-9,1,-8.55943e-8,-1.80227e-8,1,2.84609e-8,1.83318e-7,1,-2.5734e-7,-5.05562e-7,1,7.17835e-7,-4.32819e-7,1,7.64034e-7,-5.50092e-7,1,0.00000124098,-1.35827e-8,1,-3.52109e-8,-1.8505e-8,1,-1.10904e-8,7.40599e-9,1,-6.69286e-8,2.67644e-9,1,-1.00176e-7,-3.26489e-8,1,1.25071e-8,6.22178e-10,1,-4.94603e-8,1.91989e-8,1,-1.59411e-7,-6.08447e-8,1,2.17217e-7,1.63766e-7,1,-7.68175e-7,-1.57448e-8,1,4.0816e-8,-1.9459e-8,1,5.89025e-8,-0.449615,0,0.893222,-0.313683,0,0.949528,-0.615231,0,0.788347,0.405244,0,-0.914209,-0.313686,0,0.949527,0.575812,0,-0.817582,-0.492899,0,0.870086,-0.266711,0,0.963777,0.405249,0,-0.914206,-0.653173,0,0.757209,0.4929,0,-0.870086,-0.57581,0,0.817583,-0.266712,0,0.963776,0.359896,0,-0.932992,0.615232,0,-0.788346,-0.534999,0,0.844853,0.707107,0,-0.707107,0.44961,0,-0.893225,-0.122411,0,0.99248,-0.622114,0,0.782926,3.44216e-7,1,-4.48511e-7,-7.83333e-9,1,-4.99677e-8,2.23614e-7,1,-2.81416e-7,-2.41287e-8,1,-1.98022e-8,-1.73018e-8,1,-1.15619e-8,-1.83524e-8,1,-9.8093e-9,-1.28913e-8,1,-2.90855e-8,2.63384e-9,1,-5.30879e-8,4.95308e-10,1,-5.42738e-8,-2.52918e-8,1,3.17331e-9,4.22429e-8,1,-1.00676e-7,-8.3912e-9,1,-3.7468e-8,-5.278e-9,1,-3.58578e-8,-7.35144e-9,1,-3.38062e-8,2.1456e-8,1,-6.65809e-8,1.27888e-9,1,-4.59611e-8,-6.09599e-9,1,-2.72023e-8,-4.33891e-8,1,8.12201e-9,-4.94795e-9,1,-3.03848e-8,7.56842e-9,1,-5.76339e-8,-0.219106,0,0.975701,0.313685,0,-0.949527,0.653173,0,-0.757209,0.534999,0,-0.844853,-0.575815,0,0.81758,0.492901,0,-0.870085,-0.359896,0,0.932992,-0.707105,0,0.707109,0.266712,0,-0.963776,-0.0735681,0,0.99729,0.60883,0,-0.793301,-0.615233,0,0.788346,0.535,0,-0.844852,0.707107,0,0.707107,0.707107,0,0.707107,0.707103,-0.00000810377,0.707111,0.707107,0,0.707107,0.707104,0.000010376,0.707109,0.219103,0,-0.975702,-0.492897,0,0.870088,0.707108,0,-0.707105,-0.653171,0,0.75721,0.57581,0,-0.817583,-0.449618,0,0.893221,-0.534998,0,0.844853,-0.405246,0,0.914208,-0.813734,0,0.581237,0.17096,0,-0.985278,-0.615233,0,0.788345,-0.538831,0,0.842414,0.707105,0,0.707109,0.615234,0,-0.788345,0.449612,0,-0.893224,0.122419,0,-0.992478,0.57581,0,-0.817583,-0.428549,0,0.903519,-0.707107,0,0.707107,0.707097,0,0.707117,0.707097,0,0.707117,0.707107,0,0.707107,0.707107,0.0000431407,0.707107,0.707104,0.00000518324,0.707109,0.581237,0,-0.813734,0.653174,0,-0.757208,0.0735576,0,-0.997291,-0.707107,0,0.707107,4.69876e-8,1,-9.19386e-8,-7.83368e-9,1,-4.99678e-8,1.02592e-7,1,-1.60394e-7,-1.7477e-7,1,1.66592e-7,-1.9566e-8,1,-1.30725e-8,9.7407e-8,1,-2.19673e-7,7.54165e-8,1,-2.28188e-7,-1.12587e-8,1,-3.41622e-9,-4.28585e-9,1,-8.85471e-8,2.81952e-9,1,-3.82269e-8,3.80583e-9,1,-3.08546e-8,-1.69183e-9,1,-3.49538e-8,-1.59726e-8,1,-7.55584e-9,1.44225e-8,1,-6.39394e-8,-8.10067e-9,1,-4.39847e-8,1.25962e-9,1,-3.70086e-8,4.13339e-9,1,-5.00662e-8,-1.09389e-9,1,-3.90488e-8,6.1983e-10,1,-7.51454e-8,1.41558e-9,1,-4.15911e-8,3.07592e-9,1,-4.68686e-8,4.78212e-10,1,-5.79762e-8,1.17135e-9,1,-5.01106e-8,5.15133e-9,1,-5.17645e-8,-5.75934e-9,1,-3.66481e-8,2.4984e-9,1,-4.65708e-8,4.56428e-9,1,-4.58316e-8,-1.24852e-8,1,-2.76106e-8,7.74926e-9,1,-4.76759e-8,-1.51824e-8,1,-2.42682e-8,0.455086,0,-0.890447,0.707107,0,-0.707107,-0.0251875,0,0.999683,0.624133,0,-0.781318,-0.219107,0,0.975701,0.61523,0,-0.788347,-1,0,0,-0.653171,0,0.75721,-0.449615,0,0.893222,2.57839e-8,-1,5.81682e-8,4.96998e-7,-1,-9.87363e-7,4.50757e-7,-1,-7.11821e-7,5.18391e-7,-1,-6.64259e-7,-3.06014e-7,-1,3.83082e-7,-1.51173e-7,-1,2.38543e-7,3.33813e-8,-1,-1.54745e-8,-2.00631e-7,-1,3.98581e-7,0.00000254345,-1,-0.00000440541,-7.17045e-8,-1,1.36713e-7,3.85342e-8,-1,3.85342e-8,-6.42024e-7,-1,8.07983e-7,1.68993e-7,-1,-1.45929e-7,-1.52668e-7,-1,3.28734e-7,0,-1,0,4.27103e-7,-1,-4.71747e-7,3.46047e-8,-1,2.31223e-8,-3.14053e-7,-1,4.02422e-7,-0.405239,0,0.914211,-7.95598e-8,-1,1.67738e-7,0,-1,0,3.78383e-8,-1,3.10694e-8,5.74369e-7,-1,-8.15537e-7,-3.58945e-7,-1,9.30525e-7,3.12875e-7,-1,-9.47077e-7,-4.87232e-8,-1,2.44948e-7,1.17737e-7,-1,-2.20269e-7,-1.19068e-7,-1,2.22259e-7,0,-1,0,4.92206e-8,-1,1.28542e-8,1.18612e-7,-1,-9.8213e-8,0.00000446989,-1,-0.00000564745,0,-1,0,-2.68668e-7,-1,3.81478e-7,-1.7007e-7,-1,2.68569e-7,4.9167e-8,-1,-1.45851e-7,0.00000155497,-1,-0.00000692438,-1.14372e-7,-1,3.01952e-7,-7.81867e-8,-1,4.67444e-7,-1.76073e-7,-1,4.00934e-7,2.36105e-7,-1,-4.10939e-7,-0.359901,0,0.932991,-7.19818e-9,-1,2.56976e-8,-7.14916e-9,-1,2.58338e-8,4.32819e-7,-1,-7.64034e-7,5.05562e-7,-1,-7.17835e-7,3.33141e-8,-1,2.73391e-8,-9.37852e-8,-1,1.31213e-7,-9.3393e-8,-1,1.3075e-7,4.49202e-8,-1,3.21486e-8,-3.53091e-8,-1,6.83764e-9,-1.04813e-7,-1,1.95648e-7,-7.23403e-8,-1,1.81049e-7,-8.08297e-9,-1,2.44672e-8,3.19091e-8,-1,4.8005e-8,-3.46256e-8,-1,1.01011e-7,3.35664e-9,-1,3.8135e-8,-2.11057e-8,-1,4.76141e-8,-2.46413e-8,-1,4.89534e-8,1.02104e-8,-1,3.07711e-8,2.38825e-7,-1,-2.04835e-7,5.49657e-8,-1,-1.57625e-9,-5.4793e-8,-1,8.65273e-8,-1.39508e-7,-1,1.78763e-7,8.84884e-8,-1,-4.39345e-8,-0.313683,0,0.949528,0.405244,0,-0.914209,-0.266711,0,0.963777,0.405249,0,-0.914206,0.44961,0,-0.893225,-3.44216e-7,-1,4.48511e-7,-1.80014e-9,-1,4.03341e-8,-1.49076e-7,-1,1.87611e-7,2.41287e-8,-1,1.98022e-8,1.73018e-8,-1,1.15619e-8,-1.81461e-7,-1,3.83631e-7,1.28913e-8,-1,2.90855e-8,-2.63384e-9,-1,5.30879e-8,-9.95212e-9,-1,4.90298e-8,2.52918e-8,-1,-3.17331e-9,-4.22429e-8,-1,1.00676e-7,-1.44516e-9,-1,3.23803e-8,5.278e-9,-1,3.58578e-8,7.35144e-9,-1,3.38062e-8,3.37602e-9,-1,4.12041e-8,-1.27888e-9,-1,4.59611e-8,6.09599e-9,-1,2.72023e-8,-1.12612e-8,-1,5.80476e-8,-8.88417e-9,-1,6.87298e-8,6.62278e-9,-1,3.49699e-8,-0.219106,0,0.975701,0.313685,0,-0.949527,0.266712,0,-0.963776,0.608829,0,-0.793301,0.535,0,-0.844852,0.707103,-0.0000162075,0.707111,0.707104,0.0000048828,0.707109,-0.405246,0,0.914208,-0.813734,0,0.581237,0.707097,0,0.707117,0.707104,-0.0000329288,0.707109,0.653174,0,-0.757208,-2.81952e-9,-1,3.82269e-8,4.28585e-9,-1,8.85471e-8,1.12587e-8,-1,3.41622e-9,-7.54165e-8,-1,2.28188e-7,-9.7407e-8,-1,2.19673e-7,1.9566e-8,-1,1.30725e-8,-1.29303e-7,-1,2.03922e-7,-6.83947e-8,-1,1.06929e-7,-1.79989e-9,-1,4.03342e-8,-4.69876e-8,-1,9.19386e-8,-1.67369e-9,-1,3.7506e-8,6.8097e-8,-1,-3.66111e-8,-1.31363e-8,-1,6.20145e-8,-6.33088e-9,-1,6.14009e-8,4.49738e-9,-1,9.29175e-8,-2.2419e-9,-1,1.81755e-8,3.20432e-9,-1,3.4752e-8,-5.9983e-9,-1,4.93923e-8,-7.84102e-9,-1,4.98245e-8,3.746e-9,-1,4.99842e-8,-6.52978e-9,-1,2.90782e-8,3.75284e-9,-1,5.84232e-8,1.33386e-9,-1,2.07651e-8,3.9244e-9,-1,3.16969e-8,1.94558e-9,-1,3.31188e-8,-5.42072e-9,-1,5.2988e-8,1.53113e-7,-1,-2.2063e-7,2.40785e-8,-1,5.57747e-9,4.45273e-8,-1,-3.40305e-8,-1.64838e-8,-1,6.73803e-8,0.455086,0,-0.890447,0.707107,0,-0.707107,-1,0,0,-0.653171,0,0.75721],\"faces\":[33,0,1,2,3,0,0,0,0,33,1,7,8,2,1,1,1,1,33,5,4,12,13,2,2,2,2,33,7,15,16,8,3,3,3,3,33,18,12,4,11,4,4,4,4,33,14,5,13,19,5,5,5,5,33,15,23,24,16,6,6,6,6,32,45,58,74,7,7,7,32,74,88,100,8,8,8,32,100,89,75,9,9,9,32,75,59,46,10,10,10,32,46,35,25,11,11,11,32,25,17,9,12,12,12,32,9,10,3,13,13,13,32,9,3,2,13,13,13,32,46,25,9,14,14,14,32,100,75,46,15,15,15,32,45,74,100,16,16,16,32,45,100,46,17,17,17,32,9,2,8,18,18,18,32,9,8,16,19,19,19,32,34,45,46,20,20,20,32,24,34,46,21,21,21,32,46,9,16,22,22,22,32,16,24,46,23,23,23,33,309,301,116,125,24,24,24,24,33,22,14,19,28,25,25,25,25,33,257,239,59,75,26,26,26,26,33,30,31,21,20,27,27,27,27,33,23,33,34,24,28,28,28,28,32,132,137,136,29,29,29,32,136,130,129,30,30,30,32,129,135,131,31,31,31,32,131,121,112,32,32,32,32,112,97,84,33,33,33,32,84,69,55,34,34,34,32,55,54,64,29,29,29,32,64,78,91,35,35,35,32,91,105,115,29,29,29,32,115,124,133,29,29,29,32,133,139,141,29,29,29,32,141,142,140,13,13,13,32,141,140,138,29,29,29,32,115,133,141,13,13,13,32,64,91,115,36,36,36,32,84,55,64,37,37,37,32,131,112,84,38,38,38,32,136,129,131,39,39,39,32,132,136,131,29,29,29,32,115,141,138,13,13,13,32,115,138,134,13,13,13,32,132,131,84,40,40,40,32,122,132,84,41,41,41,32,115,134,125,29,29,29,32,115,125,116,42,42,42,32,113,122,84,43,43,43,32,98,113,84,44,44,44,32,64,115,116,45,45,45,32,64,116,106,46,46,46,32,85,98,84,29,29,29,32,71,85,84,47,47,47,32,64,106,92,48,48,48,32,64,92,79,49,49,49,32,71,84,64,50,50,50,32,64,79,70,42,42,42,32,64,70,71,42,42,42,33,37,30,20,26,51,51,51,51,33,32,22,28,38,52,52,52,52,32,81,94,107,53,53,53,32,107,118,119,29,29,29,32,107,119,108,54,54,54,32,81,107,108,55,55,55,32,109,102,101,29,29,29,32,81,108,109,56,56,56,32,66,81,109,29,29,29,32,109,101,93,54,54,54,32,80,65,50,57,57,57,32,109,93,80,58,58,58,32,51,66,109,59,59,59,32,39,51,109,60,60,60,32,109,80,50,61,61,61,32,50,38,28,62,62,62,32,28,19,13,63,63,63,32,13,12,18,64,64,64,32,13,18,27,65,65,65,32,50,28,13,66,66,66,32,39,109,50,67,67,67,32,29,39,50,68,68,68,32,50,13,27,69,69,69,32,61,60,47,29,29,29,32,50,27,61,70,70,70,32,21,29,50,29,29,29,32,20,21,50,71,71,71,32,50,61,47,72,72,72,32,50,47,36,73,73,73,32,26,20,50,74,74,74,32,50,36,26,75,75,75,33,31,40,29,21,76,76,76,76,33,276,262,79,92,77,77,77,77,33,33,44,45,34,78,78,78,78,33,9,169,170,10,79,79,79,79,33,48,37,26,36,80,80,80,80,33,43,32,38,50,81,81,81,81,33,40,52,39,29,82,82,82,82,33,288,276,92,106,83,83,83,83,33,42,41,54,55,84,84,84,84,33,44,57,58,45,85,85,85,85,33,193,181,17,25,86,86,86,86,33,298,306,122,113,87,87,87,87,33,62,48,36,47,88,88,88,88,33,41,49,64,54,89,89,89,89,33,56,43,50,65,90,90,90,90,33,52,67,51,39,91,91,91,91,33,89,100,256,271,92,92,92,92,33,53,42,55,69,93,93,93,93,33,315,309,125,134,94,94,94,94,33,57,73,74,58,95,95,95,95,32,56,72,86,96,96,96,32,86,99,87,97,97,97,32,87,73,57,98,98,98,32,57,44,33,99,99,99,32,33,23,15,100,100,100,32,15,7,1,101,101,101,32,1,0,6,102,102,102,32,6,11,4,103,103,103,32,6,4,5,104,104,104,32,15,1,6,105,105,105,32,57,33,15,106,106,106,32,86,87,57,107,107,107,32,56,86,57,108,108,108,32,57,15,6,109,109,109,32,6,5,14,110,110,110,32,6,14,22,111,111,111,32,43,56,57,112,112,112,32,6,22,32,113,113,113,32,32,43,57,114,114,114,32,57,6,32,115,115,115,33,76,62,47,60,116,116,116,116,33,49,63,78,64,117,117,117,117,33,72,56,65,80,118,118,118,118,33,207,193,25,35,119,119,119,119,33,67,82,66,51,120,120,120,120,33,68,53,69,84,121,121,121,121,33,262,249,70,79,122,122,122,122,33,73,87,88,74,123,123,123,123,33,63,77,91,78,124,124,124,124,33,318,315,134,138,125,125,125,125,33,86,72,80,93,126,126,126,126,33,82,95,81,66,127,127,127,127,33,83,68,84,97,128,128,128,128,32,256,100,88,129,129,129,32,256,88,87,130,130,130,32,101,102,255,130,130,130,32,256,87,99,131,131,131,32,99,101,255,132,132,132,32,99,255,256,133,133,133,33,77,90,105,91,134,134,134,134,33,270,284,98,85,135,135,135,135,33,99,86,93,101,136,136,136,136,33,95,110,94,81,137,137,137,137,33,96,83,97,112,138,138,138,138,33,250,270,85,71,139,139,139,139,33,284,298,113,98,140,140,140,140,33,249,250,71,70,141,141,141,141,33,102,109,272,255,142,142,142,142,33,90,103,115,105,143,143,143,143,33,306,311,132,122,144,144,144,144,33,110,117,107,94,145,145,145,145,33,109,108,280,272,146,146,146,146,33,111,96,112,121,147,147,147,147,33,181,169,9,17,148,148,148,148,33,103,114,124,115,149,149,149,149,33,224,207,35,46,150,150,150,150,33,310,304,136,137,151,151,151,151,33,117,127,118,107,152,152,152,152,32,119,118,127,153,153,153,32,128,129,130,129,129,129,32,295,119,127,154,154,154,32,128,130,294,155,155,155,32,295,127,128,156,156,156,32,128,294,295,157,157,157,33,108,119,295,280,158,158,158,158,33,120,111,121,131,159,159,159,159,33,133,124,114,123,160,160,160,160,33,304,294,130,136,161,161,161,161,32,111,120,126,162,162,162,32,126,128,127,163,163,163,32,127,117,110,164,164,164,32,110,95,82,165,165,165,32,82,67,52,166,166,166,32,52,40,31,167,167,167,32,31,30,37,168,168,168,32,37,48,62,169,169,169,32,62,76,104,170,170,170,32,104,123,114,171,171,171,32,104,114,103,172,172,172,32,37,62,104,173,173,173,32,52,31,37,174,174,174,32,110,82,52,175,175,175,32,126,127,110,176,176,176,32,111,126,110,177,177,177,32,110,52,37,178,178,178,32,37,104,103,179,179,179,32,37,103,90,180,180,180,32,96,111,110,181,181,181,32,83,96,110,182,182,182,32,37,90,77,183,183,183,32,37,77,63,184,184,184,32,83,110,37,185,185,185,32,68,83,37,186,186,186,32,37,63,49,187,187,187,32,37,49,41,188,188,188,32,53,68,37,189,189,189,32,37,41,42,190,190,190,32,37,42,53,191,191,191,33,126,120,131,135,192,192,192,192,33,128,126,135,129,193,193,193,193,33,317,318,138,140,194,194,194,194,33,271,257,75,89,195,195,195,195,33,301,288,106,116,196,196,196,196,33,239,224,46,59,197,197,197,197,33,316,317,140,142,198,198,198,198,33,311,310,137,132,199,199,199,199,33,143,146,145,144,0,0,0,0,33,144,145,151,150,200,200,200,200,33,148,156,155,147,2,2,2,2,33,150,151,159,158,3,3,3,3,33,161,154,147,155,4,4,4,4,33,157,162,156,148,5,5,5,5,33,158,159,167,166,6,6,6,6,32,145,146,153,201,201,201,32,153,152,160,202,202,202,32,160,168,180,203,203,203,32,180,192,206,204,204,204,32,223,238,252,205,205,205,32,180,206,223,206,206,206,32,153,160,180,207,207,207,32,151,145,153,208,208,208,32,159,151,153,209,209,209,32,180,223,252,210,210,210,32,252,237,222,211,211,211,32,222,205,191,212,212,212,32,252,222,191,213,213,213,32,159,153,180,214,214,214,32,167,159,180,215,215,215,32,180,252,191,216,216,216,32,179,167,180,217,217,217,32,180,191,179,218,218,218,33,309,287,275,301,24,24,24,24,33,165,173,162,157,25,25,25,25,33,257,223,206,239,26,26,26,26,33,175,163,164,176,219,219,219,219,33,166,167,179,178,28,28,28,28,32,303,305,297,220,220,220,32,292,293,303,221,221,221,32,296,302,292,221,221,221,32,268,282,296,222,222,222,32,233,247,268,223,223,223,32,202,217,233,221,221,221,32,212,201,202,224,224,224,32,241,227,212,225,225,225,32,274,260,241,221,221,221,32,299,286,274,221,221,221,32,313,308,299,221,221,221,32,312,314,313,221,221,221,32,307,312,313,221,221,221,32,313,299,274,215,215,215,32,274,241,212,226,226,226,32,212,202,233,227,227,227,32,233,268,296,228,228,228,32,296,292,303,229,229,229,32,296,303,297,230,230,230,32,307,313,274,215,215,215,32,300,307,274,215,215,215,32,233,296,297,231,231,231,32,233,297,283,232,232,232,32,287,300,274,221,221,221,32,275,287,274,233,233,233,32,233,283,269,234,234,234,32,233,269,248,235,235,235,32,275,274,212,236,236,236,32,261,275,212,237,237,237,32,233,248,234,238,238,238,32,233,234,219,221,221,221,32,242,261,212,239,239,239,32,228,242,212,215,215,215,32,212,233,219,240,240,240,32,218,228,212,233,233,233,32,219,218,212,241,241,241,33,183,171,163,175,242,242,242,242,33,177,184,173,165,52,52,52,52,32,194,208,209,221,221,221,32,172,161,155,215,215,215,32,194,209,172,243,243,243,32,182,194,172,244,244,244,32,172,155,156,221,221,221,32,156,162,173,245,245,245,32,173,184,197,246,246,246,32,197,213,229,247,247,247,32,229,243,253,221,221,221,32,253,254,265,248,248,248,32,264,279,278,249,249,249,32,229,253,265,229,229,229,32,264,278,263,250,250,250,32,229,265,264,251,251,251,32,173,197,229,252,252,252,32,172,156,173,253,253,253,32,171,182,172,254,254,254,32,163,171,172,255,255,255,32,172,173,229,256,256,256,32,264,263,244,221,221,221,32,172,229,264,257,257,257,32,164,163,172,258,258,258,32,174,164,172,259,259,259,32,172,264,244,260,260,260,32,172,244,230,261,261,261,32,185,174,172,262,262,262,32,198,185,172,263,263,263,32,172,230,214,264,264,264,32,198,172,214,265,265,265,33,176,164,174,186,76,76,76,76,33,276,242,228,262,266,266,266,266,33,178,179,191,190,78,78,78,78,33,152,153,170,169,267,267,267,267,33,195,182,171,183,80,80,80,80,33,189,197,184,177,81,81,81,81,33,186,174,185,199,82,82,82,82,33,288,261,242,276,268,268,268,268,33,188,202,201,187,269,269,269,269,33,190,191,205,204,85,85,85,85,33,193,168,160,181,86,86,86,86,33,298,269,283,306,87,87,87,87,33,210,194,182,195,88,88,88,88,33,187,201,212,196,89,89,89,89,33,203,213,197,189,90,90,90,90,33,199,185,198,215,91,91,91,91,33,238,271,256,252,92,92,92,92,33,200,217,202,188,270,270,270,270,33,315,300,287,309,94,94,94,94,33,204,205,222,221,95,95,95,95,32,235,220,203,271,271,271,32,236,251,235,272,272,272,32,204,221,236,273,273,273,32,178,190,204,274,274,274,32,158,166,178,275,275,275,32,144,150,158,276,276,276,32,149,143,144,277,277,277,32,147,154,149,278,278,278,32,148,147,149,279,279,279,32,149,144,158,280,280,280,32,158,178,204,281,281,281,32,204,236,235,282,282,282,32,204,235,203,283,283,283,32,149,158,204,284,284,284,32,157,148,149,285,285,285,32,165,157,149,286,286,286,32,204,203,189,287,287,287,32,177,165,149,288,288,288,32,204,189,177,289,289,289,32,177,149,204,290,290,290,33,225,208,194,210,291,291,291,291,33,196,212,227,211,292,292,292,292,33,220,229,213,203,118,118,118,118,33,207,180,168,193,119,119,119,119,33,215,198,214,231,120,120,120,120,33,216,233,217,200,121,121,121,121,33,262,228,218,249,122,122,122,122,33,221,222,237,236,123,123,123,123,33,211,227,241,226,293,293,293,293,33,318,307,300,315,125,125,125,125,33,235,243,229,220,294,294,294,294,33,231,214,230,245,127,127,127,127,33,232,247,233,216,295,295,295,295,32,237,252,256,129,129,129,32,255,254,253,130,130,130,32,255,253,251,132,132,132,32,236,237,256,155,155,155,32,255,251,236,296,296,296,32,256,255,236,297,297,297,33,226,241,260,240,134,134,134,134,33,270,234,248,284,135,135,135,135,33,251,253,243,235,136,136,136,136,33,245,230,244,266,137,137,137,137,33,246,268,247,232,138,138,138,138,33,250,219,234,270,139,139,139,139,33,284,248,269,298,140,140,140,140,33,249,218,219,250,298,298,298,298,33,254,255,272,265,299,299,299,299,33,240,260,274,258,143,143,143,143,33,306,283,297,311,144,144,144,144,33,266,244,263,277,145,145,145,145,33,265,272,280,264,146,146,146,146,33,267,282,268,246,147,147,147,147,33,181,160,152,169,148,148,148,148,33,258,274,286,273,149,149,149,149,33,224,192,180,207,150,150,150,150,33,310,305,303,304,151,151,151,151,33,277,263,278,290,161,161,161,161,32,290,278,279,300,300,300,32,294,293,292,155,155,155,32,294,292,291,129,129,129,32,290,279,295,154,154,154,32,294,291,290,129,129,129,32,295,294,290,301,301,301,33,264,280,295,279,158,158,158,158,33,281,296,282,267,302,302,302,302,33,299,285,273,286,160,160,160,160,33,304,303,293,294,161,161,161,161,32,273,285,259,303,303,303,32,259,225,210,304,304,304,32,210,195,183,305,305,305,32,183,175,176,306,306,306,32,176,186,199,307,307,307,32,199,215,231,308,308,308,32,231,245,266,309,309,309,32,266,277,290,310,310,310,32,290,291,289,311,311,311,32,289,281,267,312,312,312,32,290,289,267,313,313,313,32,231,266,290,314,314,314,32,176,199,231,315,315,315,32,210,183,176,316,316,316,32,273,259,210,317,317,317,32,258,273,210,318,318,318,32,210,176,231,319,319,319,32,231,290,267,320,320,320,32,231,267,246,321,321,321,32,240,258,210,322,322,322,32,226,240,210,323,323,323,32,231,246,232,324,324,324,32,231,232,216,325,325,325,32,211,226,210,326,326,326,32,196,211,210,327,327,327,32,210,231,216,328,328,328,32,210,216,200,329,329,329,32,187,196,210,330,330,330,32,210,200,188,331,331,331,32,188,187,210,332,332,332,33,289,302,296,281,333,333,333,333,33,291,292,302,289,334,334,334,334,33,317,312,307,318,194,194,194,194,33,271,238,223,257,195,195,195,195,33,301,275,261,288,196,196,196,196,33,239,206,192,224,197,197,197,197,33,316,314,312,317,335,335,335,335,33,311,297,305,310,336,336,336,336],\"vertices\":[90.5878,1,0.820389,99.8345,1,4.91922,99.8345,4,4.91922,90.5878,4,0.820389,86.2945,1,7.66806,96.413,1,12.1533,89.9301,1,1.11191,110.071,1,10.0721,110.071,4,10.0721,100.476,4,3.56284,92.4385,4,0.0000305176,79.6142,1,5.09113,86.2945,4,7.66806,96.413,4,12.1533,106.299,1,17.1296,120.043,1,15.7211,120.043,4,15.7211,110.779,4,8.74879,79.6142,4,5.09113,106.299,4,17.1296,79.0213,4,25.2271,88.287,4,29.3342,115.929,1,22.5849,129.726,1,21.8525,129.726,4,21.8525,120.815,4,14.4341,69.5653,4,21.5794,79.1685,4,5.26306,115.929,4,22.5849,97.3398,4,33.8911,79.0213,1,25.2271,88.287,1,29.3342,125.28,1,28.5063,139.096,1,28.4518,139.096,4,28.4518,130.559,4,20.6049,59.9418,4,18.4002,69.5653,1,21.5794,125.28,4,28.5063,106.158,4,38.8867,97.3398,1,33.8911,75.9589,1,32.6203,84.8654,1,36.5683,134.329,1,34.8793,148.131,1,35.5027,148.131,4,35.5027,139.99,4,27.2466,50.1738,4,15.697,59.9418,1,18.4002,66.8694,1,29.114,134.329,4,34.8793,114.721,4,44.3089,106.158,1,38.8867,93.5675,1,40.9486,75.9589,4,32.6203,84.8654,4,36.5683,143.054,1,41.6887,156.809,1,42.9886,156.809,4,42.9886,149.083,4,34.3428,45.2417,4,14.5895,45.8457,4,14.4847,50.1738,1,15.697,57.6188,1,26.058,66.8694,4,29.114,143.054,4,41.6887,123.007,4,50.1448,114.721,1,44.3089,102.044,1,45.7506,93.5675,4,40.9486,75.3847,4,34.0065,84.2239,4,37.9247,151.435,1,48.9179,158.745,1,44.527,158.745,4,44.527,157.817,4,41.8768,45.2417,1,14.5895,48.2293,1,23.4596,57.6188,4,26.058,66.3639,4,30.5268,151.435,4,48.9179,130.997,4,56.3803,123.007,1,50.1448,110.275,1,50.9627,102.044,4,45.7506,92.8602,4,42.2719,153.087,1,50.1855,164.932,1,50.7142,164.932,4,50.7142,159.806,4,43.466,38.7237,1,21.325,48.2293,4,23.4596,57.1832,4,27.4939,153.087,4,50.1855,138.671,4,63.0002,130.997,1,56.3803,118.24,1,56.5724,110.275,4,50.9627,101.273,4,47.0376,159.274,1,56.3727,165.993,4,49.6532,159.274,4,56.3727,157.154,4,58.492,29.1247,1,19.6595,34.4812,1,16.4566,38.7237,4,21.325,47.8648,4,24.9151,139.648,4,63.6245,140.537,4,62.3811,151.851,4,51.0674,138.671,1,63.0002,125.92,1,62.5662,118.24,4,56.5724,109.441,4,52.2103,19.4556,1,18.4668,29.1247,4,19.6595,38.431,4,22.7966,139.648,1,63.6245,145.835,4,69.8117,147.962,4,67.6844,133.297,1,68.9296,125.92,4,62.5662,117.346,4,57.7776,17.1889,1,18.2996,19.4556,4,18.4668,28.9046,4,21.1436,133.989,1,69.2831,145.835,1,69.8117,140.176,1,75.4703,140.176,4,75.4703,139.115,4,76.5312,133.297,4,68.9296,124.969,4,63.7261,17.1889,4,18.2996,19.3085,4,19.9601,133.989,4,69.2831,132.928,4,70.3441,132.29,4,70.0414,9.66609,4,19.2487,11.5305,4,18.717,0.249969,4,19.0115,8.99995,4,19,0.249969,4,19,90.5878,-1,0.820389,99.8345,-1,4.91922,99.8345,-4,4.91922,90.5878,-4,0.820389,86.2945,-1,7.66806,96.413,-1,12.1533,89.9301,-1,1.11191,110.071,-1,10.0721,110.071,-4,10.0721,100.476,-4,3.56284,92.4385,-4,0.0000305176,79.6142,-1,5.09113,86.2945,-4,7.66806,96.413,-4,12.1533,106.299,-0.999999,17.1296,120.043,-0.999999,15.7211,120.043,-4,15.7211,110.779,-4,8.74879,79.6142,-4,5.09113,106.299,-4,17.1296,79.0213,-4,25.2271,88.287,-4,29.3342,115.929,-0.999999,22.5849,129.726,-0.999999,21.8525,129.726,-4,21.8525,120.815,-4,14.4341,100.476,1.55736e-7,3.56284,92.4385,9.09495e-13,0.0000305176,69.5653,-4,21.5794,79.1685,-4,5.26306,115.929,-4,22.5849,97.3398,-4,33.8911,79.0213,-0.999999,25.2271,88.287,-0.999999,29.3342,125.28,-0.999999,28.5063,139.096,-0.999999,28.4518,139.096,-4,28.4518,130.559,-4,20.6049,110.779,3.82422e-7,8.74879,59.9418,-4,18.4002,69.5653,-0.999999,21.5794,125.28,-4,28.5063,106.158,-4,38.8867,97.3398,-0.999999,33.8911,75.9589,-0.999999,32.6203,84.8654,-0.999998,36.5683,134.329,-0.999998,34.8793,148.131,-0.999998,35.5027,148.131,-4,35.5027,139.99,-4,27.2466,120.815,6.30934e-7,14.4341,50.1738,-4,15.697,59.9418,-0.999999,18.4002,66.8694,-0.999999,29.114,134.329,-4,34.8793,114.721,-4,44.3089,106.158,-0.999998,38.8867,93.5675,-0.999998,40.9486,75.9589,-4,32.6203,84.8654,-4,36.5683,143.054,-0.999998,41.6887,156.809,-0.999998,42.9886,156.809,-4,42.9886,149.083,-4,34.3428,130.559,9.0067e-7,20.6049,45.2417,-4,14.5895,45.8457,-4,14.4847,50.1738,-0.999999,15.697,57.6188,-0.999999,26.058,66.8694,-4,29.114,143.054,-4,41.6887,123.007,-4,50.1448,114.721,-0.999998,44.3089,102.044,-0.999998,45.7506,93.5675,-4,40.9486,75.3847,-4,34.0065,84.2239,-4,37.9247,151.435,-0.999998,48.9179,158.745,-0.999998,44.527,158.745,-4,44.527,157.817,-4,41.8768,139.99,0.00000119099,27.2466,45.2417,-0.999999,14.5895,48.2293,-0.999999,23.4596,57.6188,-4,26.058,66.3639,-4,30.5268,151.435,-4,48.9179,130.997,-4,56.3803,123.007,-0.999998,50.1448,110.275,-0.999998,50.9627,102.044,-4,45.7506,92.8602,-4,42.2719,153.087,-0.999998,50.1855,164.932,-0.999998,50.7142,164.932,-4,50.7142,159.806,-4,43.466,149.083,0.00000150117,34.3428,38.7237,-0.999999,21.325,48.2293,-4,23.4596,57.1832,-4,27.4939,153.087,-4,50.1855,138.671,-4,63.0002,130.997,-0.999998,56.3803,118.24,-0.999997,56.5724,110.275,-4,50.9627,101.273,-4,47.0376,75.3847,0.00000148647,34.0065,84.2239,0.00000165774,37.9247,159.274,-0.999998,56.3727,165.993,-4,49.6532,159.274,-4,56.3727,157.154,-4,58.492,157.154,0.00000255677,58.492,165.993,0.00000217041,49.6532,157.817,0.00000183049,41.8768,29.1247,-0.999999,19.6595,34.4812,-0.999999,16.4566,38.7237,-4,21.325,47.8648,-4,24.9151,66.3639,0.00000133437,30.5268,139.648,-4,63.6245,140.537,-4,62.3811,151.851,-4,51.0674,138.671,-0.999997,63.0002,125.92,-0.999997,62.5662,118.24,-4,56.5724,109.441,-4,52.2103,92.8602,0.00000184776,42.2719,159.806,0.00000189996,43.466,151.851,0.00000223223,51.0674,19.4556,-0.999999,18.4668,29.1247,-4,19.6595,38.431,-4,22.7966,57.1832,0.00000120179,27.4939,139.648,-0.999997,63.6245,145.835,-4,69.8117,147.962,-4,67.6844,140.537,0.00000272676,62.3811,133.297,-0.999997,68.9296,125.92,-4,62.5662,117.346,-4,57.7776,101.273,0.00000205608,47.0376,17.1889,-0.999999,18.2996,19.4556,-4,18.4668,28.9046,-4,21.1436,47.8648,0.00000108907,24.9151,133.989,-0.999997,69.2831,145.835,-0.999997,69.8117,140.176,-0.999997,75.4703,140.176,-4,75.4703,139.115,-4,76.5312,139.115,0.00000334529,76.5312,147.962,0.00000295858,67.6844,133.297,-4,68.9296,124.969,-4,63.7261,109.441,0.00000228218,52.2103,17.1889,-4,18.2996,19.3085,-4,19.9601,38.431,9.96472e-7,22.7966,133.989,-4,69.2831,132.928,-4,70.3441,132.928,0.00000307484,70.3441,132.29,-4,70.0414,117.346,0.00000252554,57.7776,9.66609,-4,19.2487,11.5305,-4,18.717,28.9046,9.24217e-7,21.1436,132.29,0.00000306161,70.0414,124.969,0.00000278555,63.7261,0.249969,-4,19.0115,8.99995,-4,19,0.249969,-4,19,19.3085,8.72481e-7,19.9601,0.249969,8.30518e-7,19,0.249969,8.31019e-7,19.0115,9.66609,8.41389e-7,19.2487],\"metadata\":{\"generator\":\"io_three\",\"normals\":337,\"uvs\":0,\"vertices\":319,\"version\":3,\"faces\":446,\"type\":\"Geometry\"}},\"double_turnout_L_a\":{\"uvs\":[],\"normals\":[0.817583,0,0.575811,-0.788345,0,-0.615233,-0.757206,0,-0.653176,-0.335866,0,-0.94191,-0.817583,0,-0.575811,-0.99729,0,-0.0735666,-0.724245,0,-0.689543,2.64815e-7,-1,5.49165e-8,-6.90791e-9,-1,4.65523e-8,-2.42485e-7,-1,-1.82879e-8,-2.39521e-7,-1,-4.19666e-8,-1.50905e-8,-1,3.1908e-8,1.84379e-7,-1,1.58523e-7,-2.10281e-8,-1,2.8349e-8,1.57806e-7,-1,1.82726e-7,1.3914e-7,-1,1.97318e-7,1.19136e-7,-1,2.10015e-7,-2.01835e-8,-1,1.20971e-8,-1.18412e-7,-1,-2.09086e-7,-3.11503e-8,-1,-4.80728e-8,0,-1,0,-1.29523e-9,-1,6.41097e-8,4.53958e-9,-1,5.0876e-8,1.12663e-8,-1,6.45684e-8,-2.08245e-8,-1,2.08232e-8,2.85733e-8,-1,6.51361e-8,4.07319e-8,-1,5.83103e-8,5.01753e-8,-1,5.50199e-8,-7.95966e-14,-1,4.17441e-8,1.07998e-8,-1,3.79579e-8,1.67246e-8,-1,4.83661e-8,1.32482e-8,-1,5.48962e-8,8.59936e-9,-1,6.0577e-8,-3.18313e-10,-1,5.44304e-8,1.14129e-9,-1,5.00023e-8,-4.79903e-9,-1,4.8724e-8,-3.59923e-9,-1,3.65426e-8,3.22752e-9,-1,4.87787e-8,6.29969e-9,-1,5.03313e-8,1.09957e-8,-1,5.1584e-8,-2.08443e-8,-1,3.29419e-8,-1.09335e-9,-1,4.26229e-8,-2.47385e-7,-1,-5.27902e-7,4.39742e-9,-1,4.46266e-8,-1.10247e-7,-1,2.02751e-8,1.84122e-8,-1,9.10099e-8,4.9978e-9,-1,5.84727e-8,2.52045e-8,-1,4.69866e-8,-4.11632e-8,-1,3.65816e-8,7.72166e-10,-1,4.69628e-8,-6.27018e-10,-1,4.16109e-8,-2.93103e-9,-1,3.88541e-8,-3.99951e-9,-1,3.90835e-8,-5.88044e-10,-1,3.90244e-8,5.42744e-10,-1,3.80964e-8,-4.34436e-9,-1,3.97286e-8,-3.83056e-9,-1,4.10239e-8,-1.75769e-8,-1,3.47751e-8,2.04086e-8,-1,5.3221e-8,-4.11908e-9,-1,4.06431e-8,-9.79725e-8,-1,-2.41019e-8,-3.06404e-8,-1,2.20482e-8,-3.59091e-8,-1,1.85403e-8,-0.844851,0,-0.535001,0.788346,0,0.615233,-0.724245,0,-0.689543,-0.689538,0,-0.72425,0.724245,0,0.689543,0.757206,0,0.653176,0.870086,0,0.4929,0.615228,0,0.788349,-0.870086,0,-0.4929,0.817583,0,0.575811,-0.653171,0,-0.75721,0.724245,0,0.689543,-9.34612e-8,1,-0.00000126703,0,1,0,1.54232e-7,1,8.8888e-7,-1.09276e-7,1,-4.86633e-7,-1.56448e-7,1,-4.73578e-7,2.2129e-8,1,-1.04676e-8,-2.45845e-7,1,-4.33978e-7,1.96621e-8,1,-1.4583e-8,3.62056e-7,1,3.44791e-7,-3.44784e-7,1,-3.62054e-7,1.45839e-8,1,-1.96613e-8,4.46558e-7,1,2.24848e-7,2.0932e-8,1,-4.42592e-8,-4.5715e-7,1,-2.02572e-7,1.18983e-8,1,-4.74917e-8,-4.87833e-7,1,-1.09486e-7,-2.40828e-8,1,-5.08545e-8,0,1,-5.06407e-8,1.07305e-8,1,-4.86604e-8,-1.27163e-7,1,-5.59845e-8,-1.069e-7,1,-7.72491e-8,-8.97781e-8,1,-9.66217e-8,1.15849e-7,1,5.54421e-8,-5.54422e-8,1,-1.1585e-7,7.50059e-8,1,1.01332e-7,1.17271e-8,1,-3.55716e-9,0,1,0,1.93471e-10,1,-2.49258e-7,2.26808e-7,1,-2.08945e-8,2.423e-7,1,-1.98052e-8,-1.31531e-8,1,-1.87104e-7,0,1,0,4.81215e-9,1,-2.41922e-8,9.6243e-9,1,-4.83844e-8,2.41925e-8,1,-4.81213e-9,8.21417e-8,1,-1.99037e-8,0.00000353509,1,9.27108e-7,-3.22446e-8,1,-1.48513e-7,9.47913e-7,1,0.00000342534,2.415e-7,1,2.78431e-8,9.43948e-9,1,-2.27886e-8,-5.05121e-8,1,-2.31515e-7,1.88789e-8,1,-4.55771e-8,2.17337e-7,1,8.17922e-8,2.27887e-8,1,-9.43934e-9,2.30975e-8,1,-8.95816e-9,-1.72803e-7,1,-1.41e-7,2.84558e-8,1,-4.05613e-8,-8.696e-8,1,-2.01687e-7,-9.47057e-8,1,-2.17208e-7,-1.20582e-7,1,-1.05545e-7,-1.02544e-7,1,-1.32541e-7,-6.45257e-8,1,-1.4799e-7,-7.10128e-8,1,-1.43656e-7,-4.13619e-8,1,-7.3578e-8,-0.00000275306,1,-0.0000021798,-1.19845e-7,1,-1.94325e-7,-8.95459e-9,1,-5.15552e-8,2.12471e-7,1,1.18149e-7,1.74418e-8,1,-1.74416e-8,1.71158e-8,1,-1.79106e-8,1.74418e-8,1,-1.74417e-8,0.975702,0,0.219104,0.893223,0,0.449614,-0.893223,0,-0.449614,0.844852,0,0.535,-0.788345,0,-0.615233,-0.615228,0,-0.788349,0.534995,0,0.844856,0.689538,0,0.72425,-0.757207,0,-0.653175,1.67557e-8,-1,4.26887e-8,-6.0678e-9,-1,4.09053e-8,-1.00492e-8,-1,4.01132e-8,-1.39316e-8,-1,3.89354e-8,-1.76804e-8,-1,3.73826e-8,-2.12578e-8,-1,3.54706e-8,-2.46338e-8,-1,3.3215e-8,6.10207e-7,-1,5.80969e-7,-3.06403e-8,-1,2.77713e-8,4.85154e-7,-1,6.88869e-7,0,-1,0,1.09658e-7,-1,1.82568e-7,1.43166e-7,-1,1.57664e-7,-1.95172e-8,-1,3.65139e-8,-1.20187e-8,-1,3.96199e-8,5.18687e-10,-1,4.18823e-8,0,-1,4.25459e-8,-9.70371e-9,-1,4.10033e-8,-3.46048e-8,-1,2.31221e-8,3.14073e-7,-1,4.02451e-7,-1.75855e-8,-1,4.00894e-8,-9.36275e-9,-1,4.07665e-8,-4.3405e-7,-1,-4.79947e-7,-2.86947e-8,-1,3.04335e-8,-8.11942e-9,-1,4.08189e-8,-8.11941e-9,-1,4.08188e-8,-2.9429e-8,-1,2.94288e-8,-6.94966e-9,-1,4.12467e-8,-1.20189e-8,-1,3.96198e-8,-4.16994e-7,-1,-3.04757e-7,-5.19359e-7,-1,-3.86059e-7,-1.71361e-8,-1,3.81566e-8,-1.59269e-8,-1,3.84505e-8,-2.22064e-8,-1,3.54464e-8,-2.31222e-8,-1,3.46045e-8,-1.59269e-8,-1,3.84505e-8,-1.48646e-8,-1,3.90974e-8,-2.31222e-8,-1,3.46044e-8,-1.95178e-8,-1,3.65136e-8,-2.42523e-8,-1,3.40796e-8,-0.914208,0,-0.405244,0.870085,0,0.492901,-0.817582,0,-0.575811,-0.817582,0,-0.575812,0.844852,0,0.535001,-0.534994,0,-0.844856,-0.575806,0,-0.817586,0.00000184955,0,-1,0.653171,0,0.757211,-0.724245,0,-0.689543,0.757206,0,0.653176,-8.40709e-14,-1,4.40906e-8,1.6988e-8,-1,4.29723e-8,-2.16498e-7,-1,1.52185e-8,-1.01147e-8,-1,4.03708e-8,-1.40209e-8,-1,3.91857e-8,-2.07143e-7,-1,-5.76882e-8,1.63042e-7,-1,1.40181e-7,1.48526e-7,-1,1.55494e-7,-2.0963e-8,-1,2.31272e-8,-2.31284e-8,-1,2.09618e-8,1.05353e-7,-1,1.85719e-7,5.10416e-15,-1,4.18009e-8,-1.61443e-9,-1,3.04086e-8,1.14855e-8,-1,5.91526e-8,1.94998e-8,-1,5.98008e-8,-1.71873e-8,-1,3.2155e-8,-1.20958e-8,-1,3.98745e-8,-5.27506e-8,-1,3.95083e-8,-1.28895e-9,-1,4.31046e-8,-7.9189e-10,-1,4.33113e-8,5.81824e-9,-1,4.53087e-8,-8.5816e-9,-1,3.67548e-8,-2.25179e-9,-1,4.24136e-8,-3.82969e-8,-1,-2.02133e-8,4.93471e-9,-1,4.51325e-8,1.76564e-8,-1,4.679e-8,2.27777e-8,-1,8.84581e-8,-1.50659e-8,-1,1.57083e-8,4.94543e-9,-1,4.5266e-8,7.01248e-10,-1,4.48959e-8,-1.89665e-9,-1,4.72708e-8,-2.30523e-9,-1,4.44392e-8,-1.46019e-9,-1,4.48903e-8,1.54363e-8,-1,4.0587e-8,-1.27083e-9,-1,4.34048e-8,1.27469e-9,-1,4.37722e-8,1.07534e-8,-1,5.18923e-8,1.22391e-8,-1,5.43933e-8,6.20472e-9,-1,4.58292e-8,1.67326e-8,-1,5.13058e-8,-1.18615e-8,-1,3.0417e-8,-1.27654e-7,-1,-2.98425e-8,1.23257e-8,-1,5.07248e-8,-0.788345,0,-0.615233,-0.932992,0,-0.359897,0.986394,0,0.164401,0.893223,0,0.449613,-0.844852,0,-0.535,0.788346,0,0.615232,-0.534995,0,-0.844855,0.615228,0,0.788349,-0.689538,0,-0.72425,0.757206,0,0.653176,-0.949527,0,-0.313684,0.914208,0,0.405245,-0.870085,0,-0.492901,0.817582,0,0.575812,0.575807,0,0.817586,-0.653171,0,-0.757211,0.724245,0,0.689543,-0.914208,0,-0.405244,0.914208,0,0.405244,-0.963776,0,-0.266713,0.932992,0,0.359896,-0.893223,0,-0.449613,0.844853,0,0.534999,0.534995,0,0.844855,-0.575806,0,-0.817586,-0.615228,0,-0.788349,0.689537,0,0.72425,0.999685,0,0.0250853,-0.932992,0,-0.359897,0.963776,0,0.266714,-0.975701,0,-0.219105,0.00000509111,0,-1,0,0,-1,0.00000190677,0,-1,0,0,-1,0,0,-1,0,0,-1,0.949527,0,0.313686,-0.914208,0,-0.405246,0.870085,0,0.492902,-0.405238,0,-0.914211,0.492897,0,0.870088,-0.575807,0,-0.817586,0.653171,0,0.75721,0.653171,0,0.757211,-0.949527,0,-0.313684,0.992479,0,0.122413,-0.985277,0,-0.170963,0.963776,0,0.266712,-0.932993,0,-0.359895,0.893224,0,0.449613,-1,0,-0.00000259767,-0.534994,0,-0.844856,-4.22213e-9,-1,4.28882e-8,-8.4075e-9,-1,4.22675e-8,-1.25104e-8,-1,4.12398e-8,-1.64913e-8,-1,3.98154e-8,-2.03169e-8,-1,3.80059e-8,-2.39445e-8,-1,3.58314e-8,-6.92145e-7,-1,-5.40157e-7,-3.04745e-8,-1,3.04721e-8,-5.7348e-7,-1,-6.64827e-7,-5.05558e-7,-1,-7.17841e-7,-1.73282e-8,-1,1.28517e-8,-1.84425e-7,-1,-1.23479e-7,-2.21821e-8,-1,3.70089e-8,-1.45357e-8,-1,4.06254e-8,-6.33079e-9,-1,4.26805e-8,-2.2447e-13,-1,4.40907e-8,-1.04178e-7,-1,7.03449e-8,-1.0535e-8,-1,4.20569e-8,2.15974e-8,-1,6.32495e-8,8.08876e-10,-1,3.73068e-8,-8.6715e-8,-1,-2.24802e-7,-5.16308e-9,-1,4.34025e-8,0,-1,5.29819e-8,3.44713e-8,-1,4.91189e-8,9.47263e-8,-1,3.29801e-7,-1.96697e-8,-1,-3.90773e-8,0,-1,0,-2.30929e-9,-1,4.70057e-8,3.47299e-8,-1,1.56759e-7,-2.25314e-9,-1,4.71264e-8,-1.99837e-9,-1,4.74041e-8,1.24819e-8,-1,9.94311e-8,1.58945e-8,-1,2.03671e-8,-1.33467e-9,-1,4.79198e-8,1.2753e-10,-1,4.88516e-8,-2.08617e-9,-1,6.9612e-8,3.46102e-8,-1,3.63526e-8,3.27611e-9,-1,5.06312e-8,-3.47261e-7,-1,-1.33954e-7,-1.62893e-8,-1,4.94527e-8,-1.45922e-8,-1,4.95463e-8,1.46962e-7,-1,1.16608e-7,9.93709e-8,-1,9.28438e-8,-1.23256e-8,-1,5.00604e-8,1.43446e-7,-1,1.01027e-7,-7.57477e-8,-1,1.45436e-8,-4.12156e-8,-1,2.95881e-8,-4.90521e-8,-1,2.6285e-8,0.615228,0,0.78835,-6.09162e-15,1,-4.98878e-8,-2.10941e-8,1,-7.51124e-8,-4.50992e-8,1,-1.00057e-7,-5.46899e-8,1,-9.51552e-8,1.03357e-7,1,4.10789e-8,2.02336e-8,1,-3.02778e-8,1.11844e-7,1,1.55408e-8,1.59271e-8,1,-3.84504e-8,1.20801e-8,1,-3.98269e-8,8.11886e-9,1,-4.0819e-8,1.09786e-7,1,-3.36205e-8,8.11255e-14,1,-4.25459e-8,2.16342e-9,1,-4.40363e-8,-1.99142e-8,1,-4.63952e-8,1.40376e-8,1,-3.92331e-8,-3.321e-9,1,-4.60166e-8,-1.82907e-8,1,-5.87557e-8,-3.83265e-9,1,-4.97732e-8,-2.30665e-9,1,-4.39073e-8,2.03009e-9,1,-4.3881e-8,6.20909e-9,1,-3.65503e-8,-9.5129e-10,1,-4.45962e-8,2.11874e-9,1,-4.31268e-8,1.29841e-9,1,-4.31039e-8,-1.80561e-9,1,-4.60808e-8,-9.2068e-9,1,-5.1898e-8,2.08742e-9,1,-4.31515e-8,2.75333e-9,1,-4.32485e-8,-2.98445e-9,1,-4.6446e-8,1.47651e-8,1,-2.3542e-8,3.20189e-9,1,-4.34364e-8,3.29076e-9,1,-4.37912e-8,-1.61307e-9,1,-4.61505e-8,1.00801e-9,1,-4.18031e-8,9.05598e-9,1,-3.67094e-8,-7.92051e-9,1,-4.92321e-8,-1.03144e-9,1,-4.86231e-8,-1.90276e-9,1,-4.74483e-8,1.53072e-9,1,-4.34223e-8,-5.61906e-8,1,-6.61427e-8,-1.44543e-8,1,-4.73987e-8,2.91863e-8,1,-3.35414e-8,-1.31628e-9,1,-4.40716e-8,-0.992479,0,-0.122412,0.975701,0,0.219105,-0.949527,0,-0.313686,0.914207,0,0.405247,-0.492897,0,-0.870088,0.575807,0,0.817586,0.932992,0,0.359897,-0.757206,0,-0.653175,-0.975701,0,-0.219105,-0.073564,0,-0.99729,-0.99729,0,-0.0735675,0.985278,0,0.170963,-0.963776,0,-0.266712,0.932993,0,0.359894,-0.949526,0,-0.313688,-0.844853,0,-0.534999,-0.449608,0,-0.893226,0.534994,0,0.844856,0.575806,0,0.817586,-0.999685,0,-0.0250881,0,0,1,1.19599e-7,0,1,0,0,1,1.19599e-7,0,1,0,0,0,1.22107e-7,0,1,8.1066e-8,0,1,8.1066e-8,0,1,1.50664e-7,-7.43125e-7,1,1.33346e-7,0,1,8.1066e-8,0,1,0.999685,0,0.0251075,0.992479,0,0.122414,-0.975701,0,-0.219104,0.949526,0,0.313687,-0.893223,0,-0.449613,0.492897,0,0.870088,-0.405238,0,-0.914211,-1.10561e-14,1,-9.24431e-8,1.41089e-7,1,1.8254e-7,-2.35493e-7,1,-3.71787e-7,1.5966e-8,1,-1.44706e-8,3.46906e-7,1,2.70798e-7,2.56716e-8,1,-3.4615e-8,-3.59822e-7,1,-2.53354e-7,1.84253e-8,1,-3.89581e-8,1.45182e-8,1,-4.05765e-8,1.04727e-8,1,-4.18037e-8,6.32384e-9,1,-4.2629e-8,-1.83133e-8,1,-4.45506e-8,2.69736e-13,1,-5.29819e-8,0,1,-5.29819e-8,8.00739e-8,1,-3.96618e-8,-3.44713e-8,1,-4.91189e-8,6.86174e-14,1,-3.70996e-8,8.41807e-9,1,-4.23183e-8,1.65113e-8,1,-3.98633e-8,1.1226e-7,1,2.96034e-8,-5.85612e-8,1,-9.66992e-8,-1.36053e-8,1,-7.26036e-8,-1.49476e-9,1,-6.92393e-8,-1.06848e-8,1,-2.41047e-8,3.03622e-8,1,-7.77525e-9,-5.1033e-9,1,-4.88165e-8,4.55106e-9,1,-4.30875e-8,-3.49153e-8,1,-4.97516e-8,-6.81751e-8,1,-5.58132e-8,-2.84574e-9,1,-4.76098e-8,1.5256e-9,1,-4.92905e-8,-1.1898e-10,1,-4.79362e-8,9.5874e-9,1,-4.38301e-8,1.40886e-8,1,-4.53063e-8,-2.27471e-9,1,-4.75629e-8,-5.13188e-9,1,-4.81408e-8,1.37552e-8,1,-4.51306e-8,-5.26304e-9,1,-2.58646e-8,-9.04327e-9,1,-4.98244e-8,4.66555e-8,1,-1.79434e-8,1.74653e-9,1,-4.89719e-8,1.58434e-9,1,-4.98158e-8,-3.76029e-8,1,-7.36116e-8,-5.9997e-8,1,-8.96031e-8,9.0993e-10,1,-5.10597e-8,3.35151e-8,1,-9.46581e-9,1.44816e-7,1,6.2786e-8,-7.58106e-7,1,-6.21474e-7,-1.87856e-8,1,-6.47149e-8,6.00041e-8,1,1.01536e-8,4.29655e-9,1,-4.18441e-8,-7.32885e-8,1,-1.09161e-7,-0.986394,0,0.1644,0.99729,0,0.0735674,-0.870085,0,-0.492902,-0.963777,0,-0.26671,0,0,-1,0,0,-1,-0.999683,0,-0.0251615,-0.689537,0,-0.72425,0.99729,0,0.0735672,-0.985278,0,-0.170962,0.963777,0,0.266711,-0.932993,0,-0.359894,-0.914208,0,-0.405246,0.449608,0,0.893226,-0.359892,0,-0.932994,-0.615228,0,-0.788349,0.999683,0,0.0251866,-0.99729,0,-0.0735668,-0.992479,0,-0.122415,0.975701,0,0.219105,0.405238,0,0.914211,-0.313679,0,-0.949529,-0.999683,0,-0.0251908,0,1,-8.36017e-8,7.0764e-7,1,9.68878e-7,-2.43177e-7,1,-3.45203e-7,-2.75851e-7,1,-3.19714e-7,-3.05845e-7,1,-2.91124e-7,3.67394e-7,1,2.08186e-7,1.94947e-8,1,-3.64694e-8,1.58252e-8,1,-3.8205e-8,1.20035e-8,1,-3.95724e-8,8.06688e-9,1,-4.05584e-8,4.05373e-9,1,-4.11537e-8,0,1,-6.34024e-8,-1.56806e-7,1,-4.64812e-8,6.07505e-9,1,-4.09546e-8,1.39482e-8,1,-3.89825e-8,-7.17331e-8,1,-8.5232e-8,2.08542e-8,1,-2.30073e-8,3.84665e-8,1,-2.01721e-9,-5.76229e-8,1,-1.17947e-7,1.55991e-7,1,1.32258e-7,-1.55452e-7,1,-7.4046e-8,8.2378e-10,1,-4.18197e-8,-6.76787e-8,1,-1.40247e-7,1.54187e-8,1,-1.39748e-8,6.07586e-9,1,-4.09545e-8,1.13519e-8,1,-4.0258e-8,1.54187e-8,1,-1.39747e-8,2.16673e-7,1,1.48844e-7,1.01124e-8,1,-4.03713e-8,1.01124e-8,1,-4.03714e-8,2.08509e-8,1,-2.30102e-8,2.05246e-7,1,1.49574e-7,8.96675e-9,1,-4.08554e-8,1.3949e-8,1,-3.89822e-8,2.47923e-8,1,-3.34283e-8,2.47923e-8,1,-3.34283e-8,1.89877e-8,1,-3.72698e-8,1.77945e-8,1,-3.76227e-8,2.58925e-8,1,-3.28501e-8,1.77945e-8,1,-3.76226e-8,-2.58589e-7,1,-1.9723e-7,2.30475e-7,1,1.06654e-7,-6.44581e-9,1,-6.57334e-8,1.59537e-8,1,-7.54607e-9,7.9263e-8,1,9.21931e-8,9.26431e-8,1,8.04759e-8,2.17944e-8,1,-1.97531e-8,1.1051e-7,1,5.64933e-8,2.10281e-8,1,-2.8349e-8,1.22429e-7,1,2.8801e-8,1.24668e-7,1,1.66652e-8,1.38728e-8,1,-3.87723e-8,1.26961e-7,1,-1.36815e-8,-1.12054e-7,1,-6.12253e-8,-1.93607e-8,1,-4.27072e-8,8.38348e-14,1,-4.39668e-8,1.28802e-9,1,-4.28483e-8,2.89997e-8,1,-4.03017e-8,-1.62853e-8,1,-4.95631e-8,1.80476e-8,1,-3.37632e-8,-1.68343e-9,1,-4.51931e-8,2.61193e-9,1,-4.09179e-8,2.75302e-9,1,-3.54569e-8,9.15696e-10,1,-4.5324e-8,-5.64025e-9,1,-1.04081e-7,-5.35436e-9,1,-5.06249e-8,1.40361e-9,1,-4.26597e-8,7.08593e-9,1,-4.24735e-8,8.68737e-10,1,-4.30438e-8,-6.58791e-10,1,-4.35808e-8,3.04775e-9,1,-1.43516e-8,1.56235e-9,1,-4.02325e-8,-4.73035e-9,1,-4.48313e-8,-3.75926e-9,1,-4.47373e-8,1.35549e-9,1,-3.49056e-8,3.55533e-9,1,-4.17827e-8,-3.88568e-10,1,-4.45438e-8,1.47455e-9,1,-4.46162e-8,1.86604e-9,1,-4.1083e-8,-8.3016e-10,1,-4.24724e-8,-6.80193e-9,1,-4.19688e-8,-4.04005e-9,1,-4.86365e-8,1.58777e-9,1,-4.02352e-8,-1.60932e-7,1,-3.33736e-7,-2.09013e-10,1,-4.12019e-8,-2.36e-9,1,-4.35266e-8,3.19308e-8,1,1.61171e-8,2.96272e-9,1,-3.82944e-8,-9.74061e-9,1,-5.0106e-8,-1.56969e-8,1,-5.33896e-8,-6.71453e-9,1,-5.83264e-8,-4.31827e-9,1,-5.18401e-8,-7.78315e-10,1,-4.5447e-8,5.02208e-9,1,-4.26448e-8,-3.23987e-9,1,-3.88942e-8,-8.31566e-9,1,-4.75724e-8,4.3807e-9,1,-4.65147e-8,0.99729,0,0.0735664,0.985277,0,0.170963,-2.0932e-8,-1,4.42592e-8,8.42781e-7,-1,5.33687e-7,-2.91678e-8,-1,3.93226e-8,-7.55332e-7,-1,-6.51559e-7,6.51558e-7,-1,7.55341e-7,5.7441e-7,-1,8.15602e-7,4.91689e-7,-1,8.67956e-7,4.04227e-7,-1,9.11929e-7,-3.58992e-7,-1,-9.3066e-7,-2.26436e-8,-1,9.37954e-9,-2.03789e-8,-1,1.36166e-8,-1.73313e-8,-1,1.73302e-8,-2.27835e-7,-1,-1.0802e-7,-1.94823e-8,-1,4.49449e-8,-9.61205e-7,-1,-2.65999e-7,-9.55155e-9,-1,4.80187e-8,-4.78828e-9,-1,4.87248e-8,0,-1,5.02478e-8,-2.48474e-9,-1,5.05781e-8,-7.19144e-9,-1,4.84881e-8,-2.00106e-7,-1,-3.51206e-8,-2.42065e-9,-1,4.92734e-8,-1.31367e-9,-1,4.9529e-8,-7.19507e-9,-1,4.84876e-8,-1.31257e-8,-1,4.77768e-8,3.75769e-8,-1,3.20697e-7,-1.19867e-8,-1,4.78539e-8,9.97159e-8,-1,3.01847e-7,1.67921e-7,-1,4.35323e-7,4.3213e-7,-1,1.94699e-7,0.000006698,-1,0.00000263655,-2.26439e-8,-1,9.37887e-9,-1.89079e-7,-1,-4.26559e-7,0.00000262775,-1,0.00000105571,-2.43416e-8,-1,4.31556e-8,-4.35077e-8,-1,2.32552e-8,-2.32554e-8,-1,4.35071e-8,-1.90846e-7,-1,-2.41507e-7,0.00000381344,-1,0.00000611433,3.62262e-7,-1,2.86273e-7,-1.04361e-7,-1,-7.71256e-9,-2.68655e-7,-1,-3.81461e-7,-3.81348e-8,-1,3.12962e-8,-3.22917e-8,-1,3.75785e-8,-3.12963e-8,-1,3.81345e-8,-3.60725e-7,-1,-3.07362e-7,-0.00000525203,-1,-0.00000493228,1.99637e-7,-1,2.343e-7,0.359892,0,0.932994,0.992479,0,0.122415,0.313679,0,0.949529,-0.313679,0,-0.949529,-0.170958,0,-0.985278,-0.492897,0,-0.870088,0.266711,0,0.963776,-0.359892,0,-0.932994,0.689538,0,0.72425,-0.449609,0,-0.893226,0.788345,0,0.615233,-0.985277,0,-0.170963,-0.975701,0,-0.219105,0.2191,0,0.975702,-0.575807,0,-0.817586,0.170958,0,0.985278,0.122409,0,0.99248,-0.266711,0,-0.963776,-0.2191,0,-0.975702,0.949527,0,0.313684,-0.653171,0,-0.757211,-0.122409,0,-0.99248,-0.992479,0,-0.122414,0.985277,0,0.170963],\"metadata\":{\"generator\":\"io_three\",\"normals\":669,\"uvs\":0,\"vertices\":534,\"version\":3,\"faces\":808,\"type\":\"Geometry\"},\"vertices\":[188.753,4,-76.0101,181.657,4,-66.917,174.123,4,-58.183,195.395,4,-85.4404,187.548,4,-76.9039,180.497,4,-67.8688,166.17,4,-49.8293,173.011,4,-59.1907,201.566,4,-95.1853,194.147,4,-86.274,187.548,0.999997,-76.9039,180.497,0.999997,-67.8688,157.816,4,-41.876,165.109,4,-50.8903,173.011,0.999997,-59.1907,181.657,-4,-66.917,188.753,-4,-76.0101,207.251,4,-105.221,200.279,4,-95.9567,194.147,0.999996,-86.274,181.121,0.999996,-81.6709,174.311,0.999997,-72.9455,149.082,4,-34.3421,156.808,4,-42.9877,165.109,0.999998,-50.8903,174.123,-4,-58.183,167.082,0.999997,-64.5648,187.548,-4,-76.9039,180.497,-4,-67.8688,195.395,-4,-85.4404,212.437,3.99999,-115.524,205.928,4,-105.928,200.279,0.999996,-95.9567,187.494,0.999996,-90.7199,181.121,4,-81.6709,174.311,4,-72.9455,139.989,4,-27.2458,148.13,4,-35.5019,156.808,0.999998,-42.9877,166.17,-4,-49.8293,159.45,0.999998,-56.5489,173.011,-4,-59.1907,167.082,4,-64.5648,187.548,-1,-76.9039,180.497,-1,-67.8688,194.147,-4,-86.274,201.566,-4,-95.1853,217.111,3.99999,-126.069,211.081,3.99999,-116.166,205.928,0.999995,-105.928,193.415,0.999996,-100.071,187.494,4,-90.7199,165.855,4,-92.9927,159.62,4,-85.0027,130.558,4,-20.6042,139.095,4,-28.451,148.13,0.999998,-35.5019,157.816,-4,-41.876,151.434,0.999998,-48.9171,165.109,-4,-50.8903,159.45,4,-56.5489,173.011,-1,-59.1907,153,4,-77.3283,181.121,-1,-81.6709,174.311,-1,-72.9455,194.147,-1,-86.274,200.279,-4,-95.9567,207.251,-4,-105.221,221.263,3.99999,-136.83,215.725,3.99999,-126.643,211.081,0.999995,-116.166,198.87,0.999995,-109.701,193.415,4,-100.071,171.691,4,-101.279,165.855,0.999996,-92.9927,159.62,0.999996,-85.0027,128.025,4,-19,129.725,4,-21.8518,139.095,0.999999,-28.451,149.082,-4,-34.3421,143.053,0.999998,-41.6879,156.808,-4,-42.9877,151.434,4,-48.9171,165.109,-1,-50.8903,146.011,4,-69.988,167.082,-1,-64.5648,153,0.999997,-77.3283,174.311,-4,-72.9455,181.121,-4,-81.6709,187.494,-1,-90.7199,200.279,-1,-95.9567,205.928,-4,-105.928,212.437,-4.00001,-115.524,224.881,3.99999,-147.783,219.85,3.99999,-137.336,215.725,0.999994,-126.643,203.847,0.999995,-119.587,198.87,4,-109.701,177.113,4,-109.842,171.691,0.999996,-101.279,159.427,0.999996,-97.7597,153.434,0.999996,-90.0794,125.221,4,-19,129.725,0.999999,-21.8518,139.989,-4,-27.2458,134.328,0.999998,-34.8786,148.13,-4,-35.5019,143.053,4,-41.6879,156.808,-1,-42.9877,138.671,4,-62.9995,159.45,-1,-56.5489,146.011,0.999997,-69.988,167.082,-4,-64.5648,147.07,0.999996,-82.7024,165.855,-4,-92.9927,159.62,-4,-85.0027,187.494,-4,-90.7199,193.415,-1,-100.071,205.928,-1,-105.928,211.081,-4.00001,-116.166,217.111,-4.00001,-126.069,227.957,3.99999,-158.899,223.445,3.99999,-148.218,219.85,0.999994,-137.336,208.332,0.999994,-129.705,203.847,3.99999,-119.587,182.109,3.99999,-118.66,177.113,0.999995,-109.842,165.037,0.999995,-105.725,159.427,4,-97.7597,153.434,4,-90.0794,125.221,0.999999,-19,130.558,-4,-20.6042,125.279,0.999999,-28.5056,139.095,-4,-28.451,134.328,4,-34.8786,148.13,-1,-35.5019,130.996,4,-56.3796,151.434,-1,-48.9171,138.671,0.999997,-62.9995,159.45,-4,-56.5489,140.352,0.999997,-75.6466,153,-4,-77.3283,147.07,4,-82.7024,165.855,-1,-92.9927,159.62,-1,-85.0027,171.691,-4,-101.279,193.415,-4,-100.071,198.87,-1,-109.701,211.081,-1.00001,-116.166,215.725,-4.00001,-126.643,221.263,-4.00001,-136.83,230.484,3.99999,-170.153,226.502,3.99999,-159.264,223.445,0.999994,-148.218,212.315,0.999994,-140.032,208.332,3.99999,-129.705,186.666,3.99999,-127.713,182.109,0.999995,-118.66,170.249,0.999995,-113.956,165.037,4,-105.725,158.222,4,-98.6535,152.274,4,-91.0313,128.025,-4,-19,115.928,0.999999,-22.5843,129.725,-4,-21.8518,125.279,4,-28.5056,139.095,-1,-28.451,123.006,4,-50.1442,143.053,-1,-41.6879,130.996,0.999998,-56.3796,151.434,-4,-48.9171,133.297,0.999997,-68.9289,146.011,-4,-69.988,140.352,4,-75.6466,153,-1,-77.3283,145.958,4,-83.7101,159.427,-1,-97.7597,153.434,-1,-90.0794,171.691,-1,-101.279,177.113,-4,-109.842,198.87,-4,-109.701,203.847,-1.00001,-119.587,215.725,-1.00001,-126.643,219.85,-4.00001,-137.336,224.881,-4.00001,-147.783,232.456,3.99999,-181.518,229.013,3.99999,-170.446,226.502,0.999993,-159.264,215.787,0.999993,-150.541,212.315,3.99999,-140.032,190.773,3.99999,-136.979,186.666,0.999994,-127.713,175.051,0.999995,-122.432,170.249,3.99999,-113.956,163.79,4,-106.559,125.221,-4,-19,115.928,4,-22.5843,109.601,0.999999,-19,129.725,-1,-21.8518,114.72,4,-44.3083,134.328,-1,-34.8786,123.006,0.999998,-50.1442,143.053,-4,-41.6879,125.92,0.999997,-62.5655,138.671,-4,-62.9995,133.297,4,-68.9289,146.011,-1,-69.988,139.291,4,-76.7076,147.07,-1,-82.7024,153.434,-4,-90.0794,159.427,-4,-97.7597,165.037,-1,-105.725,177.113,-1,-109.842,182.109,-4.00001,-118.66,203.847,-4.00001,-119.587,208.332,-1.00001,-129.705,219.85,-1.00001,-137.336,223.445,-4.00001,-148.218,227.957,-4.00001,-158.899,233.868,3.99999,-192.966,230.972,3.99999,-181.738,229.013,0.999993,-170.446,218.739,0.999993,-161.208,215.787,3.99999,-150.541,194.421,3.99999,-146.435,190.773,0.999994,-136.979,179.432,0.999994,-131.135,175.051,3.99999,-122.432,168.962,3.99999,-114.727,125.221,-1,-19,109.601,4,-19,106.157,4,-38.8861,125.279,-1,-28.5056,114.72,0.999998,-44.3083,134.328,-4,-34.8786,118.239,0.999998,-56.5718,130.996,-4,-56.3796,125.92,4,-62.5655,138.671,-1,-62.9995,132.289,4,-70.0407,140.352,-1,-75.6466,147.07,-4,-82.7024,158.222,-4,-98.6535,152.274,-4,-91.0313,165.037,-4,-105.725,170.249,-1.00001,-113.956,182.109,-1.00001,-118.66,186.666,-4.00001,-127.713,208.332,-4.00001,-129.705,212.315,-1.00001,-140.032,223.445,-1.00001,-148.218,226.502,-4.00001,-159.264,230.484,-4.00001,-170.153,234.717,3.99999,-204.469,232.375,3.99999,-193.113,230.972,0.999992,-181.738,221.164,0.999992,-172.007,218.739,3.99999,-161.208,197.6,3.99999,-156.058,194.421,0.999994,-146.435,183.38,0.999994,-140.041,179.432,3.99999,-131.135,173.728,3.99999,-123.14,115.928,-1,-22.5843,97.3389,4,-33.8905,106.157,0.999998,-38.8861,125.279,-4,-28.5056,110.274,0.999998,-50.9621,123.006,-4,-50.1442,118.239,4,-56.5718,130.996,-1,-56.3796,124.968,4,-63.7254,133.297,-1,-68.9289,140.352,-4,-75.6466,145.958,-4,-83.7101,163.79,-4,-106.559,170.249,-4,-113.956,175.051,-1.00001,-122.432,186.666,-1.00001,-127.713,190.773,-4.00001,-136.979,212.315,-4.00001,-140.032,215.787,-1.00001,-150.541,226.502,-1.00001,-159.264,229.013,-4.00001,-170.446,232.456,-4.00001,-181.518,235,3.99999,-215.75,233.218,3.99999,-204.542,232.375,0.999992,-193.113,223.056,0.999992,-182.912,221.164,3.99999,-172.007,200.303,3.99999,-165.826,197.6,0.999993,-156.058,186.886,0.999994,-149.131,183.38,3.99999,-140.041,178.075,3.99999,-131.776,109.601,-1,-19,115.928,-4,-22.5843,97.3389,0.999999,-33.8905,88.286,4,-29.3337,102.043,0.999998,-45.75,114.72,-4,-44.3083,110.274,4,-50.9621,123.006,-1,-50.1442,117.345,4,-57.777,125.92,-1,-62.5655,133.297,-4,-68.9289,139.291,-4,-76.7076,168.962,-4.00001,-114.727,175.051,-4.00001,-122.432,179.432,-1.00001,-131.135,190.773,-1.00001,-136.979,194.421,-4.00001,-146.435,215.787,-4.00001,-150.541,218.739,-1.00001,-161.208,229.013,-1.00001,-170.446,230.972,-4.00001,-181.738,233.868,-4.00001,-192.966,233.5,0.999991,-215.75,233.5,3.99999,-215.75,222.5,3.99999,-215.75,225.497,3.99999,-215.75,225.497,0.999991,-215.75,233.218,0.999991,-204.542,224.411,0.999992,-193.897,223.056,3.99999,-182.912,202.524,3.99999,-175.715,200.303,0.999993,-165.826,189.942,0.999993,-158.381,186.886,3.99999,-149.131,181.994,3.99999,-140.615,109.601,-4,-19,106.157,-4,-38.8861,93.5666,0.999998,-40.9481,88.286,0.999999,-29.3337,79.0203,4,-25.2266,102.043,4,-45.75,114.72,-1,-44.3083,109.44,4,-52.2097,118.239,-1,-56.5718,125.92,-4,-62.5655,132.289,-4,-70.0407,173.728,-4.00001,-123.14,179.432,-4.00001,-131.135,183.38,-1.00001,-140.041,194.421,-1.00001,-146.435,197.6,-4.00001,-156.058,218.739,-4.00001,-161.208,221.164,-1.00001,-172.007,230.972,-1.00001,-181.738,232.375,-4.00001,-193.113,234.717,-4.00001,-204.469,225.226,0.999991,-204.935,233.5,-1.00001,-215.75,225.497,-1.00001,-215.75,225.497,-4.00001,-215.75,222.5,-4.00001,-215.75,235,-4.00001,-215.75,233.5,-4.00001,-215.75,224,3.99999,-206.75,206.491,3.99999,-215.75,206.243,3.99999,-205.868,225.226,3.99999,-204.935,209,3.99999,-215.75,224.411,3.99999,-193.897,204.256,3.99999,-185.701,202.524,0.999992,-175.715,192.54,0.999993,-167.771,189.942,3.99999,-158.381,185.473,3.99999,-149.636,97.3389,-4,-33.8905,106.157,-1,-38.8861,93.5666,4,-40.9481,84.8645,0.999998,-36.5678,79.0203,0.999999,-25.2266,69.5644,4,-21.5791,101.272,4,-47.037,110.274,-1,-50.9621,118.239,-4,-56.5718,124.968,-4,-63.7254,178.075,-4.00001,-131.776,183.38,-4.00001,-140.041,186.886,-1.00001,-149.131,197.6,-1.00001,-156.058,200.303,-4.00001,-165.826,221.164,-4.00001,-172.007,223.056,-1.00001,-182.912,232.375,-1.00001,-193.113,233.218,-4.00001,-204.542,233.218,-1.00001,-204.542,225.226,-1.00001,-204.935,225.226,-4.00001,-204.935,206.491,-4.00001,-215.75,209,-4.00001,-215.75,206.243,-4.00001,-205.868,224,-4.00001,-206.75,207.5,3.99999,-206.75,206.491,0.999991,-215.75,196.989,3.99999,-215.75,198.489,3.99999,-215.75,198.489,0.999991,-215.75,206.243,0.999991,-205.868,205.497,3.99999,-195.76,204.256,0.999992,-185.701,194.675,0.999992,-177.276,192.54,3.99999,-167.771,188.506,3.99999,-158.817,88.286,-4,-29.3337,97.3389,-1,-33.8905,102.043,-1,-45.75,84.8645,4,-36.5678,92.8593,4,-42.2713,75.958,0.999999,-32.6199,69.5644,0.999999,-21.5791,61.7573,4,-19,110.274,-4,-50.9621,117.345,-4,-57.777,181.994,-4.00001,-140.615,186.886,-4.00001,-149.131,189.942,-1.00001,-158.381,200.303,-1.00001,-165.826,202.524,-4.00001,-175.715,223.056,-4.00001,-182.912,224.411,-1.00001,-193.897,224.411,-4.00001,-193.897,206.491,-1.00001,-215.75,206.243,-1.00001,-205.868,198.489,-1.00001,-215.75,198.489,-4.00001,-215.75,196.989,-4.00001,-215.75,207.5,-4.00001,-206.75,205.497,-4.00001,-195.76,198.25,0.999991,-206.26,196.751,3.99999,-206.334,198.25,3.99999,-206.26,205.497,0.999991,-195.76,196.341,0.999992,-186.875,194.675,3.99999,-177.276,191.085,3.99999,-168.135,79.0203,-4,-25.2266,88.286,-1,-29.3337,93.5666,-1,-40.9481,102.043,-4,-45.75,75.958,4,-32.6199,84.223,4,-37.9242,66.8685,0.999999,-29.1137,61.7573,0.999999,-19,109.44,-4,-52.2097,185.473,-4.00001,-149.636,189.942,-4.00001,-158.381,192.54,-1.00001,-167.771,202.524,-1.00001,-175.715,204.256,-4.00001,-185.701,198.25,-1.00001,-206.26,205.497,-1.00001,-195.76,198.25,-4.00001,-206.26,196.751,-4.00001,-206.334,197.533,0.999991,-196.544,196.04,3.99999,-196.691,197.533,3.99999,-196.544,196.341,3.99999,-186.875,193.203,3.99999,-177.569,69.5644,-4,-21.5791,79.0203,-1,-25.2266,84.8645,-1,-36.5678,93.5666,-4,-40.9481,101.272,-4,-47.037,66.8685,4,-29.1137,75.3838,4,-34.0061,57.6178,0.999999,-26.0577,188.506,-4.00001,-158.817,192.54,-4.00001,-167.771,194.675,-1.00001,-177.276,204.256,-1.00001,-185.701,197.533,-1.00001,-196.544,197.533,-4.00001,-196.544,196.04,-4.00001,-196.691,194.856,3.99999,-187.095,61.7573,-4,-19,69.5644,-1,-21.5791,75.958,-1,-32.6199,84.8645,-4,-36.5678,92.8593,-4,-42.2713,57.6178,4,-26.0577,66.363,4,-30.5264,48.2284,0.999999,-23.4593,191.085,-4.00001,-168.135,194.675,-4.00001,-177.276,196.341,-1.00001,-186.875,196.341,-4.00001,-186.875,194.856,-4.00001,-187.095,61.7573,-1,-19,66.8685,-1,-29.1137,75.958,-4,-32.6199,84.223,-4,-37.9242,48.2284,4,-23.4593,57.1823,4,-27.4936,38.7229,0.999999,-21.3248,193.203,-4.00001,-177.569,57.6178,-1,-26.0577,66.8685,-4,-29.1137,75.3838,-4,-34.0061,38.7229,4,-21.3248,47.8638,4,-24.9148,29.124,0.999999,-19.6593,48.2284,-1,-23.4593,57.6178,-4,-26.0577,66.363,-4,-30.5264,29.124,4,-19.6593,38.4301,4,-22.7964,23.7784,0.999999,-19,38.7229,-1,-21.3248,48.2284,-4,-23.4593,57.1823,-4,-27.4936,23.7784,4,-19,28.9038,4,-21.1435,29.124,-1,-19.6593,38.7229,-4,-21.3248,47.8638,-4,-24.9148,19.3078,4,-19.96,23.7784,-1,-19,29.124,-4,-19.6593,38.4301,-4,-22.7964,9.66539,4,-19.2487,23.7784,-4,-19,28.9038,-4,-21.1435,9.00004,4,-19.0114,19.3078,-4,-19.96,0.250039,4,-19.0114,0.250039,4,-19,9.66539,-4,-19.2487,9.00004,-4,-19.0114,0.250039,-4,-19.0114,0.250039,-4,-19],\"faces\":[33,0,16,29,3,0,0,0,0,33,10,11,5,4,1,1,1,1,33,11,14,7,5,2,2,2,2,33,526,523,530,531,3,3,3,3,33,19,10,4,9,4,4,4,4,33,456,476,458,433,5,5,5,5,33,14,24,13,7,6,6,6,6,32,425,426,454,7,7,7,32,454,473,451,8,8,8,32,451,420,383,9,9,9,32,383,345,311,10,10,10,32,311,279,247,11,11,11,32,247,213,179,12,12,12,32,179,144,145,13,13,13,32,145,175,207,14,14,14,32,207,239,271,15,15,15,32,271,303,337,16,16,16,32,337,371,408,17,17,17,32,408,440,463,18,18,18,32,463,479,491,19,19,19,32,491,520,516,20,20,20,32,491,516,511,21,21,21,32,408,463,491,22,22,22,32,271,337,408,23,23,23,32,145,207,271,24,24,24,32,247,179,145,25,25,25,32,383,311,247,26,26,26,32,454,451,383,27,27,27,32,427,425,454,28,28,28,32,453,427,454,29,29,29,32,454,383,247,30,30,30,32,247,145,271,31,31,31,32,271,408,491,32,32,32,32,491,511,505,33,33,33,32,491,505,499,34,34,34,32,474,453,454,35,35,35,32,488,474,454,36,36,36,32,491,499,492,37,37,37,32,491,492,480,38,38,38,32,472,488,454,39,39,39,32,450,472,454,40,40,40,32,271,491,480,41,41,41,32,271,480,464,42,42,42,32,450,454,247,43,43,43,32,419,450,247,44,44,44,32,271,464,441,45,45,45,32,271,441,409,46,46,46,32,382,419,247,47,47,47,32,344,382,247,48,48,48,32,271,409,377,49,49,49,32,271,377,339,50,50,50,32,310,344,247,51,51,51,32,278,310,247,52,52,52,32,271,339,305,53,53,53,32,271,305,273,54,54,54,32,246,278,247,55,55,55,32,212,246,247,56,56,56,32,271,273,241,57,57,57,32,271,241,209,58,58,58,32,212,247,271,59,59,59,32,177,212,271,60,60,60,32,271,209,178,61,61,61,32,271,178,177,62,62,62,33,32,19,9,18,63,63,63,63,33,21,20,34,35,64,64,64,64,33,176,275,307,208,65,65,65,65,33,24,38,23,13,66,66,66,66,33,6,39,25,2,67,67,67,67,33,26,21,35,42,68,68,68,68,33,43,27,28,44,1,1,1,1,33,17,8,46,67,69,69,69,69,33,36,104,79,22,70,70,70,70,33,49,32,18,31,71,71,71,71,33,20,33,51,34,72,72,72,72,33,38,56,37,23,73,73,73,73,33,40,26,42,60,74,74,74,74,33,44,28,41,61,2,2,2,2,32,519,523,526,75,75,75,32,526,528,529,76,76,76,32,514,508,502,77,77,77,32,502,495,483,78,78,78,32,483,467,443,79,79,79,32,443,410,372,80,80,80,32,372,336,302,81,81,81,32,302,270,238,82,82,82,32,238,206,174,83,83,83,32,174,143,130,84,84,84,32,130,129,160,85,85,85,32,160,194,228,86,86,86,32,228,262,294,87,87,87,32,294,329,368,88,88,88,32,368,405,437,89,89,89,32,437,460,459,90,90,90,32,459,434,399,91,91,91,32,399,398,433,92,92,92,32,399,433,458,93,93,93,32,437,459,399,94,94,94,32,294,368,437,95,95,95,32,160,228,294,96,96,96,32,174,130,160,97,97,97,32,302,238,174,98,98,98,32,443,372,302,99,99,99,32,502,483,443,100,100,100,32,526,529,514,101,101,101,32,519,526,514,102,102,102,32,437,399,458,103,103,103,32,437,458,477,104,104,104,32,519,514,502,105,105,105,32,515,519,502,106,106,106,32,437,477,461,107,107,107,32,437,461,438,108,108,108,32,509,515,502,106,106,106,32,503,509,502,109,109,109,32,294,437,438,110,110,110,32,294,438,406,111,111,111,32,503,502,443,112,112,112,32,496,503,443,113,113,113,32,294,406,369,114,114,114,32,294,369,330,115,115,115,32,484,496,443,116,116,116,32,468,484,443,101,101,101,32,294,330,295,117,117,117,32,294,295,263,118,118,118,32,444,468,443,119,119,119,32,411,444,443,120,120,120,32,160,294,263,121,121,121,32,160,263,229,122,122,122,32,411,443,302,123,123,123,32,376,411,302,124,124,124,32,160,229,195,125,125,125,32,160,195,161,126,126,126,32,338,376,302,127,127,127,32,304,338,302,128,128,128,32,174,160,161,129,129,129,32,174,161,162,130,130,130,32,304,302,174,131,131,131,32,272,304,174,132,132,132,32,174,162,176,133,133,133,32,174,176,208,134,134,134,32,240,272,174,135,135,135,32,174,208,240,136,136,136,33,65,45,27,43,4,4,4,4,33,121,219,253,152,137,137,137,137,33,30,17,67,92,138,138,138,138,33,70,49,31,48,139,139,139,139,33,33,50,72,51,140,140,140,140,33,74,75,53,52,141,141,141,141,33,56,78,55,37,142,142,142,142,33,54,76,163,132,143,143,143,143,33,58,40,60,82,144,144,144,144,33,61,41,59,83,6,6,6,6,33,75,86,62,53,145,145,145,145,33,64,87,88,63,64,64,64,64,33,90,66,45,65,63,63,63,63,32,357,351,317,146,146,146,32,317,285,253,147,147,147,32,253,219,185,148,148,148,32,185,151,120,149,149,149,32,120,92,67,150,150,150,32,67,46,29,151,151,151,32,29,16,15,152,152,152,32,15,25,39,153,153,153,32,39,57,79,154,154,154,32,79,104,132,155,155,155,32,132,163,196,156,156,156,32,132,196,165,156,156,156,32,39,79,132,157,157,157,32,29,15,39,158,158,158,32,120,67,29,159,159,159,32,253,185,120,160,160,160,32,357,317,253,161,161,161,32,388,358,357,162,162,162,32,350,388,357,163,163,163,32,132,165,134,164,164,164,32,132,134,106,165,165,165,32,350,357,253,166,166,166,32,316,350,253,167,167,167,32,39,132,106,168,168,168,32,39,106,81,169,169,169,32,284,316,253,170,170,170,32,252,284,253,171,171,171,32,39,81,59,172,172,172,32,39,59,41,156,156,156,32,218,252,253,173,173,173,32,218,253,120,174,174,174,32,39,41,28,175,175,175,32,29,39,28,176,176,176,32,184,218,120,177,177,177,32,150,184,120,178,178,178,32,29,28,27,179,179,179,32,29,27,45,180,180,180,32,119,150,120,181,181,181,32,91,119,120,182,182,182,32,29,45,66,183,183,183,32,91,120,29,184,184,184,32,29,66,91,185,185,185,33,95,70,48,69,186,186,186,186,33,50,71,97,72,187,187,187,187,33,99,74,52,73,188,188,188,188,33,195,276,243,161,189,189,189,189,33,3,29,46,8,190,190,190,190,33,376,338,447,466,191,191,191,191,33,78,103,77,55,192,192,192,192,33,395,430,396,359,193,193,193,193,33,80,58,82,107,194,194,194,194,33,83,59,81,108,66,66,66,66,33,86,111,84,62,195,195,195,195,33,85,112,87,64,68,68,68,68,33,1,2,25,15,196,196,196,196,33,63,88,116,89,72,72,72,72,33,118,91,66,90,71,71,71,71,32,390,354,353,197,197,197,32,353,389,387,198,198,198,32,387,349,315,199,199,199,32,315,283,251,200,200,200,32,251,217,183,201,201,201,32,183,149,118,202,202,202,32,118,90,65,203,203,203,32,65,43,44,204,204,204,32,44,61,83,205,205,205,32,83,108,136,206,206,206,32,136,167,199,207,207,207,32,199,230,296,208,208,208,32,199,296,264,209,209,209,32,83,136,199,210,210,210,32,65,44,83,211,211,211,32,183,118,65,212,212,212,32,315,251,183,213,213,213,32,353,387,315,214,214,214,32,423,390,353,215,215,215,32,386,423,353,216,216,216,32,353,315,183,217,217,217,32,183,65,83,218,218,218,32,83,199,264,219,219,219,32,83,264,233,220,220,220,32,386,353,183,221,221,221,32,348,386,183,222,222,222,32,83,233,201,223,223,223,32,83,201,169,224,224,224,32,314,348,183,225,225,225,32,282,314,183,226,226,226,32,83,169,138,227,227,227,32,83,138,110,228,228,228,32,250,282,183,229,229,229,32,216,250,183,230,230,230,32,83,110,85,231,231,231,32,83,85,64,232,232,232,32,182,216,183,233,233,233,32,148,182,183,234,234,234,32,83,64,63,235,235,235,32,83,63,89,236,236,236,32,117,148,183,237,237,237,32,83,89,117,238,238,238,32,117,183,83,239,239,239,33,162,161,243,244,240,240,240,240,33,123,95,69,94,241,241,241,241,33,430,393,363,396,242,242,242,242,33,71,96,125,97,243,243,243,243,33,127,99,73,98,244,244,244,244,33,101,100,129,130,245,245,245,245,33,102,77,103,131,246,246,246,246,33,105,80,107,135,247,247,247,247,33,108,81,106,136,73,73,73,73,33,111,139,109,84,248,248,248,248,33,110,140,112,85,74,74,74,74,33,113,101,130,143,249,249,249,249,33,144,114,115,145,141,141,141,141,33,89,116,147,117,140,140,140,140,33,149,119,91,118,139,139,139,139,33,154,123,94,122,250,250,250,250,33,96,124,156,125,251,251,251,251,33,158,127,98,126,252,252,252,252,33,100,128,160,129,253,253,253,253,33,133,105,135,166,254,254,254,254,33,136,106,134,167,142,142,142,142,33,139,170,137,109,255,255,255,255,33,138,171,140,110,144,144,144,144,33,141,113,143,174,256,256,256,256,33,145,115,142,175,145,145,145,145,33,179,146,114,144,188,188,188,188,33,117,147,181,148,187,187,187,187,33,183,150,119,149,257,257,257,257,33,30,92,120,47,258,258,258,258,33,188,154,122,153,259,259,259,259,33,124,155,190,156,260,260,260,260,33,192,158,126,157,261,261,261,261,33,128,159,194,160,262,262,262,262,33,164,133,166,197,263,263,263,263,33,167,134,165,199,264,264,264,264,33,170,202,168,137,265,265,265,265,33,169,203,171,138,194,194,194,194,33,172,141,174,206,266,266,266,266,33,175,142,173,207,195,195,195,195,33,254,351,357,286,267,267,267,267,33,178,210,211,177,245,245,245,245,33,213,180,146,179,244,244,244,244,33,148,181,215,182,243,243,243,243,33,217,184,150,183,268,268,268,268,33,93,185,219,121,269,269,269,269,33,222,188,153,187,270,270,270,270,32,354,355,356,271,271,271,32,356,320,321,271,271,271,32,356,321,322,271,271,271,32,354,356,322,271,271,271,32,318,319,286,272,272,272,32,354,322,318,273,273,273,32,357,358,353,274,274,274,32,353,354,318,273,273,273,32,318,286,357,275,275,275,32,353,318,357,276,276,276,33,155,189,224,190,277,277,277,277,33,226,192,157,191,278,278,278,278,33,159,193,228,194,279,279,279,279,33,444,494,501,468,280,280,280,280,33,230,199,165,196,246,246,246,246,33,198,164,197,231,281,281,281,281,33,202,234,200,168,282,282,282,282,33,201,235,203,169,247,247,247,247,33,12,22,79,57,283,283,283,283,33,204,172,206,238,284,284,284,284,33,207,173,205,239,248,248,248,248,33,209,242,210,178,249,249,249,249,33,177,211,245,212,253,253,253,253,33,247,214,180,213,252,252,252,252,33,182,215,249,216,251,251,251,251,33,251,218,184,217,285,285,285,285,33,186,285,317,220,286,286,286,286,33,256,222,187,221,287,287,287,287,33,189,223,258,224,288,288,288,288,33,260,226,191,225,289,289,289,289,33,193,227,262,228,290,290,290,290,33,528,532,533,529,291,291,291,291,33,234,266,232,200,292,292,292,292,33,233,267,235,201,254,254,254,254,32,391,424,422,293,293,293,32,422,385,347,294,294,294,32,347,313,281,295,295,295,32,281,249,215,296,296,296,32,215,181,147,297,297,297,32,147,116,88,298,298,298,32,88,87,112,299,299,299,32,112,140,171,300,300,300,32,171,203,235,301,301,301,32,235,267,297,302,302,302,32,297,331,478,156,156,156,32,297,478,462,156,156,156,32,171,235,297,303,303,303,32,88,112,171,304,304,304,32,215,147,88,305,305,305,32,347,281,215,306,306,306,32,391,422,347,307,307,307,32,356,355,391,308,308,308,32,395,356,391,309,309,309,32,391,347,215,310,310,310,32,215,88,171,311,311,311,32,171,297,462,312,312,312,32,171,462,439,313,313,313,32,391,215,171,314,314,314,32,430,395,391,20,20,20,32,392,393,430,315,315,315,32,394,392,430,316,316,316,32,171,439,407,317,317,317,32,171,407,370,318,318,318,32,394,430,391,319,319,319,32,431,394,391,320,320,320,32,171,370,332,321,321,321,32,171,332,301,156,156,156,32,452,431,391,322,322,322,32,421,452,391,323,323,323,32,171,301,269,324,324,324,32,171,269,237,325,325,325,32,384,421,391,326,326,326,32,346,384,391,327,327,327,32,171,237,205,328,328,328,32,171,205,173,329,329,329,32,312,346,391,330,330,330,32,280,312,391,331,331,331,32,171,173,142,332,332,332,32,171,142,115,333,333,333,32,248,280,391,334,334,334,32,248,391,171,335,335,335,32,171,115,114,336,336,336,32,171,114,146,337,337,337,32,214,248,171,338,338,338,32,171,146,180,339,339,339,32,171,180,214,340,340,340,33,236,204,238,270,341,341,341,341,33,239,205,237,271,255,255,255,255,33,241,274,242,209,256,256,256,256,33,212,245,277,246,262,262,262,262,33,279,248,214,247,261,261,261,261,33,216,249,281,250,260,260,260,260,33,283,252,218,251,259,259,259,259,32,164,198,131,342,342,342,32,131,103,78,343,343,343,32,78,56,38,344,344,344,32,38,24,14,345,345,345,32,14,11,10,346,346,346,32,10,19,32,347,347,347,32,32,49,70,348,348,348,32,70,95,123,349,349,349,32,123,154,188,350,350,350,32,188,222,256,351,351,351,32,256,288,323,352,352,352,32,323,318,322,353,353,353,32,323,322,352,354,354,354,32,188,256,323,355,355,355,32,70,123,188,356,356,356,32,10,32,70,357,357,357,32,38,14,10,358,358,358,32,131,78,38,359,359,359,32,133,164,131,360,360,360,32,105,133,131,361,361,361,32,131,38,10,362,362,362,32,10,70,188,363,363,363,32,188,323,352,364,364,364,32,188,352,324,365,365,365,32,80,105,131,366,366,366,32,58,80,131,367,367,367,32,188,324,289,368,368,368,32,188,289,257,369,369,369,32,58,131,10,370,370,370,32,40,58,10,371,371,371,32,188,257,223,372,372,372,32,188,223,189,373,373,373,32,26,40,10,374,374,374,32,21,26,10,375,375,375,32,188,189,155,376,376,376,32,188,155,124,377,377,377,32,20,21,10,378,378,378,32,33,20,10,379,379,379,32,10,188,124,380,380,380,32,10,124,96,381,381,381,32,50,33,10,382,382,382,32,10,96,71,383,383,383,32,10,71,50,384,384,384,33,288,256,221,255,385,385,385,385,33,223,257,290,258,386,386,386,386,33,292,260,225,259,387,387,387,387,33,227,261,294,262,388,388,388,388,33,264,297,267,233,263,263,263,263,33,266,298,265,232,389,389,389,389,33,268,236,270,302,390,390,390,390,33,271,237,269,303,265,265,265,265,33,273,306,274,241,266,266,266,266,33,68,47,120,151,391,391,391,391,33,176,162,244,275,392,392,392,392,33,246,277,309,278,279,279,279,279,33,311,280,248,279,278,278,278,278,33,250,281,313,282,277,277,277,277,33,315,284,252,283,393,393,393,393,33,523,519,527,530,394,394,394,394,33,323,288,255,287,395,395,395,395,33,257,289,325,290,396,396,396,396,33,327,292,259,291,397,397,397,397,33,261,293,329,294,398,398,398,398,33,406,470,448,369,399,399,399,399,33,195,229,308,276,400,400,400,400,33,331,297,264,296,281,281,281,281,33,298,334,299,265,401,401,401,401,33,300,268,302,336,402,402,402,402,33,303,269,301,337,282,282,282,282,33,305,340,306,273,284,284,284,284,33,54,132,104,36,403,403,403,403,33,278,309,343,310,290,290,290,290,33,345,312,280,311,289,289,289,289,33,282,313,347,314,288,288,288,288,33,349,316,284,315,287,287,287,287,33,323,287,319,318,404,404,404,404,32,196,163,76,405,405,405,32,76,102,131,405,405,405,32,198,231,414,406,406,406,32,196,76,131,407,407,407,32,198,414,446,408,408,408,32,230,196,131,409,409,409,32,478,331,296,406,406,406,32,296,230,131,410,410,410,32,198,446,510,101,101,101,32,296,131,198,410,410,410,32,491,478,296,408,408,408,32,533,524,520,411,411,411,32,491,296,198,406,406,406,32,529,533,520,412,412,412,32,520,491,198,413,413,413,32,510,514,529,411,411,411,32,520,198,510,414,414,414,32,510,529,520,415,415,415,33,352,322,321,362,416,416,416,416,33,289,324,364,325,417,417,417,417,33,366,327,291,326,418,418,418,418,33,293,328,368,329,419,419,419,419,33,263,295,380,342,420,420,420,420,33,337,301,332,371,292,292,292,292,33,333,300,336,372,421,421,421,421,33,334,374,335,299,422,422,422,422,32,375,414,231,423,423,423,32,231,197,166,424,424,424,32,166,135,107,425,425,425,32,107,82,60,426,426,426,32,60,42,35,427,427,427,32,35,34,51,428,428,428,32,51,72,97,429,429,429,32,97,125,156,430,430,430,32,156,190,224,431,431,431,32,224,258,290,432,432,432,32,290,325,364,433,433,433,32,364,362,321,434,434,434,32,321,320,359,435,435,435,32,396,363,360,436,436,436,32,364,321,359,437,437,437,32,396,360,361,438,438,438,32,364,359,396,439,439,439,32,224,290,364,440,440,440,32,97,156,224,441,441,441,32,35,51,97,442,442,442,32,107,60,35,443,443,443,32,231,166,107,444,444,444,32,335,375,231,445,445,445,32,299,335,231,446,446,446,32,231,107,35,447,447,447,32,35,97,224,448,448,448,32,224,364,396,449,449,449,32,396,361,402,450,450,450,32,396,402,365,451,451,451,32,231,35,224,452,452,452,32,265,299,231,453,453,453,32,232,265,231,454,454,454,32,224,396,365,455,455,455,32,224,365,326,456,456,456,32,200,232,231,457,457,457,32,168,200,231,458,458,458,32,224,326,291,459,459,459,32,224,291,259,460,460,460,32,137,168,231,461,461,461,32,109,137,231,462,462,462,32,224,259,225,463,463,463,32,224,225,191,464,464,464,32,84,109,231,465,465,465,32,62,84,231,466,466,466,32,224,191,157,467,467,467,32,224,157,126,468,468,468,32,53,62,231,469,469,469,32,52,53,231,470,470,470,32,224,126,98,471,471,471,32,224,98,73,472,472,472,32,52,231,224,473,473,473,32,224,73,52,474,474,474,33,356,395,359,320,475,475,475,475,33,220,317,351,254,476,476,476,476,33,339,378,340,305,341,341,341,341,33,263,342,308,229,477,477,477,477,33,310,343,381,344,388,388,388,388,33,383,346,312,345,387,387,387,387,33,314,347,385,348,386,386,386,386,33,387,350,316,349,385,385,385,385,33,389,353,358,388,404,404,404,404,33,390,391,355,354,416,416,416,416,33,438,486,470,406,478,478,478,478,32,427,428,429,274,274,274,32,429,398,399,276,276,276,32,429,399,400,479,479,479,32,427,429,400,480,480,480,32,397,360,363,272,272,272,32,427,400,397,273,273,273,32,393,392,425,274,274,274,32,425,427,397,273,273,273,32,397,363,393,479,479,479,32,425,397,393,272,272,272,33,397,401,361,360,481,481,481,481,33,208,307,341,240,482,482,482,482,33,324,352,362,364,483,483,483,483,33,403,366,326,365,484,484,484,484,33,328,367,405,368,485,485,485,485,33,369,448,417,330,486,486,486,486,33,330,417,380,295,487,487,487,487,33,371,332,370,408,389,389,389,389,33,373,333,372,410,488,488,488,488,33,374,413,375,335,489,489,489,489,33,377,415,378,339,390,390,390,390,33,304,272,379,416,490,490,490,490,33,344,381,418,382,398,398,398,398,33,420,384,346,383,397,397,397,397,33,348,385,422,386,396,396,396,396,33,389,388,350,387,395,395,395,395,33,423,424,391,390,483,483,483,483,33,425,392,394,426,481,481,481,481,33,432,400,399,434,491,491,491,491,33,401,435,402,361,492,492,492,492,33,435,403,365,402,493,493,493,493,33,367,404,437,405,494,494,494,494,33,408,370,407,440,401,401,401,401,33,409,442,415,377,402,402,402,402,33,412,373,410,443,495,495,495,495,33,414,375,413,446,496,496,496,496,33,398,429,456,433,497,497,497,497,33,382,418,449,419,419,419,419,419,33,451,421,384,420,418,418,418,418,33,386,422,424,423,417,417,417,417,33,426,394,431,454,492,492,492,492,33,453,455,428,427,491,491,491,491,32,77,102,76,498,498,498,32,76,54,36,499,499,499,32,36,22,12,500,500,500,32,12,6,2,501,501,501,32,2,1,0,502,502,502,32,0,3,8,503,503,503,32,8,17,30,504,504,504,32,30,47,68,505,505,505,32,68,93,121,506,506,506,32,121,152,186,507,507,507,32,186,220,254,508,508,508,32,254,286,319,509,509,509,32,254,319,287,510,510,510,32,121,186,254,511,511,511,32,30,68,121,512,512,512,32,0,8,30,513,513,513,32,12,2,0,514,514,514,32,76,36,12,515,515,515,32,55,77,76,516,516,516,32,37,55,76,517,517,517,32,254,287,255,518,518,518,32,254,255,221,519,519,519,32,37,76,12,520,520,520,32,23,37,12,521,521,521,32,121,254,221,522,522,522,32,121,221,187,523,523,523,32,13,23,12,524,524,524,32,7,13,12,525,525,525,32,121,187,153,526,526,526,32,121,153,122,527,527,527,32,7,12,0,528,528,528,32,5,7,0,529,529,529,32,121,122,94,530,530,530,32,30,121,94,531,531,531,32,4,5,0,532,532,532,32,9,4,0,533,533,533,32,30,94,69,534,534,534,32,30,69,48,535,535,535,32,18,9,0,536,536,536,32,30,48,31,537,537,537,32,18,0,30,538,538,538,32,31,18,30,539,539,539,32,504,510,446,101,101,101,32,446,413,374,540,540,540,32,374,334,298,541,541,541,32,298,266,234,542,542,542,32,234,202,170,543,543,543,32,170,139,111,544,544,544,32,111,86,75,545,545,545,32,75,74,99,546,546,546,32,99,127,158,547,547,547,32,158,192,226,548,548,548,32,226,260,292,549,549,549,32,292,327,366,550,550,550,32,366,403,435,551,551,551,32,435,401,397,552,552,552,32,397,400,432,553,553,553,32,397,432,457,554,554,554,32,366,435,397,555,555,555,32,226,292,366,556,556,556,32,99,158,226,557,557,557,32,111,75,99,558,558,558,32,234,170,111,559,559,559,32,374,298,234,560,560,560,32,504,446,374,561,561,561,32,497,504,374,562,562,562,32,374,234,111,563,563,563,32,111,99,226,564,564,564,32,226,366,397,565,565,565,32,397,457,436,566,566,566,32,397,436,404,567,567,567,32,485,497,374,568,568,568,32,469,485,374,569,569,569,32,226,397,404,570,570,570,32,226,404,367,571,571,571,32,445,469,374,572,572,572,32,412,445,374,573,573,573,32,226,367,328,574,574,574,32,226,328,293,575,575,575,32,373,412,374,576,576,576,32,333,373,374,577,577,577,32,226,293,261,578,578,578,32,226,261,227,579,579,579,32,333,374,111,580,580,580,32,300,333,111,581,581,581,32,226,227,193,582,582,582,32,226,193,159,583,583,583,32,268,300,111,584,584,584,32,236,268,111,585,585,585,32,111,226,159,586,586,586,32,111,159,128,587,587,587,32,204,236,111,588,588,588,32,172,204,111,589,589,589,32,111,128,100,590,590,590,32,111,100,101,591,591,591,32,141,172,111,592,592,592,32,111,101,113,593,593,593,32,113,141,111,594,594,594,33,457,432,434,459,595,595,595,595,33,404,436,460,437,596,596,596,596,32,381,343,309,597,597,597,32,309,277,245,598,598,598,32,245,211,210,599,599,599,32,210,242,274,600,600,600,32,274,306,340,601,601,601,32,340,378,415,602,602,602,32,415,442,465,603,603,603,32,465,481,493,604,604,604,32,493,500,506,605,605,605,32,506,512,517,156,156,156,32,517,521,524,156,156,156,32,524,533,532,156,156,156,32,531,530,527,156,156,156,32,524,532,531,156,156,156,32,506,517,524,20,20,20,32,465,493,506,606,606,606,32,340,415,465,607,607,607,32,210,274,340,608,608,608,32,309,245,210,609,609,609,32,418,381,309,610,610,610,32,471,449,418,611,611,611,32,489,487,471,612,612,612,32,455,475,489,613,613,613,32,429,428,455,614,614,614,32,456,429,455,615,615,615,32,455,489,471,616,616,616,32,471,418,309,617,617,617,32,524,531,527,156,156,156,32,524,527,525,156,156,156,32,476,456,455,618,618,618,32,490,476,455,619,619,619,32,506,524,525,156,156,156,32,506,525,522,156,156,156,32,490,455,471,620,620,620,32,498,490,471,621,621,621,32,506,522,518,156,156,156,32,506,518,513,622,622,622,32,486,498,471,623,623,623,32,470,486,471,319,319,319,32,506,513,507,624,624,624,32,506,507,501,625,625,625,32,448,470,471,626,626,626,32,417,448,471,627,627,627,32,465,506,501,628,628,628,32,465,501,494,629,629,629,32,417,471,309,630,630,630,32,380,417,309,631,631,631,32,465,494,482,632,632,632,32,465,482,466,156,156,156,32,342,380,309,633,633,633,32,308,342,309,319,319,319,32,340,465,466,634,634,634,32,340,466,447,635,635,635,32,308,309,210,636,636,636,32,276,308,210,637,637,637,32,340,447,416,638,638,638,32,340,416,379,639,639,639,32,243,276,210,640,640,640,32,244,243,210,641,641,641,32,340,379,341,20,20,20,32,340,341,307,642,642,642,32,275,244,210,319,319,319,32,340,307,275,643,643,643,32,210,340,275,644,644,644,33,440,407,439,463,422,422,422,422,33,441,465,442,409,421,421,421,421,33,445,412,443,467,645,645,645,645,33,419,449,471,450,485,485,485,485,33,473,452,421,451,484,484,484,484,33,454,431,452,473,493,493,493,493,33,474,475,455,453,595,595,595,595,33,528,526,531,532,274,274,274,274,33,436,457,459,460,646,646,646,646,33,463,439,462,479,489,489,489,489,33,464,481,465,441,488,488,488,488,33,469,445,467,483,647,647,647,647,33,496,484,507,513,648,648,648,648,33,509,522,525,515,649,649,649,649,33,450,471,487,472,494,494,494,494,33,488,489,475,474,646,646,646,646,33,491,479,462,478,496,496,496,496,33,480,493,481,464,495,495,495,495,33,376,466,482,411,650,650,650,650,33,485,469,483,495,651,651,651,651,33,468,501,507,484,652,652,652,652,33,6,12,57,39,653,653,653,653,33,444,411,482,494,654,654,654,654,33,0,1,15,16,655,655,655,655,33,472,487,489,488,596,596,596,596,33,461,477,490,498,656,656,656,656,33,498,486,438,461,657,657,657,657,33,492,500,493,480,645,645,645,645,33,497,485,495,502,658,658,658,658,33,304,416,447,338,659,659,659,659,33,499,506,500,492,647,647,647,647,33,504,497,502,508,660,660,660,660,33,505,512,506,499,651,651,651,651,33,510,504,508,514,661,661,661,661,33,496,513,518,503,662,662,662,662,33,511,517,512,505,658,658,658,658,33,516,521,517,511,660,660,660,660,33,503,518,522,509,663,663,663,663,33,524,521,516,520,661,661,661,661,33,68,151,185,93,664,664,664,664,33,240,341,379,272,665,665,665,665,33,515,525,527,519,666,666,666,666,33,458,476,490,477,667,667,667,667,33,186,152,253,285,668,668,668,668]},\"eight_R_a\":{\"uvs\":[],\"normals\":[-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534995,0,-0.844855,-0.492897,0,-0.870087,-0.449609,0,-0.893226,-0.405239,0,-0.914211,-0.653173,0,-0.757209,-0.449607,0,-0.893227,-0.534994,0,-0.844856,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,0.492898,0,0.870087,0.449609,0,0.893226,0.40524,0,0.91421,-0.313679,0,-0.949529,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,8.49644e-9,1,-2.41404e-7,1.46437e-8,1,1.13842e-8,-5.83066e-8,1,-2.32744e-7,1.63048e-8,1,-6.75393e-9,-3.83177e-8,1,-1.15366e-7,-1.13559e-7,1,-2.12309e-7,-5.55477e-8,1,-1.09415e-7,7.87512e-10,1,-4.29216e-8,-7.05463e-9,1,-4.38681e-8,2.2505e-9,1,-3.89867e-8,4.48924e-9,1,-3.52794e-8,1.47958e-8,1,8.24397e-9,-1.1416e-8,1,-9.25599e-8,-5.3903e-9,1,-1.0264e-7,1.02052e-8,1,-2.31939e-8,-3.65502e-9,1,-4.69494e-8,1.24506e-8,1,-3.24003e-8,-1.95472e-8,1,-1.14972e-7,-1.86136e-8,1,-1.13139e-7,1.55113e-8,1,-2.98459e-8,2.79401e-9,1,-3.85337e-8,-1.58827e-8,1,-1.06559e-7,9.85105e-9,1,-9.18901e-9,-4.18241e-9,1,-4.09121e-8,2.63507e-9,1,-4.49983e-8,-1.54479e-9,1,-5.50044e-8,1.47233e-9,1,-3.78981e-8,8.84563e-10,1,-4.32966e-8,0,0,-1,0.65317,0,0.757211,-0.575806,0,-0.817586,0.575808,0,0.817585,-0.492901,0,-0.870086,0.689147,-1.26765e-7,0.724622,-0.2191,0,-0.975702,-0.122409,0,-0.99248,-0.689144,0,-0.724624,0.492896,0,0.870088,-0.615228,0,-0.788349,-0.35989,0,-0.932995,-0.405242,0,-0.914209,2.22295e-7,1,9.89931e-7,-2.68124e-7,1,-6.95096e-7,-3.45826e-8,1,7.32565e-8,-3.57444e-9,1,-1.29164e-8,-2.1565e-7,1,-5.39657e-7,1.90036e-8,1,-1.01573e-8,1.79162e-8,1,-1.19715e-8,3.03409e-7,1,3.18758e-7,-3.1408e-8,1,-6.50063e-8,6.04374e-10,1,-4.41107e-8,-3.75655e-8,1,-7.45052e-8,2.1729e-8,1,-4.87029e-8,4.30703e-9,1,-4.57009e-8,1.85047e-8,1,-1.10907e-8,-4.57578e-9,1,-1.14508e-8,4.15446e-9,1,-6.24185e-8,-1.06405e-8,1,-5.97167e-8,-9.04154e-9,1,-1.79325e-8,2.65025e-9,1,-6.89579e-8,2.71626e-9,1,-5.83223e-8,-1.52553e-8,1,-3.44155e-8,5.53192e-9,1,-3.88005e-8,-9.79205e-9,1,-5.07835e-8,4.34641e-9,1,-4.36863e-8,2.2374e-9,1,-4.37762e-8,-4.27186e-9,1,-4.69193e-8,-5.1168e-10,1,-4.47784e-8,-0.689069,0,-0.724696,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,0.405239,2.71221e-8,0.914211,-7.19584e-8,1,-2.32817e-7,0.00000114435,1,0.000002538,-8.15418e-8,1,-1.96699e-7,-3.94001e-8,1,-1.01104e-7,-4.51062e-8,1,-1.00065e-7,-1.73552e-9,1,-4.03986e-8,-1.19829e-10,1,-4.0101e-8,-1.0661e-8,1,-5.80933e-8,5.39992e-7,1,9.66114e-7,-8.28495e-8,1,-2.26774e-7,-9.30431e-8,1,-2.32757e-7,1.4473e-7,1,1.51428e-7,4.91326e-10,1,-4.06549e-8,2.24424e-10,1,-4.34791e-8,-1.00796e-7,1,-2.40679e-7,4.86147e-10,1,-4.28452e-8,-1.96843e-9,1,-4.95581e-8,8.37623e-9,1,-2.70368e-8,0.581237,0,0.813734,-0.813734,0,-0.581237,0.707109,0,-0.707105,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707109,-0.0000040519,-0.707105,0.707108,0.00000518324,-0.707106,0.707092,0.0000107896,-0.707122,0.707109,-0.0000094147,-0.707105,0.707106,0.0000406412,-0.707108,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.073564,0,-0.99729,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,-0.266711,0,-0.963776,0.615229,0,0.788348,0.534996,0,0.844855,-9.34612e-8,1,-0.00000126703,0,1,0,-2.10705e-8,1,-2.85648e-7,1.04971e-9,1,8.00465e-7,5.45101e-8,1,3.41018e-7,-1.89308e-8,1,-3.53413e-7,0,1,0,1.56451e-7,1,4.73588e-7,2.26161e-8,1,-9.36869e-9,2.45794e-7,1,4.33885e-7,2.0354e-8,1,-1.36003e-8,-2.87904e-7,1,-4.08697e-7,1.77653e-8,1,-1.77653e-8,1.87606e-8,1,-1.70035e-8,-4.96921e-8,1,-1.18432e-7,6.99435e-8,1,1.04891e-7,-2.43616e-8,1,-1.22476e-7,1.82766e-8,1,-1.65649e-8,1.79755e-8,1,-1.70469e-8,7.56977e-8,1,2.24552e-7,-1.05769e-7,1,-1.94043e-7,-1.12801e-7,1,-2.02991e-7,-4.72355e-8,1,-2.13794e-7,-6.38776e-8,1,-1.46966e-7,-5.7187e-8,1,-1.50977e-7,-2.66336e-8,1,-1.59234e-7,-5.72032e-8,1,-1.48296e-7,-8.17808e-8,1,-2.15905e-7,2.35089e-8,1,-7.81434e-9,4.27686e-8,1,3.0122e-8,-0.335866,0,-0.94191,1.28936e-8,1,-2.90874e-8,7.78102e-8,1,1.0861e-7,1.77352e-8,1,-1.06291e-8,1.66078e-8,1,-1.23165e-8,3.02709e-7,1,2.87634e-7,1.50423e-8,1,-1.50423e-8,1.79275e-8,1,-1.10662e-8,-4.92416e-8,1,-1.01104e-7,3.33888e-8,1,1.54874e-8,-4.55899e-9,1,-5.53264e-8,-3.52584e-7,1,-6.64604e-7,-1.72781e-7,1,-2.51802e-7,1.92491e-7,1,1.79028e-7,8.35312e-9,1,-3.08309e-8,1.73023e-8,1,-1.1561e-8,1.73023e-8,1,-1.1561e-8,0.449609,0,0.893225,0.35989,0,0.932995,0,0,0,-0.999998,-0.000780729,-0.00156354,-1,0,-0.00000259551,-1,-4.98244e-12,-0.00000259725,0.0735638,0,0.99729,-0.170958,0,-0.985278,-0.449609,0,-0.893226,-6.11165e-9,-1,4.82457e-8,1.53142e-7,-1,2.13551e-7,1.19139e-7,-1,2.10018e-7,-2.0184e-8,-1,1.20962e-8,-1.18417e-7,-1,-2.09097e-7,-1.10784e-8,-1,3.962e-9,-7.56902e-8,-1,-2.29411e-7,-2.81945e-9,-1,-3.82227e-8,1.34072e-8,-1,1.14289e-7,9.3359e-9,-1,6.10168e-8,1.12661e-8,-1,6.45676e-8,-6.92244e-9,-1,3.67281e-8,5.42816e-10,-1,3.80965e-8,1.00574e-8,-1,6.27586e-8,9.9111e-11,-1,-6.00388e-8,0,-1,0,-5.87807e-10,-1,3.90244e-8,-6.26768e-10,-1,4.1611e-8,-2.36743e-9,-1,5.79304e-8,-1.28904e-9,-1,5.01076e-8,-3.37305e-11,-1,4.38794e-8,-5.41978e-8,-1,-3.9845e-8,2.1006e-10,-1,4.66372e-8,2.30964e-9,-1,4.60003e-8,-2.68474e-8,-1,2.25775e-9,-2.44973e-8,-1,5.7624e-9,5.39979e-9,-1,4.79984e-8,1.03769e-8,-1,5.36046e-8,0,0,-1,0.689147,1.26765e-7,0.724622,0,-1,0,-1.20852e-8,-1,5.55914e-8,-3.11768e-8,-1,3.11768e-8,-1.49857e-8,-1,6.89336e-8,8.74091e-8,-1,1.73362e-7,-1.92274e-7,-1,-2.46378e-7,3.84212e-9,-1,5.01059e-8,-5.73505e-7,-1,-6.64856e-7,-5.05552e-7,-1,-7.1783e-7,-4.32755e-7,-1,-7.6392e-7,-5.50057e-7,-1,-0.00000124092,-1.35834e-8,-1,3.52139e-8,-1.85047e-8,-1,1.10907e-8,1.20059e-8,-1,4.85954e-8,0.0000188358,-1,0.0000268264,2.79038e-9,-1,4.47654e-8,-3.26615e-8,-1,-1.25287e-8,0,-1,0,6.21958e-10,-1,4.94602e-8,1.38217e-8,-1,2.1827e-8,2.67622e-9,-1,1.00176e-7,-6.07289e-8,-1,-2.16712e-7,1.6375e-7,-1,7.6812e-7,1.91982e-8,-1,1.59409e-7,-1.94591e-8,-1,-5.89043e-8,-1.57449e-8,-1,-4.08175e-8,0.405239,5.42442e-8,0.914211,-2.84467e-9,-1,4.49787e-8,-1.37806e-8,-1,3.17983e-8,1.05346e-7,-1,1.85708e-7,-1.78493e-8,-1,1.06972e-8,-4.42102e-8,-1,-4.1562e-8,-6.6697e-8,-1,-1.26639e-7,0.00000111494,-1,0.00000239957,9.96257e-9,-1,5.70987e-8,-3.01652e-9,-1,4.36876e-8,-5.51898e-9,-1,4.30713e-8,1.97886e-7,-1,3.38347e-7,-6.76756e-8,-1,-1.26096e-7,-9.59372e-8,-1,-1.42684e-7,1.67864e-9,-1,3.71644e-8,2.70834e-9,-1,5.99614e-8,-7.17712e-8,-1,-1.17991e-7,-6.43258e-9,-1,3.01062e-8,-3.35108e-9,-1,3.77879e-8,0.707109,-0.0000081038,-0.707105,0.707108,0.00000259162,-0.707106,0.707107,-0.0000107896,-0.707107,0.707086,0,-0.707127,0.707109,-0.0000471927,-0.707105,0.707106,-0.00000586876,-0.707108,-3.58083e-8,-1,3.58083e-8,6.77559e-7,-1,7.85482e-7,5.74403e-7,-1,8.15592e-7,4.91707e-7,-1,8.67981e-7,4.04292e-7,-1,9.12064e-7,-3.5901e-7,-1,-9.30712e-7,-4.21409e-8,-1,-5.71296e-7,4.22664e-8,-1,6.60852e-11,0,-1,0.00000161897,-4.96176e-8,-1,-3.34501e-7,6.06857e-8,-1,2.42272e-7,-2.16157e-8,-1,1.15528e-8,-1.70076e-8,-1,1.81619e-8,-2.99378e-7,-1,-3.47062e-7,0.00000293013,-1,0.00000383481,7.55031e-8,-1,9.70087e-7,-2.13289e-7,-1,-2.21318e-7,0,-1,0,-4.10183e-8,-1,2.74076e-8,-2.29968e-7,-1,-4.05947e-7,-1.73245e-7,-1,-4.4112e-7,-2.1615e-8,-1,1.15542e-8,-2.55966e-7,-1,-3.98833e-7,1.15332e-7,-1,4.22417e-7,-3.00845e-8,-1,3.00845e-8,-1.83382e-8,-1,4.20327e-8,4.85152e-7,-1,6.88863e-7,4.15267e-7,-1,7.33053e-7,3.41421e-7,-1,7.70239e-7,-1.91497e-7,-1,-2.87904e-7,-3.33888e-8,-1,-1.54874e-8,1.13107e-7,-1,1.87218e-7,-3.5855e-8,-1,2.21324e-8,-4.27127e-7,-1,-4.7178e-7,1.06619e-8,-1,6.60106e-8,-2.51626e-7,-1,-4.44182e-7,3.14089e-7,-1,4.02468e-7,-3.46046e-8,-1,2.3122e-8,-3.46045e-8,-1,2.3122e-8,-0.999998,0.000780721,-0.00156354,-1,4.98244e-12,-0.00000259725],\"faces\":[33,44,0,2,8,0,0,0,0,33,8,7,43,44,1,1,1,1,33,7,6,42,43,2,2,2,2,33,6,5,41,42,3,3,3,3,33,5,4,40,41,4,4,4,4,33,4,3,39,40,5,5,5,5,33,3,131,133,39,6,6,6,6,33,149,89,90,150,7,7,7,7,33,144,84,85,145,8,8,8,8,33,146,86,87,147,9,9,9,9,33,20,19,62,63,10,10,10,10,33,17,18,61,60,11,11,11,11,33,16,17,60,59,12,12,12,12,33,15,16,59,58,13,13,13,13,33,14,15,58,57,14,14,14,14,33,13,14,57,56,15,15,15,15,33,12,13,56,55,16,16,16,16,33,11,12,55,54,17,17,17,17,33,10,11,54,53,18,18,18,18,33,258,116,82,142,19,19,19,19,33,37,38,81,80,20,20,20,20,33,36,37,80,79,21,21,21,21,33,35,36,79,78,22,22,22,22,33,34,35,78,77,23,23,23,23,33,33,34,77,76,24,24,24,24,33,32,33,76,75,25,25,25,25,33,31,32,75,74,26,26,26,26,33,30,31,74,73,27,27,27,27,33,29,30,73,72,28,28,28,28,32,98,130,128,29,29,29,32,128,127,96,30,30,30,32,96,97,19,31,31,31,32,19,20,21,32,32,32,32,21,22,23,33,33,33,32,23,24,25,34,34,34,32,25,26,27,35,35,35,32,27,28,38,36,36,36,32,27,38,37,37,37,37,32,23,25,27,38,38,38,32,19,21,23,39,39,39,32,128,96,19,40,40,40,32,99,98,128,41,41,41,32,100,99,128,42,42,42,32,128,19,23,43,43,43,32,23,27,37,44,44,44,32,23,37,36,45,45,45,32,101,100,128,46,46,46,32,102,101,128,47,47,47,32,23,36,35,48,48,48,32,23,35,34,49,49,49,32,102,128,23,50,50,50,32,29,102,23,51,51,51,32,23,34,33,52,52,52,32,23,33,32,53,53,53,32,30,29,23,54,54,54,32,23,32,31,55,55,55,32,23,31,30,56,56,56,33,252,110,117,280,57,57,57,57,33,140,51,50,139,58,58,58,58,33,147,87,88,148,59,59,59,59,33,138,49,48,137,60,60,60,60,33,145,85,86,146,61,61,61,61,33,141,52,51,140,62,62,62,62,33,256,114,115,257,63,63,63,63,33,254,112,113,255,64,64,64,64,33,2,0,1,9,65,65,65,65,33,136,47,46,135,66,66,66,66,33,148,88,89,149,67,67,67,67,33,142,82,83,143,68,68,68,68,33,143,83,84,144,69,69,69,69,32,103,126,125,70,70,70,32,121,122,53,71,71,71,32,103,125,121,72,72,72,32,104,103,121,73,73,73,32,121,53,54,74,74,74,32,54,55,56,75,75,75,32,56,57,58,76,76,76,32,58,59,60,77,77,77,32,60,61,94,78,78,78,32,94,92,93,79,79,79,32,95,71,70,80,80,80,32,94,93,95,81,81,81,32,58,60,94,82,82,82,32,54,56,58,83,83,83,32,104,121,54,84,84,84,32,62,104,54,85,85,85,32,54,58,94,86,86,86,32,94,95,70,87,87,87,32,94,70,69,88,88,88,32,63,62,54,89,89,89,32,64,63,54,90,90,90,32,54,94,69,91,91,91,32,54,69,68,92,92,92,32,65,64,54,93,93,93,32,66,65,54,94,94,94,32,54,68,67,95,95,95,32,54,67,66,96,96,96,33,150,90,91,151,97,97,97,97,33,21,20,63,64,98,98,98,98,33,22,21,64,65,99,99,99,99,33,23,22,65,66,100,100,100,100,33,24,23,66,67,101,101,101,101,33,25,24,67,68,102,102,102,102,33,26,25,68,69,103,103,103,103,33,27,26,69,70,104,104,104,104,33,28,27,70,71,105,105,105,105,33,132,299,134,45,106,106,106,106,32,10,123,124,107,107,107,32,124,131,3,108,108,108,32,3,4,5,109,109,109,32,5,6,7,110,110,110,32,7,8,2,111,111,111,32,2,9,18,112,112,112,32,2,18,17,113,113,113,32,5,7,2,114,114,114,32,124,3,5,115,115,115,32,11,10,124,116,116,116,32,12,11,124,117,117,117,32,124,5,2,118,118,118,32,2,17,16,119,119,119,32,2,16,15,120,120,120,32,12,124,2,121,121,121,32,13,12,2,122,122,122,32,2,15,14,123,123,123,32,14,13,2,124,124,124,33,94,250,248,92,125,125,125,125,33,93,249,251,95,126,126,126,126,33,92,248,249,93,127,127,127,127,32,28,71,95,128,128,128,32,151,91,81,129,129,129,32,151,81,38,129,129,129,32,28,95,251,130,130,130,32,151,38,28,131,131,131,32,28,251,151,132,132,132,32,9,1,52,129,129,129,32,250,94,61,129,129,129,32,250,61,18,129,129,129,32,9,52,141,133,133,133,32,250,18,9,134,134,134,32,9,141,250,135,135,135,33,19,97,104,62,136,136,136,136,33,97,96,103,104,137,137,137,137,33,96,127,126,103,138,138,138,138,33,253,111,112,254,139,139,139,139,33,102,29,72,109,140,140,140,140,33,101,102,109,108,141,141,141,141,33,100,101,108,107,142,142,142,142,33,99,100,107,106,143,143,143,143,33,98,99,106,105,144,144,144,144,33,257,115,116,258,145,145,145,145,33,139,50,49,138,146,146,146,146,33,137,48,47,136,147,147,147,147,32,112,111,117,148,148,148,32,117,110,119,149,149,149,32,118,129,105,150,150,150,32,117,119,118,151,151,151,32,112,117,118,152,152,152,32,118,105,106,153,153,153,32,106,107,108,154,154,154,32,108,109,72,155,155,155,32,72,73,74,156,156,156,32,74,75,76,157,157,157,32,76,77,78,158,158,158,32,78,79,80,159,159,159,32,80,81,91,160,160,160,32,80,91,90,161,161,161,32,76,78,80,162,162,162,32,72,74,76,163,163,163,32,106,108,72,164,164,164,32,112,118,106,154,154,154,32,113,112,106,154,154,154,32,80,90,89,165,165,165,32,80,89,88,166,166,166,32,114,113,106,154,154,154,32,115,114,106,167,167,167,32,76,80,88,168,168,168,32,76,88,87,169,169,169,32,115,106,72,170,170,170,32,116,115,72,154,154,154,32,76,87,86,171,171,171,32,76,86,85,172,172,172,32,82,116,72,173,173,173,32,83,82,72,174,174,174,32,72,76,85,175,175,175,32,84,83,72,176,176,176,32,85,84,72,177,177,177,33,253,280,117,111,178,178,178,178,32,39,133,132,179,179,179,32,132,45,46,180,180,180,32,46,47,48,181,181,181,32,48,49,50,182,182,182,32,50,51,52,183,183,183,32,52,1,0,184,184,184,32,52,0,44,185,185,185,32,48,50,52,186,186,186,32,132,46,48,187,187,187,32,40,39,132,188,188,188,32,41,40,132,189,189,189,32,48,52,44,190,190,190,32,48,44,43,191,191,191,32,41,132,48,192,192,192,32,48,43,42,193,193,193,32,42,41,48,194,194,194,33,135,46,45,134,195,195,195,195,33,122,123,10,53,196,196,196,196,32,296,285,120,197,197,197,32,120,119,110,198,198,198,32,110,252,296,199,199,199,32,120,110,296,200,200,200,33,129,130,98,105,201,201,201,201,33,255,113,114,256,202,202,202,202,33,154,152,196,160,0,0,0,0,33,160,196,195,159,1,1,1,1,33,159,195,194,158,2,2,2,2,33,158,194,193,157,3,3,3,3,33,157,193,192,156,4,4,4,4,33,156,192,191,155,203,203,203,203,33,155,191,300,297,6,6,6,6,33,149,150,242,241,7,7,7,7,33,144,145,237,236,8,8,8,8,33,146,147,239,238,9,9,9,9,33,172,215,214,171,10,10,10,10,33,169,212,213,170,11,11,11,11,33,168,211,212,169,12,12,12,12,33,167,210,211,168,13,13,13,13,33,166,209,210,167,14,14,14,14,33,165,208,209,166,15,15,15,15,33,164,207,208,165,16,16,16,16,33,163,206,207,164,17,17,17,17,33,162,205,206,163,18,18,18,18,33,258,142,234,279,19,19,19,19,33,189,232,233,190,20,20,20,20,33,188,231,232,189,21,21,21,21,33,187,230,231,188,22,22,22,22,33,186,229,230,187,23,23,23,23,33,185,228,229,186,24,24,24,24,33,184,227,228,185,25,25,25,25,33,183,226,227,184,26,26,26,26,33,182,225,226,183,27,27,27,27,33,181,224,225,182,28,28,28,28,32,189,190,180,204,204,204,32,180,179,178,205,205,205,32,178,177,176,206,206,206,32,176,175,174,207,207,207,32,174,173,172,208,208,208,32,172,171,260,209,209,209,32,260,259,292,210,210,210,32,293,295,261,211,211,211,32,260,292,293,212,212,212,32,174,172,260,213,213,213,32,178,176,174,214,214,214,32,189,180,178,215,215,215,32,188,189,178,216,216,216,32,178,174,260,217,217,217,32,260,293,261,218,218,218,32,260,261,262,219,219,219,32,187,188,178,220,220,220,32,186,187,178,221,221,221,32,260,262,263,222,222,222,32,260,263,264,223,223,223,32,186,178,260,224,224,224,32,185,186,260,225,225,225,32,260,264,265,226,226,226,32,260,265,181,227,227,227,32,184,185,260,228,228,228,32,183,184,260,229,229,229,32,260,181,182,230,230,230,32,182,183,260,231,231,231,33,252,280,281,273,232,232,232,232,33,140,139,202,203,58,58,58,58,33,147,148,240,239,59,59,59,59,33,138,137,200,201,60,60,60,60,33,145,146,238,237,61,61,61,61,33,141,140,203,204,233,233,233,233,33,256,257,278,277,63,63,63,63,33,254,255,276,275,64,64,64,64,33,154,161,153,152,65,65,65,65,33,136,135,198,199,66,66,66,66,33,148,149,241,240,67,67,67,67,33,142,143,235,234,68,68,68,68,33,143,144,236,235,69,69,69,69,32,222,223,247,234,234,234,32,247,245,244,235,235,235,32,246,213,212,236,236,236,32,247,244,246,237,237,237,32,221,222,247,238,238,238,32,220,221,247,239,239,239,32,247,246,212,240,240,240,32,212,211,210,241,241,241,32,210,209,208,242,242,242,32,208,207,206,243,243,243,32,206,205,287,244,244,244,32,206,287,286,245,245,245,32,210,208,206,246,246,246,32,247,212,210,247,247,247,32,219,220,247,248,248,248,32,219,247,210,249,249,249,32,210,206,286,250,250,250,32,290,291,266,251,251,251,32,210,286,290,252,252,252,32,218,219,210,253,253,253,32,217,218,210,254,254,254,32,210,290,266,255,255,255,32,210,266,267,256,256,256,32,216,217,210,251,251,251,32,215,216,210,257,257,257,32,210,267,214,258,258,258,32,214,215,210,259,259,259,33,150,151,243,242,97,97,97,97,33,173,216,215,172,98,98,98,98,33,174,217,216,173,99,99,99,99,33,175,218,217,174,100,100,100,100,33,176,219,218,175,101,101,101,101,33,177,220,219,176,102,102,102,102,33,178,221,220,177,103,103,103,103,33,179,222,221,178,104,104,104,104,33,180,223,222,179,105,105,105,105,33,298,197,134,299,260,260,260,260,32,169,170,161,261,261,261,32,161,154,160,262,262,262,32,160,159,158,263,263,263,32,158,157,156,264,264,264,32,156,155,297,265,265,265,32,289,288,162,266,266,266,32,156,297,289,267,267,267,32,160,158,156,268,268,268,32,169,161,160,269,269,269,32,168,169,160,270,270,270,32,160,156,289,271,271,271,32,289,162,163,272,272,272,32,289,163,164,273,273,273,32,167,168,160,274,274,274,32,166,167,160,275,275,275,32,160,289,164,276,276,276,32,165,166,160,277,277,277,32,160,164,165,278,278,278,33,246,244,248,250,125,125,125,125,33,245,247,251,249,126,126,126,126,33,244,245,249,248,127,127,127,127,32,190,233,243,129,129,129,32,251,247,223,130,130,130,32,251,223,180,130,130,130,32,190,243,151,129,129,129,32,251,180,190,279,279,279,32,190,151,251,280,280,280,32,170,213,246,129,129,129,32,141,204,153,281,281,281,32,141,153,161,282,282,282,32,170,246,250,130,130,130,32,141,161,170,283,283,283,32,170,250,141,284,284,284,33,171,214,267,260,136,136,136,136,33,260,267,266,259,137,137,137,137,33,259,266,291,292,138,138,138,138,33,253,254,275,274,139,139,139,139,33,265,272,224,181,140,140,140,140,33,264,271,272,265,141,141,141,141,33,263,270,271,264,142,142,142,142,33,262,269,270,263,143,143,143,143,33,261,268,269,262,144,144,144,144,33,257,258,279,278,145,145,145,145,33,139,138,201,202,146,146,146,146,33,137,136,199,200,147,147,147,147,32,242,243,233,285,285,285,32,233,232,231,286,286,286,32,231,230,229,287,287,287,32,229,228,227,288,288,288,32,227,226,225,289,289,289,32,225,224,272,290,290,290,32,272,271,270,251,251,251,32,270,269,268,251,251,251,32,268,294,282,291,291,291,32,282,283,273,292,292,292,32,281,274,275,251,251,251,32,282,273,281,293,293,293,32,270,268,282,294,294,294,32,225,272,270,295,295,295,32,229,227,225,296,296,296,32,233,231,229,297,297,297,32,241,242,233,298,298,298,32,240,241,233,299,299,299,32,270,282,281,300,300,300,32,270,281,275,251,251,251,32,240,233,229,301,301,301,32,239,240,229,302,302,302,32,270,275,276,251,251,251,32,270,276,277,251,251,251,32,238,239,229,303,303,303,32,237,238,229,304,304,304,32,270,277,278,219,219,219,32,270,278,279,305,305,305,32,237,229,225,306,306,306,32,236,237,225,307,307,307,32,225,270,279,308,308,308,32,225,279,234,251,251,251,32,235,236,225,302,302,302,32,225,234,235,251,251,251,33,253,274,281,280,178,178,178,178,32,152,153,204,309,309,309,32,204,203,202,310,310,310,32,202,201,200,311,311,311,32,200,199,198,312,312,312,32,198,197,298,313,313,313,32,298,300,191,251,251,251,32,298,191,192,314,314,314,32,200,198,298,315,315,315,32,204,202,200,316,316,316,32,196,152,204,317,317,317,32,196,204,200,318,318,318,32,200,298,192,319,319,319,32,200,192,193,320,320,320,32,195,196,200,321,321,321,32,200,193,194,322,322,322,32,194,195,200,323,323,323,33,135,134,197,198,195,195,195,195,33,287,205,162,288,196,196,196,196,32,284,285,296,197,197,197,32,296,252,273,199,199,199,32,273,283,284,324,324,324,32,296,273,284,325,325,325,33,294,268,261,295,201,201,201,201,33,255,256,277,276,202,202,202,202],\"vertices\":[156.808,4,-42.988,164.932,4,-50.7141,156.808,0.999998,-42.988,99.8334,1,-4.91867,110.07,1,-10.0715,120.042,0.999999,-15.7205,129.725,0.999999,-21.852,139.095,0.999999,-28.4512,148.13,0.999998,-35.5022,164.932,0.999998,-50.7141,86.2935,1,-7.66759,96.412,0.999999,-12.1528,106.298,0.999999,-17.129,115.928,0.999999,-22.5844,125.279,0.999999,-28.5057,134.328,0.999998,-34.8788,143.054,0.999998,-41.6881,151.434,0.999998,-48.9174,159.274,0.999998,-56.3727,69.5643,0.999999,-21.5791,79.0204,0.999999,-25.2266,88.286,0.999999,-29.3338,97.339,0.999999,-33.8906,106.157,0.999998,-38.8862,114.72,0.999998,-44.3084,123.006,0.999998,-50.1443,130.997,0.999998,-56.3798,138.671,0.999997,-62.9997,145.835,0.999997,-69.8117,66.8684,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5679,93.5667,0.999998,-40.9481,102.043,0.999998,-45.7501,110.274,0.999998,-50.9622,118.239,0.999998,-56.5719,125.92,0.999997,-62.5657,133.297,0.999997,-68.9291,140.176,0.999997,-75.4703,99.8334,4,-4.91867,110.07,4,-10.0715,120.042,4,-15.7205,129.725,4,-21.852,139.095,4,-28.4512,148.13,4,-35.5022,100.475,4,-3.56229,110.778,4,-8.74826,120.814,4,-14.4335,130.559,4,-20.6044,139.989,4,-27.246,149.082,4,-34.3423,157.816,4,-41.8762,165.993,4,-49.6531,86.2935,4,-7.66759,96.412,4,-12.1528,106.298,4,-17.129,115.928,4,-22.5844,125.279,4,-28.5057,134.328,4,-34.8788,143.054,4,-41.6881,151.434,4,-48.9174,159.274,4,-56.3727,69.5643,4,-21.5791,79.0204,4,-25.2266,88.286,4,-29.3338,97.339,4,-33.8906,106.157,4,-38.8862,114.72,4,-44.3084,123.006,4,-50.1443,130.997,4,-56.3798,138.671,4,-62.9997,145.835,4,-69.8117,66.8684,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5679,93.5667,4,-40.9481,102.043,4,-45.7501,110.274,4,-50.9622,118.239,4,-56.5719,125.92,4,-62.5657,133.297,4,-68.9291,140.176,4,-75.4703,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9243,92.8594,4,-42.2714,101.272,4,-47.0371,109.441,4,-52.2098,117.346,4,-57.7771,124.968,4,-63.7256,132.289,4,-70.0409,139.115,4,-76.5313,164.226,4,-64.1488,153.265,4,-75.109,156.801,4,-58.8455,147.962,4,-67.6843,50.1728,0.999999,-15.6968,59.9408,0.999999,-18.3999,19.4549,0.999999,-18.4667,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,50.1728,4,-15.6968,59.9408,4,-18.3999,19.4549,4,-18.4667,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,9.00004,4,-19.0114,11.5313,4,-18.7169,0.250021,4,-19,0.250039,3.97706,-19,79.1696,4,-5.26265,79.6142,4,-5.09115,79.6142,1,-5.09115,89.9312,1,-1.11145,45.8467,4,-14.4845,45.2417,4,-14.5894,45.2417,0.999999,-14.5894,34.4821,1,-16.4564,17.1888,4,-18.2996,17.1888,0.999999,-18.2996,90.5878,1,-0.820387,92.4385,4,-0.00000619491,90.5878,4,-0.820387,100.475,-1.55712e-7,-3.56229,110.778,-3.82399e-7,-8.74826,120.814,-6.30909e-7,-14.4335,130.559,-9.00646e-7,-20.6044,139.989,-0.00000119096,-27.246,149.082,-0.00000150115,-34.3423,157.816,-0.00000183047,-41.8762,165.993,-0.00000217041,-49.6531,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9243,92.8594,-0.00000184774,-42.2714,101.272,-0.00000205606,-47.0371,109.441,-0.00000228216,-52.2098,117.346,-0.00000252552,-57.7771,124.968,-0.00000278553,-63.7256,132.289,-0.00000306158,-70.0409,139.115,-0.00000334529,-76.5313,156.808,-4,-42.988,164.932,-4,-50.7141,156.808,-1,-42.988,99.8334,-1,-4.91867,110.07,-1,-10.0715,120.042,-1,-15.7205,129.725,-1,-21.852,139.095,-1,-28.4512,148.13,-1,-35.5022,164.932,-1,-50.7141,86.2935,-1,-7.66759,96.412,-1,-12.1528,106.298,-1,-17.129,115.928,-1,-22.5844,125.279,-1,-28.5057,134.328,-1,-34.8788,143.054,-1,-41.6881,151.434,-1,-48.9174,159.274,-1,-56.3727,69.5643,-1,-21.5791,79.0204,-1,-25.2266,88.286,-1,-29.3338,97.339,-1,-33.8906,106.157,-1,-38.8862,114.72,-1,-44.3084,123.006,-1,-50.1443,130.997,-1,-56.3798,138.671,-1,-62.9997,145.835,-1,-69.8117,66.8684,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5679,93.5667,-1,-40.9481,102.043,-1,-45.7501,110.274,-1,-50.9622,118.239,-1,-56.5719,125.92,-1,-62.5657,133.297,-1,-68.9291,140.176,-1,-75.4703,99.8334,-4,-4.91867,110.07,-4,-10.0715,120.042,-4,-15.7205,129.725,-4,-21.852,139.095,-4,-28.4512,148.13,-4,-35.5022,100.475,-4,-3.56229,110.778,-4,-8.74826,120.814,-4,-14.4335,130.559,-4,-20.6044,139.989,-4,-27.246,149.082,-4,-34.3423,157.816,-4,-41.8762,165.993,-4,-49.6531,86.2935,-4,-7.66759,96.412,-4,-12.1528,106.298,-4,-17.129,115.928,-4,-22.5844,125.279,-4,-28.5057,134.328,-4,-34.8788,143.054,-4,-41.6881,151.434,-4,-48.9174,159.274,-4,-56.3727,69.5643,-4,-21.5791,79.0204,-4,-25.2266,88.286,-4,-29.3338,97.339,-4,-33.8906,106.157,-4,-38.8862,114.72,-4,-44.3084,123.006,-4,-50.1443,130.997,-4,-56.3798,138.671,-4,-62.9997,145.835,-4,-69.8117,66.8684,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5679,93.5667,-4,-40.9481,102.043,-4,-45.7501,110.274,-4,-50.9622,118.239,-4,-56.5719,125.92,-4,-62.5657,133.297,-4,-68.9291,140.176,-4,-75.4703,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9243,92.8594,-4,-42.2714,101.272,-4,-47.0371,109.441,-4,-52.2098,117.346,-4,-57.7771,124.968,-4,-63.7256,132.289,-4,-70.0409,139.115,-4,-76.5313,164.226,-4,-64.1488,153.265,-4,-75.109,156.801,-4,-58.8455,147.962,-4,-67.6843,164.226,-0.00000280403,-64.1488,153.265,-0.00000328312,-75.109,156.801,-0.00000257222,-58.8455,147.962,-0.00000295858,-67.6843,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,50.1728,-1,-15.6968,59.9408,-1,-18.3999,19.4549,-1,-18.4667,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,50.1728,-4,-15.6968,59.9408,-4,-18.3999,19.4549,-4,-18.4667,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,9.00004,-8.31017e-7,-19.0114,9.00004,-4,-19.0114,11.5313,-4,-18.7169,0.250021,-4,-19,0.250039,-3.97706,-19,0.250039,-8.30515e-7,-19,79.1696,-4,-5.26265,79.6142,-4,-5.09115,79.6142,-1,-5.09115,89.9312,-1,-1.11145,45.8467,-4,-14.4845,45.2417,-4,-14.5894,45.2417,-1,-14.5894,34.4821,-1,-16.4564,17.1888,-4,-18.2996,17.1888,-1,-18.2996,0.250039,-8.30515e-7,-19,90.5878,-1,-0.820387,92.4385,-4,-0.00000584522,92.4385,-2.70962e-13,-0.00000619888,90.5878,-4,-0.820387],\"metadata\":{\"generator\":\"io_three\",\"normals\":326,\"uvs\":0,\"vertices\":301,\"version\":3,\"faces\":422,\"type\":\"Geometry\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./build/models.json\n// module id = 17\n// module chunks = 0","import * as THREE from 'three';\nimport { Rail, Point, End, Pier } from 'librail';\nimport { ModelManager } from './ModelManager';\n\n// 生のオブジェクトをビューが扱う代わりに\n// こいつがシーンとのやりとりを中継する\n// また、ポイントの方向などの状態も持たせておく。\n// レールとしての意味はRailオブジェクトに考えさせて、\n// こいつは糊をやっていく\n// * ビューの要求でシーンにオブジェクトを追加・削除する\n// * \n\nexport class Model {\n    // temporary, move to other module\n    public static pointToVec3(p: Point): THREE.Vector3 {\n        const d = 60;\n        const l = 54;\n        const h = 66 / 4;\n\n        let [sx, sy] = p.single.toReal();\n        let [dx, dy] = p.double.toReal();\n\n        let x = l * sx + d * dx;\n        let y = l * sy + d * dy;\n        let z = h * p.up;\n\n        // convert coordinate system to three.js style\n        return new THREE.Vector3(x, z, -y);\n    }\n\n    protected setupMesh(mesh: THREE.Mesh, origin: End) {\n        // set position\n        mesh.position.copy(Model.pointToVec3(origin.point));\n\n        // rotate along Y-axis \n        let rad = Math.PI / 4 * origin.dir.dir;\n        mesh.rotateY(rad);\n    }\n}\n\nexport class RailModel extends Model {\n    public constructor(private models: THREE.Mesh[], private rail: Rail) {\n        super();\n        models.forEach(m =>\n            this.setupMeshWithRail(m, rail)\n        );\n    }\n\n    protected setupMeshWithRail(mesh: THREE.Mesh, rail: Rail) {\n        super.setupMesh(mesh, rail.instance.origin);\n\n        // rotate along X-axis if the rail is flipped\n        if (rail.instance.flip.isYes()) {\n            mesh.rotateX(Math.PI);\n        }\n    }\n\n    public addToScene(scene: THREE.Scene) {\n        let mat = new THREE.MeshBasicMaterial();\n        let geo = new THREE.SphereGeometry(10, 8, 8);\n        let msh = new THREE.Mesh(geo, mat);\n        msh.position.copy(Model.pointToVec3(this.rail.ends()[0].point));\n        scene.add(msh);\n        this.models.forEach(m =>\n            scene.add(m)\n        );\n    }\n\n    public removeFromScene(scene: THREE.Scene) {\n        this.models.forEach(m =>\n            scene.remove(m)\n        );\n    }\n}\n\nexport class StraightModel extends RailModel {\n    constructor(rail: Rail) {\n        super([ModelManager.create('straight_1')], rail);\n    }\n}\n\nexport class CurveModel extends RailModel {\n    constructor(rail: Rail) {\n        super([ModelManager.create('curve_8')], rail);\n    }\n}\nexport class SlopeModel extends RailModel {\n    constructor(rail: Rail) {\n        super([ModelManager.create('slope')], rail);\n    }\n}\nexport class TurnoutModel extends RailModel {\n    constructor(rail: Rail) {\n        var models = []\n        if (rail.instance.origin.pole.isPlus()) {\n            models = ['turnout_L_a', 'turnout_L_b', 'turnout_L_ab']\n        } else {\n            models = ['turnout_R_a', 'turnout_R_b', 'turnout_R_ab']\n        }\n        super(models.map(name => ModelManager.create(name)), rail);        \n    }\n}\n/*\nexport class PierModel extends Model {\n    public constructor(private pier: Pier) {\n        super();\n        models.forEach(m =>\n            this.setupMeshWithRail(m, rail)\n        );\n    }\n\n    constructor(rail: Pier) {\n        super([ModelManager.create('pier_4')], rail);\n    }\n}\n*/\n\n\n// WEBPACK FOOTER //\n// ./src/model/Model.ts","import { Dir, End, Point, Pole, Rot, Rail, Pier, MiniPier } from 'librail';\n\nexport interface FrontierManagerObserver {\n    selectionChanged?(layout: FrontierManager, selection: End);\n}\n\nexport class FrontierManager {\n    private observer_: FrontierManagerObserver = null;\n    private frontiers_ = [new End(Point.zero(), Dir.West, Pole.Minus)];\n\n    get observer(): FrontierManagerObserver {\n        return this.observer_;\n    }\n\n    set observer(ob: FrontierManagerObserver) {\n        this.observer_ = ob;\n    }\n\n    public get frontiers(): Array<End> {\n        return this.frontiers_;\n    }\n\n    public get selection(): End {\n        console.log(this.frontiers);\n        return this.frontiers[this.frontiers.length - 1];\n    }\n\n    private notifySelectionChanged() {\n        if (this.observer) {\n            if (this.observer.selectionChanged) {\n                this.observer.selectionChanged(this, this.selection);\n            }\n        }\n    }\n\n    public selectNext() {\n        let e = this.selection;\n        this.frontiers_.splice(this.frontiers.length - 1, 1);\n        this.frontiers_.splice(0, 0, e);\n        \n        this.notifySelectionChanged();\n    }\n\n    private toggleOpenEnd(end: End) {\n        let i = this.frontiers_.findIndex(e => end.match(e));\n        if (i >= 0) {\n            this.frontiers_.splice(i, 1);\n        } else {\n            this.frontiers_.push(end);\n        }\n    }\n\n    public addEnd(end: End) {\n        this.toggleOpenEnd(end);\n        this.notifySelectionChanged();\n    }\n    \n    public removeEnd(end: End) {\n        this.toggleOpenEnd(end);\n        this.notifySelectionChanged();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/rail/FrontierManager.ts"],"sourceRoot":""}