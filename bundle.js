/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Pole_1 = __webpack_require__(5);
/**
 * レールの端点を表す．
 * 変換としては，回転を行ったのち平行移動を行う．
 */
class End {
    constructor(point, dir, pole) {
        this.point = point;
        this.dir = dir;
        this.pole = pole;
    }
    static of(point, dir, pole) {
        return new this(point, dir, pole);
    }
    static plus(point, dir) {
        return new this(point, dir, Pole_1.Pole.Plus);
    }
    static minus(point, dir) {
        return new this(point, dir, Pole_1.Pole.Minus);
    }
    /**
     * 2つのレールの端点として見たとき，カチっとはまるかどうか
     * @param other もう片方の端点
     */
    match(other) {
        return this.equal(other.opposite());
    }
    opposite() {
        return End.of(this.point, this.dir.opposite(), this.pole.opposite());
    }
    /**
     * thisが意味する座標変換を行う．つまり，ローカルからグローバル
     * @param target ローカル座標
     */
    apply(local) {
        return End.of(this.point.apply(this.dir.apply(local.point)), this.dir.apply(local.dir), this.pole.apply(local.pole));
    }
    equal(other) {
        return this.point.equal(other.point) &&
            this.dir.equal(other.dir) &&
            this.pole.equal(other.pole);
    }
    valueOf() {
        return this.point.valueOf() + "," + this.dir.valueOf() + "," + this.pole.valueOf();
    }
    toString() {
        return this.valueOf();
    }
}
exports.End = End;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Expresses a point in the `Rot45' coordinate system.
 * Rot45 has four basis vectors (➡️, ↗️, ⬆️, ↖️), and its coeffcients are integers.
 * the values have no unit.
 */
class Rot {
    constructor(a, b = 0, c = 0, d = 0) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
    }
    static zero() {
        return new this(0, 0, 0, 0);
    }
    static of(a, b = 0, c = 0, d = 0) {
        return new this(a, b, c, d);
    }
    toReal() {
        return [this.a + Math.SQRT1_2 * (this.b - this.d),
            this.c + Math.SQRT1_2 * (this.b + this.d)];
    }
    add(that) {
        return new Rot(this.a + that.a, this.b + that.b, this.c + that.c, this.d + that.d);
    }
    sub(that) {
        return this.add(that.neg());
    }
    /**
     * negate the point, rotate 180 degree around the origin
     */
    neg() {
        return new Rot(-this.a, -this.b, -this.c, -this.d);
    }
    mul(that) {
        return new Rot(this.a * that.a - this.b * that.d - this.c * that.c - this.d * that.b, this.a * that.b + this.b * that.a - this.c * that.d - this.d * that.c, this.a * that.c + this.b * that.b + this.c * that.a - this.d * that.d, this.a * that.d + this.b * that.c + this.c * that.b + this.d * that.a);
    }
    /**
     * apply transform operation
     * @param target the operand
     */
    apply(target) {
        return this.add(target);
    }
    hasEffect() {
        return !this.isZero();
    }
    isZero() {
        return this.a === 0 && this.b === 0 && this.c === 0 && this.d === 0;
    }
    equal(other) {
        return this.a === other.a &&
            this.b === other.b &&
            this.c === other.c &&
            this.d === other.d;
    }
    stringifyWithSign(n) {
        if (n < 0) {
            return n.toString();
        }
        else {
            return "+" + n.toString();
        }
    }
    valueOf() {
        var s = this.a.toString();
        if (this.b === 0 && this.c === 0 && this.d === 0) {
            return s;
        }
        s += this.stringifyWithSign(this.b);
        if (this.c === 0 && this.d === 0) {
            return s;
        }
        s += this.stringifyWithSign(this.c);
        if (this.d === 0) {
            return s;
        }
        s += this.stringifyWithSign(this.d);
        return s;
    }
}
exports.Rot = Rot;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Rot_1 = __webpack_require__(1);
class Point {
    /**
     * @param single 単線
     * @param double 複線
     * @param up 段差，1はミニ橋脚の高さ，4はブロック橋脚の高さ
     */
    constructor(single, double, up) {
        this.single = single;
        this.double = double;
        this.up = up;
    }
    static zero() {
        return new Point(Rot_1.Rot.zero(), Rot_1.Rot.zero(), 0);
    }
    static of(s, d = Rot_1.Rot.zero(), u = 0) {
        return new Point(s, d, u);
    }
    // blenderの世界からthree.jsの世界のベクトルに移す
    // なのでx軸周りで回転している
    /*
        public toVector3(): Vector3 {
            const SINGLE = 54;
            const DOUBLE = 60;
            const HEIGHT = 66 / 4;
    
            const [sx, sy] = this.single.toReal();
            const [dx, dy] = this.double.toReal();
    
            return new Vector3(
                SINGLE * sx + DOUBLE * dx,
                HEIGHT * this.up,
                -(SINGLE * sy + DOUBLE * dy)
            )
        }
    */
    add(other) {
        return new Point(this.single.add(other.single), this.double.add(other.double), this.up + other.up);
    }
    sub(other) {
        return this.add(other.neg());
    }
    neg() {
        return new Point(this.single.neg(), this.double.neg(), -this.up);
    }
    apply(target) {
        return this.add(target);
    }
    equal(other) {
        return this.single.equal(other.single) &&
            this.double.equal(other.double) &&
            this.up === other.up;
    }
    hasEffect() {
        return !this.isZero();
    }
    isZero() {
        return this.single.isZero() && this.double.isZero() && this.up === 0;
    }
    valueOf() {
        return this.single.valueOf() + ":" + this.double.valueOf() + ":" + this.up.toString();
    }
}
exports.Point = Point;


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLRenderTargetCube", function() { return WebGLRenderTargetCube; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLRenderTarget", function() { return WebGLRenderTarget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLRenderer", function() { return WebGLRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShaderLib", function() { return ShaderLib; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UniformsLib", function() { return UniformsLib; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UniformsUtils", function() { return UniformsUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShaderChunk", function() { return ShaderChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FogExp2", function() { return FogExp2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fog", function() { return Fog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Scene", function() { return Scene; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LensFlare", function() { return LensFlare; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sprite", function() { return Sprite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOD", function() { return LOD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkinnedMesh", function() { return SkinnedMesh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Skeleton", function() { return Skeleton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bone", function() { return Bone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mesh", function() { return Mesh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineSegments", function() { return LineSegments; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineLoop", function() { return LineLoop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Line", function() { return Line; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Points", function() { return Points; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Group", function() { return Group; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoTexture", function() { return VideoTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTexture", function() { return DataTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompressedTexture", function() { return CompressedTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeTexture", function() { return CubeTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CanvasTexture", function() { return CanvasTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthTexture", function() { return DepthTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Texture", function() { return Texture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompressedTextureLoader", function() { return CompressedTextureLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTextureLoader", function() { return DataTextureLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeTextureLoader", function() { return CubeTextureLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextureLoader", function() { return TextureLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectLoader", function() { return ObjectLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaterialLoader", function() { return MaterialLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BufferGeometryLoader", function() { return BufferGeometryLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultLoadingManager", function() { return DefaultLoadingManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadingManager", function() { return LoadingManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JSONLoader", function() { return JSONLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageLoader", function() { return ImageLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageBitmapLoader", function() { return ImageBitmapLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FontLoader", function() { return FontLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileLoader", function() { return FileLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Loader", function() { return Loader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoaderUtils", function() { return LoaderUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cache", function() { return Cache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioLoader", function() { return AudioLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpotLightShadow", function() { return SpotLightShadow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpotLight", function() { return SpotLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointLight", function() { return PointLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RectAreaLight", function() { return RectAreaLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HemisphereLight", function() { return HemisphereLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectionalLightShadow", function() { return DirectionalLightShadow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectionalLight", function() { return DirectionalLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AmbientLight", function() { return AmbientLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LightShadow", function() { return LightShadow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Light", function() { return Light; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StereoCamera", function() { return StereoCamera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerspectiveCamera", function() { return PerspectiveCamera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrthographicCamera", function() { return OrthographicCamera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeCamera", function() { return CubeCamera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayCamera", function() { return ArrayCamera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Camera", function() { return Camera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioListener", function() { return AudioListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PositionalAudio", function() { return PositionalAudio; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioContext", function() { return AudioContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioAnalyser", function() { return AudioAnalyser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Audio", function() { return Audio; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VectorKeyframeTrack", function() { return VectorKeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringKeyframeTrack", function() { return StringKeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuaternionKeyframeTrack", function() { return QuaternionKeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberKeyframeTrack", function() { return NumberKeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorKeyframeTrack", function() { return ColorKeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BooleanKeyframeTrack", function() { return BooleanKeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyMixer", function() { return PropertyMixer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyBinding", function() { return PropertyBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyframeTrack", function() { return KeyframeTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationUtils", function() { return AnimationUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationObjectGroup", function() { return AnimationObjectGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationMixer", function() { return AnimationMixer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationClip", function() { return AnimationClip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uniform", function() { return Uniform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InstancedBufferGeometry", function() { return InstancedBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BufferGeometry", function() { return BufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Geometry", function() { return Geometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterleavedBufferAttribute", function() { return InterleavedBufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InstancedInterleavedBuffer", function() { return InstancedInterleavedBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterleavedBuffer", function() { return InterleavedBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InstancedBufferAttribute", function() { return InstancedBufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Face3", function() { return Face3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Object3D", function() { return Object3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Raycaster", function() { return Raycaster; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Layers", function() { return Layers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventDispatcher", function() { return EventDispatcher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Clock", function() { return Clock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuaternionLinearInterpolant", function() { return QuaternionLinearInterpolant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearInterpolant", function() { return LinearInterpolant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DiscreteInterpolant", function() { return DiscreteInterpolant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubicInterpolant", function() { return CubicInterpolant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Interpolant", function() { return Interpolant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Triangle", function() { return Triangle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Math", function() { return _Math; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Spherical", function() { return Spherical; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cylindrical", function() { return Cylindrical; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Plane", function() { return Plane; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Frustum", function() { return Frustum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sphere", function() { return Sphere; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ray", function() { return Ray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Matrix4", function() { return Matrix4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Matrix3", function() { return Matrix3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Box3", function() { return Box3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Box2", function() { return Box2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Line3", function() { return Line3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Euler", function() { return Euler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector4", function() { return Vector4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector3", function() { return Vector3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector2", function() { return Vector2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Quaternion", function() { return Quaternion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Color", function() { return Color; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImmediateRenderObject", function() { return ImmediateRenderObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VertexNormalsHelper", function() { return VertexNormalsHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpotLightHelper", function() { return SpotLightHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkeletonHelper", function() { return SkeletonHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointLightHelper", function() { return PointLightHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RectAreaLightHelper", function() { return RectAreaLightHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HemisphereLightHelper", function() { return HemisphereLightHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GridHelper", function() { return GridHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PolarGridHelper", function() { return PolarGridHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FaceNormalsHelper", function() { return FaceNormalsHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectionalLightHelper", function() { return DirectionalLightHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CameraHelper", function() { return CameraHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoxHelper", function() { return BoxHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Box3Helper", function() { return Box3Helper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaneHelper", function() { return PlaneHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrowHelper", function() { return ArrowHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AxesHelper", function() { return AxesHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Shape", function() { return Shape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Path", function() { return Path; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShapePath", function() { return ShapePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Font", function() { return Font; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurvePath", function() { return CurvePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Curve", function() { return Curve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShapeUtils", function() { return ShapeUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SceneUtils", function() { return SceneUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLUtils", function() { return WebGLUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WireframeGeometry", function() { return WireframeGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParametricGeometry", function() { return ParametricGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParametricBufferGeometry", function() { return ParametricBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TetrahedronGeometry", function() { return TetrahedronGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TetrahedronBufferGeometry", function() { return TetrahedronBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OctahedronGeometry", function() { return OctahedronGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OctahedronBufferGeometry", function() { return OctahedronBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IcosahedronGeometry", function() { return IcosahedronGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IcosahedronBufferGeometry", function() { return IcosahedronBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DodecahedronGeometry", function() { return DodecahedronGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DodecahedronBufferGeometry", function() { return DodecahedronBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PolyhedronGeometry", function() { return PolyhedronGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PolyhedronBufferGeometry", function() { return PolyhedronBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TubeGeometry", function() { return TubeGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TubeBufferGeometry", function() { return TubeBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TorusKnotGeometry", function() { return TorusKnotGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TorusKnotBufferGeometry", function() { return TorusKnotBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TorusGeometry", function() { return TorusGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TorusBufferGeometry", function() { return TorusBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextGeometry", function() { return TextGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextBufferGeometry", function() { return TextBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SphereGeometry", function() { return SphereGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SphereBufferGeometry", function() { return SphereBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RingGeometry", function() { return RingGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RingBufferGeometry", function() { return RingBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaneGeometry", function() { return PlaneGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaneBufferGeometry", function() { return PlaneBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LatheGeometry", function() { return LatheGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LatheBufferGeometry", function() { return LatheBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShapeGeometry", function() { return ShapeGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShapeBufferGeometry", function() { return ShapeBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExtrudeGeometry", function() { return ExtrudeGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExtrudeBufferGeometry", function() { return ExtrudeBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EdgesGeometry", function() { return EdgesGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConeGeometry", function() { return ConeGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConeBufferGeometry", function() { return ConeBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CylinderGeometry", function() { return CylinderGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CylinderBufferGeometry", function() { return CylinderBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CircleGeometry", function() { return CircleGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CircleBufferGeometry", function() { return CircleBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoxGeometry", function() { return BoxGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoxBufferGeometry", function() { return BoxBufferGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShadowMaterial", function() { return ShadowMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpriteMaterial", function() { return SpriteMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RawShaderMaterial", function() { return RawShaderMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShaderMaterial", function() { return ShaderMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointsMaterial", function() { return PointsMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshPhysicalMaterial", function() { return MeshPhysicalMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshStandardMaterial", function() { return MeshStandardMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshPhongMaterial", function() { return MeshPhongMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshToonMaterial", function() { return MeshToonMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshNormalMaterial", function() { return MeshNormalMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshLambertMaterial", function() { return MeshLambertMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshDepthMaterial", function() { return MeshDepthMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshDistanceMaterial", function() { return MeshDistanceMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshBasicMaterial", function() { return MeshBasicMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineDashedMaterial", function() { return LineDashedMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineBasicMaterial", function() { return LineBasicMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Material", function() { return Material; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float64BufferAttribute", function() { return Float64BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float32BufferAttribute", function() { return Float32BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint32BufferAttribute", function() { return Uint32BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int32BufferAttribute", function() { return Int32BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint16BufferAttribute", function() { return Uint16BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int16BufferAttribute", function() { return Int16BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint8ClampedBufferAttribute", function() { return Uint8ClampedBufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint8BufferAttribute", function() { return Uint8BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int8BufferAttribute", function() { return Int8BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BufferAttribute", function() { return BufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArcCurve", function() { return ArcCurve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CatmullRomCurve3", function() { return CatmullRomCurve3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubicBezierCurve", function() { return CubicBezierCurve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubicBezierCurve3", function() { return CubicBezierCurve3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EllipseCurve", function() { return EllipseCurve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineCurve", function() { return LineCurve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineCurve3", function() { return LineCurve3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuadraticBezierCurve", function() { return QuadraticBezierCurve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuadraticBezierCurve3", function() { return QuadraticBezierCurve3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SplineCurve", function() { return SplineCurve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "REVISION", function() { return REVISION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOUSE", function() { return MOUSE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceNone", function() { return CullFaceNone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceBack", function() { return CullFaceBack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceFront", function() { return CullFaceFront; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceFrontBack", function() { return CullFaceFrontBack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrontFaceDirectionCW", function() { return FrontFaceDirectionCW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrontFaceDirectionCCW", function() { return FrontFaceDirectionCCW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicShadowMap", function() { return BasicShadowMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PCFShadowMap", function() { return PCFShadowMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PCFSoftShadowMap", function() { return PCFSoftShadowMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrontSide", function() { return FrontSide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BackSide", function() { return BackSide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoubleSide", function() { return DoubleSide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatShading", function() { return FlatShading; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SmoothShading", function() { return SmoothShading; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoColors", function() { return NoColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FaceColors", function() { return FaceColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VertexColors", function() { return VertexColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoBlending", function() { return NoBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NormalBlending", function() { return NormalBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdditiveBlending", function() { return AdditiveBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubtractiveBlending", function() { return SubtractiveBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiplyBlending", function() { return MultiplyBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomBlending", function() { return CustomBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddEquation", function() { return AddEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubtractEquation", function() { return SubtractEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReverseSubtractEquation", function() { return ReverseSubtractEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MinEquation", function() { return MinEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxEquation", function() { return MaxEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZeroFactor", function() { return ZeroFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneFactor", function() { return OneFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SrcColorFactor", function() { return SrcColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusSrcColorFactor", function() { return OneMinusSrcColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SrcAlphaFactor", function() { return SrcAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusSrcAlphaFactor", function() { return OneMinusSrcAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DstAlphaFactor", function() { return DstAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusDstAlphaFactor", function() { return OneMinusDstAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DstColorFactor", function() { return DstColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusDstColorFactor", function() { return OneMinusDstColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SrcAlphaSaturateFactor", function() { return SrcAlphaSaturateFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NeverDepth", function() { return NeverDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlwaysDepth", function() { return AlwaysDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LessDepth", function() { return LessDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LessEqualDepth", function() { return LessEqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EqualDepth", function() { return EqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GreaterEqualDepth", function() { return GreaterEqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GreaterDepth", function() { return GreaterDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotEqualDepth", function() { return NotEqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiplyOperation", function() { return MultiplyOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MixOperation", function() { return MixOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddOperation", function() { return AddOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoToneMapping", function() { return NoToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearToneMapping", function() { return LinearToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReinhardToneMapping", function() { return ReinhardToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uncharted2ToneMapping", function() { return Uncharted2ToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CineonToneMapping", function() { return CineonToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UVMapping", function() { return UVMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeReflectionMapping", function() { return CubeReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeRefractionMapping", function() { return CubeRefractionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquirectangularReflectionMapping", function() { return EquirectangularReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquirectangularRefractionMapping", function() { return EquirectangularRefractionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SphericalReflectionMapping", function() { return SphericalReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeUVReflectionMapping", function() { return CubeUVReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeUVRefractionMapping", function() { return CubeUVRefractionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepeatWrapping", function() { return RepeatWrapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClampToEdgeWrapping", function() { return ClampToEdgeWrapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MirroredRepeatWrapping", function() { return MirroredRepeatWrapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestFilter", function() { return NearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestMipMapNearestFilter", function() { return NearestMipMapNearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestMipMapLinearFilter", function() { return NearestMipMapLinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearFilter", function() { return LinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearMipMapNearestFilter", function() { return LinearMipMapNearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearMipMapLinearFilter", function() { return LinearMipMapLinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedByteType", function() { return UnsignedByteType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ByteType", function() { return ByteType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShortType", function() { return ShortType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShortType", function() { return UnsignedShortType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntType", function() { return IntType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedIntType", function() { return UnsignedIntType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FloatType", function() { return FloatType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HalfFloatType", function() { return HalfFloatType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShort4444Type", function() { return UnsignedShort4444Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShort5551Type", function() { return UnsignedShort5551Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShort565Type", function() { return UnsignedShort565Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedInt248Type", function() { return UnsignedInt248Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlphaFormat", function() { return AlphaFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBFormat", function() { return RGBFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBAFormat", function() { return RGBAFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LuminanceFormat", function() { return LuminanceFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LuminanceAlphaFormat", function() { return LuminanceAlphaFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBEFormat", function() { return RGBEFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthFormat", function() { return DepthFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthStencilFormat", function() { return DepthStencilFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_S3TC_DXT1_Format", function() { return RGB_S3TC_DXT1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT1_Format", function() { return RGBA_S3TC_DXT1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT3_Format", function() { return RGBA_S3TC_DXT3_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT5_Format", function() { return RGBA_S3TC_DXT5_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_PVRTC_4BPPV1_Format", function() { return RGB_PVRTC_4BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_PVRTC_2BPPV1_Format", function() { return RGB_PVRTC_2BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_PVRTC_4BPPV1_Format", function() { return RGBA_PVRTC_4BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_PVRTC_2BPPV1_Format", function() { return RGBA_PVRTC_2BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_ETC1_Format", function() { return RGB_ETC1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoopOnce", function() { return LoopOnce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoopRepeat", function() { return LoopRepeat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoopPingPong", function() { return LoopPingPong; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateDiscrete", function() { return InterpolateDiscrete; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateLinear", function() { return InterpolateLinear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateSmooth", function() { return InterpolateSmooth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZeroCurvatureEnding", function() { return ZeroCurvatureEnding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZeroSlopeEnding", function() { return ZeroSlopeEnding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WrapAroundEnding", function() { return WrapAroundEnding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TrianglesDrawMode", function() { return TrianglesDrawMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleStripDrawMode", function() { return TriangleStripDrawMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleFanDrawMode", function() { return TriangleFanDrawMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearEncoding", function() { return LinearEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sRGBEncoding", function() { return sRGBEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GammaEncoding", function() { return GammaEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBEEncoding", function() { return RGBEEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogLuvEncoding", function() { return LogLuvEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBM7Encoding", function() { return RGBM7Encoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBM16Encoding", function() { return RGBM16Encoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBDEncoding", function() { return RGBDEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicDepthPacking", function() { return BasicDepthPacking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBADepthPacking", function() { return RGBADepthPacking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeGeometry", function() { return BoxGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Face4", function() { return Face4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineStrip", function() { return LineStrip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinePieces", function() { return LinePieces; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshFaceMaterial", function() { return MeshFaceMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiMaterial", function() { return MultiMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointCloud", function() { return PointCloud; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Particle", function() { return Particle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParticleSystem", function() { return ParticleSystem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointCloudMaterial", function() { return PointCloudMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParticleBasicMaterial", function() { return ParticleBasicMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParticleSystemMaterial", function() { return ParticleSystemMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vertex", function() { return Vertex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicBufferAttribute", function() { return DynamicBufferAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int8Attribute", function() { return Int8Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint8Attribute", function() { return Uint8Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint8ClampedAttribute", function() { return Uint8ClampedAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int16Attribute", function() { return Int16Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint16Attribute", function() { return Uint16Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int32Attribute", function() { return Int32Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint32Attribute", function() { return Uint32Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float32Attribute", function() { return Float32Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float64Attribute", function() { return Float64Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClosedSplineCurve3", function() { return ClosedSplineCurve3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SplineCurve3", function() { return SplineCurve3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Spline", function() { return Spline; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AxisHelper", function() { return AxisHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoundingBoxHelper", function() { return BoundingBoxHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EdgesHelper", function() { return EdgesHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WireframeHelper", function() { return WireframeHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XHRLoader", function() { return XHRLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BinaryTextureLoader", function() { return BinaryTextureLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeometryUtils", function() { return GeometryUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageUtils", function() { return ImageUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Projector", function() { return Projector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CanvasRenderer", function() { return CanvasRenderer; });
// Polyfills

if ( Number.EPSILON === undefined ) {

	Number.EPSILON = Math.pow( 2, - 52 );

}

if ( Number.isInteger === undefined ) {

	// Missing in IE
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

	Number.isInteger = function ( value ) {

		return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;

	};

}

//

if ( Math.sign === undefined ) {

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

	Math.sign = function ( x ) {

		return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

	};

}

if ( 'name' in Function.prototype === false ) {

	// Missing in IE
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

	Object.defineProperty( Function.prototype, 'name', {

		get: function () {

			return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];

		}

	} );

}

if ( Object.assign === undefined ) {

	// Missing in IE
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

	( function () {

		Object.assign = function ( target ) {

			if ( target === undefined || target === null ) {

				throw new TypeError( 'Cannot convert undefined or null to object' );

			}

			var output = Object( target );

			for ( var index = 1; index < arguments.length; index ++ ) {

				var source = arguments[ index ];

				if ( source !== undefined && source !== null ) {

					for ( var nextKey in source ) {

						if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

							output[ nextKey ] = source[ nextKey ];

						}

					}

				}

			}

			return output;

		};

	} )();

}

/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */

function EventDispatcher() {}

Object.assign( EventDispatcher.prototype, {

	addEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) this._listeners = {};

		var listeners = this._listeners;

		if ( listeners[ type ] === undefined ) {

			listeners[ type ] = [];

		}

		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

			listeners[ type ].push( listener );

		}

	},

	hasEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) return false;

		var listeners = this._listeners;

		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

	},

	removeEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) return;

		var listeners = this._listeners;
		var listenerArray = listeners[ type ];

		if ( listenerArray !== undefined ) {

			var index = listenerArray.indexOf( listener );

			if ( index !== - 1 ) {

				listenerArray.splice( index, 1 );

			}

		}

	},

	dispatchEvent: function ( event ) {

		if ( this._listeners === undefined ) return;

		var listeners = this._listeners;
		var listenerArray = listeners[ event.type ];

		if ( listenerArray !== undefined ) {

			event.target = this;

			var array = listenerArray.slice( 0 );

			for ( var i = 0, l = array.length; i < l; i ++ ) {

				array[ i ].call( this, event );

			}

		}

	}

} );

var REVISION = '89';
var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
var CullFaceNone = 0;
var CullFaceBack = 1;
var CullFaceFront = 2;
var CullFaceFrontBack = 3;
var FrontFaceDirectionCW = 0;
var FrontFaceDirectionCCW = 1;
var BasicShadowMap = 0;
var PCFShadowMap = 1;
var PCFSoftShadowMap = 2;
var FrontSide = 0;
var BackSide = 1;
var DoubleSide = 2;
var FlatShading = 1;
var SmoothShading = 2;
var NoColors = 0;
var FaceColors = 1;
var VertexColors = 2;
var NoBlending = 0;
var NormalBlending = 1;
var AdditiveBlending = 2;
var SubtractiveBlending = 3;
var MultiplyBlending = 4;
var CustomBlending = 5;
var AddEquation = 100;
var SubtractEquation = 101;
var ReverseSubtractEquation = 102;
var MinEquation = 103;
var MaxEquation = 104;
var ZeroFactor = 200;
var OneFactor = 201;
var SrcColorFactor = 202;
var OneMinusSrcColorFactor = 203;
var SrcAlphaFactor = 204;
var OneMinusSrcAlphaFactor = 205;
var DstAlphaFactor = 206;
var OneMinusDstAlphaFactor = 207;
var DstColorFactor = 208;
var OneMinusDstColorFactor = 209;
var SrcAlphaSaturateFactor = 210;
var NeverDepth = 0;
var AlwaysDepth = 1;
var LessDepth = 2;
var LessEqualDepth = 3;
var EqualDepth = 4;
var GreaterEqualDepth = 5;
var GreaterDepth = 6;
var NotEqualDepth = 7;
var MultiplyOperation = 0;
var MixOperation = 1;
var AddOperation = 2;
var NoToneMapping = 0;
var LinearToneMapping = 1;
var ReinhardToneMapping = 2;
var Uncharted2ToneMapping = 3;
var CineonToneMapping = 4;
var UVMapping = 300;
var CubeReflectionMapping = 301;
var CubeRefractionMapping = 302;
var EquirectangularReflectionMapping = 303;
var EquirectangularRefractionMapping = 304;
var SphericalReflectionMapping = 305;
var CubeUVReflectionMapping = 306;
var CubeUVRefractionMapping = 307;
var RepeatWrapping = 1000;
var ClampToEdgeWrapping = 1001;
var MirroredRepeatWrapping = 1002;
var NearestFilter = 1003;
var NearestMipMapNearestFilter = 1004;
var NearestMipMapLinearFilter = 1005;
var LinearFilter = 1006;
var LinearMipMapNearestFilter = 1007;
var LinearMipMapLinearFilter = 1008;
var UnsignedByteType = 1009;
var ByteType = 1010;
var ShortType = 1011;
var UnsignedShortType = 1012;
var IntType = 1013;
var UnsignedIntType = 1014;
var FloatType = 1015;
var HalfFloatType = 1016;
var UnsignedShort4444Type = 1017;
var UnsignedShort5551Type = 1018;
var UnsignedShort565Type = 1019;
var UnsignedInt248Type = 1020;
var AlphaFormat = 1021;
var RGBFormat = 1022;
var RGBAFormat = 1023;
var LuminanceFormat = 1024;
var LuminanceAlphaFormat = 1025;
var RGBEFormat = RGBAFormat;
var DepthFormat = 1026;
var DepthStencilFormat = 1027;
var RGB_S3TC_DXT1_Format = 2001;
var RGBA_S3TC_DXT1_Format = 2002;
var RGBA_S3TC_DXT3_Format = 2003;
var RGBA_S3TC_DXT5_Format = 2004;
var RGB_PVRTC_4BPPV1_Format = 2100;
var RGB_PVRTC_2BPPV1_Format = 2101;
var RGBA_PVRTC_4BPPV1_Format = 2102;
var RGBA_PVRTC_2BPPV1_Format = 2103;
var RGB_ETC1_Format = 2151;
var LoopOnce = 2200;
var LoopRepeat = 2201;
var LoopPingPong = 2202;
var InterpolateDiscrete = 2300;
var InterpolateLinear = 2301;
var InterpolateSmooth = 2302;
var ZeroCurvatureEnding = 2400;
var ZeroSlopeEnding = 2401;
var WrapAroundEnding = 2402;
var TrianglesDrawMode = 0;
var TriangleStripDrawMode = 1;
var TriangleFanDrawMode = 2;
var LinearEncoding = 3000;
var sRGBEncoding = 3001;
var GammaEncoding = 3007;
var RGBEEncoding = 3002;
var LogLuvEncoding = 3003;
var RGBM7Encoding = 3004;
var RGBM16Encoding = 3005;
var RGBDEncoding = 3006;
var BasicDepthPacking = 3200;
var RGBADepthPacking = 3201;

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

var _Math = {

	DEG2RAD: Math.PI / 180,
	RAD2DEG: 180 / Math.PI,

	generateUUID: ( function () {

		// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

		var lut = [];

		for ( var i = 0; i < 256; i ++ ) {

			lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 ).toUpperCase();

		}

		return function () {

			var d0 = Math.random() * 0xffffffff | 0;
			var d1 = Math.random() * 0xffffffff | 0;
			var d2 = Math.random() * 0xffffffff | 0;
			var d3 = Math.random() * 0xffffffff | 0;
			return lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +
				lut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +
				lut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +
				lut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];

		};

	} )(),

	clamp: function ( value, min, max ) {

		return Math.max( min, Math.min( max, value ) );

	},

	// compute euclidian modulo of m % n
	// https://en.wikipedia.org/wiki/Modulo_operation

	euclideanModulo: function ( n, m ) {

		return ( ( n % m ) + m ) % m;

	},

	// Linear mapping from range <a1, a2> to range <b1, b2>

	mapLinear: function ( x, a1, a2, b1, b2 ) {

		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

	},

	// https://en.wikipedia.org/wiki/Linear_interpolation

	lerp: function ( x, y, t ) {

		return ( 1 - t ) * x + t * y;

	},

	// http://en.wikipedia.org/wiki/Smoothstep

	smoothstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * ( 3 - 2 * x );

	},

	smootherstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

	},

	// Random integer from <low, high> interval

	randInt: function ( low, high ) {

		return low + Math.floor( Math.random() * ( high - low + 1 ) );

	},

	// Random float from <low, high> interval

	randFloat: function ( low, high ) {

		return low + Math.random() * ( high - low );

	},

	// Random float from <-range/2, range/2> interval

	randFloatSpread: function ( range ) {

		return range * ( 0.5 - Math.random() );

	},

	degToRad: function ( degrees ) {

		return degrees * _Math.DEG2RAD;

	},

	radToDeg: function ( radians ) {

		return radians * _Math.RAD2DEG;

	},

	isPowerOfTwo: function ( value ) {

		return ( value & ( value - 1 ) ) === 0 && value !== 0;

	},

	ceilPowerOfTwo: function ( value ) {

		return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

	},

	floorPowerOfTwo: function ( value ) {

		return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author philogb / http://blog.thejit.org/
 * @author egraether / http://egraether.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

function Vector2( x, y ) {

	this.x = x || 0;
	this.y = y || 0;

}

Object.defineProperties( Vector2.prototype, {

	"width": {

		get: function () {

			return this.x;

		},

		set: function ( value ) {

			this.x = value;

		}

	},

	"height": {

		get: function () {

			return this.y;

		},

		set: function ( value ) {

			this.y = value;

		}

	}

} );

Object.assign( Vector2.prototype, {

	isVector2: true,

	set: function ( x, y ) {

		this.x = x;
		this.y = y;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	},

	multiply: function ( v ) {

		this.x *= v.x;
		this.y *= v.y;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;

		return this;

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	applyMatrix3: function ( m ) {

		var x = this.x, y = this.y;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

		return this;

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

		return this;

	},

	clampScalar: function () {

		var min = new Vector2();
		var max = new Vector2();

		return function clampScalar( minVal, maxVal ) {

			min.set( minVal, minVal );
			max.set( maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y );

	},

	manhattanLength: function () {

		return Math.abs( this.x ) + Math.abs( this.y );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	angle: function () {

		// computes the angle in radians with respect to the positive x-axis

		var angle = Math.atan2( this.y, this.x );

		if ( angle < 0 ) angle += 2 * Math.PI;

		return angle;

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	},

	manhattanDistanceTo: function ( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );

		return this;

	},

	rotateAround: function ( center, angle ) {

		var c = Math.cos( angle ), s = Math.sin( angle );

		var x = this.x - center.x;
		var y = this.y - center.y;

		this.x = x * c - y * s + center.x;
		this.y = x * s + y * c + center.y;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author jordi_ros / http://plattsoft.com
 * @author D1plo1d / http://github.com/D1plo1d
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author timknip / http://www.floorplanner.com/
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */

function Matrix4() {

	this.elements = [

		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1

	];

	if ( arguments.length > 0 ) {

		console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

	}

}

Object.assign( Matrix4.prototype, {

	isMatrix4: true,

	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		var te = this.elements;

		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	clone: function () {

		return new Matrix4().fromArray( this.elements );

	},

	copy: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

		return this;

	},

	copyPosition: function ( m ) {

		var te = this.elements, me = m.elements;

		te[ 12 ] = me[ 12 ];
		te[ 13 ] = me[ 13 ];
		te[ 14 ] = me[ 14 ];

		return this;

	},

	extractBasis: function ( xAxis, yAxis, zAxis ) {

		xAxis.setFromMatrixColumn( this, 0 );
		yAxis.setFromMatrixColumn( this, 1 );
		zAxis.setFromMatrixColumn( this, 2 );

		return this;

	},

	makeBasis: function ( xAxis, yAxis, zAxis ) {

		this.set(
			xAxis.x, yAxis.x, zAxis.x, 0,
			xAxis.y, yAxis.y, zAxis.y, 0,
			xAxis.z, yAxis.z, zAxis.z, 0,
			0, 0, 0, 1
		);

		return this;

	},

	extractRotation: function () {

		var v1 = new Vector3();

		return function extractRotation( m ) {

			var te = this.elements;
			var me = m.elements;

			var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
			var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
			var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

			te[ 0 ] = me[ 0 ] * scaleX;
			te[ 1 ] = me[ 1 ] * scaleX;
			te[ 2 ] = me[ 2 ] * scaleX;

			te[ 4 ] = me[ 4 ] * scaleY;
			te[ 5 ] = me[ 5 ] * scaleY;
			te[ 6 ] = me[ 6 ] * scaleY;

			te[ 8 ] = me[ 8 ] * scaleZ;
			te[ 9 ] = me[ 9 ] * scaleZ;
			te[ 10 ] = me[ 10 ] * scaleZ;

			return this;

		};

	}(),

	makeRotationFromEuler: function ( euler ) {

		if ( ! ( euler && euler.isEuler ) ) {

			console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

		}

		var te = this.elements;

		var x = euler.x, y = euler.y, z = euler.z;
		var a = Math.cos( x ), b = Math.sin( x );
		var c = Math.cos( y ), d = Math.sin( y );
		var e = Math.cos( z ), f = Math.sin( z );

		if ( euler.order === 'XYZ' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = - c * f;
			te[ 8 ] = d;

			te[ 1 ] = af + be * d;
			te[ 5 ] = ae - bf * d;
			te[ 9 ] = - b * c;

			te[ 2 ] = bf - ae * d;
			te[ 6 ] = be + af * d;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YXZ' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce + df * b;
			te[ 4 ] = de * b - cf;
			te[ 8 ] = a * d;

			te[ 1 ] = a * f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b;

			te[ 2 ] = cf * b - de;
			te[ 6 ] = df + ce * b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZXY' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce - df * b;
			te[ 4 ] = - a * f;
			te[ 8 ] = de + cf * b;

			te[ 1 ] = cf + de * b;
			te[ 5 ] = a * e;
			te[ 9 ] = df - ce * b;

			te[ 2 ] = - a * d;
			te[ 6 ] = b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZYX' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = be * d - af;
			te[ 8 ] = ae * d + bf;

			te[ 1 ] = c * f;
			te[ 5 ] = bf * d + ae;
			te[ 9 ] = af * d - be;

			te[ 2 ] = - d;
			te[ 6 ] = b * c;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YZX' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = bd - ac * f;
			te[ 8 ] = bc * f + ad;

			te[ 1 ] = f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b * e;

			te[ 2 ] = - d * e;
			te[ 6 ] = ad * f + bc;
			te[ 10 ] = ac - bd * f;

		} else if ( euler.order === 'XZY' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = - f;
			te[ 8 ] = d * e;

			te[ 1 ] = ac * f + bd;
			te[ 5 ] = a * e;
			te[ 9 ] = ad * f - bc;

			te[ 2 ] = bc * f - ad;
			te[ 6 ] = b * e;
			te[ 10 ] = bd * f + ac;

		}

		// last column
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// bottom row
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	},

	makeRotationFromQuaternion: function ( q ) {

		var te = this.elements;

		var x = q._x, y = q._y, z = q._z, w = q._w;
		var x2 = x + x, y2 = y + y, z2 = z + z;
		var xx = x * x2, xy = x * y2, xz = x * z2;
		var yy = y * y2, yz = y * z2, zz = z * z2;
		var wx = w * x2, wy = w * y2, wz = w * z2;

		te[ 0 ] = 1 - ( yy + zz );
		te[ 4 ] = xy - wz;
		te[ 8 ] = xz + wy;

		te[ 1 ] = xy + wz;
		te[ 5 ] = 1 - ( xx + zz );
		te[ 9 ] = yz - wx;

		te[ 2 ] = xz - wy;
		te[ 6 ] = yz + wx;
		te[ 10 ] = 1 - ( xx + yy );

		// last column
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// bottom row
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	},

	lookAt: function () {

		var x = new Vector3();
		var y = new Vector3();
		var z = new Vector3();

		return function lookAt( eye, target, up ) {

			var te = this.elements;

			z.subVectors( eye, target );

			if ( z.lengthSq() === 0 ) {

				// eye and target are in the same position

				z.z = 1;

			}

			z.normalize();
			x.crossVectors( up, z );

			if ( x.lengthSq() === 0 ) {

				// up and z are parallel

				if ( Math.abs( up.z ) === 1 ) {

					z.x += 0.0001;

				} else {

					z.z += 0.0001;

				}

				z.normalize();
				x.crossVectors( up, z );

			}

			x.normalize();
			y.crossVectors( z, x );

			te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
			te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
			te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

			return this;

		};

	}(),

	multiply: function ( m, n ) {

		if ( n !== undefined ) {

			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
			return this.multiplyMatrices( m, n );

		}

		return this.multiplyMatrices( this, m );

	},

	premultiply: function ( m ) {

		return this.multiplyMatrices( m, this );

	},

	multiplyMatrices: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
		var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
		var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
		var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

		var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
		var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
		var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
		var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

		return this;

	},

	applyToBufferAttribute: function () {

		var v1 = new Vector3();

		return function applyToBufferAttribute( attribute ) {

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				v1.x = attribute.getX( i );
				v1.y = attribute.getY( i );
				v1.z = attribute.getZ( i );

				v1.applyMatrix4( this );

				attribute.setXYZ( i, v1.x, v1.y, v1.z );

			}

			return attribute;

		};

	}(),

	determinant: function () {

		var te = this.elements;

		var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
		var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
		var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
		var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+ n14 * n23 * n32
				 - n13 * n24 * n32
				 - n14 * n22 * n33
				 + n12 * n24 * n33
				 + n13 * n22 * n34
				 - n12 * n23 * n34
			) +
			n42 * (
				+ n11 * n23 * n34
				 - n11 * n24 * n33
				 + n14 * n21 * n33
				 - n13 * n21 * n34
				 + n13 * n24 * n31
				 - n14 * n23 * n31
			) +
			n43 * (
				+ n11 * n24 * n32
				 - n11 * n22 * n34
				 - n14 * n21 * n32
				 + n12 * n21 * n34
				 + n14 * n22 * n31
				 - n12 * n24 * n31
			) +
			n44 * (
				- n13 * n22 * n31
				 - n11 * n23 * n32
				 + n11 * n22 * n33
				 + n13 * n21 * n32
				 - n12 * n21 * n33
				 + n12 * n23 * n31
			)

		);

	},

	transpose: function () {

		var te = this.elements;
		var tmp;

		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

		return this;

	},

	setPosition: function ( v ) {

		var te = this.elements;

		te[ 12 ] = v.x;
		te[ 13 ] = v.y;
		te[ 14 ] = v.z;

		return this;

	},

	getInverse: function ( m, throwOnDegenerate ) {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		var te = this.elements,
			me = m.elements,

			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
			n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
			n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
			n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

		var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

		if ( det === 0 ) {

			var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";

			if ( throwOnDegenerate === true ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			return this.identity();

		}

		var detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

		te[ 4 ] = t12 * detInv;
		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

		te[ 8 ] = t13 * detInv;
		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

		te[ 12 ] = t14 * detInv;
		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

		return this;

	},

	scale: function ( v ) {

		var te = this.elements;
		var x = v.x, y = v.y, z = v.z;

		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

		return this;

	},

	getMaxScaleOnAxis: function () {

		var te = this.elements;

		var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
		var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
		var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

	},

	makeTranslation: function ( x, y, z ) {

		this.set(

			1, 0, 0, x,
			0, 1, 0, y,
			0, 0, 1, z,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationX: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0, 0, 0,
			0, c, - s, 0,
			0, s, c, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationY: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			- s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	},

	makeRotationZ: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, - s, 0, 0,
			s, c, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationAxis: function ( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		var c = Math.cos( angle );
		var s = Math.sin( angle );
		var t = 1 - c;
		var x = axis.x, y = axis.y, z = axis.z;
		var tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		 return this;

	},

	makeScale: function ( x, y, z ) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeShear: function ( x, y, z ) {

		this.set(

			1, y, z, 0,
			x, 1, z, 0,
			x, y, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	compose: function ( position, quaternion, scale ) {

		this.makeRotationFromQuaternion( quaternion );
		this.scale( scale );
		this.setPosition( position );

		return this;

	},

	decompose: function () {

		var vector = new Vector3();
		var matrix = new Matrix4();

		return function decompose( position, quaternion, scale ) {

			var te = this.elements;

			var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
			var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
			var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

			// if determine is negative, we need to invert one scale
			var det = this.determinant();
			if ( det < 0 ) sx = - sx;

			position.x = te[ 12 ];
			position.y = te[ 13 ];
			position.z = te[ 14 ];

			// scale the rotation part
			matrix.copy( this );

			var invSX = 1 / sx;
			var invSY = 1 / sy;
			var invSZ = 1 / sz;

			matrix.elements[ 0 ] *= invSX;
			matrix.elements[ 1 ] *= invSX;
			matrix.elements[ 2 ] *= invSX;

			matrix.elements[ 4 ] *= invSY;
			matrix.elements[ 5 ] *= invSY;
			matrix.elements[ 6 ] *= invSY;

			matrix.elements[ 8 ] *= invSZ;
			matrix.elements[ 9 ] *= invSZ;
			matrix.elements[ 10 ] *= invSZ;

			quaternion.setFromRotationMatrix( matrix );

			scale.x = sx;
			scale.y = sy;
			scale.z = sz;

			return this;

		};

	}(),

	makePerspective: function ( left, right, top, bottom, near, far ) {

		if ( far === undefined ) {

			console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

		}

		var te = this.elements;
		var x = 2 * near / ( right - left );
		var y = 2 * near / ( top - bottom );

		var a = ( right + left ) / ( right - left );
		var b = ( top + bottom ) / ( top - bottom );
		var c = - ( far + near ) / ( far - near );
		var d = - 2 * far * near / ( far - near );

		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

		return this;

	},

	makeOrthographic: function ( left, right, top, bottom, near, far ) {

		var te = this.elements;
		var w = 1.0 / ( right - left );
		var h = 1.0 / ( top - bottom );
		var p = 1.0 / ( far - near );

		var x = ( right + left ) * w;
		var y = ( top + bottom ) * h;
		var z = ( far + near ) * p;

		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

		return this;

	},

	equals: function ( matrix ) {

		var te = this.elements;
		var me = matrix.elements;

		for ( var i = 0; i < 16; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		for ( var i = 0; i < 16; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		var te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];
		array[ offset + 3 ] = te[ 3 ];

		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];
		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];

		array[ offset + 8 ] = te[ 8 ];
		array[ offset + 9 ] = te[ 9 ];
		array[ offset + 10 ] = te[ 10 ];
		array[ offset + 11 ] = te[ 11 ];

		array[ offset + 12 ] = te[ 12 ];
		array[ offset + 13 ] = te[ 13 ];
		array[ offset + 14 ] = te[ 14 ];
		array[ offset + 15 ] = te[ 15 ];

		return array;

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */

function Quaternion( x, y, z, w ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._w = ( w !== undefined ) ? w : 1;

}

Object.assign( Quaternion, {

	slerp: function ( qa, qb, qm, t ) {

		return qm.copy( qa ).slerp( qb, t );

	},

	slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

		// fuzz-free, array-based Quaternion SLERP operation

		var x0 = src0[ srcOffset0 + 0 ],
			y0 = src0[ srcOffset0 + 1 ],
			z0 = src0[ srcOffset0 + 2 ],
			w0 = src0[ srcOffset0 + 3 ],

			x1 = src1[ srcOffset1 + 0 ],
			y1 = src1[ srcOffset1 + 1 ],
			z1 = src1[ srcOffset1 + 2 ],
			w1 = src1[ srcOffset1 + 3 ];

		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

			var s = 1 - t,

				cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

				dir = ( cos >= 0 ? 1 : - 1 ),
				sqrSin = 1 - cos * cos;

			// Skip the Slerp for tiny steps to avoid numeric problems:
			if ( sqrSin > Number.EPSILON ) {

				var sin = Math.sqrt( sqrSin ),
					len = Math.atan2( sin, cos * dir );

				s = Math.sin( s * len ) / sin;
				t = Math.sin( t * len ) / sin;

			}

			var tDir = t * dir;

			x0 = x0 * s + x1 * tDir;
			y0 = y0 * s + y1 * tDir;
			z0 = z0 * s + z1 * tDir;
			w0 = w0 * s + w1 * tDir;

			// Normalize in case we just did a lerp:
			if ( s === 1 - t ) {

				var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

				x0 *= f;
				y0 *= f;
				z0 *= f;
				w0 *= f;

			}

		}

		dst[ dstOffset ] = x0;
		dst[ dstOffset + 1 ] = y0;
		dst[ dstOffset + 2 ] = z0;
		dst[ dstOffset + 3 ] = w0;

	}

} );

Object.defineProperties( Quaternion.prototype, {

	x: {

		get: function () {

			return this._x;

		},

		set: function ( value ) {

			this._x = value;
			this.onChangeCallback();

		}

	},

	y: {

		get: function () {

			return this._y;

		},

		set: function ( value ) {

			this._y = value;
			this.onChangeCallback();

		}

	},

	z: {

		get: function () {

			return this._z;

		},

		set: function ( value ) {

			this._z = value;
			this.onChangeCallback();

		}

	},

	w: {

		get: function () {

			return this._w;

		},

		set: function ( value ) {

			this._w = value;
			this.onChangeCallback();

		}

	}

} );

Object.assign( Quaternion.prototype, {

	set: function ( x, y, z, w ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this.onChangeCallback();

		return this;

	},

	clone: function () {

		return new this.constructor( this._x, this._y, this._z, this._w );

	},

	copy: function ( quaternion ) {

		this._x = quaternion.x;
		this._y = quaternion.y;
		this._z = quaternion.z;
		this._w = quaternion.w;

		this.onChangeCallback();

		return this;

	},

	setFromEuler: function ( euler, update ) {

		if ( ! ( euler && euler.isEuler ) ) {

			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

		}

		var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		var cos = Math.cos;
		var sin = Math.sin;

		var c1 = cos( x / 2 );
		var c2 = cos( y / 2 );
		var c3 = cos( z / 2 );

		var s1 = sin( x / 2 );
		var s2 = sin( y / 2 );
		var s3 = sin( z / 2 );

		if ( order === 'XYZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'YXZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( order === 'ZXY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'ZYX' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( order === 'YZX' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'XZY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		}

		if ( update !== false ) this.onChangeCallback();

		return this;

	},

	setFromAxisAngle: function ( axis, angle ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

		// assumes axis is normalized

		var halfAngle = angle / 2, s = Math.sin( halfAngle );

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos( halfAngle );

		this.onChangeCallback();

		return this;

	},

	setFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

			trace = m11 + m22 + m33,
			s;

		if ( trace > 0 ) {

			s = 0.5 / Math.sqrt( trace + 1.0 );

			this._w = 0.25 / s;
			this._x = ( m32 - m23 ) * s;
			this._y = ( m13 - m31 ) * s;
			this._z = ( m21 - m12 ) * s;

		} else if ( m11 > m22 && m11 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

			this._w = ( m32 - m23 ) / s;
			this._x = 0.25 * s;
			this._y = ( m12 + m21 ) / s;
			this._z = ( m13 + m31 ) / s;

		} else if ( m22 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

			this._w = ( m13 - m31 ) / s;
			this._x = ( m12 + m21 ) / s;
			this._y = 0.25 * s;
			this._z = ( m23 + m32 ) / s;

		} else {

			s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

			this._w = ( m21 - m12 ) / s;
			this._x = ( m13 + m31 ) / s;
			this._y = ( m23 + m32 ) / s;
			this._z = 0.25 * s;

		}

		this.onChangeCallback();

		return this;

	},

	setFromUnitVectors: function () {

		// assumes direction vectors vFrom and vTo are normalized

		var v1 = new Vector3();
		var r;

		var EPS = 0.000001;

		return function setFromUnitVectors( vFrom, vTo ) {

			if ( v1 === undefined ) v1 = new Vector3();

			r = vFrom.dot( vTo ) + 1;

			if ( r < EPS ) {

				r = 0;

				if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

					v1.set( - vFrom.y, vFrom.x, 0 );

				} else {

					v1.set( 0, - vFrom.z, vFrom.y );

				}

			} else {

				v1.crossVectors( vFrom, vTo );

			}

			this._x = v1.x;
			this._y = v1.y;
			this._z = v1.z;
			this._w = r;

			return this.normalize();

		};

	}(),

	inverse: function () {

		return this.conjugate().normalize();

	},

	conjugate: function () {

		this._x *= - 1;
		this._y *= - 1;
		this._z *= - 1;

		this.onChangeCallback();

		return this;

	},

	dot: function ( v ) {

		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	},

	lengthSq: function () {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	},

	length: function () {

		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	},

	normalize: function () {

		var l = this.length();

		if ( l === 0 ) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		this.onChangeCallback();

		return this;

	},

	multiply: function ( q, p ) {

		if ( p !== undefined ) {

			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
			return this.multiplyQuaternions( q, p );

		}

		return this.multiplyQuaternions( this, q );

	},

	premultiply: function ( q ) {

		return this.multiplyQuaternions( q, this );

	},

	multiplyQuaternions: function ( a, b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this.onChangeCallback();

		return this;

	},

	slerp: function ( qb, t ) {

		if ( t === 0 ) return this;
		if ( t === 1 ) return this.copy( qb );

		var x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if ( cosHalfTheta < 0 ) {

			this._w = - qb._w;
			this._x = - qb._x;
			this._y = - qb._y;
			this._z = - qb._z;

			cosHalfTheta = - cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

		if ( Math.abs( sinHalfTheta ) < 0.001 ) {

			this._w = 0.5 * ( w + this._w );
			this._x = 0.5 * ( x + this._x );
			this._y = 0.5 * ( y + this._y );
			this._z = 0.5 * ( z + this._z );

			return this;

		}

		var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this._w = ( w * ratioA + this._w * ratioB );
		this._x = ( x * ratioA + this._x * ratioB );
		this._y = ( y * ratioA + this._y * ratioB );
		this._z = ( z * ratioA + this._z * ratioB );

		this.onChangeCallback();

		return this;

	},

	equals: function ( quaternion ) {

		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this._x = array[ offset ];
		this._y = array[ offset + 1 ];
		this._z = array[ offset + 2 ];
		this._w = array[ offset + 3 ];

		this.onChangeCallback();

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._w;

		return array;

	},

	onChange: function ( callback ) {

		this.onChangeCallback = callback;

		return this;

	},

	onChangeCallback: function () {}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function Vector3( x, y, z ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;

}

Object.assign( Vector3.prototype, {

	isVector3: true,

	set: function ( x, y, z ) {

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y, this.z );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	},

	multiply: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
			return this.multiplyVectors( v, w );

		}

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	},

	multiplyVectors: function ( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	},

	applyEuler: function () {

		var quaternion = new Quaternion();

		return function applyEuler( euler ) {

			if ( ! ( euler && euler.isEuler ) ) {

				console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			return this.applyQuaternion( quaternion.setFromEuler( euler ) );

		};

	}(),

	applyAxisAngle: function () {

		var quaternion = new Quaternion();

		return function applyAxisAngle( axis, angle ) {

			return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

		};

	}(),

	applyMatrix3: function ( m ) {

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

		return this;

	},

	applyMatrix4: function ( m ) {

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

		return this;

	},

	applyQuaternion: function ( q ) {

		var x = this.x, y = this.y, z = this.z;
		var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

		// calculate quat * vector

		var ix = qw * x + qy * z - qz * y;
		var iy = qw * y + qz * x - qx * z;
		var iz = qw * z + qx * y - qy * x;
		var iw = - qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

		return this;

	},

	project: function () {

		var matrix = new Matrix4();

		return function project( camera ) {

			matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
			return this.applyMatrix4( matrix );

		};

	}(),

	unproject: function () {

		var matrix = new Matrix4();

		return function unproject( camera ) {

			matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
			return this.applyMatrix4( matrix );

		};

	}(),

	transformDirection: function ( m ) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

		return this.normalize();

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

		return this;

	},

	clampScalar: function () {

		var min = new Vector3();
		var max = new Vector3();

		return function clampScalar( minVal, maxVal ) {

			min.set( minVal, minVal, minVal );
			max.set( maxVal, maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	},

	// TODO lengthSquared?

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	},

	manhattanLength: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	cross: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
			return this.crossVectors( v, w );

		}

		return this.crossVectors( this, v );

	},

	crossVectors: function ( a, b ) {

		var ax = a.x, ay = a.y, az = a.z;
		var bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	},

	projectOnVector: function ( vector ) {

		var scalar = vector.dot( this ) / vector.lengthSq();

		return this.copy( vector ).multiplyScalar( scalar );

	},

	projectOnPlane: function () {

		var v1 = new Vector3();

		return function projectOnPlane( planeNormal ) {

			v1.copy( this ).projectOnVector( planeNormal );

			return this.sub( v1 );

		};

	}(),

	reflect: function () {

		// reflect incident vector off plane orthogonal to normal
		// normal is assumed to have unit length

		var v1 = new Vector3();

		return function reflect( normal ) {

			return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

		};

	}(),

	angleTo: function ( v ) {

		var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

		// clamp, to handle numerical problems

		return Math.acos( _Math.clamp( theta, - 1, 1 ) );

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	},

	manhattanDistanceTo: function ( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

	},

	setFromSpherical: function ( s ) {

		var sinPhiRadius = Math.sin( s.phi ) * s.radius;

		this.x = sinPhiRadius * Math.sin( s.theta );
		this.y = Math.cos( s.phi ) * s.radius;
		this.z = sinPhiRadius * Math.cos( s.theta );

		return this;

	},

	setFromCylindrical: function ( c ) {

		this.x = c.radius * Math.sin( c.theta );
		this.y = c.y;
		this.z = c.radius * Math.cos( c.theta );

		return this;

	},

	setFromMatrixPosition: function ( m ) {

		var e = m.elements;

		this.x = e[ 12 ];
		this.y = e[ 13 ];
		this.z = e[ 14 ];

		return this;

	},

	setFromMatrixScale: function ( m ) {

		var sx = this.setFromMatrixColumn( m, 0 ).length();
		var sy = this.setFromMatrixColumn( m, 1 ).length();
		var sz = this.setFromMatrixColumn( m, 2 ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;

	},

	setFromMatrixColumn: function ( m, index ) {

		return this.fromArray( m.elements, index * 4 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );

		return this;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 * @author tschw
 */

function Matrix3() {

	this.elements = [

		1, 0, 0,
		0, 1, 0,
		0, 0, 1

	];

	if ( arguments.length > 0 ) {

		console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

	}

}

Object.assign( Matrix3.prototype, {

	isMatrix3: true,

	set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

		var te = this.elements;

		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		);

		return this;

	},

	clone: function () {

		return new this.constructor().fromArray( this.elements );

	},

	copy: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

		return this;

	},

	setFromMatrix4: function ( m ) {

		var me = m.elements;

		this.set(

			me[ 0 ], me[ 4 ], me[ 8 ],
			me[ 1 ], me[ 5 ], me[ 9 ],
			me[ 2 ], me[ 6 ], me[ 10 ]

		);

		return this;

	},

	applyToBufferAttribute: function () {

		var v1 = new Vector3();

		return function applyToBufferAttribute( attribute ) {

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				v1.x = attribute.getX( i );
				v1.y = attribute.getY( i );
				v1.z = attribute.getZ( i );

				v1.applyMatrix3( this );

				attribute.setXYZ( i, v1.x, v1.y, v1.z );

			}

			return attribute;

		};

	}(),

	multiply: function ( m ) {

		return this.multiplyMatrices( this, m );

	},

	premultiply: function ( m ) {

		return this.multiplyMatrices( m, this );

	},

	multiplyMatrices: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
		var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
		var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

		var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
		var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
		var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

		return this;

	},

	determinant: function () {

		var te = this.elements;

		var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

	},

	getInverse: function ( matrix, throwOnDegenerate ) {

		if ( matrix && matrix.isMatrix4 ) {

			console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );

		}

		var me = matrix.elements,
			te = this.elements,

			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
			n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
			n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

			t11 = n33 * n22 - n32 * n23,
			t12 = n32 * n13 - n33 * n12,
			t13 = n23 * n12 - n22 * n13,

			det = n11 * t11 + n21 * t12 + n31 * t13;

		if ( det === 0 ) {

			var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";

			if ( throwOnDegenerate === true ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			return this.identity();

		}

		var detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

		te[ 3 ] = t12 * detInv;
		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

		te[ 6 ] = t13 * detInv;
		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

		return this;

	},

	transpose: function () {

		var tmp, m = this.elements;

		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

		return this;

	},

	getNormalMatrix: function ( matrix4 ) {

		return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

	},

	transposeIntoArray: function ( r ) {

		var m = this.elements;

		r[ 0 ] = m[ 0 ];
		r[ 1 ] = m[ 3 ];
		r[ 2 ] = m[ 6 ];
		r[ 3 ] = m[ 1 ];
		r[ 4 ] = m[ 4 ];
		r[ 5 ] = m[ 7 ];
		r[ 6 ] = m[ 2 ];
		r[ 7 ] = m[ 5 ];
		r[ 8 ] = m[ 8 ];

		return this;

	},

	setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {

		var c = Math.cos( rotation );
		var s = Math.sin( rotation );

		this.set(
			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
			0, 0, 1
		);

	},

	scale: function ( sx, sy ) {

		var te = this.elements;

		te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
		te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

		return this;

	},

	rotate: function ( theta ) {

		var c = Math.cos( theta );
		var s = Math.sin( theta );

		var te = this.elements;

		var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
		var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

		te[ 0 ] = c * a11 + s * a21;
		te[ 3 ] = c * a12 + s * a22;
		te[ 6 ] = c * a13 + s * a23;

		te[ 1 ] = - s * a11 + c * a21;
		te[ 4 ] = - s * a12 + c * a22;
		te[ 7 ] = - s * a13 + c * a23;

		return this;

	},

	translate: function ( tx, ty ) {

		var te = this.elements;

		te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
		te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

		return this;

	},

	equals: function ( matrix ) {

		var te = this.elements;
		var me = matrix.elements;

		for ( var i = 0; i < 9; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		for ( var i = 0; i < 9; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		var te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];

		array[ offset + 3 ] = te[ 3 ];
		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];

		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];
		array[ offset + 8 ] = te[ 8 ];

		return array;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

var textureId = 0;

function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

	Object.defineProperty( this, 'id', { value: textureId ++ } );

	this.uuid = _Math.generateUUID();

	this.name = '';

	this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
	this.mipmaps = [];

	this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

	this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
	this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
	this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;

	this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

	this.format = format !== undefined ? format : RGBAFormat;
	this.type = type !== undefined ? type : UnsignedByteType;

	this.offset = new Vector2( 0, 0 );
	this.repeat = new Vector2( 1, 1 );
	this.center = new Vector2( 0, 0 );
	this.rotation = 0;

	this.matrixAutoUpdate = true;
	this.matrix = new Matrix3();

	this.generateMipmaps = true;
	this.premultiplyAlpha = false;
	this.flipY = true;
	this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

	// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
	//
	// Also changing the encoding after already used by a Material will not automatically make the Material
	// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
	this.encoding = encoding !== undefined ? encoding : LinearEncoding;

	this.version = 0;
	this.onUpdate = null;

}

Texture.DEFAULT_IMAGE = undefined;
Texture.DEFAULT_MAPPING = UVMapping;

Texture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

	constructor: Texture,

	isTexture: true,

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.name = source.name;

		this.image = source.image;
		this.mipmaps = source.mipmaps.slice( 0 );

		this.mapping = source.mapping;

		this.wrapS = source.wrapS;
		this.wrapT = source.wrapT;

		this.magFilter = source.magFilter;
		this.minFilter = source.minFilter;

		this.anisotropy = source.anisotropy;

		this.format = source.format;
		this.type = source.type;

		this.offset.copy( source.offset );
		this.repeat.copy( source.repeat );
		this.center.copy( source.center );
		this.rotation = source.rotation;

		this.matrixAutoUpdate = source.matrixAutoUpdate;
		this.matrix.copy( source.matrix );

		this.generateMipmaps = source.generateMipmaps;
		this.premultiplyAlpha = source.premultiplyAlpha;
		this.flipY = source.flipY;
		this.unpackAlignment = source.unpackAlignment;
		this.encoding = source.encoding;

		return this;

	},

	toJSON: function ( meta ) {

		var isRootObject = ( meta === undefined || typeof meta === 'string' );

		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

			return meta.textures[ this.uuid ];

		}

		function getDataURL( image ) {

			var canvas;

			if ( image instanceof HTMLCanvasElement ) {

				canvas = image;

			} else {

				canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = image.width;
				canvas.height = image.height;

				var context = canvas.getContext( '2d' );

				if ( image instanceof ImageData ) {

					context.putImageData( image, 0, 0 );

				} else {

					context.drawImage( image, 0, 0, image.width, image.height );

				}

			}

			if ( canvas.width > 2048 || canvas.height > 2048 ) {

				return canvas.toDataURL( 'image/jpeg', 0.6 );

			} else {

				return canvas.toDataURL( 'image/png' );

			}

		}

		var output = {
			metadata: {
				version: 4.5,
				type: 'Texture',
				generator: 'Texture.toJSON'
			},

			uuid: this.uuid,
			name: this.name,

			mapping: this.mapping,

			repeat: [ this.repeat.x, this.repeat.y ],
			offset: [ this.offset.x, this.offset.y ],
			center: [ this.center.x, this.center.y ],
			rotation: this.rotation,

			wrap: [ this.wrapS, this.wrapT ],

			minFilter: this.minFilter,
			magFilter: this.magFilter,
			anisotropy: this.anisotropy,

			flipY: this.flipY
		};

		if ( this.image !== undefined ) {

			// TODO: Move to THREE.Image

			var image = this.image;

			if ( image.uuid === undefined ) {

				image.uuid = _Math.generateUUID(); // UGH

			}

			if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {

				meta.images[ image.uuid ] = {
					uuid: image.uuid,
					url: getDataURL( image )
				};

			}

			output.image = image.uuid;

		}

		if ( ! isRootObject ) {

			meta.textures[ this.uuid ] = output;

		}

		return output;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	},

	transformUv: function ( uv ) {

		if ( this.mapping !== UVMapping ) return;

		uv.applyMatrix3( this.matrix );

		if ( uv.x < 0 || uv.x > 1 ) {

			switch ( this.wrapS ) {

				case RepeatWrapping:

					uv.x = uv.x - Math.floor( uv.x );
					break;

				case ClampToEdgeWrapping:

					uv.x = uv.x < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping:

					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

						uv.x = Math.ceil( uv.x ) - uv.x;

					} else {

						uv.x = uv.x - Math.floor( uv.x );

					}
					break;

			}

		}

		if ( uv.y < 0 || uv.y > 1 ) {

			switch ( this.wrapT ) {

				case RepeatWrapping:

					uv.y = uv.y - Math.floor( uv.y );
					break;

				case ClampToEdgeWrapping:

					uv.y = uv.y < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping:

					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

						uv.y = Math.ceil( uv.y ) - uv.y;

					} else {

						uv.y = uv.y - Math.floor( uv.y );

					}
					break;

			}

		}

		if ( this.flipY ) {

			uv.y = 1 - uv.y;

		}

	}

} );

Object.defineProperty( Texture.prototype, "needsUpdate", {

	set: function ( value ) {

		if ( value === true ) this.version ++;

	}

} );

/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function Vector4( x, y, z, w ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;
	this.w = ( w !== undefined ) ? w : 1;

}

Object.assign( Vector4.prototype, {

	isVector4: true,

	set: function ( x, y, z, w ) {

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;
		this.w = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setW: function ( w ) {

		this.w = w;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			case 3: this.w = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			case 3: return this.w;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y, this.z, this.w );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = ( v.w !== undefined ) ? v.w : 1;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		this.w += v.w;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;
		this.w += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		this.w = a.w + b.w;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;
		this.w += v.w * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		this.w -= v.w;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;
		this.w -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		this.w = a.w - b.w;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;
		this.w *= scalar;

		return this;

	},

	applyMatrix4: function ( m ) {

		var x = this.x, y = this.y, z = this.z, w = this.w;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	setAxisAngleFromQuaternion: function ( q ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

		// q is assumed to be normalized

		this.w = 2 * Math.acos( q.w );

		var s = Math.sqrt( 1 - q.w * q.w );

		if ( s < 0.0001 ) {

			this.x = 1;
			this.y = 0;
			this.z = 0;

		} else {

			this.x = q.x / s;
			this.y = q.y / s;
			this.z = q.z / s;

		}

		return this;

	},

	setAxisAngleFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var angle, x, y, z,		// variables for result
			epsilon = 0.01,		// margin to allow for rounding errors
			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

			te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
		     ( Math.abs( m13 - m31 ) < epsilon ) &&
		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

			// singularity found
			// first check for identity matrix which must have +1 for all terms
			// in leading diagonal and zero in other terms

			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

				// this singularity is identity matrix so angle = 0

				this.set( 1, 0, 0, 0 );

				return this; // zero angle, arbitrary axis

			}

			// otherwise this singularity is angle = 180

			angle = Math.PI;

			var xx = ( m11 + 1 ) / 2;
			var yy = ( m22 + 1 ) / 2;
			var zz = ( m33 + 1 ) / 2;
			var xy = ( m12 + m21 ) / 4;
			var xz = ( m13 + m31 ) / 4;
			var yz = ( m23 + m32 ) / 4;

			if ( ( xx > yy ) && ( xx > zz ) ) {

				// m11 is the largest diagonal term

				if ( xx < epsilon ) {

					x = 0;
					y = 0.707106781;
					z = 0.707106781;

				} else {

					x = Math.sqrt( xx );
					y = xy / x;
					z = xz / x;

				}

			} else if ( yy > zz ) {

				// m22 is the largest diagonal term

				if ( yy < epsilon ) {

					x = 0.707106781;
					y = 0;
					z = 0.707106781;

				} else {

					y = Math.sqrt( yy );
					x = xy / y;
					z = yz / y;

				}

			} else {

				// m33 is the largest diagonal term so base result on this

				if ( zz < epsilon ) {

					x = 0.707106781;
					y = 0.707106781;
					z = 0;

				} else {

					z = Math.sqrt( zz );
					x = xz / z;
					y = yz / z;

				}

			}

			this.set( x, y, z, angle );

			return this; // return 180 deg rotation

		}

		// as we have reached here there are no singularities so we can handle normally

		var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
		                   ( m13 - m31 ) * ( m13 - m31 ) +
		                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

		if ( Math.abs( s ) < 0.001 ) s = 1;

		// prevent divide by zero, should not happen if matrix is orthogonal and should be
		// caught by singularity test above, but I've left it in just in case

		this.x = ( m32 - m23 ) / s;
		this.y = ( m13 - m31 ) / s;
		this.z = ( m21 - m12 ) / s;
		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

		return this;

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );
		this.w = Math.min( this.w, v.w );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );
		this.w = Math.max( this.w, v.w );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

		return this;

	},

	clampScalar: function () {

		var min, max;

		return function clampScalar( minVal, maxVal ) {

			if ( min === undefined ) {

				min = new Vector4();
				max = new Vector4();

			}

			min.set( minVal, minVal, minVal, minVal );
			max.set( maxVal, maxVal, maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );
		this.w = Math.floor( this.w );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );
		this.w = Math.ceil( this.w );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );
		this.w = Math.round( this.w );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;
		this.w = - this.w;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

	},

	manhattanLength: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;
		this.w += ( v.w - this.w ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];
		this.w = array[ offset + 3 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;
		array[ offset + 3 ] = this.w;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );
		this.w = attribute.getW( index );

		return this;

	}

} );

/**
 * @author szimek / https://github.com/szimek/
 * @author alteredq / http://alteredqualia.com/
 * @author Marius Kintel / https://github.com/kintel
 */

/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/
function WebGLRenderTarget( width, height, options ) {

	this.uuid = _Math.generateUUID();

	this.width = width;
	this.height = height;

	this.scissor = new Vector4( 0, 0, width, height );
	this.scissorTest = false;

	this.viewport = new Vector4( 0, 0, width, height );

	options = options || {};

	if ( options.minFilter === undefined ) options.minFilter = LinearFilter;

	this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
	this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

}

WebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

	constructor: WebGLRenderTarget,

	isWebGLRenderTarget: true,

	setSize: function ( width, height ) {

		if ( this.width !== width || this.height !== height ) {

			this.width = width;
			this.height = height;

			this.dispose();

		}

		this.viewport.set( 0, 0, width, height );
		this.scissor.set( 0, 0, width, height );

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.width = source.width;
		this.height = source.height;

		this.viewport.copy( source.viewport );

		this.texture = source.texture.clone();

		this.depthBuffer = source.depthBuffer;
		this.stencilBuffer = source.stencilBuffer;
		this.depthTexture = source.depthTexture;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author alteredq / http://alteredqualia.com
 */

function WebGLRenderTargetCube( width, height, options ) {

	WebGLRenderTarget.call( this, width, height, options );

	this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
	this.activeMipMapLevel = 0;

}

WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;

WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;

/**
 * @author alteredq / http://alteredqualia.com/
 */

function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	this.image = { data: data, width: width, height: height };

	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

	this.generateMipmaps = false;
	this.flipY = false;
	this.unpackAlignment = 1;

}

DataTexture.prototype = Object.create( Texture.prototype );
DataTexture.prototype.constructor = DataTexture;

DataTexture.prototype.isDataTexture = true;

/**
 * @author mrdoob / http://mrdoob.com/
 */

function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

	images = images !== undefined ? images : [];
	mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

	Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	this.flipY = false;

}

CubeTexture.prototype = Object.create( Texture.prototype );
CubeTexture.prototype.constructor = CubeTexture;

CubeTexture.prototype.isCubeTexture = true;

Object.defineProperty( CubeTexture.prototype, 'images', {

	get: function () {

		return this.image;

	},

	set: function ( value ) {

		this.image = value;

	}

} );

/**
 * @author tschw
 *
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [renderer] )
 *
 * 		uploads a uniform value(s)
 *  	the 'renderer' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (renderer factorizations):
 *
 * .upload( gl, seq, values, renderer )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (renderer factorizations):
 *
 * .setValue( gl, name, value )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .set( gl, obj, prop )
 *
 * 		sets uniform from object and property with same name than uniform
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */

var emptyTexture = new Texture();
var emptyCubeTexture = new CubeTexture();

// --- Base for inner nodes (including the root) ---

function UniformContainer() {

	this.seq = [];
	this.map = {};

}

// --- Utilities ---

// Array Caches (provide typed arrays for temporary by size)

var arrayCacheF32 = [];
var arrayCacheI32 = [];

// Float32Array caches used for uploading Matrix uniforms

var mat4array = new Float32Array( 16 );
var mat3array = new Float32Array( 9 );

// Flattening for arrays of vectors and matrices

function flatten( array, nBlocks, blockSize ) {

	var firstElem = array[ 0 ];

	if ( firstElem <= 0 || firstElem > 0 ) return array;
	// unoptimized: ! isNaN( firstElem )
	// see http://jacksondunstan.com/articles/983

	var n = nBlocks * blockSize,
		r = arrayCacheF32[ n ];

	if ( r === undefined ) {

		r = new Float32Array( n );
		arrayCacheF32[ n ] = r;

	}

	if ( nBlocks !== 0 ) {

		firstElem.toArray( r, 0 );

		for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

			offset += blockSize;
			array[ i ].toArray( r, offset );

		}

	}

	return r;

}

// Texture unit allocation

function allocTexUnits( renderer, n ) {

	var r = arrayCacheI32[ n ];

	if ( r === undefined ) {

		r = new Int32Array( n );
		arrayCacheI32[ n ] = r;

	}

	for ( var i = 0; i !== n; ++ i )
		r[ i ] = renderer.allocTextureUnit();

	return r;

}

// --- Setters ---

// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.

// Single scalar

function setValue1f( gl, v ) {

	gl.uniform1f( this.addr, v );

}

function setValue1i( gl, v ) {

	gl.uniform1i( this.addr, v );

}

// Single float vector (from flat array or THREE.VectorN)

function setValue2fv( gl, v ) {

	if ( v.x === undefined ) {

		gl.uniform2fv( this.addr, v );

	} else {

		gl.uniform2f( this.addr, v.x, v.y );

	}

}

function setValue3fv( gl, v ) {

	if ( v.x !== undefined ) {

		gl.uniform3f( this.addr, v.x, v.y, v.z );

	} else if ( v.r !== undefined ) {

		gl.uniform3f( this.addr, v.r, v.g, v.b );

	} else {

		gl.uniform3fv( this.addr, v );

	}

}

function setValue4fv( gl, v ) {

	if ( v.x === undefined ) {

		gl.uniform4fv( this.addr, v );

	} else {

		 gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

	}

}

// Single matrix (from flat array or MatrixN)

function setValue2fm( gl, v ) {

	gl.uniformMatrix2fv( this.addr, false, v.elements || v );

}

function setValue3fm( gl, v ) {

	if ( v.elements === undefined ) {

		gl.uniformMatrix3fv( this.addr, false, v );

	} else {

		mat3array.set( v.elements );
		gl.uniformMatrix3fv( this.addr, false, mat3array );

	}

}

function setValue4fm( gl, v ) {

	if ( v.elements === undefined ) {

		gl.uniformMatrix4fv( this.addr, false, v );

	} else {

		mat4array.set( v.elements );
		gl.uniformMatrix4fv( this.addr, false, mat4array );

	}

}

// Single texture (2D / Cube)

function setValueT1( gl, v, renderer ) {

	var unit = renderer.allocTextureUnit();
	gl.uniform1i( this.addr, unit );
	renderer.setTexture2D( v || emptyTexture, unit );

}

function setValueT6( gl, v, renderer ) {

	var unit = renderer.allocTextureUnit();
	gl.uniform1i( this.addr, unit );
	renderer.setTextureCube( v || emptyCubeTexture, unit );

}

// Integer / Boolean vectors or arrays thereof (always flat arrays)

function setValue2iv( gl, v ) {

	gl.uniform2iv( this.addr, v );

}

function setValue3iv( gl, v ) {

	gl.uniform3iv( this.addr, v );

}

function setValue4iv( gl, v ) {

	gl.uniform4iv( this.addr, v );

}

// Helper to pick the right setter for the singular case

function getSingularSetter( type ) {

	switch ( type ) {

		case 0x1406: return setValue1f; // FLOAT
		case 0x8b50: return setValue2fv; // _VEC2
		case 0x8b51: return setValue3fv; // _VEC3
		case 0x8b52: return setValue4fv; // _VEC4

		case 0x8b5a: return setValue2fm; // _MAT2
		case 0x8b5b: return setValue3fm; // _MAT3
		case 0x8b5c: return setValue4fm; // _MAT4

		case 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES
		case 0x8b60: return setValueT6; // SAMPLER_CUBE

		case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
		case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
		case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

	}

}

// Array of scalars

function setValue1fv( gl, v ) {

	gl.uniform1fv( this.addr, v );

}
function setValue1iv( gl, v ) {

	gl.uniform1iv( this.addr, v );

}

// Array of vectors (flat or from THREE classes)

function setValueV2a( gl, v ) {

	gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );

}

function setValueV3a( gl, v ) {

	gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );

}

function setValueV4a( gl, v ) {

	gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );

}

// Array of matrices (flat or from THREE clases)

function setValueM2a( gl, v ) {

	gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );

}

function setValueM3a( gl, v ) {

	gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );

}

function setValueM4a( gl, v ) {

	gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );

}

// Array of textures (2D / Cube)

function setValueT1a( gl, v, renderer ) {

	var n = v.length,
		units = allocTexUnits( renderer, n );

	gl.uniform1iv( this.addr, units );

	for ( var i = 0; i !== n; ++ i ) {

		renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

	}

}

function setValueT6a( gl, v, renderer ) {

	var n = v.length,
		units = allocTexUnits( renderer, n );

	gl.uniform1iv( this.addr, units );

	for ( var i = 0; i !== n; ++ i ) {

		renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

	}

}

// Helper to pick the right setter for a pure (bottom-level) array

function getPureArraySetter( type ) {

	switch ( type ) {

		case 0x1406: return setValue1fv; // FLOAT
		case 0x8b50: return setValueV2a; // _VEC2
		case 0x8b51: return setValueV3a; // _VEC3
		case 0x8b52: return setValueV4a; // _VEC4

		case 0x8b5a: return setValueM2a; // _MAT2
		case 0x8b5b: return setValueM3a; // _MAT3
		case 0x8b5c: return setValueM4a; // _MAT4

		case 0x8b5e: return setValueT1a; // SAMPLER_2D
		case 0x8b60: return setValueT6a; // SAMPLER_CUBE

		case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
		case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
		case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

	}

}

// --- Uniform Classes ---

function SingleUniform( id, activeInfo, addr ) {

	this.id = id;
	this.addr = addr;
	this.setValue = getSingularSetter( activeInfo.type );

	// this.path = activeInfo.name; // DEBUG

}

function PureArrayUniform( id, activeInfo, addr ) {

	this.id = id;
	this.addr = addr;
	this.size = activeInfo.size;
	this.setValue = getPureArraySetter( activeInfo.type );

	// this.path = activeInfo.name; // DEBUG

}

function StructuredUniform( id ) {

	this.id = id;

	UniformContainer.call( this ); // mix-in

}

StructuredUniform.prototype.setValue = function ( gl, value ) {

	// Note: Don't need an extra 'renderer' parameter, since samplers
	// are not allowed in structured uniforms.

	var seq = this.seq;

	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

		var u = seq[ i ];
		u.setValue( gl, value[ u.id ] );

	}

};

// --- Top-level ---

// Parser - builds up the property tree from the path strings

var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.

function addUniform( container, uniformObject ) {

	container.seq.push( uniformObject );
	container.map[ uniformObject.id ] = uniformObject;

}

function parseUniform( activeInfo, addr, container ) {

	var path = activeInfo.name,
		pathLength = path.length;

	// reset RegExp object, because of the early exit of a previous run
	RePathPart.lastIndex = 0;

	for ( ; ; ) {

		var match = RePathPart.exec( path ),
			matchEnd = RePathPart.lastIndex,

			id = match[ 1 ],
			idIsIndex = match[ 2 ] === ']',
			subscript = match[ 3 ];

		if ( idIsIndex ) id = id | 0; // convert to integer

		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

			// bare name or "pure" bottom-level array "[0]" suffix

			addUniform( container, subscript === undefined ?
				new SingleUniform( id, activeInfo, addr ) :
				new PureArrayUniform( id, activeInfo, addr ) );

			break;

		} else {

			// step into inner node / create it in case it doesn't exist

			var map = container.map, next = map[ id ];

			if ( next === undefined ) {

				next = new StructuredUniform( id );
				addUniform( container, next );

			}

			container = next;

		}

	}

}

// Root Container

function WebGLUniforms( gl, program, renderer ) {

	UniformContainer.call( this );

	this.renderer = renderer;

	var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

	for ( var i = 0; i < n; ++ i ) {

		var info = gl.getActiveUniform( program, i ),
			path = info.name,
			addr = gl.getUniformLocation( program, path );

		parseUniform( info, addr, this );

	}

}

WebGLUniforms.prototype.setValue = function ( gl, name, value ) {

	var u = this.map[ name ];

	if ( u !== undefined ) u.setValue( gl, value, this.renderer );

};

WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

	var v = object[ name ];

	if ( v !== undefined ) this.setValue( gl, name, v );

};


// Static interface

WebGLUniforms.upload = function ( gl, seq, values, renderer ) {

	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

		var u = seq[ i ],
			v = values[ u.id ];

		if ( v.needsUpdate !== false ) {

			// note: always updating when .needsUpdate is undefined
			u.setValue( gl, v.value, renderer );

		}

	}

};

WebGLUniforms.seqWithValue = function ( seq, values ) {

	var r = [];

	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

		var u = seq[ i ];
		if ( u.id in values ) r.push( u );

	}

	return r;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

function Color( r, g, b ) {

	if ( g === undefined && b === undefined ) {

		// r is THREE.Color, hex or string
		return this.set( r );

	}

	return this.setRGB( r, g, b );

}

Object.assign( Color.prototype, {

	isColor: true,

	r: 1, g: 1, b: 1,

	set: function ( value ) {

		if ( value && value.isColor ) {

			this.copy( value );

		} else if ( typeof value === 'number' ) {

			this.setHex( value );

		} else if ( typeof value === 'string' ) {

			this.setStyle( value );

		}

		return this;

	},

	setScalar: function ( scalar ) {

		this.r = scalar;
		this.g = scalar;
		this.b = scalar;

		return this;

	},

	setHex: function ( hex ) {

		hex = Math.floor( hex );

		this.r = ( hex >> 16 & 255 ) / 255;
		this.g = ( hex >> 8 & 255 ) / 255;
		this.b = ( hex & 255 ) / 255;

		return this;

	},

	setRGB: function ( r, g, b ) {

		this.r = r;
		this.g = g;
		this.b = b;

		return this;

	},

	setHSL: function () {

		function hue2rgb( p, q, t ) {

			if ( t < 0 ) t += 1;
			if ( t > 1 ) t -= 1;
			if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
			if ( t < 1 / 2 ) return q;
			if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
			return p;

		}

		return function setHSL( h, s, l ) {

			// h,s,l ranges are in 0.0 - 1.0
			h = _Math.euclideanModulo( h, 1 );
			s = _Math.clamp( s, 0, 1 );
			l = _Math.clamp( l, 0, 1 );

			if ( s === 0 ) {

				this.r = this.g = this.b = l;

			} else {

				var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
				var q = ( 2 * l ) - p;

				this.r = hue2rgb( q, p, h + 1 / 3 );
				this.g = hue2rgb( q, p, h );
				this.b = hue2rgb( q, p, h - 1 / 3 );

			}

			return this;

		};

	}(),

	setStyle: function ( style ) {

		function handleAlpha( string ) {

			if ( string === undefined ) return;

			if ( parseFloat( string ) < 1 ) {

				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

			}

		}


		var m;

		if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

			// rgb / hsl

			var color;
			var name = m[ 1 ];
			var components = m[ 2 ];

			switch ( name ) {

				case 'rgb':
				case 'rgba':

					if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

						// rgb(255,0,0) rgba(255,0,0,0.5)
						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

						handleAlpha( color[ 5 ] );

						return this;

					}

					if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

						handleAlpha( color[ 5 ] );

						return this;

					}

					break;

				case 'hsl':
				case 'hsla':

					if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
						var h = parseFloat( color[ 1 ] ) / 360;
						var s = parseInt( color[ 2 ], 10 ) / 100;
						var l = parseInt( color[ 3 ], 10 ) / 100;

						handleAlpha( color[ 5 ] );

						return this.setHSL( h, s, l );

					}

					break;

			}

		} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

			// hex color

			var hex = m[ 1 ];
			var size = hex.length;

			if ( size === 3 ) {

				// #ff0
				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

				return this;

			} else if ( size === 6 ) {

				// #ff0000
				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

				return this;

			}

		}

		if ( style && style.length > 0 ) {

			// color keywords
			var hex = ColorKeywords[ style ];

			if ( hex !== undefined ) {

				// red
				this.setHex( hex );

			} else {

				// unknown color
				console.warn( 'THREE.Color: Unknown color ' + style );

			}

		}

		return this;

	},

	clone: function () {

		return new this.constructor( this.r, this.g, this.b );

	},

	copy: function ( color ) {

		this.r = color.r;
		this.g = color.g;
		this.b = color.b;

		return this;

	},

	copyGammaToLinear: function ( color, gammaFactor ) {

		if ( gammaFactor === undefined ) gammaFactor = 2.0;

		this.r = Math.pow( color.r, gammaFactor );
		this.g = Math.pow( color.g, gammaFactor );
		this.b = Math.pow( color.b, gammaFactor );

		return this;

	},

	copyLinearToGamma: function ( color, gammaFactor ) {

		if ( gammaFactor === undefined ) gammaFactor = 2.0;

		var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

		this.r = Math.pow( color.r, safeInverse );
		this.g = Math.pow( color.g, safeInverse );
		this.b = Math.pow( color.b, safeInverse );

		return this;

	},

	convertGammaToLinear: function () {

		var r = this.r, g = this.g, b = this.b;

		this.r = r * r;
		this.g = g * g;
		this.b = b * b;

		return this;

	},

	convertLinearToGamma: function () {

		this.r = Math.sqrt( this.r );
		this.g = Math.sqrt( this.g );
		this.b = Math.sqrt( this.b );

		return this;

	},

	getHex: function () {

		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

	},

	getHexString: function () {

		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

	},

	getHSL: function ( optionalTarget ) {

		// h,s,l ranges are in 0.0 - 1.0

		var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

		var r = this.r, g = this.g, b = this.b;

		var max = Math.max( r, g, b );
		var min = Math.min( r, g, b );

		var hue, saturation;
		var lightness = ( min + max ) / 2.0;

		if ( min === max ) {

			hue = 0;
			saturation = 0;

		} else {

			var delta = max - min;

			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

			switch ( max ) {

				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
				case g: hue = ( b - r ) / delta + 2; break;
				case b: hue = ( r - g ) / delta + 4; break;

			}

			hue /= 6;

		}

		hsl.h = hue;
		hsl.s = saturation;
		hsl.l = lightness;

		return hsl;

	},

	getStyle: function () {

		return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

	},

	offsetHSL: function ( h, s, l ) {

		var hsl = this.getHSL();

		hsl.h += h; hsl.s += s; hsl.l += l;

		this.setHSL( hsl.h, hsl.s, hsl.l );

		return this;

	},

	add: function ( color ) {

		this.r += color.r;
		this.g += color.g;
		this.b += color.b;

		return this;

	},

	addColors: function ( color1, color2 ) {

		this.r = color1.r + color2.r;
		this.g = color1.g + color2.g;
		this.b = color1.b + color2.b;

		return this;

	},

	addScalar: function ( s ) {

		this.r += s;
		this.g += s;
		this.b += s;

		return this;

	},

	sub: function ( color ) {

		this.r = Math.max( 0, this.r - color.r );
		this.g = Math.max( 0, this.g - color.g );
		this.b = Math.max( 0, this.b - color.b );

		return this;

	},

	multiply: function ( color ) {

		this.r *= color.r;
		this.g *= color.g;
		this.b *= color.b;

		return this;

	},

	multiplyScalar: function ( s ) {

		this.r *= s;
		this.g *= s;
		this.b *= s;

		return this;

	},

	lerp: function ( color, alpha ) {

		this.r += ( color.r - this.r ) * alpha;
		this.g += ( color.g - this.g ) * alpha;
		this.b += ( color.b - this.b ) * alpha;

		return this;

	},

	equals: function ( c ) {

		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.r = array[ offset ];
		this.g = array[ offset + 1 ];
		this.b = array[ offset + 2 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.r;
		array[ offset + 1 ] = this.g;
		array[ offset + 2 ] = this.b;

		return array;

	},

	toJSON: function () {

		return this.getHex();

	}

} );

/**
 * Uniforms library for shared webgl shaders
 */

var UniformsLib = {

	common: {

		diffuse: { value: new Color( 0xeeeeee ) },
		opacity: { value: 1.0 },

		map: { value: null },
		uvTransform: { value: new Matrix3() },

		alphaMap: { value: null },

	},

	specularmap: {

		specularMap: { value: null },

	},

	envmap: {

		envMap: { value: null },
		flipEnvMap: { value: - 1 },
		reflectivity: { value: 1.0 },
		refractionRatio: { value: 0.98 }

	},

	aomap: {

		aoMap: { value: null },
		aoMapIntensity: { value: 1 }

	},

	lightmap: {

		lightMap: { value: null },
		lightMapIntensity: { value: 1 }

	},

	emissivemap: {

		emissiveMap: { value: null }

	},

	bumpmap: {

		bumpMap: { value: null },
		bumpScale: { value: 1 }

	},

	normalmap: {

		normalMap: { value: null },
		normalScale: { value: new Vector2( 1, 1 ) }

	},

	displacementmap: {

		displacementMap: { value: null },
		displacementScale: { value: 1 },
		displacementBias: { value: 0 }

	},

	roughnessmap: {

		roughnessMap: { value: null }

	},

	metalnessmap: {

		metalnessMap: { value: null }

	},

	gradientmap: {

		gradientMap: { value: null }

	},

	fog: {

		fogDensity: { value: 0.00025 },
		fogNear: { value: 1 },
		fogFar: { value: 2000 },
		fogColor: { value: new Color( 0xffffff ) }

	},

	lights: {

		ambientLightColor: { value: [] },

		directionalLights: { value: [], properties: {
			direction: {},
			color: {},

			shadow: {},
			shadowBias: {},
			shadowRadius: {},
			shadowMapSize: {}
		} },

		directionalShadowMap: { value: [] },
		directionalShadowMatrix: { value: [] },

		spotLights: { value: [], properties: {
			color: {},
			position: {},
			direction: {},
			distance: {},
			coneCos: {},
			penumbraCos: {},
			decay: {},

			shadow: {},
			shadowBias: {},
			shadowRadius: {},
			shadowMapSize: {}
		} },

		spotShadowMap: { value: [] },
		spotShadowMatrix: { value: [] },

		pointLights: { value: [], properties: {
			color: {},
			position: {},
			decay: {},
			distance: {},

			shadow: {},
			shadowBias: {},
			shadowRadius: {},
			shadowMapSize: {},
			shadowCameraNear: {},
			shadowCameraFar: {}
		} },

		pointShadowMap: { value: [] },
		pointShadowMatrix: { value: [] },

		hemisphereLights: { value: [], properties: {
			direction: {},
			skyColor: {},
			groundColor: {}
		} },

		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
		rectAreaLights: { value: [], properties: {
			color: {},
			position: {},
			width: {},
			height: {}
		} }

	},

	points: {

		diffuse: { value: new Color( 0xeeeeee ) },
		opacity: { value: 1.0 },
		size: { value: 1.0 },
		scale: { value: 1.0 },
		map: { value: null },
		uvTransform: { value: new Matrix3() }

	}

};

/**
 * Uniform Utilities
 */

var UniformsUtils = {

	merge: function ( uniforms ) {

		var merged = {};

		for ( var u = 0; u < uniforms.length; u ++ ) {

			var tmp = this.clone( uniforms[ u ] );

			for ( var p in tmp ) {

				merged[ p ] = tmp[ p ];

			}

		}

		return merged;

	},

	clone: function ( uniforms_src ) {

		var uniforms_dst = {};

		for ( var u in uniforms_src ) {

			uniforms_dst[ u ] = {};

			for ( var p in uniforms_src[ u ] ) {

				var parameter_src = uniforms_src[ u ][ p ];

				if ( parameter_src && ( parameter_src.isColor ||
					parameter_src.isMatrix3 || parameter_src.isMatrix4 ||
					parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||
					parameter_src.isTexture ) ) {

					uniforms_dst[ u ][ p ] = parameter_src.clone();

				} else if ( Array.isArray( parameter_src ) ) {

					uniforms_dst[ u ][ p ] = parameter_src.slice();

				} else {

					uniforms_dst[ u ][ p ] = parameter_src;

				}

			}

		}

		return uniforms_dst;

	}

};

var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";

var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";

var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

var begin_vertex = "\nvec3 transformed = vec3( position );\n";

var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";

var bsdfs = "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n\tfloat b = 3.45068 + (4.18814 + y) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n\treturn result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";

var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n";

var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";

var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";

var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";

var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n";

var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";

var defaultnormal_vertex = "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n";

var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";

var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";

var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n";

var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";

var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";

var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";

var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";

var fog_vertex = "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif";

var fog_pars_vertex = "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n";

var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n";

var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n";

var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";

var lights_pars = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";

var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";

var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tfloat norm = texture2D( ltcMag, uv ).a;\n\t\tvec4 t = texture2D( ltcMat, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3(   1,   0, t.y ),\n\t\t\tvec3(   0, t.z,   0 ),\n\t\t\tvec3( t.w,   0, t.x )\n\t\t);\n\t\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

var lights_template = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";

var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";

var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n";

var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";

var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";

var map_particle_fragment = "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n";

var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n";

var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";

var normal_fragment = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";

var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

var project_vertex = "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n";

var dithering_fragment = "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n";

var dithering_pars_fragment = "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n";

var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n";

var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";

var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";

var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";

var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";

var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";

var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n";

var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

var tonemapping_pars_fragment = "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";

var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n";

var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n";

var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";

var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n";

var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";

var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n";

var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n";

var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";

var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";

var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n";

var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n";

var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n";

var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n";

var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var ShaderChunk = {
	alphamap_fragment: alphamap_fragment,
	alphamap_pars_fragment: alphamap_pars_fragment,
	alphatest_fragment: alphatest_fragment,
	aomap_fragment: aomap_fragment,
	aomap_pars_fragment: aomap_pars_fragment,
	begin_vertex: begin_vertex,
	beginnormal_vertex: beginnormal_vertex,
	bsdfs: bsdfs,
	bumpmap_pars_fragment: bumpmap_pars_fragment,
	clipping_planes_fragment: clipping_planes_fragment,
	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
	clipping_planes_vertex: clipping_planes_vertex,
	color_fragment: color_fragment,
	color_pars_fragment: color_pars_fragment,
	color_pars_vertex: color_pars_vertex,
	color_vertex: color_vertex,
	common: common,
	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
	defaultnormal_vertex: defaultnormal_vertex,
	displacementmap_pars_vertex: displacementmap_pars_vertex,
	displacementmap_vertex: displacementmap_vertex,
	emissivemap_fragment: emissivemap_fragment,
	emissivemap_pars_fragment: emissivemap_pars_fragment,
	encodings_fragment: encodings_fragment,
	encodings_pars_fragment: encodings_pars_fragment,
	envmap_fragment: envmap_fragment,
	envmap_pars_fragment: envmap_pars_fragment,
	envmap_pars_vertex: envmap_pars_vertex,
	envmap_vertex: envmap_vertex,
	fog_vertex: fog_vertex,
	fog_pars_vertex: fog_pars_vertex,
	fog_fragment: fog_fragment,
	fog_pars_fragment: fog_pars_fragment,
	gradientmap_pars_fragment: gradientmap_pars_fragment,
	lightmap_fragment: lightmap_fragment,
	lightmap_pars_fragment: lightmap_pars_fragment,
	lights_lambert_vertex: lights_lambert_vertex,
	lights_pars: lights_pars,
	lights_phong_fragment: lights_phong_fragment,
	lights_phong_pars_fragment: lights_phong_pars_fragment,
	lights_physical_fragment: lights_physical_fragment,
	lights_physical_pars_fragment: lights_physical_pars_fragment,
	lights_template: lights_template,
	logdepthbuf_fragment: logdepthbuf_fragment,
	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
	logdepthbuf_vertex: logdepthbuf_vertex,
	map_fragment: map_fragment,
	map_pars_fragment: map_pars_fragment,
	map_particle_fragment: map_particle_fragment,
	map_particle_pars_fragment: map_particle_pars_fragment,
	metalnessmap_fragment: metalnessmap_fragment,
	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
	morphnormal_vertex: morphnormal_vertex,
	morphtarget_pars_vertex: morphtarget_pars_vertex,
	morphtarget_vertex: morphtarget_vertex,
	normal_fragment: normal_fragment,
	normalmap_pars_fragment: normalmap_pars_fragment,
	packing: packing,
	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
	project_vertex: project_vertex,
	dithering_fragment: dithering_fragment,
	dithering_pars_fragment: dithering_pars_fragment,
	roughnessmap_fragment: roughnessmap_fragment,
	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
	shadowmap_pars_fragment: shadowmap_pars_fragment,
	shadowmap_pars_vertex: shadowmap_pars_vertex,
	shadowmap_vertex: shadowmap_vertex,
	shadowmask_pars_fragment: shadowmask_pars_fragment,
	skinbase_vertex: skinbase_vertex,
	skinning_pars_vertex: skinning_pars_vertex,
	skinning_vertex: skinning_vertex,
	skinnormal_vertex: skinnormal_vertex,
	specularmap_fragment: specularmap_fragment,
	specularmap_pars_fragment: specularmap_pars_fragment,
	tonemapping_fragment: tonemapping_fragment,
	tonemapping_pars_fragment: tonemapping_pars_fragment,
	uv_pars_fragment: uv_pars_fragment,
	uv_pars_vertex: uv_pars_vertex,
	uv_vertex: uv_vertex,
	uv2_pars_fragment: uv2_pars_fragment,
	uv2_pars_vertex: uv2_pars_vertex,
	uv2_vertex: uv2_vertex,
	worldpos_vertex: worldpos_vertex,

	cube_frag: cube_frag,
	cube_vert: cube_vert,
	depth_frag: depth_frag,
	depth_vert: depth_vert,
	distanceRGBA_frag: distanceRGBA_frag,
	distanceRGBA_vert: distanceRGBA_vert,
	equirect_frag: equirect_frag,
	equirect_vert: equirect_vert,
	linedashed_frag: linedashed_frag,
	linedashed_vert: linedashed_vert,
	meshbasic_frag: meshbasic_frag,
	meshbasic_vert: meshbasic_vert,
	meshlambert_frag: meshlambert_frag,
	meshlambert_vert: meshlambert_vert,
	meshphong_frag: meshphong_frag,
	meshphong_vert: meshphong_vert,
	meshphysical_frag: meshphysical_frag,
	meshphysical_vert: meshphysical_vert,
	normal_frag: normal_frag,
	normal_vert: normal_vert,
	points_frag: points_frag,
	points_vert: points_vert,
	shadow_frag: shadow_frag,
	shadow_vert: shadow_vert
};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 */

var ShaderLib = {

	basic: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.meshbasic_vert,
		fragmentShader: ShaderChunk.meshbasic_frag

	},

	lambert: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) }
			}
		] ),

		vertexShader: ShaderChunk.meshlambert_vert,
		fragmentShader: ShaderChunk.meshlambert_frag

	},

	phong: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.gradientmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) },
				specular: { value: new Color( 0x111111 ) },
				shininess: { value: 30 }
			}
		] ),

		vertexShader: ShaderChunk.meshphong_vert,
		fragmentShader: ShaderChunk.meshphong_frag

	},

	standard: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.roughnessmap,
			UniformsLib.metalnessmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) },
				roughness: { value: 0.5 },
				metalness: { value: 0.5 },
				envMapIntensity: { value: 1 } // temporary
			}
		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	},

	points: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.points,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.points_vert,
		fragmentShader: ShaderChunk.points_frag

	},

	dashed: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.fog,
			{
				scale: { value: 1 },
				dashSize: { value: 1 },
				totalSize: { value: 2 }
			}
		] ),

		vertexShader: ShaderChunk.linedashed_vert,
		fragmentShader: ShaderChunk.linedashed_frag

	},

	depth: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.displacementmap
		] ),

		vertexShader: ShaderChunk.depth_vert,
		fragmentShader: ShaderChunk.depth_frag

	},

	normal: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			{
				opacity: { value: 1.0 }
			}
		] ),

		vertexShader: ShaderChunk.normal_vert,
		fragmentShader: ShaderChunk.normal_frag

	},

	/* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */

	cube: {

		uniforms: {
			tCube: { value: null },
			tFlip: { value: - 1 },
			opacity: { value: 1.0 }
		},

		vertexShader: ShaderChunk.cube_vert,
		fragmentShader: ShaderChunk.cube_frag

	},

	equirect: {

		uniforms: {
			tEquirect: { value: null },
		},

		vertexShader: ShaderChunk.equirect_vert,
		fragmentShader: ShaderChunk.equirect_frag

	},

	distanceRGBA: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.displacementmap,
			{
				referencePosition: { value: new Vector3() },
				nearDistance: { value: 1 },
				farDistance: { value: 1000 }
			}
		] ),

		vertexShader: ShaderChunk.distanceRGBA_vert,
		fragmentShader: ShaderChunk.distanceRGBA_frag

	},

	shadow: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.lights,
			UniformsLib.fog,
			{
				color: { value: new Color( 0x00000 ) },
				opacity: { value: 1.0 }
			},
		] ),

		vertexShader: ShaderChunk.shadow_vert,
		fragmentShader: ShaderChunk.shadow_frag

	}

};

ShaderLib.physical = {

	uniforms: UniformsUtils.merge( [
		ShaderLib.standard.uniforms,
		{
			clearCoat: { value: 0 },
			clearCoatRoughness: { value: 0 }
		}
	] ),

	vertexShader: ShaderChunk.meshphysical_vert,
	fragmentShader: ShaderChunk.meshphysical_frag

};

/**
 * @author bhouston / http://clara.io
 */

function Box2( min, max ) {

	this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
	this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

}

Object.assign( Box2.prototype, {

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromPoints: function ( points ) {

		this.makeEmpty();

		for ( var i = 0, il = points.length; i < il; i ++ ) {

			this.expandByPoint( points[ i ] );

		}

		return this;

	},

	setFromCenterAndSize: function () {

		var v1 = new Vector2();

		return function setFromCenterAndSize( center, size ) {

			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		};

	}(),

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = + Infinity;
		this.max.x = this.max.y = - Infinity;

		return this;

	},

	isEmpty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

	},

	getCenter: function ( optionalTarget ) {

		var result = optionalTarget || new Vector2();
		return this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	},

	getSize: function ( optionalTarget ) {

		var result = optionalTarget || new Vector2();
		return this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	},

	expandByVector: function ( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	},

	containsPoint: function ( point ) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ? false : true;

	},

	containsBox: function ( box ) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y;

	},

	getParameter: function ( point, optionalTarget ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		var result = optionalTarget || new Vector2();

		return result.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y )
		);

	},

	intersectsBox: function ( box ) {

		// using 4 splitting planes to rule out intersections

		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector2();
		return result.copy( point ).clamp( this.min, this.max );

	},

	distanceToPoint: function () {

		var v1 = new Vector2();

		return function distanceToPoint( point ) {

			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		};

	}(),

	intersect: function ( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		return this;

	},

	union: function ( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	},

	translate: function ( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function WebGLFlareRenderer( renderer, gl, state, textures, capabilities ) {

	var vertexBuffer, elementBuffer;
	var shader, program, attributes, uniforms;

	var tempTexture, occlusionTexture;

	function init() {

		var vertices = new Float32Array( [
			- 1, - 1, 0, 0,
			  1, - 1, 1, 0,
			  1, 1, 1, 1,
			- 1, 1, 0, 1
		] );

		var faces = new Uint16Array( [
			0, 1, 2,
			0, 2, 3
		] );

		// buffers

		vertexBuffer = gl.createBuffer();
		elementBuffer = gl.createBuffer();

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
		gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

		// textures

		tempTexture = gl.createTexture();
		occlusionTexture = gl.createTexture();

		state.bindTexture( gl.TEXTURE_2D, tempTexture );
		gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

		state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
		gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

		shader = {

			vertexShader: [

				'uniform lowp int renderType;',

				'uniform vec3 screenPosition;',
				'uniform vec2 scale;',
				'uniform float rotation;',

				'uniform sampler2D occlusionMap;',

				'attribute vec2 position;',
				'attribute vec2 uv;',

				'varying vec2 vUV;',
				'varying float vVisibility;',

				'void main() {',

				'	vUV = uv;',

				'	vec2 pos = position;',

				'	if ( renderType == 2 ) {',

				'		vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );',

				'		vVisibility =        visibility.r / 9.0;',
				'		vVisibility *= 1.0 - visibility.g / 9.0;',
				'		vVisibility *=       visibility.b / 9.0;',
				'		vVisibility *= 1.0 - visibility.a / 9.0;',

				'		pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;',
				'		pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;',

				'	}',

				'	gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );',

				'}'

			].join( '\n' ),

			fragmentShader: [

				'uniform lowp int renderType;',

				'uniform sampler2D map;',
				'uniform float opacity;',
				'uniform vec3 color;',

				'varying vec2 vUV;',
				'varying float vVisibility;',

				'void main() {',

				// pink square

				'	if ( renderType == 0 ) {',

				'		gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );',

				// restore

				'	} else if ( renderType == 1 ) {',

				'		gl_FragColor = texture2D( map, vUV );',

				// flare

				'	} else {',

				'		vec4 texture = texture2D( map, vUV );',
				'		texture.a *= opacity * vVisibility;',
				'		gl_FragColor = texture;',
				'		gl_FragColor.rgb *= color;',

				'	}',

				'}'

			].join( '\n' )

		};

		program = createProgram( shader );

		attributes = {
			vertex: gl.getAttribLocation( program, 'position' ),
			uv: gl.getAttribLocation( program, 'uv' )
		};

		uniforms = {
			renderType: gl.getUniformLocation( program, 'renderType' ),
			map: gl.getUniformLocation( program, 'map' ),
			occlusionMap: gl.getUniformLocation( program, 'occlusionMap' ),
			opacity: gl.getUniformLocation( program, 'opacity' ),
			color: gl.getUniformLocation( program, 'color' ),
			scale: gl.getUniformLocation( program, 'scale' ),
			rotation: gl.getUniformLocation( program, 'rotation' ),
			screenPosition: gl.getUniformLocation( program, 'screenPosition' )
		};

	}

	/*
	 * Render lens flares
	 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
	 *         reads these back and calculates occlusion.
	 */

	this.render = function ( flares, scene, camera, viewport ) {

		if ( flares.length === 0 ) return;

		var tempPosition = new Vector3();

		var invAspect = viewport.w / viewport.z,
			halfViewportWidth = viewport.z * 0.5,
			halfViewportHeight = viewport.w * 0.5;

		var size = 16 / viewport.w,
			scale = new Vector2( size * invAspect, size );

		var screenPosition = new Vector3( 1, 1, 0 ),
			screenPositionPixels = new Vector2( 1, 1 );

		var validArea = new Box2();

		validArea.min.set( viewport.x, viewport.y );
		validArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );

		if ( program === undefined ) {

			init();

		}

		state.useProgram( program );

		state.initAttributes();
		state.enableAttribute( attributes.vertex );
		state.enableAttribute( attributes.uv );
		state.disableUnusedAttributes();

		// loop through all lens flares to update their occlusion and positions
		// setup gl and common used attribs/uniforms

		gl.uniform1i( uniforms.occlusionMap, 0 );
		gl.uniform1i( uniforms.map, 1 );

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
		gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

		state.disable( gl.CULL_FACE );
		state.buffers.depth.setMask( false );

		for ( var i = 0, l = flares.length; i < l; i ++ ) {

			size = 16 / viewport.w;
			scale.set( size * invAspect, size );

			// calc object screen position

			var flare = flares[ i ];

			tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

			tempPosition.applyMatrix4( camera.matrixWorldInverse );
			tempPosition.applyMatrix4( camera.projectionMatrix );

			// setup arrays for gl programs

			screenPosition.copy( tempPosition );

			// horizontal and vertical coordinate of the lower left corner of the pixels to copy

			screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
			screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;

			// screen cull

			if ( validArea.containsPoint( screenPositionPixels ) === true ) {

				// save current RGB to temp texture

				state.activeTexture( gl.TEXTURE0 );
				state.bindTexture( gl.TEXTURE_2D, null );
				state.activeTexture( gl.TEXTURE1 );
				state.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


				// render pink quad

				gl.uniform1i( uniforms.renderType, 0 );
				gl.uniform2f( uniforms.scale, scale.x, scale.y );
				gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

				state.disable( gl.BLEND );
				state.enable( gl.DEPTH_TEST );

				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


				// copy result to occlusionMap

				state.activeTexture( gl.TEXTURE0 );
				state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
				gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


				// restore graphics

				gl.uniform1i( uniforms.renderType, 1 );
				state.disable( gl.DEPTH_TEST );

				state.activeTexture( gl.TEXTURE1 );
				state.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


				// update object positions

				flare.positionScreen.copy( screenPosition );

				if ( flare.customUpdateCallback ) {

					flare.customUpdateCallback( flare );

				} else {

					flare.updateLensFlares();

				}

				// render flares

				gl.uniform1i( uniforms.renderType, 2 );
				state.enable( gl.BLEND );

				for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

					var sprite = flare.lensFlares[ j ];

					if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

						screenPosition.x = sprite.x;
						screenPosition.y = sprite.y;
						screenPosition.z = sprite.z;

						size = sprite.size * sprite.scale / viewport.w;

						scale.x = size * invAspect;
						scale.y = size;

						gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
						gl.uniform2f( uniforms.scale, scale.x, scale.y );
						gl.uniform1f( uniforms.rotation, sprite.rotation );

						gl.uniform1f( uniforms.opacity, sprite.opacity );
						gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

						state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );

						textures.setTexture2D( sprite.texture, 1 );

						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

					}

				}

			}

		}

		// restore gl

		state.enable( gl.CULL_FACE );
		state.enable( gl.DEPTH_TEST );
		state.buffers.depth.setMask( true );

		state.reset();

	};

	function createProgram( shader ) {

		var program = gl.createProgram();

		var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
		var vertexShader = gl.createShader( gl.VERTEX_SHADER );

		var prefix = 'precision ' + capabilities.precision + ' float;\n';

		gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
		gl.shaderSource( vertexShader, prefix + shader.vertexShader );

		gl.compileShader( fragmentShader );
		gl.compileShader( vertexShader );

		gl.attachShader( program, fragmentShader );
		gl.attachShader( program, vertexShader );

		gl.linkProgram( program );

		return program;

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

	Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.needsUpdate = true;

}

CanvasTexture.prototype = Object.create( Texture.prototype );
CanvasTexture.prototype.constructor = CanvasTexture;

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function WebGLSpriteRenderer( renderer, gl, state, textures, capabilities ) {

	var vertexBuffer, elementBuffer;
	var program, attributes, uniforms;

	var texture;

	// decompose matrixWorld

	var spritePosition = new Vector3();
	var spriteRotation = new Quaternion();
	var spriteScale = new Vector3();

	function init() {

		var vertices = new Float32Array( [
			- 0.5, - 0.5, 0, 0,
			  0.5, - 0.5, 1, 0,
			  0.5, 0.5, 1, 1,
			- 0.5, 0.5, 0, 1
		] );

		var faces = new Uint16Array( [
			0, 1, 2,
			0, 2, 3
		] );

		vertexBuffer = gl.createBuffer();
		elementBuffer = gl.createBuffer();

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
		gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

		program = createProgram();

		attributes = {
			position: gl.getAttribLocation( program, 'position' ),
			uv: gl.getAttribLocation( program, 'uv' )
		};

		uniforms = {
			uvOffset: gl.getUniformLocation( program, 'uvOffset' ),
			uvScale: gl.getUniformLocation( program, 'uvScale' ),

			rotation: gl.getUniformLocation( program, 'rotation' ),
			scale: gl.getUniformLocation( program, 'scale' ),

			color: gl.getUniformLocation( program, 'color' ),
			map: gl.getUniformLocation( program, 'map' ),
			opacity: gl.getUniformLocation( program, 'opacity' ),

			modelViewMatrix: gl.getUniformLocation( program, 'modelViewMatrix' ),
			projectionMatrix: gl.getUniformLocation( program, 'projectionMatrix' ),

			fogType: gl.getUniformLocation( program, 'fogType' ),
			fogDensity: gl.getUniformLocation( program, 'fogDensity' ),
			fogNear: gl.getUniformLocation( program, 'fogNear' ),
			fogFar: gl.getUniformLocation( program, 'fogFar' ),
			fogColor: gl.getUniformLocation( program, 'fogColor' ),
			fogDepth: gl.getUniformLocation( program, 'fogDepth' ),

			alphaTest: gl.getUniformLocation( program, 'alphaTest' )
		};

		var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
		canvas.width = 8;
		canvas.height = 8;

		var context = canvas.getContext( '2d' );
		context.fillStyle = 'white';
		context.fillRect( 0, 0, 8, 8 );

		texture = new CanvasTexture( canvas );

	}

	this.render = function ( sprites, scene, camera ) {

		if ( sprites.length === 0 ) return;

		// setup gl

		if ( program === undefined ) {

			init();

		}

		state.useProgram( program );

		state.initAttributes();
		state.enableAttribute( attributes.position );
		state.enableAttribute( attributes.uv );
		state.disableUnusedAttributes();

		state.disable( gl.CULL_FACE );
		state.enable( gl.BLEND );

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
		gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

		gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

		state.activeTexture( gl.TEXTURE0 );
		gl.uniform1i( uniforms.map, 0 );

		var oldFogType = 0;
		var sceneFogType = 0;
		var fog = scene.fog;

		if ( fog ) {

			gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

			if ( fog.isFog ) {

				gl.uniform1f( uniforms.fogNear, fog.near );
				gl.uniform1f( uniforms.fogFar, fog.far );

				gl.uniform1i( uniforms.fogType, 1 );
				oldFogType = 1;
				sceneFogType = 1;

			} else if ( fog.isFogExp2 ) {

				gl.uniform1f( uniforms.fogDensity, fog.density );

				gl.uniform1i( uniforms.fogType, 2 );
				oldFogType = 2;
				sceneFogType = 2;

			}

		} else {

			gl.uniform1i( uniforms.fogType, 0 );
			oldFogType = 0;
			sceneFogType = 0;

		}


		// update positions and sort

		for ( var i = 0, l = sprites.length; i < l; i ++ ) {

			var sprite = sprites[ i ];

			sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
			sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

		}

		sprites.sort( painterSortStable );

		// render all sprites

		var scale = [];

		for ( var i = 0, l = sprites.length; i < l; i ++ ) {

			var sprite = sprites[ i ];
			var material = sprite.material;

			if ( material.visible === false ) continue;

			sprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );

			gl.uniform1f( uniforms.alphaTest, material.alphaTest );
			gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

			sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

			scale[ 0 ] = spriteScale.x;
			scale[ 1 ] = spriteScale.y;

			var fogType = 0;

			if ( scene.fog && material.fog ) {

				fogType = sceneFogType;

			}

			if ( oldFogType !== fogType ) {

				gl.uniform1i( uniforms.fogType, fogType );
				oldFogType = fogType;

			}

			if ( material.map !== null ) {

				gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
				gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

			} else {

				gl.uniform2f( uniforms.uvOffset, 0, 0 );
				gl.uniform2f( uniforms.uvScale, 1, 1 );

			}

			gl.uniform1f( uniforms.opacity, material.opacity );
			gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

			gl.uniform1f( uniforms.rotation, material.rotation );
			gl.uniform2fv( uniforms.scale, scale );

			state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );
			state.buffers.depth.setTest( material.depthTest );
			state.buffers.depth.setMask( material.depthWrite );
			state.buffers.color.setMask( material.colorWrite );

			textures.setTexture2D( material.map || texture, 0 );

			gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

			sprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );

		}

		// restore gl

		state.enable( gl.CULL_FACE );

		state.reset();

	};

	function createProgram() {

		var program = gl.createProgram();

		var vertexShader = gl.createShader( gl.VERTEX_SHADER );
		var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

		gl.shaderSource( vertexShader, [

			'precision ' + capabilities.precision + ' float;',

			'#define SHADER_NAME ' + 'SpriteMaterial',

			'uniform mat4 modelViewMatrix;',
			'uniform mat4 projectionMatrix;',
			'uniform float rotation;',
			'uniform vec2 scale;',
			'uniform vec2 uvOffset;',
			'uniform vec2 uvScale;',

			'attribute vec2 position;',
			'attribute vec2 uv;',

			'varying vec2 vUV;',
			'varying float fogDepth;',

			'void main() {',

			'	vUV = uvOffset + uv * uvScale;',

			'	vec2 alignedPosition = position * scale;',

			'	vec2 rotatedPosition;',
			'	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
			'	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

			'	vec4 mvPosition;',

			'	mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
			'	mvPosition.xy += rotatedPosition;',

			'	gl_Position = projectionMatrix * mvPosition;',

			'	fogDepth = - mvPosition.z;',

			'}'

		].join( '\n' ) );

		gl.shaderSource( fragmentShader, [

			'precision ' + capabilities.precision + ' float;',

			'#define SHADER_NAME ' + 'SpriteMaterial',

			'uniform vec3 color;',
			'uniform sampler2D map;',
			'uniform float opacity;',

			'uniform int fogType;',
			'uniform vec3 fogColor;',
			'uniform float fogDensity;',
			'uniform float fogNear;',
			'uniform float fogFar;',
			'uniform float alphaTest;',

			'varying vec2 vUV;',
			'varying float fogDepth;',

			'void main() {',

			'	vec4 texture = texture2D( map, vUV );',

			'	gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

			'	if ( gl_FragColor.a < alphaTest ) discard;',

			'	if ( fogType > 0 ) {',

			'		float fogFactor = 0.0;',

			'		if ( fogType == 1 ) {',

			'			fogFactor = smoothstep( fogNear, fogFar, fogDepth );',

			'		} else {',

			'			const float LOG2 = 1.442695;',
			'			fogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );',
			'			fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

			'		}',

			'		gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );',

			'	}',

			'}'

		].join( '\n' ) );

		gl.compileShader( vertexShader );
		gl.compileShader( fragmentShader );

		gl.attachShader( program, vertexShader );
		gl.attachShader( program, fragmentShader );

		gl.linkProgram( program );

		return program;

	}

	function painterSortStable( a, b ) {

		if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return b.id - a.id;

		}

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

var materialId = 0;

function Material() {

	Object.defineProperty( this, 'id', { value: materialId ++ } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'Material';

	this.fog = true;
	this.lights = true;

	this.blending = NormalBlending;
	this.side = FrontSide;
	this.flatShading = false;
	this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

	this.opacity = 1;
	this.transparent = false;

	this.blendSrc = SrcAlphaFactor;
	this.blendDst = OneMinusSrcAlphaFactor;
	this.blendEquation = AddEquation;
	this.blendSrcAlpha = null;
	this.blendDstAlpha = null;
	this.blendEquationAlpha = null;

	this.depthFunc = LessEqualDepth;
	this.depthTest = true;
	this.depthWrite = true;

	this.clippingPlanes = null;
	this.clipIntersection = false;
	this.clipShadows = false;

	this.colorWrite = true;

	this.precision = null; // override the renderer's default precision for this material

	this.polygonOffset = false;
	this.polygonOffsetFactor = 0;
	this.polygonOffsetUnits = 0;

	this.dithering = false;

	this.alphaTest = 0;
	this.premultipliedAlpha = false;

	this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

	this.visible = true;

	this.userData = {};

	this.needsUpdate = true;

}

Material.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

	constructor: Material,

	isMaterial: true,

	onBeforeCompile: function () {},

	setValues: function ( values ) {

		if ( values === undefined ) return;

		for ( var key in values ) {

			var newValue = values[ key ];

			if ( newValue === undefined ) {

				console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
				continue;

			}

			// for backward compatability if shading is set in the constructor
			if ( key === 'shading' ) {

				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
				this.flatShading = ( newValue === FlatShading ) ? true : false;
				continue;

			}

			var currentValue = this[ key ];

			if ( currentValue === undefined ) {

				console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
				continue;

			}

			if ( currentValue && currentValue.isColor ) {

				currentValue.set( newValue );

			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

				currentValue.copy( newValue );

			} else if ( key === 'overdraw' ) {

				// ensure overdraw is backwards-compatible with legacy boolean type
				this[ key ] = Number( newValue );

			} else {

				this[ key ] = newValue;

			}

		}

	},

	toJSON: function ( meta ) {

		var isRoot = ( meta === undefined || typeof meta === 'string' );

		if ( isRoot ) {

			meta = {
				textures: {},
				images: {}
			};

		}

		var data = {
			metadata: {
				version: 4.5,
				type: 'Material',
				generator: 'Material.toJSON'
			}
		};

		// standard Material serialization
		data.uuid = this.uuid;
		data.type = this.type;

		if ( this.name !== '' ) data.name = this.name;

		if ( this.color && this.color.isColor ) data.color = this.color.getHex();

		if ( this.roughness !== undefined ) data.roughness = this.roughness;
		if ( this.metalness !== undefined ) data.metalness = this.metalness;

		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
		if ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
		if ( this.shininess !== undefined ) data.shininess = this.shininess;
		if ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;
		if ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;

		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
		if ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
		if ( this.bumpMap && this.bumpMap.isTexture ) {

			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
			data.bumpScale = this.bumpScale;

		}
		if ( this.normalMap && this.normalMap.isTexture ) {

			data.normalMap = this.normalMap.toJSON( meta ).uuid;
			data.normalScale = this.normalScale.toArray();

		}
		if ( this.displacementMap && this.displacementMap.isTexture ) {

			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
			data.displacementScale = this.displacementScale;
			data.displacementBias = this.displacementBias;

		}
		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

		if ( this.envMap && this.envMap.isTexture ) {

			data.envMap = this.envMap.toJSON( meta ).uuid;
			data.reflectivity = this.reflectivity; // Scale behind envMap

		}

		if ( this.gradientMap && this.gradientMap.isTexture ) {

			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

		}

		if ( this.size !== undefined ) data.size = this.size;
		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

		if ( this.blending !== NormalBlending ) data.blending = this.blending;
		if ( this.flatShading === true ) data.flatShading = this.flatShading;
		if ( this.side !== FrontSide ) data.side = this.side;
		if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;

		if ( this.opacity < 1 ) data.opacity = this.opacity;
		if ( this.transparent === true ) data.transparent = this.transparent;

		data.depthFunc = this.depthFunc;
		data.depthTest = this.depthTest;
		data.depthWrite = this.depthWrite;

		// rotation (SpriteMaterial)
		if ( this.rotation !== 0 ) data.rotation = this.rotation;

		if ( this.linewidth !== 1 ) data.linewidth = this.linewidth;
		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
		if ( this.scale !== undefined ) data.scale = this.scale;

		if ( this.dithering === true ) data.dithering = true;

		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;

		if ( this.wireframe === true ) data.wireframe = this.wireframe;
		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

		if ( this.morphTargets === true ) data.morphTargets = true;
		if ( this.skinning === true ) data.skinning = true;

		if ( this.visible === false ) data.visible = false;
		if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;

		// TODO: Copied from Object3D.toJSON

		function extractFromCache( cache ) {

			var values = [];

			for ( var key in cache ) {

				var data = cache[ key ];
				delete data.metadata;
				values.push( data );

			}

			return values;

		}

		if ( isRoot ) {

			var textures = extractFromCache( meta.textures );
			var images = extractFromCache( meta.images );

			if ( textures.length > 0 ) data.textures = textures;
			if ( images.length > 0 ) data.images = images;

		}

		return data;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.name = source.name;

		this.fog = source.fog;
		this.lights = source.lights;

		this.blending = source.blending;
		this.side = source.side;
		this.flatShading = source.flatShading;
		this.vertexColors = source.vertexColors;

		this.opacity = source.opacity;
		this.transparent = source.transparent;

		this.blendSrc = source.blendSrc;
		this.blendDst = source.blendDst;
		this.blendEquation = source.blendEquation;
		this.blendSrcAlpha = source.blendSrcAlpha;
		this.blendDstAlpha = source.blendDstAlpha;
		this.blendEquationAlpha = source.blendEquationAlpha;

		this.depthFunc = source.depthFunc;
		this.depthTest = source.depthTest;
		this.depthWrite = source.depthWrite;

		this.colorWrite = source.colorWrite;

		this.precision = source.precision;

		this.polygonOffset = source.polygonOffset;
		this.polygonOffsetFactor = source.polygonOffsetFactor;
		this.polygonOffsetUnits = source.polygonOffsetUnits;

		this.dithering = source.dithering;

		this.alphaTest = source.alphaTest;
		this.premultipliedAlpha = source.premultipliedAlpha;

		this.overdraw = source.overdraw;

		this.visible = source.visible;
		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		this.clipShadows = source.clipShadows;
		this.clipIntersection = source.clipIntersection;

		var srcPlanes = source.clippingPlanes,
			dstPlanes = null;

		if ( srcPlanes !== null ) {

			var n = srcPlanes.length;
			dstPlanes = new Array( n );

			for ( var i = 0; i !== n; ++ i )
				dstPlanes[ i ] = srcPlanes[ i ].clone();

		}

		this.clippingPlanes = dstPlanes;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / https://clara.io
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */

function MeshDepthMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshDepthMaterial';

	this.depthPacking = BasicDepthPacking;

	this.skinning = false;
	this.morphTargets = false;

	this.map = null;

	this.alphaMap = null;

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false;
	this.lights = false;

	this.setValues( parameters );

}

MeshDepthMaterial.prototype = Object.create( Material.prototype );
MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

MeshDepthMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.depthPacking = source.depthPacking;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;

	this.map = source.map;

	this.alphaMap = source.alphaMap;

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;

	return this;

};

/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *
 *  referencePosition: <float>,
 *  nearDistance: <float>,
 *  farDistance: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>
 *
 * }
 */

function MeshDistanceMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshDistanceMaterial';

	this.referencePosition = new Vector3();
	this.nearDistance = 1;
	this.farDistance = 1000;

	this.skinning = false;
	this.morphTargets = false;

	this.map = null;

	this.alphaMap = null;

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.fog = false;
	this.lights = false;

	this.setValues( parameters );

}

MeshDistanceMaterial.prototype = Object.create( Material.prototype );
MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;

MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

MeshDistanceMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.referencePosition.copy( source.referencePosition );
	this.nearDistance = source.nearDistance;
	this.farDistance = source.farDistance;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;

	this.map = source.map;

	this.alphaMap = source.alphaMap;

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	return this;

};

/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */

function Box3( min, max ) {

	this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
	this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

}

Object.assign( Box3.prototype, {

	isBox3: true,

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromArray: function ( array ) {

		var minX = + Infinity;
		var minY = + Infinity;
		var minZ = + Infinity;

		var maxX = - Infinity;
		var maxY = - Infinity;
		var maxZ = - Infinity;

		for ( var i = 0, l = array.length; i < l; i += 3 ) {

			var x = array[ i ];
			var y = array[ i + 1 ];
			var z = array[ i + 2 ];

			if ( x < minX ) minX = x;
			if ( y < minY ) minY = y;
			if ( z < minZ ) minZ = z;

			if ( x > maxX ) maxX = x;
			if ( y > maxY ) maxY = y;
			if ( z > maxZ ) maxZ = z;

		}

		this.min.set( minX, minY, minZ );
		this.max.set( maxX, maxY, maxZ );

		return this;

	},

	setFromBufferAttribute: function ( attribute ) {

		var minX = + Infinity;
		var minY = + Infinity;
		var minZ = + Infinity;

		var maxX = - Infinity;
		var maxY = - Infinity;
		var maxZ = - Infinity;

		for ( var i = 0, l = attribute.count; i < l; i ++ ) {

			var x = attribute.getX( i );
			var y = attribute.getY( i );
			var z = attribute.getZ( i );

			if ( x < minX ) minX = x;
			if ( y < minY ) minY = y;
			if ( z < minZ ) minZ = z;

			if ( x > maxX ) maxX = x;
			if ( y > maxY ) maxY = y;
			if ( z > maxZ ) maxZ = z;

		}

		this.min.set( minX, minY, minZ );
		this.max.set( maxX, maxY, maxZ );

		return this;

	},

	setFromPoints: function ( points ) {

		this.makeEmpty();

		for ( var i = 0, il = points.length; i < il; i ++ ) {

			this.expandByPoint( points[ i ] );

		}

		return this;

	},

	setFromCenterAndSize: function () {

		var v1 = new Vector3();

		return function setFromCenterAndSize( center, size ) {

			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		};

	}(),

	setFromObject: function ( object ) {

		this.makeEmpty();

		return this.expandByObject( object );

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = this.min.z = + Infinity;
		this.max.x = this.max.y = this.max.z = - Infinity;

		return this;

	},

	isEmpty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

	},

	getCenter: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	},

	getSize: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	},

	expandByVector: function ( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	},

	expandByObject: function () {

		// Computes the world-axis-aligned bounding box of an object (including its children),
		// accounting for both the object's, and children's, world transforms

		var scope, i, l;

		var v1 = new Vector3();

		function traverse( node ) {

			var geometry = node.geometry;

			if ( geometry !== undefined ) {

				if ( geometry.isGeometry ) {

					var vertices = geometry.vertices;

					for ( i = 0, l = vertices.length; i < l; i ++ ) {

						v1.copy( vertices[ i ] );
						v1.applyMatrix4( node.matrixWorld );

						scope.expandByPoint( v1 );

					}

				} else if ( geometry.isBufferGeometry ) {

					var attribute = geometry.attributes.position;

					if ( attribute !== undefined ) {

						for ( i = 0, l = attribute.count; i < l; i ++ ) {

							v1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );

							scope.expandByPoint( v1 );

						}

					}

				}

			}

		}

		return function expandByObject( object ) {

			scope = this;

			object.updateMatrixWorld( true );

			object.traverse( traverse );

			return this;

		};

	}(),

	containsPoint: function ( point ) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ||
			point.z < this.min.z || point.z > this.max.z ? false : true;

	},

	containsBox: function ( box ) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y &&
			this.min.z <= box.min.z && box.max.z <= this.max.z;

	},

	getParameter: function ( point, optionalTarget ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		var result = optionalTarget || new Vector3();

		return result.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
			( point.z - this.min.z ) / ( this.max.z - this.min.z )
		);

	},

	intersectsBox: function ( box ) {

		// using 6 splitting planes to rule out intersections.
		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ||
			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

	},

	intersectsSphere: ( function () {

		var closestPoint = new Vector3();

		return function intersectsSphere( sphere ) {

			// Find the point on the AABB closest to the sphere center.
			this.clampPoint( sphere.center, closestPoint );

			// If that point is inside the sphere, the AABB and sphere intersect.
			return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

		};

	} )(),

	intersectsPlane: function ( plane ) {

		// We compute the minimum and maximum dot product values. If those values
		// are on the same side (back or front) of the plane, then there is no intersection.

		var min, max;

		if ( plane.normal.x > 0 ) {

			min = plane.normal.x * this.min.x;
			max = plane.normal.x * this.max.x;

		} else {

			min = plane.normal.x * this.max.x;
			max = plane.normal.x * this.min.x;

		}

		if ( plane.normal.y > 0 ) {

			min += plane.normal.y * this.min.y;
			max += plane.normal.y * this.max.y;

		} else {

			min += plane.normal.y * this.max.y;
			max += plane.normal.y * this.min.y;

		}

		if ( plane.normal.z > 0 ) {

			min += plane.normal.z * this.min.z;
			max += plane.normal.z * this.max.z;

		} else {

			min += plane.normal.z * this.max.z;
			max += plane.normal.z * this.min.z;

		}

		return ( min <= plane.constant && max >= plane.constant );

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.copy( point ).clamp( this.min, this.max );

	},

	distanceToPoint: function () {

		var v1 = new Vector3();

		return function distanceToPoint( point ) {

			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		};

	}(),

	getBoundingSphere: function () {

		var v1 = new Vector3();

		return function getBoundingSphere( optionalTarget ) {

			var result = optionalTarget || new Sphere();

			this.getCenter( result.center );

			result.radius = this.getSize( v1 ).length() * 0.5;

			return result;

		};

	}(),

	intersect: function ( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
		if ( this.isEmpty() ) this.makeEmpty();

		return this;

	},

	union: function ( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	},

	applyMatrix4: function () {

		var points = [
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3()
		];

		return function applyMatrix4( matrix ) {

			// transform of empty box is an empty box.
			if ( this.isEmpty() ) return this;

			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
			points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
			points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
			points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
			points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
			points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
			points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
			points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
			points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

			this.setFromPoints( points );

			return this;

		};

	}(),

	translate: function ( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	}

} );

/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */

function Sphere( center, radius ) {

	this.center = ( center !== undefined ) ? center : new Vector3();
	this.radius = ( radius !== undefined ) ? radius : 0;

}

Object.assign( Sphere.prototype, {

	set: function ( center, radius ) {

		this.center.copy( center );
		this.radius = radius;

		return this;

	},

	setFromPoints: function () {

		var box = new Box3();

		return function setFromPoints( points, optionalCenter ) {

			var center = this.center;

			if ( optionalCenter !== undefined ) {

				center.copy( optionalCenter );

			} else {

				box.setFromPoints( points ).getCenter( center );

			}

			var maxRadiusSq = 0;

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

			}

			this.radius = Math.sqrt( maxRadiusSq );

			return this;

		};

	}(),

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( sphere ) {

		this.center.copy( sphere.center );
		this.radius = sphere.radius;

		return this;

	},

	empty: function () {

		return ( this.radius <= 0 );

	},

	containsPoint: function ( point ) {

		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

	},

	distanceToPoint: function ( point ) {

		return ( point.distanceTo( this.center ) - this.radius );

	},

	intersectsSphere: function ( sphere ) {

		var radiusSum = this.radius + sphere.radius;

		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

	},

	intersectsBox: function ( box ) {

		return box.intersectsSphere( this );

	},

	intersectsPlane: function ( plane ) {

		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

	},

	clampPoint: function ( point, optionalTarget ) {

		var deltaLengthSq = this.center.distanceToSquared( point );

		var result = optionalTarget || new Vector3();

		result.copy( point );

		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

			result.sub( this.center ).normalize();
			result.multiplyScalar( this.radius ).add( this.center );

		}

		return result;

	},

	getBoundingBox: function ( optionalTarget ) {

		var box = optionalTarget || new Box3();

		box.set( this.center, this.center );
		box.expandByScalar( this.radius );

		return box;

	},

	applyMatrix4: function ( matrix ) {

		this.center.applyMatrix4( matrix );
		this.radius = this.radius * matrix.getMaxScaleOnAxis();

		return this;

	},

	translate: function ( offset ) {

		this.center.add( offset );

		return this;

	},

	equals: function ( sphere ) {

		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

	}

} );

/**
 * @author bhouston / http://clara.io
 */

function Plane( normal, constant ) {

	// normal is assumed to be normalized

	this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
	this.constant = ( constant !== undefined ) ? constant : 0;

}

Object.assign( Plane.prototype, {

	set: function ( normal, constant ) {

		this.normal.copy( normal );
		this.constant = constant;

		return this;

	},

	setComponents: function ( x, y, z, w ) {

		this.normal.set( x, y, z );
		this.constant = w;

		return this;

	},

	setFromNormalAndCoplanarPoint: function ( normal, point ) {

		this.normal.copy( normal );
		this.constant = - point.dot( this.normal );

		return this;

	},

	setFromCoplanarPoints: function () {

		var v1 = new Vector3();
		var v2 = new Vector3();

		return function setFromCoplanarPoints( a, b, c ) {

			var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

			this.setFromNormalAndCoplanarPoint( normal, a );

			return this;

		};

	}(),

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( plane ) {

		this.normal.copy( plane.normal );
		this.constant = plane.constant;

		return this;

	},

	normalize: function () {

		// Note: will lead to a divide by zero if the plane is invalid.

		var inverseNormalLength = 1.0 / this.normal.length();
		this.normal.multiplyScalar( inverseNormalLength );
		this.constant *= inverseNormalLength;

		return this;

	},

	negate: function () {

		this.constant *= - 1;
		this.normal.negate();

		return this;

	},

	distanceToPoint: function ( point ) {

		return this.normal.dot( point ) + this.constant;

	},

	distanceToSphere: function ( sphere ) {

		return this.distanceToPoint( sphere.center ) - sphere.radius;

	},

	projectPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return result.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

	},

	intersectLine: function () {

		var v1 = new Vector3();

		return function intersectLine( line, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			var direction = line.delta( v1 );

			var denominator = this.normal.dot( direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( this.distanceToPoint( line.start ) === 0 ) {

					return result.copy( line.start );

				}

				// Unsure if this is the correct method to handle this case.
				return undefined;

			}

			var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

			if ( t < 0 || t > 1 ) {

				return undefined;

			}

			return result.copy( direction ).multiplyScalar( t ).add( line.start );

		};

	}(),

	intersectsLine: function ( line ) {

		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

		var startSign = this.distanceToPoint( line.start );
		var endSign = this.distanceToPoint( line.end );

		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

	},

	intersectsBox: function ( box ) {

		return box.intersectsPlane( this );

	},

	intersectsSphere: function ( sphere ) {

		return sphere.intersectsPlane( this );

	},

	coplanarPoint: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return result.copy( this.normal ).multiplyScalar( - this.constant );

	},

	applyMatrix4: function () {

		var v1 = new Vector3();
		var m1 = new Matrix3();

		return function applyMatrix4( matrix, optionalNormalMatrix ) {

			var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );

			var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

			var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

			this.constant = - referencePoint.dot( normal );

			return this;

		};

	}(),

	translate: function ( offset ) {

		this.constant -= offset.dot( this.normal );

		return this;

	},

	equals: function ( plane ) {

		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / http://clara.io
 */

function Frustum( p0, p1, p2, p3, p4, p5 ) {

	this.planes = [

		( p0 !== undefined ) ? p0 : new Plane(),
		( p1 !== undefined ) ? p1 : new Plane(),
		( p2 !== undefined ) ? p2 : new Plane(),
		( p3 !== undefined ) ? p3 : new Plane(),
		( p4 !== undefined ) ? p4 : new Plane(),
		( p5 !== undefined ) ? p5 : new Plane()

	];

}

Object.assign( Frustum.prototype, {

	set: function ( p0, p1, p2, p3, p4, p5 ) {

		var planes = this.planes;

		planes[ 0 ].copy( p0 );
		planes[ 1 ].copy( p1 );
		planes[ 2 ].copy( p2 );
		planes[ 3 ].copy( p3 );
		planes[ 4 ].copy( p4 );
		planes[ 5 ].copy( p5 );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( frustum ) {

		var planes = this.planes;

		for ( var i = 0; i < 6; i ++ ) {

			planes[ i ].copy( frustum.planes[ i ] );

		}

		return this;

	},

	setFromMatrix: function ( m ) {

		var planes = this.planes;
		var me = m.elements;
		var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
		var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
		var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
		var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

		return this;

	},

	intersectsObject: function () {

		var sphere = new Sphere();

		return function intersectsObject( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null )
				geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere )
				.applyMatrix4( object.matrixWorld );

			return this.intersectsSphere( sphere );

		};

	}(),

	intersectsSprite: function () {

		var sphere = new Sphere();

		return function intersectsSprite( sprite ) {

			sphere.center.set( 0, 0, 0 );
			sphere.radius = 0.7071067811865476;
			sphere.applyMatrix4( sprite.matrixWorld );

			return this.intersectsSphere( sphere );

		};

	}(),

	intersectsSphere: function ( sphere ) {

		var planes = this.planes;
		var center = sphere.center;
		var negRadius = - sphere.radius;

		for ( var i = 0; i < 6; i ++ ) {

			var distance = planes[ i ].distanceToPoint( center );

			if ( distance < negRadius ) {

				return false;

			}

		}

		return true;

	},

	intersectsBox: function () {

		var p1 = new Vector3(),
			p2 = new Vector3();

		return function intersectsBox( box ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				var plane = planes[ i ];

				p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
				p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
				p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
				p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
				p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
				p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

				var d1 = plane.distanceToPoint( p1 );
				var d2 = plane.distanceToPoint( p2 );

				// if both outside plane, no intersection

				if ( d1 < 0 && d2 < 0 ) {

					return false;

				}

			}

			return true;

		};

	}(),

	containsPoint: function ( point ) {

		var planes = this.planes;

		for ( var i = 0; i < 6; i ++ ) {

			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

				return false;

			}

		}

		return true;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {

	var _frustum = new Frustum(),
		_projScreenMatrix = new Matrix4(),

		_shadowMapSize = new Vector2(),
		_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),

		_lookTarget = new Vector3(),
		_lightPositionWorld = new Vector3(),

		_MorphingFlag = 1,
		_SkinningFlag = 2,

		_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

		_depthMaterials = new Array( _NumberOfMaterialVariants ),
		_distanceMaterials = new Array( _NumberOfMaterialVariants ),

		_materialCache = {};

	var cubeDirections = [
		new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
		new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
	];

	var cubeUps = [
		new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
		new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
	];

	var cube2DViewPorts = [
		new Vector4(), new Vector4(), new Vector4(),
		new Vector4(), new Vector4(), new Vector4()
	];

	// init

	for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

		var useMorphing = ( i & _MorphingFlag ) !== 0;
		var useSkinning = ( i & _SkinningFlag ) !== 0;

		var depthMaterial = new MeshDepthMaterial( {

			depthPacking: RGBADepthPacking,

			morphTargets: useMorphing,
			skinning: useSkinning

		} );

		_depthMaterials[ i ] = depthMaterial;

		//

		var distanceMaterial = new MeshDistanceMaterial( {

			morphTargets: useMorphing,
			skinning: useSkinning

		} );

		_distanceMaterials[ i ] = distanceMaterial;

	}

	//

	var scope = this;

	this.enabled = false;

	this.autoUpdate = true;
	this.needsUpdate = false;

	this.type = PCFShadowMap;

	this.renderReverseSided = true;
	this.renderSingleSided = true;

	this.render = function ( lights, scene, camera ) {

		if ( scope.enabled === false ) return;
		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

		if ( lights.length === 0 ) return;

		// TODO Clean up (needed in case of contextlost)
		var _gl = _renderer.context;
		var _state = _renderer.state;

		// Set GL state for depth map.
		_state.disable( _gl.BLEND );
		_state.buffers.color.setClear( 1, 1, 1, 1 );
		_state.buffers.depth.setTest( true );
		_state.setScissorTest( false );

		// render depth map

		var faceCount;

		for ( var i = 0, il = lights.length; i < il; i ++ ) {

			var light = lights[ i ];
			var shadow = light.shadow;
			var isPointLight = light && light.isPointLight;

			if ( shadow === undefined ) {

				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
				continue;

			}

			var shadowCamera = shadow.camera;

			_shadowMapSize.copy( shadow.mapSize );
			_shadowMapSize.min( _maxShadowMapSize );

			if ( isPointLight ) {

				var vpWidth = _shadowMapSize.x;
				var vpHeight = _shadowMapSize.y;

				// These viewports map a cube-map onto a 2D texture with the
				// following orientation:
				//
				//  xzXZ
				//   y Y
				//
				// X - Positive x direction
				// x - Negative x direction
				// Y - Positive y direction
				// y - Negative y direction
				// Z - Positive z direction
				// z - Negative z direction

				// positive X
				cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
				// negative X
				cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
				// positive Z
				cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
				// negative Z
				cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
				// positive Y
				cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
				// negative Y
				cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

				_shadowMapSize.x *= 4.0;
				_shadowMapSize.y *= 2.0;

			}

			if ( shadow.map === null ) {

				var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
				shadow.map.texture.name = light.name + ".shadowMap";

				shadowCamera.updateProjectionMatrix();

			}

			if ( shadow.isSpotLightShadow ) {

				shadow.update( light );

			}

			var shadowMap = shadow.map;
			var shadowMatrix = shadow.matrix;

			_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
			shadowCamera.position.copy( _lightPositionWorld );

			if ( isPointLight ) {

				faceCount = 6;

				// for point lights we set the shadow matrix to be a translation-only matrix
				// equal to inverse of the light's position

				shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );

			} else {

				faceCount = 1;

				_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
				shadowCamera.lookAt( _lookTarget );
				shadowCamera.updateMatrixWorld();

				// compute shadow matrix

				shadowMatrix.set(
					0.5, 0.0, 0.0, 0.5,
					0.0, 0.5, 0.0, 0.5,
					0.0, 0.0, 0.5, 0.5,
					0.0, 0.0, 0.0, 1.0
				);

				shadowMatrix.multiply( shadowCamera.projectionMatrix );
				shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

			}

			_renderer.setRenderTarget( shadowMap );
			_renderer.clear();

			// render shadow map for each cube face (if omni-directional) or
			// run a single pass if not

			for ( var face = 0; face < faceCount; face ++ ) {

				if ( isPointLight ) {

					_lookTarget.copy( shadowCamera.position );
					_lookTarget.add( cubeDirections[ face ] );
					shadowCamera.up.copy( cubeUps[ face ] );
					shadowCamera.lookAt( _lookTarget );
					shadowCamera.updateMatrixWorld();

					var vpDimensions = cube2DViewPorts[ face ];
					_state.viewport( vpDimensions );

				}

				// update camera matrices and frustum

				_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
				_frustum.setFromMatrix( _projScreenMatrix );

				// set object matrices & frustum culling

				renderObject( scene, camera, shadowCamera, isPointLight );

			}

		}

		scope.needsUpdate = false;

	};

	function getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {

		var geometry = object.geometry;

		var result = null;

		var materialVariants = _depthMaterials;
		var customMaterial = object.customDepthMaterial;

		if ( isPointLight ) {

			materialVariants = _distanceMaterials;
			customMaterial = object.customDistanceMaterial;

		}

		if ( ! customMaterial ) {

			var useMorphing = false;

			if ( material.morphTargets ) {

				if ( geometry && geometry.isBufferGeometry ) {

					useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

				} else if ( geometry && geometry.isGeometry ) {

					useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

				}

			}

			if ( object.isSkinnedMesh && material.skinning === false ) {

				console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );

			}

			var useSkinning = object.isSkinnedMesh && material.skinning;

			var variantIndex = 0;

			if ( useMorphing ) variantIndex |= _MorphingFlag;
			if ( useSkinning ) variantIndex |= _SkinningFlag;

			result = materialVariants[ variantIndex ];

		} else {

			result = customMaterial;

		}

		if ( _renderer.localClippingEnabled &&
				material.clipShadows === true &&
				material.clippingPlanes.length !== 0 ) {

			// in this case we need a unique material instance reflecting the
			// appropriate state

			var keyA = result.uuid, keyB = material.uuid;

			var materialsForVariant = _materialCache[ keyA ];

			if ( materialsForVariant === undefined ) {

				materialsForVariant = {};
				_materialCache[ keyA ] = materialsForVariant;

			}

			var cachedMaterial = materialsForVariant[ keyB ];

			if ( cachedMaterial === undefined ) {

				cachedMaterial = result.clone();
				materialsForVariant[ keyB ] = cachedMaterial;

			}

			result = cachedMaterial;

		}

		result.visible = material.visible;
		result.wireframe = material.wireframe;

		var side = material.side;

		if ( scope.renderSingleSided && side == DoubleSide ) {

			side = FrontSide;

		}

		if ( scope.renderReverseSided ) {

			if ( side === FrontSide ) side = BackSide;
			else if ( side === BackSide ) side = FrontSide;

		}

		result.side = side;

		result.clipShadows = material.clipShadows;
		result.clippingPlanes = material.clippingPlanes;
		result.clipIntersection = material.clipIntersection;

		result.wireframeLinewidth = material.wireframeLinewidth;
		result.linewidth = material.linewidth;

		if ( isPointLight && result.isMeshDistanceMaterial ) {

			result.referencePosition.copy( lightPositionWorld );
			result.nearDistance = shadowCameraNear;
			result.farDistance = shadowCameraFar;

		}

		return result;

	}

	function renderObject( object, camera, shadowCamera, isPointLight ) {

		if ( object.visible === false ) return;

		var visible = object.layers.test( camera.layers );

		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

			if ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

				var geometry = _objects.update( object );
				var material = object.material;

				if ( Array.isArray( material ) ) {

					var groups = geometry.groups;

					for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

						var group = groups[ k ];
						var groupMaterial = material[ group.materialIndex ];

						if ( groupMaterial && groupMaterial.visible ) {

							var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

						}

					}

				} else if ( material.visible ) {

					var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

				}

			}

		}

		var children = object.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			renderObject( children[ i ], camera, shadowCamera, isPointLight );

		}

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLAttributes( gl ) {

	var buffers = {};

	function createBuffer( attribute, bufferType ) {

		var array = attribute.array;
		var usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

		var buffer = gl.createBuffer();

		gl.bindBuffer( bufferType, buffer );
		gl.bufferData( bufferType, array, usage );

		attribute.onUploadCallback();

		var type = gl.FLOAT;

		if ( array instanceof Float32Array ) {

			type = gl.FLOAT;

		} else if ( array instanceof Float64Array ) {

			console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

		} else if ( array instanceof Uint16Array ) {

			type = gl.UNSIGNED_SHORT;

		} else if ( array instanceof Int16Array ) {

			type = gl.SHORT;

		} else if ( array instanceof Uint32Array ) {

			type = gl.UNSIGNED_INT;

		} else if ( array instanceof Int32Array ) {

			type = gl.INT;

		} else if ( array instanceof Int8Array ) {

			type = gl.BYTE;

		} else if ( array instanceof Uint8Array ) {

			type = gl.UNSIGNED_BYTE;

		}

		return {
			buffer: buffer,
			type: type,
			bytesPerElement: array.BYTES_PER_ELEMENT,
			version: attribute.version
		};

	}

	function updateBuffer( buffer, attribute, bufferType ) {

		var array = attribute.array;
		var updateRange = attribute.updateRange;

		gl.bindBuffer( bufferType, buffer );

		if ( attribute.dynamic === false ) {

			gl.bufferData( bufferType, array, gl.STATIC_DRAW );

		} else if ( updateRange.count === - 1 ) {

			// Not using update ranges

			gl.bufferSubData( bufferType, 0, array );

		} else if ( updateRange.count === 0 ) {

			console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

		} else {

			gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
				array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

			updateRange.count = - 1; // reset range

		}

	}

	//

	function get( attribute ) {

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		return buffers[ attribute.uuid ];

	}

	function remove( attribute ) {

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		var data = buffers[ attribute.uuid ];

		if ( data ) {

			gl.deleteBuffer( data.buffer );

			delete buffers[ attribute.uuid ];

		}

	}

	function update( attribute, bufferType ) {

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		var data = buffers[ attribute.uuid ];

		if ( data === undefined ) {

			buffers[ attribute.uuid ] = createBuffer( attribute, bufferType );

		} else if ( data.version < attribute.version ) {

			updateBuffer( data.buffer, attribute, bufferType );

			data.version = attribute.version;

		}

	}

	return {

		get: get,
		remove: remove,
		update: update

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */

function Euler( x, y, z, order ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._order = order || Euler.DefaultOrder;

}

Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

Euler.DefaultOrder = 'XYZ';

Object.defineProperties( Euler.prototype, {

	x: {

		get: function () {

			return this._x;

		},

		set: function ( value ) {

			this._x = value;
			this.onChangeCallback();

		}

	},

	y: {

		get: function () {

			return this._y;

		},

		set: function ( value ) {

			this._y = value;
			this.onChangeCallback();

		}

	},

	z: {

		get: function () {

			return this._z;

		},

		set: function ( value ) {

			this._z = value;
			this.onChangeCallback();

		}

	},

	order: {

		get: function () {

			return this._order;

		},

		set: function ( value ) {

			this._order = value;
			this.onChangeCallback();

		}

	}

} );

Object.assign( Euler.prototype, {

	isEuler: true,

	set: function ( x, y, z, order ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._order = order || this._order;

		this.onChangeCallback();

		return this;

	},

	clone: function () {

		return new this.constructor( this._x, this._y, this._z, this._order );

	},

	copy: function ( euler ) {

		this._x = euler._x;
		this._y = euler._y;
		this._z = euler._z;
		this._order = euler._order;

		this.onChangeCallback();

		return this;

	},

	setFromRotationMatrix: function ( m, order, update ) {

		var clamp = _Math.clamp;

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements;
		var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
		var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
		var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		order = order || this._order;

		if ( order === 'XYZ' ) {

			this._y = Math.asin( clamp( m13, - 1, 1 ) );

			if ( Math.abs( m13 ) < 0.99999 ) {

				this._x = Math.atan2( - m23, m33 );
				this._z = Math.atan2( - m12, m11 );

			} else {

				this._x = Math.atan2( m32, m22 );
				this._z = 0;

			}

		} else if ( order === 'YXZ' ) {

			this._x = Math.asin( - clamp( m23, - 1, 1 ) );

			if ( Math.abs( m23 ) < 0.99999 ) {

				this._y = Math.atan2( m13, m33 );
				this._z = Math.atan2( m21, m22 );

			} else {

				this._y = Math.atan2( - m31, m11 );
				this._z = 0;

			}

		} else if ( order === 'ZXY' ) {

			this._x = Math.asin( clamp( m32, - 1, 1 ) );

			if ( Math.abs( m32 ) < 0.99999 ) {

				this._y = Math.atan2( - m31, m33 );
				this._z = Math.atan2( - m12, m22 );

			} else {

				this._y = 0;
				this._z = Math.atan2( m21, m11 );

			}

		} else if ( order === 'ZYX' ) {

			this._y = Math.asin( - clamp( m31, - 1, 1 ) );

			if ( Math.abs( m31 ) < 0.99999 ) {

				this._x = Math.atan2( m32, m33 );
				this._z = Math.atan2( m21, m11 );

			} else {

				this._x = 0;
				this._z = Math.atan2( - m12, m22 );

			}

		} else if ( order === 'YZX' ) {

			this._z = Math.asin( clamp( m21, - 1, 1 ) );

			if ( Math.abs( m21 ) < 0.99999 ) {

				this._x = Math.atan2( - m23, m22 );
				this._y = Math.atan2( - m31, m11 );

			} else {

				this._x = 0;
				this._y = Math.atan2( m13, m33 );

			}

		} else if ( order === 'XZY' ) {

			this._z = Math.asin( - clamp( m12, - 1, 1 ) );

			if ( Math.abs( m12 ) < 0.99999 ) {

				this._x = Math.atan2( m32, m22 );
				this._y = Math.atan2( m13, m11 );

			} else {

				this._x = Math.atan2( - m23, m33 );
				this._y = 0;

			}

		} else {

			console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

		}

		this._order = order;

		if ( update !== false ) this.onChangeCallback();

		return this;

	},

	setFromQuaternion: function () {

		var matrix = new Matrix4();

		return function setFromQuaternion( q, order, update ) {

			matrix.makeRotationFromQuaternion( q );

			return this.setFromRotationMatrix( matrix, order, update );

		};

	}(),

	setFromVector3: function ( v, order ) {

		return this.set( v.x, v.y, v.z, order || this._order );

	},

	reorder: function () {

		// WARNING: this discards revolution information -bhouston

		var q = new Quaternion();

		return function reorder( newOrder ) {

			q.setFromEuler( this );

			return this.setFromQuaternion( q, newOrder );

		};

	}(),

	equals: function ( euler ) {

		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

	},

	fromArray: function ( array ) {

		this._x = array[ 0 ];
		this._y = array[ 1 ];
		this._z = array[ 2 ];
		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

		this.onChangeCallback();

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._order;

		return array;

	},

	toVector3: function ( optionalResult ) {

		if ( optionalResult ) {

			return optionalResult.set( this._x, this._y, this._z );

		} else {

			return new Vector3( this._x, this._y, this._z );

		}

	},

	onChange: function ( callback ) {

		this.onChangeCallback = callback;

		return this;

	},

	onChangeCallback: function () {}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Layers() {

	this.mask = 1 | 0;

}

Object.assign( Layers.prototype, {

	set: function ( channel ) {

		this.mask = 1 << channel | 0;

	},

	enable: function ( channel ) {

		this.mask |= 1 << channel | 0;

	},

	toggle: function ( channel ) {

		this.mask ^= 1 << channel | 0;

	},

	disable: function ( channel ) {

		this.mask &= ~ ( 1 << channel | 0 );

	},

	test: function ( layers ) {

		return ( this.mask & layers.mask ) !== 0;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author elephantatwork / www.elephantatwork.ch
 */

var object3DId = 0;

function Object3D() {

	Object.defineProperty( this, 'id', { value: object3DId ++ } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'Object3D';

	this.parent = null;
	this.children = [];

	this.up = Object3D.DefaultUp.clone();

	var position = new Vector3();
	var rotation = new Euler();
	var quaternion = new Quaternion();
	var scale = new Vector3( 1, 1, 1 );

	function onRotationChange() {

		quaternion.setFromEuler( rotation, false );

	}

	function onQuaternionChange() {

		rotation.setFromQuaternion( quaternion, undefined, false );

	}

	rotation.onChange( onRotationChange );
	quaternion.onChange( onQuaternionChange );

	Object.defineProperties( this, {
		position: {
			enumerable: true,
			value: position
		},
		rotation: {
			enumerable: true,
			value: rotation
		},
		quaternion: {
			enumerable: true,
			value: quaternion
		},
		scale: {
			enumerable: true,
			value: scale
		},
		modelViewMatrix: {
			value: new Matrix4()
		},
		normalMatrix: {
			value: new Matrix3()
		}
	} );

	this.matrix = new Matrix4();
	this.matrixWorld = new Matrix4();

	this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
	this.matrixWorldNeedsUpdate = false;

	this.layers = new Layers();
	this.visible = true;

	this.castShadow = false;
	this.receiveShadow = false;

	this.frustumCulled = true;
	this.renderOrder = 0;

	this.userData = {};

}

Object3D.DefaultUp = new Vector3( 0, 1, 0 );
Object3D.DefaultMatrixAutoUpdate = true;

Object3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

	constructor: Object3D,

	isObject3D: true,

	onBeforeRender: function () {},
	onAfterRender: function () {},

	applyMatrix: function ( matrix ) {

		this.matrix.multiplyMatrices( matrix, this.matrix );

		this.matrix.decompose( this.position, this.quaternion, this.scale );

	},

	applyQuaternion: function ( q ) {

		this.quaternion.premultiply( q );

		return this;

	},

	setRotationFromAxisAngle: function ( axis, angle ) {

		// assumes axis is normalized

		this.quaternion.setFromAxisAngle( axis, angle );

	},

	setRotationFromEuler: function ( euler ) {

		this.quaternion.setFromEuler( euler, true );

	},

	setRotationFromMatrix: function ( m ) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		this.quaternion.setFromRotationMatrix( m );

	},

	setRotationFromQuaternion: function ( q ) {

		// assumes q is normalized

		this.quaternion.copy( q );

	},

	rotateOnAxis: function () {

		// rotate object on axis in object space
		// axis is assumed to be normalized

		var q1 = new Quaternion();

		return function rotateOnAxis( axis, angle ) {

			q1.setFromAxisAngle( axis, angle );

			this.quaternion.multiply( q1 );

			return this;

		};

	}(),

	rotateOnWorldAxis: function () {

		// rotate object on axis in world space
		// axis is assumed to be normalized
		// method assumes no rotated parent

		var q1 = new Quaternion();

		return function rotateOnWorldAxis( axis, angle ) {

			q1.setFromAxisAngle( axis, angle );

			this.quaternion.premultiply( q1 );

			return this;

		};

	}(),

	rotateX: function () {

		var v1 = new Vector3( 1, 0, 0 );

		return function rotateX( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	rotateY: function () {

		var v1 = new Vector3( 0, 1, 0 );

		return function rotateY( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	rotateZ: function () {

		var v1 = new Vector3( 0, 0, 1 );

		return function rotateZ( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	translateOnAxis: function () {

		// translate object by distance along axis in object space
		// axis is assumed to be normalized

		var v1 = new Vector3();

		return function translateOnAxis( axis, distance ) {

			v1.copy( axis ).applyQuaternion( this.quaternion );

			this.position.add( v1.multiplyScalar( distance ) );

			return this;

		};

	}(),

	translateX: function () {

		var v1 = new Vector3( 1, 0, 0 );

		return function translateX( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	translateY: function () {

		var v1 = new Vector3( 0, 1, 0 );

		return function translateY( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	translateZ: function () {

		var v1 = new Vector3( 0, 0, 1 );

		return function translateZ( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	localToWorld: function ( vector ) {

		return vector.applyMatrix4( this.matrixWorld );

	},

	worldToLocal: function () {

		var m1 = new Matrix4();

		return function worldToLocal( vector ) {

			return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

		};

	}(),

	lookAt: function () {

		// This method does not support objects with rotated and/or translated parent(s)

		var m1 = new Matrix4();
		var vector = new Vector3();

		return function lookAt( x, y, z ) {

			if ( x.isVector3 ) {

				vector.copy( x );

			} else {

				vector.set( x, y, z );

			}

			if ( this.isCamera ) {

				m1.lookAt( this.position, vector, this.up );

			} else {

				m1.lookAt( vector, this.position, this.up );

			}

			this.quaternion.setFromRotationMatrix( m1 );

		};

	}(),

	add: function ( object ) {

		if ( arguments.length > 1 ) {

			for ( var i = 0; i < arguments.length; i ++ ) {

				this.add( arguments[ i ] );

			}

			return this;

		}

		if ( object === this ) {

			console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
			return this;

		}

		if ( ( object && object.isObject3D ) ) {

			if ( object.parent !== null ) {

				object.parent.remove( object );

			}

			object.parent = this;
			object.dispatchEvent( { type: 'added' } );

			this.children.push( object );

		} else {

			console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

		}

		return this;

	},

	remove: function ( object ) {

		if ( arguments.length > 1 ) {

			for ( var i = 0; i < arguments.length; i ++ ) {

				this.remove( arguments[ i ] );

			}

			return this;

		}

		var index = this.children.indexOf( object );

		if ( index !== - 1 ) {

			object.parent = null;

			object.dispatchEvent( { type: 'removed' } );

			this.children.splice( index, 1 );

		}

		return this;

	},

	getObjectById: function ( id ) {

		return this.getObjectByProperty( 'id', id );

	},

	getObjectByName: function ( name ) {

		return this.getObjectByProperty( 'name', name );

	},

	getObjectByProperty: function ( name, value ) {

		if ( this[ name ] === value ) return this;

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			var child = this.children[ i ];
			var object = child.getObjectByProperty( name, value );

			if ( object !== undefined ) {

				return object;

			}

		}

		return undefined;

	},

	getWorldPosition: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();

		this.updateMatrixWorld( true );

		return result.setFromMatrixPosition( this.matrixWorld );

	},

	getWorldQuaternion: function () {

		var position = new Vector3();
		var scale = new Vector3();

		return function getWorldQuaternion( optionalTarget ) {

			var result = optionalTarget || new Quaternion();

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( position, result, scale );

			return result;

		};

	}(),

	getWorldRotation: function () {

		var quaternion = new Quaternion();

		return function getWorldRotation( optionalTarget ) {

			var result = optionalTarget || new Euler();

			this.getWorldQuaternion( quaternion );

			return result.setFromQuaternion( quaternion, this.rotation.order, false );

		};

	}(),

	getWorldScale: function () {

		var position = new Vector3();
		var quaternion = new Quaternion();

		return function getWorldScale( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( position, quaternion, result );

			return result;

		};

	}(),

	getWorldDirection: function () {

		var quaternion = new Quaternion();

		return function getWorldDirection( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

		};

	}(),

	raycast: function () {},

	traverse: function ( callback ) {

		callback( this );

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverse( callback );

		}

	},

	traverseVisible: function ( callback ) {

		if ( this.visible === false ) return;

		callback( this );

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverseVisible( callback );

		}

	},

	traverseAncestors: function ( callback ) {

		var parent = this.parent;

		if ( parent !== null ) {

			callback( parent );

			parent.traverseAncestors( callback );

		}

	},

	updateMatrix: function () {

		this.matrix.compose( this.position, this.quaternion, this.scale );

		this.matrixWorldNeedsUpdate = true;

	},

	updateMatrixWorld: function ( force ) {

		if ( this.matrixAutoUpdate ) this.updateMatrix();

		if ( this.matrixWorldNeedsUpdate || force ) {

			if ( this.parent === null ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			}

			this.matrixWorldNeedsUpdate = false;

			force = true;

		}

		// update children

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].updateMatrixWorld( force );

		}

	},

	toJSON: function ( meta ) {

		// meta is a string when called from JSON.stringify
		var isRootObject = ( meta === undefined || typeof meta === 'string' );

		var output = {};

		// meta is a hash used to collect geometries, materials.
		// not providing it implies that this is the root object
		// being serialized.
		if ( isRootObject ) {

			// initialize meta obj
			meta = {
				geometries: {},
				materials: {},
				textures: {},
				images: {},
				shapes: {}
			};

			output.metadata = {
				version: 4.5,
				type: 'Object',
				generator: 'Object3D.toJSON'
			};

		}

		// standard Object3D serialization

		var object = {};

		object.uuid = this.uuid;
		object.type = this.type;

		if ( this.name !== '' ) object.name = this.name;
		if ( this.castShadow === true ) object.castShadow = true;
		if ( this.receiveShadow === true ) object.receiveShadow = true;
		if ( this.visible === false ) object.visible = false;
		if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;

		object.matrix = this.matrix.toArray();

		//

		function serialize( library, element ) {

			if ( library[ element.uuid ] === undefined ) {

				library[ element.uuid ] = element.toJSON( meta );

			}

			return element.uuid;

		}

		if ( this.geometry !== undefined ) {

			object.geometry = serialize( meta.geometries, this.geometry );

			var parameters = this.geometry.parameters;

			if ( parameters !== undefined && parameters.shapes !== undefined ) {

				var shapes = parameters.shapes;

				if ( Array.isArray( shapes ) ) {

					for ( var i = 0, l = shapes.length; i < l; i ++ ) {

						var shape = shapes[ i ];

						serialize( meta.shapes, shape );

					}

				} else {

					serialize( meta.shapes, shapes );

				}

			}

		}

		if ( this.material !== undefined ) {

			if ( Array.isArray( this.material ) ) {

				var uuids = [];

				for ( var i = 0, l = this.material.length; i < l; i ++ ) {

					uuids.push( serialize( meta.materials, this.material[ i ] ) );

				}

				object.material = uuids;

			} else {

				object.material = serialize( meta.materials, this.material );

			}

		}

		//

		if ( this.children.length > 0 ) {

			object.children = [];

			for ( var i = 0; i < this.children.length; i ++ ) {

				object.children.push( this.children[ i ].toJSON( meta ).object );

			}

		}

		if ( isRootObject ) {

			var geometries = extractFromCache( meta.geometries );
			var materials = extractFromCache( meta.materials );
			var textures = extractFromCache( meta.textures );
			var images = extractFromCache( meta.images );
			var shapes = extractFromCache( meta.shapes );

			if ( geometries.length > 0 ) output.geometries = geometries;
			if ( materials.length > 0 ) output.materials = materials;
			if ( textures.length > 0 ) output.textures = textures;
			if ( images.length > 0 ) output.images = images;
			if ( shapes.length > 0 ) output.shapes = shapes;

		}

		output.object = object;

		return output;

		// extract data from the cache hash
		// remove metadata on each item
		// and return as array
		function extractFromCache( cache ) {

			var values = [];
			for ( var key in cache ) {

				var data = cache[ key ];
				delete data.metadata;
				values.push( data );

			}
			return values;

		}

	},

	clone: function ( recursive ) {

		return new this.constructor().copy( this, recursive );

	},

	copy: function ( source, recursive ) {

		if ( recursive === undefined ) recursive = true;

		this.name = source.name;

		this.up.copy( source.up );

		this.position.copy( source.position );
		this.quaternion.copy( source.quaternion );
		this.scale.copy( source.scale );

		this.matrix.copy( source.matrix );
		this.matrixWorld.copy( source.matrixWorld );

		this.matrixAutoUpdate = source.matrixAutoUpdate;
		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

		this.layers.mask = source.layers.mask;
		this.visible = source.visible;

		this.castShadow = source.castShadow;
		this.receiveShadow = source.receiveShadow;

		this.frustumCulled = source.frustumCulled;
		this.renderOrder = source.renderOrder;

		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		if ( recursive === true ) {

			for ( var i = 0; i < source.children.length; i ++ ) {

				var child = source.children[ i ];
				this.add( child.clone() );

			}

		}

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author WestLangley / http://github.com/WestLangley
*/

function Camera() {

	Object3D.call( this );

	this.type = 'Camera';

	this.matrixWorldInverse = new Matrix4();
	this.projectionMatrix = new Matrix4();

}

Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Camera,

	isCamera: true,

	copy: function ( source, recursive ) {

		Object3D.prototype.copy.call( this, source, recursive );

		this.matrixWorldInverse.copy( source.matrixWorldInverse );
		this.projectionMatrix.copy( source.projectionMatrix );

		return this;

	},

	getWorldDirection: function () {

		var quaternion = new Quaternion();

		return function getWorldDirection( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

		};

	}(),

	updateMatrixWorld: function ( force ) {

		Object3D.prototype.updateMatrixWorld.call( this, force );

		this.matrixWorldInverse.getInverse( this.matrixWorld );

	},

	clone: function () {

		return new this.constructor().copy( this );

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author arose / http://github.com/arose
 */

function OrthographicCamera( left, right, top, bottom, near, far ) {

	Camera.call( this );

	this.type = 'OrthographicCamera';

	this.zoom = 1;
	this.view = null;

	this.left = left;
	this.right = right;
	this.top = top;
	this.bottom = bottom;

	this.near = ( near !== undefined ) ? near : 0.1;
	this.far = ( far !== undefined ) ? far : 2000;

	this.updateProjectionMatrix();

}

OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

	constructor: OrthographicCamera,

	isOrthographicCamera: true,

	copy: function ( source, recursive ) {

		Camera.prototype.copy.call( this, source, recursive );

		this.left = source.left;
		this.right = source.right;
		this.top = source.top;
		this.bottom = source.bottom;
		this.near = source.near;
		this.far = source.far;

		this.zoom = source.zoom;
		this.view = source.view === null ? null : Object.assign( {}, source.view );

		return this;

	},

	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

		if ( this.view === null ) {

			this.view = {
				enabled: true,
				fullWidth: 1,
				fullHeight: 1,
				offsetX: 0,
				offsetY: 0,
				width: 1,
				height: 1
			};

		}

		this.view.enabled = true;
		this.view.fullWidth = fullWidth;
		this.view.fullHeight = fullHeight;
		this.view.offsetX = x;
		this.view.offsetY = y;
		this.view.width = width;
		this.view.height = height;

		this.updateProjectionMatrix();

	},

	clearViewOffset: function () {

		if ( this.view !== null ) {

			this.view.enabled = false;

		}

		this.updateProjectionMatrix();

	},

	updateProjectionMatrix: function () {

		var dx = ( this.right - this.left ) / ( 2 * this.zoom );
		var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
		var cx = ( this.right + this.left ) / 2;
		var cy = ( this.top + this.bottom ) / 2;

		var left = cx - dx;
		var right = cx + dx;
		var top = cy + dy;
		var bottom = cy - dy;

		if ( this.view !== null && this.view.enabled ) {

			var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
			var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
			var scaleW = ( this.right - this.left ) / this.view.width;
			var scaleH = ( this.top - this.bottom ) / this.view.height;

			left += scaleW * ( this.view.offsetX / zoomW );
			right = left + scaleW * ( this.view.width / zoomW );
			top -= scaleH * ( this.view.offsetY / zoomH );
			bottom = top - scaleH * ( this.view.height / zoomH );

		}

		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.zoom = this.zoom;
		data.object.left = this.left;
		data.object.right = this.right;
		data.object.top = this.top;
		data.object.bottom = this.bottom;
		data.object.near = this.near;
		data.object.far = this.far;

		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

		return data;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Face3( a, b, c, normal, color, materialIndex ) {

	this.a = a;
	this.b = b;
	this.c = c;

	this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
	this.vertexNormals = Array.isArray( normal ) ? normal : [];

	this.color = ( color && color.isColor ) ? color : new Color();
	this.vertexColors = Array.isArray( color ) ? color : [];

	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

}

Object.assign( Face3.prototype, {

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.a = source.a;
		this.b = source.b;
		this.c = source.c;

		this.normal.copy( source.normal );
		this.color.copy( source.color );

		this.materialIndex = source.materialIndex;

		for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

			this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

		}

		for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

			this.vertexColors[ i ] = source.vertexColors[ i ].clone();

		}

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author bhouston / http://clara.io
 */

var geometryId = 0; // Geometry uses even numbers as Id

function Geometry() {

	Object.defineProperty( this, 'id', { value: geometryId += 2 } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'Geometry';

	this.vertices = [];
	this.colors = [];
	this.faces = [];
	this.faceVertexUvs = [[]];

	this.morphTargets = [];
	this.morphNormals = [];

	this.skinWeights = [];
	this.skinIndices = [];

	this.lineDistances = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	// update flags

	this.elementsNeedUpdate = false;
	this.verticesNeedUpdate = false;
	this.uvsNeedUpdate = false;
	this.normalsNeedUpdate = false;
	this.colorsNeedUpdate = false;
	this.lineDistancesNeedUpdate = false;
	this.groupsNeedUpdate = false;

}

Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

	constructor: Geometry,

	isGeometry: true,

	applyMatrix: function ( matrix ) {

		var normalMatrix = new Matrix3().getNormalMatrix( matrix );

		for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

			var vertex = this.vertices[ i ];
			vertex.applyMatrix4( matrix );

		}

		for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

			var face = this.faces[ i ];
			face.normal.applyMatrix3( normalMatrix ).normalize();

			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

				face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

			}

		}

		if ( this.boundingBox !== null ) {

			this.computeBoundingBox();

		}

		if ( this.boundingSphere !== null ) {

			this.computeBoundingSphere();

		}

		this.verticesNeedUpdate = true;
		this.normalsNeedUpdate = true;

		return this;

	},

	rotateX: function () {

		// rotate geometry around world x-axis

		var m1 = new Matrix4();

		return function rotateX( angle ) {

			m1.makeRotationX( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateY: function () {

		// rotate geometry around world y-axis

		var m1 = new Matrix4();

		return function rotateY( angle ) {

			m1.makeRotationY( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateZ: function () {

		// rotate geometry around world z-axis

		var m1 = new Matrix4();

		return function rotateZ( angle ) {

			m1.makeRotationZ( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	translate: function () {

		// translate geometry

		var m1 = new Matrix4();

		return function translate( x, y, z ) {

			m1.makeTranslation( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	scale: function () {

		// scale geometry

		var m1 = new Matrix4();

		return function scale( x, y, z ) {

			m1.makeScale( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	lookAt: function () {

		var obj = new Object3D();

		return function lookAt( vector ) {

			obj.lookAt( vector );

			obj.updateMatrix();

			this.applyMatrix( obj.matrix );

		};

	}(),

	fromBufferGeometry: function ( geometry ) {

		var scope = this;

		var indices = geometry.index !== null ? geometry.index.array : undefined;
		var attributes = geometry.attributes;

		var positions = attributes.position.array;
		var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
		var colors = attributes.color !== undefined ? attributes.color.array : undefined;
		var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
		var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

		if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

		var tempNormals = [];
		var tempUVs = [];
		var tempUVs2 = [];

		for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

			scope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

			if ( normals !== undefined ) {

				tempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

			}

			if ( colors !== undefined ) {

				scope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

			}

			if ( uvs !== undefined ) {

				tempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );

			}

			if ( uvs2 !== undefined ) {

				tempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

			}

		}

		function addFace( a, b, c, materialIndex ) {

			var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
			var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

			var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

			scope.faces.push( face );

			if ( uvs !== undefined ) {

				scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

			}

			if ( uvs2 !== undefined ) {

				scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

			}

		}

		var groups = geometry.groups;

		if ( groups.length > 0 ) {

			for ( var i = 0; i < groups.length; i ++ ) {

				var group = groups[ i ];

				var start = group.start;
				var count = group.count;

				for ( var j = start, jl = start + count; j < jl; j += 3 ) {

					if ( indices !== undefined ) {

						addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );

					} else {

						addFace( j, j + 1, j + 2, group.materialIndex );

					}

				}

			}

		} else {

			if ( indices !== undefined ) {

				for ( var i = 0; i < indices.length; i += 3 ) {

					addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

				}

			} else {

				for ( var i = 0; i < positions.length / 3; i += 3 ) {

					addFace( i, i + 1, i + 2 );

				}

			}

		}

		this.computeFaceNormals();

		if ( geometry.boundingBox !== null ) {

			this.boundingBox = geometry.boundingBox.clone();

		}

		if ( geometry.boundingSphere !== null ) {

			this.boundingSphere = geometry.boundingSphere.clone();

		}

		return this;

	},

	center: function () {

		this.computeBoundingBox();

		var offset = this.boundingBox.getCenter().negate();

		this.translate( offset.x, offset.y, offset.z );

		return offset;

	},

	normalize: function () {

		this.computeBoundingSphere();

		var center = this.boundingSphere.center;
		var radius = this.boundingSphere.radius;

		var s = radius === 0 ? 1 : 1.0 / radius;

		var matrix = new Matrix4();
		matrix.set(
			s, 0, 0, - s * center.x,
			0, s, 0, - s * center.y,
			0, 0, s, - s * center.z,
			0, 0, 0, 1
		);

		this.applyMatrix( matrix );

		return this;

	},

	computeFaceNormals: function () {

		var cb = new Vector3(), ab = new Vector3();

		for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

			var face = this.faces[ f ];

			var vA = this.vertices[ face.a ];
			var vB = this.vertices[ face.b ];
			var vC = this.vertices[ face.c ];

			cb.subVectors( vC, vB );
			ab.subVectors( vA, vB );
			cb.cross( ab );

			cb.normalize();

			face.normal.copy( cb );

		}

	},

	computeVertexNormals: function ( areaWeighted ) {

		if ( areaWeighted === undefined ) areaWeighted = true;

		var v, vl, f, fl, face, vertices;

		vertices = new Array( this.vertices.length );

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			vertices[ v ] = new Vector3();

		}

		if ( areaWeighted ) {

			// vertex normals weighted by triangle areas
			// http://www.iquilezles.org/www/articles/normals/normals.htm

			var vA, vB, vC;
			var cb = new Vector3(), ab = new Vector3();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				vA = this.vertices[ face.a ];
				vB = this.vertices[ face.b ];
				vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				vertices[ face.a ].add( cb );
				vertices[ face.b ].add( cb );
				vertices[ face.c ].add( cb );

			}

		} else {

			this.computeFaceNormals();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				vertices[ face.a ].add( face.normal );
				vertices[ face.b ].add( face.normal );
				vertices[ face.c ].add( face.normal );

			}

		}

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			vertices[ v ].normalize();

		}

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			var vertexNormals = face.vertexNormals;

			if ( vertexNormals.length === 3 ) {

				vertexNormals[ 0 ].copy( vertices[ face.a ] );
				vertexNormals[ 1 ].copy( vertices[ face.b ] );
				vertexNormals[ 2 ].copy( vertices[ face.c ] );

			} else {

				vertexNormals[ 0 ] = vertices[ face.a ].clone();
				vertexNormals[ 1 ] = vertices[ face.b ].clone();
				vertexNormals[ 2 ] = vertices[ face.c ].clone();

			}

		}

		if ( this.faces.length > 0 ) {

			this.normalsNeedUpdate = true;

		}

	},

	computeFlatVertexNormals: function () {

		var f, fl, face;

		this.computeFaceNormals();

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			var vertexNormals = face.vertexNormals;

			if ( vertexNormals.length === 3 ) {

				vertexNormals[ 0 ].copy( face.normal );
				vertexNormals[ 1 ].copy( face.normal );
				vertexNormals[ 2 ].copy( face.normal );

			} else {

				vertexNormals[ 0 ] = face.normal.clone();
				vertexNormals[ 1 ] = face.normal.clone();
				vertexNormals[ 2 ] = face.normal.clone();

			}

		}

		if ( this.faces.length > 0 ) {

			this.normalsNeedUpdate = true;

		}

	},

	computeMorphNormals: function () {

		var i, il, f, fl, face;

		// save original normals
		// - create temp variables on first access
		//   otherwise just copy (for faster repeated calls)

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			if ( ! face.__originalFaceNormal ) {

				face.__originalFaceNormal = face.normal.clone();

			} else {

				face.__originalFaceNormal.copy( face.normal );

			}

			if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

			for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

				if ( ! face.__originalVertexNormals[ i ] ) {

					face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

				} else {

					face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

				}

			}

		}

		// use temp geometry to compute face and vertex normals for each morph

		var tmpGeo = new Geometry();
		tmpGeo.faces = this.faces;

		for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

			// create on first access

			if ( ! this.morphNormals[ i ] ) {

				this.morphNormals[ i ] = {};
				this.morphNormals[ i ].faceNormals = [];
				this.morphNormals[ i ].vertexNormals = [];

				var dstNormalsFace = this.morphNormals[ i ].faceNormals;
				var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					faceNormal = new Vector3();
					vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

					dstNormalsFace.push( faceNormal );
					dstNormalsVertex.push( vertexNormals );

				}

			}

			var morphNormals = this.morphNormals[ i ];

			// set vertices to morph target

			tmpGeo.vertices = this.morphTargets[ i ].vertices;

			// compute morph normals

			tmpGeo.computeFaceNormals();
			tmpGeo.computeVertexNormals();

			// store morph normals

			var faceNormal, vertexNormals;

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				faceNormal = morphNormals.faceNormals[ f ];
				vertexNormals = morphNormals.vertexNormals[ f ];

				faceNormal.copy( face.normal );

				vertexNormals.a.copy( face.vertexNormals[ 0 ] );
				vertexNormals.b.copy( face.vertexNormals[ 1 ] );
				vertexNormals.c.copy( face.vertexNormals[ 2 ] );

			}

		}

		// restore original normals

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			face.normal = face.__originalFaceNormal;
			face.vertexNormals = face.__originalVertexNormals;

		}

	},

	computeLineDistances: function () {

		var d = 0;
		var vertices = this.vertices;

		for ( var i = 0, il = vertices.length; i < il; i ++ ) {

			if ( i > 0 ) {

				d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

			}

			this.lineDistances[ i ] = d;

		}

	},

	computeBoundingBox: function () {

		if ( this.boundingBox === null ) {

			this.boundingBox = new Box3();

		}

		this.boundingBox.setFromPoints( this.vertices );

	},

	computeBoundingSphere: function () {

		if ( this.boundingSphere === null ) {

			this.boundingSphere = new Sphere();

		}

		this.boundingSphere.setFromPoints( this.vertices );

	},

	merge: function ( geometry, matrix, materialIndexOffset ) {

		if ( ! ( geometry && geometry.isGeometry ) ) {

			console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
			return;

		}

		var normalMatrix,
			vertexOffset = this.vertices.length,
			vertices1 = this.vertices,
			vertices2 = geometry.vertices,
			faces1 = this.faces,
			faces2 = geometry.faces,
			uvs1 = this.faceVertexUvs[ 0 ],
			uvs2 = geometry.faceVertexUvs[ 0 ],
			colors1 = this.colors,
			colors2 = geometry.colors;

		if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

		if ( matrix !== undefined ) {

			normalMatrix = new Matrix3().getNormalMatrix( matrix );

		}

		// vertices

		for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

			var vertex = vertices2[ i ];

			var vertexCopy = vertex.clone();

			if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

			vertices1.push( vertexCopy );

		}

		// colors

		for ( var i = 0, il = colors2.length; i < il; i ++ ) {

			colors1.push( colors2[ i ].clone() );

		}

		// faces

		for ( i = 0, il = faces2.length; i < il; i ++ ) {

			var face = faces2[ i ], faceCopy, normal, color,
				faceVertexNormals = face.vertexNormals,
				faceVertexColors = face.vertexColors;

			faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
			faceCopy.normal.copy( face.normal );

			if ( normalMatrix !== undefined ) {

				faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

			}

			for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

				normal = faceVertexNormals[ j ].clone();

				if ( normalMatrix !== undefined ) {

					normal.applyMatrix3( normalMatrix ).normalize();

				}

				faceCopy.vertexNormals.push( normal );

			}

			faceCopy.color.copy( face.color );

			for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

				color = faceVertexColors[ j ];
				faceCopy.vertexColors.push( color.clone() );

			}

			faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

			faces1.push( faceCopy );

		}

		// uvs

		for ( i = 0, il = uvs2.length; i < il; i ++ ) {

			var uv = uvs2[ i ], uvCopy = [];

			if ( uv === undefined ) {

				continue;

			}

			for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

				uvCopy.push( uv[ j ].clone() );

			}

			uvs1.push( uvCopy );

		}

	},

	mergeMesh: function ( mesh ) {

		if ( ! ( mesh && mesh.isMesh ) ) {

			console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
			return;

		}

		mesh.matrixAutoUpdate && mesh.updateMatrix();

		this.merge( mesh.geometry, mesh.matrix );

	},

	/*
	 * Checks for duplicate vertices with hashmap.
	 * Duplicated vertices are removed
	 * and faces' vertices are updated.
	 */

	mergeVertices: function () {

		var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
		var unique = [], changes = [];

		var v, key;
		var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
		var precision = Math.pow( 10, precisionPoints );
		var i, il, face;
		var indices, j, jl;

		for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

			v = this.vertices[ i ];
			key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

			if ( verticesMap[ key ] === undefined ) {

				verticesMap[ key ] = i;
				unique.push( this.vertices[ i ] );
				changes[ i ] = unique.length - 1;

			} else {

				//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
				changes[ i ] = changes[ verticesMap[ key ] ];

			}

		}


		// if faces are completely degenerate after merging vertices, we
		// have to remove them from the geometry.
		var faceIndicesToRemove = [];

		for ( i = 0, il = this.faces.length; i < il; i ++ ) {

			face = this.faces[ i ];

			face.a = changes[ face.a ];
			face.b = changes[ face.b ];
			face.c = changes[ face.c ];

			indices = [ face.a, face.b, face.c ];

			// if any duplicate vertices are found in a Face3
			// we have to remove the face as nothing can be saved
			for ( var n = 0; n < 3; n ++ ) {

				if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

					faceIndicesToRemove.push( i );
					break;

				}

			}

		}

		for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

			var idx = faceIndicesToRemove[ i ];

			this.faces.splice( idx, 1 );

			for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

				this.faceVertexUvs[ j ].splice( idx, 1 );

			}

		}

		// Use unique set of vertices

		var diff = this.vertices.length - unique.length;
		this.vertices = unique;
		return diff;

	},

	setFromPoints: function ( points ) {

		this.vertices = [];

		for ( var i = 0, l = points.length; i < l; i ++ ) {

			var point = points[ i ];
			this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

		}

		return this;

	},

	sortFacesByMaterialIndex: function () {

		var faces = this.faces;
		var length = faces.length;

		// tag faces

		for ( var i = 0; i < length; i ++ ) {

			faces[ i ]._id = i;

		}

		// sort faces

		function materialIndexSort( a, b ) {

			return a.materialIndex - b.materialIndex;

		}

		faces.sort( materialIndexSort );

		// sort uvs

		var uvs1 = this.faceVertexUvs[ 0 ];
		var uvs2 = this.faceVertexUvs[ 1 ];

		var newUvs1, newUvs2;

		if ( uvs1 && uvs1.length === length ) newUvs1 = [];
		if ( uvs2 && uvs2.length === length ) newUvs2 = [];

		for ( var i = 0; i < length; i ++ ) {

			var id = faces[ i ]._id;

			if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
			if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

		}

		if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
		if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

	},

	toJSON: function () {

		var data = {
			metadata: {
				version: 4.5,
				type: 'Geometry',
				generator: 'Geometry.toJSON'
			}
		};

		// standard Geometry serialization

		data.uuid = this.uuid;
		data.type = this.type;
		if ( this.name !== '' ) data.name = this.name;

		if ( this.parameters !== undefined ) {

			var parameters = this.parameters;

			for ( var key in parameters ) {

				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

			}

			return data;

		}

		var vertices = [];

		for ( var i = 0; i < this.vertices.length; i ++ ) {

			var vertex = this.vertices[ i ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

		var faces = [];
		var normals = [];
		var normalsHash = {};
		var colors = [];
		var colorsHash = {};
		var uvs = [];
		var uvsHash = {};

		for ( var i = 0; i < this.faces.length; i ++ ) {

			var face = this.faces[ i ];

			var hasMaterial = true;
			var hasFaceUv = false; // deprecated
			var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
			var hasFaceNormal = face.normal.length() > 0;
			var hasFaceVertexNormal = face.vertexNormals.length > 0;
			var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
			var hasFaceVertexColor = face.vertexColors.length > 0;

			var faceType = 0;

			faceType = setBit( faceType, 0, 0 ); // isQuad
			faceType = setBit( faceType, 1, hasMaterial );
			faceType = setBit( faceType, 2, hasFaceUv );
			faceType = setBit( faceType, 3, hasFaceVertexUv );
			faceType = setBit( faceType, 4, hasFaceNormal );
			faceType = setBit( faceType, 5, hasFaceVertexNormal );
			faceType = setBit( faceType, 6, hasFaceColor );
			faceType = setBit( faceType, 7, hasFaceVertexColor );

			faces.push( faceType );
			faces.push( face.a, face.b, face.c );
			faces.push( face.materialIndex );

			if ( hasFaceVertexUv ) {

				var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

				faces.push(
					getUvIndex( faceVertexUvs[ 0 ] ),
					getUvIndex( faceVertexUvs[ 1 ] ),
					getUvIndex( faceVertexUvs[ 2 ] )
				);

			}

			if ( hasFaceNormal ) {

				faces.push( getNormalIndex( face.normal ) );

			}

			if ( hasFaceVertexNormal ) {

				var vertexNormals = face.vertexNormals;

				faces.push(
					getNormalIndex( vertexNormals[ 0 ] ),
					getNormalIndex( vertexNormals[ 1 ] ),
					getNormalIndex( vertexNormals[ 2 ] )
				);

			}

			if ( hasFaceColor ) {

				faces.push( getColorIndex( face.color ) );

			}

			if ( hasFaceVertexColor ) {

				var vertexColors = face.vertexColors;

				faces.push(
					getColorIndex( vertexColors[ 0 ] ),
					getColorIndex( vertexColors[ 1 ] ),
					getColorIndex( vertexColors[ 2 ] )
				);

			}

		}

		function setBit( value, position, enabled ) {

			return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

		}

		function getNormalIndex( normal ) {

			var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

			if ( normalsHash[ hash ] !== undefined ) {

				return normalsHash[ hash ];

			}

			normalsHash[ hash ] = normals.length / 3;
			normals.push( normal.x, normal.y, normal.z );

			return normalsHash[ hash ];

		}

		function getColorIndex( color ) {

			var hash = color.r.toString() + color.g.toString() + color.b.toString();

			if ( colorsHash[ hash ] !== undefined ) {

				return colorsHash[ hash ];

			}

			colorsHash[ hash ] = colors.length;
			colors.push( color.getHex() );

			return colorsHash[ hash ];

		}

		function getUvIndex( uv ) {

			var hash = uv.x.toString() + uv.y.toString();

			if ( uvsHash[ hash ] !== undefined ) {

				return uvsHash[ hash ];

			}

			uvsHash[ hash ] = uvs.length / 2;
			uvs.push( uv.x, uv.y );

			return uvsHash[ hash ];

		}

		data.data = {};

		data.data.vertices = vertices;
		data.data.normals = normals;
		if ( colors.length > 0 ) data.data.colors = colors;
		if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
		data.data.faces = faces;

		return data;

	},

	clone: function () {

		/*
		 // Handle primitives

		 var parameters = this.parameters;

		 if ( parameters !== undefined ) {

		 var values = [];

		 for ( var key in parameters ) {

		 values.push( parameters[ key ] );

		 }

		 var geometry = Object.create( this.constructor.prototype );
		 this.constructor.apply( geometry, values );
		 return geometry;

		 }

		 return new this.constructor().copy( this );
		 */

		return new Geometry().copy( this );

	},

	copy: function ( source ) {

		var i, il, j, jl, k, kl;

		// reset

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [[]];
		this.morphTargets = [];
		this.morphNormals = [];
		this.skinWeights = [];
		this.skinIndices = [];
		this.lineDistances = [];
		this.boundingBox = null;
		this.boundingSphere = null;

		// name

		this.name = source.name;

		// vertices

		var vertices = source.vertices;

		for ( i = 0, il = vertices.length; i < il; i ++ ) {

			this.vertices.push( vertices[ i ].clone() );

		}

		// colors

		var colors = source.colors;

		for ( i = 0, il = colors.length; i < il; i ++ ) {

			this.colors.push( colors[ i ].clone() );

		}

		// faces

		var faces = source.faces;

		for ( i = 0, il = faces.length; i < il; i ++ ) {

			this.faces.push( faces[ i ].clone() );

		}

		// face vertex uvs

		for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

			var faceVertexUvs = source.faceVertexUvs[ i ];

			if ( this.faceVertexUvs[ i ] === undefined ) {

				this.faceVertexUvs[ i ] = [];

			}

			for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

				var uvs = faceVertexUvs[ j ], uvsCopy = [];

				for ( k = 0, kl = uvs.length; k < kl; k ++ ) {

					var uv = uvs[ k ];

					uvsCopy.push( uv.clone() );

				}

				this.faceVertexUvs[ i ].push( uvsCopy );

			}

		}

		// morph targets

		var morphTargets = source.morphTargets;

		for ( i = 0, il = morphTargets.length; i < il; i ++ ) {

			var morphTarget = {};
			morphTarget.name = morphTargets[ i ].name;

			// vertices

			if ( morphTargets[ i ].vertices !== undefined ) {

				morphTarget.vertices = [];

				for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {

					morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );

				}

			}

			// normals

			if ( morphTargets[ i ].normals !== undefined ) {

				morphTarget.normals = [];

				for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {

					morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );

				}

			}

			this.morphTargets.push( morphTarget );

		}

		// morph normals

		var morphNormals = source.morphNormals;

		for ( i = 0, il = morphNormals.length; i < il; i ++ ) {

			var morphNormal = {};

			// vertex normals

			if ( morphNormals[ i ].vertexNormals !== undefined ) {

				morphNormal.vertexNormals = [];

				for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {

					var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
					var destVertexNormal = {};

					destVertexNormal.a = srcVertexNormal.a.clone();
					destVertexNormal.b = srcVertexNormal.b.clone();
					destVertexNormal.c = srcVertexNormal.c.clone();

					morphNormal.vertexNormals.push( destVertexNormal );

				}

			}

			// face normals

			if ( morphNormals[ i ].faceNormals !== undefined ) {

				morphNormal.faceNormals = [];

				for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {

					morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );

				}

			}

			this.morphNormals.push( morphNormal );

		}

		// skin weights

		var skinWeights = source.skinWeights;

		for ( i = 0, il = skinWeights.length; i < il; i ++ ) {

			this.skinWeights.push( skinWeights[ i ].clone() );

		}

		// skin indices

		var skinIndices = source.skinIndices;

		for ( i = 0, il = skinIndices.length; i < il; i ++ ) {

			this.skinIndices.push( skinIndices[ i ].clone() );

		}

		// line distances

		var lineDistances = source.lineDistances;

		for ( i = 0, il = lineDistances.length; i < il; i ++ ) {

			this.lineDistances.push( lineDistances[ i ] );

		}

		// bounding box

		var boundingBox = source.boundingBox;

		if ( boundingBox !== null ) {

			this.boundingBox = boundingBox.clone();

		}

		// bounding sphere

		var boundingSphere = source.boundingSphere;

		if ( boundingSphere !== null ) {

			this.boundingSphere = boundingSphere.clone();

		}

		// update flags

		this.elementsNeedUpdate = source.elementsNeedUpdate;
		this.verticesNeedUpdate = source.verticesNeedUpdate;
		this.uvsNeedUpdate = source.uvsNeedUpdate;
		this.normalsNeedUpdate = source.normalsNeedUpdate;
		this.colorsNeedUpdate = source.colorsNeedUpdate;
		this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
		this.groupsNeedUpdate = source.groupsNeedUpdate;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function BufferAttribute( array, itemSize, normalized ) {

	if ( Array.isArray( array ) ) {

		throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

	}

	this.uuid = _Math.generateUUID();
	this.name = '';

	this.array = array;
	this.itemSize = itemSize;
	this.count = array !== undefined ? array.length / itemSize : 0;
	this.normalized = normalized === true;

	this.dynamic = false;
	this.updateRange = { offset: 0, count: - 1 };

	this.onUploadCallback = function () {};

	this.version = 0;

}

Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {

	set: function ( value ) {

		if ( value === true ) this.version ++;

	}

} );

Object.assign( BufferAttribute.prototype, {

	isBufferAttribute: true,

	setArray: function ( array ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.count = array !== undefined ? array.length / this.itemSize : 0;
		this.array = array;

	},

	setDynamic: function ( value ) {

		this.dynamic = value;

		return this;

	},

	copy: function ( source ) {

		this.array = new source.array.constructor( source.array );
		this.itemSize = source.itemSize;
		this.count = source.count;
		this.normalized = source.normalized;

		this.dynamic = source.dynamic;

		return this;

	},

	copyAt: function ( index1, attribute, index2 ) {

		index1 *= this.itemSize;
		index2 *= attribute.itemSize;

		for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

			this.array[ index1 + i ] = attribute.array[ index2 + i ];

		}

		return this;

	},

	copyArray: function ( array ) {

		this.array.set( array );

		return this;

	},

	copyColorsArray: function ( colors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = colors.length; i < l; i ++ ) {

			var color = colors[ i ];

			if ( color === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
				color = new Color();

			}

			array[ offset ++ ] = color.r;
			array[ offset ++ ] = color.g;
			array[ offset ++ ] = color.b;

		}

		return this;

	},

	copyIndicesArray: function ( indices ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = indices.length; i < l; i ++ ) {

			var index = indices[ i ];

			array[ offset ++ ] = index.a;
			array[ offset ++ ] = index.b;
			array[ offset ++ ] = index.c;

		}

		return this;

	},

	copyVector2sArray: function ( vectors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

			var vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
				vector = new Vector2();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;

		}

		return this;

	},

	copyVector3sArray: function ( vectors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

			var vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
				vector = new Vector3();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;
			array[ offset ++ ] = vector.z;

		}

		return this;

	},

	copyVector4sArray: function ( vectors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

			var vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
				vector = new Vector4();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;
			array[ offset ++ ] = vector.z;
			array[ offset ++ ] = vector.w;

		}

		return this;

	},

	set: function ( value, offset ) {

		if ( offset === undefined ) offset = 0;

		this.array.set( value, offset );

		return this;

	},

	getX: function ( index ) {

		return this.array[ index * this.itemSize ];

	},

	setX: function ( index, x ) {

		this.array[ index * this.itemSize ] = x;

		return this;

	},

	getY: function ( index ) {

		return this.array[ index * this.itemSize + 1 ];

	},

	setY: function ( index, y ) {

		this.array[ index * this.itemSize + 1 ] = y;

		return this;

	},

	getZ: function ( index ) {

		return this.array[ index * this.itemSize + 2 ];

	},

	setZ: function ( index, z ) {

		this.array[ index * this.itemSize + 2 ] = z;

		return this;

	},

	getW: function ( index ) {

		return this.array[ index * this.itemSize + 3 ];

	},

	setW: function ( index, w ) {

		this.array[ index * this.itemSize + 3 ] = w;

		return this;

	},

	setXY: function ( index, x, y ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;

		return this;

	},

	setXYZ: function ( index, x, y, z ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;

		return this;

	},

	setXYZW: function ( index, x, y, z, w ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;
		this.array[ index + 3 ] = w;

		return this;

	},

	onUpload: function ( callback ) {

		this.onUploadCallback = callback;

		return this;

	},

	clone: function () {

		return new this.constructor( this.array, this.itemSize ).copy( this );

	}

} );

//

function Int8BufferAttribute( array, itemSize, normalized ) {

	BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );

}

Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;


function Uint8BufferAttribute( array, itemSize, normalized ) {

	BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );

}

Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;


function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {

	BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );

}

Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;


function Int16BufferAttribute( array, itemSize, normalized ) {

	BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );

}

Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;


function Uint16BufferAttribute( array, itemSize, normalized ) {

	BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );

}

Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


function Int32BufferAttribute( array, itemSize, normalized ) {

	BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );

}

Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;


function Uint32BufferAttribute( array, itemSize, normalized ) {

	BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );

}

Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


function Float32BufferAttribute( array, itemSize, normalized ) {

	BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );

}

Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


function Float64BufferAttribute( array, itemSize, normalized ) {

	BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );

}

Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;

/**
 * @author mrdoob / http://mrdoob.com/
 */

function DirectGeometry() {

	this.indices = [];
	this.vertices = [];
	this.normals = [];
	this.colors = [];
	this.uvs = [];
	this.uvs2 = [];

	this.groups = [];

	this.morphTargets = {};

	this.skinWeights = [];
	this.skinIndices = [];

	// this.lineDistances = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	// update flags

	this.verticesNeedUpdate = false;
	this.normalsNeedUpdate = false;
	this.colorsNeedUpdate = false;
	this.uvsNeedUpdate = false;
	this.groupsNeedUpdate = false;

}

Object.assign( DirectGeometry.prototype, {

	computeGroups: function ( geometry ) {

		var group;
		var groups = [];
		var materialIndex = undefined;

		var faces = geometry.faces;

		for ( var i = 0; i < faces.length; i ++ ) {

			var face = faces[ i ];

			// materials

			if ( face.materialIndex !== materialIndex ) {

				materialIndex = face.materialIndex;

				if ( group !== undefined ) {

					group.count = ( i * 3 ) - group.start;
					groups.push( group );

				}

				group = {
					start: i * 3,
					materialIndex: materialIndex
				};

			}

		}

		if ( group !== undefined ) {

			group.count = ( i * 3 ) - group.start;
			groups.push( group );

		}

		this.groups = groups;

	},

	fromGeometry: function ( geometry ) {

		var faces = geometry.faces;
		var vertices = geometry.vertices;
		var faceVertexUvs = geometry.faceVertexUvs;

		var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
		var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

		// morphs

		var morphTargets = geometry.morphTargets;
		var morphTargetsLength = morphTargets.length;

		var morphTargetsPosition;

		if ( morphTargetsLength > 0 ) {

			morphTargetsPosition = [];

			for ( var i = 0; i < morphTargetsLength; i ++ ) {

				morphTargetsPosition[ i ] = [];

			}

			this.morphTargets.position = morphTargetsPosition;

		}

		var morphNormals = geometry.morphNormals;
		var morphNormalsLength = morphNormals.length;

		var morphTargetsNormal;

		if ( morphNormalsLength > 0 ) {

			morphTargetsNormal = [];

			for ( var i = 0; i < morphNormalsLength; i ++ ) {

				morphTargetsNormal[ i ] = [];

			}

			this.morphTargets.normal = morphTargetsNormal;

		}

		// skins

		var skinIndices = geometry.skinIndices;
		var skinWeights = geometry.skinWeights;

		var hasSkinIndices = skinIndices.length === vertices.length;
		var hasSkinWeights = skinWeights.length === vertices.length;

		//

		for ( var i = 0; i < faces.length; i ++ ) {

			var face = faces[ i ];

			this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

			var vertexNormals = face.vertexNormals;

			if ( vertexNormals.length === 3 ) {

				this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

			} else {

				var normal = face.normal;

				this.normals.push( normal, normal, normal );

			}

			var vertexColors = face.vertexColors;

			if ( vertexColors.length === 3 ) {

				this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

			} else {

				var color = face.color;

				this.colors.push( color, color, color );

			}

			if ( hasFaceVertexUv === true ) {

				var vertexUvs = faceVertexUvs[ 0 ][ i ];

				if ( vertexUvs !== undefined ) {

					this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

				} else {

					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

					this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

				}

			}

			if ( hasFaceVertexUv2 === true ) {

				var vertexUvs = faceVertexUvs[ 1 ][ i ];

				if ( vertexUvs !== undefined ) {

					this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

				} else {

					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

					this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

				}

			}

			// morphs

			for ( var j = 0; j < morphTargetsLength; j ++ ) {

				var morphTarget = morphTargets[ j ].vertices;

				morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

			}

			for ( var j = 0; j < morphNormalsLength; j ++ ) {

				var morphNormal = morphNormals[ j ].vertexNormals[ i ];

				morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

			}

			// skins

			if ( hasSkinIndices ) {

				this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

			}

			if ( hasSkinWeights ) {

				this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

			}

		}

		this.computeGroups( geometry );

		this.verticesNeedUpdate = geometry.verticesNeedUpdate;
		this.normalsNeedUpdate = geometry.normalsNeedUpdate;
		this.colorsNeedUpdate = geometry.colorsNeedUpdate;
		this.uvsNeedUpdate = geometry.uvsNeedUpdate;
		this.groupsNeedUpdate = geometry.groupsNeedUpdate;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function arrayMax( array ) {

	if ( array.length === 0 ) return - Infinity;

	var max = array[ 0 ];

	for ( var i = 1, l = array.length; i < l; ++ i ) {

		if ( array[ i ] > max ) max = array[ i ];

	}

	return max;

}

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

var bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id

function BufferGeometry() {

	Object.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'BufferGeometry';

	this.index = null;
	this.attributes = {};

	this.morphAttributes = {};

	this.groups = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	this.drawRange = { start: 0, count: Infinity };

}

BufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

	constructor: BufferGeometry,

	isBufferGeometry: true,

	getIndex: function () {

		return this.index;

	},

	setIndex: function ( index ) {

		if ( Array.isArray( index ) ) {

			this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

		} else {

			this.index = index;

		}

	},

	addAttribute: function ( name, attribute ) {

		if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

			console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

			this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

			return;

		}

		if ( name === 'index' ) {

			console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
			this.setIndex( attribute );

			return;

		}

		this.attributes[ name ] = attribute;

		return this;

	},

	getAttribute: function ( name ) {

		return this.attributes[ name ];

	},

	removeAttribute: function ( name ) {

		delete this.attributes[ name ];

		return this;

	},

	addGroup: function ( start, count, materialIndex ) {

		this.groups.push( {

			start: start,
			count: count,
			materialIndex: materialIndex !== undefined ? materialIndex : 0

		} );

	},

	clearGroups: function () {

		this.groups = [];

	},

	setDrawRange: function ( start, count ) {

		this.drawRange.start = start;
		this.drawRange.count = count;

	},

	applyMatrix: function ( matrix ) {

		var position = this.attributes.position;

		if ( position !== undefined ) {

			matrix.applyToBufferAttribute( position );
			position.needsUpdate = true;

		}

		var normal = this.attributes.normal;

		if ( normal !== undefined ) {

			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

			normalMatrix.applyToBufferAttribute( normal );
			normal.needsUpdate = true;

		}

		if ( this.boundingBox !== null ) {

			this.computeBoundingBox();

		}

		if ( this.boundingSphere !== null ) {

			this.computeBoundingSphere();

		}

		return this;

	},

	rotateX: function () {

		// rotate geometry around world x-axis

		var m1 = new Matrix4();

		return function rotateX( angle ) {

			m1.makeRotationX( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateY: function () {

		// rotate geometry around world y-axis

		var m1 = new Matrix4();

		return function rotateY( angle ) {

			m1.makeRotationY( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateZ: function () {

		// rotate geometry around world z-axis

		var m1 = new Matrix4();

		return function rotateZ( angle ) {

			m1.makeRotationZ( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	translate: function () {

		// translate geometry

		var m1 = new Matrix4();

		return function translate( x, y, z ) {

			m1.makeTranslation( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	scale: function () {

		// scale geometry

		var m1 = new Matrix4();

		return function scale( x, y, z ) {

			m1.makeScale( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	lookAt: function () {

		var obj = new Object3D();

		return function lookAt( vector ) {

			obj.lookAt( vector );

			obj.updateMatrix();

			this.applyMatrix( obj.matrix );

		};

	}(),

	center: function () {

		this.computeBoundingBox();

		var offset = this.boundingBox.getCenter().negate();

		this.translate( offset.x, offset.y, offset.z );

		return offset;

	},

	setFromObject: function ( object ) {

		// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

		var geometry = object.geometry;

		if ( object.isPoints || object.isLine ) {

			var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
			var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );

			this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
			this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

			if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

				var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );

				this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

		} else if ( object.isMesh ) {

			if ( geometry && geometry.isGeometry ) {

				this.fromGeometry( geometry );

			}

		}

		return this;

	},

	setFromPoints: function ( points ) {

		var position = [];

		for ( var i = 0, l = points.length; i < l; i ++ ) {

			var point = points[ i ];
			position.push( point.x, point.y, point.z || 0 );

		}

		this.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

		return this;

	},

	updateFromObject: function ( object ) {

		var geometry = object.geometry;

		if ( object.isMesh ) {

			var direct = geometry.__directGeometry;

			if ( geometry.elementsNeedUpdate === true ) {

				direct = undefined;
				geometry.elementsNeedUpdate = false;

			}

			if ( direct === undefined ) {

				return this.fromGeometry( geometry );

			}

			direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
			direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
			direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
			direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
			direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

			geometry.verticesNeedUpdate = false;
			geometry.normalsNeedUpdate = false;
			geometry.colorsNeedUpdate = false;
			geometry.uvsNeedUpdate = false;
			geometry.groupsNeedUpdate = false;

			geometry = direct;

		}

		var attribute;

		if ( geometry.verticesNeedUpdate === true ) {

			attribute = this.attributes.position;

			if ( attribute !== undefined ) {

				attribute.copyVector3sArray( geometry.vertices );
				attribute.needsUpdate = true;

			}

			geometry.verticesNeedUpdate = false;

		}

		if ( geometry.normalsNeedUpdate === true ) {

			attribute = this.attributes.normal;

			if ( attribute !== undefined ) {

				attribute.copyVector3sArray( geometry.normals );
				attribute.needsUpdate = true;

			}

			geometry.normalsNeedUpdate = false;

		}

		if ( geometry.colorsNeedUpdate === true ) {

			attribute = this.attributes.color;

			if ( attribute !== undefined ) {

				attribute.copyColorsArray( geometry.colors );
				attribute.needsUpdate = true;

			}

			geometry.colorsNeedUpdate = false;

		}

		if ( geometry.uvsNeedUpdate ) {

			attribute = this.attributes.uv;

			if ( attribute !== undefined ) {

				attribute.copyVector2sArray( geometry.uvs );
				attribute.needsUpdate = true;

			}

			geometry.uvsNeedUpdate = false;

		}

		if ( geometry.lineDistancesNeedUpdate ) {

			attribute = this.attributes.lineDistance;

			if ( attribute !== undefined ) {

				attribute.copyArray( geometry.lineDistances );
				attribute.needsUpdate = true;

			}

			geometry.lineDistancesNeedUpdate = false;

		}

		if ( geometry.groupsNeedUpdate ) {

			geometry.computeGroups( object.geometry );
			this.groups = geometry.groups;

			geometry.groupsNeedUpdate = false;

		}

		return this;

	},

	fromGeometry: function ( geometry ) {

		geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

		return this.fromDirectGeometry( geometry.__directGeometry );

	},

	fromDirectGeometry: function ( geometry ) {

		var positions = new Float32Array( geometry.vertices.length * 3 );
		this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

		if ( geometry.normals.length > 0 ) {

			var normals = new Float32Array( geometry.normals.length * 3 );
			this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

		}

		if ( geometry.colors.length > 0 ) {

			var colors = new Float32Array( geometry.colors.length * 3 );
			this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

		}

		if ( geometry.uvs.length > 0 ) {

			var uvs = new Float32Array( geometry.uvs.length * 2 );
			this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

		}

		if ( geometry.uvs2.length > 0 ) {

			var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
			this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

		}

		if ( geometry.indices.length > 0 ) {

			var TypeArray = arrayMax( geometry.indices ) > 65535 ? Uint32Array : Uint16Array;
			var indices = new TypeArray( geometry.indices.length * 3 );
			this.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

		}

		// groups

		this.groups = geometry.groups;

		// morphs

		for ( var name in geometry.morphTargets ) {

			var array = [];
			var morphTargets = geometry.morphTargets[ name ];

			for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

				var morphTarget = morphTargets[ i ];

				var attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );

				array.push( attribute.copyVector3sArray( morphTarget ) );

			}

			this.morphAttributes[ name ] = array;

		}

		// skinning

		if ( geometry.skinIndices.length > 0 ) {

			var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
			this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

		}

		if ( geometry.skinWeights.length > 0 ) {

			var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
			this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

		}

		//

		if ( geometry.boundingSphere !== null ) {

			this.boundingSphere = geometry.boundingSphere.clone();

		}

		if ( geometry.boundingBox !== null ) {

			this.boundingBox = geometry.boundingBox.clone();

		}

		return this;

	},

	computeBoundingBox: function () {

		if ( this.boundingBox === null ) {

			this.boundingBox = new Box3();

		}

		var position = this.attributes.position;

		if ( position !== undefined ) {

			this.boundingBox.setFromBufferAttribute( position );

		} else {

			this.boundingBox.makeEmpty();

		}

		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

			console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

		}

	},

	computeBoundingSphere: function () {

		var box = new Box3();
		var vector = new Vector3();

		return function computeBoundingSphere() {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			var position = this.attributes.position;

			if ( position ) {

				var center = this.boundingSphere.center;

				box.setFromBufferAttribute( position );
				box.getCenter( center );

				// hoping to find a boundingSphere with a radius smaller than the
				// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

				var maxRadiusSq = 0;

				for ( var i = 0, il = position.count; i < il; i ++ ) {

					vector.x = position.getX( i );
					vector.y = position.getY( i );
					vector.z = position.getZ( i );
					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

				}

				this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

				if ( isNaN( this.boundingSphere.radius ) ) {

					console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

				}

			}

		};

	}(),

	computeFaceNormals: function () {

		// backwards compatibility

	},

	computeVertexNormals: function () {

		var index = this.index;
		var attributes = this.attributes;
		var groups = this.groups;

		if ( attributes.position ) {

			var positions = attributes.position.array;

			if ( attributes.normal === undefined ) {

				this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

			} else {

				// reset existing normals to zero

				var array = attributes.normal.array;

				for ( var i = 0, il = array.length; i < il; i ++ ) {

					array[ i ] = 0;

				}

			}

			var normals = attributes.normal.array;

			var vA, vB, vC;
			var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
			var cb = new Vector3(), ab = new Vector3();

			// indexed elements

			if ( index ) {

				var indices = index.array;

				if ( groups.length === 0 ) {

					this.addGroup( 0, indices.length );

				}

				for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

					var group = groups[ j ];

					var start = group.start;
					var count = group.count;

					for ( var i = start, il = start + count; i < il; i += 3 ) {

						vA = indices[ i + 0 ] * 3;
						vB = indices[ i + 1 ] * 3;
						vC = indices[ i + 2 ] * 3;

						pA.fromArray( positions, vA );
						pB.fromArray( positions, vB );
						pC.fromArray( positions, vC );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ vA ] += cb.x;
						normals[ vA + 1 ] += cb.y;
						normals[ vA + 2 ] += cb.z;

						normals[ vB ] += cb.x;
						normals[ vB + 1 ] += cb.y;
						normals[ vB + 2 ] += cb.z;

						normals[ vC ] += cb.x;
						normals[ vC + 1 ] += cb.y;
						normals[ vC + 2 ] += cb.z;

					}

				}

			} else {

				// non-indexed elements (unconnected triangle soup)

				for ( var i = 0, il = positions.length; i < il; i += 9 ) {

					pA.fromArray( positions, i );
					pB.fromArray( positions, i + 3 );
					pC.fromArray( positions, i + 6 );

					cb.subVectors( pC, pB );
					ab.subVectors( pA, pB );
					cb.cross( ab );

					normals[ i ] = cb.x;
					normals[ i + 1 ] = cb.y;
					normals[ i + 2 ] = cb.z;

					normals[ i + 3 ] = cb.x;
					normals[ i + 4 ] = cb.y;
					normals[ i + 5 ] = cb.z;

					normals[ i + 6 ] = cb.x;
					normals[ i + 7 ] = cb.y;
					normals[ i + 8 ] = cb.z;

				}

			}

			this.normalizeNormals();

			attributes.normal.needsUpdate = true;

		}

	},

	merge: function ( geometry, offset ) {

		if ( ! ( geometry && geometry.isBufferGeometry ) ) {

			console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
			return;

		}

		if ( offset === undefined ) offset = 0;

		var attributes = this.attributes;

		for ( var key in attributes ) {

			if ( geometry.attributes[ key ] === undefined ) continue;

			var attribute1 = attributes[ key ];
			var attributeArray1 = attribute1.array;

			var attribute2 = geometry.attributes[ key ];
			var attributeArray2 = attribute2.array;

			var attributeSize = attribute2.itemSize;

			for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

				attributeArray1[ j ] = attributeArray2[ i ];

			}

		}

		return this;

	},

	normalizeNormals: function () {

		var vector = new Vector3();

		return function normalizeNormals() {

			var normals = this.attributes.normal;

			for ( var i = 0, il = normals.count; i < il; i ++ ) {

				vector.x = normals.getX( i );
				vector.y = normals.getY( i );
				vector.z = normals.getZ( i );

				vector.normalize();

				normals.setXYZ( i, vector.x, vector.y, vector.z );

			}

		};

	}(),

	toNonIndexed: function () {

		if ( this.index === null ) {

			console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
			return this;

		}

		var geometry2 = new BufferGeometry();

		var indices = this.index.array;
		var attributes = this.attributes;

		for ( var name in attributes ) {

			var attribute = attributes[ name ];

			var array = attribute.array;
			var itemSize = attribute.itemSize;

			var array2 = new array.constructor( indices.length * itemSize );

			var index = 0, index2 = 0;

			for ( var i = 0, l = indices.length; i < l; i ++ ) {

				index = indices[ i ] * itemSize;

				for ( var j = 0; j < itemSize; j ++ ) {

					array2[ index2 ++ ] = array[ index ++ ];

				}

			}

			geometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );

		}

		return geometry2;

	},

	toJSON: function () {

		var data = {
			metadata: {
				version: 4.5,
				type: 'BufferGeometry',
				generator: 'BufferGeometry.toJSON'
			}
		};

		// standard BufferGeometry serialization

		data.uuid = this.uuid;
		data.type = this.type;
		if ( this.name !== '' ) data.name = this.name;

		if ( this.parameters !== undefined ) {

			var parameters = this.parameters;

			for ( var key in parameters ) {

				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

			}

			return data;

		}

		data.data = { attributes: {} };

		var index = this.index;

		if ( index !== null ) {

			var array = Array.prototype.slice.call( index.array );

			data.data.index = {
				type: index.array.constructor.name,
				array: array
			};

		}

		var attributes = this.attributes;

		for ( var key in attributes ) {

			var attribute = attributes[ key ];

			var array = Array.prototype.slice.call( attribute.array );

			data.data.attributes[ key ] = {
				itemSize: attribute.itemSize,
				type: attribute.array.constructor.name,
				array: array,
				normalized: attribute.normalized
			};

		}

		var groups = this.groups;

		if ( groups.length > 0 ) {

			data.data.groups = JSON.parse( JSON.stringify( groups ) );

		}

		var boundingSphere = this.boundingSphere;

		if ( boundingSphere !== null ) {

			data.data.boundingSphere = {
				center: boundingSphere.center.toArray(),
				radius: boundingSphere.radius
			};

		}

		return data;

	},

	clone: function () {

		/*
		 // Handle primitives

		 var parameters = this.parameters;

		 if ( parameters !== undefined ) {

		 var values = [];

		 for ( var key in parameters ) {

		 values.push( parameters[ key ] );

		 }

		 var geometry = Object.create( this.constructor.prototype );
		 this.constructor.apply( geometry, values );
		 return geometry;

		 }

		 return new this.constructor().copy( this );
		 */

		return new BufferGeometry().copy( this );

	},

	copy: function ( source ) {

		var name, i, l;

		// reset

		this.index = null;
		this.attributes = {};
		this.morphAttributes = {};
		this.groups = [];
		this.boundingBox = null;
		this.boundingSphere = null;

		// name

		this.name = source.name;

		// index

		var index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone() );

		}

		// attributes

		var attributes = source.attributes;

		for ( name in attributes ) {

			var attribute = attributes[ name ];
			this.addAttribute( name, attribute.clone() );

		}

		// morph attributes

		var morphAttributes = source.morphAttributes;

		for ( name in morphAttributes ) {

			var array = [];
			var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

			for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {

				array.push( morphAttribute[ i ].clone() );

			}

			this.morphAttributes[ name ] = array;

		}

		// groups

		var groups = source.groups;

		for ( i = 0, l = groups.length; i < l; i ++ ) {

			var group = groups[ i ];
			this.addGroup( group.start, group.count, group.materialIndex );

		}

		// bounding box

		var boundingBox = source.boundingBox;

		if ( boundingBox !== null ) {

			this.boundingBox = boundingBox.clone();

		}

		// bounding sphere

		var boundingSphere = source.boundingSphere;

		if ( boundingSphere !== null ) {

			this.boundingSphere = boundingSphere.clone();

		}

		// draw range

		this.drawRange.start = source.drawRange.start;
		this.drawRange.count = source.drawRange.count;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// BoxGeometry

function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	Geometry.call( this );

	this.type = 'BoxGeometry';

	this.parameters = {
		width: width,
		height: height,
		depth: depth,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		depthSegments: depthSegments
	};

	this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
	this.mergeVertices();

}

BoxGeometry.prototype = Object.create( Geometry.prototype );
BoxGeometry.prototype.constructor = BoxGeometry;

// BoxBufferGeometry

function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	BufferGeometry.call( this );

	this.type = 'BoxBufferGeometry';

	this.parameters = {
		width: width,
		height: height,
		depth: depth,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		depthSegments: depthSegments
	};

	var scope = this;

	width = width || 1;
	height = height || 1;
	depth = depth || 1;

	// segments

	widthSegments = Math.floor( widthSegments ) || 1;
	heightSegments = Math.floor( heightSegments ) || 1;
	depthSegments = Math.floor( depthSegments ) || 1;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var numberOfVertices = 0;
	var groupStart = 0;

	// build each side of the box geometry

	buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
	buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
	buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
	buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
	buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
	buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

		var segmentWidth = width / gridX;
		var segmentHeight = height / gridY;

		var widthHalf = width / 2;
		var heightHalf = height / 2;
		var depthHalf = depth / 2;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var vertexCounter = 0;
		var groupCount = 0;

		var ix, iy;

		var vector = new Vector3();

		// generate vertices, normals and uvs

		for ( iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segmentHeight - heightHalf;

			for ( ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segmentWidth - widthHalf;

				// set values to correct vector component

				vector[ u ] = x * udir;
				vector[ v ] = y * vdir;
				vector[ w ] = depthHalf;

				// now apply vector to vertex buffer

				vertices.push( vector.x, vector.y, vector.z );

				// set values to correct vector component

				vector[ u ] = 0;
				vector[ v ] = 0;
				vector[ w ] = depth > 0 ? 1 : - 1;

				// now apply vector to normal buffer

				normals.push( vector.x, vector.y, vector.z );

				// uvs

				uvs.push( ix / gridX );
				uvs.push( 1 - ( iy / gridY ) );

				// counters

				vertexCounter += 1;

			}

		}

		// indices

		// 1. you need three indices to draw a single face
		// 2. a single segment consists of two faces
		// 3. so we need to generate six (2*3) indices per segment

		for ( iy = 0; iy < gridY; iy ++ ) {

			for ( ix = 0; ix < gridX; ix ++ ) {

				var a = numberOfVertices + ix + gridX1 * iy;
				var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
				var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

				// increase counter

				groupCount += 6;

			}

		}

		// add a group to the geometry. this will ensure multi material support

		scope.addGroup( groupStart, groupCount, materialIndex );

		// calculate new start value for groups

		groupStart += groupCount;

		// update total number of vertices

		numberOfVertices += vertexCounter;

	}

}

BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// PlaneGeometry

function PlaneGeometry( width, height, widthSegments, heightSegments ) {

	Geometry.call( this );

	this.type = 'PlaneGeometry';

	this.parameters = {
		width: width,
		height: height,
		widthSegments: widthSegments,
		heightSegments: heightSegments
	};

	this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
	this.mergeVertices();

}

PlaneGeometry.prototype = Object.create( Geometry.prototype );
PlaneGeometry.prototype.constructor = PlaneGeometry;

// PlaneBufferGeometry

function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

	BufferGeometry.call( this );

	this.type = 'PlaneBufferGeometry';

	this.parameters = {
		width: width,
		height: height,
		widthSegments: widthSegments,
		heightSegments: heightSegments
	};

	width = width || 1;
	height = height || 1;

	var width_half = width / 2;
	var height_half = height / 2;

	var gridX = Math.floor( widthSegments ) || 1;
	var gridY = Math.floor( heightSegments ) || 1;

	var gridX1 = gridX + 1;
	var gridY1 = gridY + 1;

	var segment_width = width / gridX;
	var segment_height = height / gridY;

	var ix, iy;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// generate vertices, normals and uvs

	for ( iy = 0; iy < gridY1; iy ++ ) {

		var y = iy * segment_height - height_half;

		for ( ix = 0; ix < gridX1; ix ++ ) {

			var x = ix * segment_width - width_half;

			vertices.push( x, - y, 0 );

			normals.push( 0, 0, 1 );

			uvs.push( ix / gridX );
			uvs.push( 1 - ( iy / gridY ) );

		}

	}

	// indices

	for ( iy = 0; iy < gridY; iy ++ ) {

		for ( ix = 0; ix < gridX; ix ++ ) {

			var a = ix + gridX1 * iy;
			var b = ix + gridX1 * ( iy + 1 );
			var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
			var d = ( ix + 1 ) + gridX1 * iy;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>
 * }
 */

function MeshBasicMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshBasicMaterial';

	this.color = new Color( 0xffffff ); // emissive

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;

	this.lights = false;

	this.setValues( parameters );

}

MeshBasicMaterial.prototype = Object.create( Material.prototype );
MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

MeshBasicMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.specularMap = source.specularMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.combine = source.combine;
	this.reflectivity = source.reflectivity;
	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;

	return this;

};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  defines: { "label" : "value" },
 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
 *
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function ShaderMaterial( parameters ) {

	Material.call( this );

	this.type = 'ShaderMaterial';

	this.defines = {};
	this.uniforms = {};

	this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
	this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

	this.linewidth = 1;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false; // set to use scene fog
	this.lights = false; // set to use scene lights
	this.clipping = false; // set to use user-defined clipping planes

	this.skinning = false; // set to use skinning attribute streams
	this.morphTargets = false; // set to use morph targets
	this.morphNormals = false; // set to use morph normals

	this.extensions = {
		derivatives: false, // set to use derivatives
		fragDepth: false, // set to use fragment depth values
		drawBuffers: false, // set to use draw buffers
		shaderTextureLOD: false // set to use shader texture LOD
	};

	// When rendered geometry doesn't include these attributes but the material does,
	// use these default values in WebGL. This avoids errors when buffer data is missing.
	this.defaultAttributeValues = {
		'color': [ 1, 1, 1 ],
		'uv': [ 0, 0 ],
		'uv2': [ 0, 0 ]
	};

	this.index0AttributeName = undefined;

	if ( parameters !== undefined ) {

		if ( parameters.attributes !== undefined ) {

			console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

		}

		this.setValues( parameters );

	}

}

ShaderMaterial.prototype = Object.create( Material.prototype );
ShaderMaterial.prototype.constructor = ShaderMaterial;

ShaderMaterial.prototype.isShaderMaterial = true;

ShaderMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.fragmentShader = source.fragmentShader;
	this.vertexShader = source.vertexShader;

	this.uniforms = UniformsUtils.clone( source.uniforms );

	this.defines = source.defines;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;

	this.lights = source.lights;
	this.clipping = source.clipping;

	this.skinning = source.skinning;

	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	this.extensions = source.extensions;

	return this;

};

ShaderMaterial.prototype.toJSON = function ( meta ) {

	var data = Material.prototype.toJSON.call( this, meta );

	data.uniforms = this.uniforms;
	data.vertexShader = this.vertexShader;
	data.fragmentShader = this.fragmentShader;

	return data;

};

/**
 * @author bhouston / http://clara.io
 */

function Ray( origin, direction ) {

	this.origin = ( origin !== undefined ) ? origin : new Vector3();
	this.direction = ( direction !== undefined ) ? direction : new Vector3();

}

Object.assign( Ray.prototype, {

	set: function ( origin, direction ) {

		this.origin.copy( origin );
		this.direction.copy( direction );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( ray ) {

		this.origin.copy( ray.origin );
		this.direction.copy( ray.direction );

		return this;

	},

	at: function ( t, optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

	},

	lookAt: function ( v ) {

		this.direction.copy( v ).sub( this.origin ).normalize();

		return this;

	},

	recast: function () {

		var v1 = new Vector3();

		return function recast( t ) {

			this.origin.copy( this.at( t, v1 ) );

			return this;

		};

	}(),

	closestPointToPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector3();
		result.subVectors( point, this.origin );
		var directionDistance = result.dot( this.direction );

		if ( directionDistance < 0 ) {

			return result.copy( this.origin );

		}

		return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

	},

	distanceToPoint: function ( point ) {

		return Math.sqrt( this.distanceSqToPoint( point ) );

	},

	distanceSqToPoint: function () {

		var v1 = new Vector3();

		return function distanceSqToPoint( point ) {

			var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

			// point behind the ray

			if ( directionDistance < 0 ) {

				return this.origin.distanceToSquared( point );

			}

			v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

			return v1.distanceToSquared( point );

		};

	}(),

	distanceSqToSegment: function () {

		var segCenter = new Vector3();
		var segDir = new Vector3();
		var diff = new Vector3();

		return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
			// It returns the min distance between the ray and the segment
			// defined by v0 and v1
			// It can also set two optional targets :
			// - The closest point on the ray
			// - The closest point on the segment

			segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
			segDir.copy( v1 ).sub( v0 ).normalize();
			diff.copy( this.origin ).sub( segCenter );

			var segExtent = v0.distanceTo( v1 ) * 0.5;
			var a01 = - this.direction.dot( segDir );
			var b0 = diff.dot( this.direction );
			var b1 = - diff.dot( segDir );
			var c = diff.lengthSq();
			var det = Math.abs( 1 - a01 * a01 );
			var s0, s1, sqrDist, extDet;

			if ( det > 0 ) {

				// The ray and segment are not parallel.

				s0 = a01 * b1 - b0;
				s1 = a01 * b0 - b1;
				extDet = segExtent * det;

				if ( s0 >= 0 ) {

					if ( s1 >= - extDet ) {

						if ( s1 <= extDet ) {

							// region 0
							// Minimum at interior points of ray and segment.

							var invDet = 1 / det;
							s0 *= invDet;
							s1 *= invDet;
							sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

						} else {

							// region 1

							s1 = segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						// region 5

						s1 = - segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				} else {

					if ( s1 <= - extDet ) {

						// region 4

						s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					} else if ( s1 <= extDet ) {

						// region 3

						s0 = 0;
						s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = s1 * ( s1 + 2 * b1 ) + c;

					} else {

						// region 2

						s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				}

			} else {

				// Ray and segment are parallel.

				s1 = ( a01 > 0 ) ? - segExtent : segExtent;
				s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
				sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

			}

			if ( optionalPointOnRay ) {

				optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

			}

			if ( optionalPointOnSegment ) {

				optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

			}

			return sqrDist;

		};

	}(),

	intersectSphere: function () {

		var v1 = new Vector3();

		return function intersectSphere( sphere, optionalTarget ) {

			v1.subVectors( sphere.center, this.origin );
			var tca = v1.dot( this.direction );
			var d2 = v1.dot( v1 ) - tca * tca;
			var radius2 = sphere.radius * sphere.radius;

			if ( d2 > radius2 ) return null;

			var thc = Math.sqrt( radius2 - d2 );

			// t0 = first intersect point - entrance on front of sphere
			var t0 = tca - thc;

			// t1 = second intersect point - exit point on back of sphere
			var t1 = tca + thc;

			// test to see if both t0 and t1 are behind the ray - if so, return null
			if ( t0 < 0 && t1 < 0 ) return null;

			// test to see if t0 is behind the ray:
			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
			// in order to always return an intersect point that is in front of the ray.
			if ( t0 < 0 ) return this.at( t1, optionalTarget );

			// else t0 is in front of the ray, so return the first collision point scaled by t0
			return this.at( t0, optionalTarget );

		};

	}(),

	intersectsSphere: function ( sphere ) {

		return this.distanceToPoint( sphere.center ) <= sphere.radius;

	},

	distanceToPlane: function ( plane ) {

		var denominator = plane.normal.dot( this.direction );

		if ( denominator === 0 ) {

			// line is coplanar, return origin
			if ( plane.distanceToPoint( this.origin ) === 0 ) {

				return 0;

			}

			// Null is preferable to undefined since undefined means.... it is undefined

			return null;

		}

		var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

		// Return if the ray never intersects the plane

		return t >= 0 ? t : null;

	},

	intersectPlane: function ( plane, optionalTarget ) {

		var t = this.distanceToPlane( plane );

		if ( t === null ) {

			return null;

		}

		return this.at( t, optionalTarget );

	},

	intersectsPlane: function ( plane ) {

		// check if the ray lies on the plane first

		var distToPoint = plane.distanceToPoint( this.origin );

		if ( distToPoint === 0 ) {

			return true;

		}

		var denominator = plane.normal.dot( this.direction );

		if ( denominator * distToPoint < 0 ) {

			return true;

		}

		// ray origin is behind the plane (and is pointing behind it)

		return false;

	},

	intersectBox: function ( box, optionalTarget ) {

		var tmin, tmax, tymin, tymax, tzmin, tzmax;

		var invdirx = 1 / this.direction.x,
			invdiry = 1 / this.direction.y,
			invdirz = 1 / this.direction.z;

		var origin = this.origin;

		if ( invdirx >= 0 ) {

			tmin = ( box.min.x - origin.x ) * invdirx;
			tmax = ( box.max.x - origin.x ) * invdirx;

		} else {

			tmin = ( box.max.x - origin.x ) * invdirx;
			tmax = ( box.min.x - origin.x ) * invdirx;

		}

		if ( invdiry >= 0 ) {

			tymin = ( box.min.y - origin.y ) * invdiry;
			tymax = ( box.max.y - origin.y ) * invdiry;

		} else {

			tymin = ( box.max.y - origin.y ) * invdiry;
			tymax = ( box.min.y - origin.y ) * invdiry;

		}

		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

		// These lines also handle the case where tmin or tmax is NaN
		// (result of 0 * Infinity). x !== x returns true if x is NaN

		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

		if ( invdirz >= 0 ) {

			tzmin = ( box.min.z - origin.z ) * invdirz;
			tzmax = ( box.max.z - origin.z ) * invdirz;

		} else {

			tzmin = ( box.max.z - origin.z ) * invdirz;
			tzmax = ( box.min.z - origin.z ) * invdirz;

		}

		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

		//return point closest to the ray (positive side)

		if ( tmax < 0 ) return null;

		return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

	},

	intersectsBox: ( function () {

		var v = new Vector3();

		return function intersectsBox( box ) {

			return this.intersectBox( box, v ) !== null;

		};

	} )(),

	intersectTriangle: function () {

		// Compute the offset origin, edges, and normal.
		var diff = new Vector3();
		var edge1 = new Vector3();
		var edge2 = new Vector3();
		var normal = new Vector3();

		return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

			edge1.subVectors( b, a );
			edge2.subVectors( c, a );
			normal.crossVectors( edge1, edge2 );

			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
			//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
			//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
			//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
			var DdN = this.direction.dot( normal );
			var sign;

			if ( DdN > 0 ) {

				if ( backfaceCulling ) return null;
				sign = 1;

			} else if ( DdN < 0 ) {

				sign = - 1;
				DdN = - DdN;

			} else {

				return null;

			}

			diff.subVectors( this.origin, a );
			var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

			// b1 < 0, no intersection
			if ( DdQxE2 < 0 ) {

				return null;

			}

			var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

			// b2 < 0, no intersection
			if ( DdE1xQ < 0 ) {

				return null;

			}

			// b1+b2 > 1, no intersection
			if ( DdQxE2 + DdE1xQ > DdN ) {

				return null;

			}

			// Line intersects triangle, check if ray does.
			var QdN = - sign * diff.dot( normal );

			// t < 0, no intersection
			if ( QdN < 0 ) {

				return null;

			}

			// Ray intersects triangle.
			return this.at( QdN / DdN, optionalTarget );

		};

	}(),

	applyMatrix4: function ( matrix4 ) {

		this.origin.applyMatrix4( matrix4 );
		this.direction.transformDirection( matrix4 );

		return this;

	},

	equals: function ( ray ) {

		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

	}

} );

/**
 * @author bhouston / http://clara.io
 */

function Line3( start, end ) {

	this.start = ( start !== undefined ) ? start : new Vector3();
	this.end = ( end !== undefined ) ? end : new Vector3();

}

Object.assign( Line3.prototype, {

	set: function ( start, end ) {

		this.start.copy( start );
		this.end.copy( end );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( line ) {

		this.start.copy( line.start );
		this.end.copy( line.end );

		return this;

	},

	getCenter: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

	},

	delta: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.subVectors( this.end, this.start );

	},

	distanceSq: function () {

		return this.start.distanceToSquared( this.end );

	},

	distance: function () {

		return this.start.distanceTo( this.end );

	},

	at: function ( t, optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return this.delta( result ).multiplyScalar( t ).add( this.start );

	},

	closestPointToPointParameter: function () {

		var startP = new Vector3();
		var startEnd = new Vector3();

		return function closestPointToPointParameter( point, clampToLine ) {

			startP.subVectors( point, this.start );
			startEnd.subVectors( this.end, this.start );

			var startEnd2 = startEnd.dot( startEnd );
			var startEnd_startP = startEnd.dot( startP );

			var t = startEnd_startP / startEnd2;

			if ( clampToLine ) {

				t = _Math.clamp( t, 0, 1 );

			}

			return t;

		};

	}(),

	closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

		var t = this.closestPointToPointParameter( point, clampToLine );

		var result = optionalTarget || new Vector3();

		return this.delta( result ).multiplyScalar( t ).add( this.start );

	},

	applyMatrix4: function ( matrix ) {

		this.start.applyMatrix4( matrix );
		this.end.applyMatrix4( matrix );

		return this;

	},

	equals: function ( line ) {

		return line.start.equals( this.start ) && line.end.equals( this.end );

	}

} );

/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */

function Triangle( a, b, c ) {

	this.a = ( a !== undefined ) ? a : new Vector3();
	this.b = ( b !== undefined ) ? b : new Vector3();
	this.c = ( c !== undefined ) ? c : new Vector3();

}

Object.assign( Triangle, {

	normal: function () {

		var v0 = new Vector3();

		return function normal( a, b, c, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			result.subVectors( c, b );
			v0.subVectors( a, b );
			result.cross( v0 );

			var resultLengthSq = result.lengthSq();
			if ( resultLengthSq > 0 ) {

				return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

			}

			return result.set( 0, 0, 0 );

		};

	}(),

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	barycoordFromPoint: function () {

		var v0 = new Vector3();
		var v1 = new Vector3();
		var v2 = new Vector3();

		return function barycoordFromPoint( point, a, b, c, optionalTarget ) {

			v0.subVectors( c, a );
			v1.subVectors( b, a );
			v2.subVectors( point, a );

			var dot00 = v0.dot( v0 );
			var dot01 = v0.dot( v1 );
			var dot02 = v0.dot( v2 );
			var dot11 = v1.dot( v1 );
			var dot12 = v1.dot( v2 );

			var denom = ( dot00 * dot11 - dot01 * dot01 );

			var result = optionalTarget || new Vector3();

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return result.set( - 2, - 1, - 1 );

			}

			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return result.set( 1 - u - v, v, u );

		};

	}(),

	containsPoint: function () {

		var v1 = new Vector3();

		return function containsPoint( point, a, b, c ) {

			var result = Triangle.barycoordFromPoint( point, a, b, c, v1 );

			return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

		};

	}()

} );

Object.assign( Triangle.prototype, {

	set: function ( a, b, c ) {

		this.a.copy( a );
		this.b.copy( b );
		this.c.copy( c );

		return this;

	},

	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

		this.a.copy( points[ i0 ] );
		this.b.copy( points[ i1 ] );
		this.c.copy( points[ i2 ] );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( triangle ) {

		this.a.copy( triangle.a );
		this.b.copy( triangle.b );
		this.c.copy( triangle.c );

		return this;

	},

	area: function () {

		var v0 = new Vector3();
		var v1 = new Vector3();

		return function area() {

			v0.subVectors( this.c, this.b );
			v1.subVectors( this.a, this.b );

			return v0.cross( v1 ).length() * 0.5;

		};

	}(),

	midpoint: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

	},

	normal: function ( optionalTarget ) {

		return Triangle.normal( this.a, this.b, this.c, optionalTarget );

	},

	plane: function ( optionalTarget ) {

		var result = optionalTarget || new Plane();

		return result.setFromCoplanarPoints( this.a, this.b, this.c );

	},

	barycoordFromPoint: function ( point, optionalTarget ) {

		return Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

	},

	containsPoint: function ( point ) {

		return Triangle.containsPoint( point, this.a, this.b, this.c );

	},

	closestPointToPoint: function () {

		var plane = new Plane();
		var edgeList = [ new Line3(), new Line3(), new Line3() ];
		var projectedPoint = new Vector3();
		var closestPoint = new Vector3();

		return function closestPointToPoint( point, optionalTarget ) {

			var result = optionalTarget || new Vector3();
			var minDistance = Infinity;

			// project the point onto the plane of the triangle

			plane.setFromCoplanarPoints( this.a, this.b, this.c );
			plane.projectPoint( point, projectedPoint );

			// check if the projection lies within the triangle

			if ( this.containsPoint( projectedPoint ) === true ) {

				// if so, this is the closest point

				result.copy( projectedPoint );

			} else {

				// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices

				edgeList[ 0 ].set( this.a, this.b );
				edgeList[ 1 ].set( this.b, this.c );
				edgeList[ 2 ].set( this.c, this.a );

				for ( var i = 0; i < edgeList.length; i ++ ) {

					edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );

					var distance = projectedPoint.distanceToSquared( closestPoint );

					if ( distance < minDistance ) {

						minDistance = distance;

						result.copy( closestPoint );

					}

				}

			}

			return result;

		};

	}(),

	equals: function ( triangle ) {

		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author jonobr1 / http://jonobr1.com/
 */

function Mesh( geometry, material ) {

	Object3D.call( this );

	this.type = 'Mesh';

	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

	this.drawMode = TrianglesDrawMode;

	this.updateMorphTargets();

}

Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Mesh,

	isMesh: true,

	setDrawMode: function ( value ) {

		this.drawMode = value;

	},

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.drawMode = source.drawMode;

		if ( source.morphTargetInfluences !== undefined ) {

			this.morphTargetInfluences = source.morphTargetInfluences.slice();

		}

		if ( source.morphTargetDictionary !== undefined ) {

			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

		}

		return this;

	},

	updateMorphTargets: function () {

		var geometry = this.geometry;
		var m, ml, name;

		if ( geometry.isBufferGeometry ) {

			var morphAttributes = geometry.morphAttributes;
			var keys = Object.keys( morphAttributes );

			if ( keys.length > 0 ) {

				var morphAttribute = morphAttributes[ keys[ 0 ] ];

				if ( morphAttribute !== undefined ) {

					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};

					for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

						name = morphAttribute[ m ].name || String( m );

						this.morphTargetInfluences.push( 0 );
						this.morphTargetDictionary[ name ] = m;

					}

				}

			}

		} else {

			var morphTargets = geometry.morphTargets;

			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

				this.morphTargetInfluences = [];
				this.morphTargetDictionary = {};

				for ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {

					name = morphTargets[ m ].name || String( m );

					this.morphTargetInfluences.push( 0 );
					this.morphTargetDictionary[ name ] = m;

				}

			}

		}

	},

	raycast: ( function () {

		var inverseMatrix = new Matrix4();
		var ray = new Ray();
		var sphere = new Sphere();

		var vA = new Vector3();
		var vB = new Vector3();
		var vC = new Vector3();

		var tempA = new Vector3();
		var tempB = new Vector3();
		var tempC = new Vector3();

		var uvA = new Vector2();
		var uvB = new Vector2();
		var uvC = new Vector2();

		var barycoord = new Vector3();

		var intersectionPoint = new Vector3();
		var intersectionPointWorld = new Vector3();

		function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

			Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

			uv1.multiplyScalar( barycoord.x );
			uv2.multiplyScalar( barycoord.y );
			uv3.multiplyScalar( barycoord.z );

			uv1.add( uv2 ).add( uv3 );

			return uv1.clone();

		}

		function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

			var intersect;

			if ( material.side === BackSide ) {

				intersect = ray.intersectTriangle( pC, pB, pA, true, point );

			} else {

				intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

			}

			if ( intersect === null ) return null;

			intersectionPointWorld.copy( point );
			intersectionPointWorld.applyMatrix4( object.matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

			if ( distance < raycaster.near || distance > raycaster.far ) return null;

			return {
				distance: distance,
				point: intersectionPointWorld.clone(),
				object: object
			};

		}

		function checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {

			vA.fromBufferAttribute( position, a );
			vB.fromBufferAttribute( position, b );
			vC.fromBufferAttribute( position, c );

			var intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );

			if ( intersection ) {

				if ( uv ) {

					uvA.fromBufferAttribute( uv, a );
					uvB.fromBufferAttribute( uv, b );
					uvC.fromBufferAttribute( uv, c );

					intersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );

				}

				intersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );
				intersection.faceIndex = a;

			}

			return intersection;

		}

		return function raycast( raycaster, intersects ) {

			var geometry = this.geometry;
			var material = this.material;
			var matrixWorld = this.matrixWorld;

			if ( material === undefined ) return;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			// Check boundingBox before continuing

			if ( geometry.boundingBox !== null ) {

				if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

			}

			var intersection;

			if ( geometry.isBufferGeometry ) {

				var a, b, c;
				var index = geometry.index;
				var position = geometry.attributes.position;
				var uv = geometry.attributes.uv;
				var i, l;

				if ( index !== null ) {

					// indexed buffer geometry

					for ( i = 0, l = index.count; i < l; i += 3 ) {

						a = index.getX( i );
						b = index.getX( i + 1 );
						c = index.getX( i + 2 );

						intersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
							intersects.push( intersection );

						}

					}

				} else if ( position !== undefined ) {

					// non-indexed buffer geometry

					for ( i = 0, l = position.count; i < l; i += 3 ) {

						a = i;
						b = i + 1;
						c = i + 2;

						intersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );

						if ( intersection ) {

							intersection.index = a; // triangle number in positions buffer semantics
							intersects.push( intersection );

						}

					}

				}

			} else if ( geometry.isGeometry ) {

				var fvA, fvB, fvC;
				var isMultiMaterial = Array.isArray( material );

				var vertices = geometry.vertices;
				var faces = geometry.faces;
				var uvs;

				var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
				if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

				for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

					var face = faces[ f ];
					var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;

					if ( faceMaterial === undefined ) continue;

					fvA = vertices[ face.a ];
					fvB = vertices[ face.b ];
					fvC = vertices[ face.c ];

					if ( faceMaterial.morphTargets === true ) {

						var morphTargets = geometry.morphTargets;
						var morphInfluences = this.morphTargetInfluences;

						vA.set( 0, 0, 0 );
						vB.set( 0, 0, 0 );
						vC.set( 0, 0, 0 );

						for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

							var influence = morphInfluences[ t ];

							if ( influence === 0 ) continue;

							var targets = morphTargets[ t ].vertices;

							vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
							vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
							vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

						}

						vA.add( fvA );
						vB.add( fvB );
						vC.add( fvC );

						fvA = vA;
						fvB = vB;
						fvC = vC;

					}

					intersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

					if ( intersection ) {

						if ( uvs && uvs[ f ] ) {

							var uvs_f = uvs[ f ];
							uvA.copy( uvs_f[ 0 ] );
							uvB.copy( uvs_f[ 1 ] );
							uvC.copy( uvs_f[ 2 ] );

							intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

						}

						intersection.face = face;
						intersection.faceIndex = f;
						intersects.push( intersection );

					}

				}

			}

		};

	}() ),

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLBackground( renderer, state, geometries, premultipliedAlpha ) {

	var clearColor = new Color( 0x000000 );
	var clearAlpha = 0;

	var planeCamera, planeMesh;
	var boxMesh;

	function render( renderList, scene, camera, forceClear ) {

		var background = scene.background;

		if ( background === null ) {

			setClear( clearColor, clearAlpha );

		} else if ( background && background.isColor ) {

			setClear( background, 1 );
			forceClear = true;

		}

		if ( renderer.autoClear || forceClear ) {

			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

		}

		if ( background && background.isCubeTexture ) {

			if ( boxMesh === undefined ) {

				boxMesh = new Mesh(
					new BoxBufferGeometry( 1, 1, 1 ),
					new ShaderMaterial( {
						uniforms: ShaderLib.cube.uniforms,
						vertexShader: ShaderLib.cube.vertexShader,
						fragmentShader: ShaderLib.cube.fragmentShader,
						side: BackSide,
						depthTest: true,
						depthWrite: false,
						fog: false
					} )
				);

				boxMesh.geometry.removeAttribute( 'normal' );
				boxMesh.geometry.removeAttribute( 'uv' );

				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

					this.matrixWorld.copyPosition( camera.matrixWorld );

				};

				geometries.update( boxMesh.geometry );

			}

			boxMesh.material.uniforms.tCube.value = background;

			renderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );

		} else if ( background && background.isTexture ) {

			if ( planeCamera === undefined ) {

				planeCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );

				planeMesh = new Mesh(
					new PlaneBufferGeometry( 2, 2 ),
					new MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
				);

				geometries.update( planeMesh.geometry );

			}

			planeMesh.material.map = background;

			// TODO Push this to renderList

			renderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );

		}

	}

	function setClear( color, alpha ) {

		state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

	}

	return {

		getClearColor: function () {

			return clearColor;

		},
		setClearColor: function ( color, alpha ) {

			clearColor.set( color );
			clearAlpha = alpha !== undefined ? alpha : 1;
			setClear( clearColor, clearAlpha );

		},
		getClearAlpha: function () {

			return clearAlpha;

		},
		setClearAlpha: function ( alpha ) {

			clearAlpha = alpha;
			setClear( clearColor, clearAlpha );

		},
		render: render

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function painterSortStable( a, b ) {

	if ( a.renderOrder !== b.renderOrder ) {

		return a.renderOrder - b.renderOrder;

	} else if ( a.program && b.program && a.program !== b.program ) {

		return a.program.id - b.program.id;

	} else if ( a.material.id !== b.material.id ) {

		return a.material.id - b.material.id;

	} else if ( a.z !== b.z ) {

		return a.z - b.z;

	} else {

		return a.id - b.id;

	}

}

function reversePainterSortStable( a, b ) {

	if ( a.renderOrder !== b.renderOrder ) {

		return a.renderOrder - b.renderOrder;

	} if ( a.z !== b.z ) {

		return b.z - a.z;

	} else {

		return a.id - b.id;

	}

}

function WebGLRenderList() {

	var renderItems = [];
	var renderItemsIndex = 0;

	var opaque = [];
	var transparent = [];

	function init() {

		renderItemsIndex = 0;

		opaque.length = 0;
		transparent.length = 0;

	}

	function push( object, geometry, material, z, group ) {

		var renderItem = renderItems[ renderItemsIndex ];

		if ( renderItem === undefined ) {

			renderItem = {
				id: object.id,
				object: object,
				geometry: geometry,
				material: material,
				program: material.program,
				renderOrder: object.renderOrder,
				z: z,
				group: group
			};

			renderItems[ renderItemsIndex ] = renderItem;

		} else {

			renderItem.id = object.id;
			renderItem.object = object;
			renderItem.geometry = geometry;
			renderItem.material = material;
			renderItem.program = material.program;
			renderItem.renderOrder = object.renderOrder;
			renderItem.z = z;
			renderItem.group = group;

		}

		( material.transparent === true ? transparent : opaque ).push( renderItem );

		renderItemsIndex ++;

	}

	function sort() {

		if ( opaque.length > 1 ) opaque.sort( painterSortStable );
		if ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );

	}

	return {
		opaque: opaque,
		transparent: transparent,

		init: init,
		push: push,

		sort: sort
	};

}

function WebGLRenderLists() {

	var lists = {};

	function get( scene, camera ) {

		var hash = scene.id + ',' + camera.id;
		var list = lists[ hash ];

		if ( list === undefined ) {

			// console.log( 'THREE.WebGLRenderLists:', hash );

			list = new WebGLRenderList();
			lists[ hash ] = list;

		}

		return list;

	}

	function dispose() {

		lists = {};

	}

	return {
		get: get,
		dispose: dispose
	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function absNumericalSort( a, b ) {

	return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

}

function WebGLMorphtargets( gl ) {

	var influencesList = {};
	var morphInfluences = new Float32Array( 8 );

	function update( object, geometry, material, program ) {

		var objectInfluences = object.morphTargetInfluences;

		var length = objectInfluences.length;

		var influences = influencesList[ geometry.id ];

		if ( influences === undefined ) {

			// initialise list

			influences = [];

			for ( var i = 0; i < length; i ++ ) {

				influences[ i ] = [ i, 0 ];

			}

			influencesList[ geometry.id ] = influences;

		}

		var morphTargets = material.morphTargets && geometry.morphAttributes.position;
		var morphNormals = material.morphNormals && geometry.morphAttributes.normal;

		// Remove current morphAttributes

		for ( var i = 0; i < length; i ++ ) {

			var influence = influences[ i ];

			if ( influence[ 1 ] !== 0 ) {

				if ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );
				if ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );

			}

		}

		// Collect influences

		for ( var i = 0; i < length; i ++ ) {

			var influence = influences[ i ];

			influence[ 0 ] = i;
			influence[ 1 ] = objectInfluences[ i ];

		}

		influences.sort( absNumericalSort );

		// Add morphAttributes

		for ( var i = 0; i < 8; i ++ ) {

			var influence = influences[ i ];

			if ( influence ) {

				var index = influence[ 0 ];
				var value = influence[ 1 ];

				if ( value ) {

					if ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );
					if ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );

					morphInfluences[ i ] = value;
					continue;

				}

			}

			morphInfluences[ i ] = 0;

		}

		program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

	}

	return {

		update: update

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {

	var mode;

	function setMode( value ) {

		mode = value;

	}

	var type, bytesPerElement;

	function setIndex( value ) {

		type = value.type;
		bytesPerElement = value.bytesPerElement;

	}

	function render( start, count ) {

		gl.drawElements( mode, count, type, start * bytesPerElement );

		infoRender.calls ++;
		infoRender.vertices += count;

		if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;
		else if ( mode === gl.POINTS ) infoRender.points += count;

	}

	function renderInstances( geometry, start, count ) {

		var extension = extensions.get( 'ANGLE_instanced_arrays' );

		if ( extension === null ) {

			console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
			return;

		}

		extension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );

		infoRender.calls ++;
		infoRender.vertices += count * geometry.maxInstancedCount;

		if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;
		else if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;

	}

	//

	this.setMode = setMode;
	this.setIndex = setIndex;
	this.render = render;
	this.renderInstances = renderInstances;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLBufferRenderer( gl, extensions, infoRender ) {

	var mode;

	function setMode( value ) {

		mode = value;

	}

	function render( start, count ) {

		gl.drawArrays( mode, start, count );

		infoRender.calls ++;
		infoRender.vertices += count;

		if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;
		else if ( mode === gl.POINTS ) infoRender.points += count;

	}

	function renderInstances( geometry, start, count ) {

		var extension = extensions.get( 'ANGLE_instanced_arrays' );

		if ( extension === null ) {

			console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
			return;

		}

		var position = geometry.attributes.position;

		if ( position.isInterleavedBufferAttribute ) {

			count = position.data.count;

			extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

		} else {

			extension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );

		}

		infoRender.calls ++;
		infoRender.vertices += count * geometry.maxInstancedCount;

		if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;
		else if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;

	}

	//

	this.setMode = setMode;
	this.render = render;
	this.renderInstances = renderInstances;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLGeometries( gl, attributes, infoMemory ) {

	var geometries = {};
	var wireframeAttributes = {};

	function onGeometryDispose( event ) {

		var geometry = event.target;
		var buffergeometry = geometries[ geometry.id ];

		if ( buffergeometry.index !== null ) {

			attributes.remove( buffergeometry.index );

		}

		for ( var name in buffergeometry.attributes ) {

			attributes.remove( buffergeometry.attributes[ name ] );

		}

		geometry.removeEventListener( 'dispose', onGeometryDispose );

		delete geometries[ geometry.id ];

		// TODO Remove duplicate code

		var attribute = wireframeAttributes[ geometry.id ];

		if ( attribute ) {

			attributes.remove( attribute );
			delete wireframeAttributes[ geometry.id ];

		}

		attribute = wireframeAttributes[ buffergeometry.id ];

		if ( attribute ) {

			attributes.remove( attribute );
			delete wireframeAttributes[ buffergeometry.id ];

		}

		//

		infoMemory.geometries --;

	}

	function get( object, geometry ) {

		var buffergeometry = geometries[ geometry.id ];

		if ( buffergeometry ) return buffergeometry;

		geometry.addEventListener( 'dispose', onGeometryDispose );

		if ( geometry.isBufferGeometry ) {

			buffergeometry = geometry;

		} else if ( geometry.isGeometry ) {

			if ( geometry._bufferGeometry === undefined ) {

				geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

			}

			buffergeometry = geometry._bufferGeometry;

		}

		geometries[ geometry.id ] = buffergeometry;

		infoMemory.geometries ++;

		return buffergeometry;

	}

	function update( geometry ) {

		var index = geometry.index;
		var geometryAttributes = geometry.attributes;

		if ( index !== null ) {

			attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );

		}

		for ( var name in geometryAttributes ) {

			attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );

		}

		// morph targets

		var morphAttributes = geometry.morphAttributes;

		for ( var name in morphAttributes ) {

			var array = morphAttributes[ name ];

			for ( var i = 0, l = array.length; i < l; i ++ ) {

				attributes.update( array[ i ], gl.ARRAY_BUFFER );

			}

		}

	}

	function getWireframeAttribute( geometry ) {

		var attribute = wireframeAttributes[ geometry.id ];

		if ( attribute ) return attribute;

		var indices = [];

		var geometryIndex = geometry.index;
		var geometryAttributes = geometry.attributes;

		// console.time( 'wireframe' );

		if ( geometryIndex !== null ) {

			var array = geometryIndex.array;

			for ( var i = 0, l = array.length; i < l; i += 3 ) {

				var a = array[ i + 0 ];
				var b = array[ i + 1 ];
				var c = array[ i + 2 ];

				indices.push( a, b, b, c, c, a );

			}

		} else {

			var array = geometryAttributes.position.array;

			for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

				var a = i + 0;
				var b = i + 1;
				var c = i + 2;

				indices.push( a, b, b, c, c, a );

			}

		}

		// console.timeEnd( 'wireframe' );

		attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );

		attributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );

		wireframeAttributes[ geometry.id ] = attribute;

		return attribute;

	}

	return {

		get: get,
		update: update,

		getWireframeAttribute: getWireframeAttribute

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function UniformsCache() {

	var lights = {};

	return {

		get: function ( light ) {

			if ( lights[ light.id ] !== undefined ) {

				return lights[ light.id ];

			}

			var uniforms;

			switch ( light.type ) {

				case 'DirectionalLight':
					uniforms = {
						direction: new Vector3(),
						color: new Color(),

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2()
					};
					break;

				case 'SpotLight':
					uniforms = {
						position: new Vector3(),
						direction: new Vector3(),
						color: new Color(),
						distance: 0,
						coneCos: 0,
						penumbraCos: 0,
						decay: 0,

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2()
					};
					break;

				case 'PointLight':
					uniforms = {
						position: new Vector3(),
						color: new Color(),
						distance: 0,
						decay: 0,

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2(),
						shadowCameraNear: 1,
						shadowCameraFar: 1000
					};
					break;

				case 'HemisphereLight':
					uniforms = {
						direction: new Vector3(),
						skyColor: new Color(),
						groundColor: new Color()
					};
					break;

				case 'RectAreaLight':
					uniforms = {
						color: new Color(),
						position: new Vector3(),
						halfWidth: new Vector3(),
						halfHeight: new Vector3()
						// TODO (abelnation): set RectAreaLight shadow uniforms
					};
					break;

			}

			lights[ light.id ] = uniforms;

			return uniforms;

		}

	};

}

function WebGLLights() {

	var cache = new UniformsCache();

	var state = {

		hash: '',

		ambient: [ 0, 0, 0 ],
		directional: [],
		directionalShadowMap: [],
		directionalShadowMatrix: [],
		spot: [],
		spotShadowMap: [],
		spotShadowMatrix: [],
		rectArea: [],
		point: [],
		pointShadowMap: [],
		pointShadowMatrix: [],
		hemi: []

	};

	var vector3 = new Vector3();
	var matrix4 = new Matrix4();
	var matrix42 = new Matrix4();

	function setup( lights, shadows, camera ) {

		var r = 0, g = 0, b = 0;

		var directionalLength = 0;
		var pointLength = 0;
		var spotLength = 0;
		var rectAreaLength = 0;
		var hemiLength = 0;

		var viewMatrix = camera.matrixWorldInverse;

		for ( var i = 0, l = lights.length; i < l; i ++ ) {

			var light = lights[ i ];

			var color = light.color;
			var intensity = light.intensity;
			var distance = light.distance;

			var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

			if ( light.isAmbientLight ) {

				r += color.r * intensity;
				g += color.g * intensity;
				b += color.b * intensity;

			} else if ( light.isDirectionalLight ) {

				var uniforms = cache.get( light );

				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				vector3.setFromMatrixPosition( light.target.matrixWorld );
				uniforms.direction.sub( vector3 );
				uniforms.direction.transformDirection( viewMatrix );

				uniforms.shadow = light.castShadow;

				if ( light.castShadow ) {

					var shadow = light.shadow;

					uniforms.shadowBias = shadow.bias;
					uniforms.shadowRadius = shadow.radius;
					uniforms.shadowMapSize = shadow.mapSize;

				}

				state.directionalShadowMap[ directionalLength ] = shadowMap;
				state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
				state.directional[ directionalLength ] = uniforms;

				directionalLength ++;

			} else if ( light.isSpotLight ) {

				var uniforms = cache.get( light );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				uniforms.color.copy( color ).multiplyScalar( intensity );
				uniforms.distance = distance;

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				vector3.setFromMatrixPosition( light.target.matrixWorld );
				uniforms.direction.sub( vector3 );
				uniforms.direction.transformDirection( viewMatrix );

				uniforms.coneCos = Math.cos( light.angle );
				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
				uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

				uniforms.shadow = light.castShadow;

				if ( light.castShadow ) {

					var shadow = light.shadow;

					uniforms.shadowBias = shadow.bias;
					uniforms.shadowRadius = shadow.radius;
					uniforms.shadowMapSize = shadow.mapSize;

				}

				state.spotShadowMap[ spotLength ] = shadowMap;
				state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
				state.spot[ spotLength ] = uniforms;

				spotLength ++;

			} else if ( light.isRectAreaLight ) {

				var uniforms = cache.get( light );

				// (a) intensity controls irradiance of entire light
				uniforms.color
					.copy( color )
					.multiplyScalar( intensity / ( light.width * light.height ) );

				// (b) intensity controls the radiance per light area
				// uniforms.color.copy( color ).multiplyScalar( intensity );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				// extract local rotation of light to derive width/height half vectors
				matrix42.identity();
				matrix4.copy( light.matrixWorld );
				matrix4.premultiply( viewMatrix );
				matrix42.extractRotation( matrix4 );

				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

				uniforms.halfWidth.applyMatrix4( matrix42 );
				uniforms.halfHeight.applyMatrix4( matrix42 );

				// TODO (abelnation): RectAreaLight distance?
				// uniforms.distance = distance;

				state.rectArea[ rectAreaLength ] = uniforms;

				rectAreaLength ++;

			} else if ( light.isPointLight ) {

				var uniforms = cache.get( light );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
				uniforms.distance = light.distance;
				uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

				uniforms.shadow = light.castShadow;

				if ( light.castShadow ) {

					var shadow = light.shadow;

					uniforms.shadowBias = shadow.bias;
					uniforms.shadowRadius = shadow.radius;
					uniforms.shadowMapSize = shadow.mapSize;
					uniforms.shadowCameraNear = shadow.camera.near;
					uniforms.shadowCameraFar = shadow.camera.far;

				}

				state.pointShadowMap[ pointLength ] = shadowMap;
				state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
				state.point[ pointLength ] = uniforms;

				pointLength ++;

			} else if ( light.isHemisphereLight ) {

				var uniforms = cache.get( light );

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				uniforms.direction.transformDirection( viewMatrix );
				uniforms.direction.normalize();

				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

				state.hemi[ hemiLength ] = uniforms;

				hemiLength ++;

			}

		}

		state.ambient[ 0 ] = r;
		state.ambient[ 1 ] = g;
		state.ambient[ 2 ] = b;

		state.directional.length = directionalLength;
		state.spot.length = spotLength;
		state.rectArea.length = rectAreaLength;
		state.point.length = pointLength;
		state.hemi.length = hemiLength;

		// TODO (sam-g-steel) why aren't we using join
		state.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + shadows.length;

	}

	return {
		setup: setup,
		state: state
	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLObjects( geometries, infoRender ) {

	var updateList = {};

	function update( object ) {

		var frame = infoRender.frame;

		var geometry = object.geometry;
		var buffergeometry = geometries.get( object, geometry );

		// Update once per frame

		if ( updateList[ buffergeometry.id ] !== frame ) {

			if ( geometry.isGeometry ) {

				buffergeometry.updateFromObject( object );

			}

			geometries.update( buffergeometry );

			updateList[ buffergeometry.id ] = frame;

		}

		return buffergeometry;

	}

	function clear() {

		updateList = {};

	}

	return {

		update: update,
		clear: clear

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function addLineNumbers( string ) {

	var lines = string.split( '\n' );

	for ( var i = 0; i < lines.length; i ++ ) {

		lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

	}

	return lines.join( '\n' );

}

function WebGLShader( gl, type, string ) {

	var shader = gl.createShader( type );

	gl.shaderSource( shader, string );
	gl.compileShader( shader );

	if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

		console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

	}

	if ( gl.getShaderInfoLog( shader ) !== '' ) {

		console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

	}

	// --enable-privileged-webgl-extension
	// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

	return shader;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

var programIdCount = 0;

function getEncodingComponents( encoding ) {

	switch ( encoding ) {

		case LinearEncoding:
			return [ 'Linear', '( value )' ];
		case sRGBEncoding:
			return [ 'sRGB', '( value )' ];
		case RGBEEncoding:
			return [ 'RGBE', '( value )' ];
		case RGBM7Encoding:
			return [ 'RGBM', '( value, 7.0 )' ];
		case RGBM16Encoding:
			return [ 'RGBM', '( value, 16.0 )' ];
		case RGBDEncoding:
			return [ 'RGBD', '( value, 256.0 )' ];
		case GammaEncoding:
			return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
		default:
			throw new Error( 'unsupported encoding: ' + encoding );

	}

}

function getTexelDecodingFunction( functionName, encoding ) {

	var components = getEncodingComponents( encoding );
	return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';

}

function getTexelEncodingFunction( functionName, encoding ) {

	var components = getEncodingComponents( encoding );
	return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';

}

function getToneMappingFunction( functionName, toneMapping ) {

	var toneMappingName;

	switch ( toneMapping ) {

		case LinearToneMapping:
			toneMappingName = 'Linear';
			break;

		case ReinhardToneMapping:
			toneMappingName = 'Reinhard';
			break;

		case Uncharted2ToneMapping:
			toneMappingName = 'Uncharted2';
			break;

		case CineonToneMapping:
			toneMappingName = 'OptimizedCineon';
			break;

		default:
			throw new Error( 'unsupported toneMapping: ' + toneMapping );

	}

	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

}

function generateExtensions( extensions, parameters, rendererExtensions ) {

	extensions = extensions || {};

	var chunks = [
		( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
		( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
		( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
		( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
	];

	return chunks.filter( filterEmptyLine ).join( '\n' );

}

function generateDefines( defines ) {

	var chunks = [];

	for ( var name in defines ) {

		var value = defines[ name ];

		if ( value === false ) continue;

		chunks.push( '#define ' + name + ' ' + value );

	}

	return chunks.join( '\n' );

}

function fetchAttributeLocations( gl, program ) {

	var attributes = {};

	var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

	for ( var i = 0; i < n; i ++ ) {

		var info = gl.getActiveAttrib( program, i );
		var name = info.name;

		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

		attributes[ name ] = gl.getAttribLocation( program, name );

	}

	return attributes;

}

function filterEmptyLine( string ) {

	return string !== '';

}

function replaceLightNums( string, parameters ) {

	return string
		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

}

function parseIncludes( string ) {

	var pattern = /^[ \t]*#include +<([\w\d.]+)>/gm;

	function replace( match, include ) {

		var replace = ShaderChunk[ include ];

		if ( replace === undefined ) {

			throw new Error( 'Can not resolve #include <' + include + '>' );

		}

		return parseIncludes( replace );

	}

	return string.replace( pattern, replace );

}

function unrollLoops( string ) {

	var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

	function replace( match, start, end, snippet ) {

		var unroll = '';

		for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

			unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

		}

		return unroll;

	}

	return string.replace( pattern, replace );

}

function WebGLProgram( renderer, extensions, code, material, shader, parameters ) {

	var gl = renderer.context;

	var defines = material.defines;

	var vertexShader = shader.vertexShader;
	var fragmentShader = shader.fragmentShader;

	var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

	if ( parameters.shadowMapType === PCFShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

	}

	var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
	var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
	var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

	if ( parameters.envMap ) {

		switch ( material.envMap.mapping ) {

			case CubeReflectionMapping:
			case CubeRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
				break;

			case CubeUVReflectionMapping:
			case CubeUVRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
				break;

			case EquirectangularReflectionMapping:
			case EquirectangularRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
				break;

			case SphericalReflectionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
				break;

		}

		switch ( material.envMap.mapping ) {

			case CubeRefractionMapping:
			case EquirectangularRefractionMapping:
				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
				break;

		}

		switch ( material.combine ) {

			case MultiplyOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
				break;

			case MixOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
				break;

			case AddOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
				break;

		}

	}

	var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

	// console.log( 'building new program ' );

	//

	var customExtensions = generateExtensions( material.extensions, parameters, extensions );

	var customDefines = generateDefines( defines );

	//

	var program = gl.createProgram();

	var prefixVertex, prefixFragment;

	if ( material.isRawShaderMaterial ) {

		prefixVertex = [

			customDefines

		].filter( filterEmptyLine ).join( '\n' );

		if ( prefixVertex.length > 0 ) {

			prefixVertex += '\n';

		}

		prefixFragment = [

			customExtensions,
			customDefines

		].filter( filterEmptyLine ).join( '\n' );

		if ( prefixFragment.length > 0 ) {

			prefixFragment += '\n';

		}

	} else {

		prefixVertex = [

			'precision ' + parameters.precision + ' float;',
			'precision ' + parameters.precision + ' int;',

			'#define SHADER_NAME ' + shader.name,

			customDefines,

			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

			'#define GAMMA_FACTOR ' + gammaFactorDefine,

			'#define MAX_BONES ' + parameters.maxBones,
			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
			( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
			parameters.vertexColors ? '#define USE_COLOR' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.skinning ? '#define USE_SKINNING' : '',
			parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			parameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			'uniform mat4 modelMatrix;',
			'uniform mat4 modelViewMatrix;',
			'uniform mat4 projectionMatrix;',
			'uniform mat4 viewMatrix;',
			'uniform mat3 normalMatrix;',
			'uniform vec3 cameraPosition;',

			'attribute vec3 position;',
			'attribute vec3 normal;',
			'attribute vec2 uv;',

			'#ifdef USE_COLOR',

			'	attribute vec3 color;',

			'#endif',

			'#ifdef USE_MORPHTARGETS',

			'	attribute vec3 morphTarget0;',
			'	attribute vec3 morphTarget1;',
			'	attribute vec3 morphTarget2;',
			'	attribute vec3 morphTarget3;',

			'	#ifdef USE_MORPHNORMALS',

			'		attribute vec3 morphNormal0;',
			'		attribute vec3 morphNormal1;',
			'		attribute vec3 morphNormal2;',
			'		attribute vec3 morphNormal3;',

			'	#else',

			'		attribute vec3 morphTarget4;',
			'		attribute vec3 morphTarget5;',
			'		attribute vec3 morphTarget6;',
			'		attribute vec3 morphTarget7;',

			'	#endif',

			'#endif',

			'#ifdef USE_SKINNING',

			'	attribute vec4 skinIndex;',
			'	attribute vec4 skinWeight;',

			'#endif',

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

		prefixFragment = [

			customExtensions,

			'precision ' + parameters.precision + ' float;',
			'precision ' + parameters.precision + ' int;',

			'#define SHADER_NAME ' + shader.name,

			customDefines,

			parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

			'#define GAMMA_FACTOR ' + gammaFactorDefine,

			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
			( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapTypeDefine : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
			parameters.vertexColors ? '#define USE_COLOR' : '',

			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
			'#define UNION_CLIPPING_PLANES ' + ( parameters.numClippingPlanes - parameters.numClipIntersection ),

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

			parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			parameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			parameters.envMap && extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

			'uniform mat4 viewMatrix;',
			'uniform vec3 cameraPosition;',

			( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

			parameters.dithering ? '#define DITHERING' : '',

			( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
			parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
			parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
			parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
			parameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',

			parameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

	}

	vertexShader = parseIncludes( vertexShader );
	vertexShader = replaceLightNums( vertexShader, parameters );

	fragmentShader = parseIncludes( fragmentShader );
	fragmentShader = replaceLightNums( fragmentShader, parameters );

	if ( ! material.isShaderMaterial ) {

		vertexShader = unrollLoops( vertexShader );
		fragmentShader = unrollLoops( fragmentShader );

	}

	var vertexGlsl = prefixVertex + vertexShader;
	var fragmentGlsl = prefixFragment + fragmentShader;

	// console.log( '*VERTEX*', vertexGlsl );
	// console.log( '*FRAGMENT*', fragmentGlsl );

	var glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
	var glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

	gl.attachShader( program, glVertexShader );
	gl.attachShader( program, glFragmentShader );

	// Force a particular attribute to index 0.

	if ( material.index0AttributeName !== undefined ) {

		gl.bindAttribLocation( program, 0, material.index0AttributeName );

	} else if ( parameters.morphTargets === true ) {

		// programs with morphTargets displace position out of attribute 0
		gl.bindAttribLocation( program, 0, 'position' );

	}

	gl.linkProgram( program );

	var programLog = gl.getProgramInfoLog( program );
	var vertexLog = gl.getShaderInfoLog( glVertexShader );
	var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

	var runnable = true;
	var haveDiagnostics = true;

	// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
	// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

	if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

		runnable = false;

		console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

	} else if ( programLog !== '' ) {

		console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

	} else if ( vertexLog === '' || fragmentLog === '' ) {

		haveDiagnostics = false;

	}

	if ( haveDiagnostics ) {

		this.diagnostics = {

			runnable: runnable,
			material: material,

			programLog: programLog,

			vertexShader: {

				log: vertexLog,
				prefix: prefixVertex

			},

			fragmentShader: {

				log: fragmentLog,
				prefix: prefixFragment

			}

		};

	}

	// clean up

	gl.deleteShader( glVertexShader );
	gl.deleteShader( glFragmentShader );

	// set up caching for uniform locations

	var cachedUniforms;

	this.getUniforms = function () {

		if ( cachedUniforms === undefined ) {

			cachedUniforms = new WebGLUniforms( gl, program, renderer );

		}

		return cachedUniforms;

	};

	// set up caching for attribute locations

	var cachedAttributes;

	this.getAttributes = function () {

		if ( cachedAttributes === undefined ) {

			cachedAttributes = fetchAttributeLocations( gl, program );

		}

		return cachedAttributes;

	};

	// free resource

	this.destroy = function () {

		gl.deleteProgram( program );
		this.program = undefined;

	};

	// DEPRECATED

	Object.defineProperties( this, {

		uniforms: {
			get: function () {

				console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
				return this.getUniforms();

			}
		},

		attributes: {
			get: function () {

				console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
				return this.getAttributes();

			}
		}

	} );


	//

	this.id = programIdCount ++;
	this.code = code;
	this.usedTimes = 1;
	this.program = program;
	this.vertexShader = glVertexShader;
	this.fragmentShader = glFragmentShader;

	return this;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLPrograms( renderer, extensions, capabilities ) {

	var programs = [];

	var shaderIDs = {
		MeshDepthMaterial: 'depth',
		MeshDistanceMaterial: 'distanceRGBA',
		MeshNormalMaterial: 'normal',
		MeshBasicMaterial: 'basic',
		MeshLambertMaterial: 'lambert',
		MeshPhongMaterial: 'phong',
		MeshToonMaterial: 'phong',
		MeshStandardMaterial: 'physical',
		MeshPhysicalMaterial: 'physical',
		LineBasicMaterial: 'basic',
		LineDashedMaterial: 'dashed',
		PointsMaterial: 'points',
		ShadowMaterial: 'shadow'
	};

	var parameterNames = [
		"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
		"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
		"roughnessMap", "metalnessMap", "gradientMap",
		"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
		"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
		"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
		"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
		"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
		"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
		"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"
	];


	function allocateBones( object ) {

		var skeleton = object.skeleton;
		var bones = skeleton.bones;

		if ( capabilities.floatVertexTextures ) {

			return 1024;

		} else {

			// default for when object is not specified
			// ( for example when prebuilding shader to be used with multiple objects )
			//
			//  - leave some extra space for other uniforms
			//  - limit here is ANGLE's 254 max uniform vectors
			//    (up to 54 should be safe)

			var nVertexUniforms = capabilities.maxVertexUniforms;
			var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

			var maxBones = Math.min( nVertexMatrices, bones.length );

			if ( maxBones < bones.length ) {

				console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
				return 0;

			}

			return maxBones;

		}

	}

	function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

		var encoding;

		if ( ! map ) {

			encoding = LinearEncoding;

		} else if ( map.isTexture ) {

			encoding = map.encoding;

		} else if ( map.isWebGLRenderTarget ) {

			console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
			encoding = map.texture.encoding;

		}

		// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
		if ( encoding === LinearEncoding && gammaOverrideLinear ) {

			encoding = GammaEncoding;

		}

		return encoding;

	}

	this.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {

		var shaderID = shaderIDs[ material.type ];

		// heuristics to create shader parameters according to lights in the scene
		// (not to blow over maxLights budget)

		var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;
		var precision = capabilities.precision;

		if ( material.precision !== null ) {

			precision = capabilities.getMaxPrecision( material.precision );

			if ( precision !== material.precision ) {

				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

			}

		}

		var currentRenderTarget = renderer.getRenderTarget();

		var parameters = {

			shaderID: shaderID,

			precision: precision,
			supportsVertexTextures: capabilities.vertexTextures,
			outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
			map: !! material.map,
			mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
			envMap: !! material.envMap,
			envMapMode: material.envMap && material.envMap.mapping,
			envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
			envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
			lightMap: !! material.lightMap,
			aoMap: !! material.aoMap,
			emissiveMap: !! material.emissiveMap,
			emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
			bumpMap: !! material.bumpMap,
			normalMap: !! material.normalMap,
			displacementMap: !! material.displacementMap,
			roughnessMap: !! material.roughnessMap,
			metalnessMap: !! material.metalnessMap,
			specularMap: !! material.specularMap,
			alphaMap: !! material.alphaMap,

			gradientMap: !! material.gradientMap,

			combine: material.combine,

			vertexColors: material.vertexColors,

			fog: !! fog,
			useFog: material.fog,
			fogExp: ( fog && fog.isFogExp2 ),

			flatShading: material.flatShading,

			sizeAttenuation: material.sizeAttenuation,
			logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

			skinning: material.skinning && maxBones > 0,
			maxBones: maxBones,
			useVertexTexture: capabilities.floatVertexTextures,

			morphTargets: material.morphTargets,
			morphNormals: material.morphNormals,
			maxMorphTargets: renderer.maxMorphTargets,
			maxMorphNormals: renderer.maxMorphNormals,

			numDirLights: lights.directional.length,
			numPointLights: lights.point.length,
			numSpotLights: lights.spot.length,
			numRectAreaLights: lights.rectArea.length,
			numHemiLights: lights.hemi.length,

			numClippingPlanes: nClipPlanes,
			numClipIntersection: nClipIntersection,

			dithering: material.dithering,

			shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,
			shadowMapType: renderer.shadowMap.type,

			toneMapping: renderer.toneMapping,
			physicallyCorrectLights: renderer.physicallyCorrectLights,

			premultipliedAlpha: material.premultipliedAlpha,

			alphaTest: material.alphaTest,
			doubleSided: material.side === DoubleSide,
			flipSided: material.side === BackSide,

			depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

		};

		return parameters;

	};

	this.getProgramCode = function ( material, parameters ) {

		var array = [];

		if ( parameters.shaderID ) {

			array.push( parameters.shaderID );

		} else {

			array.push( material.fragmentShader );
			array.push( material.vertexShader );

		}

		if ( material.defines !== undefined ) {

			for ( var name in material.defines ) {

				array.push( name );
				array.push( material.defines[ name ] );

			}

		}

		for ( var i = 0; i < parameterNames.length; i ++ ) {

			array.push( parameters[ parameterNames[ i ] ] );

		}

		array.push( material.onBeforeCompile.toString() );

		array.push( renderer.gammaOutput );

		return array.join();

	};

	this.acquireProgram = function ( material, shader, parameters, code ) {

		var program;

		// Check if code has been already compiled
		for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

			var programInfo = programs[ p ];

			if ( programInfo.code === code ) {

				program = programInfo;
				++ program.usedTimes;

				break;

			}

		}

		if ( program === undefined ) {

			program = new WebGLProgram( renderer, extensions, code, material, shader, parameters );
			programs.push( program );

		}

		return program;

	};

	this.releaseProgram = function ( program ) {

		if ( -- program.usedTimes === 0 ) {

			// Remove from unordered set
			var i = programs.indexOf( program );
			programs[ i ] = programs[ programs.length - 1 ];
			programs.pop();

			// Free WebGL resources
			program.destroy();

		}

	};

	// Exposed for resource monitoring & error feedback via renderer.info:
	this.programs = programs;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, infoMemory ) {

	var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof window.WebGL2RenderingContext );
	var _videoTextures = {};

	//

	function clampToMaxSize( image, maxSize ) {

		if ( image.width > maxSize || image.height > maxSize ) {

			// Warning: Scaling through the canvas will only work with images that use
			// premultiplied alpha.

			var scale = maxSize / Math.max( image.width, image.height );

			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			canvas.width = Math.floor( image.width * scale );
			canvas.height = Math.floor( image.height * scale );

			var context = canvas.getContext( '2d' );
			context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

			console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

			return canvas;

		}

		return image;

	}

	function isPowerOfTwo( image ) {

		return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );

	}

	function makePowerOfTwo( image ) {

		if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {

			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			canvas.width = _Math.floorPowerOfTwo( image.width );
			canvas.height = _Math.floorPowerOfTwo( image.height );

			var context = canvas.getContext( '2d' );
			context.drawImage( image, 0, 0, canvas.width, canvas.height );

			console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

			return canvas;

		}

		return image;

	}

	function textureNeedsPowerOfTwo( texture ) {

		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

	}

	function textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {

		return texture.generateMipmaps && isPowerOfTwo &&
			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

	}

	// Fallback filters for non-power-of-2 textures

	function filterFallback( f ) {

		if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {

			return _gl.NEAREST;

		}

		return _gl.LINEAR;

	}

	//

	function onTextureDispose( event ) {

		var texture = event.target;

		texture.removeEventListener( 'dispose', onTextureDispose );

		deallocateTexture( texture );

		if ( texture.isVideoTexture ) {

			delete _videoTextures[ texture.id ];

		}

		infoMemory.textures --;

	}

	function onRenderTargetDispose( event ) {

		var renderTarget = event.target;

		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

		deallocateRenderTarget( renderTarget );

		infoMemory.textures --;

	}

	//

	function deallocateTexture( texture ) {

		var textureProperties = properties.get( texture );

		if ( texture.image && textureProperties.__image__webglTextureCube ) {

			// cube texture

			_gl.deleteTexture( textureProperties.__image__webglTextureCube );

		} else {

			// 2D texture

			if ( textureProperties.__webglInit === undefined ) return;

			_gl.deleteTexture( textureProperties.__webglTexture );

		}

		// remove all webgl properties
		properties.remove( texture );

	}

	function deallocateRenderTarget( renderTarget ) {

		var renderTargetProperties = properties.get( renderTarget );
		var textureProperties = properties.get( renderTarget.texture );

		if ( ! renderTarget ) return;

		if ( textureProperties.__webglTexture !== undefined ) {

			_gl.deleteTexture( textureProperties.__webglTexture );

		}

		if ( renderTarget.depthTexture ) {

			renderTarget.depthTexture.dispose();

		}

		if ( renderTarget.isWebGLRenderTargetCube ) {

			for ( var i = 0; i < 6; i ++ ) {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

			}

		} else {

			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

		}

		properties.remove( renderTarget.texture );
		properties.remove( renderTarget );

	}

	//



	function setTexture2D( texture, slot ) {

		var textureProperties = properties.get( texture );

		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

			var image = texture.image;

			if ( image === undefined ) {

				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );

			} else if ( image.complete === false ) {

				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );

			} else {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

		}

		state.activeTexture( _gl.TEXTURE0 + slot );
		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

	}

	function setTextureCube( texture, slot ) {

		var textureProperties = properties.get( texture );

		if ( texture.image.length === 6 ) {

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				if ( ! textureProperties.__image__webglTextureCube ) {

					texture.addEventListener( 'dispose', onTextureDispose );

					textureProperties.__image__webglTextureCube = _gl.createTexture();

					infoMemory.textures ++;

				}

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

				var isCompressed = ( texture && texture.isCompressedTexture );
				var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

				var cubeImage = [];

				for ( var i = 0; i < 6; i ++ ) {

					if ( ! isCompressed && ! isDataTexture ) {

						cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

					} else {

						cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

					}

				}

				var image = cubeImage[ 0 ],
					isPowerOfTwoImage = isPowerOfTwo( image ),
					glFormat = utils.convert( texture.format ),
					glType = utils.convert( texture.type );

				setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

				for ( var i = 0; i < 6; i ++ ) {

					if ( ! isCompressed ) {

						if ( isDataTexture ) {

							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

						} else {

							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

						}

					} else {

						var mipmap, mipmaps = cubeImage[ i ].mipmaps;

						for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

							mipmap = mipmaps[ j ];

							if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

								if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

									state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

								} else {

									console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

								}

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

							}

						}

					}

				}

				if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {

					_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

				}

				textureProperties.__version = texture.version;

				if ( texture.onUpdate ) texture.onUpdate( texture );

			} else {

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

			}

		}

	}

	function setTextureCubeDynamic( texture, slot ) {

		state.activeTexture( _gl.TEXTURE0 + slot );
		state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

	}

	function setTextureParameters( textureType, texture, isPowerOfTwoImage ) {

		var extension;

		if ( isPowerOfTwoImage ) {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );

		} else {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

			}

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

			}

		}

		extension = extensions.get( 'EXT_texture_filter_anisotropic' );

		if ( extension ) {

			if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
			if ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;

			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

			}

		}

	}

	function uploadTexture( textureProperties, texture, slot ) {

		if ( textureProperties.__webglInit === undefined ) {

			textureProperties.__webglInit = true;

			texture.addEventListener( 'dispose', onTextureDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			if ( texture.isVideoTexture ) {

				_videoTextures[ texture.id ] = texture;

			}

			infoMemory.textures ++;

		}

		state.activeTexture( _gl.TEXTURE0 + slot );
		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

		_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
		_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
		_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

		var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

		if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

			image = makePowerOfTwo( image );

		}

		var isPowerOfTwoImage = isPowerOfTwo( image ),
			glFormat = utils.convert( texture.format ),
			glType = utils.convert( texture.type );

		setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

		var mipmap, mipmaps = texture.mipmaps;

		if ( texture.isDepthTexture ) {

			// populate depth texture with dummy data

			var internalFormat = _gl.DEPTH_COMPONENT;

			if ( texture.type === FloatType ) {

				if ( ! _isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );
				internalFormat = _gl.DEPTH_COMPONENT32F;

			} else if ( _isWebGL2 ) {

				// WebGL 2.0 requires signed internalformat for glTexImage2D
				internalFormat = _gl.DEPTH_COMPONENT16;

			}

			if ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {

				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
				// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

					console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

					texture.type = UnsignedShortType;
					glType = utils.convert( texture.type );

				}

			}

			// Depth stencil textures need the DEPTH_STENCIL internal format
			// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
			if ( texture.format === DepthStencilFormat ) {

				internalFormat = _gl.DEPTH_STENCIL;

				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
				// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.type !== UnsignedInt248Type ) {

					console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

					texture.type = UnsignedInt248Type;
					glType = utils.convert( texture.type );

				}

			}

			state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );

		} else if ( texture.isDataTexture ) {

			// use manually created mipmaps if available
			// if there are no manual mipmaps
			// set 0 level mipmap and then use GL to generate other mipmap levels

			if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

				}

				texture.generateMipmaps = false;

			} else {

				state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

			}

		} else if ( texture.isCompressedTexture ) {

			for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

				mipmap = mipmaps[ i ];

				if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

					if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

						state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

					} else {

						console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

					}

				} else {

					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

				}

			}

		} else {

			// regular Texture (image, video, canvas)

			// use manually created mipmaps if available
			// if there are no manual mipmaps
			// set 0 level mipmap and then use GL to generate other mipmap levels

			if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

				}

				texture.generateMipmaps = false;

			} else {

				state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );

			}

		}

		if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) _gl.generateMipmap( _gl.TEXTURE_2D );

		textureProperties.__version = texture.version;

		if ( texture.onUpdate ) texture.onUpdate( texture );

	}

	// Render targets

	// Setup storage for target texture and bind it to correct framebuffer
	function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

		var glFormat = utils.convert( renderTarget.texture.format );
		var glType = utils.convert( renderTarget.texture.type );
		state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
		_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
		_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

	}

	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
	function setupRenderBufferStorage( renderbuffer, renderTarget ) {

		_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		} else {

			// FIXME: We don't support !depth !stencil
			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

		}

		_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

	}

	// Setup resources for a Depth Texture for a FBO (needs an extension)
	function setupDepthTexture( framebuffer, renderTarget ) {

		var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

		}

		// upload an empty depth texture with framebuffer size
		if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
				renderTarget.depthTexture.image.width !== renderTarget.width ||
				renderTarget.depthTexture.image.height !== renderTarget.height ) {

			renderTarget.depthTexture.image.width = renderTarget.width;
			renderTarget.depthTexture.image.height = renderTarget.height;
			renderTarget.depthTexture.needsUpdate = true;

		}

		setTexture2D( renderTarget.depthTexture, 0 );

		var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

		if ( renderTarget.depthTexture.format === DepthFormat ) {

			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

		} else {

			throw new Error( 'Unknown depthTexture format' );

		}

	}

	// Setup GL resources for a non-texture depth buffer
	function setupDepthRenderbuffer( renderTarget ) {

		var renderTargetProperties = properties.get( renderTarget );

		var isCube = ( renderTarget.isWebGLRenderTargetCube === true );

		if ( renderTarget.depthTexture ) {

			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

		} else {

			if ( isCube ) {

				renderTargetProperties.__webglDepthbuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

				}

			} else {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

			}

		}

		_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

	}

	// Set up GL resources for the render target
	function setupRenderTarget( renderTarget ) {

		var renderTargetProperties = properties.get( renderTarget );
		var textureProperties = properties.get( renderTarget.texture );

		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

		textureProperties.__webglTexture = _gl.createTexture();

		infoMemory.textures ++;

		var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
		var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

		// Setup framebuffer

		if ( isCube ) {

			renderTargetProperties.__webglFramebuffer = [];

			for ( var i = 0; i < 6; i ++ ) {

				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

			}

		} else {

			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

		}

		// Setup color buffer

		if ( isCube ) {

			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
			setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

			for ( var i = 0; i < 6; i ++ ) {

				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

			}

			if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
			state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

		} else {

			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
			setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

			if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_2D );
			state.bindTexture( _gl.TEXTURE_2D, null );

		}

		// Setup depth and stencil buffers

		if ( renderTarget.depthBuffer ) {

			setupDepthRenderbuffer( renderTarget );

		}

	}

	function updateRenderTargetMipmap( renderTarget ) {

		var texture = renderTarget.texture;
		var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

		if ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {

			var target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
			var webglTexture = properties.get( texture ).__webglTexture;

			state.bindTexture( target, webglTexture );
			_gl.generateMipmap( target );
			state.bindTexture( target, null );

		}

	}

	function updateVideoTextures() {

		for ( var id in _videoTextures ) {

			_videoTextures[ id ].update();

		}

	}

	this.setTexture2D = setTexture2D;
	this.setTextureCube = setTextureCube;
	this.setTextureCubeDynamic = setTextureCubeDynamic;
	this.setupRenderTarget = setupRenderTarget;
	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
	this.updateVideoTextures = updateVideoTextures;

}

/**
 * @author fordacious / fordacious.github.io
 */

function WebGLProperties() {

	var properties = {};

	function get( object ) {

		var uuid = object.uuid;
		var map = properties[ uuid ];

		if ( map === undefined ) {

			map = {};
			properties[ uuid ] = map;

		}

		return map;

	}

	function remove( object ) {

		delete properties[ object.uuid ];

	}

	function clear() {

		properties = {};

	}

	return {
		get: get,
		remove: remove,
		clear: clear
	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLState( gl, extensions, utils ) {

	function ColorBuffer() {

		var locked = false;

		var color = new Vector4();
		var currentColorMask = null;
		var currentColorClear = new Vector4( 0, 0, 0, 0 );

		return {

			setMask: function ( colorMask ) {

				if ( currentColorMask !== colorMask && ! locked ) {

					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
					currentColorMask = colorMask;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( r, g, b, a, premultipliedAlpha ) {

				if ( premultipliedAlpha === true ) {

					r *= a; g *= a; b *= a;

				}

				color.set( r, g, b, a );

				if ( currentColorClear.equals( color ) === false ) {

					gl.clearColor( r, g, b, a );
					currentColorClear.copy( color );

				}

			},

			reset: function () {

				locked = false;

				currentColorMask = null;
				currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

			}

		};

	}

	function DepthBuffer() {

		var locked = false;

		var currentDepthMask = null;
		var currentDepthFunc = null;
		var currentDepthClear = null;

		return {

			setTest: function ( depthTest ) {

				if ( depthTest ) {

					enable( gl.DEPTH_TEST );

				} else {

					disable( gl.DEPTH_TEST );

				}

			},

			setMask: function ( depthMask ) {

				if ( currentDepthMask !== depthMask && ! locked ) {

					gl.depthMask( depthMask );
					currentDepthMask = depthMask;

				}

			},

			setFunc: function ( depthFunc ) {

				if ( currentDepthFunc !== depthFunc ) {

					if ( depthFunc ) {

						switch ( depthFunc ) {

							case NeverDepth:

								gl.depthFunc( gl.NEVER );
								break;

							case AlwaysDepth:

								gl.depthFunc( gl.ALWAYS );
								break;

							case LessDepth:

								gl.depthFunc( gl.LESS );
								break;

							case LessEqualDepth:

								gl.depthFunc( gl.LEQUAL );
								break;

							case EqualDepth:

								gl.depthFunc( gl.EQUAL );
								break;

							case GreaterEqualDepth:

								gl.depthFunc( gl.GEQUAL );
								break;

							case GreaterDepth:

								gl.depthFunc( gl.GREATER );
								break;

							case NotEqualDepth:

								gl.depthFunc( gl.NOTEQUAL );
								break;

							default:

								gl.depthFunc( gl.LEQUAL );

						}

					} else {

						gl.depthFunc( gl.LEQUAL );

					}

					currentDepthFunc = depthFunc;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( depth ) {

				if ( currentDepthClear !== depth ) {

					gl.clearDepth( depth );
					currentDepthClear = depth;

				}

			},

			reset: function () {

				locked = false;

				currentDepthMask = null;
				currentDepthFunc = null;
				currentDepthClear = null;

			}

		};

	}

	function StencilBuffer() {

		var locked = false;

		var currentStencilMask = null;
		var currentStencilFunc = null;
		var currentStencilRef = null;
		var currentStencilFuncMask = null;
		var currentStencilFail = null;
		var currentStencilZFail = null;
		var currentStencilZPass = null;
		var currentStencilClear = null;

		return {

			setTest: function ( stencilTest ) {

				if ( stencilTest ) {

					enable( gl.STENCIL_TEST );

				} else {

					disable( gl.STENCIL_TEST );

				}

			},

			setMask: function ( stencilMask ) {

				if ( currentStencilMask !== stencilMask && ! locked ) {

					gl.stencilMask( stencilMask );
					currentStencilMask = stencilMask;

				}

			},

			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

				if ( currentStencilFunc !== stencilFunc ||
				     currentStencilRef 	!== stencilRef 	||
				     currentStencilFuncMask !== stencilMask ) {

					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

					currentStencilFunc = stencilFunc;
					currentStencilRef = stencilRef;
					currentStencilFuncMask = stencilMask;

				}

			},

			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

				if ( currentStencilFail	 !== stencilFail 	||
				     currentStencilZFail !== stencilZFail ||
				     currentStencilZPass !== stencilZPass ) {

					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

					currentStencilFail = stencilFail;
					currentStencilZFail = stencilZFail;
					currentStencilZPass = stencilZPass;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( stencil ) {

				if ( currentStencilClear !== stencil ) {

					gl.clearStencil( stencil );
					currentStencilClear = stencil;

				}

			},

			reset: function () {

				locked = false;

				currentStencilMask = null;
				currentStencilFunc = null;
				currentStencilRef = null;
				currentStencilFuncMask = null;
				currentStencilFail = null;
				currentStencilZFail = null;
				currentStencilZPass = null;
				currentStencilClear = null;

			}

		};

	}

	//

	var colorBuffer = new ColorBuffer();
	var depthBuffer = new DepthBuffer();
	var stencilBuffer = new StencilBuffer();

	var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
	var newAttributes = new Uint8Array( maxVertexAttributes );
	var enabledAttributes = new Uint8Array( maxVertexAttributes );
	var attributeDivisors = new Uint8Array( maxVertexAttributes );

	var capabilities = {};

	var compressedTextureFormats = null;

	var currentProgram = null;

	var currentBlending = null;
	var currentBlendEquation = null;
	var currentBlendSrc = null;
	var currentBlendDst = null;
	var currentBlendEquationAlpha = null;
	var currentBlendSrcAlpha = null;
	var currentBlendDstAlpha = null;
	var currentPremultipledAlpha = false;

	var currentFlipSided = null;
	var currentCullFace = null;

	var currentLineWidth = null;

	var currentPolygonOffsetFactor = null;
	var currentPolygonOffsetUnits = null;

	var maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );

	var version = parseFloat( /^WebGL\ ([0-9])/.exec( gl.getParameter( gl.VERSION ) )[ 1 ] );
	var lineWidthAvailable = parseFloat( version ) >= 1.0;

	var currentTextureSlot = null;
	var currentBoundTextures = {};

	var currentScissor = new Vector4();
	var currentViewport = new Vector4();

	function createTexture( type, target, count ) {

		var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
		var texture = gl.createTexture();

		gl.bindTexture( type, texture );
		gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
		gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

		for ( var i = 0; i < count; i ++ ) {

			gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

		}

		return texture;

	}

	var emptyTextures = {};
	emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
	emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

	// init

	colorBuffer.setClear( 0, 0, 0, 1 );
	depthBuffer.setClear( 1 );
	stencilBuffer.setClear( 0 );

	enable( gl.DEPTH_TEST );
	depthBuffer.setFunc( LessEqualDepth );

	setFlipSided( false );
	setCullFace( CullFaceBack );
	enable( gl.CULL_FACE );

	enable( gl.BLEND );
	setBlending( NormalBlending );

	//

	function initAttributes() {

		for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

			newAttributes[ i ] = 0;

		}

	}

	function enableAttribute( attribute ) {

		newAttributes[ attribute ] = 1;

		if ( enabledAttributes[ attribute ] === 0 ) {

			gl.enableVertexAttribArray( attribute );
			enabledAttributes[ attribute ] = 1;

		}

		if ( attributeDivisors[ attribute ] !== 0 ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			extension.vertexAttribDivisorANGLE( attribute, 0 );
			attributeDivisors[ attribute ] = 0;

		}

	}

	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

		newAttributes[ attribute ] = 1;

		if ( enabledAttributes[ attribute ] === 0 ) {

			gl.enableVertexAttribArray( attribute );
			enabledAttributes[ attribute ] = 1;

		}

		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
			attributeDivisors[ attribute ] = meshPerAttribute;

		}

	}

	function disableUnusedAttributes() {

		for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

				gl.disableVertexAttribArray( i );
				enabledAttributes[ i ] = 0;

			}

		}

	}

	function enable( id ) {

		if ( capabilities[ id ] !== true ) {

			gl.enable( id );
			capabilities[ id ] = true;

		}

	}

	function disable( id ) {

		if ( capabilities[ id ] !== false ) {

			gl.disable( id );
			capabilities[ id ] = false;

		}

	}

	function getCompressedTextureFormats() {

		if ( compressedTextureFormats === null ) {

			compressedTextureFormats = [];

			if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
			     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
			     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {

				var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

				for ( var i = 0; i < formats.length; i ++ ) {

					compressedTextureFormats.push( formats[ i ] );

				}

			}

		}

		return compressedTextureFormats;

	}

	function useProgram( program ) {

		if ( currentProgram !== program ) {

			gl.useProgram( program );

			currentProgram = program;

			return true;

		}

		return false;

	}

	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

		if ( blending !== NoBlending ) {

			enable( gl.BLEND );

		} else {

			disable( gl.BLEND );

		}

		if ( blending !== CustomBlending ) {

			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

				switch ( blending ) {

					case AdditiveBlending:

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

						}
						break;

					case SubtractiveBlending:

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

						}
						break;

					case MultiplyBlending:

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

						}
						break;

					default:

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

						} else {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

						}

				}

			}

			currentBlendEquation = null;
			currentBlendSrc = null;
			currentBlendDst = null;
			currentBlendEquationAlpha = null;
			currentBlendSrcAlpha = null;
			currentBlendDstAlpha = null;

		} else {

			blendEquationAlpha = blendEquationAlpha || blendEquation;
			blendSrcAlpha = blendSrcAlpha || blendSrc;
			blendDstAlpha = blendDstAlpha || blendDst;

			if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

				gl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );

				currentBlendEquation = blendEquation;
				currentBlendEquationAlpha = blendEquationAlpha;

			}

			if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

				gl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );

				currentBlendSrc = blendSrc;
				currentBlendDst = blendDst;
				currentBlendSrcAlpha = blendSrcAlpha;
				currentBlendDstAlpha = blendDstAlpha;

			}

		}

		currentBlending = blending;
		currentPremultipledAlpha = premultipliedAlpha;

	}

	function setMaterial( material, frontFaceCW ) {

		material.side === DoubleSide
			? disable( gl.CULL_FACE )
			: enable( gl.CULL_FACE );

		var flipSided = ( material.side === BackSide );
		if ( frontFaceCW ) flipSided = ! flipSided;

		setFlipSided( flipSided );

		material.transparent === true
			? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )
			: setBlending( NoBlending );

		depthBuffer.setFunc( material.depthFunc );
		depthBuffer.setTest( material.depthTest );
		depthBuffer.setMask( material.depthWrite );
		colorBuffer.setMask( material.colorWrite );

		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

	}

	//

	function setFlipSided( flipSided ) {

		if ( currentFlipSided !== flipSided ) {

			if ( flipSided ) {

				gl.frontFace( gl.CW );

			} else {

				gl.frontFace( gl.CCW );

			}

			currentFlipSided = flipSided;

		}

	}

	function setCullFace( cullFace ) {

		if ( cullFace !== CullFaceNone ) {

			enable( gl.CULL_FACE );

			if ( cullFace !== currentCullFace ) {

				if ( cullFace === CullFaceBack ) {

					gl.cullFace( gl.BACK );

				} else if ( cullFace === CullFaceFront ) {

					gl.cullFace( gl.FRONT );

				} else {

					gl.cullFace( gl.FRONT_AND_BACK );

				}

			}

		} else {

			disable( gl.CULL_FACE );

		}

		currentCullFace = cullFace;

	}

	function setLineWidth( width ) {

		if ( width !== currentLineWidth ) {

			if ( lineWidthAvailable ) gl.lineWidth( width );

			currentLineWidth = width;

		}

	}

	function setPolygonOffset( polygonOffset, factor, units ) {

		if ( polygonOffset ) {

			enable( gl.POLYGON_OFFSET_FILL );

			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

				gl.polygonOffset( factor, units );

				currentPolygonOffsetFactor = factor;
				currentPolygonOffsetUnits = units;

			}

		} else {

			disable( gl.POLYGON_OFFSET_FILL );

		}

	}

	function setScissorTest( scissorTest ) {

		if ( scissorTest ) {

			enable( gl.SCISSOR_TEST );

		} else {

			disable( gl.SCISSOR_TEST );

		}

	}

	// texture

	function activeTexture( webglSlot ) {

		if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

		if ( currentTextureSlot !== webglSlot ) {

			gl.activeTexture( webglSlot );
			currentTextureSlot = webglSlot;

		}

	}

	function bindTexture( webglType, webglTexture ) {

		if ( currentTextureSlot === null ) {

			activeTexture();

		}

		var boundTexture = currentBoundTextures[ currentTextureSlot ];

		if ( boundTexture === undefined ) {

			boundTexture = { type: undefined, texture: undefined };
			currentBoundTextures[ currentTextureSlot ] = boundTexture;

		}

		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

			boundTexture.type = webglType;
			boundTexture.texture = webglTexture;

		}

	}

	function compressedTexImage2D() {

		try {

			gl.compressedTexImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function texImage2D() {

		try {

			gl.texImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	//

	function scissor( scissor ) {

		if ( currentScissor.equals( scissor ) === false ) {

			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
			currentScissor.copy( scissor );

		}

	}

	function viewport( viewport ) {

		if ( currentViewport.equals( viewport ) === false ) {

			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
			currentViewport.copy( viewport );

		}

	}

	//

	function reset() {

		for ( var i = 0; i < enabledAttributes.length; i ++ ) {

			if ( enabledAttributes[ i ] === 1 ) {

				gl.disableVertexAttribArray( i );
				enabledAttributes[ i ] = 0;

			}

		}

		capabilities = {};

		compressedTextureFormats = null;

		currentTextureSlot = null;
		currentBoundTextures = {};

		currentProgram = null;

		currentBlending = null;

		currentFlipSided = null;
		currentCullFace = null;

		colorBuffer.reset();
		depthBuffer.reset();
		stencilBuffer.reset();

	}

	return {

		buffers: {
			color: colorBuffer,
			depth: depthBuffer,
			stencil: stencilBuffer
		},

		initAttributes: initAttributes,
		enableAttribute: enableAttribute,
		enableAttributeAndDivisor: enableAttributeAndDivisor,
		disableUnusedAttributes: disableUnusedAttributes,
		enable: enable,
		disable: disable,
		getCompressedTextureFormats: getCompressedTextureFormats,

		useProgram: useProgram,

		setBlending: setBlending,
		setMaterial: setMaterial,

		setFlipSided: setFlipSided,
		setCullFace: setCullFace,

		setLineWidth: setLineWidth,
		setPolygonOffset: setPolygonOffset,

		setScissorTest: setScissorTest,

		activeTexture: activeTexture,
		bindTexture: bindTexture,
		compressedTexImage2D: compressedTexImage2D,
		texImage2D: texImage2D,

		scissor: scissor,
		viewport: viewport,

		reset: reset

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLCapabilities( gl, extensions, parameters ) {

	var maxAnisotropy;

	function getMaxAnisotropy() {

		if ( maxAnisotropy !== undefined ) return maxAnisotropy;

		var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

		if ( extension !== null ) {

			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

		} else {

			maxAnisotropy = 0;

		}

		return maxAnisotropy;

	}

	function getMaxPrecision( precision ) {

		if ( precision === 'highp' ) {

			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
			     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

				return 'highp';

			}

			precision = 'mediump';

		}

		if ( precision === 'mediump' ) {

			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
			     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

				return 'mediump';

			}

		}

		return 'lowp';

	}

	var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
	var maxPrecision = getMaxPrecision( precision );

	if ( maxPrecision !== precision ) {

		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
		precision = maxPrecision;

	}

	var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

	var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
	var maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
	var maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
	var maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

	var maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
	var maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
	var maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
	var maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

	var vertexTextures = maxVertexTextures > 0;
	var floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
	var floatVertexTextures = vertexTextures && floatFragmentTextures;

	return {

		getMaxAnisotropy: getMaxAnisotropy,
		getMaxPrecision: getMaxPrecision,

		precision: precision,
		logarithmicDepthBuffer: logarithmicDepthBuffer,

		maxTextures: maxTextures,
		maxVertexTextures: maxVertexTextures,
		maxTextureSize: maxTextureSize,
		maxCubemapSize: maxCubemapSize,

		maxAttributes: maxAttributes,
		maxVertexUniforms: maxVertexUniforms,
		maxVaryings: maxVaryings,
		maxFragmentUniforms: maxFragmentUniforms,

		vertexTextures: vertexTextures,
		floatFragmentTextures: floatFragmentTextures,
		floatVertexTextures: floatVertexTextures

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author greggman / http://games.greggman.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author tschw
 */

function PerspectiveCamera( fov, aspect, near, far ) {

	Camera.call( this );

	this.type = 'PerspectiveCamera';

	this.fov = fov !== undefined ? fov : 50;
	this.zoom = 1;

	this.near = near !== undefined ? near : 0.1;
	this.far = far !== undefined ? far : 2000;
	this.focus = 10;

	this.aspect = aspect !== undefined ? aspect : 1;
	this.view = null;

	this.filmGauge = 35;	// width of the film (default in millimeters)
	this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

	this.updateProjectionMatrix();

}

PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

	constructor: PerspectiveCamera,

	isPerspectiveCamera: true,

	copy: function ( source, recursive ) {

		Camera.prototype.copy.call( this, source, recursive );

		this.fov = source.fov;
		this.zoom = source.zoom;

		this.near = source.near;
		this.far = source.far;
		this.focus = source.focus;

		this.aspect = source.aspect;
		this.view = source.view === null ? null : Object.assign( {}, source.view );

		this.filmGauge = source.filmGauge;
		this.filmOffset = source.filmOffset;

		return this;

	},

	/**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */
	setFocalLength: function ( focalLength ) {

		// see http://www.bobatkins.com/photography/technical/field_of_view.html
		var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

		this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
		this.updateProjectionMatrix();

	},

	/**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */
	getFocalLength: function () {

		var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );

		return 0.5 * this.getFilmHeight() / vExtentSlope;

	},

	getEffectiveFOV: function () {

		return _Math.RAD2DEG * 2 * Math.atan(
			Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

	},

	getFilmWidth: function () {

		// film not completely covered in portrait format (aspect < 1)
		return this.filmGauge * Math.min( this.aspect, 1 );

	},

	getFilmHeight: function () {

		// film not completely covered in landscape format (aspect > 1)
		return this.filmGauge / Math.max( this.aspect, 1 );

	},

	/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   var w = 1920;
	 *   var h = 1080;
	 *   var fullWidth = w * 3;
	 *   var fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */
	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

		this.aspect = fullWidth / fullHeight;

		if ( this.view === null ) {

			this.view = {
				enabled: true,
				fullWidth: 1,
				fullHeight: 1,
				offsetX: 0,
				offsetY: 0,
				width: 1,
				height: 1
			};

		}

		this.view.enabled = true;
		this.view.fullWidth = fullWidth;
		this.view.fullHeight = fullHeight;
		this.view.offsetX = x;
		this.view.offsetY = y;
		this.view.width = width;
		this.view.height = height;

		this.updateProjectionMatrix();

	},

	clearViewOffset: function () {

		if ( this.view !== null ) {

			this.view.enabled = false;

		}

		this.updateProjectionMatrix();

	},

	updateProjectionMatrix: function () {

		var near = this.near,
			top = near * Math.tan(
				_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
			height = 2 * top,
			width = this.aspect * height,
			left = - 0.5 * width,
			view = this.view;

		if ( this.view !== null && this.view.enabled ) {

			var fullWidth = view.fullWidth,
				fullHeight = view.fullHeight;

			left += view.offsetX * width / fullWidth;
			top -= view.offsetY * height / fullHeight;
			width *= view.width / fullWidth;
			height *= view.height / fullHeight;

		}

		var skew = this.filmOffset;
		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.fov = this.fov;
		data.object.zoom = this.zoom;

		data.object.near = this.near;
		data.object.far = this.far;
		data.object.focus = this.focus;

		data.object.aspect = this.aspect;

		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

		data.object.filmGauge = this.filmGauge;
		data.object.filmOffset = this.filmOffset;

		return data;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function ArrayCamera( array ) {

	PerspectiveCamera.call( this );

	this.cameras = array || [];

}

ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {

	constructor: ArrayCamera,

	isArrayCamera: true

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebVRManager( renderer ) {

	var scope = this;

	var device = null;
	var frameData = null;

	var poseTarget = null;

	if ( typeof window !== 'undefined' && 'VRFrameData' in window ) {

		frameData = new window.VRFrameData();

	}

	var matrixWorldInverse = new Matrix4();

	var cameraL = new PerspectiveCamera();
	cameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );
	cameraL.layers.enable( 1 );

	var cameraR = new PerspectiveCamera();
	cameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );
	cameraR.layers.enable( 2 );

	var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
	cameraVR.layers.enable( 1 );
	cameraVR.layers.enable( 2 );

	//

	var currentSize, currentPixelRatio;

	function onVRDisplayPresentChange() {

		if ( device !== null && device.isPresenting ) {

			var eyeParameters = device.getEyeParameters( 'left' );
			var renderWidth = eyeParameters.renderWidth;
			var renderHeight = eyeParameters.renderHeight;

			currentPixelRatio = renderer.getPixelRatio();
			currentSize = renderer.getSize();

			renderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );

		} else if ( scope.enabled ) {

			renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );

		}

	}

	if ( typeof window !== 'undefined' ) {

		window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );

	}

	//

	this.enabled = false;

	this.getDevice = function () {

		return device;

	};

	this.setDevice = function ( value ) {

		if ( value !== undefined ) device = value;

	};

	this.setPoseTarget = function ( object ) {

		if ( object !== undefined ) poseTarget = object;

	};

	this.getCamera = function ( camera ) {

		if ( device === null ) return camera;

		device.depthNear = camera.near;
		device.depthFar = camera.far;

		device.getFrameData( frameData );

		//

		var pose = frameData.pose;
		var poseObject = poseTarget !== null ? poseTarget : camera;

		if ( pose.position !== null ) {

			poseObject.position.fromArray( pose.position );

		} else {

			poseObject.position.set( 0, 0, 0 );

		}

		if ( pose.orientation !== null ) {

			poseObject.quaternion.fromArray( pose.orientation );

		}

		poseObject.updateMatrixWorld();

		if ( device.isPresenting === false ) return camera;

		//

		cameraL.near = camera.near;
		cameraR.near = camera.near;

		cameraL.far = camera.far;
		cameraR.far = camera.far;

		cameraVR.matrixWorld.copy( camera.matrixWorld );
		cameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );

		cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
		cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );

		var parent = poseObject.parent;

		if ( parent !== null ) {

			matrixWorldInverse.getInverse( parent.matrixWorld );

			cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
			cameraR.matrixWorldInverse.multiply( matrixWorldInverse );

		}

		// envMap and Mirror needs camera.matrixWorld

		cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
		cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );

		cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
		cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );

		// HACK @mrdoob
		// https://github.com/w3c/webvr/issues/203

		cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );

		//

		var layers = device.getLayers();

		if ( layers.length ) {

			var layer = layers[ 0 ];

			if ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {

				cameraL.bounds.fromArray( layer.leftBounds );

			}

			if ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {

				cameraR.bounds.fromArray( layer.rightBounds );

			}

		}

		return cameraVR;

	};

	this.submitFrame = function () {

		if ( device && device.isPresenting ) device.submitFrame();

	};

	this.dispose = function () {

		if ( typeof window !== 'undefined' ) {

			window.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );

		}

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLExtensions( gl ) {

	var extensions = {};

	return {

		get: function ( name ) {

			if ( extensions[ name ] !== undefined ) {

				return extensions[ name ];

			}

			var extension;

			switch ( name ) {

				case 'WEBGL_depth_texture':
					extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
					break;

				case 'EXT_texture_filter_anisotropic':
					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
					break;

				case 'WEBGL_compressed_texture_s3tc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
					break;

				case 'WEBGL_compressed_texture_pvrtc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
					break;

				case 'WEBGL_compressed_texture_etc1':
					extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
					break;

				default:
					extension = gl.getExtension( name );

			}

			if ( extension === null ) {

				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

			}

			extensions[ name ] = extension;

			return extension;

		}

	};

}

/**
 * @author tschw
 */

function WebGLClipping() {

	var scope = this,

		globalState = null,
		numGlobalPlanes = 0,
		localClippingEnabled = false,
		renderingShadows = false,

		plane = new Plane(),
		viewNormalMatrix = new Matrix3(),

		uniform = { value: null, needsUpdate: false };

	this.uniform = uniform;
	this.numPlanes = 0;
	this.numIntersection = 0;

	this.init = function ( planes, enableLocalClipping, camera ) {

		var enabled =
			planes.length !== 0 ||
			enableLocalClipping ||
			// enable state of previous frame - the clipping code has to
			// run another frame in order to reset the state:
			numGlobalPlanes !== 0 ||
			localClippingEnabled;

		localClippingEnabled = enableLocalClipping;

		globalState = projectPlanes( planes, camera, 0 );
		numGlobalPlanes = planes.length;

		return enabled;

	};

	this.beginShadows = function () {

		renderingShadows = true;
		projectPlanes( null );

	};

	this.endShadows = function () {

		renderingShadows = false;
		resetGlobalState();

	};

	this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

			// there's no local clipping

			if ( renderingShadows ) {

				// there's no global clipping

				projectPlanes( null );

			} else {

				resetGlobalState();

			}

		} else {

			var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
				lGlobal = nGlobal * 4,

				dstArray = cache.clippingState || null;

			uniform.value = dstArray; // ensure unique state

			dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

			for ( var i = 0; i !== lGlobal; ++ i ) {

				dstArray[ i ] = globalState[ i ];

			}

			cache.clippingState = dstArray;
			this.numIntersection = clipIntersection ? this.numPlanes : 0;
			this.numPlanes += nGlobal;

		}


	};

	function resetGlobalState() {

		if ( uniform.value !== globalState ) {

			uniform.value = globalState;
			uniform.needsUpdate = numGlobalPlanes > 0;

		}

		scope.numPlanes = numGlobalPlanes;
		scope.numIntersection = 0;

	}

	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

		var nPlanes = planes !== null ? planes.length : 0,
			dstArray = null;

		if ( nPlanes !== 0 ) {

			dstArray = uniform.value;

			if ( skipTransform !== true || dstArray === null ) {

				var flatSize = dstOffset + nPlanes * 4,
					viewMatrix = camera.matrixWorldInverse;

				viewNormalMatrix.getNormalMatrix( viewMatrix );

				if ( dstArray === null || dstArray.length < flatSize ) {

					dstArray = new Float32Array( flatSize );

				}

				for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

					plane.normal.toArray( dstArray, i4 );
					dstArray[ i4 + 3 ] = plane.constant;

				}

			}

			uniform.value = dstArray;
			uniform.needsUpdate = true;

		}

		scope.numPlanes = nPlanes;

		return dstArray;

	}

}

/**
 * @author thespite / http://www.twitter.com/thespite
 */

function WebGLUtils( gl, extensions ) {

	function convert( p ) {

		var extension;

		if ( p === RepeatWrapping ) return gl.REPEAT;
		if ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;
		if ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;

		if ( p === NearestFilter ) return gl.NEAREST;
		if ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;
		if ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;

		if ( p === LinearFilter ) return gl.LINEAR;
		if ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;
		if ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;

		if ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;
		if ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;
		if ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;
		if ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;

		if ( p === ByteType ) return gl.BYTE;
		if ( p === ShortType ) return gl.SHORT;
		if ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;
		if ( p === IntType ) return gl.INT;
		if ( p === UnsignedIntType ) return gl.UNSIGNED_INT;
		if ( p === FloatType ) return gl.FLOAT;

		if ( p === HalfFloatType ) {

			extension = extensions.get( 'OES_texture_half_float' );

			if ( extension !== null ) return extension.HALF_FLOAT_OES;

		}

		if ( p === AlphaFormat ) return gl.ALPHA;
		if ( p === RGBFormat ) return gl.RGB;
		if ( p === RGBAFormat ) return gl.RGBA;
		if ( p === LuminanceFormat ) return gl.LUMINANCE;
		if ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;
		if ( p === DepthFormat ) return gl.DEPTH_COMPONENT;
		if ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;

		if ( p === AddEquation ) return gl.FUNC_ADD;
		if ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;
		if ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;

		if ( p === ZeroFactor ) return gl.ZERO;
		if ( p === OneFactor ) return gl.ONE;
		if ( p === SrcColorFactor ) return gl.SRC_COLOR;
		if ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;
		if ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;
		if ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;
		if ( p === DstAlphaFactor ) return gl.DST_ALPHA;
		if ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;

		if ( p === DstColorFactor ) return gl.DST_COLOR;
		if ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;
		if ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;

		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
			p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

			if ( extension !== null ) {

				if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
				if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
				if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
				if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

			}

		}

		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
			p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

			if ( extension !== null ) {

				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

			}

		}

		if ( p === RGB_ETC1_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

			if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

		}

		if ( p === MinEquation || p === MaxEquation ) {

			extension = extensions.get( 'EXT_blend_minmax' );

			if ( extension !== null ) {

				if ( p === MinEquation ) return extension.MIN_EXT;
				if ( p === MaxEquation ) return extension.MAX_EXT;

			}

		}

		if ( p === UnsignedInt248Type ) {

			extension = extensions.get( 'WEBGL_depth_texture' );

			if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;

		}

		return 0;

	}

	return { convert: convert };

}

/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 * @author tschw
 */

function WebGLRenderer( parameters ) {

	console.log( 'THREE.WebGLRenderer', REVISION );

	parameters = parameters || {};

	var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
		_context = parameters.context !== undefined ? parameters.context : null,

		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
		_depth = parameters.depth !== undefined ? parameters.depth : true,
		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
		_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';

	var lightsArray = [];
	var shadowsArray = [];

	var currentRenderList = null;

	var spritesArray = [];
	var flaresArray = [];

	// public properties

	this.domElement = _canvas;
	this.context = null;

	// clearing

	this.autoClear = true;
	this.autoClearColor = true;
	this.autoClearDepth = true;
	this.autoClearStencil = true;

	// scene graph

	this.sortObjects = true;

	// user-defined clipping

	this.clippingPlanes = [];
	this.localClippingEnabled = false;

	// physically based shading

	this.gammaFactor = 2.0;	// for backwards compatibility
	this.gammaInput = false;
	this.gammaOutput = false;

	// physical lights

	this.physicallyCorrectLights = false;

	// tone mapping

	this.toneMapping = LinearToneMapping;
	this.toneMappingExposure = 1.0;
	this.toneMappingWhitePoint = 1.0;

	// morphs

	this.maxMorphTargets = 8;
	this.maxMorphNormals = 4;

	// internal properties

	var _this = this,

		_isContextLost = false,

		// internal state cache

		_currentRenderTarget = null,
		_currentFramebuffer = null,
		_currentMaterialId = - 1,
		_currentGeometryProgram = '',

		_currentCamera = null,
		_currentArrayCamera = null,

		_currentViewport = new Vector4(),
		_currentScissor = new Vector4(),
		_currentScissorTest = null,

		//

		_usedTextureUnits = 0,

		//

		_width = _canvas.width,
		_height = _canvas.height,

		_pixelRatio = 1,

		_viewport = new Vector4( 0, 0, _width, _height ),
		_scissor = new Vector4( 0, 0, _width, _height ),
		_scissorTest = false,

		// frustum

		_frustum = new Frustum(),

		// clipping

		_clipping = new WebGLClipping(),
		_clippingEnabled = false,
		_localClippingEnabled = false,

		// camera matrices cache

		_projScreenMatrix = new Matrix4(),

		_vector3 = new Vector3(),

		// info

		_infoMemory = {
			geometries: 0,
			textures: 0
		},

		_infoRender = {

			frame: 0,
			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0

		};

	this.info = {

		render: _infoRender,
		memory: _infoMemory,
		programs: null

	};

	function getTargetPixelRatio() {

		return _currentRenderTarget === null ? _pixelRatio : 1;

	}

	// initialize

	var _gl;

	try {

		var contextAttributes = {
			alpha: _alpha,
			depth: _depth,
			stencil: _stencil,
			antialias: _antialias,
			premultipliedAlpha: _premultipliedAlpha,
			preserveDrawingBuffer: _preserveDrawingBuffer,
			powerPreference: _powerPreference
		};

		// event listeners must be registered before WebGL context is created, see #12753

		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
		_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );

		_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );

		if ( _gl === null ) {

			if ( _canvas.getContext( 'webgl' ) !== null ) {

				throw new Error( 'Error creating WebGL context with your selected attributes.' );

			} else {

				throw new Error( 'Error creating WebGL context.' );

			}

		}

		// Some experimental-webgl implementations do not have getShaderPrecisionFormat

		if ( _gl.getShaderPrecisionFormat === undefined ) {

			_gl.getShaderPrecisionFormat = function () {

				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

			};

		}

	} catch ( error ) {

		console.error( 'THREE.WebGLRenderer: ' + error.message );

	}

	var extensions, capabilities, state;
	var properties, textures, attributes, geometries, objects, lights;
	var programCache, renderLists;

	var background, morphtargets, bufferRenderer, indexedBufferRenderer;
	var flareRenderer, spriteRenderer;

	var utils;

	function initGLContext() {

		extensions = new WebGLExtensions( _gl );
		extensions.get( 'WEBGL_depth_texture' );
		extensions.get( 'OES_texture_float' );
		extensions.get( 'OES_texture_float_linear' );
		extensions.get( 'OES_texture_half_float' );
		extensions.get( 'OES_texture_half_float_linear' );
		extensions.get( 'OES_standard_derivatives' );
		extensions.get( 'OES_element_index_uint' );
		extensions.get( 'ANGLE_instanced_arrays' );

		utils = new WebGLUtils( _gl, extensions );

		capabilities = new WebGLCapabilities( _gl, extensions, parameters );

		state = new WebGLState( _gl, extensions, utils );
		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

		properties = new WebGLProperties();
		textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, _infoMemory );
		attributes = new WebGLAttributes( _gl );
		geometries = new WebGLGeometries( _gl, attributes, _infoMemory );
		objects = new WebGLObjects( geometries, _infoRender );
		morphtargets = new WebGLMorphtargets( _gl );
		programCache = new WebGLPrograms( _this, extensions, capabilities );
		lights = new WebGLLights();
		renderLists = new WebGLRenderLists();

		background = new WebGLBackground( _this, state, geometries, _premultipliedAlpha );

		bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );
		indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

		flareRenderer = new WebGLFlareRenderer( _this, _gl, state, textures, capabilities );
		spriteRenderer = new WebGLSpriteRenderer( _this, _gl, state, textures, capabilities );

		_this.info.programs = programCache.programs;

		_this.context = _gl;
		_this.capabilities = capabilities;
		_this.extensions = extensions;
		_this.properties = properties;
		_this.renderLists = renderLists;
		_this.state = state;

	}

	initGLContext();

	// vr

	var vr = new WebVRManager( _this );

	this.vr = vr;

	// shadow map

	var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );

	this.shadowMap = shadowMap;

	// API

	this.getContext = function () {

		return _gl;

	};

	this.getContextAttributes = function () {

		return _gl.getContextAttributes();

	};

	this.forceContextLoss = function () {

		var extension = extensions.get( 'WEBGL_lose_context' );
		if ( extension ) extension.loseContext();

	};

	this.forceContextRestore = function () {

		var extension = extensions.get( 'WEBGL_lose_context' );
		if ( extension ) extension.restoreContext();

	};

	this.getPixelRatio = function () {

		return _pixelRatio;

	};

	this.setPixelRatio = function ( value ) {

		if ( value === undefined ) return;

		_pixelRatio = value;

		this.setSize( _width, _height, false );

	};

	this.getSize = function () {

		return {
			width: _width,
			height: _height
		};

	};

	this.setSize = function ( width, height, updateStyle ) {

		var device = vr.getDevice();

		if ( device && device.isPresenting ) {

			console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
			return;

		}

		_width = width;
		_height = height;

		_canvas.width = width * _pixelRatio;
		_canvas.height = height * _pixelRatio;

		if ( updateStyle !== false ) {

			_canvas.style.width = width + 'px';
			_canvas.style.height = height + 'px';

		}

		this.setViewport( 0, 0, width, height );

	};

	this.getDrawingBufferSize = function () {

		return {
			width: _width * _pixelRatio,
			height: _height * _pixelRatio
		};

	};

	this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

		_width = width;
		_height = height;

		_pixelRatio = pixelRatio;

		_canvas.width = width * pixelRatio;
		_canvas.height = height * pixelRatio;

		this.setViewport( 0, 0, width, height );

	};

	this.setViewport = function ( x, y, width, height ) {

		_viewport.set( x, _height - y - height, width, height );
		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

	};

	this.setScissor = function ( x, y, width, height ) {

		_scissor.set( x, _height - y - height, width, height );
		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );

	};

	this.setScissorTest = function ( boolean ) {

		state.setScissorTest( _scissorTest = boolean );

	};

	// Clearing

	this.getClearColor = function () {

		return background.getClearColor();

	};

	this.setClearColor = function () {

		background.setClearColor.apply( background, arguments );

	};

	this.getClearAlpha = function () {

		return background.getClearAlpha();

	};

	this.setClearAlpha = function () {

		background.setClearAlpha.apply( background, arguments );

	};

	this.clear = function ( color, depth, stencil ) {

		var bits = 0;

		if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
		if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
		if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

		_gl.clear( bits );

	};

	this.clearColor = function () {

		this.clear( true, false, false );

	};

	this.clearDepth = function () {

		this.clear( false, true, false );

	};

	this.clearStencil = function () {

		this.clear( false, false, true );

	};

	this.clearTarget = function ( renderTarget, color, depth, stencil ) {

		this.setRenderTarget( renderTarget );
		this.clear( color, depth, stencil );

	};

	//

	this.dispose = function () {

		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
		_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );

		renderLists.dispose();

		vr.dispose();

	};

	// Events

	function onContextLost( event ) {

		event.preventDefault();

		console.log( 'THREE.WebGLRenderer: Context Lost.' );

		_isContextLost = true;

	}

	function onContextRestore( /* event */ ) {

		console.log( 'THREE.WebGLRenderer: Context Restored.' );

		_isContextLost = false;

		initGLContext();

	}

	function onMaterialDispose( event ) {

		var material = event.target;

		material.removeEventListener( 'dispose', onMaterialDispose );

		deallocateMaterial( material );

	}

	// Buffer deallocation

	function deallocateMaterial( material ) {

		releaseMaterialProgramReference( material );

		properties.remove( material );

	}


	function releaseMaterialProgramReference( material ) {

		var programInfo = properties.get( material ).program;

		material.program = undefined;

		if ( programInfo !== undefined ) {

			programCache.releaseProgram( programInfo );

		}

	}

	// Buffer rendering

	function renderObjectImmediate( object, program, material ) {

		object.render( function ( object ) {

			_this.renderBufferImmediate( object, program, material );

		} );

	}

	this.renderBufferImmediate = function ( object, program, material ) {

		state.initAttributes();

		var buffers = properties.get( object );

		if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
		if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
		if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
		if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

		var programAttributes = program.getAttributes();

		if ( object.hasPositions ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.position );
			_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasNormals ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

			if ( ! material.isMeshPhongMaterial &&
				! material.isMeshStandardMaterial &&
				! material.isMeshNormalMaterial &&
				material.flatShading === true ) {

				for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

					var array = object.normalArray;

					var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
					var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
					var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

					array[ i + 0 ] = nx;
					array[ i + 1 ] = ny;
					array[ i + 2 ] = nz;

					array[ i + 3 ] = nx;
					array[ i + 4 ] = ny;
					array[ i + 5 ] = nz;

					array[ i + 6 ] = nx;
					array[ i + 7 ] = ny;
					array[ i + 8 ] = nz;

				}

			}

			_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.normal );

			_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasUvs && material.map ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.uv );

			_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasColors && material.vertexColors !== NoColors ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.color );

			_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );

		}

		state.disableUnusedAttributes();

		_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

		object.count = 0;

	};

	this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

		var frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

		state.setMaterial( material, frontFaceCW );

		var program = setProgram( camera, fog, material, object );
		var geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );

		var updateBuffers = false;

		if ( geometryProgram !== _currentGeometryProgram ) {

			_currentGeometryProgram = geometryProgram;
			updateBuffers = true;

		}

		if ( object.morphTargetInfluences ) {

			morphtargets.update( object, geometry, material, program );

			updateBuffers = true;

		}

		//

		var index = geometry.index;
		var position = geometry.attributes.position;
		var rangeFactor = 1;

		if ( material.wireframe === true ) {

			index = geometries.getWireframeAttribute( geometry );
			rangeFactor = 2;

		}

		var attribute;
		var renderer = bufferRenderer;

		if ( index !== null ) {

			attribute = attributes.get( index );

			renderer = indexedBufferRenderer;
			renderer.setIndex( attribute );

		}

		if ( updateBuffers ) {

			setupVertexAttributes( material, program, geometry );

			if ( index !== null ) {

				_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );

			}

		}

		//

		var dataCount = 0;

		if ( index !== null ) {

			dataCount = index.count;

		} else if ( position !== undefined ) {

			dataCount = position.count;

		}

		var rangeStart = geometry.drawRange.start * rangeFactor;
		var rangeCount = geometry.drawRange.count * rangeFactor;

		var groupStart = group !== null ? group.start * rangeFactor : 0;
		var groupCount = group !== null ? group.count * rangeFactor : Infinity;

		var drawStart = Math.max( rangeStart, groupStart );
		var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

		var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

		if ( drawCount === 0 ) return;

		//

		if ( object.isMesh ) {

			if ( material.wireframe === true ) {

				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
				renderer.setMode( _gl.LINES );

			} else {

				switch ( object.drawMode ) {

					case TrianglesDrawMode:
						renderer.setMode( _gl.TRIANGLES );
						break;

					case TriangleStripDrawMode:
						renderer.setMode( _gl.TRIANGLE_STRIP );
						break;

					case TriangleFanDrawMode:
						renderer.setMode( _gl.TRIANGLE_FAN );
						break;

				}

			}


		} else if ( object.isLine ) {

			var lineWidth = material.linewidth;

			if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

			state.setLineWidth( lineWidth * getTargetPixelRatio() );

			if ( object.isLineSegments ) {

				renderer.setMode( _gl.LINES );

			} else if ( object.isLineLoop ) {

				renderer.setMode( _gl.LINE_LOOP );

			} else {

				renderer.setMode( _gl.LINE_STRIP );

			}

		} else if ( object.isPoints ) {

			renderer.setMode( _gl.POINTS );

		}

		if ( geometry && geometry.isInstancedBufferGeometry ) {

			if ( geometry.maxInstancedCount > 0 ) {

				renderer.renderInstances( geometry, drawStart, drawCount );

			}

		} else {

			renderer.render( drawStart, drawCount );

		}

	};

	function setupVertexAttributes( material, program, geometry, startIndex ) {

		if ( geometry && geometry.isInstancedBufferGeometry ) {

			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {

				console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

		}

		if ( startIndex === undefined ) startIndex = 0;

		state.initAttributes();

		var geometryAttributes = geometry.attributes;

		var programAttributes = program.getAttributes();

		var materialDefaultAttributeValues = material.defaultAttributeValues;

		for ( var name in programAttributes ) {

			var programAttribute = programAttributes[ name ];

			if ( programAttribute >= 0 ) {

				var geometryAttribute = geometryAttributes[ name ];

				if ( geometryAttribute !== undefined ) {

					var normalized = geometryAttribute.normalized;
					var size = geometryAttribute.itemSize;

					var attribute = attributes.get( geometryAttribute );

					// TODO Attribute may not be available on context restore

					if ( attribute === undefined ) continue;

					var buffer = attribute.buffer;
					var type = attribute.type;
					var bytesPerElement = attribute.bytesPerElement;

					if ( geometryAttribute.isInterleavedBufferAttribute ) {

						var data = geometryAttribute.data;
						var stride = data.stride;
						var offset = geometryAttribute.offset;

						if ( data && data.isInstancedInterleavedBuffer ) {

							state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );

							if ( geometry.maxInstancedCount === undefined ) {

								geometry.maxInstancedCount = data.meshPerAttribute * data.count;

							}

						} else {

							state.enableAttribute( programAttribute );

						}

						_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
						_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, ( startIndex * stride + offset ) * bytesPerElement );

					} else {

						if ( geometryAttribute.isInstancedBufferAttribute ) {

							state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );

							if ( geometry.maxInstancedCount === undefined ) {

								geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

							}

						} else {

							state.enableAttribute( programAttribute );

						}

						_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
						_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement );

					}

				} else if ( materialDefaultAttributeValues !== undefined ) {

					var value = materialDefaultAttributeValues[ name ];

					if ( value !== undefined ) {

						switch ( value.length ) {

							case 2:
								_gl.vertexAttrib2fv( programAttribute, value );
								break;

							case 3:
								_gl.vertexAttrib3fv( programAttribute, value );
								break;

							case 4:
								_gl.vertexAttrib4fv( programAttribute, value );
								break;

							default:
								_gl.vertexAttrib1fv( programAttribute, value );

						}

					}

				}

			}

		}

		state.disableUnusedAttributes();

	}

	// Compile

	this.compile = function ( scene, camera ) {

		lightsArray.length = 0;
		shadowsArray.length = 0;

		scene.traverse( function ( object ) {

			if ( object.isLight ) {

				lightsArray.push( object );

				if ( object.castShadow ) {

					shadowsArray.push( object );

				}

			}

		} );

		lights.setup( lightsArray, shadowsArray, camera );

		scene.traverse( function ( object ) {

			if ( object.material ) {

				if ( Array.isArray( object.material ) ) {

					for ( var i = 0; i < object.material.length; i ++ ) {

						initMaterial( object.material[ i ], scene.fog, object );

					}

				} else {

					initMaterial( object.material, scene.fog, object );

				}

			}

		} );

	};

	// Animation Loop

	var isAnimating = false;
	var onAnimationFrame = null;

	function start() {

		if ( isAnimating ) return;

		var device = vr.getDevice();

		if ( device && device.isPresenting ) {

			device.requestAnimationFrame( loop );

		} else {

			window.requestAnimationFrame( loop );

		}

		isAnimating = true;

	}

	function loop( time ) {

		if ( onAnimationFrame !== null ) onAnimationFrame( time );

		var device = vr.getDevice();

		if ( device && device.isPresenting ) {

			device.requestAnimationFrame( loop );

		} else {

			window.requestAnimationFrame( loop );

		}

	}

	this.animate = function ( callback ) {

		onAnimationFrame = callback;
		start();

	};

	// Rendering

	this.render = function ( scene, camera, renderTarget, forceClear ) {

		if ( ! ( camera && camera.isCamera ) ) {

			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
			return;

		}

		if ( _isContextLost ) return;

		// reset caching for this frame

		_currentGeometryProgram = '';
		_currentMaterialId = - 1;
		_currentCamera = null;

		// update scene graph

		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

		// update camera matrices and frustum

		if ( camera.parent === null ) camera.updateMatrixWorld();

		if ( vr.enabled ) {

			camera = vr.getCamera( camera );

		}

		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
		_frustum.setFromMatrix( _projScreenMatrix );

		lightsArray.length = 0;
		shadowsArray.length = 0;

		spritesArray.length = 0;
		flaresArray.length = 0;

		_localClippingEnabled = this.localClippingEnabled;
		_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

		currentRenderList = renderLists.get( scene, camera );
		currentRenderList.init();

		projectObject( scene, camera, _this.sortObjects );

		if ( _this.sortObjects === true ) {

			currentRenderList.sort();

		}

		//

		textures.updateVideoTextures();

		//

		if ( _clippingEnabled ) _clipping.beginShadows();

		shadowMap.render( shadowsArray, scene, camera );

		lights.setup( lightsArray, shadowsArray, camera );

		if ( _clippingEnabled ) _clipping.endShadows();

		//

		_infoRender.frame ++;
		_infoRender.calls = 0;
		_infoRender.vertices = 0;
		_infoRender.faces = 0;
		_infoRender.points = 0;

		if ( renderTarget === undefined ) {

			renderTarget = null;

		}

		this.setRenderTarget( renderTarget );

		//

		background.render( currentRenderList, scene, camera, forceClear );

		// render scene

		var opaqueObjects = currentRenderList.opaque;
		var transparentObjects = currentRenderList.transparent;

		if ( scene.overrideMaterial ) {

			var overrideMaterial = scene.overrideMaterial;

			if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );
			if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );

		} else {

			// opaque pass (front-to-back order)

			if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );

			// transparent pass (back-to-front order)

			if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );

		}

		// custom renderers

		spriteRenderer.render( spritesArray, scene, camera );
		flareRenderer.render( flaresArray, scene, camera, _currentViewport );

		// Generate mipmap if we're using any kind of mipmap filtering

		if ( renderTarget ) {

			textures.updateRenderTargetMipmap( renderTarget );

		}

		// Ensure depth buffer writing is enabled so it can be cleared on next render

		state.buffers.depth.setTest( true );
		state.buffers.depth.setMask( true );
		state.buffers.color.setMask( true );

		state.setPolygonOffset( false );

		if ( vr.enabled ) {

			vr.submitFrame();

		}

		// _gl.finish();

	};

	/*
	// TODO Duplicated code (Frustum)

	var _sphere = new Sphere();

	function isObjectViewable( object ) {

		var geometry = object.geometry;

		if ( geometry.boundingSphere === null )
			geometry.computeBoundingSphere();

		_sphere.copy( geometry.boundingSphere ).
		applyMatrix4( object.matrixWorld );

		return isSphereViewable( _sphere );

	}

	function isSpriteViewable( sprite ) {

		_sphere.center.set( 0, 0, 0 );
		_sphere.radius = 0.7071067811865476;
		_sphere.applyMatrix4( sprite.matrixWorld );

		return isSphereViewable( _sphere );

	}

	function isSphereViewable( sphere ) {

		if ( ! _frustum.intersectsSphere( sphere ) ) return false;

		var numPlanes = _clipping.numPlanes;

		if ( numPlanes === 0 ) return true;

		var planes = _this.clippingPlanes,

			center = sphere.center,
			negRad = - sphere.radius,
			i = 0;

		do {

			// out when deeper than radius in the negative halfspace
			if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

		} while ( ++ i !== numPlanes );

		return true;

	}
	*/

	function projectObject( object, camera, sortObjects ) {

		if ( object.visible === false ) return;

		var visible = object.layers.test( camera.layers );

		if ( visible ) {

			if ( object.isLight ) {

				lightsArray.push( object );

				if ( object.castShadow ) {

					shadowsArray.push( object );

				}

			} else if ( object.isSprite ) {

				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

					spritesArray.push( object );

				}

			} else if ( object.isLensFlare ) {

				flaresArray.push( object );

			} else if ( object.isImmediateRenderObject ) {

				if ( sortObjects ) {

					_vector3.setFromMatrixPosition( object.matrixWorld )
						.applyMatrix4( _projScreenMatrix );

				}

				currentRenderList.push( object, null, object.material, _vector3.z, null );

			} else if ( object.isMesh || object.isLine || object.isPoints ) {

				if ( object.isSkinnedMesh ) {

					object.skeleton.update();

				}

				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

					if ( sortObjects ) {

						_vector3.setFromMatrixPosition( object.matrixWorld )
							.applyMatrix4( _projScreenMatrix );

					}

					var geometry = objects.update( object );
					var material = object.material;

					if ( Array.isArray( material ) ) {

						var groups = geometry.groups;

						for ( var i = 0, l = groups.length; i < l; i ++ ) {

							var group = groups[ i ];
							var groupMaterial = material[ group.materialIndex ];

							if ( groupMaterial && groupMaterial.visible ) {

								currentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );

							}

						}

					} else if ( material.visible ) {

						currentRenderList.push( object, geometry, material, _vector3.z, null );

					}

				}

			}

		}

		var children = object.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			projectObject( children[ i ], camera, sortObjects );

		}

	}

	function renderObjects( renderList, scene, camera, overrideMaterial ) {

		for ( var i = 0, l = renderList.length; i < l; i ++ ) {

			var renderItem = renderList[ i ];

			var object = renderItem.object;
			var geometry = renderItem.geometry;
			var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
			var group = renderItem.group;

			if ( camera.isArrayCamera ) {

				_currentArrayCamera = camera;

				var cameras = camera.cameras;

				for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {

					var camera2 = cameras[ j ];

					if ( object.layers.test( camera2.layers ) ) {

						var bounds = camera2.bounds;

						var x = bounds.x * _width;
						var y = bounds.y * _height;
						var width = bounds.z * _width;
						var height = bounds.w * _height;

						state.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );

						renderObject( object, scene, camera2, geometry, material, group );

					}

				}

			} else {

				_currentArrayCamera = null;

				renderObject( object, scene, camera, geometry, material, group );

			}

		}

	}

	function renderObject( object, scene, camera, geometry, material, group ) {

		object.onBeforeRender( _this, scene, camera, geometry, material, group );

		object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
		object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

		if ( object.isImmediateRenderObject ) {

			var frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

			state.setMaterial( material, frontFaceCW );

			var program = setProgram( camera, scene.fog, material, object );

			_currentGeometryProgram = '';

			renderObjectImmediate( object, program, material );

		} else {

			_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );

		}

		object.onAfterRender( _this, scene, camera, geometry, material, group );

	}

	function initMaterial( material, fog, object ) {

		var materialProperties = properties.get( material );

		var parameters = programCache.getParameters(
			material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );

		var code = programCache.getProgramCode( material, parameters );

		var program = materialProperties.program;
		var programChange = true;

		if ( program === undefined ) {

			// new material
			material.addEventListener( 'dispose', onMaterialDispose );

		} else if ( program.code !== code ) {

			// changed glsl or parameters
			releaseMaterialProgramReference( material );

		} else if ( parameters.shaderID !== undefined ) {

			// same glsl and uniform list
			return;

		} else {

			// only rebuild uniform list
			programChange = false;

		}

		if ( programChange ) {

			if ( parameters.shaderID ) {

				var shader = ShaderLib[ parameters.shaderID ];

				materialProperties.shader = {
					name: material.type,
					uniforms: UniformsUtils.clone( shader.uniforms ),
					vertexShader: shader.vertexShader,
					fragmentShader: shader.fragmentShader
				};

			} else {

				materialProperties.shader = {
					name: material.type,
					uniforms: material.uniforms,
					vertexShader: material.vertexShader,
					fragmentShader: material.fragmentShader
				};

			}

			material.onBeforeCompile( materialProperties.shader );

			program = programCache.acquireProgram( material, materialProperties.shader, parameters, code );

			materialProperties.program = program;
			material.program = program;

		}

		var programAttributes = program.getAttributes();

		if ( material.morphTargets ) {

			material.numSupportedMorphTargets = 0;

			for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

				if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {

					material.numSupportedMorphTargets ++;

				}

			}

		}

		if ( material.morphNormals ) {

			material.numSupportedMorphNormals = 0;

			for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

				if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {

					material.numSupportedMorphNormals ++;

				}

			}

		}

		var uniforms = materialProperties.shader.uniforms;

		if ( ! material.isShaderMaterial &&
			! material.isRawShaderMaterial ||
			material.clipping === true ) {

			materialProperties.numClippingPlanes = _clipping.numPlanes;
			materialProperties.numIntersection = _clipping.numIntersection;
			uniforms.clippingPlanes = _clipping.uniform;

		}

		materialProperties.fog = fog;

		// store the light setup it was created for

		materialProperties.lightsHash = lights.state.hash;

		if ( material.lights ) {

			// wire up the material to this renderer's lighting state

			uniforms.ambientLightColor.value = lights.state.ambient;
			uniforms.directionalLights.value = lights.state.directional;
			uniforms.spotLights.value = lights.state.spot;
			uniforms.rectAreaLights.value = lights.state.rectArea;
			uniforms.pointLights.value = lights.state.point;
			uniforms.hemisphereLights.value = lights.state.hemi;

			uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
			uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
			uniforms.spotShadowMap.value = lights.state.spotShadowMap;
			uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
			// TODO (abelnation): add area lights shadow info to uniforms

		}

		var progUniforms = materialProperties.program.getUniforms(),
			uniformsList =
				WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

		materialProperties.uniformsList = uniformsList;

	}

	function setProgram( camera, fog, material, object ) {

		_usedTextureUnits = 0;

		var materialProperties = properties.get( material );

		if ( _clippingEnabled ) {

			if ( _localClippingEnabled || camera !== _currentCamera ) {

				var useCache =
					camera === _currentCamera &&
					material.id === _currentMaterialId;

				// we might want to call this function with some ClippingGroup
				// object instead of the material, once it becomes feasible
				// (#8465, #8379)
				_clipping.setState(
					material.clippingPlanes, material.clipIntersection, material.clipShadows,
					camera, materialProperties, useCache );

			}

		}

		if ( material.needsUpdate === false ) {

			if ( materialProperties.program === undefined ) {

				material.needsUpdate = true;

			} else if ( material.fog && materialProperties.fog !== fog ) {

				material.needsUpdate = true;

			} else if ( material.lights && materialProperties.lightsHash !== lights.state.hash ) {

				material.needsUpdate = true;

			} else if ( materialProperties.numClippingPlanes !== undefined &&
				( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
				materialProperties.numIntersection !== _clipping.numIntersection ) ) {

				material.needsUpdate = true;

			}

		}

		if ( material.needsUpdate ) {

			initMaterial( material, fog, object );
			material.needsUpdate = false;

		}

		var refreshProgram = false;
		var refreshMaterial = false;
		var refreshLights = false;

		var program = materialProperties.program,
			p_uniforms = program.getUniforms(),
			m_uniforms = materialProperties.shader.uniforms;

		if ( state.useProgram( program.program ) ) {

			refreshProgram = true;
			refreshMaterial = true;
			refreshLights = true;

		}

		if ( material.id !== _currentMaterialId ) {

			_currentMaterialId = material.id;

			refreshMaterial = true;

		}

		if ( refreshProgram || camera !== _currentCamera ) {

			p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

			if ( capabilities.logarithmicDepthBuffer ) {

				p_uniforms.setValue( _gl, 'logDepthBufFC',
					2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

			}

			// Avoid unneeded uniform updates per ArrayCamera's sub-camera

			if ( _currentCamera !== ( _currentArrayCamera || camera ) ) {

				_currentCamera = ( _currentArrayCamera || camera );

				// lighting uniforms depend on the camera so enforce an update
				// now, in case this material supports lights - or later, when
				// the next material that does gets activated:

				refreshMaterial = true;		// set to true on material change
				refreshLights = true;		// remains set until update done

			}

			// load material specific uniforms
			// (shader material also gets them for the sake of genericity)

			if ( material.isShaderMaterial ||
				material.isMeshPhongMaterial ||
				material.isMeshStandardMaterial ||
				material.envMap ) {

				var uCamPos = p_uniforms.map.cameraPosition;

				if ( uCamPos !== undefined ) {

					uCamPos.setValue( _gl,
						_vector3.setFromMatrixPosition( camera.matrixWorld ) );

				}

			}

			if ( material.isMeshPhongMaterial ||
				material.isMeshLambertMaterial ||
				material.isMeshBasicMaterial ||
				material.isMeshStandardMaterial ||
				material.isShaderMaterial ||
				material.skinning ) {

				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

			}

		}

		// skinning uniforms must be set even if material didn't change
		// auto-setting of texture unit for bone texture must go before other textures
		// not sure why, but otherwise weird things happen

		if ( material.skinning ) {

			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

			var skeleton = object.skeleton;

			if ( skeleton ) {

				var bones = skeleton.bones;

				if ( capabilities.floatVertexTextures ) {

					if ( skeleton.boneTexture === undefined ) {

						// layout (1 matrix = 4 pixels)
						//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
						//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
						//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
						//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
						//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


						var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
						size = _Math.ceilPowerOfTwo( size );
						size = Math.max( size, 4 );

						var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
						boneMatrices.set( skeleton.boneMatrices ); // copy current values

						var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );

						skeleton.boneMatrices = boneMatrices;
						skeleton.boneTexture = boneTexture;
						skeleton.boneTextureSize = size;

					}

					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );
					p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

				} else {

					p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

				}

			}

		}

		if ( refreshMaterial ) {

			p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
			p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );

			if ( material.lights ) {

				// the current material requires lighting info

				// note: all lighting uniforms are always set correctly
				// they simply reference the renderer's state for their
				// values
				//
				// use the current material's .needsUpdate flags to set
				// the GL state when required

				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

			}

			// refresh uniforms common to several materials

			if ( fog && material.fog ) {

				refreshUniformsFog( m_uniforms, fog );

			}

			if ( material.isMeshBasicMaterial ) {

				refreshUniformsCommon( m_uniforms, material );

			} else if ( material.isMeshLambertMaterial ) {

				refreshUniformsCommon( m_uniforms, material );
				refreshUniformsLambert( m_uniforms, material );

			} else if ( material.isMeshPhongMaterial ) {

				refreshUniformsCommon( m_uniforms, material );

				if ( material.isMeshToonMaterial ) {

					refreshUniformsToon( m_uniforms, material );

				} else {

					refreshUniformsPhong( m_uniforms, material );

				}

			} else if ( material.isMeshStandardMaterial ) {

				refreshUniformsCommon( m_uniforms, material );

				if ( material.isMeshPhysicalMaterial ) {

					refreshUniformsPhysical( m_uniforms, material );

				} else {

					refreshUniformsStandard( m_uniforms, material );

				}

			} else if ( material.isMeshDepthMaterial ) {

				refreshUniformsCommon( m_uniforms, material );
				refreshUniformsDepth( m_uniforms, material );

			} else if ( material.isMeshDistanceMaterial ) {

				refreshUniformsCommon( m_uniforms, material );
				refreshUniformsDistance( m_uniforms, material );

			} else if ( material.isMeshNormalMaterial ) {

				refreshUniformsCommon( m_uniforms, material );
				refreshUniformsNormal( m_uniforms, material );

			} else if ( material.isLineBasicMaterial ) {

				refreshUniformsLine( m_uniforms, material );

				if ( material.isLineDashedMaterial ) {

					refreshUniformsDash( m_uniforms, material );

				}

			} else if ( material.isPointsMaterial ) {

				refreshUniformsPoints( m_uniforms, material );

			} else if ( material.isShadowMaterial ) {

				m_uniforms.color.value = material.color;
				m_uniforms.opacity.value = material.opacity;

			}

			// RectAreaLight Texture
			// TODO (mrdoob): Find a nicer implementation

			if ( m_uniforms.ltcMat !== undefined ) m_uniforms.ltcMat.value = UniformsLib.LTC_MAT_TEXTURE;
			if ( m_uniforms.ltcMag !== undefined ) m_uniforms.ltcMag.value = UniformsLib.LTC_MAG_TEXTURE;

			WebGLUniforms.upload(
				_gl, materialProperties.uniformsList, m_uniforms, _this );

		}


		// common matrices

		p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
		p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

		return program;

	}

	// Uniforms (refresh uniforms objects)

	function refreshUniformsCommon( uniforms, material ) {

		uniforms.opacity.value = material.opacity;

		if ( material.color ) {

			uniforms.diffuse.value = material.color;

		}

		if ( material.emissive ) {

			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

		}

		if ( material.map ) {

			uniforms.map.value = material.map;

		}

		if ( material.alphaMap ) {

			uniforms.alphaMap.value = material.alphaMap;

		}

		if ( material.specularMap ) {

			uniforms.specularMap.value = material.specularMap;

		}

		if ( material.envMap ) {

			uniforms.envMap.value = material.envMap;

			// don't flip CubeTexture envMaps, flip everything else:
			//  WebGLRenderTargetCube will be flipped for backwards compatibility
			//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
			// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
			uniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;

			uniforms.reflectivity.value = material.reflectivity;
			uniforms.refractionRatio.value = material.refractionRatio;

		}

		if ( material.lightMap ) {

			uniforms.lightMap.value = material.lightMap;
			uniforms.lightMapIntensity.value = material.lightMapIntensity;

		}

		if ( material.aoMap ) {

			uniforms.aoMap.value = material.aoMap;
			uniforms.aoMapIntensity.value = material.aoMapIntensity;

		}

		// uv repeat and offset setting priorities
		// 1. color map
		// 2. specular map
		// 3. normal map
		// 4. bump map
		// 5. alpha map
		// 6. emissive map

		var uvScaleMap;

		if ( material.map ) {

			uvScaleMap = material.map;

		} else if ( material.specularMap ) {

			uvScaleMap = material.specularMap;

		} else if ( material.displacementMap ) {

			uvScaleMap = material.displacementMap;

		} else if ( material.normalMap ) {

			uvScaleMap = material.normalMap;

		} else if ( material.bumpMap ) {

			uvScaleMap = material.bumpMap;

		} else if ( material.roughnessMap ) {

			uvScaleMap = material.roughnessMap;

		} else if ( material.metalnessMap ) {

			uvScaleMap = material.metalnessMap;

		} else if ( material.alphaMap ) {

			uvScaleMap = material.alphaMap;

		} else if ( material.emissiveMap ) {

			uvScaleMap = material.emissiveMap;

		}

		if ( uvScaleMap !== undefined ) {

			// backwards compatibility
			if ( uvScaleMap.isWebGLRenderTarget ) {

				uvScaleMap = uvScaleMap.texture;

			}

			if ( uvScaleMap.matrixAutoUpdate === true ) {

				var offset = uvScaleMap.offset;
				var repeat = uvScaleMap.repeat;
				var rotation = uvScaleMap.rotation;
				var center = uvScaleMap.center;

				uvScaleMap.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );

			}

			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

		}

	}

	function refreshUniformsLine( uniforms, material ) {

		uniforms.diffuse.value = material.color;
		uniforms.opacity.value = material.opacity;

	}

	function refreshUniformsDash( uniforms, material ) {

		uniforms.dashSize.value = material.dashSize;
		uniforms.totalSize.value = material.dashSize + material.gapSize;
		uniforms.scale.value = material.scale;

	}

	function refreshUniformsPoints( uniforms, material ) {

		uniforms.diffuse.value = material.color;
		uniforms.opacity.value = material.opacity;
		uniforms.size.value = material.size * _pixelRatio;
		uniforms.scale.value = _height * 0.5;

		uniforms.map.value = material.map;

		if ( material.map !== null ) {

			if ( material.map.matrixAutoUpdate === true ) {

				var offset = material.map.offset;
				var repeat = material.map.repeat;
				var rotation = material.map.rotation;
				var center = material.map.center;

				material.map.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );

			}

			uniforms.uvTransform.value.copy( material.map.matrix );

		}

	}

	function refreshUniformsFog( uniforms, fog ) {

		uniforms.fogColor.value = fog.color;

		if ( fog.isFog ) {

			uniforms.fogNear.value = fog.near;
			uniforms.fogFar.value = fog.far;

		} else if ( fog.isFogExp2 ) {

			uniforms.fogDensity.value = fog.density;

		}

	}

	function refreshUniformsLambert( uniforms, material ) {

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

	}

	function refreshUniformsPhong( uniforms, material ) {

		uniforms.specular.value = material.specular;
		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	function refreshUniformsToon( uniforms, material ) {

		refreshUniformsPhong( uniforms, material );

		if ( material.gradientMap ) {

			uniforms.gradientMap.value = material.gradientMap;

		}

	}

	function refreshUniformsStandard( uniforms, material ) {

		uniforms.roughness.value = material.roughness;
		uniforms.metalness.value = material.metalness;

		if ( material.roughnessMap ) {

			uniforms.roughnessMap.value = material.roughnessMap;

		}

		if ( material.metalnessMap ) {

			uniforms.metalnessMap.value = material.metalnessMap;

		}

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

		if ( material.envMap ) {

			//uniforms.envMap.value = material.envMap; // part of uniforms common
			uniforms.envMapIntensity.value = material.envMapIntensity;

		}

	}

	function refreshUniformsPhysical( uniforms, material ) {

		uniforms.clearCoat.value = material.clearCoat;
		uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

		refreshUniformsStandard( uniforms, material );

	}

	function refreshUniformsDepth( uniforms, material ) {

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	function refreshUniformsDistance( uniforms, material ) {

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

		uniforms.referencePosition.value.copy( material.referencePosition );
		uniforms.nearDistance.value = material.nearDistance;
		uniforms.farDistance.value = material.farDistance;

	}

	function refreshUniformsNormal( uniforms, material ) {

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	// If uniforms are marked as clean, they don't need to be loaded to the GPU.

	function markUniformsLightsNeedsUpdate( uniforms, value ) {

		uniforms.ambientLightColor.needsUpdate = value;

		uniforms.directionalLights.needsUpdate = value;
		uniforms.pointLights.needsUpdate = value;
		uniforms.spotLights.needsUpdate = value;
		uniforms.rectAreaLights.needsUpdate = value;
		uniforms.hemisphereLights.needsUpdate = value;

	}

	// GL state setting

	this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

		state.setCullFace( cullFace );
		state.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );

	};

	// Textures

	function allocTextureUnit() {

		var textureUnit = _usedTextureUnits;

		if ( textureUnit >= capabilities.maxTextures ) {

			console.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

		}

		_usedTextureUnits += 1;

		return textureUnit;

	}

	this.allocTextureUnit = allocTextureUnit;

	// this.setTexture2D = setTexture2D;
	this.setTexture2D = ( function () {

		var warned = false;

		// backwards compatibility: peel texture.texture
		return function setTexture2D( texture, slot ) {

			if ( texture && texture.isWebGLRenderTarget ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
					warned = true;

				}

				texture = texture.texture;

			}

			textures.setTexture2D( texture, slot );

		};

	}() );

	this.setTexture = ( function () {

		var warned = false;

		return function setTexture( texture, slot ) {

			if ( ! warned ) {

				console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
				warned = true;

			}

			textures.setTexture2D( texture, slot );

		};

	}() );

	this.setTextureCube = ( function () {

		var warned = false;

		return function setTextureCube( texture, slot ) {

			// backwards compatibility: peel texture.texture
			if ( texture && texture.isWebGLRenderTargetCube ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
					warned = true;

				}

				texture = texture.texture;

			}

			// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
			// TODO: unify these code paths
			if ( ( texture && texture.isCubeTexture ) ||
				( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

				// CompressedTexture can have Array in image :/

				// this function alone should take care of cube textures
				textures.setTextureCube( texture, slot );

			} else {

				// assumed: texture property of THREE.WebGLRenderTargetCube

				textures.setTextureCubeDynamic( texture, slot );

			}

		};

	}() );

	this.getRenderTarget = function () {

		return _currentRenderTarget;

	};

	this.setRenderTarget = function ( renderTarget ) {

		_currentRenderTarget = renderTarget;

		if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

			textures.setupRenderTarget( renderTarget );

		}

		var framebuffer = null;
		var isCube = false;

		if ( renderTarget ) {

			var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( renderTarget.isWebGLRenderTargetCube ) {

				framebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];
				isCube = true;

			} else {

				framebuffer = __webglFramebuffer;

			}

			_currentViewport.copy( renderTarget.viewport );
			_currentScissor.copy( renderTarget.scissor );
			_currentScissorTest = renderTarget.scissorTest;

		} else {

			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );
			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
			_currentScissorTest = _scissorTest;

		}

		if ( _currentFramebuffer !== framebuffer ) {

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_currentFramebuffer = framebuffer;

		}

		state.viewport( _currentViewport );
		state.scissor( _currentScissor );
		state.setScissorTest( _currentScissorTest );

		if ( isCube ) {

			var textureProperties = properties.get( renderTarget.texture );
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );

		}

	};

	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

		if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
			return;

		}

		var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

		if ( framebuffer ) {

			var restore = false;

			if ( framebuffer !== _currentFramebuffer ) {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

				restore = true;

			}

			try {

				var texture = renderTarget.texture;
				var textureFormat = texture.format;
				var textureType = texture.type;

				if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
					return;

				}

				if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
					! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
					! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
					return;

				}

				if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

						_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

					}

				} else {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

				}

			} finally {

				if ( restore ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

				}

			}

		}

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function FogExp2( color, density ) {

	this.name = '';

	this.color = new Color( color );
	this.density = ( density !== undefined ) ? density : 0.00025;

}

FogExp2.prototype.isFogExp2 = true;

FogExp2.prototype.clone = function () {

	return new FogExp2( this.color.getHex(), this.density );

};

FogExp2.prototype.toJSON = function ( /* meta */ ) {

	return {
		type: 'FogExp2',
		color: this.color.getHex(),
		density: this.density
	};

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Fog( color, near, far ) {

	this.name = '';

	this.color = new Color( color );

	this.near = ( near !== undefined ) ? near : 1;
	this.far = ( far !== undefined ) ? far : 1000;

}

Fog.prototype.isFog = true;

Fog.prototype.clone = function () {

	return new Fog( this.color.getHex(), this.near, this.far );

};

Fog.prototype.toJSON = function ( /* meta */ ) {

	return {
		type: 'Fog',
		color: this.color.getHex(),
		near: this.near,
		far: this.far
	};

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Scene() {

	Object3D.call( this );

	this.type = 'Scene';

	this.background = null;
	this.fog = null;
	this.overrideMaterial = null;

	this.autoUpdate = true; // checked by the renderer

}

Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Scene,

	copy: function ( source, recursive ) {

		Object3D.prototype.copy.call( this, source, recursive );

		if ( source.background !== null ) this.background = source.background.clone();
		if ( source.fog !== null ) this.fog = source.fog.clone();
		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

		this.autoUpdate = source.autoUpdate;
		this.matrixAutoUpdate = source.matrixAutoUpdate;

		return this;

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

		return data;

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function LensFlare( texture, size, distance, blending, color ) {

	Object3D.call( this );

	this.lensFlares = [];

	this.positionScreen = new Vector3();
	this.customUpdateCallback = undefined;

	if ( texture !== undefined ) {

		this.add( texture, size, distance, blending, color );

	}

}

LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: LensFlare,

	isLensFlare: true,

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.positionScreen.copy( source.positionScreen );
		this.customUpdateCallback = source.customUpdateCallback;

		for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

			this.lensFlares.push( source.lensFlares[ i ] );

		}

		return this;

	},

	add: function ( texture, size, distance, blending, color, opacity ) {

		if ( size === undefined ) size = - 1;
		if ( distance === undefined ) distance = 0;
		if ( opacity === undefined ) opacity = 1;
		if ( color === undefined ) color = new Color( 0xffffff );
		if ( blending === undefined ) blending = NormalBlending;

		distance = Math.min( distance, Math.max( 0, distance ) );

		this.lensFlares.push( {
			texture: texture,	// THREE.Texture
			size: size, 		// size in pixels (-1 = use texture.width)
			distance: distance, 	// distance (0-1) from light source (0=at light source)
			x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
			scale: 1, 		// scale
			rotation: 0, 		// rotation
			opacity: opacity,	// opacity
			color: color,		// color
			blending: blending	// blending
		} );

	},

	/*
	 * Update lens flares update positions on all flares based on the screen position
	 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
	 */

	updateLensFlares: function () {

		var f, fl = this.lensFlares.length;
		var flare;
		var vecX = - this.positionScreen.x * 2;
		var vecY = - this.positionScreen.y * 2;

		for ( f = 0; f < fl; f ++ ) {

			flare = this.lensFlares[ f ];

			flare.x = this.positionScreen.x + vecX * flare.distance;
			flare.y = this.positionScreen.y + vecY * flare.distance;

			flare.wantedRotation = flare.x * Math.PI * 0.25;
			flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

		}

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *	uvOffset: new THREE.Vector2(),
 *	uvScale: new THREE.Vector2()
 * }
 */

function SpriteMaterial( parameters ) {

	Material.call( this );

	this.type = 'SpriteMaterial';

	this.color = new Color( 0xffffff );
	this.map = null;

	this.rotation = 0;

	this.fog = false;
	this.lights = false;

	this.setValues( parameters );

}

SpriteMaterial.prototype = Object.create( Material.prototype );
SpriteMaterial.prototype.constructor = SpriteMaterial;
SpriteMaterial.prototype.isSpriteMaterial = true;

SpriteMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );
	this.map = source.map;

	this.rotation = source.rotation;

	return this;

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function Sprite( material ) {

	Object3D.call( this );

	this.type = 'Sprite';

	this.material = ( material !== undefined ) ? material : new SpriteMaterial();

}

Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Sprite,

	isSprite: true,

	raycast: ( function () {

		var intersectPoint = new Vector3();
		var worldPosition = new Vector3();
		var worldScale = new Vector3();

		return function raycast( raycaster, intersects ) {

			worldPosition.setFromMatrixPosition( this.matrixWorld );
			raycaster.ray.closestPointToPoint( worldPosition, intersectPoint );

			worldScale.setFromMatrixScale( this.matrixWorld );
			var guessSizeSq = worldScale.x * worldScale.y / 4;

			if ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) return;

			var distance = raycaster.ray.origin.distanceTo( intersectPoint );

			if ( distance < raycaster.near || distance > raycaster.far ) return;

			intersects.push( {

				distance: distance,
				point: intersectPoint.clone(),
				face: null,
				object: this

			} );

		};

	}() ),

	clone: function () {

		return new this.constructor( this.material ).copy( this );

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function LOD() {

	Object3D.call( this );

	this.type = 'LOD';

	Object.defineProperties( this, {
		levels: {
			enumerable: true,
			value: []
		}
	} );

}

LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: LOD,

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source, false );

		var levels = source.levels;

		for ( var i = 0, l = levels.length; i < l; i ++ ) {

			var level = levels[ i ];

			this.addLevel( level.object.clone(), level.distance );

		}

		return this;

	},

	addLevel: function ( object, distance ) {

		if ( distance === undefined ) distance = 0;

		distance = Math.abs( distance );

		var levels = this.levels;

		for ( var l = 0; l < levels.length; l ++ ) {

			if ( distance < levels[ l ].distance ) {

				break;

			}

		}

		levels.splice( l, 0, { distance: distance, object: object } );

		this.add( object );

	},

	getObjectForDistance: function ( distance ) {

		var levels = this.levels;

		for ( var i = 1, l = levels.length; i < l; i ++ ) {

			if ( distance < levels[ i ].distance ) {

				break;

			}

		}

		return levels[ i - 1 ].object;

	},

	raycast: ( function () {

		var matrixPosition = new Vector3();

		return function raycast( raycaster, intersects ) {

			matrixPosition.setFromMatrixPosition( this.matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( matrixPosition );

			this.getObjectForDistance( distance ).raycast( raycaster, intersects );

		};

	}() ),

	update: function () {

		var v1 = new Vector3();
		var v2 = new Vector3();

		return function update( camera ) {

			var levels = this.levels;

			if ( levels.length > 1 ) {

				v1.setFromMatrixPosition( camera.matrixWorld );
				v2.setFromMatrixPosition( this.matrixWorld );

				var distance = v1.distanceTo( v2 );

				levels[ 0 ].object.visible = true;

				for ( var i = 1, l = levels.length; i < l; i ++ ) {

					if ( distance >= levels[ i ].distance ) {

						levels[ i - 1 ].object.visible = false;
						levels[ i ].object.visible = true;

					} else {

						break;

					}

				}

				for ( ; i < l; i ++ ) {

					levels[ i ].object.visible = false;

				}

			}

		};

	}(),

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.levels = [];

		var levels = this.levels;

		for ( var i = 0, l = levels.length; i < l; i ++ ) {

			var level = levels[ i ];

			data.object.levels.push( {
				object: level.object.uuid,
				distance: level.distance
			} );

		}

		return data;

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author michael guerrero / http://realitymeltdown.com
 * @author ikerr / http://verold.com
 */

function Skeleton( bones, boneInverses ) {

	// copy the bone array

	bones = bones || [];

	this.bones = bones.slice( 0 );
	this.boneMatrices = new Float32Array( this.bones.length * 16 );

	// use the supplied bone inverses or calculate the inverses

	if ( boneInverses === undefined ) {

		this.calculateInverses();

	} else {

		if ( this.bones.length === boneInverses.length ) {

			this.boneInverses = boneInverses.slice( 0 );

		} else {

			console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );

			this.boneInverses = [];

			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

				this.boneInverses.push( new Matrix4() );

			}

		}

	}

}

Object.assign( Skeleton.prototype, {

	calculateInverses: function () {

		this.boneInverses = [];

		for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

			var inverse = new Matrix4();

			if ( this.bones[ i ] ) {

				inverse.getInverse( this.bones[ i ].matrixWorld );

			}

			this.boneInverses.push( inverse );

		}

	},

	pose: function () {

		var bone, i, il;

		// recover the bind-time world matrices

		for ( i = 0, il = this.bones.length; i < il; i ++ ) {

			bone = this.bones[ i ];

			if ( bone ) {

				bone.matrixWorld.getInverse( this.boneInverses[ i ] );

			}

		}

		// compute the local matrices, positions, rotations and scales

		for ( i = 0, il = this.bones.length; i < il; i ++ ) {

			bone = this.bones[ i ];

			if ( bone ) {

				if ( bone.parent && bone.parent.isBone ) {

					bone.matrix.getInverse( bone.parent.matrixWorld );
					bone.matrix.multiply( bone.matrixWorld );

				} else {

					bone.matrix.copy( bone.matrixWorld );

				}

				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

			}

		}

	},

	update: ( function () {

		var offsetMatrix = new Matrix4();
		var identityMatrix = new Matrix4();

		return function update() {

			var bones = this.bones;
			var boneInverses = this.boneInverses;
			var boneMatrices = this.boneMatrices;
			var boneTexture = this.boneTexture;

			// flatten bone matrices to array

			for ( var i = 0, il = bones.length; i < il; i ++ ) {

				// compute the offset between the current and the original transform

				var matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;

				offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
				offsetMatrix.toArray( boneMatrices, i * 16 );

			}

			if ( boneTexture !== undefined ) {

				boneTexture.needsUpdate = true;

			}

		};

	} )(),

	clone: function () {

		return new Skeleton( this.bones, this.boneInverses );

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */

function Bone() {

	Object3D.call( this );

	this.type = 'Bone';

}

Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Bone,

	isBone: true

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */

function SkinnedMesh( geometry, material ) {

	Mesh.call( this, geometry, material );

	this.type = 'SkinnedMesh';

	this.bindMode = 'attached';
	this.bindMatrix = new Matrix4();
	this.bindMatrixInverse = new Matrix4();

	var bones = this.initBones();
	var skeleton = new Skeleton( bones );

	this.bind( skeleton, this.matrixWorld );

	this.normalizeSkinWeights();

}

SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

	constructor: SkinnedMesh,

	isSkinnedMesh: true,

	initBones: function () {

		var bones = [], bone, gbone;
		var i, il;

		if ( this.geometry && this.geometry.bones !== undefined ) {

			// first, create array of 'Bone' objects from geometry data

			for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

				gbone = this.geometry.bones[ i ];

				// create new 'Bone' object

				bone = new Bone();
				bones.push( bone );

				// apply values

				bone.name = gbone.name;
				bone.position.fromArray( gbone.pos );
				bone.quaternion.fromArray( gbone.rotq );
				if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

			}

			// second, create bone hierarchy

			for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

				gbone = this.geometry.bones[ i ];

				if ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {

					// subsequent bones in the hierarchy

					bones[ gbone.parent ].add( bones[ i ] );

				} else {

					// topmost bone, immediate child of the skinned mesh

					this.add( bones[ i ] );

				}

			}

		}

		// now the bones are part of the scene graph and children of the skinned mesh.
		// let's update the corresponding matrices

		this.updateMatrixWorld( true );

		return bones;

	},

	bind: function ( skeleton, bindMatrix ) {

		this.skeleton = skeleton;

		if ( bindMatrix === undefined ) {

			this.updateMatrixWorld( true );

			this.skeleton.calculateInverses();

			bindMatrix = this.matrixWorld;

		}

		this.bindMatrix.copy( bindMatrix );
		this.bindMatrixInverse.getInverse( bindMatrix );

	},

	pose: function () {

		this.skeleton.pose();

	},

	normalizeSkinWeights: function () {

		var scale, i;

		if ( this.geometry && this.geometry.isGeometry ) {

			for ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {

				var sw = this.geometry.skinWeights[ i ];

				scale = 1.0 / sw.manhattanLength();

				if ( scale !== Infinity ) {

					sw.multiplyScalar( scale );

				} else {

					sw.set( 1, 0, 0, 0 ); // do something reasonable

				}

			}

		} else if ( this.geometry && this.geometry.isBufferGeometry ) {

			var vec = new Vector4();

			var skinWeight = this.geometry.attributes.skinWeight;

			for ( i = 0; i < skinWeight.count; i ++ ) {

				vec.x = skinWeight.getX( i );
				vec.y = skinWeight.getY( i );
				vec.z = skinWeight.getZ( i );
				vec.w = skinWeight.getW( i );

				scale = 1.0 / vec.manhattanLength();

				if ( scale !== Infinity ) {

					vec.multiplyScalar( scale );

				} else {

					vec.set( 1, 0, 0, 0 ); // do something reasonable

				}

				skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

			}

		}

	},

	updateMatrixWorld: function ( force ) {

		Mesh.prototype.updateMatrixWorld.call( this, force );

		if ( this.bindMode === 'attached' ) {

			this.bindMatrixInverse.getInverse( this.matrixWorld );

		} else if ( this.bindMode === 'detached' ) {

			this.bindMatrixInverse.getInverse( this.bindMatrix );

		} else {

			console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

		}

	},

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round"
 * }
 */

function LineBasicMaterial( parameters ) {

	Material.call( this );

	this.type = 'LineBasicMaterial';

	this.color = new Color( 0xffffff );

	this.linewidth = 1;
	this.linecap = 'round';
	this.linejoin = 'round';

	this.lights = false;

	this.setValues( parameters );

}

LineBasicMaterial.prototype = Object.create( Material.prototype );
LineBasicMaterial.prototype.constructor = LineBasicMaterial;

LineBasicMaterial.prototype.isLineBasicMaterial = true;

LineBasicMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.linewidth = source.linewidth;
	this.linecap = source.linecap;
	this.linejoin = source.linejoin;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Line( geometry, material, mode ) {

	if ( mode === 1 ) {

		console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
		return new LineSegments( geometry, material );

	}

	Object3D.call( this );

	this.type = 'Line';

	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

}

Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Line,

	isLine: true,

	raycast: ( function () {

		var inverseMatrix = new Matrix4();
		var ray = new Ray();
		var sphere = new Sphere();

		return function raycast( raycaster, intersects ) {

			var precision = raycaster.linePrecision;
			var precisionSq = precision * precision;

			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			var vStart = new Vector3();
			var vEnd = new Vector3();
			var interSegment = new Vector3();
			var interRay = new Vector3();
			var step = ( this && this.isLineSegments ) ? 2 : 1;

			if ( geometry.isBufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

						var a = indices[ i ];
						var b = indices[ i + 1 ];

						vStart.fromArray( positions, a * 3 );
						vEnd.fromArray( positions, b * 3 );

						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				} else {

					for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

						vStart.fromArray( positions, 3 * i );
						vEnd.fromArray( positions, 3 * i + 3 );

						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				}

			} else if ( geometry.isGeometry ) {

				var vertices = geometry.vertices;
				var nbVertices = vertices.length;

				for ( var i = 0; i < nbVertices - 1; i += step ) {

					var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

					if ( distSq > precisionSq ) continue;

					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

					var distance = raycaster.ray.origin.distanceTo( interRay );

					if ( distance < raycaster.near || distance > raycaster.far ) continue;

					intersects.push( {

						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
						index: i,
						face: null,
						faceIndex: null,
						object: this

					} );

				}

			}

		};

	}() ),

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function LineSegments( geometry, material ) {

	Line.call( this, geometry, material );

	this.type = 'LineSegments';

}

LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

	constructor: LineSegments,

	isLineSegments: true

} );

/**
 * @author mgreter / http://github.com/mgreter
 */

function LineLoop( geometry, material ) {

	Line.call( this, geometry, material );

	this.type = 'LineLoop';

}

LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {

	constructor: LineLoop,

	isLineLoop: true,

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *  sizeAttenuation: <bool>
 * }
 */

function PointsMaterial( parameters ) {

	Material.call( this );

	this.type = 'PointsMaterial';

	this.color = new Color( 0xffffff );

	this.map = null;

	this.size = 1;
	this.sizeAttenuation = true;

	this.lights = false;

	this.setValues( parameters );

}

PointsMaterial.prototype = Object.create( Material.prototype );
PointsMaterial.prototype.constructor = PointsMaterial;

PointsMaterial.prototype.isPointsMaterial = true;

PointsMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.map = source.map;

	this.size = source.size;
	this.sizeAttenuation = source.sizeAttenuation;

	return this;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

function Points( geometry, material ) {

	Object3D.call( this );

	this.type = 'Points';

	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

}

Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Points,

	isPoints: true,

	raycast: ( function () {

		var inverseMatrix = new Matrix4();
		var ray = new Ray();
		var sphere = new Sphere();

		return function raycast( raycaster, intersects ) {

			var object = this;
			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;
			var threshold = raycaster.params.Points.threshold;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );
			sphere.radius += threshold;

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
			var localThresholdSq = localThreshold * localThreshold;
			var position = new Vector3();

			function testPoint( point, index ) {

				var rayPointDistanceSq = ray.distanceSqToPoint( point );

				if ( rayPointDistanceSq < localThresholdSq ) {

					var intersectPoint = ray.closestPointToPoint( point );
					intersectPoint.applyMatrix4( matrixWorld );

					var distance = raycaster.ray.origin.distanceTo( intersectPoint );

					if ( distance < raycaster.near || distance > raycaster.far ) return;

					intersects.push( {

						distance: distance,
						distanceToRay: Math.sqrt( rayPointDistanceSq ),
						point: intersectPoint.clone(),
						index: index,
						face: null,
						object: object

					} );

				}

			}

			if ( geometry.isBufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, il = indices.length; i < il; i ++ ) {

						var a = indices[ i ];

						position.fromArray( positions, a * 3 );

						testPoint( position, a );

					}

				} else {

					for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

						position.fromArray( positions, i * 3 );

						testPoint( position, i );

					}

				}

			} else {

				var vertices = geometry.vertices;

				for ( var i = 0, l = vertices.length; i < l; i ++ ) {

					testPoint( vertices[ i ], i );

				}

			}

		};

	}() ),

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Group() {

	Object3D.call( this );

	this.type = 'Group';

}

Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Group,

	isGroup: true

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

	Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.generateMipmaps = false;

	// Set needsUpdate when first frame is ready

	var scope = this;

	function onLoaded() {

		video.removeEventListener( 'loadeddata', onLoaded, false );
		scope.needsUpdate = true;

	}

	video.addEventListener( 'loadeddata', onLoaded, false );

}

VideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {

	constructor: VideoTexture,

	isVideoTexture: true,

	update: function () {

		var video = this.image;

		if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

			this.needsUpdate = true;

		}

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	this.image = { width: width, height: height };
	this.mipmaps = mipmaps;

	// no flipping for cube textures
	// (also flipping doesn't work for compressed textures )

	this.flipY = false;

	// can't generate mipmaps for compressed textures
	// mips must be embedded in DDS files

	this.generateMipmaps = false;

}

CompressedTexture.prototype = Object.create( Texture.prototype );
CompressedTexture.prototype.constructor = CompressedTexture;

CompressedTexture.prototype.isCompressedTexture = true;

/**
 * @author Matt DesLauriers / @mattdesl
 * @author atix / arthursilber.de
 */

function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

	format = format !== undefined ? format : DepthFormat;

	if ( format !== DepthFormat && format !== DepthStencilFormat ) {

		throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

	}

	if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;
	if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.image = { width: width, height: height };

	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

	this.flipY = false;
	this.generateMipmaps	= false;

}

DepthTexture.prototype = Object.create( Texture.prototype );
DepthTexture.prototype.constructor = DepthTexture;
DepthTexture.prototype.isDepthTexture = true;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

function WireframeGeometry( geometry ) {

	BufferGeometry.call( this );

	this.type = 'WireframeGeometry';

	// buffer

	var vertices = [];

	// helper variables

	var i, j, l, o, ol;
	var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
	var key, keys = [ 'a', 'b', 'c' ];
	var vertex;

	// different logic for Geometry and BufferGeometry

	if ( geometry && geometry.isGeometry ) {

		// create a data structure that contains all edges without duplicates

		var faces = geometry.faces;

		for ( i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( j = 0; j < 3; j ++ ) {

				edge1 = face[ keys[ j ] ];
				edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
				edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
				edge[ 1 ] = Math.max( edge1, edge2 );

				key = edge[ 0 ] + ',' + edge[ 1 ];

				if ( edges[ key ] === undefined ) {

					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

				}

			}

		}

		// generate vertices

		for ( key in edges ) {

			e = edges[ key ];

			vertex = geometry.vertices[ e.index1 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

			vertex = geometry.vertices[ e.index2 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

	} else if ( geometry && geometry.isBufferGeometry ) {

		var position, indices, groups;
		var group, start, count;
		var index1, index2;

		vertex = new Vector3();

		if ( geometry.index !== null ) {

			// indexed BufferGeometry

			position = geometry.attributes.position;
			indices = geometry.index;
			groups = geometry.groups;

			if ( groups.length === 0 ) {

				groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

			}

			// create a data structure that contains all eges without duplicates

			for ( o = 0, ol = groups.length; o < ol; ++ o ) {

				group = groups[ o ];

				start = group.start;
				count = group.count;

				for ( i = start, l = ( start + count ); i < l; i += 3 ) {

					for ( j = 0; j < 3; j ++ ) {

						edge1 = indices.getX( i + j );
						edge2 = indices.getX( i + ( j + 1 ) % 3 );
						edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
						edge[ 1 ] = Math.max( edge1, edge2 );

						key = edge[ 0 ] + ',' + edge[ 1 ];

						if ( edges[ key ] === undefined ) {

							edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

						}

					}

				}

			}

			// generate vertices

			for ( key in edges ) {

				e = edges[ key ];

				vertex.fromBufferAttribute( position, e.index1 );
				vertices.push( vertex.x, vertex.y, vertex.z );

				vertex.fromBufferAttribute( position, e.index2 );
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		} else {

			// non-indexed BufferGeometry

			position = geometry.attributes.position;

			for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

				for ( j = 0; j < 3; j ++ ) {

					// three edges per triangle, an edge is represented as (index1, index2)
					// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

					index1 = 3 * i + j;
					vertex.fromBufferAttribute( position, index1 );
					vertices.push( vertex.x, vertex.y, vertex.z );

					index2 = 3 * i + ( ( j + 1 ) % 3 );
					vertex.fromBufferAttribute( position, index2 );
					vertices.push( vertex.x, vertex.y, vertex.z );

				}

			}

		}

	}

	// build geometry

	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

}

WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
WireframeGeometry.prototype.constructor = WireframeGeometry;

/**
 * @author zz85 / https://github.com/zz85
 * @author Mugen87 / https://github.com/Mugen87
 *
 * Parametric Surfaces Geometry
 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
 */

// ParametricGeometry

function ParametricGeometry( func, slices, stacks ) {

	Geometry.call( this );

	this.type = 'ParametricGeometry';

	this.parameters = {
		func: func,
		slices: slices,
		stacks: stacks
	};

	this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
	this.mergeVertices();

}

ParametricGeometry.prototype = Object.create( Geometry.prototype );
ParametricGeometry.prototype.constructor = ParametricGeometry;

// ParametricBufferGeometry

function ParametricBufferGeometry( func, slices, stacks ) {

	BufferGeometry.call( this );

	this.type = 'ParametricBufferGeometry';

	this.parameters = {
		func: func,
		slices: slices,
		stacks: stacks
	};

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	var EPS = 0.00001;

	var normal = new Vector3();

	var p0 = new Vector3(), p1 = new Vector3();
	var pu = new Vector3(), pv = new Vector3();

	var i, j;

	// generate vertices, normals and uvs

	var sliceCount = slices + 1;

	for ( i = 0; i <= stacks; i ++ ) {

		var v = i / stacks;

		for ( j = 0; j <= slices; j ++ ) {

			var u = j / slices;

			// vertex

			p0 = func( u, v, p0 );
			vertices.push( p0.x, p0.y, p0.z );

			// normal

			// approximate tangent vectors via finite differences

			if ( u - EPS >= 0 ) {

				p1 = func( u - EPS, v, p1 );
				pu.subVectors( p0, p1 );

			} else {

				p1 = func( u + EPS, v, p1 );
				pu.subVectors( p1, p0 );

			}

			if ( v - EPS >= 0 ) {

				p1 = func( u, v - EPS, p1 );
				pv.subVectors( p0, p1 );

			} else {

				p1 = func( u, v + EPS, p1 );
				pv.subVectors( p1, p0 );

			}

			// cross product of tangent vectors returns surface normal

			normal.crossVectors( pu, pv ).normalize();
			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( u, v );

		}

	}

	// generate indices

	for ( i = 0; i < stacks; i ++ ) {

		for ( j = 0; j < slices; j ++ ) {

			var a = i * sliceCount + j;
			var b = i * sliceCount + j + 1;
			var c = ( i + 1 ) * sliceCount + j + 1;
			var d = ( i + 1 ) * sliceCount + j;

			// faces one and two

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

/**
 * @author clockworkgeek / https://github.com/clockworkgeek
 * @author timothypratley / https://github.com/timothypratley
 * @author WestLangley / http://github.com/WestLangley
 * @author Mugen87 / https://github.com/Mugen87
 */

// PolyhedronGeometry

function PolyhedronGeometry( vertices, indices, radius, detail ) {

	Geometry.call( this );

	this.type = 'PolyhedronGeometry';

	this.parameters = {
		vertices: vertices,
		indices: indices,
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
	this.mergeVertices();

}

PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

// PolyhedronBufferGeometry

function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

	BufferGeometry.call( this );

	this.type = 'PolyhedronBufferGeometry';

	this.parameters = {
		vertices: vertices,
		indices: indices,
		radius: radius,
		detail: detail
	};

	radius = radius || 1;
	detail = detail || 0;

	// default buffer data

	var vertexBuffer = [];
	var uvBuffer = [];

	// the subdivision creates the vertex buffer data

	subdivide( detail );

	// all vertices should lie on a conceptual sphere with a given radius

	appplyRadius( radius );

	// finally, create the uv data

	generateUVs();

	// build non-indexed geometry

	this.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

	if ( detail === 0 ) {

		this.computeVertexNormals(); // flat normals

	} else {

		this.normalizeNormals(); // smooth normals

	}

	// helper functions

	function subdivide( detail ) {

		var a = new Vector3();
		var b = new Vector3();
		var c = new Vector3();

		// iterate over all faces and apply a subdivison with the given detail value

		for ( var i = 0; i < indices.length; i += 3 ) {

			// get the vertices of the face

			getVertexByIndex( indices[ i + 0 ], a );
			getVertexByIndex( indices[ i + 1 ], b );
			getVertexByIndex( indices[ i + 2 ], c );

			// perform subdivision

			subdivideFace( a, b, c, detail );

		}

	}

	function subdivideFace( a, b, c, detail ) {

		var cols = Math.pow( 2, detail );

		// we use this multidimensional array as a data structure for creating the subdivision

		var v = [];

		var i, j;

		// construct all of the vertices for this subdivision

		for ( i = 0; i <= cols; i ++ ) {

			v[ i ] = [];

			var aj = a.clone().lerp( c, i / cols );
			var bj = b.clone().lerp( c, i / cols );

			var rows = cols - i;

			for ( j = 0; j <= rows; j ++ ) {

				if ( j === 0 && i === cols ) {

					v[ i ][ j ] = aj;

				} else {

					v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

				}

			}

		}

		// construct all of the faces

		for ( i = 0; i < cols; i ++ ) {

			for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

				var k = Math.floor( j / 2 );

				if ( j % 2 === 0 ) {

					pushVertex( v[ i ][ k + 1 ] );
					pushVertex( v[ i + 1 ][ k ] );
					pushVertex( v[ i ][ k ] );

				} else {

					pushVertex( v[ i ][ k + 1 ] );
					pushVertex( v[ i + 1 ][ k + 1 ] );
					pushVertex( v[ i + 1 ][ k ] );

				}

			}

		}

	}

	function appplyRadius( radius ) {

		var vertex = new Vector3();

		// iterate over the entire buffer and apply the radius to each vertex

		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

			vertex.x = vertexBuffer[ i + 0 ];
			vertex.y = vertexBuffer[ i + 1 ];
			vertex.z = vertexBuffer[ i + 2 ];

			vertex.normalize().multiplyScalar( radius );

			vertexBuffer[ i + 0 ] = vertex.x;
			vertexBuffer[ i + 1 ] = vertex.y;
			vertexBuffer[ i + 2 ] = vertex.z;

		}

	}

	function generateUVs() {

		var vertex = new Vector3();

		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

			vertex.x = vertexBuffer[ i + 0 ];
			vertex.y = vertexBuffer[ i + 1 ];
			vertex.z = vertexBuffer[ i + 2 ];

			var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
			var v = inclination( vertex ) / Math.PI + 0.5;
			uvBuffer.push( u, 1 - v );

		}

		correctUVs();

		correctSeam();

	}

	function correctSeam() {

		// handle case when face straddles the seam, see #3269

		for ( var i = 0; i < uvBuffer.length; i += 6 ) {

			// uv data of a single face

			var x0 = uvBuffer[ i + 0 ];
			var x1 = uvBuffer[ i + 2 ];
			var x2 = uvBuffer[ i + 4 ];

			var max = Math.max( x0, x1, x2 );
			var min = Math.min( x0, x1, x2 );

			// 0.9 is somewhat arbitrary

			if ( max > 0.9 && min < 0.1 ) {

				if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
				if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
				if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;

			}

		}

	}

	function pushVertex( vertex ) {

		vertexBuffer.push( vertex.x, vertex.y, vertex.z );

	}

	function getVertexByIndex( index, vertex ) {

		var stride = index * 3;

		vertex.x = vertices[ stride + 0 ];
		vertex.y = vertices[ stride + 1 ];
		vertex.z = vertices[ stride + 2 ];

	}

	function correctUVs() {

		var a = new Vector3();
		var b = new Vector3();
		var c = new Vector3();

		var centroid = new Vector3();

		var uvA = new Vector2();
		var uvB = new Vector2();
		var uvC = new Vector2();

		for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

			a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
			b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
			c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

			uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
			uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
			uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

			centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

			var azi = azimuth( centroid );

			correctUV( uvA, j + 0, a, azi );
			correctUV( uvB, j + 2, b, azi );
			correctUV( uvC, j + 4, c, azi );

		}

	}

	function correctUV( uv, stride, vector, azimuth ) {

		if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

			uvBuffer[ stride ] = uv.x - 1;

		}

		if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

			uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

		}

	}

	// Angle around the Y axis, counter-clockwise when looking from above.

	function azimuth( vector ) {

		return Math.atan2( vector.z, - vector.x );

	}


	// Angle above the XZ plane.

	function inclination( vector ) {

		return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

	}

}

PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */

// TetrahedronGeometry

function TetrahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'TetrahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

// TetrahedronBufferGeometry

function TetrahedronBufferGeometry( radius, detail ) {

	var vertices = [
		1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
	];

	var indices = [
		2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'TetrahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */

// OctahedronGeometry

function OctahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'OctahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

OctahedronGeometry.prototype = Object.create( Geometry.prototype );
OctahedronGeometry.prototype.constructor = OctahedronGeometry;

// OctahedronBufferGeometry

function OctahedronBufferGeometry( radius, detail ) {

	var vertices = [
		1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
		0, - 1, 0, 	0, 0, 1,	0, 0, - 1
	];

	var indices = [
		0, 2, 4,	0, 4, 3,	0, 3, 5,
		0, 5, 2,	1, 2, 5,	1, 5, 3,
		1, 3, 4,	1, 4, 2
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'OctahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */

// IcosahedronGeometry

function IcosahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'IcosahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

// IcosahedronBufferGeometry

function IcosahedronBufferGeometry( radius, detail ) {

	var t = ( 1 + Math.sqrt( 5 ) ) / 2;

	var vertices = [
		- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
		 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
		 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
	];

	var indices = [
		 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
		 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
		 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
		 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'IcosahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

/**
 * @author Abe Pazos / https://hamoid.com
 * @author Mugen87 / https://github.com/Mugen87
 */

// DodecahedronGeometry

function DodecahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'DodecahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

// DodecahedronBufferGeometry

function DodecahedronBufferGeometry( radius, detail ) {

	var t = ( 1 + Math.sqrt( 5 ) ) / 2;
	var r = 1 / t;

	var vertices = [

		// (±1, ±1, ±1)
		- 1, - 1, - 1,	- 1, - 1, 1,
		- 1, 1, - 1, - 1, 1, 1,
		1, - 1, - 1, 1, - 1, 1,
		1, 1, - 1, 1, 1, 1,

		// (0, ±1/φ, ±φ)
		 0, - r, - t, 0, - r, t,
		 0, r, - t, 0, r, t,

		// (±1/φ, ±φ, 0)
		- r, - t, 0, - r, t, 0,
		 r, - t, 0, r, t, 0,

		// (±φ, 0, ±1/φ)
		- t, 0, - r, t, 0, - r,
		- t, 0, r, t, 0, r
	];

	var indices = [
		3, 11, 7, 	3, 7, 15, 	3, 15, 13,
		7, 19, 17, 	7, 17, 6, 	7, 6, 15,
		17, 4, 8, 	17, 8, 10, 	17, 10, 6,
		8, 0, 16, 	8, 16, 2, 	8, 2, 10,
		0, 12, 1, 	0, 1, 18, 	0, 18, 16,
		6, 10, 2, 	6, 2, 13, 	6, 13, 15,
		2, 16, 18, 	2, 18, 3, 	2, 3, 13,
		18, 1, 9, 	18, 9, 11, 	18, 11, 3,
		4, 14, 12, 	4, 12, 0, 	4, 0, 8,
		11, 9, 5, 	11, 5, 19, 	11, 19, 7,
		19, 5, 14, 	19, 14, 4, 	19, 4, 17,
		1, 12, 14, 	1, 14, 5, 	1, 5, 9
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'DodecahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

/**
 * @author oosmoxiecode / https://github.com/oosmoxiecode
 * @author WestLangley / https://github.com/WestLangley
 * @author zz85 / https://github.com/zz85
 * @author miningold / https://github.com/miningold
 * @author jonobr1 / https://github.com/jonobr1
 * @author Mugen87 / https://github.com/Mugen87
 *
 */

// TubeGeometry

function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

	Geometry.call( this );

	this.type = 'TubeGeometry';

	this.parameters = {
		path: path,
		tubularSegments: tubularSegments,
		radius: radius,
		radialSegments: radialSegments,
		closed: closed
	};

	if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );

	var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

	// expose internals

	this.tangents = bufferGeometry.tangents;
	this.normals = bufferGeometry.normals;
	this.binormals = bufferGeometry.binormals;

	// create geometry

	this.fromBufferGeometry( bufferGeometry );
	this.mergeVertices();

}

TubeGeometry.prototype = Object.create( Geometry.prototype );
TubeGeometry.prototype.constructor = TubeGeometry;

// TubeBufferGeometry

function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

	BufferGeometry.call( this );

	this.type = 'TubeBufferGeometry';

	this.parameters = {
		path: path,
		tubularSegments: tubularSegments,
		radius: radius,
		radialSegments: radialSegments,
		closed: closed
	};

	tubularSegments = tubularSegments || 64;
	radius = radius || 1;
	radialSegments = radialSegments || 8;
	closed = closed || false;

	var frames = path.computeFrenetFrames( tubularSegments, closed );

	// expose internals

	this.tangents = frames.tangents;
	this.normals = frames.normals;
	this.binormals = frames.binormals;

	// helper variables

	var vertex = new Vector3();
	var normal = new Vector3();
	var uv = new Vector2();
	var P = new Vector3();

	var i, j;

	// buffer

	var vertices = [];
	var normals = [];
	var uvs = [];
	var indices = [];

	// create buffer data

	generateBufferData();

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	// functions

	function generateBufferData() {

		for ( i = 0; i < tubularSegments; i ++ ) {

			generateSegment( i );

		}

		// if the geometry is not closed, generate the last row of vertices and normals
		// at the regular position on the given path
		//
		// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

		generateSegment( ( closed === false ) ? tubularSegments : 0 );

		// uvs are generated in a separate function.
		// this makes it easy compute correct values for closed geometries

		generateUVs();

		// finally create faces

		generateIndices();

	}

	function generateSegment( i ) {

		// we use getPointAt to sample evenly distributed points from the given path

		P = path.getPointAt( i / tubularSegments, P );

		// retrieve corresponding normal and binormal

		var N = frames.normals[ i ];
		var B = frames.binormals[ i ];

		// generate normals and vertices for the current segment

		for ( j = 0; j <= radialSegments; j ++ ) {

			var v = j / radialSegments * Math.PI * 2;

			var sin = Math.sin( v );
			var cos = - Math.cos( v );

			// normal

			normal.x = ( cos * N.x + sin * B.x );
			normal.y = ( cos * N.y + sin * B.y );
			normal.z = ( cos * N.z + sin * B.z );
			normal.normalize();

			normals.push( normal.x, normal.y, normal.z );

			// vertex

			vertex.x = P.x + radius * normal.x;
			vertex.y = P.y + radius * normal.y;
			vertex.z = P.z + radius * normal.z;

			vertices.push( vertex.x, vertex.y, vertex.z );

		}

	}

	function generateIndices() {

		for ( j = 1; j <= tubularSegments; j ++ ) {

			for ( i = 1; i <= radialSegments; i ++ ) {

				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				var b = ( radialSegments + 1 ) * j + ( i - 1 );
				var c = ( radialSegments + 1 ) * j + i;
				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

	}

	function generateUVs() {

		for ( i = 0; i <= tubularSegments; i ++ ) {

			for ( j = 0; j <= radialSegments; j ++ ) {

				uv.x = i / tubularSegments;
				uv.y = j / radialSegments;

				uvs.push( uv.x, uv.y );

			}

		}

	}

}

TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

/**
 * @author oosmoxiecode
 * @author Mugen87 / https://github.com/Mugen87
 *
 * based on http://www.blackpawn.com/texts/pqtorus/
 */

// TorusKnotGeometry

function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

	Geometry.call( this );

	this.type = 'TorusKnotGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		tubularSegments: tubularSegments,
		radialSegments: radialSegments,
		p: p,
		q: q
	};

	if ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

	this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
	this.mergeVertices();

}

TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

// TorusKnotBufferGeometry

function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

	BufferGeometry.call( this );

	this.type = 'TorusKnotBufferGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		tubularSegments: tubularSegments,
		radialSegments: radialSegments,
		p: p,
		q: q
	};

	radius = radius || 1;
	tube = tube || 0.4;
	tubularSegments = Math.floor( tubularSegments ) || 64;
	radialSegments = Math.floor( radialSegments ) || 8;
	p = p || 2;
	q = q || 3;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var i, j;

	var vertex = new Vector3();
	var normal = new Vector3();

	var P1 = new Vector3();
	var P2 = new Vector3();

	var B = new Vector3();
	var T = new Vector3();
	var N = new Vector3();

	// generate vertices, normals and uvs

	for ( i = 0; i <= tubularSegments; ++ i ) {

		// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

		var u = i / tubularSegments * p * Math.PI * 2;

		// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
		// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

		calculatePositionOnCurve( u, p, q, radius, P1 );
		calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

		// calculate orthonormal basis

		T.subVectors( P2, P1 );
		N.addVectors( P2, P1 );
		B.crossVectors( T, N );
		N.crossVectors( B, T );

		// normalize B, N. T can be ignored, we don't use it

		B.normalize();
		N.normalize();

		for ( j = 0; j <= radialSegments; ++ j ) {

			// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
			// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

			var v = j / radialSegments * Math.PI * 2;
			var cx = - tube * Math.cos( v );
			var cy = tube * Math.sin( v );

			// now calculate the final vertex position.
			// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

			vertex.x = P1.x + ( cx * N.x + cy * B.x );
			vertex.y = P1.y + ( cx * N.y + cy * B.y );
			vertex.z = P1.z + ( cx * N.z + cy * B.z );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

			normal.subVectors( vertex, P1 ).normalize();

			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( i / tubularSegments );
			uvs.push( j / radialSegments );

		}

	}

	// generate indices

	for ( j = 1; j <= tubularSegments; j ++ ) {

		for ( i = 1; i <= radialSegments; i ++ ) {

			// indices

			var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
			var b = ( radialSegments + 1 ) * j + ( i - 1 );
			var c = ( radialSegments + 1 ) * j + i;
			var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	// this function calculates the current position on the torus curve

	function calculatePositionOnCurve( u, p, q, radius, position ) {

		var cu = Math.cos( u );
		var su = Math.sin( u );
		var quOverP = q / p * u;
		var cs = Math.cos( quOverP );

		position.x = radius * ( 2 + cs ) * 0.5 * cu;
		position.y = radius * ( 2 + cs ) * su * 0.5;
		position.z = radius * Math.sin( quOverP ) * 0.5;

	}

}

TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

/**
 * @author oosmoxiecode
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// TorusGeometry

function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

	Geometry.call( this );

	this.type = 'TorusGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		radialSegments: radialSegments,
		tubularSegments: tubularSegments,
		arc: arc
	};

	this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
	this.mergeVertices();

}

TorusGeometry.prototype = Object.create( Geometry.prototype );
TorusGeometry.prototype.constructor = TorusGeometry;

// TorusBufferGeometry

function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

	BufferGeometry.call( this );

	this.type = 'TorusBufferGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		radialSegments: radialSegments,
		tubularSegments: tubularSegments,
		arc: arc
	};

	radius = radius || 1;
	tube = tube || 0.4;
	radialSegments = Math.floor( radialSegments ) || 8;
	tubularSegments = Math.floor( tubularSegments ) || 6;
	arc = arc || Math.PI * 2;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var center = new Vector3();
	var vertex = new Vector3();
	var normal = new Vector3();

	var j, i;

	// generate vertices, normals and uvs

	for ( j = 0; j <= radialSegments; j ++ ) {

		for ( i = 0; i <= tubularSegments; i ++ ) {

			var u = i / tubularSegments * arc;
			var v = j / radialSegments * Math.PI * 2;

			// vertex

			vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
			vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
			vertex.z = tube * Math.sin( v );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			center.x = radius * Math.cos( u );
			center.y = radius * Math.sin( u );
			normal.subVectors( vertex, center ).normalize();

			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( i / tubularSegments );
			uvs.push( j / radialSegments );

		}

	}

	// generate indices

	for ( j = 1; j <= radialSegments; j ++ ) {

		for ( i = 1; i <= tubularSegments; i ++ ) {

			// indices

			var a = ( tubularSegments + 1 ) * j + i - 1;
			var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
			var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
			var d = ( tubularSegments + 1 ) * j + i;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

/**
 * @author Mugen87 / https://github.com/Mugen87
 * Port from https://github.com/mapbox/earcut (v2.1.2)
 */

var Earcut = {

	triangulate: function ( data, holeIndices, dim ) {

		dim = dim || 2;

		var hasHoles = holeIndices && holeIndices.length,
			outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,
			outerNode = linkedList( data, 0, outerLen, dim, true ),
			triangles = [];

		if ( ! outerNode ) return triangles;

		var minX, minY, maxX, maxY, x, y, invSize;

		if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );

		// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox

		if ( data.length > 80 * dim ) {

			minX = maxX = data[ 0 ];
			minY = maxY = data[ 1 ];

			for ( var i = dim; i < outerLen; i += dim ) {

				x = data[ i ];
				y = data[ i + 1 ];
				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;

			}

			// minX, minY and invSize are later used to transform coords into integers for z-order calculation

			invSize = Math.max( maxX - minX, maxY - minY );
			invSize = invSize !== 0 ? 1 / invSize : 0;

		}

		earcutLinked( outerNode, triangles, dim, minX, minY, invSize );

		return triangles;

	}

};

// create a circular doubly linked list from polygon points in the specified winding order

function linkedList( data, start, end, dim, clockwise ) {

	var i, last;

	if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {

		for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

	} else {

		for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

	}

	if ( last && equals( last, last.next ) ) {

		removeNode( last );
		last = last.next;

	}

	return last;

}

// eliminate colinear or duplicate points

function filterPoints( start, end ) {

	if ( ! start ) return start;
	if ( ! end ) end = start;

	var p = start, again;

	do {

		again = false;

		if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {

			removeNode( p );
			p = end = p.prev;
			if ( p === p.next ) break;
			again = true;

		} else {

			p = p.next;

		}

	} while ( again || p !== end );

	return end;

}

// main ear slicing loop which triangulates a polygon (given as a linked list)

function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {

	if ( ! ear ) return;

	// interlink polygon nodes in z-order

	if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );

	var stop = ear, prev, next;

	// iterate through ears, slicing them one by one

	while ( ear.prev !== ear.next ) {

		prev = ear.prev;
		next = ear.next;

		if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {

			// cut off the triangle
			triangles.push( prev.i / dim );
			triangles.push( ear.i / dim );
			triangles.push( next.i / dim );

			removeNode( ear );

			// skipping the next vertice leads to less sliver triangles
			ear = next.next;
			stop = next.next;

			continue;

		}

		ear = next;

		// if we looped through the whole remaining polygon and can't find any more ears

		if ( ear === stop ) {

			// try filtering points and slicing again

			if ( ! pass ) {

				earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );

				// if this didn't work, try curing all small self-intersections locally

			} else if ( pass === 1 ) {

				ear = cureLocalIntersections( ear, triangles, dim );
				earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );

			// as a last resort, try splitting the remaining polygon into two

			} else if ( pass === 2 ) {

				splitEarcut( ear, triangles, dim, minX, minY, invSize );

			}

			break;

		}

	}

}

// check whether a polygon node forms a valid ear with adjacent nodes

function isEar( ear ) {

	var a = ear.prev,
		b = ear,
		c = ear.next;

	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

	// now make sure we don't have other points inside the potential ear
	var p = ear.next.next;

	while ( p !== ear.prev ) {

		if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {

			return false;

		}

		p = p.next;

	}

	return true;

}

function isEarHashed( ear, minX, minY, invSize ) {

	var a = ear.prev,
		b = ear,
		c = ear.next;

	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

	// triangle bbox; min & max are calculated like this for speed

	var minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
		minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
		maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
		maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );

	// z-order range for the current triangle bbox;

	var minZ = zOrder( minTX, minTY, minX, minY, invSize ),
		maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );

	// first look for points inside the triangle in increasing z-order

	var p = ear.nextZ;

	while ( p && p.z <= maxZ ) {

		if ( p !== ear.prev && p !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
				area( p.prev, p, p.next ) >= 0 ) return false;
		p = p.nextZ;

	}

	// then look for points in decreasing z-order

	p = ear.prevZ;

	while ( p && p.z >= minZ ) {

		if ( p !== ear.prev && p !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
				area( p.prev, p, p.next ) >= 0 ) return false;

		p = p.prevZ;

	}

	return true;

}

// go through all polygon nodes and cure small local self-intersections

function cureLocalIntersections( start, triangles, dim ) {

	var p = start;

	do {

		var a = p.prev, b = p.next.next;

		if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {

			triangles.push( a.i / dim );
			triangles.push( p.i / dim );
			triangles.push( b.i / dim );

			// remove two nodes involved

			removeNode( p );
			removeNode( p.next );

			p = start = b;

		}

		p = p.next;

	} while ( p !== start );

	return p;

}

// try splitting polygon into two and triangulate them independently

function splitEarcut( start, triangles, dim, minX, minY, invSize ) {

	// look for a valid diagonal that divides the polygon into two

	var a = start;

	do {

		var b = a.next.next;

		while ( b !== a.prev ) {

			if ( a.i !== b.i && isValidDiagonal( a, b ) ) {

				// split the polygon in two by the diagonal

				var c = splitPolygon( a, b );

				// filter colinear points around the cuts

				a = filterPoints( a, a.next );
				c = filterPoints( c, c.next );

				// run earcut on each half

				earcutLinked( a, triangles, dim, minX, minY, invSize );
				earcutLinked( c, triangles, dim, minX, minY, invSize );
				return;

			}

			b = b.next;

		}

		a = a.next;

	} while ( a !== start );

}

// link every hole into the outer loop, producing a single-ring polygon without holes

function eliminateHoles( data, holeIndices, outerNode, dim ) {

	var queue = [], i, len, start, end, list;

	for ( i = 0, len = holeIndices.length; i < len; i ++ ) {

		start = holeIndices[ i ] * dim;
		end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
		list = linkedList( data, start, end, dim, false );
		if ( list === list.next ) list.steiner = true;
		queue.push( getLeftmost( list ) );

	}

	queue.sort( compareX );

	// process holes from left to right

	for ( i = 0; i < queue.length; i ++ ) {

		eliminateHole( queue[ i ], outerNode );
		outerNode = filterPoints( outerNode, outerNode.next );

	}

	return outerNode;

}

function compareX( a, b ) {

	return a.x - b.x;

}

// find a bridge between vertices that connects hole with an outer ring and and link it

function eliminateHole( hole, outerNode ) {

	outerNode = findHoleBridge( hole, outerNode );

	if ( outerNode ) {

		var b = splitPolygon( outerNode, hole );

		filterPoints( b, b.next );

	}

}

// David Eberly's algorithm for finding a bridge between hole and outer polygon

function findHoleBridge( hole, outerNode ) {

	var p = outerNode,
		hx = hole.x,
		hy = hole.y,
		qx = - Infinity,
		m;

	// find a segment intersected by a ray from the hole's leftmost point to the left;
	// segment's endpoint with lesser x will be potential connection point

	do {

		if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {

			var x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );

			if ( x <= hx && x > qx ) {

				qx = x;

				if ( x === hx ) {

					if ( hy === p.y ) return p;
					if ( hy === p.next.y ) return p.next;

				}

				m = p.x < p.next.x ? p : p.next;

			}

		}

		p = p.next;

	} while ( p !== outerNode );

	if ( ! m ) return null;

	if ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint

	// look for points inside the triangle of hole point, segment intersection and endpoint;
	// if there are no points found, we have a valid connection;
	// otherwise choose the point of the minimum angle with the ray as connection point

	var stop = m,
		mx = m.x,
		my = m.y,
		tanMin = Infinity,
		tan;

	p = m.next;

	while ( p !== stop ) {

		if ( hx >= p.x && p.x >= mx && hx !== p.x &&
						pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {

			tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential

			if ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {

				m = p;
				tanMin = tan;

			}

		}

		p = p.next;

	}

	return m;

}

// interlink polygon nodes in z-order

function indexCurve( start, minX, minY, invSize ) {

	var p = start;

	do {

		if ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );
		p.prevZ = p.prev;
		p.nextZ = p.next;
		p = p.next;

	} while ( p !== start );

	p.prevZ.nextZ = null;
	p.prevZ = null;

	sortLinked( p );

}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html

function sortLinked( list ) {

	var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;

	do {

		p = list;
		list = null;
		tail = null;
		numMerges = 0;

		while ( p ) {

			numMerges ++;
			q = p;
			pSize = 0;

			for ( i = 0; i < inSize; i ++ ) {

				pSize ++;
				q = q.nextZ;
				if ( ! q ) break;

			}

			qSize = inSize;

			while ( pSize > 0 || ( qSize > 0 && q ) ) {

				if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {

					e = p;
					p = p.nextZ;
					pSize --;

				} else {

					e = q;
					q = q.nextZ;
					qSize --;

				}

				if ( tail ) tail.nextZ = e;
				else list = e;

				e.prevZ = tail;
				tail = e;

			}

			p = q;

		}

		tail.nextZ = null;
		inSize *= 2;

	} while ( numMerges > 1 );

	return list;

}

// z-order of a point given coords and inverse of the longer side of data bbox

function zOrder( x, y, minX, minY, invSize ) {

	// coords are transformed into non-negative 15-bit integer range

	x = 32767 * ( x - minX ) * invSize;
	y = 32767 * ( y - minY ) * invSize;

	x = ( x | ( x << 8 ) ) & 0x00FF00FF;
	x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
	x = ( x | ( x << 2 ) ) & 0x33333333;
	x = ( x | ( x << 1 ) ) & 0x55555555;

	y = ( y | ( y << 8 ) ) & 0x00FF00FF;
	y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
	y = ( y | ( y << 2 ) ) & 0x33333333;
	y = ( y | ( y << 1 ) ) & 0x55555555;

	return x | ( y << 1 );

}

// find the leftmost node of a polygon ring

function getLeftmost( start ) {

	var p = start, leftmost = start;

	do {

		if ( p.x < leftmost.x ) leftmost = p;
		p = p.next;

	} while ( p !== start );

	return leftmost;

}

// check if a point lies within a convex triangle

function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {

	return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
	 ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
	 ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;

}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)

function isValidDiagonal( a, b ) {

	return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&
		locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );

}

// signed area of a triangle

function area( p, q, r ) {

	return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );

}

// check if two points are equal

function equals( p1, p2 ) {

	return p1.x === p2.x && p1.y === p2.y;

}

// check if two segments intersect

function intersects( p1, q1, p2, q2 ) {

	if ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||
			( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;

	return area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&
				 area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;

}

// check if a polygon diagonal intersects any polygon segments

function intersectsPolygon( a, b ) {

	var p = a;

	do {

		if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
						intersects( p, p.next, a, b ) ) {

			return true;

		}

		p = p.next;

	} while ( p !== a );

	return false;

}

// check if a polygon diagonal is locally inside the polygon

function locallyInside( a, b ) {

	return area( a.prev, a, a.next ) < 0 ?
		area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
		area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;

}

// check if the middle point of a polygon diagonal is inside the polygon

function middleInside( a, b ) {

	var p = a,
		inside = false,
		px = ( a.x + b.x ) / 2,
		py = ( a.y + b.y ) / 2;

	do {

		if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
						( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {

			inside = ! inside;

		}

		p = p.next;

	} while ( p !== a );

	return inside;

}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring

function splitPolygon( a, b ) {

	var a2 = new Node( a.i, a.x, a.y ),
		b2 = new Node( b.i, b.x, b.y ),
		an = a.next,
		bp = b.prev;

	a.next = b;
	b.prev = a;

	a2.next = an;
	an.prev = a2;

	b2.next = a2;
	a2.prev = b2;

	bp.next = b2;
	b2.prev = bp;

	return b2;

}

// create a node and optionally link it with previous one (in a circular doubly linked list)

function insertNode( i, x, y, last ) {

	var p = new Node( i, x, y );

	if ( ! last ) {

		p.prev = p;
		p.next = p;

	} else {

		p.next = last.next;
		p.prev = last;
		last.next.prev = p;
		last.next = p;

	}

	return p;

}

function removeNode( p ) {

	p.next.prev = p.prev;
	p.prev.next = p.next;

	if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;
	if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;

}

function Node( i, x, y ) {

	// vertice index in coordinates array
	this.i = i;

	// vertex coordinates
	this.x = x;
	this.y = y;

	// previous and next vertice nodes in a polygon ring
	this.prev = null;
	this.next = null;

	// z-order curve value
	this.z = null;

	// previous and next nodes in z-order
	this.prevZ = null;
	this.nextZ = null;

	// indicates whether this is a steiner point
	this.steiner = false;

}

function signedArea( data, start, end, dim ) {

	var sum = 0;

	for ( var i = start, j = end - dim; i < end; i += dim ) {

		sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
		j = i;

	}

	return sum;

}

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

var ShapeUtils = {

	// calculate area of the contour polygon

	area: function ( contour ) {

		var n = contour.length;
		var a = 0.0;

		for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

		}

		return a * 0.5;

	},

	isClockWise: function ( pts ) {

		return ShapeUtils.area( pts ) < 0;

	},

	triangulateShape: function ( contour, holes ) {

		function removeDupEndPts( points ) {

			var l = points.length;

			if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

				points.pop();

			}

		}

		function addContour( vertices, contour ) {

			for ( var i = 0; i < contour.length; i ++ ) {

				vertices.push( contour[ i ].x );
				vertices.push( contour[ i ].y );

			}

		}

		var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
		var holeIndices = []; // array of hole indices
		var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

		removeDupEndPts( contour );
		addContour( vertices, contour );

		//

		var holeIndex = contour.length;
		holes.forEach( removeDupEndPts );

		for ( i = 0; i < holes.length; i ++ ) {

			holeIndices.push( holeIndex );
			holeIndex += holes[ i ].length;
			addContour( vertices, holes[ i ] );

		}

		//

		var triangles = Earcut.triangulate( vertices, holeIndices );

		//

		for ( var i = 0; i < triangles.length; i += 3 ) {

			faces.push( triangles.slice( i, i + 3 ) );

		}

		return faces;

	}

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  amount: <int>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline is bevel
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *  frames: <Object> // containing arrays of tangents, normals, binormals
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */

// ExtrudeGeometry

function ExtrudeGeometry( shapes, options ) {

	Geometry.call( this );

	this.type = 'ExtrudeGeometry';

	this.parameters = {
		shapes: shapes,
		options: options
	};

	this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
	this.mergeVertices();

}

ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

// ExtrudeBufferGeometry

function ExtrudeBufferGeometry( shapes, options ) {

	if ( typeof ( shapes ) === "undefined" ) {

		return;

	}

	BufferGeometry.call( this );

	this.type = 'ExtrudeBufferGeometry';

	shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

	this.addShapeList( shapes, options );

	this.computeVertexNormals();

	// can't really use automatic vertex normals
	// as then front and back sides get smoothed too
	// should do separate smoothing just for sides

	//this.computeVertexNormals();

	//console.log( "took", ( Date.now() - startTime ) );

}

ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

ExtrudeBufferGeometry.prototype.getArrays = function () {

	var positionAttribute = this.getAttribute( "position" );
	var verticesArray = positionAttribute ? Array.prototype.slice.call( positionAttribute.array ) : [];

	var uvAttribute = this.getAttribute( "uv" );
	var uvArray = uvAttribute ? Array.prototype.slice.call( uvAttribute.array ) : [];

	var IndexAttribute = this.index;
	var indicesArray = IndexAttribute ? Array.prototype.slice.call( IndexAttribute.array ) : [];

	return {
		position: verticesArray,
		uv: uvArray,
		index: indicesArray
	};

};

ExtrudeBufferGeometry.prototype.addShapeList = function ( shapes, options ) {

	var sl = shapes.length;
	options.arrays = this.getArrays();

	for ( var s = 0; s < sl; s ++ ) {

		var shape = shapes[ s ];
		this.addShape( shape, options );

	}

	this.setIndex( options.arrays.index );
	this.addAttribute( 'position', new Float32BufferAttribute( options.arrays.position, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );

};

ExtrudeBufferGeometry.prototype.addShape = function ( shape, options ) {

	var arrays = options.arrays ? options.arrays : this.getArrays();
	var verticesArray = arrays.position;
	var indicesArray = arrays.index;
	var uvArray = arrays.uv;

	var placeholder = [];


	var amount = options.amount !== undefined ? options.amount : 100;

	var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
	var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
	var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

	var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

	var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

	var steps = options.steps !== undefined ? options.steps : 1;

	var extrudePath = options.extrudePath;
	var extrudePts, extrudeByPath = false;

	// Use default WorldUVGenerator if no UV generators are specified.
	var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;

	var splineTube, binormal, normal, position2;
	if ( extrudePath ) {

		extrudePts = extrudePath.getSpacedPoints( steps );

		extrudeByPath = true;
		bevelEnabled = false; // bevels not supported for path extrusion

		// SETUP TNB variables

		// TODO1 - have a .isClosed in spline?

		splineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );

		// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

		binormal = new Vector3();
		normal = new Vector3();
		position2 = new Vector3();

	}

	// Safeguards if bevels are not enabled

	if ( ! bevelEnabled ) {

		bevelSegments = 0;
		bevelThickness = 0;
		bevelSize = 0;

	}

	// Variables initialization

	var ahole, h, hl; // looping of holes
	var scope = this;

	var shapePoints = shape.extractPoints( curveSegments );

	var vertices = shapePoints.shape;
	var holes = shapePoints.holes;

	var reverse = ! ShapeUtils.isClockWise( vertices );

	if ( reverse ) {

		vertices = vertices.reverse();

		// Maybe we should also check if holes are in the opposite direction, just to be safe ...

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			if ( ShapeUtils.isClockWise( ahole ) ) {

				holes[ h ] = ahole.reverse();

			}

		}

	}


	var faces = ShapeUtils.triangulateShape( vertices, holes );

	/* Vertices */

	var contour = vertices; // vertices has all points but contour has only points of circumference

	for ( h = 0, hl = holes.length; h < hl; h ++ ) {

		ahole = holes[ h ];

		vertices = vertices.concat( ahole );

	}


	function scalePt2( pt, vec, size ) {

		if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

		return vec.clone().multiplyScalar( size ).add( pt );

	}

	var b, bs, t, z,
		vert, vlen = vertices.length,
		face, flen = faces.length;


	// Find directions for point movement


	function getBevelVec( inPt, inPrev, inNext ) {

		// computes for inPt the corresponding point inPt' on a new contour
		//   shifted by 1 unit (length of normalized vector) to the left
		// if we walk along contour clockwise, this new contour is outside the old one
		//
		// inPt' is the intersection of the two lines parallel to the two
		//  adjacent edges of inPt at a distance of 1 unit on the left side.

		var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

		// good reading for geometry algorithms (here: line-line intersection)
		// http://geomalgorithms.com/a05-_intersect-1.html

		var v_prev_x = inPt.x - inPrev.x,
			v_prev_y = inPt.y - inPrev.y;
		var v_next_x = inNext.x - inPt.x,
			v_next_y = inNext.y - inPt.y;

		var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

		// check for collinear edges
		var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

		if ( Math.abs( collinear0 ) > Number.EPSILON ) {

			// not collinear

			// length of vectors for normalizing

			var v_prev_len = Math.sqrt( v_prev_lensq );
			var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

			// shift adjacent points by unit vectors to the left

			var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
			var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

			var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
			var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

			// scaling factor for v_prev to intersection point

			var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
					( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
				( v_prev_x * v_next_y - v_prev_y * v_next_x );

			// vector from inPt to intersection point

			v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
			v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

			// Don't normalize!, otherwise sharp corners become ugly
			//  but prevent crazy spikes
			var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
			if ( v_trans_lensq <= 2 ) {

				return new Vector2( v_trans_x, v_trans_y );

			} else {

				shrink_by = Math.sqrt( v_trans_lensq / 2 );

			}

		} else {

			// handle special case of collinear edges

			var direction_eq = false; // assumes: opposite
			if ( v_prev_x > Number.EPSILON ) {

				if ( v_next_x > Number.EPSILON ) {

					direction_eq = true;

				}

			} else {

				if ( v_prev_x < - Number.EPSILON ) {

					if ( v_next_x < - Number.EPSILON ) {

						direction_eq = true;

					}

				} else {

					if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

						direction_eq = true;

					}

				}

			}

			if ( direction_eq ) {

				// console.log("Warning: lines are a straight sequence");
				v_trans_x = - v_prev_y;
				v_trans_y = v_prev_x;
				shrink_by = Math.sqrt( v_prev_lensq );

			} else {

				// console.log("Warning: lines are a straight spike");
				v_trans_x = v_prev_x;
				v_trans_y = v_prev_y;
				shrink_by = Math.sqrt( v_prev_lensq / 2 );

			}

		}

		return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

	}


	var contourMovements = [];

	for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

		if ( j === il ) j = 0;
		if ( k === il ) k = 0;

		//  (j)---(i)---(k)
		// console.log('i,j,k', i, j , k)

		contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

	}

	var holesMovements = [],
		oneHoleMovements, verticesMovements = contourMovements.concat();

	for ( h = 0, hl = holes.length; h < hl; h ++ ) {

		ahole = holes[ h ];

		oneHoleMovements = [];

		for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) j = 0;
			if ( k === il ) k = 0;

			//  (j)---(i)---(k)
			oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

		}

		holesMovements.push( oneHoleMovements );
		verticesMovements = verticesMovements.concat( oneHoleMovements );

	}


	// Loop bevelSegments, 1 for the front, 1 for the back

	for ( b = 0; b < bevelSegments; b ++ ) {

		//for ( b = bevelSegments; b > 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * Math.cos( t * Math.PI / 2 );
		bs = bevelSize * Math.sin( t * Math.PI / 2 );

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

			v( vert.x, vert.y, - z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i ++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

				v( vert.x, vert.y, - z );

			}

		}

	}

	bs = bevelSize;

	// Back facing vertices

	for ( i = 0; i < vlen; i ++ ) {

		vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

		if ( ! extrudeByPath ) {

			v( vert.x, vert.y, 0 );

		} else {

			// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

			normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
			binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

			position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

			v( position2.x, position2.y, position2.z );

		}

	}

	// Add stepped vertices...
	// Including front facing vertices

	var s;

	for ( s = 1; s <= steps; s ++ ) {

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( ! extrudeByPath ) {

				v( vert.x, vert.y, amount / steps * s );

			} else {

				// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

				normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

	}


	// Add bevel segments planes

	//for ( b = 1; b <= bevelSegments; b ++ ) {
	for ( b = bevelSegments - 1; b >= 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * Math.cos( t * Math.PI / 2 );
		bs = bevelSize * Math.sin( t * Math.PI / 2 );

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
			v( vert.x, vert.y, amount + z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i ++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, amount + z );

				} else {

					v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

				}

			}

		}

	}

	/* Faces */

	// Top and bottom faces

	buildLidFaces();

	// Sides faces

	buildSideFaces();


	/////  Internal functions

	function buildLidFaces() {

		var start = verticesArray.length / 3;

		if ( bevelEnabled ) {

			var layer = 0; // steps + 1
			var offset = vlen * layer;

			// Bottom faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

			}

			layer = steps + bevelSegments * 2;
			offset = vlen * layer;

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

			}

		} else {

			// Bottom faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 2 ], face[ 1 ], face[ 0 ] );

			}

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

			}

		}

		scope.addGroup( start, verticesArray.length / 3 - start, options.material !== undefined ? options.material : 0 );

	}

	// Create faces for the z-sides of the shape

	function buildSideFaces() {

		var start = verticesArray.length / 3;
		var layeroffset = 0;
		sidewalls( contour, layeroffset );
		layeroffset += contour.length;

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			sidewalls( ahole, layeroffset );

			//, true
			layeroffset += ahole.length;

		}


		scope.addGroup( start, verticesArray.length / 3 - start, options.extrudeMaterial !== undefined ? options.extrudeMaterial : 1 );


	}

	function sidewalls( contour, layeroffset ) {

		var j, k;
		i = contour.length;

		while ( -- i >= 0 ) {

			j = i;
			k = i - 1;
			if ( k < 0 ) k = contour.length - 1;

			//console.log('b', i,j, i-1, k,vertices.length);

			var s = 0,
				sl = steps + bevelSegments * 2;

			for ( s = 0; s < sl; s ++ ) {

				var slen1 = vlen * s;
				var slen2 = vlen * ( s + 1 );

				var a = layeroffset + j + slen1,
					b = layeroffset + k + slen1,
					c = layeroffset + k + slen2,
					d = layeroffset + j + slen2;

				f4( a, b, c, d );

			}

		}

	}

	function v( x, y, z ) {

		placeholder.push( x );
		placeholder.push( y );
		placeholder.push( z );

	}


	function f3( a, b, c ) {

		addVertex( a );
		addVertex( b );
		addVertex( c );

		var nextIndex = verticesArray.length / 3;
		var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

		addUV( uvs[ 0 ] );
		addUV( uvs[ 1 ] );
		addUV( uvs[ 2 ] );

	}

	function f4( a, b, c, d ) {

		addVertex( a );
		addVertex( b );
		addVertex( d );

		addVertex( b );
		addVertex( c );
		addVertex( d );


		var nextIndex = verticesArray.length / 3;
		var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

		addUV( uvs[ 0 ] );
		addUV( uvs[ 1 ] );
		addUV( uvs[ 3 ] );

		addUV( uvs[ 1 ] );
		addUV( uvs[ 2 ] );
		addUV( uvs[ 3 ] );

	}

	function addVertex( index ) {

		indicesArray.push( verticesArray.length / 3 );
		verticesArray.push( placeholder[ index * 3 + 0 ] );
		verticesArray.push( placeholder[ index * 3 + 1 ] );
		verticesArray.push( placeholder[ index * 3 + 2 ] );

	}


	function addUV( vector2 ) {

		uvArray.push( vector2.x );
		uvArray.push( vector2.y );

	}

	if ( ! options.arrays ) {

		this.setIndex( indicesArray );
		this.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );

	}

};

ExtrudeGeometry.WorldUVGenerator = {

	generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

		var a_x = vertices[ indexA * 3 ];
		var a_y = vertices[ indexA * 3 + 1 ];
		var b_x = vertices[ indexB * 3 ];
		var b_y = vertices[ indexB * 3 + 1 ];
		var c_x = vertices[ indexC * 3 ];
		var c_y = vertices[ indexC * 3 + 1 ];

		return [
			new Vector2( a_x, a_y ),
			new Vector2( b_x, b_y ),
			new Vector2( c_x, c_y )
		];

	},

	generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

		var a_x = vertices[ indexA * 3 ];
		var a_y = vertices[ indexA * 3 + 1 ];
		var a_z = vertices[ indexA * 3 + 2 ];
		var b_x = vertices[ indexB * 3 ];
		var b_y = vertices[ indexB * 3 + 1 ];
		var b_z = vertices[ indexB * 3 + 2 ];
		var c_x = vertices[ indexC * 3 ];
		var c_y = vertices[ indexC * 3 + 1 ];
		var c_z = vertices[ indexC * 3 + 2 ];
		var d_x = vertices[ indexD * 3 ];
		var d_y = vertices[ indexD * 3 + 1 ];
		var d_z = vertices[ indexD * 3 + 2 ];

		if ( Math.abs( a_y - b_y ) < 0.01 ) {

			return [
				new Vector2( a_x, 1 - a_z ),
				new Vector2( b_x, 1 - b_z ),
				new Vector2( c_x, 1 - c_z ),
				new Vector2( d_x, 1 - d_z )
			];

		} else {

			return [
				new Vector2( a_y, 1 - a_z ),
				new Vector2( b_y, 1 - b_z ),
				new Vector2( c_y, 1 - c_z ),
				new Vector2( d_y, 1 - d_z )
			];

		}

	}
};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * Text = 3D Text
 *
 * parameters = {
 *  font: <THREE.Font>, // font
 *
 *  size: <float>, // size of the text
 *  height: <float>, // thickness to extrude text
 *  curveSegments: <int>, // number of points on the curves
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into text bevel goes
 *  bevelSize: <float> // how far from text outline is bevel
 * }
 */

// TextGeometry

function TextGeometry( text, parameters ) {

	Geometry.call( this );

	this.type = 'TextGeometry';

	this.parameters = {
		text: text,
		parameters: parameters
	};

	this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
	this.mergeVertices();

}

TextGeometry.prototype = Object.create( Geometry.prototype );
TextGeometry.prototype.constructor = TextGeometry;

// TextBufferGeometry

function TextBufferGeometry( text, parameters ) {

	parameters = parameters || {};

	var font = parameters.font;

	if ( ! ( font && font.isFont ) ) {

		console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
		return new Geometry();

	}

	var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );

	// translate parameters to ExtrudeGeometry API

	parameters.amount = parameters.height !== undefined ? parameters.height : 50;

	// defaults

	if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
	if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
	if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

	ExtrudeBufferGeometry.call( this, shapes, parameters );

	this.type = 'TextBufferGeometry';

}

TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
TextBufferGeometry.prototype.constructor = TextBufferGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author benaadams / https://twitter.com/ben_a_adams
 * @author Mugen87 / https://github.com/Mugen87
 */

// SphereGeometry

function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'SphereGeometry';

	this.parameters = {
		radius: radius,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		phiStart: phiStart,
		phiLength: phiLength,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
	this.mergeVertices();

}

SphereGeometry.prototype = Object.create( Geometry.prototype );
SphereGeometry.prototype.constructor = SphereGeometry;

// SphereBufferGeometry

function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'SphereBufferGeometry';

	this.parameters = {
		radius: radius,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		phiStart: phiStart,
		phiLength: phiLength,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	radius = radius || 1;

	widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
	heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

	phiStart = phiStart !== undefined ? phiStart : 0;
	phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

	var thetaEnd = thetaStart + thetaLength;

	var ix, iy;

	var index = 0;
	var grid = [];

	var vertex = new Vector3();
	var normal = new Vector3();

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// generate vertices, normals and uvs

	for ( iy = 0; iy <= heightSegments; iy ++ ) {

		var verticesRow = [];

		var v = iy / heightSegments;

		for ( ix = 0; ix <= widthSegments; ix ++ ) {

			var u = ix / widthSegments;

			// vertex

			vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
			vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
			vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normal.set( vertex.x, vertex.y, vertex.z ).normalize();
			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( u, 1 - v );

			verticesRow.push( index ++ );

		}

		grid.push( verticesRow );

	}

	// indices

	for ( iy = 0; iy < heightSegments; iy ++ ) {

		for ( ix = 0; ix < widthSegments; ix ++ ) {

			var a = grid[ iy ][ ix + 1 ];
			var b = grid[ iy ][ ix ];
			var c = grid[ iy + 1 ][ ix ];
			var d = grid[ iy + 1 ][ ix + 1 ];

			if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
			if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

/**
 * @author Kaleb Murphy
 * @author Mugen87 / https://github.com/Mugen87
 */

// RingGeometry

function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'RingGeometry';

	this.parameters = {
		innerRadius: innerRadius,
		outerRadius: outerRadius,
		thetaSegments: thetaSegments,
		phiSegments: phiSegments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
	this.mergeVertices();

}

RingGeometry.prototype = Object.create( Geometry.prototype );
RingGeometry.prototype.constructor = RingGeometry;

// RingBufferGeometry

function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'RingBufferGeometry';

	this.parameters = {
		innerRadius: innerRadius,
		outerRadius: outerRadius,
		thetaSegments: thetaSegments,
		phiSegments: phiSegments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	innerRadius = innerRadius || 0.5;
	outerRadius = outerRadius || 1;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
	phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// some helper variables

	var segment;
	var radius = innerRadius;
	var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
	var vertex = new Vector3();
	var uv = new Vector2();
	var j, i;

	// generate vertices, normals and uvs

	for ( j = 0; j <= phiSegments; j ++ ) {

		for ( i = 0; i <= thetaSegments; i ++ ) {

			// values are generate from the inside of the ring to the outside

			segment = thetaStart + i / thetaSegments * thetaLength;

			// vertex

			vertex.x = radius * Math.cos( segment );
			vertex.y = radius * Math.sin( segment );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, 0, 1 );

			// uv

			uv.x = ( vertex.x / outerRadius + 1 ) / 2;
			uv.y = ( vertex.y / outerRadius + 1 ) / 2;

			uvs.push( uv.x, uv.y );

		}

		// increase the radius for next row of vertices

		radius += radiusStep;

	}

	// indices

	for ( j = 0; j < phiSegments; j ++ ) {

		var thetaSegmentLevel = j * ( thetaSegments + 1 );

		for ( i = 0; i < thetaSegments; i ++ ) {

			segment = i + thetaSegmentLevel;

			var a = segment;
			var b = segment + thetaSegments + 1;
			var c = segment + thetaSegments + 2;
			var d = segment + 1;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
RingBufferGeometry.prototype.constructor = RingBufferGeometry;

/**
 * @author astrodud / http://astrodud.isgreat.org/
 * @author zz85 / https://github.com/zz85
 * @author bhouston / http://clara.io
 * @author Mugen87 / https://github.com/Mugen87
 */

// LatheGeometry

function LatheGeometry( points, segments, phiStart, phiLength ) {

	Geometry.call( this );

	this.type = 'LatheGeometry';

	this.parameters = {
		points: points,
		segments: segments,
		phiStart: phiStart,
		phiLength: phiLength
	};

	this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
	this.mergeVertices();

}

LatheGeometry.prototype = Object.create( Geometry.prototype );
LatheGeometry.prototype.constructor = LatheGeometry;

// LatheBufferGeometry

function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

	BufferGeometry.call( this );

	this.type = 'LatheBufferGeometry';

	this.parameters = {
		points: points,
		segments: segments,
		phiStart: phiStart,
		phiLength: phiLength
	};

	segments = Math.floor( segments ) || 12;
	phiStart = phiStart || 0;
	phiLength = phiLength || Math.PI * 2;

	// clamp phiLength so it's in range of [ 0, 2PI ]

	phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );


	// buffers

	var indices = [];
	var vertices = [];
	var uvs = [];

	// helper variables

	var base;
	var inverseSegments = 1.0 / segments;
	var vertex = new Vector3();
	var uv = new Vector2();
	var i, j;

	// generate vertices and uvs

	for ( i = 0; i <= segments; i ++ ) {

		var phi = phiStart + i * inverseSegments * phiLength;

		var sin = Math.sin( phi );
		var cos = Math.cos( phi );

		for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

			// vertex

			vertex.x = points[ j ].x * sin;
			vertex.y = points[ j ].y;
			vertex.z = points[ j ].x * cos;

			vertices.push( vertex.x, vertex.y, vertex.z );

			// uv

			uv.x = i / segments;
			uv.y = j / ( points.length - 1 );

			uvs.push( uv.x, uv.y );


		}

	}

	// indices

	for ( i = 0; i < segments; i ++ ) {

		for ( j = 0; j < ( points.length - 1 ); j ++ ) {

			base = j + i * points.length;

			var a = base;
			var b = base + points.length;
			var c = base + points.length + 1;
			var d = base + 1;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	// generate normals

	this.computeVertexNormals();

	// if the geometry is closed, we need to average the normals along the seam.
	// because the corresponding vertices are identical (but still have different UVs).

	if ( phiLength === Math.PI * 2 ) {

		var normals = this.attributes.normal.array;
		var n1 = new Vector3();
		var n2 = new Vector3();
		var n = new Vector3();

		// this is the buffer offset for the last line of vertices

		base = segments * points.length * 3;

		for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

			// select the normal of the vertex in the first line

			n1.x = normals[ j + 0 ];
			n1.y = normals[ j + 1 ];
			n1.z = normals[ j + 2 ];

			// select the normal of the vertex in the last line

			n2.x = normals[ base + j + 0 ];
			n2.y = normals[ base + j + 1 ];
			n2.z = normals[ base + j + 2 ];

			// average normals

			n.addVectors( n1, n2 ).normalize();

			// assign the new values to both normals

			normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
			normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
			normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

		}

	}

}

LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

/**
 * @author jonobr1 / http://jonobr1.com
 * @author Mugen87 / https://github.com/Mugen87
 */

// ShapeGeometry

function ShapeGeometry( shapes, curveSegments ) {

	Geometry.call( this );

	this.type = 'ShapeGeometry';

	if ( typeof curveSegments === 'object' ) {

		console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );

		curveSegments = curveSegments.curveSegments;

	}

	this.parameters = {
		shapes: shapes,
		curveSegments: curveSegments
	};

	this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
	this.mergeVertices();

}

ShapeGeometry.prototype = Object.create( Geometry.prototype );
ShapeGeometry.prototype.constructor = ShapeGeometry;

ShapeGeometry.prototype.toJSON = function () {

	var data = Geometry.prototype.toJSON.call( this );

	var shapes = this.parameters.shapes;

	return toJSON( shapes, data );

};

// ShapeBufferGeometry

function ShapeBufferGeometry( shapes, curveSegments ) {

	BufferGeometry.call( this );

	this.type = 'ShapeBufferGeometry';

	this.parameters = {
		shapes: shapes,
		curveSegments: curveSegments
	};

	curveSegments = curveSegments || 12;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var groupStart = 0;
	var groupCount = 0;

	// allow single and array values for "shapes" parameter

	if ( Array.isArray( shapes ) === false ) {

		addShape( shapes );

	} else {

		for ( var i = 0; i < shapes.length; i ++ ) {

			addShape( shapes[ i ] );

			this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

			groupStart += groupCount;
			groupCount = 0;

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


	// helper functions

	function addShape( shape ) {

		var i, l, shapeHole;

		var indexOffset = vertices.length / 3;
		var points = shape.extractPoints( curveSegments );

		var shapeVertices = points.shape;
		var shapeHoles = points.holes;

		// check direction of vertices

		if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

			shapeVertices = shapeVertices.reverse();

			// also check if holes are in the opposite direction

			for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

				shapeHole = shapeHoles[ i ];

				if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

					shapeHoles[ i ] = shapeHole.reverse();

				}

			}

		}

		var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

		// join vertices of inner and outer paths to a single array

		for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

			shapeHole = shapeHoles[ i ];
			shapeVertices = shapeVertices.concat( shapeHole );

		}

		// vertices, normals, uvs

		for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {

			var vertex = shapeVertices[ i ];

			vertices.push( vertex.x, vertex.y, 0 );
			normals.push( 0, 0, 1 );
			uvs.push( vertex.x, vertex.y ); // world uvs

		}

		// incides

		for ( i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			var a = face[ 0 ] + indexOffset;
			var b = face[ 1 ] + indexOffset;
			var c = face[ 2 ] + indexOffset;

			indices.push( a, b, c );
			groupCount += 3;

		}

	}

}

ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

ShapeBufferGeometry.prototype.toJSON = function () {

	var data = BufferGeometry.prototype.toJSON.call( this );

	var shapes = this.parameters.shapes;

	return toJSON( shapes, data );

};

//

function toJSON( shapes, data ) {

	data.shapes = [];

	if ( Array.isArray( shapes ) ) {

		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

			var shape = shapes[ i ];

			data.shapes.push( shape.uuid );

		}

	} else {

		data.shapes.push( shapes.uuid );

	}

	return data;

}

/**
 * @author WestLangley / http://github.com/WestLangley
 * @author Mugen87 / https://github.com/Mugen87
 */

function EdgesGeometry( geometry, thresholdAngle ) {

	BufferGeometry.call( this );

	this.type = 'EdgesGeometry';

	this.parameters = {
		thresholdAngle: thresholdAngle
	};

	thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

	// buffer

	var vertices = [];

	// helper variables

	var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
	var edge = [ 0, 0 ], edges = {}, edge1, edge2;
	var key, keys = [ 'a', 'b', 'c' ];

	// prepare source geometry

	var geometry2;

	if ( geometry.isBufferGeometry ) {

		geometry2 = new Geometry();
		geometry2.fromBufferGeometry( geometry );

	} else {

		geometry2 = geometry.clone();

	}

	geometry2.mergeVertices();
	geometry2.computeFaceNormals();

	var sourceVertices = geometry2.vertices;
	var faces = geometry2.faces;

	// now create a data structure where each entry represents an edge with its adjoining faces

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		var face = faces[ i ];

		for ( var j = 0; j < 3; j ++ ) {

			edge1 = face[ keys[ j ] ];
			edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
			edge[ 0 ] = Math.min( edge1, edge2 );
			edge[ 1 ] = Math.max( edge1, edge2 );

			key = edge[ 0 ] + ',' + edge[ 1 ];

			if ( edges[ key ] === undefined ) {

				edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };

			} else {

				edges[ key ].face2 = i;

			}

		}

	}

	// generate vertices

	for ( key in edges ) {

		var e = edges[ key ];

		// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

		if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {

			var vertex = sourceVertices[ e.index1 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

			vertex = sourceVertices[ e.index2 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

	}

	// build geometry

	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

}

EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
EdgesGeometry.prototype.constructor = EdgesGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// CylinderGeometry

function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'CylinderGeometry';

	this.parameters = {
		radiusTop: radiusTop,
		radiusBottom: radiusBottom,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
	this.mergeVertices();

}

CylinderGeometry.prototype = Object.create( Geometry.prototype );
CylinderGeometry.prototype.constructor = CylinderGeometry;

// CylinderBufferGeometry

function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'CylinderBufferGeometry';

	this.parameters = {
		radiusTop: radiusTop,
		radiusBottom: radiusBottom,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	var scope = this;

	radiusTop = radiusTop !== undefined ? radiusTop : 1;
	radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
	height = height || 1;

	radialSegments = Math.floor( radialSegments ) || 8;
	heightSegments = Math.floor( heightSegments ) || 1;

	openEnded = openEnded !== undefined ? openEnded : false;
	thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var index = 0;
	var indexArray = [];
	var halfHeight = height / 2;
	var groupStart = 0;

	// generate geometry

	generateTorso();

	if ( openEnded === false ) {

		if ( radiusTop > 0 ) generateCap( true );
		if ( radiusBottom > 0 ) generateCap( false );

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	function generateTorso() {

		var x, y;
		var normal = new Vector3();
		var vertex = new Vector3();

		var groupCount = 0;

		// this will be used to calculate the normal
		var slope = ( radiusBottom - radiusTop ) / height;

		// generate vertices, normals and uvs

		for ( y = 0; y <= heightSegments; y ++ ) {

			var indexRow = [];

			var v = y / heightSegments;

			// calculate the radius of the current row

			var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;

				var theta = u * thetaLength + thetaStart;

				var sinTheta = Math.sin( theta );
				var cosTheta = Math.cos( theta );

				// vertex

				vertex.x = radius * sinTheta;
				vertex.y = - v * height + halfHeight;
				vertex.z = radius * cosTheta;
				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normal.set( sinTheta, slope, cosTheta ).normalize();
				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( u, 1 - v );

				// save index of vertex in respective row

				indexRow.push( index ++ );

			}

			// now save vertices of the row in our index array

			indexArray.push( indexRow );

		}

		// generate indices

		for ( x = 0; x < radialSegments; x ++ ) {

			for ( y = 0; y < heightSegments; y ++ ) {

				// we use the index array to access the correct indices

				var a = indexArray[ y ][ x ];
				var b = indexArray[ y + 1 ][ x ];
				var c = indexArray[ y + 1 ][ x + 1 ];
				var d = indexArray[ y ][ x + 1 ];

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

				// update group counter

				groupCount += 6;

			}

		}

		// add a group to the geometry. this will ensure multi material support

		scope.addGroup( groupStart, groupCount, 0 );

		// calculate new start value for groups

		groupStart += groupCount;

	}

	function generateCap( top ) {

		var x, centerIndexStart, centerIndexEnd;

		var uv = new Vector2();
		var vertex = new Vector3();

		var groupCount = 0;

		var radius = ( top === true ) ? radiusTop : radiusBottom;
		var sign = ( top === true ) ? 1 : - 1;

		// save the index of the first center vertex
		centerIndexStart = index;

		// first we generate the center vertex data of the cap.
		// because the geometry needs one set of uvs per face,
		// we must generate a center vertex per face/segment

		for ( x = 1; x <= radialSegments; x ++ ) {

			// vertex

			vertices.push( 0, halfHeight * sign, 0 );

			// normal

			normals.push( 0, sign, 0 );

			// uv

			uvs.push( 0.5, 0.5 );

			// increase index

			index ++;

		}

		// save the index of the last center vertex

		centerIndexEnd = index;

		// now we generate the surrounding vertices, normals and uvs

		for ( x = 0; x <= radialSegments; x ++ ) {

			var u = x / radialSegments;
			var theta = u * thetaLength + thetaStart;

			var cosTheta = Math.cos( theta );
			var sinTheta = Math.sin( theta );

			// vertex

			vertex.x = radius * sinTheta;
			vertex.y = halfHeight * sign;
			vertex.z = radius * cosTheta;
			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, sign, 0 );

			// uv

			uv.x = ( cosTheta * 0.5 ) + 0.5;
			uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
			uvs.push( uv.x, uv.y );

			// increase index

			index ++;

		}

		// generate indices

		for ( x = 0; x < radialSegments; x ++ ) {

			var c = centerIndexStart + x;
			var i = centerIndexEnd + x;

			if ( top === true ) {

				// face top

				indices.push( i, i + 1, c );

			} else {

				// face bottom

				indices.push( i + 1, i, c );

			}

			groupCount += 3;

		}

		// add a group to the geometry. this will ensure multi material support

		scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

		// calculate new start value for groups

		groupStart += groupCount;

	}

}

CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

/**
 * @author abelnation / http://github.com/abelnation
 */

// ConeGeometry

function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

	this.type = 'ConeGeometry';

	this.parameters = {
		radius: radius,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

}

ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
ConeGeometry.prototype.constructor = ConeGeometry;

// ConeBufferGeometry

function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

	this.type = 'ConeBufferGeometry';

	this.parameters = {
		radius: radius,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

}

ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 * @author Mugen87 / https://github.com/Mugen87
 * @author hughes
 */

// CircleGeometry

function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'CircleGeometry';

	this.parameters = {
		radius: radius,
		segments: segments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
	this.mergeVertices();

}

CircleGeometry.prototype = Object.create( Geometry.prototype );
CircleGeometry.prototype.constructor = CircleGeometry;

// CircleBufferGeometry

function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'CircleBufferGeometry';

	this.parameters = {
		radius: radius,
		segments: segments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	radius = radius || 1;
	segments = segments !== undefined ? Math.max( 3, segments ) : 8;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var i, s;
	var vertex = new Vector3();
	var uv = new Vector2();

	// center point

	vertices.push( 0, 0, 0 );
	normals.push( 0, 0, 1 );
	uvs.push( 0.5, 0.5 );

	for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {

		var segment = thetaStart + s / segments * thetaLength;

		// vertex

		vertex.x = radius * Math.cos( segment );
		vertex.y = radius * Math.sin( segment );

		vertices.push( vertex.x, vertex.y, vertex.z );

		// normal

		normals.push( 0, 0, 1 );

		// uvs

		uv.x = ( vertices[ i ] / radius + 1 ) / 2;
		uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

		uvs.push( uv.x, uv.y );

	}

	// indices

	for ( i = 1; i <= segments; i ++ ) {

		indices.push( i, i + 1, 0 );

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;



var Geometries = Object.freeze({
	WireframeGeometry: WireframeGeometry,
	ParametricGeometry: ParametricGeometry,
	ParametricBufferGeometry: ParametricBufferGeometry,
	TetrahedronGeometry: TetrahedronGeometry,
	TetrahedronBufferGeometry: TetrahedronBufferGeometry,
	OctahedronGeometry: OctahedronGeometry,
	OctahedronBufferGeometry: OctahedronBufferGeometry,
	IcosahedronGeometry: IcosahedronGeometry,
	IcosahedronBufferGeometry: IcosahedronBufferGeometry,
	DodecahedronGeometry: DodecahedronGeometry,
	DodecahedronBufferGeometry: DodecahedronBufferGeometry,
	PolyhedronGeometry: PolyhedronGeometry,
	PolyhedronBufferGeometry: PolyhedronBufferGeometry,
	TubeGeometry: TubeGeometry,
	TubeBufferGeometry: TubeBufferGeometry,
	TorusKnotGeometry: TorusKnotGeometry,
	TorusKnotBufferGeometry: TorusKnotBufferGeometry,
	TorusGeometry: TorusGeometry,
	TorusBufferGeometry: TorusBufferGeometry,
	TextGeometry: TextGeometry,
	TextBufferGeometry: TextBufferGeometry,
	SphereGeometry: SphereGeometry,
	SphereBufferGeometry: SphereBufferGeometry,
	RingGeometry: RingGeometry,
	RingBufferGeometry: RingBufferGeometry,
	PlaneGeometry: PlaneGeometry,
	PlaneBufferGeometry: PlaneBufferGeometry,
	LatheGeometry: LatheGeometry,
	LatheBufferGeometry: LatheBufferGeometry,
	ShapeGeometry: ShapeGeometry,
	ShapeBufferGeometry: ShapeBufferGeometry,
	ExtrudeGeometry: ExtrudeGeometry,
	ExtrudeBufferGeometry: ExtrudeBufferGeometry,
	EdgesGeometry: EdgesGeometry,
	ConeGeometry: ConeGeometry,
	ConeBufferGeometry: ConeBufferGeometry,
	CylinderGeometry: CylinderGeometry,
	CylinderBufferGeometry: CylinderBufferGeometry,
	CircleGeometry: CircleGeometry,
	CircleBufferGeometry: CircleBufferGeometry,
	BoxGeometry: BoxGeometry,
	BoxBufferGeometry: BoxBufferGeometry
});

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * parameters = {
 *  color: <THREE.Color>,
 *  opacity: <float>
 * }
 */

function ShadowMaterial( parameters ) {

	Material.call( this );

	this.type = 'ShadowMaterial';

	this.color = new Color( 0x000000 );
	this.opacity = 1.0;

	this.lights = true;
	this.transparent = true;

	this.setValues( parameters );

}

ShadowMaterial.prototype = Object.create( Material.prototype );
ShadowMaterial.prototype.constructor = ShadowMaterial;

ShadowMaterial.prototype.isShadowMaterial = true;

/**
 * @author mrdoob / http://mrdoob.com/
 */

function RawShaderMaterial( parameters ) {

	ShaderMaterial.call( this, parameters );

	this.type = 'RawShaderMaterial';

}

RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
RawShaderMaterial.prototype.constructor = RawShaderMaterial;

RawShaderMaterial.prototype.isRawShaderMaterial = true;

/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  color: <hex>,
 *  roughness: <float>,
 *  metalness: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  roughnessMap: new THREE.Texture( <Image> ),
 *
 *  metalnessMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  envMapIntensity: <float>
 *
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshStandardMaterial( parameters ) {

	Material.call( this );

	this.defines = { 'STANDARD': '' };

	this.type = 'MeshStandardMaterial';

	this.color = new Color( 0xffffff ); // diffuse
	this.roughness = 0.5;
	this.metalness = 0.5;

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.emissive = new Color( 0x000000 );
	this.emissiveIntensity = 1.0;
	this.emissiveMap = null;

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new Vector2( 1, 1 );

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.roughnessMap = null;

	this.metalnessMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.envMapIntensity = 1.0;

	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshStandardMaterial.prototype = Object.create( Material.prototype );
MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

MeshStandardMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.defines = { 'STANDARD': '' };

	this.color.copy( source.color );
	this.roughness = source.roughness;
	this.metalness = source.metalness;

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.emissive.copy( source.emissive );
	this.emissiveMap = source.emissiveMap;
	this.emissiveIntensity = source.emissiveIntensity;

	this.bumpMap = source.bumpMap;
	this.bumpScale = source.bumpScale;

	this.normalMap = source.normalMap;
	this.normalScale.copy( source.normalScale );

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.roughnessMap = source.roughnessMap;

	this.metalnessMap = source.metalnessMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.envMapIntensity = source.envMapIntensity;

	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  reflectivity: <float>
 * }
 */

function MeshPhysicalMaterial( parameters ) {

	MeshStandardMaterial.call( this );

	this.defines = { 'PHYSICAL': '' };

	this.type = 'MeshPhysicalMaterial';

	this.reflectivity = 0.5; // maps to F0 = 0.04

	this.clearCoat = 0.0;
	this.clearCoatRoughness = 0.0;

	this.setValues( parameters );

}

MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

MeshPhysicalMaterial.prototype.copy = function ( source ) {

	MeshStandardMaterial.prototype.copy.call( this, source );

	this.defines = { 'PHYSICAL': '' };

	this.reflectivity = source.reflectivity;

	this.clearCoat = source.clearCoat;
	this.clearCoatRoughness = source.clearCoatRoughness;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshPhongMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshPhongMaterial';

	this.color = new Color( 0xffffff ); // diffuse
	this.specular = new Color( 0x111111 );
	this.shininess = 30;

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.emissive = new Color( 0x000000 );
	this.emissiveIntensity = 1.0;
	this.emissiveMap = null;

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new Vector2( 1, 1 );

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshPhongMaterial.prototype = Object.create( Material.prototype );
MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

MeshPhongMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );
	this.specular.copy( source.specular );
	this.shininess = source.shininess;

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.emissive.copy( source.emissive );
	this.emissiveMap = source.emissiveMap;
	this.emissiveIntensity = source.emissiveIntensity;

	this.bumpMap = source.bumpMap;
	this.bumpScale = source.bumpScale;

	this.normalMap = source.normalMap;
	this.normalScale.copy( source.normalScale );

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.specularMap = source.specularMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.combine = source.combine;
	this.reflectivity = source.reflectivity;
	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author takahirox / http://github.com/takahirox
 *
 * parameters = {
 *  gradientMap: new THREE.Texture( <Image> )
 * }
 */

function MeshToonMaterial( parameters ) {

	MeshPhongMaterial.call( this );

	this.defines = { 'TOON': '' };

	this.type = 'MeshToonMaterial';

	this.gradientMap = null;

	this.setValues( parameters );

}

MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
MeshToonMaterial.prototype.constructor = MeshToonMaterial;

MeshToonMaterial.prototype.isMeshToonMaterial = true;

MeshToonMaterial.prototype.copy = function ( source ) {

	MeshPhongMaterial.prototype.copy.call( this, source );

	this.gradientMap = source.gradientMap;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshNormalMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshNormalMaterial';

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new Vector2( 1, 1 );

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false;
	this.lights = false;

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshNormalMaterial.prototype = Object.create( Material.prototype );
MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

MeshNormalMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.bumpMap = source.bumpMap;
	this.bumpScale = source.bumpScale;

	this.normalMap = source.normalMap;
	this.normalScale.copy( source.normalScale );

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshLambertMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshLambertMaterial';

	this.color = new Color( 0xffffff ); // diffuse

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.emissive = new Color( 0x000000 );
	this.emissiveIntensity = 1.0;
	this.emissiveMap = null;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshLambertMaterial.prototype = Object.create( Material.prototype );
MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

MeshLambertMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.emissive.copy( source.emissive );
	this.emissiveMap = source.emissiveMap;
	this.emissiveIntensity = source.emissiveIntensity;

	this.specularMap = source.specularMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.combine = source.combine;
	this.reflectivity = source.reflectivity;
	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>
 * }
 */

function LineDashedMaterial( parameters ) {

	LineBasicMaterial.call( this );

	this.type = 'LineDashedMaterial';

	this.scale = 1;
	this.dashSize = 3;
	this.gapSize = 1;

	this.setValues( parameters );

}

LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
LineDashedMaterial.prototype.constructor = LineDashedMaterial;

LineDashedMaterial.prototype.isLineDashedMaterial = true;

LineDashedMaterial.prototype.copy = function ( source ) {

	LineBasicMaterial.prototype.copy.call( this, source );

	this.scale = source.scale;
	this.dashSize = source.dashSize;
	this.gapSize = source.gapSize;

	return this;

};



var Materials = Object.freeze({
	ShadowMaterial: ShadowMaterial,
	SpriteMaterial: SpriteMaterial,
	RawShaderMaterial: RawShaderMaterial,
	ShaderMaterial: ShaderMaterial,
	PointsMaterial: PointsMaterial,
	MeshPhysicalMaterial: MeshPhysicalMaterial,
	MeshStandardMaterial: MeshStandardMaterial,
	MeshPhongMaterial: MeshPhongMaterial,
	MeshToonMaterial: MeshToonMaterial,
	MeshNormalMaterial: MeshNormalMaterial,
	MeshLambertMaterial: MeshLambertMaterial,
	MeshDepthMaterial: MeshDepthMaterial,
	MeshDistanceMaterial: MeshDistanceMaterial,
	MeshBasicMaterial: MeshBasicMaterial,
	LineDashedMaterial: LineDashedMaterial,
	LineBasicMaterial: LineBasicMaterial,
	Material: Material
});

/**
 * @author mrdoob / http://mrdoob.com/
 */

var Cache = {

	enabled: false,

	files: {},

	add: function ( key, file ) {

		if ( this.enabled === false ) return;

		// console.log( 'THREE.Cache', 'Adding key:', key );

		this.files[ key ] = file;

	},

	get: function ( key ) {

		if ( this.enabled === false ) return;

		// console.log( 'THREE.Cache', 'Checking key:', key );

		return this.files[ key ];

	},

	remove: function ( key ) {

		delete this.files[ key ];

	},

	clear: function () {

		this.files = {};

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function LoadingManager( onLoad, onProgress, onError ) {

	var scope = this;

	var isLoading = false;
	var itemsLoaded = 0;
	var itemsTotal = 0;
	var urlModifier = undefined;

	this.onStart = undefined;
	this.onLoad = onLoad;
	this.onProgress = onProgress;
	this.onError = onError;

	this.itemStart = function ( url ) {

		itemsTotal ++;

		if ( isLoading === false ) {

			if ( scope.onStart !== undefined ) {

				scope.onStart( url, itemsLoaded, itemsTotal );

			}

		}

		isLoading = true;

	};

	this.itemEnd = function ( url ) {

		itemsLoaded ++;

		if ( scope.onProgress !== undefined ) {

			scope.onProgress( url, itemsLoaded, itemsTotal );

		}

		if ( itemsLoaded === itemsTotal ) {

			isLoading = false;

			if ( scope.onLoad !== undefined ) {

				scope.onLoad();

			}

		}

	};

	this.itemError = function ( url ) {

		if ( scope.onError !== undefined ) {

			scope.onError( url );

		}

	};

	this.resolveURL = function ( url ) {

		if ( urlModifier ) {

			return urlModifier( url );

		}

		return url;

	};

	this.setURLModifier = function ( transform ) {

		urlModifier = transform;
		return this;

	};

}

var DefaultLoadingManager = new LoadingManager();

/**
 * @author mrdoob / http://mrdoob.com/
 */

var loading = {};

function FileLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( FileLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		if ( url === undefined ) url = '';

		if ( this.path !== undefined ) url = this.path + url;

		url = this.manager.resolveURL( url );

		var scope = this;

		var cached = Cache.get( url );

		if ( cached !== undefined ) {

			scope.manager.itemStart( url );

			setTimeout( function () {

				if ( onLoad ) onLoad( cached );

				scope.manager.itemEnd( url );

			}, 0 );

			return cached;

		}

		// Check if request is duplicate

		if ( loading[ url ] !== undefined ) {

			loading[ url ].push( {

				onLoad: onLoad,
				onProgress: onProgress,
				onError: onError

			} );

			return;

		}

		// Check for data: URI
		var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
		var dataUriRegexResult = url.match( dataUriRegex );

		// Safari can not handle Data URIs through XMLHttpRequest so process manually
		if ( dataUriRegexResult ) {

			var mimeType = dataUriRegexResult[ 1 ];
			var isBase64 = !! dataUriRegexResult[ 2 ];
			var data = dataUriRegexResult[ 3 ];

			data = window.decodeURIComponent( data );

			if ( isBase64 ) data = window.atob( data );

			try {

				var response;
				var responseType = ( this.responseType || '' ).toLowerCase();

				switch ( responseType ) {

					case 'arraybuffer':
					case 'blob':

						var view = new Uint8Array( data.length );

						for ( var i = 0; i < data.length; i ++ ) {

							view[ i ] = data.charCodeAt( i );

						}

						if ( responseType === 'blob' ) {

							response = new Blob( [ view.buffer ], { type: mimeType } );

						} else {

							response = view.buffer;

						}

						break;

					case 'document':

						var parser = new DOMParser();
						response = parser.parseFromString( data, mimeType );

						break;

					case 'json':

						response = JSON.parse( data );

						break;

					default: // 'text' or other

						response = data;

						break;

				}

				// Wait for next browser tick like standard XMLHttpRequest event dispatching does
				window.setTimeout( function () {

					if ( onLoad ) onLoad( response );

					scope.manager.itemEnd( url );

				}, 0 );

			} catch ( error ) {

				// Wait for next browser tick like standard XMLHttpRequest event dispatching does
				window.setTimeout( function () {

					if ( onError ) onError( error );

					scope.manager.itemEnd( url );
					scope.manager.itemError( url );

				}, 0 );

			}

		} else {

			// Initialise array for duplicate requests

			loading[ url ] = [];

			loading[ url ].push( {

				onLoad: onLoad,
				onProgress: onProgress,
				onError: onError

			} );

			var request = new XMLHttpRequest();

			request.open( 'GET', url, true );

			request.addEventListener( 'load', function ( event ) {

				var response = this.response;

				Cache.add( url, response );

				var callbacks = loading[ url ];

				delete loading[ url ];

				if ( this.status === 200 ) {

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onLoad ) callback.onLoad( response );

					}

					scope.manager.itemEnd( url );

				} else if ( this.status === 0 ) {

					// Some browsers return HTTP Status 0 when using non-http protocol
					// e.g. 'file://' or 'data://'. Handle as success.

					console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onLoad ) callback.onLoad( response );

					}

					scope.manager.itemEnd( url );

				} else {

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onError ) callback.onError( event );

					}

					scope.manager.itemEnd( url );
					scope.manager.itemError( url );

				}

			}, false );

			request.addEventListener( 'progress', function ( event ) {

				var callbacks = loading[ url ];

				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

					var callback = callbacks[ i ];
					if ( callback.onProgress ) callback.onProgress( event );

				}

			}, false );

			request.addEventListener( 'error', function ( event ) {

				var callbacks = loading[ url ];

				delete loading[ url ];

				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

					var callback = callbacks[ i ];
					if ( callback.onError ) callback.onError( event );

				}

				scope.manager.itemEnd( url );
				scope.manager.itemError( url );

			}, false );

			if ( this.responseType !== undefined ) request.responseType = this.responseType;
			if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

			if ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );

			for ( var header in this.requestHeader ) {

				request.setRequestHeader( header, this.requestHeader[ header ] );

			}

			request.send( null );

		}

		scope.manager.itemStart( url );

		return request;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	},

	setResponseType: function ( value ) {

		this.responseType = value;
		return this;

	},

	setWithCredentials: function ( value ) {

		this.withCredentials = value;
		return this;

	},

	setMimeType: function ( value ) {

		this.mimeType = value;
		return this;

	},

	setRequestHeader: function ( value ) {

		this.requestHeader = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 */

function CompressedTextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	// override in sub classes
	this._parser = null;

}

Object.assign( CompressedTextureLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var images = [];

		var texture = new CompressedTexture();
		texture.image = images;

		var loader = new FileLoader( this.manager );
		loader.setPath( this.path );
		loader.setResponseType( 'arraybuffer' );

		function loadTexture( i ) {

			loader.load( url[ i ], function ( buffer ) {

				var texDatas = scope._parser( buffer, true );

				images[ i ] = {
					width: texDatas.width,
					height: texDatas.height,
					format: texDatas.format,
					mipmaps: texDatas.mipmaps
				};

				loaded += 1;

				if ( loaded === 6 ) {

					if ( texDatas.mipmapCount === 1 )
						texture.minFilter = LinearFilter;

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}

			}, onProgress, onError );

		}

		if ( Array.isArray( url ) ) {

			var loaded = 0;

			for ( var i = 0, il = url.length; i < il; ++ i ) {

				loadTexture( i );

			}

		} else {

			// compressed cubemap texture stored in a single DDS file

			loader.load( url, function ( buffer ) {

				var texDatas = scope._parser( buffer, true );

				if ( texDatas.isCubemap ) {

					var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

					for ( var f = 0; f < faces; f ++ ) {

						images[ f ] = { mipmaps: [] };

						for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
							images[ f ].format = texDatas.format;
							images[ f ].width = texDatas.width;
							images[ f ].height = texDatas.height;

						}

					}

				} else {

					texture.image.width = texDatas.width;
					texture.image.height = texDatas.height;
					texture.mipmaps = texDatas.mipmaps;

				}

				if ( texDatas.mipmapCount === 1 ) {

					texture.minFilter = LinearFilter;

				}

				texture.format = texDatas.format;
				texture.needsUpdate = true;

				if ( onLoad ) onLoad( texture );

			}, onProgress, onError );

		}

		return texture;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author Nikos M. / https://github.com/foo123/
 *
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 */

function DataTextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	// override in sub classes
	this._parser = null;

}

Object.assign( DataTextureLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var texture = new DataTexture();

		var loader = new FileLoader( this.manager );
		loader.setResponseType( 'arraybuffer' );

		loader.load( url, function ( buffer ) {

			var texData = scope._parser( buffer );

			if ( ! texData ) return;

			if ( undefined !== texData.image ) {

				texture.image = texData.image;

			} else if ( undefined !== texData.data ) {

				texture.image.width = texData.width;
				texture.image.height = texData.height;
				texture.image.data = texData.data;

			}

			texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
			texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;

			texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
			texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;

			texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

			if ( undefined !== texData.format ) {

				texture.format = texData.format;

			}
			if ( undefined !== texData.type ) {

				texture.type = texData.type;

			}

			if ( undefined !== texData.mipmaps ) {

				texture.mipmaps = texData.mipmaps;

			}

			if ( 1 === texData.mipmapCount ) {

				texture.minFilter = LinearFilter;

			}

			texture.needsUpdate = true;

			if ( onLoad ) onLoad( texture, texData );

		}, onProgress, onError );


		return texture;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function ImageLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( ImageLoader.prototype, {

	crossOrigin: 'Anonymous',

	load: function ( url, onLoad, onProgress, onError ) {

		if ( url === undefined ) url = '';

		if ( this.path !== undefined ) url = this.path + url;

		url = this.manager.resolveURL( url );

		var scope = this;

		var cached = Cache.get( url );

		if ( cached !== undefined ) {

			scope.manager.itemStart( url );

			setTimeout( function () {

				if ( onLoad ) onLoad( cached );

				scope.manager.itemEnd( url );

			}, 0 );

			return cached;

		}

		var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );

		image.addEventListener( 'load', function () {

			Cache.add( url, this );

			if ( onLoad ) onLoad( this );

			scope.manager.itemEnd( url );

		}, false );

		/*
		image.addEventListener( 'progress', function ( event ) {

			if ( onProgress ) onProgress( event );

		}, false );
		*/

		image.addEventListener( 'error', function ( event ) {

			if ( onError ) onError( event );

			scope.manager.itemEnd( url );
			scope.manager.itemError( url );

		}, false );

		if ( url.substr( 0, 5 ) !== 'data:' ) {

			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

		}

		scope.manager.itemStart( url );

		image.src = url;

		return image;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;
		return this;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function CubeTextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( CubeTextureLoader.prototype, {

	crossOrigin: 'Anonymous',

	load: function ( urls, onLoad, onProgress, onError ) {

		var texture = new CubeTexture();

		var loader = new ImageLoader( this.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.setPath( this.path );

		var loaded = 0;

		function loadTexture( i ) {

			loader.load( urls[ i ], function ( image ) {

				texture.images[ i ] = image;

				loaded ++;

				if ( loaded === 6 ) {

					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}

			}, undefined, onError );

		}

		for ( var i = 0; i < urls.length; ++ i ) {

			loadTexture( i );

		}

		return texture;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;
		return this;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function TextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( TextureLoader.prototype, {

	crossOrigin: 'Anonymous',

	load: function ( url, onLoad, onProgress, onError ) {

		var texture = new Texture();

		var loader = new ImageLoader( this.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.setPath( this.path );

		loader.load( url, function ( image ) {

			texture.image = image;

			// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
			var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

			texture.format = isJPEG ? RGBFormat : RGBAFormat;
			texture.needsUpdate = true;

			if ( onLoad !== undefined ) {

				onLoad( texture );

			}

		}, onProgress, onError );

		return texture;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;
		return this;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Extensible curve object
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/

/**************************************************************
 *	Abstract Curve base class
 **************************************************************/

function Curve() {

	this.type = 'Curve';

	this.arcLengthDivisions = 200;

}

Object.assign( Curve.prototype, {

	// Virtual base class method to overwrite and implement in subclasses
	//	- t [0 .. 1]

	getPoint: function ( /* t, optionalTarget */ ) {

		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
		return null;

	},

	// Get point at relative position in curve according to arc length
	// - u [0 .. 1]

	getPointAt: function ( u, optionalTarget ) {

		var t = this.getUtoTmapping( u );
		return this.getPoint( t, optionalTarget );

	},

	// Get sequence of points using getPoint( t )

	getPoints: function ( divisions ) {

		if ( divisions === undefined ) divisions = 5;

		var points = [];

		for ( var d = 0; d <= divisions; d ++ ) {

			points.push( this.getPoint( d / divisions ) );

		}

		return points;

	},

	// Get sequence of points using getPointAt( u )

	getSpacedPoints: function ( divisions ) {

		if ( divisions === undefined ) divisions = 5;

		var points = [];

		for ( var d = 0; d <= divisions; d ++ ) {

			points.push( this.getPointAt( d / divisions ) );

		}

		return points;

	},

	// Get total curve arc length

	getLength: function () {

		var lengths = this.getLengths();
		return lengths[ lengths.length - 1 ];

	},

	// Get list of cumulative segment lengths

	getLengths: function ( divisions ) {

		if ( divisions === undefined ) divisions = this.arcLengthDivisions;

		if ( this.cacheArcLengths &&
			( this.cacheArcLengths.length === divisions + 1 ) &&
			! this.needsUpdate ) {

			return this.cacheArcLengths;

		}

		this.needsUpdate = false;

		var cache = [];
		var current, last = this.getPoint( 0 );
		var p, sum = 0;

		cache.push( 0 );

		for ( p = 1; p <= divisions; p ++ ) {

			current = this.getPoint( p / divisions );
			sum += current.distanceTo( last );
			cache.push( sum );
			last = current;

		}

		this.cacheArcLengths = cache;

		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

	},

	updateArcLengths: function () {

		this.needsUpdate = true;
		this.getLengths();

	},

	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

	getUtoTmapping: function ( u, distance ) {

		var arcLengths = this.getLengths();

		var i = 0, il = arcLengths.length;

		var targetArcLength; // The targeted u distance value to get

		if ( distance ) {

			targetArcLength = distance;

		} else {

			targetArcLength = u * arcLengths[ il - 1 ];

		}

		// binary search for the index with largest value smaller than target u distance

		var low = 0, high = il - 1, comparison;

		while ( low <= high ) {

			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

			comparison = arcLengths[ i ] - targetArcLength;

			if ( comparison < 0 ) {

				low = i + 1;

			} else if ( comparison > 0 ) {

				high = i - 1;

			} else {

				high = i;
				break;

				// DONE

			}

		}

		i = high;

		if ( arcLengths[ i ] === targetArcLength ) {

			return i / ( il - 1 );

		}

		// we could get finer grain at lengths, or use simple interpolation between two points

		var lengthBefore = arcLengths[ i ];
		var lengthAfter = arcLengths[ i + 1 ];

		var segmentLength = lengthAfter - lengthBefore;

		// determine where we are between the 'before' and 'after' points

		var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

		// add that fractional amount to t

		var t = ( i + segmentFraction ) / ( il - 1 );

		return t;

	},

	// Returns a unit vector tangent at t
	// In case any sub curve does not implement its tangent derivation,
	// 2 points a small delta apart will be used to find its gradient
	// which seems to give a reasonable approximation

	getTangent: function ( t ) {

		var delta = 0.0001;
		var t1 = t - delta;
		var t2 = t + delta;

		// Capping in case of danger

		if ( t1 < 0 ) t1 = 0;
		if ( t2 > 1 ) t2 = 1;

		var pt1 = this.getPoint( t1 );
		var pt2 = this.getPoint( t2 );

		var vec = pt2.clone().sub( pt1 );
		return vec.normalize();

	},

	getTangentAt: function ( u ) {

		var t = this.getUtoTmapping( u );
		return this.getTangent( t );

	},

	computeFrenetFrames: function ( segments, closed ) {

		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

		var normal = new Vector3();

		var tangents = [];
		var normals = [];
		var binormals = [];

		var vec = new Vector3();
		var mat = new Matrix4();

		var i, u, theta;

		// compute the tangent vectors for each segment on the curve

		for ( i = 0; i <= segments; i ++ ) {

			u = i / segments;

			tangents[ i ] = this.getTangentAt( u );
			tangents[ i ].normalize();

		}

		// select an initial normal vector perpendicular to the first tangent vector,
		// and in the direction of the minimum tangent xyz component

		normals[ 0 ] = new Vector3();
		binormals[ 0 ] = new Vector3();
		var min = Number.MAX_VALUE;
		var tx = Math.abs( tangents[ 0 ].x );
		var ty = Math.abs( tangents[ 0 ].y );
		var tz = Math.abs( tangents[ 0 ].z );

		if ( tx <= min ) {

			min = tx;
			normal.set( 1, 0, 0 );

		}

		if ( ty <= min ) {

			min = ty;
			normal.set( 0, 1, 0 );

		}

		if ( tz <= min ) {

			normal.set( 0, 0, 1 );

		}

		vec.crossVectors( tangents[ 0 ], normal ).normalize();

		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


		// compute the slowly-varying normal and binormal vectors for each segment on the curve

		for ( i = 1; i <= segments; i ++ ) {

			normals[ i ] = normals[ i - 1 ].clone();

			binormals[ i ] = binormals[ i - 1 ].clone();

			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

			if ( vec.length() > Number.EPSILON ) {

				vec.normalize();

				theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

			}

			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}

		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

		if ( closed === true ) {

			theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
			theta /= segments;

			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

				theta = - theta;

			}

			for ( i = 1; i <= segments; i ++ ) {

				// twist a little...
				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

		}

		return {
			tangents: tangents,
			normals: normals,
			binormals: binormals
		};

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.arcLengthDivisions = source.arcLengthDivisions;

		return this;

	},

	toJSON: function () {

		var data = {
			metadata: {
				version: 4.5,
				type: 'Curve',
				generator: 'Curve.toJSON'
			}
		};

		data.arcLengthDivisions = this.arcLengthDivisions;
		data.type = this.type;

		return data;

	},

	fromJSON: function ( json ) {

		this.arcLengthDivisions = json.arcLengthDivisions;

		return this;

	}

} );

function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

	Curve.call( this );

	this.type = 'EllipseCurve';

	this.aX = aX || 0;
	this.aY = aY || 0;

	this.xRadius = xRadius || 1;
	this.yRadius = yRadius || 1;

	this.aStartAngle = aStartAngle || 0;
	this.aEndAngle = aEndAngle || 2 * Math.PI;

	this.aClockwise = aClockwise || false;

	this.aRotation = aRotation || 0;

}

EllipseCurve.prototype = Object.create( Curve.prototype );
EllipseCurve.prototype.constructor = EllipseCurve;

EllipseCurve.prototype.isEllipseCurve = true;

EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector2();

	var twoPi = Math.PI * 2;
	var deltaAngle = this.aEndAngle - this.aStartAngle;
	var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

	// ensures that deltaAngle is 0 .. 2 PI
	while ( deltaAngle < 0 ) deltaAngle += twoPi;
	while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

	if ( deltaAngle < Number.EPSILON ) {

		if ( samePoints ) {

			deltaAngle = 0;

		} else {

			deltaAngle = twoPi;

		}

	}

	if ( this.aClockwise === true && ! samePoints ) {

		if ( deltaAngle === twoPi ) {

			deltaAngle = - twoPi;

		} else {

			deltaAngle = deltaAngle - twoPi;

		}

	}

	var angle = this.aStartAngle + t * deltaAngle;
	var x = this.aX + this.xRadius * Math.cos( angle );
	var y = this.aY + this.yRadius * Math.sin( angle );

	if ( this.aRotation !== 0 ) {

		var cos = Math.cos( this.aRotation );
		var sin = Math.sin( this.aRotation );

		var tx = x - this.aX;
		var ty = y - this.aY;

		// Rotate the point about the center of the ellipse.
		x = tx * cos - ty * sin + this.aX;
		y = tx * sin + ty * cos + this.aY;

	}

	return point.set( x, y );

};

EllipseCurve.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.aX = source.aX;
	this.aY = source.aY;

	this.xRadius = source.xRadius;
	this.yRadius = source.yRadius;

	this.aStartAngle = source.aStartAngle;
	this.aEndAngle = source.aEndAngle;

	this.aClockwise = source.aClockwise;

	this.aRotation = source.aRotation;

	return this;

};


EllipseCurve.prototype.toJSON = function () {

	var data = Curve.prototype.toJSON.call( this );

	data.aX = this.aX;
	data.aY = this.aY;

	data.xRadius = this.xRadius;
	data.yRadius = this.yRadius;

	data.aStartAngle = this.aStartAngle;
	data.aEndAngle = this.aEndAngle;

	data.aClockwise = this.aClockwise;

	data.aRotation = this.aRotation;

	return data;

};

EllipseCurve.prototype.fromJSON = function ( json ) {

	Curve.prototype.fromJSON.call( this, json );

	this.aX = json.aX;
	this.aY = json.aY;

	this.xRadius = json.xRadius;
	this.yRadius = json.yRadius;

	this.aStartAngle = json.aStartAngle;
	this.aEndAngle = json.aEndAngle;

	this.aClockwise = json.aClockwise;

	this.aRotation = json.aRotation;

	return this;

};

function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

	EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	this.type = 'ArcCurve';

}

ArcCurve.prototype = Object.create( EllipseCurve.prototype );
ArcCurve.prototype.constructor = ArcCurve;

ArcCurve.prototype.isArcCurve = true;

/**
 * @author zz85 https://github.com/zz85
 *
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */


/*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/

function CubicPoly() {

	var c0 = 0, c1 = 0, c2 = 0, c3 = 0;

	/*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */
	function init( x0, x1, t0, t1 ) {

		c0 = x0;
		c1 = t0;
		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
		c3 = 2 * x0 - 2 * x1 + t0 + t1;

	}

	return {

		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		},

		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			init( x1, x2, t1, t2 );

		},

		calc: function ( t ) {

			var t2 = t * t;
			var t3 = t2 * t;
			return c0 + c1 * t + c2 * t2 + c3 * t3;

		}

	};

}

//

var tmp = new Vector3();
var px = new CubicPoly();
var py = new CubicPoly();
var pz = new CubicPoly();

function CatmullRomCurve3( points, closed, curveType, tension ) {

	Curve.call( this );

	this.type = 'CatmullRomCurve3';

	this.points = points || [];
	this.closed = closed || false;
	this.curveType = curveType || 'centripetal';
	this.tension = tension || 0.5;

}

CatmullRomCurve3.prototype = Object.create( Curve.prototype );
CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector3();

	var points = this.points;
	var l = points.length;

	var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
	var intPoint = Math.floor( p );
	var weight = p - intPoint;

	if ( this.closed ) {

		intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

	} else if ( weight === 0 && intPoint === l - 1 ) {

		intPoint = l - 2;
		weight = 1;

	}

	var p0, p1, p2, p3; // 4 points

	if ( this.closed || intPoint > 0 ) {

		p0 = points[ ( intPoint - 1 ) % l ];

	} else {

		// extrapolate first point
		tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
		p0 = tmp;

	}

	p1 = points[ intPoint % l ];
	p2 = points[ ( intPoint + 1 ) % l ];

	if ( this.closed || intPoint + 2 < l ) {

		p3 = points[ ( intPoint + 2 ) % l ];

	} else {

		// extrapolate last point
		tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
		p3 = tmp;

	}

	if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

		// init Centripetal / Chordal Catmull-Rom
		var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
		var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
		var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
		var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

		// safety check for repeated points
		if ( dt1 < 1e-4 ) dt1 = 1.0;
		if ( dt0 < 1e-4 ) dt0 = dt1;
		if ( dt2 < 1e-4 ) dt2 = dt1;

		px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
		py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
		pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

	} else if ( this.curveType === 'catmullrom' ) {

		px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
		py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
		pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

	}

	point.set(
		px.calc( weight ),
		py.calc( weight ),
		pz.calc( weight )
	);

	return point;

};

CatmullRomCurve3.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.points = [];

	for ( var i = 0, l = source.points.length; i < l; i ++ ) {

		var point = source.points[ i ];

		this.points.push( point.clone() );

	}

	this.closed = source.closed;
	this.curveType = source.curveType;
	this.tension = source.tension;

	return this;

};

CatmullRomCurve3.prototype.toJSON = function () {

	var data = Curve.prototype.toJSON.call( this );

	data.points = [];

	for ( var i = 0, l = this.points.length; i < l; i ++ ) {

		var point = this.points[ i ];
		data.points.push( point.toArray() );

	}

	data.closed = this.closed;
	data.curveType = this.curveType;
	data.tension = this.tension;

	return data;

};

CatmullRomCurve3.prototype.fromJSON = function ( json ) {

	Curve.prototype.fromJSON.call( this, json );

	this.points = [];

	for ( var i = 0, l = json.points.length; i < l; i ++ ) {

		var point = json.points[ i ];
		this.points.push( new Vector3().fromArray( point ) );

	}

	this.closed = json.closed;
	this.curveType = json.curveType;
	this.tension = json.tension;

	return this;

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Bezier Curves formulas obtained from
 * http://en.wikipedia.org/wiki/Bézier_curve
 */

function CatmullRom( t, p0, p1, p2, p3 ) {

	var v0 = ( p2 - p0 ) * 0.5;
	var v1 = ( p3 - p1 ) * 0.5;
	var t2 = t * t;
	var t3 = t * t2;
	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

}

//

function QuadraticBezierP0( t, p ) {

	var k = 1 - t;
	return k * k * p;

}

function QuadraticBezierP1( t, p ) {

	return 2 * ( 1 - t ) * t * p;

}

function QuadraticBezierP2( t, p ) {

	return t * t * p;

}

function QuadraticBezier( t, p0, p1, p2 ) {

	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
		QuadraticBezierP2( t, p2 );

}

//

function CubicBezierP0( t, p ) {

	var k = 1 - t;
	return k * k * k * p;

}

function CubicBezierP1( t, p ) {

	var k = 1 - t;
	return 3 * k * k * t * p;

}

function CubicBezierP2( t, p ) {

	return 3 * ( 1 - t ) * t * t * p;

}

function CubicBezierP3( t, p ) {

	return t * t * t * p;

}

function CubicBezier( t, p0, p1, p2, p3 ) {

	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
		CubicBezierP3( t, p3 );

}

function CubicBezierCurve( v0, v1, v2, v3 ) {

	Curve.call( this );

	this.type = 'CubicBezierCurve';

	this.v0 = v0 || new Vector2();
	this.v1 = v1 || new Vector2();
	this.v2 = v2 || new Vector2();
	this.v3 = v3 || new Vector2();

}

CubicBezierCurve.prototype = Object.create( Curve.prototype );
CubicBezierCurve.prototype.constructor = CubicBezierCurve;

CubicBezierCurve.prototype.isCubicBezierCurve = true;

CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector2();

	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

	point.set(
		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
		CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
	);

	return point;

};

CubicBezierCurve.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.v0.copy( source.v0 );
	this.v1.copy( source.v1 );
	this.v2.copy( source.v2 );
	this.v3.copy( source.v3 );

	return this;

};

CubicBezierCurve.prototype.toJSON = function () {

	var data = Curve.prototype.toJSON.call( this );

	data.v0 = this.v0.toArray();
	data.v1 = this.v1.toArray();
	data.v2 = this.v2.toArray();
	data.v3 = this.v3.toArray();

	return data;

};

CubicBezierCurve.prototype.fromJSON = function ( json ) {

	Curve.prototype.fromJSON.call( this, json );

	this.v0.fromArray( json.v0 );
	this.v1.fromArray( json.v1 );
	this.v2.fromArray( json.v2 );
	this.v3.fromArray( json.v3 );

	return this;

};

function CubicBezierCurve3( v0, v1, v2, v3 ) {

	Curve.call( this );

	this.type = 'CubicBezierCurve3';

	this.v0 = v0 || new Vector3();
	this.v1 = v1 || new Vector3();
	this.v2 = v2 || new Vector3();
	this.v3 = v3 || new Vector3();

}

CubicBezierCurve3.prototype = Object.create( Curve.prototype );
CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;

CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector3();

	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

	point.set(
		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
		CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
		CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
	);

	return point;

};

CubicBezierCurve3.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.v0.copy( source.v0 );
	this.v1.copy( source.v1 );
	this.v2.copy( source.v2 );
	this.v3.copy( source.v3 );

	return this;

};

CubicBezierCurve3.prototype.toJSON = function () {

	var data = Curve.prototype.toJSON.call( this );

	data.v0 = this.v0.toArray();
	data.v1 = this.v1.toArray();
	data.v2 = this.v2.toArray();
	data.v3 = this.v3.toArray();

	return data;

};

CubicBezierCurve3.prototype.fromJSON = function ( json ) {

	Curve.prototype.fromJSON.call( this, json );

	this.v0.fromArray( json.v0 );
	this.v1.fromArray( json.v1 );
	this.v2.fromArray( json.v2 );
	this.v3.fromArray( json.v3 );

	return this;

};

function LineCurve( v1, v2 ) {

	Curve.call( this );

	this.type = 'LineCurve';

	this.v1 = v1 || new Vector2();
	this.v2 = v2 || new Vector2();

}

LineCurve.prototype = Object.create( Curve.prototype );
LineCurve.prototype.constructor = LineCurve;

LineCurve.prototype.isLineCurve = true;

LineCurve.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector2();

	if ( t === 1 ) {

		point.copy( this.v2 );

	} else {

		point.copy( this.v2 ).sub( this.v1 );
		point.multiplyScalar( t ).add( this.v1 );

	}

	return point;

};

// Line curve is linear, so we can overwrite default getPointAt

LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {

	return this.getPoint( u, optionalTarget );

};

LineCurve.prototype.getTangent = function ( /* t */ ) {

	var tangent = this.v2.clone().sub( this.v1 );

	return tangent.normalize();

};

LineCurve.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.v1.copy( source.v1 );
	this.v2.copy( source.v2 );

	return this;

};

LineCurve.prototype.toJSON = function () {

	var data = Curve.prototype.toJSON.call( this );

	data.v1 = this.v1.toArray();
	data.v2 = this.v2.toArray();

	return data;

};

LineCurve.prototype.fromJSON = function ( json ) {

	Curve.prototype.fromJSON.call( this, json );

	this.v1.fromArray( json.v1 );
	this.v2.fromArray( json.v2 );

	return this;

};

function LineCurve3( v1, v2 ) {

	Curve.call( this );

	this.type = 'LineCurve3';

	this.v1 = v1 || new Vector3();
	this.v2 = v2 || new Vector3();

}

LineCurve3.prototype = Object.create( Curve.prototype );
LineCurve3.prototype.constructor = LineCurve3;

LineCurve3.prototype.isLineCurve3 = true;

LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector3();

	if ( t === 1 ) {

		point.copy( this.v2 );

	} else {

		point.copy( this.v2 ).sub( this.v1 );
		point.multiplyScalar( t ).add( this.v1 );

	}

	return point;

};

// Line curve is linear, so we can overwrite default getPointAt

LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {

	return this.getPoint( u, optionalTarget );

};

LineCurve3.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.v1.copy( source.v1 );
	this.v2.copy( source.v2 );

	return this;

};

LineCurve3.prototype.toJSON = function () {

	var data = Curve.prototype.toJSON.call( this );

	data.v1 = this.v1.toArray();
	data.v2 = this.v2.toArray();

	return data;

};

LineCurve3.prototype.fromJSON = function ( json ) {

	Curve.prototype.fromJSON.call( this, json );

	this.v1.fromArray( json.v1 );
	this.v2.fromArray( json.v2 );

	return this;

};

function QuadraticBezierCurve( v0, v1, v2 ) {

	Curve.call( this );

	this.type = 'QuadraticBezierCurve';

	this.v0 = v0 || new Vector2();
	this.v1 = v1 || new Vector2();
	this.v2 = v2 || new Vector2();

}

QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector2();

	var v0 = this.v0, v1 = this.v1, v2 = this.v2;

	point.set(
		QuadraticBezier( t, v0.x, v1.x, v2.x ),
		QuadraticBezier( t, v0.y, v1.y, v2.y )
	);

	return point;

};

QuadraticBezierCurve.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.v0.copy( source.v0 );
	this.v1.copy( source.v1 );
	this.v2.copy( source.v2 );

	return this;

};

QuadraticBezierCurve.prototype.toJSON = function () {

	var data = Curve.prototype.toJSON.call( this );

	data.v0 = this.v0.toArray();
	data.v1 = this.v1.toArray();
	data.v2 = this.v2.toArray();

	return data;

};

QuadraticBezierCurve.prototype.fromJSON = function ( json ) {

	Curve.prototype.fromJSON.call( this, json );

	this.v0.fromArray( json.v0 );
	this.v1.fromArray( json.v1 );
	this.v2.fromArray( json.v2 );

	return this;

};

function QuadraticBezierCurve3( v0, v1, v2 ) {

	Curve.call( this );

	this.type = 'QuadraticBezierCurve3';

	this.v0 = v0 || new Vector3();
	this.v1 = v1 || new Vector3();
	this.v2 = v2 || new Vector3();

}

QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;

QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector3();

	var v0 = this.v0, v1 = this.v1, v2 = this.v2;

	point.set(
		QuadraticBezier( t, v0.x, v1.x, v2.x ),
		QuadraticBezier( t, v0.y, v1.y, v2.y ),
		QuadraticBezier( t, v0.z, v1.z, v2.z )
	);

	return point;

};

QuadraticBezierCurve3.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.v0.copy( source.v0 );
	this.v1.copy( source.v1 );
	this.v2.copy( source.v2 );

	return this;

};

QuadraticBezierCurve3.prototype.toJSON = function () {

	var data = Curve.prototype.toJSON.call( this );

	data.v0 = this.v0.toArray();
	data.v1 = this.v1.toArray();
	data.v2 = this.v2.toArray();

	return data;

};

QuadraticBezierCurve3.prototype.fromJSON = function ( json ) {

	Curve.prototype.fromJSON.call( this, json );

	this.v0.fromArray( json.v0 );
	this.v1.fromArray( json.v1 );
	this.v2.fromArray( json.v2 );

	return this;

};

function SplineCurve( points /* array of Vector2 */ ) {

	Curve.call( this );

	this.type = 'SplineCurve';

	this.points = points || [];

}

SplineCurve.prototype = Object.create( Curve.prototype );
SplineCurve.prototype.constructor = SplineCurve;

SplineCurve.prototype.isSplineCurve = true;

SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector2();

	var points = this.points;
	var p = ( points.length - 1 ) * t;

	var intPoint = Math.floor( p );
	var weight = p - intPoint;

	var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
	var p1 = points[ intPoint ];
	var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
	var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

	point.set(
		CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
		CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
	);

	return point;

};

SplineCurve.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.points = [];

	for ( var i = 0, l = source.points.length; i < l; i ++ ) {

		var point = source.points[ i ];

		this.points.push( point.clone() );

	}

	return this;

};

SplineCurve.prototype.toJSON = function () {

	var data = Curve.prototype.toJSON.call( this );

	data.points = [];

	for ( var i = 0, l = this.points.length; i < l; i ++ ) {

		var point = this.points[ i ];
		data.points.push( point.toArray() );

	}

	return data;

};

SplineCurve.prototype.fromJSON = function ( json ) {

	Curve.prototype.fromJSON.call( this, json );

	this.points = [];

	for ( var i = 0, l = json.points.length; i < l; i ++ ) {

		var point = json.points[ i ];
		this.points.push( new Vector2().fromArray( point ) );

	}

	return this;

};



var Curves = Object.freeze({
	ArcCurve: ArcCurve,
	CatmullRomCurve3: CatmullRomCurve3,
	CubicBezierCurve: CubicBezierCurve,
	CubicBezierCurve3: CubicBezierCurve3,
	EllipseCurve: EllipseCurve,
	LineCurve: LineCurve,
	LineCurve3: LineCurve3,
	QuadraticBezierCurve: QuadraticBezierCurve,
	QuadraticBezierCurve3: QuadraticBezierCurve3,
	SplineCurve: SplineCurve
});

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 **/

/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/

function CurvePath() {

	Curve.call( this );

	this.type = 'CurvePath';

	this.curves = [];
	this.autoClose = false; // Automatically closes the path

}

CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

	constructor: CurvePath,

	add: function ( curve ) {

		this.curves.push( curve );

	},

	closePath: function () {

		// Add a line curve if start and end of lines are not connected
		var startPoint = this.curves[ 0 ].getPoint( 0 );
		var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

		if ( ! startPoint.equals( endPoint ) ) {

			this.curves.push( new LineCurve( endPoint, startPoint ) );

		}

	},

	// To get accurate point with reference to
	// entire path distance at time t,
	// following has to be done:

	// 1. Length of each sub path have to be known
	// 2. Locate and identify type of curve
	// 3. Get t for the curve
	// 4. Return curve.getPointAt(t')

	getPoint: function ( t ) {

		var d = t * this.getLength();
		var curveLengths = this.getCurveLengths();
		var i = 0;

		// To think about boundaries points.

		while ( i < curveLengths.length ) {

			if ( curveLengths[ i ] >= d ) {

				var diff = curveLengths[ i ] - d;
				var curve = this.curves[ i ];

				var segmentLength = curve.getLength();
				var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

				return curve.getPointAt( u );

			}

			i ++;

		}

		return null;

		// loop where sum != 0, sum > d , sum+1 <d

	},

	// We cannot use the default THREE.Curve getPoint() with getLength() because in
	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
	// getPoint() depends on getLength

	getLength: function () {

		var lens = this.getCurveLengths();
		return lens[ lens.length - 1 ];

	},

	// cacheLengths must be recalculated.
	updateArcLengths: function () {

		this.needsUpdate = true;
		this.cacheLengths = null;
		this.getCurveLengths();

	},

	// Compute lengths and cache them
	// We cannot overwrite getLengths() because UtoT mapping uses it.

	getCurveLengths: function () {

		// We use cache values if curves and cache array are same length

		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

			return this.cacheLengths;

		}

		// Get length of sub-curve
		// Push sums into cached array

		var lengths = [], sums = 0;

		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

			sums += this.curves[ i ].getLength();
			lengths.push( sums );

		}

		this.cacheLengths = lengths;

		return lengths;

	},

	getSpacedPoints: function ( divisions ) {

		if ( divisions === undefined ) divisions = 40;

		var points = [];

		for ( var i = 0; i <= divisions; i ++ ) {

			points.push( this.getPoint( i / divisions ) );

		}

		if ( this.autoClose ) {

			points.push( points[ 0 ] );

		}

		return points;

	},

	getPoints: function ( divisions ) {

		divisions = divisions || 12;

		var points = [], last;

		for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

			var curve = curves[ i ];
			var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
				: ( curve && curve.isLineCurve ) ? 1
					: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
						: divisions;

			var pts = curve.getPoints( resolution );

			for ( var j = 0; j < pts.length; j ++ ) {

				var point = pts[ j ];

				if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

				points.push( point );
				last = point;

			}

		}

		if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {

			points.push( points[ 0 ] );

		}

		return points;

	},

	copy: function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.curves = [];

		for ( var i = 0, l = source.curves.length; i < l; i ++ ) {

			var curve = source.curves[ i ];

			this.curves.push( curve.clone() );

		}

		this.autoClose = source.autoClose;

		return this;

	},

	toJSON: function () {

		var data = Curve.prototype.toJSON.call( this );

		data.autoClose = this.autoClose;
		data.curves = [];

		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

			var curve = this.curves[ i ];
			data.curves.push( curve.toJSON() );

		}

		return data;

	},

	fromJSON: function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.autoClose = json.autoClose;
		this.curves = [];

		for ( var i = 0, l = json.curves.length; i < l; i ++ ) {

			var curve = json.curves[ i ];
			this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );

		}

		return this;

	}

} );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Creates free form 2d path using series of points, lines or curves.
 **/

function Path( points ) {

	CurvePath.call( this );

	this.type = 'Path';

	this.currentPoint = new Vector2();

	if ( points ) {

		this.setFromPoints( points );

	}

}

Path.prototype = Object.assign( Object.create( CurvePath.prototype ), {

	constructor: Path,

	setFromPoints: function ( points ) {

		this.moveTo( points[ 0 ].x, points[ 0 ].y );

		for ( var i = 1, l = points.length; i < l; i ++ ) {

			this.lineTo( points[ i ].x, points[ i ].y );

		}

	},

	moveTo: function ( x, y ) {

		this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

	},

	lineTo: function ( x, y ) {

		var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
		this.curves.push( curve );

		this.currentPoint.set( x, y );

	},

	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

		var curve = new QuadraticBezierCurve(
			this.currentPoint.clone(),
			new Vector2( aCPx, aCPy ),
			new Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.currentPoint.set( aX, aY );

	},

	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		var curve = new CubicBezierCurve(
			this.currentPoint.clone(),
			new Vector2( aCP1x, aCP1y ),
			new Vector2( aCP2x, aCP2y ),
			new Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.currentPoint.set( aX, aY );

	},

	splineThru: function ( pts /*Array of Vector*/ ) {

		var npts = [ this.currentPoint.clone() ].concat( pts );

		var curve = new SplineCurve( npts );
		this.curves.push( curve );

		this.currentPoint.copy( pts[ pts.length - 1 ] );

	},

	arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		var x0 = this.currentPoint.x;
		var y0 = this.currentPoint.y;

		this.absarc( aX + x0, aY + y0, aRadius,
			aStartAngle, aEndAngle, aClockwise );

	},

	absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	},

	ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		var x0 = this.currentPoint.x;
		var y0 = this.currentPoint.y;

		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

	},

	absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		if ( this.curves.length > 0 ) {

			// if a previous curve is present, attempt to join
			var firstPoint = curve.getPoint( 0 );

			if ( ! firstPoint.equals( this.currentPoint ) ) {

				this.lineTo( firstPoint.x, firstPoint.y );

			}

		}

		this.curves.push( curve );

		var lastPoint = curve.getPoint( 1 );
		this.currentPoint.copy( lastPoint );

	},

	copy: function ( source ) {

		CurvePath.prototype.copy.call( this, source );

		this.currentPoint.copy( source.currentPoint );

		return this;

	},

	toJSON: function () {

		var data = CurvePath.prototype.toJSON.call( this );

		data.currentPoint = this.currentPoint.toArray();

		return data;

	},

	fromJSON: function ( json ) {

		CurvePath.prototype.fromJSON.call( this, json );

		this.currentPoint.fromArray( json.currentPoint );

		return this;

	}

} );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Defines a 2d shape plane using paths.
 **/

// STEP 1 Create a path.
// STEP 2 Turn path into shape.
// STEP 3 ExtrudeGeometry takes in Shape/Shapes
// STEP 3a - Extract points from each shape, turn to vertices
// STEP 3b - Triangulate each shape, add faces.

function Shape( points ) {

	Path.call( this, points );

	this.uuid = _Math.generateUUID();

	this.type = 'Shape';

	this.holes = [];

}

Shape.prototype = Object.assign( Object.create( Path.prototype ), {

	constructor: Shape,

	getPointsHoles: function ( divisions ) {

		var holesPts = [];

		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

			holesPts[ i ] = this.holes[ i ].getPoints( divisions );

		}

		return holesPts;

	},

	// get points of shape and holes (keypoints based on segments parameter)

	extractPoints: function ( divisions ) {

		return {

			shape: this.getPoints( divisions ),
			holes: this.getPointsHoles( divisions )

		};

	},

	copy: function ( source ) {

		Path.prototype.copy.call( this, source );

		this.holes = [];

		for ( var i = 0, l = source.holes.length; i < l; i ++ ) {

			var hole = source.holes[ i ];

			this.holes.push( hole.clone() );

		}

		return this;

	},

	toJSON: function () {

		var data = Path.prototype.toJSON.call( this );

		data.uuid = this.uuid;
		data.holes = [];

		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

			var hole = this.holes[ i ];
			data.holes.push( hole.toJSON() );

		}

		return data;

	},

	fromJSON: function ( json ) {

		Path.prototype.fromJSON.call( this, json );

		this.uuid = json.uuid;
		this.holes = [];

		for ( var i = 0, l = json.holes.length; i < l; i ++ ) {

			var hole = json.holes[ i ];
			this.holes.push( new Path().fromJSON( hole ) );

		}

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Light( color, intensity ) {

	Object3D.call( this );

	this.type = 'Light';

	this.color = new Color( color );
	this.intensity = intensity !== undefined ? intensity : 1;

	this.receiveShadow = undefined;

}

Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Light,

	isLight: true,

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.intensity = source.intensity;

		return this;

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.color = this.color.getHex();
		data.object.intensity = this.intensity;

		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

		if ( this.distance !== undefined ) data.object.distance = this.distance;
		if ( this.angle !== undefined ) data.object.angle = this.angle;
		if ( this.decay !== undefined ) data.object.decay = this.decay;
		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

		return data;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function HemisphereLight( skyColor, groundColor, intensity ) {

	Light.call( this, skyColor, intensity );

	this.type = 'HemisphereLight';

	this.castShadow = undefined;

	this.position.copy( Object3D.DefaultUp );
	this.updateMatrix();

	this.groundColor = new Color( groundColor );

}

HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: HemisphereLight,

	isHemisphereLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.groundColor.copy( source.groundColor );

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function LightShadow( camera ) {

	this.camera = camera;

	this.bias = 0;
	this.radius = 1;

	this.mapSize = new Vector2( 512, 512 );

	this.map = null;
	this.matrix = new Matrix4();

}

Object.assign( LightShadow.prototype, {

	copy: function ( source ) {

		this.camera = source.camera.clone();

		this.bias = source.bias;
		this.radius = source.radius;

		this.mapSize.copy( source.mapSize );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	toJSON: function () {

		var object = {};

		if ( this.bias !== 0 ) object.bias = this.bias;
		if ( this.radius !== 1 ) object.radius = this.radius;
		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

		object.camera = this.camera.toJSON( false ).object;
		delete object.camera.matrix;

		return object;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function SpotLightShadow() {

	LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

}

SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

	constructor: SpotLightShadow,

	isSpotLightShadow: true,

	update: function ( light ) {

		var camera = this.camera;

		var fov = _Math.RAD2DEG * 2 * light.angle;
		var aspect = this.mapSize.width / this.mapSize.height;
		var far = light.distance || camera.far;

		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

			camera.fov = fov;
			camera.aspect = aspect;
			camera.far = far;
			camera.updateProjectionMatrix();

		}

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

	Light.call( this, color, intensity );

	this.type = 'SpotLight';

	this.position.copy( Object3D.DefaultUp );
	this.updateMatrix();

	this.target = new Object3D();

	Object.defineProperty( this, 'power', {
		get: function () {

			// intensity = power per solid angle.
			// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			return this.intensity * Math.PI;

		},
		set: function ( power ) {

			// intensity = power per solid angle.
			// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			this.intensity = power / Math.PI;

		}
	} );

	this.distance = ( distance !== undefined ) ? distance : 0;
	this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
	this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

	this.shadow = new SpotLightShadow();

}

SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: SpotLight,

	isSpotLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.distance = source.distance;
		this.angle = source.angle;
		this.penumbra = source.penumbra;
		this.decay = source.decay;

		this.target = source.target.clone();

		this.shadow = source.shadow.clone();

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */


function PointLight( color, intensity, distance, decay ) {

	Light.call( this, color, intensity );

	this.type = 'PointLight';

	Object.defineProperty( this, 'power', {
		get: function () {

			// intensity = power per solid angle.
			// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			return this.intensity * 4 * Math.PI;

		},
		set: function ( power ) {

			// intensity = power per solid angle.
			// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			this.intensity = power / ( 4 * Math.PI );

		}
	} );

	this.distance = ( distance !== undefined ) ? distance : 0;
	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

	this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

}

PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: PointLight,

	isPointLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.distance = source.distance;
		this.decay = source.decay;

		this.shadow = source.shadow.clone();

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function DirectionalLightShadow( ) {

	LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

}

DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

	constructor: DirectionalLightShadow

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function DirectionalLight( color, intensity ) {

	Light.call( this, color, intensity );

	this.type = 'DirectionalLight';

	this.position.copy( Object3D.DefaultUp );
	this.updateMatrix();

	this.target = new Object3D();

	this.shadow = new DirectionalLightShadow();

}

DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: DirectionalLight,

	isDirectionalLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.target = source.target.clone();

		this.shadow = source.shadow.clone();

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function AmbientLight( color, intensity ) {

	Light.call( this, color, intensity );

	this.type = 'AmbientLight';

	this.castShadow = undefined;

}

AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: AmbientLight,

	isAmbientLight: true

} );

/**
 * @author abelnation / http://github.com/abelnation
 */

function RectAreaLight( color, intensity, width, height ) {

	Light.call( this, color, intensity );

	this.type = 'RectAreaLight';

	this.position.set( 0, 1, 0 );
	this.updateMatrix();

	this.width = ( width !== undefined ) ? width : 10;
	this.height = ( height !== undefined ) ? height : 10;

	// TODO (abelnation): distance/decay

	// TODO (abelnation): update method for RectAreaLight to update transform to lookat target

	// TODO (abelnation): shadows

}

// TODO (abelnation): RectAreaLight update when light shape is changed
RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: RectAreaLight,

	isRectAreaLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.width = source.width;
		this.height = source.height;

		return this;

	},

	toJSON: function ( meta ) {

		var data = Light.prototype.toJSON.call( this, meta );

		data.object.width = this.width;
		data.object.height = this.height;

		return data;

	}

} );

/**
 *
 * A Track that interpolates Strings
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function StringKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrack.call( this, name, times, values, interpolation );

}

StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

	constructor: StringKeyframeTrack,

	ValueTypeName: 'string',
	ValueBufferType: Array,

	DefaultInterpolation: InterpolateDiscrete,

	InterpolantFactoryMethodLinear: undefined,

	InterpolantFactoryMethodSmooth: undefined

} );

/**
 *
 * A Track of Boolean keyframe values.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function BooleanKeyframeTrack( name, times, values ) {

	KeyframeTrack.call( this, name, times, values );

}

BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

	constructor: BooleanKeyframeTrack,

	ValueTypeName: 'bool',
	ValueBufferType: Array,

	DefaultInterpolation: InterpolateDiscrete,

	InterpolantFactoryMethodLinear: undefined,
	InterpolantFactoryMethodSmooth: undefined

	// Note: Actually this track could have a optimized / compressed
	// representation of a single value and a custom interpolant that
	// computes "firstValue ^ isOdd( index )".

} );

/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 * @author tschw
 */

function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	this.parameterPositions = parameterPositions;
	this._cachedIndex = 0;

	this.resultBuffer = resultBuffer !== undefined ?
		resultBuffer : new sampleValues.constructor( sampleSize );
	this.sampleValues = sampleValues;
	this.valueSize = sampleSize;

}

Object.assign( Interpolant.prototype, {

	evaluate: function ( t ) {

		var pp = this.parameterPositions,
			i1 = this._cachedIndex,

			t1 = pp[ i1 ],
			t0 = pp[ i1 - 1 ];

		validate_interval: {

			seek: {

				var right;

				linear_scan: {

					//- See http://jsperf.com/comparison-to-undefined/3
					//- slower code:
					//-
					//- 				if ( t >= t1 || t1 === undefined ) {
					forward_scan: if ( ! ( t < t1 ) ) {

						for ( var giveUpAt = i1 + 2; ; ) {

							if ( t1 === undefined ) {

								if ( t < t0 ) break forward_scan;

								// after end

								i1 = pp.length;
								this._cachedIndex = i1;
								return this.afterEnd_( i1 - 1, t, t0 );

							}

							if ( i1 === giveUpAt ) break; // this loop

							t0 = t1;
							t1 = pp[ ++ i1 ];

							if ( t < t1 ) {

								// we have arrived at the sought interval
								break seek;

							}

						}

						// prepare binary search on the right side of the index
						right = pp.length;
						break linear_scan;

					}

					//- slower code:
					//-					if ( t < t0 || t0 === undefined ) {
					if ( ! ( t >= t0 ) ) {

						// looping?

						var t1global = pp[ 1 ];

						if ( t < t1global ) {

							i1 = 2; // + 1, using the scan for the details
							t0 = t1global;

						}

						// linear reverse scan

						for ( var giveUpAt = i1 - 2; ; ) {

							if ( t0 === undefined ) {

								// before start

								this._cachedIndex = 0;
								return this.beforeStart_( 0, t, t1 );

							}

							if ( i1 === giveUpAt ) break; // this loop

							t1 = t0;
							t0 = pp[ -- i1 - 1 ];

							if ( t >= t0 ) {

								// we have arrived at the sought interval
								break seek;

							}

						}

						// prepare binary search on the left side of the index
						right = i1;
						i1 = 0;
						break linear_scan;

					}

					// the interval is valid

					break validate_interval;

				} // linear scan

				// binary search

				while ( i1 < right ) {

					var mid = ( i1 + right ) >>> 1;

					if ( t < pp[ mid ] ) {

						right = mid;

					} else {

						i1 = mid + 1;

					}

				}

				t1 = pp[ i1 ];
				t0 = pp[ i1 - 1 ];

				// check boundary cases, again

				if ( t0 === undefined ) {

					this._cachedIndex = 0;
					return this.beforeStart_( 0, t, t1 );

				}

				if ( t1 === undefined ) {

					i1 = pp.length;
					this._cachedIndex = i1;
					return this.afterEnd_( i1 - 1, t0, t );

				}

			} // seek

			this._cachedIndex = i1;

			this.intervalChanged_( i1, t0, t1 );

		} // validate_interval

		return this.interpolate_( i1, t0, t, t1 );

	},

	settings: null, // optional, subclass-specific settings structure
	// Note: The indirection allows central control of many interpolants.

	// --- Protected interface

	DefaultSettings_: {},

	getSettings_: function () {

		return this.settings || this.DefaultSettings_;

	},

	copySampleValue_: function ( index ) {

		// copies a sample value to the result buffer

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,
			offset = index * stride;

		for ( var i = 0; i !== stride; ++ i ) {

			result[ i ] = values[ offset + i ];

		}

		return result;

	},

	// Template methods for derived classes:

	interpolate_: function ( /* i1, t0, t, t1 */ ) {

		throw new Error( 'call to abstract method' );
		// implementations shall return this.resultBuffer

	},

	intervalChanged_: function ( /* i1, t0, t1 */ ) {

		// empty

	}

} );

//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign( Interpolant.prototype, {

	//( 0, t, t0 ), returns this.resultBuffer
	beforeStart_: Interpolant.prototype.copySampleValue_,

	//( N-1, tN-1, t ), returns this.resultBuffer
	afterEnd_: Interpolant.prototype.copySampleValue_,

} );

/**
 * Spherical linear unit quaternion interpolant.
 *
 * @author tschw
 */

function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

}

QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: QuaternionLinearInterpolant,

	interpolate_: function ( i1, t0, t, t1 ) {

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			offset = i1 * stride,

			alpha = ( t - t0 ) / ( t1 - t0 );

		for ( var end = offset + stride; offset !== end; offset += 4 ) {

			Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );

		}

		return result;

	}

} );

/**
 *
 * A Track of quaternion keyframe values.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function QuaternionKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrack.call( this, name, times, values, interpolation );

}

QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

	constructor: QuaternionKeyframeTrack,

	ValueTypeName: 'quaternion',

	// ValueBufferType is inherited

	DefaultInterpolation: InterpolateLinear,

	InterpolantFactoryMethodLinear: function ( result ) {

		return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );

	},

	InterpolantFactoryMethodSmooth: undefined // not yet implemented

} );

/**
 *
 * A Track of keyframe values that represent color.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function ColorKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrack.call( this, name, times, values, interpolation );

}

ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

	constructor: ColorKeyframeTrack,

	ValueTypeName: 'color'

	// ValueBufferType is inherited

	// DefaultInterpolation is inherited

	// Note: Very basic implementation and nothing special yet.
	// However, this is the place for color space parameterization.

} );

/**
 *
 * A Track of numeric keyframe values.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function NumberKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrack.call( this, name, times, values, interpolation );

}

NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

	constructor: NumberKeyframeTrack,

	ValueTypeName: 'number'

	// ValueBufferType is inherited

	// DefaultInterpolation is inherited

} );

/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 *
 * @author tschw
 */

function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	this._weightPrev = - 0;
	this._offsetPrev = - 0;
	this._weightNext = - 0;
	this._offsetNext = - 0;

}

CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: CubicInterpolant,

	DefaultSettings_: {

		endingStart: ZeroCurvatureEnding,
		endingEnd: ZeroCurvatureEnding

	},

	intervalChanged_: function ( i1, t0, t1 ) {

		var pp = this.parameterPositions,
			iPrev = i1 - 2,
			iNext = i1 + 1,

			tPrev = pp[ iPrev ],
			tNext = pp[ iNext ];

		if ( tPrev === undefined ) {

			switch ( this.getSettings_().endingStart ) {

				case ZeroSlopeEnding:

					// f'(t0) = 0
					iPrev = i1;
					tPrev = 2 * t0 - t1;

					break;

				case WrapAroundEnding:

					// use the other end of the curve
					iPrev = pp.length - 2;
					tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

					break;

				default: // ZeroCurvatureEnding

					// f''(t0) = 0 a.k.a. Natural Spline
					iPrev = i1;
					tPrev = t1;

			}

		}

		if ( tNext === undefined ) {

			switch ( this.getSettings_().endingEnd ) {

				case ZeroSlopeEnding:

					// f'(tN) = 0
					iNext = i1;
					tNext = 2 * t1 - t0;

					break;

				case WrapAroundEnding:

					// use the other end of the curve
					iNext = 1;
					tNext = t1 + pp[ 1 ] - pp[ 0 ];

					break;

				default: // ZeroCurvatureEnding

					// f''(tN) = 0, a.k.a. Natural Spline
					iNext = i1 - 1;
					tNext = t0;

			}

		}

		var halfDt = ( t1 - t0 ) * 0.5,
			stride = this.valueSize;

		this._weightPrev = halfDt / ( t0 - tPrev );
		this._weightNext = halfDt / ( tNext - t1 );
		this._offsetPrev = iPrev * stride;
		this._offsetNext = iNext * stride;

	},

	interpolate_: function ( i1, t0, t, t1 ) {

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			o1 = i1 * stride,		o0 = o1 - stride,
			oP = this._offsetPrev, 	oN = this._offsetNext,
			wP = this._weightPrev,	wN = this._weightNext,

			p = ( t - t0 ) / ( t1 - t0 ),
			pp = p * p,
			ppp = pp * p;

		// evaluate polynomials

		var sP = - wP * ppp + 2 * wP * pp - wP * p;
		var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
		var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
		var sN = wN * ppp - wN * pp;

		// combine data linearly

		for ( var i = 0; i !== stride; ++ i ) {

			result[ i ] =
					sP * values[ oP + i ] +
					s0 * values[ o0 + i ] +
					s1 * values[ o1 + i ] +
					sN * values[ oN + i ];

		}

		return result;

	}

} );

/**
 * @author tschw
 */

function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

}

LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: LinearInterpolant,

	interpolate_: function ( i1, t0, t, t1 ) {

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			offset1 = i1 * stride,
			offset0 = offset1 - stride,

			weight1 = ( t - t0 ) / ( t1 - t0 ),
			weight0 = 1 - weight1;

		for ( var i = 0; i !== stride; ++ i ) {

			result[ i ] =
					values[ offset0 + i ] * weight0 +
					values[ offset1 + i ] * weight1;

		}

		return result;

	}

} );

/**
 *
 * Interpolant that evaluates to the sample value at the position preceeding
 * the parameter.
 *
 * @author tschw
 */

function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

}

DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: DiscreteInterpolant,

	interpolate_: function ( i1 /*, t0, t, t1 */ ) {

		return this.copySampleValue_( i1 - 1 );

	}

} );

/**
 * @author tschw
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 */

var AnimationUtils = {

	// same as Array.prototype.slice, but also works on typed arrays
	arraySlice: function ( array, from, to ) {

		if ( AnimationUtils.isTypedArray( array ) ) {

			// in ios9 array.subarray(from, undefined) will return empty array
			// but array.subarray(from) or array.subarray(from, len) is correct
			return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

		}

		return array.slice( from, to );

	},

	// converts an array to a specific type
	convertArray: function ( array, type, forceClone ) {

		if ( ! array || // let 'undefined' and 'null' pass
				! forceClone && array.constructor === type ) return array;

		if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

			return new type( array ); // create typed array

		}

		return Array.prototype.slice.call( array ); // create Array

	},

	isTypedArray: function ( object ) {

		return ArrayBuffer.isView( object ) &&
				! ( object instanceof DataView );

	},

	// returns an array by which times and values can be sorted
	getKeyframeOrder: function ( times ) {

		function compareTime( i, j ) {

			return times[ i ] - times[ j ];

		}

		var n = times.length;
		var result = new Array( n );
		for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

		result.sort( compareTime );

		return result;

	},

	// uses the array previously returned by 'getKeyframeOrder' to sort data
	sortedArray: function ( values, stride, order ) {

		var nValues = values.length;
		var result = new values.constructor( nValues );

		for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

			var srcOffset = order[ i ] * stride;

			for ( var j = 0; j !== stride; ++ j ) {

				result[ dstOffset ++ ] = values[ srcOffset + j ];

			}

		}

		return result;

	},

	// function for parsing AOS keyframe formats
	flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

		var i = 1, key = jsonKeys[ 0 ];

		while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

			key = jsonKeys[ i ++ ];

		}

		if ( key === undefined ) return; // no data

		var value = key[ valuePropertyName ];
		if ( value === undefined ) return; // no data

		if ( Array.isArray( value ) ) {

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					values.push.apply( values, value ); // push all elements

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		} else if ( value.toArray !== undefined ) {

			// ...assume THREE.Math-ish

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					value.toArray( values, values.length );

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		} else {

			// otherwise push as-is

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					values.push( value );

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		}

	}

};

/**
 *
 * A timed sequence of keyframes for a specific property.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function KeyframeTrack( name, times, values, interpolation ) {

	if ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );
	if ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );

	this.name = name;

	this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
	this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

	this.setInterpolation( interpolation || this.DefaultInterpolation );

	this.validate();
	this.optimize();

}

// Static methods:

Object.assign( KeyframeTrack, {

	// Serialization (in static context, because of constructor invocation
	// and automatic invocation of .toJSON):

	parse: function ( json ) {

		if ( json.type === undefined ) {

			throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );

		}

		var trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );

		if ( json.times === undefined ) {

			var times = [], values = [];

			AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

			json.times = times;
			json.values = values;

		}

		// derived classes can define a static parse method
		if ( trackType.parse !== undefined ) {

			return trackType.parse( json );

		} else {

			// by default, we assume a constructor compatible with the base
			return new trackType( json.name, json.times, json.values, json.interpolation );

		}

	},

	toJSON: function ( track ) {

		var trackType = track.constructor;

		var json;

		// derived classes can define a static toJSON method
		if ( trackType.toJSON !== undefined ) {

			json = trackType.toJSON( track );

		} else {

			// by default, we assume the data can be serialized as-is
			json = {

				'name': track.name,
				'times': AnimationUtils.convertArray( track.times, Array ),
				'values': AnimationUtils.convertArray( track.values, Array )

			};

			var interpolation = track.getInterpolation();

			if ( interpolation !== track.DefaultInterpolation ) {

				json.interpolation = interpolation;

			}

		}

		json.type = track.ValueTypeName; // mandatory

		return json;

	},

	_getTrackTypeForValueTypeName: function ( typeName ) {

		switch ( typeName.toLowerCase() ) {

			case 'scalar':
			case 'double':
			case 'float':
			case 'number':
			case 'integer':

				return NumberKeyframeTrack;

			case 'vector':
			case 'vector2':
			case 'vector3':
			case 'vector4':

				return VectorKeyframeTrack;

			case 'color':

				return ColorKeyframeTrack;

			case 'quaternion':

				return QuaternionKeyframeTrack;

			case 'bool':
			case 'boolean':

				return BooleanKeyframeTrack;

			case 'string':

				return StringKeyframeTrack;

		}

		throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );

	}

} );

Object.assign( KeyframeTrack.prototype, {

	constructor: KeyframeTrack,

	TimeBufferType: Float32Array,

	ValueBufferType: Float32Array,

	DefaultInterpolation: InterpolateLinear,

	InterpolantFactoryMethodDiscrete: function ( result ) {

		return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );

	},

	InterpolantFactoryMethodLinear: function ( result ) {

		return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );

	},

	InterpolantFactoryMethodSmooth: function ( result ) {

		return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );

	},

	setInterpolation: function ( interpolation ) {

		var factoryMethod;

		switch ( interpolation ) {

			case InterpolateDiscrete:

				factoryMethod = this.InterpolantFactoryMethodDiscrete;

				break;

			case InterpolateLinear:

				factoryMethod = this.InterpolantFactoryMethodLinear;

				break;

			case InterpolateSmooth:

				factoryMethod = this.InterpolantFactoryMethodSmooth;

				break;

		}

		if ( factoryMethod === undefined ) {

			var message = "unsupported interpolation for " +
				this.ValueTypeName + " keyframe track named " + this.name;

			if ( this.createInterpolant === undefined ) {

				// fall back to default, unless the default itself is messed up
				if ( interpolation !== this.DefaultInterpolation ) {

					this.setInterpolation( this.DefaultInterpolation );

				} else {

					throw new Error( message ); // fatal, in this case

				}

			}

			console.warn( 'THREE.KeyframeTrack:', message );
			return;

		}

		this.createInterpolant = factoryMethod;

	},

	getInterpolation: function () {

		switch ( this.createInterpolant ) {

			case this.InterpolantFactoryMethodDiscrete:

				return InterpolateDiscrete;

			case this.InterpolantFactoryMethodLinear:

				return InterpolateLinear;

			case this.InterpolantFactoryMethodSmooth:

				return InterpolateSmooth;

		}

	},

	getValueSize: function () {

		return this.values.length / this.times.length;

	},

	// move all keyframes either forwards or backwards in time
	shift: function ( timeOffset ) {

		if ( timeOffset !== 0.0 ) {

			var times = this.times;

			for ( var i = 0, n = times.length; i !== n; ++ i ) {

				times[ i ] += timeOffset;

			}

		}

		return this;

	},

	// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
	scale: function ( timeScale ) {

		if ( timeScale !== 1.0 ) {

			var times = this.times;

			for ( var i = 0, n = times.length; i !== n; ++ i ) {

				times[ i ] *= timeScale;

			}

		}

		return this;

	},

	// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
	trim: function ( startTime, endTime ) {

		var times = this.times,
			nKeys = times.length,
			from = 0,
			to = nKeys - 1;

		while ( from !== nKeys && times[ from ] < startTime ) {

			++ from;

		}

		while ( to !== - 1 && times[ to ] > endTime ) {

			-- to;

		}

		++ to; // inclusive -> exclusive bound

		if ( from !== 0 || to !== nKeys ) {

			// empty tracks are forbidden, so keep at least one keyframe
			if ( from >= to ) to = Math.max( to, 1 ), from = to - 1;

			var stride = this.getValueSize();
			this.times = AnimationUtils.arraySlice( times, from, to );
			this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );

		}

		return this;

	},

	// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
	validate: function () {

		var valid = true;

		var valueSize = this.getValueSize();
		if ( valueSize - Math.floor( valueSize ) !== 0 ) {

			console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
			valid = false;

		}

		var times = this.times,
			values = this.values,

			nKeys = times.length;

		if ( nKeys === 0 ) {

			console.error( 'THREE.KeyframeTrack: Track is empty.', this );
			valid = false;

		}

		var prevTime = null;

		for ( var i = 0; i !== nKeys; i ++ ) {

			var currTime = times[ i ];

			if ( typeof currTime === 'number' && isNaN( currTime ) ) {

				console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
				valid = false;
				break;

			}

			if ( prevTime !== null && prevTime > currTime ) {

				console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
				valid = false;
				break;

			}

			prevTime = currTime;

		}

		if ( values !== undefined ) {

			if ( AnimationUtils.isTypedArray( values ) ) {

				for ( var i = 0, n = values.length; i !== n; ++ i ) {

					var value = values[ i ];

					if ( isNaN( value ) ) {

						console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
						valid = false;
						break;

					}

				}

			}

		}

		return valid;

	},

	// removes equivalent sequential keys as common in morph target sequences
	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
	optimize: function () {

		var times = this.times,
			values = this.values,
			stride = this.getValueSize(),

			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

			writeIndex = 1,
			lastIndex = times.length - 1;

		for ( var i = 1; i < lastIndex; ++ i ) {

			var keep = false;

			var time = times[ i ];
			var timeNext = times[ i + 1 ];

			// remove adjacent keyframes scheduled at the same time

			if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

				if ( ! smoothInterpolation ) {

					// remove unnecessary keyframes same as their neighbors

					var offset = i * stride,
						offsetP = offset - stride,
						offsetN = offset + stride;

					for ( var j = 0; j !== stride; ++ j ) {

						var value = values[ offset + j ];

						if ( value !== values[ offsetP + j ] ||
							value !== values[ offsetN + j ] ) {

							keep = true;
							break;

						}

					}

				} else {

					keep = true;

				}

			}

			// in-place compaction

			if ( keep ) {

				if ( i !== writeIndex ) {

					times[ writeIndex ] = times[ i ];

					var readOffset = i * stride,
						writeOffset = writeIndex * stride;

					for ( var j = 0; j !== stride; ++ j ) {

						values[ writeOffset + j ] = values[ readOffset + j ];

					}

				}

				++ writeIndex;

			}

		}

		// flush last keyframe (compaction looks ahead)

		if ( lastIndex > 0 ) {

			times[ writeIndex ] = times[ lastIndex ];

			for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {

				values[ writeOffset + j ] = values[ readOffset + j ];

			}

			++ writeIndex;

		}

		if ( writeIndex !== times.length ) {

			this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
			this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

		}

		return this;

	}

} );

/**
 *
 * A Track of vectored keyframe values.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function VectorKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrack.call( this, name, times, values, interpolation );

}

VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

	constructor: VectorKeyframeTrack,

	ValueTypeName: 'vector'

	// ValueBufferType is inherited

	// DefaultInterpolation is inherited

} );

/**
 *
 * Reusable set of Tracks that represent an animation.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 */

function AnimationClip( name, duration, tracks ) {

	this.name = name;
	this.tracks = tracks;
	this.duration = ( duration !== undefined ) ? duration : - 1;

	this.uuid = _Math.generateUUID();

	// this means it should figure out its duration by scanning the tracks
	if ( this.duration < 0 ) {

		this.resetDuration();

	}

	this.optimize();

}

Object.assign( AnimationClip, {

	parse: function ( json ) {

		var tracks = [],
			jsonTracks = json.tracks,
			frameTime = 1.0 / ( json.fps || 1.0 );

		for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

			tracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

		}

		return new AnimationClip( json.name, json.duration, tracks );

	},

	toJSON: function ( clip ) {

		var tracks = [],
			clipTracks = clip.tracks;

		var json = {

			'name': clip.name,
			'duration': clip.duration,
			'tracks': tracks

		};

		for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

			tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

		}

		return json;

	},

	CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {

		var numMorphTargets = morphTargetSequence.length;
		var tracks = [];

		for ( var i = 0; i < numMorphTargets; i ++ ) {

			var times = [];
			var values = [];

			times.push(
				( i + numMorphTargets - 1 ) % numMorphTargets,
				i,
				( i + 1 ) % numMorphTargets );

			values.push( 0, 1, 0 );

			var order = AnimationUtils.getKeyframeOrder( times );
			times = AnimationUtils.sortedArray( times, 1, order );
			values = AnimationUtils.sortedArray( values, 1, order );

			// if there is a key at the first frame, duplicate it as the
			// last frame as well for perfect loop.
			if ( ! noLoop && times[ 0 ] === 0 ) {

				times.push( numMorphTargets );
				values.push( values[ 0 ] );

			}

			tracks.push(
				new NumberKeyframeTrack(
					'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
					times, values
				).scale( 1.0 / fps ) );

		}

		return new AnimationClip( name, - 1, tracks );

	},

	findByName: function ( objectOrClipArray, name ) {

		var clipArray = objectOrClipArray;

		if ( ! Array.isArray( objectOrClipArray ) ) {

			var o = objectOrClipArray;
			clipArray = o.geometry && o.geometry.animations || o.animations;

		}

		for ( var i = 0; i < clipArray.length; i ++ ) {

			if ( clipArray[ i ].name === name ) {

				return clipArray[ i ];

			}

		}

		return null;

	},

	CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {

		var animationToMorphTargets = {};

		// tested with https://regex101.com/ on trick sequences
		// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
		var pattern = /^([\w-]*?)([\d]+)$/;

		// sort morph target names into animation groups based
		// patterns like Walk_001, Walk_002, Run_001, Run_002
		for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

			var morphTarget = morphTargets[ i ];
			var parts = morphTarget.name.match( pattern );

			if ( parts && parts.length > 1 ) {

				var name = parts[ 1 ];

				var animationMorphTargets = animationToMorphTargets[ name ];
				if ( ! animationMorphTargets ) {

					animationToMorphTargets[ name ] = animationMorphTargets = [];

				}

				animationMorphTargets.push( morphTarget );

			}

		}

		var clips = [];

		for ( var name in animationToMorphTargets ) {

			clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

		}

		return clips;

	},

	// parse the animation.hierarchy format
	parseAnimation: function ( animation, bones ) {

		if ( ! animation ) {

			console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
			return null;

		}

		var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

			// only return track if there are actually keys.
			if ( animationKeys.length !== 0 ) {

				var times = [];
				var values = [];

				AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

				// empty keys are filtered out, so check again
				if ( times.length !== 0 ) {

					destTracks.push( new trackType( trackName, times, values ) );

				}

			}

		};

		var tracks = [];

		var clipName = animation.name || 'default';
		// automatic length determination in AnimationClip.
		var duration = animation.length || - 1;
		var fps = animation.fps || 30;

		var hierarchyTracks = animation.hierarchy || [];

		for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

			var animationKeys = hierarchyTracks[ h ].keys;

			// skip empty tracks
			if ( ! animationKeys || animationKeys.length === 0 ) continue;

			// process morph targets
			if ( animationKeys[ 0 ].morphTargets ) {

				// figure out all morph targets used in this track
				var morphTargetNames = {};

				for ( var k = 0; k < animationKeys.length; k ++ ) {

					if ( animationKeys[ k ].morphTargets ) {

						for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

							morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

						}

					}

				}

				// create a track for each morph target with all zero
				// morphTargetInfluences except for the keys in which
				// the morphTarget is named.
				for ( var morphTargetName in morphTargetNames ) {

					var times = [];
					var values = [];

					for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {

						var animationKey = animationKeys[ k ];

						times.push( animationKey.time );
						values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

					}

					tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

				}

				duration = morphTargetNames.length * ( fps || 1.0 );

			} else {

				// ...assume skeletal animation

				var boneName = '.bones[' + bones[ h ].name + ']';

				addNonemptyTrack(
					VectorKeyframeTrack, boneName + '.position',
					animationKeys, 'pos', tracks );

				addNonemptyTrack(
					QuaternionKeyframeTrack, boneName + '.quaternion',
					animationKeys, 'rot', tracks );

				addNonemptyTrack(
					VectorKeyframeTrack, boneName + '.scale',
					animationKeys, 'scl', tracks );

			}

		}

		if ( tracks.length === 0 ) {

			return null;

		}

		var clip = new AnimationClip( clipName, duration, tracks );

		return clip;

	}

} );

Object.assign( AnimationClip.prototype, {

	resetDuration: function () {

		var tracks = this.tracks, duration = 0;

		for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

			var track = this.tracks[ i ];

			duration = Math.max( duration, track.times[ track.times.length - 1 ] );

		}

		this.duration = duration;

	},

	trim: function () {

		for ( var i = 0; i < this.tracks.length; i ++ ) {

			this.tracks[ i ].trim( 0, this.duration );

		}

		return this;

	},

	optimize: function () {

		for ( var i = 0; i < this.tracks.length; i ++ ) {

			this.tracks[ i ].optimize();

		}

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function MaterialLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	this.textures = {};

}

Object.assign( MaterialLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new FileLoader( scope.manager );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		}, onProgress, onError );

	},

	setTextures: function ( value ) {

		this.textures = value;

	},

	parse: function ( json ) {

		var textures = this.textures;

		function getTexture( name ) {

			if ( textures[ name ] === undefined ) {

				console.warn( 'THREE.MaterialLoader: Undefined texture', name );

			}

			return textures[ name ];

		}

		var material = new Materials[ json.type ]();

		if ( json.uuid !== undefined ) material.uuid = json.uuid;
		if ( json.name !== undefined ) material.name = json.name;
		if ( json.color !== undefined ) material.color.setHex( json.color );
		if ( json.roughness !== undefined ) material.roughness = json.roughness;
		if ( json.metalness !== undefined ) material.metalness = json.metalness;
		if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
		if ( json.specular !== undefined ) material.specular.setHex( json.specular );
		if ( json.shininess !== undefined ) material.shininess = json.shininess;
		if ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;
		if ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;
		if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
		if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
		if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
		if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
		if ( json.fog !== undefined ) material.fog = json.fog;
		if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
		if ( json.blending !== undefined ) material.blending = json.blending;
		if ( json.side !== undefined ) material.side = json.side;
		if ( json.opacity !== undefined ) material.opacity = json.opacity;
		if ( json.transparent !== undefined ) material.transparent = json.transparent;
		if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
		if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
		if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
		if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
		if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
		if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
		if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
		if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;

		if ( json.rotation !== undefined ) material.rotation = json.rotation;

		if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
		if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
		if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
		if ( json.scale !== undefined ) material.scale = json.scale;

		if ( json.skinning !== undefined ) material.skinning = json.skinning;
		if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;
		if ( json.dithering !== undefined ) material.dithering = json.dithering;

		if ( json.visible !== undefined ) material.visible = json.visible;
		if ( json.userData !== undefined ) material.userData = json.userData;

		// Deprecated

		if ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading

		// for PointsMaterial

		if ( json.size !== undefined ) material.size = json.size;
		if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

		// maps

		if ( json.map !== undefined ) material.map = getTexture( json.map );

		if ( json.alphaMap !== undefined ) {

			material.alphaMap = getTexture( json.alphaMap );
			material.transparent = true;

		}

		if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
		if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

		if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
		if ( json.normalScale !== undefined ) {

			var normalScale = json.normalScale;

			if ( Array.isArray( normalScale ) === false ) {

				// Blender exporter used to export a scalar. See #7459

				normalScale = [ normalScale, normalScale ];

			}

			material.normalScale = new Vector2().fromArray( normalScale );

		}

		if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
		if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
		if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

		if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
		if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

		if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
		if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

		if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );

		if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );

		if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;

		if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
		if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

		if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
		if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

		if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );

		return material;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function BufferGeometryLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( BufferGeometryLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new FileLoader( scope.manager );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		}, onProgress, onError );

	},

	parse: function ( json ) {

		var geometry = new BufferGeometry();

		var index = json.data.index;

		if ( index !== undefined ) {

			var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
			geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

		}

		var attributes = json.data.attributes;

		for ( var key in attributes ) {

			var attribute = attributes[ key ];
			var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

			geometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );

		}

		var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

		if ( groups !== undefined ) {

			for ( var i = 0, n = groups.length; i !== n; ++ i ) {

				var group = groups[ i ];

				geometry.addGroup( group.start, group.count, group.materialIndex );

			}

		}

		var boundingSphere = json.data.boundingSphere;

		if ( boundingSphere !== undefined ) {

			var center = new Vector3();

			if ( boundingSphere.center !== undefined ) {

				center.fromArray( boundingSphere.center );

			}

			geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

		}

		return geometry;

	}

} );

var TYPED_ARRAYS = {
	Int8Array: Int8Array,
	Uint8Array: Uint8Array,
	// Workaround for IE11 pre KB2929437. See #11440
	Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
	Int16Array: Int16Array,
	Uint16Array: Uint16Array,
	Int32Array: Int32Array,
	Uint32Array: Uint32Array,
	Float32Array: Float32Array,
	Float64Array: Float64Array
};

/**
 * @author alteredq / http://alteredqualia.com/
 */

function Loader() {

	this.onLoadStart = function () {};
	this.onLoadProgress = function () {};
	this.onLoadComplete = function () {};

}

Loader.Handlers = {

	handlers: [],

	add: function ( regex, loader ) {

		this.handlers.push( regex, loader );

	},

	get: function ( file ) {

		var handlers = this.handlers;

		for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

			var regex = handlers[ i ];
			var loader = handlers[ i + 1 ];

			if ( regex.test( file ) ) {

				return loader;

			}

		}

		return null;

	}

};

Object.assign( Loader.prototype, {

	crossOrigin: undefined,

	initMaterials: function ( materials, texturePath, crossOrigin ) {

		var array = [];

		for ( var i = 0; i < materials.length; ++ i ) {

			array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

		}

		return array;

	},

	createMaterial: ( function () {

		var BlendingMode = {
			NoBlending: NoBlending,
			NormalBlending: NormalBlending,
			AdditiveBlending: AdditiveBlending,
			SubtractiveBlending: SubtractiveBlending,
			MultiplyBlending: MultiplyBlending,
			CustomBlending: CustomBlending
		};

		var color = new Color();
		var textureLoader = new TextureLoader();
		var materialLoader = new MaterialLoader();

		return function createMaterial( m, texturePath, crossOrigin ) {

			// convert from old material format

			var textures = {};

			function loadTexture( path, repeat, offset, wrap, anisotropy ) {

				var fullPath = texturePath + path;
				var loader = Loader.Handlers.get( fullPath );

				var texture;

				if ( loader !== null ) {

					texture = loader.load( fullPath );

				} else {

					textureLoader.setCrossOrigin( crossOrigin );
					texture = textureLoader.load( fullPath );

				}

				if ( repeat !== undefined ) {

					texture.repeat.fromArray( repeat );

					if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
					if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;

				}

				if ( offset !== undefined ) {

					texture.offset.fromArray( offset );

				}

				if ( wrap !== undefined ) {

					if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
					if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;

					if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
					if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;

				}

				if ( anisotropy !== undefined ) {

					texture.anisotropy = anisotropy;

				}

				var uuid = _Math.generateUUID();

				textures[ uuid ] = texture;

				return uuid;

			}

			//

			var json = {
				uuid: _Math.generateUUID(),
				type: 'MeshLambertMaterial'
			};

			for ( var name in m ) {

				var value = m[ name ];

				switch ( name ) {

					case 'DbgColor':
					case 'DbgIndex':
					case 'opticalDensity':
					case 'illumination':
						break;
					case 'DbgName':
						json.name = value;
						break;
					case 'blending':
						json.blending = BlendingMode[ value ];
						break;
					case 'colorAmbient':
					case 'mapAmbient':
						console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
						break;
					case 'colorDiffuse':
						json.color = color.fromArray( value ).getHex();
						break;
					case 'colorSpecular':
						json.specular = color.fromArray( value ).getHex();
						break;
					case 'colorEmissive':
						json.emissive = color.fromArray( value ).getHex();
						break;
					case 'specularCoef':
						json.shininess = value;
						break;
					case 'shading':
						if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
						if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
						if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
						break;
					case 'mapDiffuse':
						json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
						break;
					case 'mapDiffuseRepeat':
					case 'mapDiffuseOffset':
					case 'mapDiffuseWrap':
					case 'mapDiffuseAnisotropy':
						break;
					case 'mapEmissive':
						json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
						break;
					case 'mapEmissiveRepeat':
					case 'mapEmissiveOffset':
					case 'mapEmissiveWrap':
					case 'mapEmissiveAnisotropy':
						break;
					case 'mapLight':
						json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
						break;
					case 'mapLightRepeat':
					case 'mapLightOffset':
					case 'mapLightWrap':
					case 'mapLightAnisotropy':
						break;
					case 'mapAO':
						json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
						break;
					case 'mapAORepeat':
					case 'mapAOOffset':
					case 'mapAOWrap':
					case 'mapAOAnisotropy':
						break;
					case 'mapBump':
						json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
						break;
					case 'mapBumpScale':
						json.bumpScale = value;
						break;
					case 'mapBumpRepeat':
					case 'mapBumpOffset':
					case 'mapBumpWrap':
					case 'mapBumpAnisotropy':
						break;
					case 'mapNormal':
						json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
						break;
					case 'mapNormalFactor':
						json.normalScale = [ value, value ];
						break;
					case 'mapNormalRepeat':
					case 'mapNormalOffset':
					case 'mapNormalWrap':
					case 'mapNormalAnisotropy':
						break;
					case 'mapSpecular':
						json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
						break;
					case 'mapSpecularRepeat':
					case 'mapSpecularOffset':
					case 'mapSpecularWrap':
					case 'mapSpecularAnisotropy':
						break;
					case 'mapMetalness':
						json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
						break;
					case 'mapMetalnessRepeat':
					case 'mapMetalnessOffset':
					case 'mapMetalnessWrap':
					case 'mapMetalnessAnisotropy':
						break;
					case 'mapRoughness':
						json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
						break;
					case 'mapRoughnessRepeat':
					case 'mapRoughnessOffset':
					case 'mapRoughnessWrap':
					case 'mapRoughnessAnisotropy':
						break;
					case 'mapAlpha':
						json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
						break;
					case 'mapAlphaRepeat':
					case 'mapAlphaOffset':
					case 'mapAlphaWrap':
					case 'mapAlphaAnisotropy':
						break;
					case 'flipSided':
						json.side = BackSide;
						break;
					case 'doubleSided':
						json.side = DoubleSide;
						break;
					case 'transparency':
						console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
						json.opacity = value;
						break;
					case 'depthTest':
					case 'depthWrite':
					case 'colorWrite':
					case 'opacity':
					case 'reflectivity':
					case 'transparent':
					case 'visible':
					case 'wireframe':
						json[ name ] = value;
						break;
					case 'vertexColors':
						if ( value === true ) json.vertexColors = VertexColors;
						if ( value === 'face' ) json.vertexColors = FaceColors;
						break;
					default:
						console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
						break;

				}

			}

			if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
			if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

			if ( json.opacity < 1 ) json.transparent = true;

			materialLoader.setTextures( textures );

			return materialLoader.parse( json );

		};

	} )()

} );

/**
 * @author Don McCurdy / https://www.donmccurdy.com
 */

var LoaderUtils = {

	decodeText: function ( array ) {

		if ( typeof TextDecoder !== 'undefined' ) {

			return new TextDecoder().decode( array );

		}

		// Avoid the String.fromCharCode.apply(null, array) shortcut, which
		// throws a "maximum call stack size exceeded" error for large arrays.

		var s = '';

		for ( var i = 0, il = array.length; i < il; i ++ ) {

			// Implicitly assumes little-endian.
			s += String.fromCharCode( array[ i ] );

		}

		return s;

	},

	extractUrlBase: function ( url ) {

		var parts = url.split( '/' );

		if ( parts.length === 1 ) return './';

		parts.pop();

		return parts.join( '/' ) + '/';

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function JSONLoader( manager ) {

	if ( typeof manager === 'boolean' ) {

		console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
		manager = undefined;

	}

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	this.withCredentials = false;

}

Object.assign( JSONLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var texturePath = this.texturePath && ( typeof this.texturePath === 'string' ) ? this.texturePath : LoaderUtils.extractUrlBase( url );

		var loader = new FileLoader( this.manager );
		loader.setWithCredentials( this.withCredentials );
		loader.load( url, function ( text ) {

			var json = JSON.parse( text );
			var metadata = json.metadata;

			if ( metadata !== undefined ) {

				var type = metadata.type;

				if ( type !== undefined ) {

					if ( type.toLowerCase() === 'object' ) {

						console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
						return;

					}

					if ( type.toLowerCase() === 'scene' ) {

						console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
						return;

					}

				}

			}

			var object = scope.parse( json, texturePath );
			onLoad( object.geometry, object.materials );

		}, onProgress, onError );

	},

	setTexturePath: function ( value ) {

		this.texturePath = value;

	},

	parse: ( function () {

		function parseModel( json, geometry ) {

			function isBitSet( value, position ) {

				return value & ( 1 << position );

			}

			var i, j, fi,

				offset, zLength,

				colorIndex, normalIndex, uvIndex, materialIndex,

				type,
				isQuad,
				hasMaterial,
				hasFaceVertexUv,
				hasFaceNormal, hasFaceVertexNormal,
				hasFaceColor, hasFaceVertexColor,

				vertex, face, faceA, faceB, hex, normal,

				uvLayer, uv, u, v,

				faces = json.faces,
				vertices = json.vertices,
				normals = json.normals,
				colors = json.colors,

				scale = json.scale,

				nUvLayers = 0;


			if ( json.uvs !== undefined ) {

				// disregard empty arrays

				for ( i = 0; i < json.uvs.length; i ++ ) {

					if ( json.uvs[ i ].length ) nUvLayers ++;

				}

				for ( i = 0; i < nUvLayers; i ++ ) {

					geometry.faceVertexUvs[ i ] = [];

				}

			}

			offset = 0;
			zLength = vertices.length;

			while ( offset < zLength ) {

				vertex = new Vector3();

				vertex.x = vertices[ offset ++ ] * scale;
				vertex.y = vertices[ offset ++ ] * scale;
				vertex.z = vertices[ offset ++ ] * scale;

				geometry.vertices.push( vertex );

			}

			offset = 0;
			zLength = faces.length;

			while ( offset < zLength ) {

				type = faces[ offset ++ ];

				isQuad = isBitSet( type, 0 );
				hasMaterial = isBitSet( type, 1 );
				hasFaceVertexUv = isBitSet( type, 3 );
				hasFaceNormal = isBitSet( type, 4 );
				hasFaceVertexNormal = isBitSet( type, 5 );
				hasFaceColor = isBitSet( type, 6 );
				hasFaceVertexColor = isBitSet( type, 7 );

				// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

				if ( isQuad ) {

					faceA = new Face3();
					faceA.a = faces[ offset ];
					faceA.b = faces[ offset + 1 ];
					faceA.c = faces[ offset + 3 ];

					faceB = new Face3();
					faceB.a = faces[ offset + 1 ];
					faceB.b = faces[ offset + 2 ];
					faceB.c = faces[ offset + 3 ];

					offset += 4;

					if ( hasMaterial ) {

						materialIndex = faces[ offset ++ ];
						faceA.materialIndex = materialIndex;
						faceB.materialIndex = materialIndex;

					}

					// to get face <=> uv index correspondence

					fi = geometry.faces.length;

					if ( hasFaceVertexUv ) {

						for ( i = 0; i < nUvLayers; i ++ ) {

							uvLayer = json.uvs[ i ];

							geometry.faceVertexUvs[ i ][ fi ] = [];
							geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

							for ( j = 0; j < 4; j ++ ) {

								uvIndex = faces[ offset ++ ];

								u = uvLayer[ uvIndex * 2 ];
								v = uvLayer[ uvIndex * 2 + 1 ];

								uv = new Vector2( u, v );

								if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
								if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

							}

						}

					}

					if ( hasFaceNormal ) {

						normalIndex = faces[ offset ++ ] * 3;

						faceA.normal.set(
							normals[ normalIndex ++ ],
							normals[ normalIndex ++ ],
							normals[ normalIndex ]
						);

						faceB.normal.copy( faceA.normal );

					}

					if ( hasFaceVertexNormal ) {

						for ( i = 0; i < 4; i ++ ) {

							normalIndex = faces[ offset ++ ] * 3;

							normal = new Vector3(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);


							if ( i !== 2 ) faceA.vertexNormals.push( normal );
							if ( i !== 0 ) faceB.vertexNormals.push( normal );

						}

					}


					if ( hasFaceColor ) {

						colorIndex = faces[ offset ++ ];
						hex = colors[ colorIndex ];

						faceA.color.setHex( hex );
						faceB.color.setHex( hex );

					}


					if ( hasFaceVertexColor ) {

						for ( i = 0; i < 4; i ++ ) {

							colorIndex = faces[ offset ++ ];
							hex = colors[ colorIndex ];

							if ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );
							if ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );

						}

					}

					geometry.faces.push( faceA );
					geometry.faces.push( faceB );

				} else {

					face = new Face3();
					face.a = faces[ offset ++ ];
					face.b = faces[ offset ++ ];
					face.c = faces[ offset ++ ];

					if ( hasMaterial ) {

						materialIndex = faces[ offset ++ ];
						face.materialIndex = materialIndex;

					}

					// to get face <=> uv index correspondence

					fi = geometry.faces.length;

					if ( hasFaceVertexUv ) {

						for ( i = 0; i < nUvLayers; i ++ ) {

							uvLayer = json.uvs[ i ];

							geometry.faceVertexUvs[ i ][ fi ] = [];

							for ( j = 0; j < 3; j ++ ) {

								uvIndex = faces[ offset ++ ];

								u = uvLayer[ uvIndex * 2 ];
								v = uvLayer[ uvIndex * 2 + 1 ];

								uv = new Vector2( u, v );

								geometry.faceVertexUvs[ i ][ fi ].push( uv );

							}

						}

					}

					if ( hasFaceNormal ) {

						normalIndex = faces[ offset ++ ] * 3;

						face.normal.set(
							normals[ normalIndex ++ ],
							normals[ normalIndex ++ ],
							normals[ normalIndex ]
						);

					}

					if ( hasFaceVertexNormal ) {

						for ( i = 0; i < 3; i ++ ) {

							normalIndex = faces[ offset ++ ] * 3;

							normal = new Vector3(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

							face.vertexNormals.push( normal );

						}

					}


					if ( hasFaceColor ) {

						colorIndex = faces[ offset ++ ];
						face.color.setHex( colors[ colorIndex ] );

					}


					if ( hasFaceVertexColor ) {

						for ( i = 0; i < 3; i ++ ) {

							colorIndex = faces[ offset ++ ];
							face.vertexColors.push( new Color( colors[ colorIndex ] ) );

						}

					}

					geometry.faces.push( face );

				}

			}

		}

		function parseSkin( json, geometry ) {

			var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

			if ( json.skinWeights ) {

				for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

					var x = json.skinWeights[ i ];
					var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
					var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
					var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

					geometry.skinWeights.push( new Vector4( x, y, z, w ) );

				}

			}

			if ( json.skinIndices ) {

				for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

					var a = json.skinIndices[ i ];
					var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
					var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
					var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

					geometry.skinIndices.push( new Vector4( a, b, c, d ) );

				}

			}

			geometry.bones = json.bones;

			if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

				console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
					geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

			}

		}

		function parseMorphing( json, geometry ) {

			var scale = json.scale;

			if ( json.morphTargets !== undefined ) {

				for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

					geometry.morphTargets[ i ] = {};
					geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
					geometry.morphTargets[ i ].vertices = [];

					var dstVertices = geometry.morphTargets[ i ].vertices;
					var srcVertices = json.morphTargets[ i ].vertices;

					for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

						var vertex = new Vector3();
						vertex.x = srcVertices[ v ] * scale;
						vertex.y = srcVertices[ v + 1 ] * scale;
						vertex.z = srcVertices[ v + 2 ] * scale;

						dstVertices.push( vertex );

					}

				}

			}

			if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

				console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

				var faces = geometry.faces;
				var morphColors = json.morphColors[ 0 ].colors;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					faces[ i ].color.fromArray( morphColors, i * 3 );

				}

			}

		}

		function parseAnimations( json, geometry ) {

			var outputAnimations = [];

			// parse old style Bone/Hierarchy animations
			var animations = [];

			if ( json.animation !== undefined ) {

				animations.push( json.animation );

			}

			if ( json.animations !== undefined ) {

				if ( json.animations.length ) {

					animations = animations.concat( json.animations );

				} else {

					animations.push( json.animations );

				}

			}

			for ( var i = 0; i < animations.length; i ++ ) {

				var clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );
				if ( clip ) outputAnimations.push( clip );

			}

			// parse implicit morph animations
			if ( geometry.morphTargets ) {

				// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
				var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
				outputAnimations = outputAnimations.concat( morphAnimationClips );

			}

			if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

		}

		return function ( json, texturePath ) {

			if ( json.data !== undefined ) {

				// Geometry 4.0 spec
				json = json.data;

			}

			if ( json.scale !== undefined ) {

				json.scale = 1.0 / json.scale;

			} else {

				json.scale = 1.0;

			}

			var geometry = new Geometry();

			parseModel( json, geometry );
			parseSkin( json, geometry );
			parseMorphing( json, geometry );
			parseAnimations( json, geometry );

			geometry.computeFaceNormals();
			geometry.computeBoundingSphere();

			if ( json.materials === undefined || json.materials.length === 0 ) {

				return { geometry: geometry };

			} else {

				var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

				return { geometry: geometry, materials: materials };

			}

		};

	} )()

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function ObjectLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	this.texturePath = '';

}

Object.assign( ObjectLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		if ( this.texturePath === '' ) {

			this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

		}

		var scope = this;

		var loader = new FileLoader( scope.manager );
		loader.load( url, function ( text ) {

			var json = null;

			try {

				json = JSON.parse( text );

			} catch ( error ) {

				if ( onError !== undefined ) onError( error );

				console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

				return;

			}

			var metadata = json.metadata;

			if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

				console.error( 'THREE.ObjectLoader: Can\'t load ' + url + '. Use THREE.JSONLoader instead.' );
				return;

			}

			scope.parse( json, onLoad );

		}, onProgress, onError );

	},

	setTexturePath: function ( value ) {

		this.texturePath = value;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	parse: function ( json, onLoad ) {

		var shapes = this.parseShape( json.shapes );
		var geometries = this.parseGeometries( json.geometries, shapes );

		var images = this.parseImages( json.images, function () {

			if ( onLoad !== undefined ) onLoad( object );

		} );

		var textures = this.parseTextures( json.textures, images );
		var materials = this.parseMaterials( json.materials, textures );

		var object = this.parseObject( json.object, geometries, materials );

		if ( json.animations ) {

			object.animations = this.parseAnimations( json.animations );

		}

		if ( json.images === undefined || json.images.length === 0 ) {

			if ( onLoad !== undefined ) onLoad( object );

		}

		return object;

	},

	parseShape: function ( json ) {

		var shapes = {};

		if ( json !== undefined ) {

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var shape = new Shape().fromJSON( json[ i ] );

				shapes[ shape.uuid ] = shape;

			}

		}

		return shapes;

	},

	parseGeometries: function ( json, shapes ) {

		var geometries = {};

		if ( json !== undefined ) {

			var geometryLoader = new JSONLoader();
			var bufferGeometryLoader = new BufferGeometryLoader();

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var geometry;
				var data = json[ i ];

				switch ( data.type ) {

					case 'PlaneGeometry':
					case 'PlaneBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.width,
							data.height,
							data.widthSegments,
							data.heightSegments
						);

						break;

					case 'BoxGeometry':
					case 'BoxBufferGeometry':
					case 'CubeGeometry': // backwards compatible

						geometry = new Geometries[ data.type ](
							data.width,
							data.height,
							data.depth,
							data.widthSegments,
							data.heightSegments,
							data.depthSegments
						);

						break;

					case 'CircleGeometry':
					case 'CircleBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.segments,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'CylinderGeometry':
					case 'CylinderBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radiusTop,
							data.radiusBottom,
							data.height,
							data.radialSegments,
							data.heightSegments,
							data.openEnded,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'ConeGeometry':
					case 'ConeBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.height,
							data.radialSegments,
							data.heightSegments,
							data.openEnded,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'SphereGeometry':
					case 'SphereBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.widthSegments,
							data.heightSegments,
							data.phiStart,
							data.phiLength,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'DodecahedronGeometry':
					case 'DodecahedronBufferGeometry':
					case 'IcosahedronGeometry':
					case 'IcosahedronBufferGeometry':
					case 'OctahedronGeometry':
					case 'OctahedronBufferGeometry':
					case 'TetrahedronGeometry':
					case 'TetrahedronBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.detail
						);

						break;

					case 'RingGeometry':
					case 'RingBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.innerRadius,
							data.outerRadius,
							data.thetaSegments,
							data.phiSegments,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'TorusGeometry':
					case 'TorusBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.tube,
							data.radialSegments,
							data.tubularSegments,
							data.arc
						);

						break;

					case 'TorusKnotGeometry':
					case 'TorusKnotBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.tube,
							data.tubularSegments,
							data.radialSegments,
							data.p,
							data.q
						);

						break;

					case 'LatheGeometry':
					case 'LatheBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.points,
							data.segments,
							data.phiStart,
							data.phiLength
						);

						break;

					case 'PolyhedronGeometry':
					case 'PolyhedronBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.vertices,
							data.indices,
							data.radius,
							data.details
						);

						break;

					case 'ShapeGeometry':
					case 'ShapeBufferGeometry':

						var geometryShapes = [];

						for ( var i = 0, l = data.shapes.length; i < l; i ++ ) {

							var shape = shapes[ data.shapes[ i ] ];

							geometryShapes.push( shape );

						}

						geometry = new Geometries[ data.type ](
							geometryShapes,
							data.curveSegments
						);

						break;

					case 'BufferGeometry':

						geometry = bufferGeometryLoader.parse( data );

						break;

					case 'Geometry':

						geometry = geometryLoader.parse( data, this.texturePath ).geometry;

						break;

					default:

						console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

						continue;

				}

				geometry.uuid = data.uuid;

				if ( data.name !== undefined ) geometry.name = data.name;

				geometries[ data.uuid ] = geometry;

			}

		}

		return geometries;

	},

	parseMaterials: function ( json, textures ) {

		var materials = {};

		if ( json !== undefined ) {

			var loader = new MaterialLoader();
			loader.setTextures( textures );

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var data = json[ i ];

				if ( data.type === 'MultiMaterial' ) {

					// Deprecated

					var array = [];

					for ( var j = 0; j < data.materials.length; j ++ ) {

						array.push( loader.parse( data.materials[ j ] ) );

					}

					materials[ data.uuid ] = array;

				} else {

					materials[ data.uuid ] = loader.parse( data );

				}

			}

		}

		return materials;

	},

	parseAnimations: function ( json ) {

		var animations = [];

		for ( var i = 0; i < json.length; i ++ ) {

			var clip = AnimationClip.parse( json[ i ] );

			animations.push( clip );

		}

		return animations;

	},

	parseImages: function ( json, onLoad ) {

		var scope = this;
		var images = {};

		function loadImage( url ) {

			scope.manager.itemStart( url );

			return loader.load( url, function () {

				scope.manager.itemEnd( url );

			}, undefined, function () {

				scope.manager.itemEnd( url );
				scope.manager.itemError( url );

			} );

		}

		if ( json !== undefined && json.length > 0 ) {

			var manager = new LoadingManager( onLoad );

			var loader = new ImageLoader( manager );
			loader.setCrossOrigin( this.crossOrigin );

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var image = json[ i ];
				var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

				images[ image.uuid ] = loadImage( path );

			}

		}

		return images;

	},

	parseTextures: function ( json, images ) {

		function parseConstant( value, type ) {

			if ( typeof value === 'number' ) return value;

			console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

			return type[ value ];

		}

		var textures = {};

		if ( json !== undefined ) {

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var data = json[ i ];

				if ( data.image === undefined ) {

					console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

				}

				if ( images[ data.image ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

				}

				var texture = new Texture( images[ data.image ] );
				texture.needsUpdate = true;

				texture.uuid = data.uuid;

				if ( data.name !== undefined ) texture.name = data.name;

				if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );

				if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
				if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
				if ( data.center !== undefined ) texture.center.fromArray( data.center );
				if ( data.rotation !== undefined ) texture.rotation = data.rotation;

				if ( data.wrap !== undefined ) {

					texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
					texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

				}

				if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
				if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
				if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

				if ( data.flipY !== undefined ) texture.flipY = data.flipY;

				textures[ data.uuid ] = texture;

			}

		}

		return textures;

	},

	parseObject: function () {

		var matrix = new Matrix4();

		return function parseObject( data, geometries, materials ) {

			var object;

			function getGeometry( name ) {

				if ( geometries[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

				}

				return geometries[ name ];

			}

			function getMaterial( name ) {

				if ( name === undefined ) return undefined;

				if ( Array.isArray( name ) ) {

					var array = [];

					for ( var i = 0, l = name.length; i < l; i ++ ) {

						var uuid = name[ i ];

						if ( materials[ uuid ] === undefined ) {

							console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

						}

						array.push( materials[ uuid ] );

					}

					return array;

				}

				if ( materials[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined material', name );

				}

				return materials[ name ];

			}

			switch ( data.type ) {

				case 'Scene':

					object = new Scene();

					if ( data.background !== undefined ) {

						if ( Number.isInteger( data.background ) ) {

							object.background = new Color( data.background );

						}

					}

					if ( data.fog !== undefined ) {

						if ( data.fog.type === 'Fog' ) {

							object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

						} else if ( data.fog.type === 'FogExp2' ) {

							object.fog = new FogExp2( data.fog.color, data.fog.density );

						}

					}

					break;

				case 'PerspectiveCamera':

					object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

					if ( data.focus !== undefined ) object.focus = data.focus;
					if ( data.zoom !== undefined ) object.zoom = data.zoom;
					if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
					if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
					if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

					break;

				case 'OrthographicCamera':

					object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

					break;

				case 'AmbientLight':

					object = new AmbientLight( data.color, data.intensity );

					break;

				case 'DirectionalLight':

					object = new DirectionalLight( data.color, data.intensity );

					break;

				case 'PointLight':

					object = new PointLight( data.color, data.intensity, data.distance, data.decay );

					break;

				case 'RectAreaLight':

					object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

					break;

				case 'SpotLight':

					object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

					break;

				case 'HemisphereLight':

					object = new HemisphereLight( data.color, data.groundColor, data.intensity );

					break;

				case 'SkinnedMesh':

					console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );

				case 'Mesh':

					var geometry = getGeometry( data.geometry );
					var material = getMaterial( data.material );

					if ( geometry.bones && geometry.bones.length > 0 ) {

						object = new SkinnedMesh( geometry, material );

					} else {

						object = new Mesh( geometry, material );

					}

					break;

				case 'LOD':

					object = new LOD();

					break;

				case 'Line':

					object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

					break;

				case 'LineLoop':

					object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'LineSegments':

					object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'PointCloud':
				case 'Points':

					object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'Sprite':

					object = new Sprite( getMaterial( data.material ) );

					break;

				case 'Group':

					object = new Group();

					break;

				default:

					object = new Object3D();

			}

			object.uuid = data.uuid;

			if ( data.name !== undefined ) object.name = data.name;
			if ( data.matrix !== undefined ) {

				matrix.fromArray( data.matrix );
				matrix.decompose( object.position, object.quaternion, object.scale );

			} else {

				if ( data.position !== undefined ) object.position.fromArray( data.position );
				if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
				if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
				if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

			}

			if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
			if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

			if ( data.shadow ) {

				if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
				if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
				if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
				if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

			}

			if ( data.visible !== undefined ) object.visible = data.visible;
			if ( data.userData !== undefined ) object.userData = data.userData;

			if ( data.children !== undefined ) {

				var children = data.children;

				for ( var i = 0; i < children.length; i ++ ) {

					object.add( this.parseObject( children[ i ], geometries, materials ) );

				}

			}

			if ( data.type === 'LOD' ) {

				var levels = data.levels;

				for ( var l = 0; l < levels.length; l ++ ) {

					var level = levels[ l ];
					var child = object.getObjectByProperty( 'uuid', level.object );

					if ( child !== undefined ) {

						object.addLevel( child, level.distance );

					}

				}

			}

			return object;

		};

	}()

} );

var TEXTURE_MAPPING = {
	UVMapping: UVMapping,
	CubeReflectionMapping: CubeReflectionMapping,
	CubeRefractionMapping: CubeRefractionMapping,
	EquirectangularReflectionMapping: EquirectangularReflectionMapping,
	EquirectangularRefractionMapping: EquirectangularRefractionMapping,
	SphericalReflectionMapping: SphericalReflectionMapping,
	CubeUVReflectionMapping: CubeUVReflectionMapping,
	CubeUVRefractionMapping: CubeUVRefractionMapping
};

var TEXTURE_WRAPPING = {
	RepeatWrapping: RepeatWrapping,
	ClampToEdgeWrapping: ClampToEdgeWrapping,
	MirroredRepeatWrapping: MirroredRepeatWrapping
};

var TEXTURE_FILTER = {
	NearestFilter: NearestFilter,
	NearestMipMapNearestFilter: NearestMipMapNearestFilter,
	NearestMipMapLinearFilter: NearestMipMapLinearFilter,
	LinearFilter: LinearFilter,
	LinearMipMapNearestFilter: LinearMipMapNearestFilter,
	LinearMipMapLinearFilter: LinearMipMapLinearFilter
};

/**
 * @author thespite / http://clicktorelease.com/
 */

function ImageBitmapLoader( manager ) {

	if ( typeof createImageBitmap === 'undefined' ) {

		console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );

	}

	if ( typeof fetch === 'undefined' ) {

		console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );

	}

	this.manager = manager !== undefined ? manager : DefaultLoadingManager;
	this.options = undefined;

}

ImageBitmapLoader.prototype = {

	constructor: ImageBitmapLoader,

	setOptions: function setOptions( options ) {

		this.options = options;

		return this;

	},

	load: function load( url, onLoad, onProgress, onError ) {

		if ( url === undefined ) url = '';

		if ( this.path !== undefined ) url = this.path + url;

		var scope = this;

		var cached = Cache.get( url );

		if ( cached !== undefined ) {

			scope.manager.itemStart( url );

			setTimeout( function () {

				if ( onLoad ) onLoad( cached );

				scope.manager.itemEnd( url );

			}, 0 );

			return cached;

		}

		fetch( url ).then( function ( res ) {

			return res.blob();

		} ).then( function ( blob ) {

			return createImageBitmap( blob, scope.options );

		} ).then( function ( imageBitmap ) {

			Cache.add( url, imageBitmap );

			if ( onLoad ) onLoad( imageBitmap );

			scope.manager.itemEnd( url );

		} ).catch( function ( e ) {

			if ( onError ) onError( e );

			scope.manager.itemEnd( url );
			scope.manager.itemError( url );

		} );

	},

	setCrossOrigin: function ( /* value */ ) {

		return this;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
 **/

function ShapePath() {

	this.type = 'ShapePath';

	this.subPaths = [];
	this.currentPath = null;

}

Object.assign( ShapePath.prototype, {

	moveTo: function ( x, y ) {

		this.currentPath = new Path();
		this.subPaths.push( this.currentPath );
		this.currentPath.moveTo( x, y );

	},

	lineTo: function ( x, y ) {

		this.currentPath.lineTo( x, y );

	},

	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

	},

	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

	},

	splineThru: function ( pts ) {

		this.currentPath.splineThru( pts );

	},

	toShapes: function ( isCCW, noHoles ) {

		function toShapesNoHoles( inSubpaths ) {

			var shapes = [];

			for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

				var tmpPath = inSubpaths[ i ];

				var tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;

				shapes.push( tmpShape );

			}

			return shapes;

		}

		function isPointInsidePolygon( inPt, inPolygon ) {

			var polyLen = inPolygon.length;

			// inPt on polygon contour => immediate success    or
			// toggling of inside/outside at every single! intersection point of an edge
			//  with the horizontal line through inPt, left of inPt
			//  not counting lowerY endpoints of edges and whole edges on that line
			var inside = false;
			for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

				var edgeLowPt = inPolygon[ p ];
				var edgeHighPt = inPolygon[ q ];

				var edgeDx = edgeHighPt.x - edgeLowPt.x;
				var edgeDy = edgeHighPt.y - edgeLowPt.y;

				if ( Math.abs( edgeDy ) > Number.EPSILON ) {

					// not parallel
					if ( edgeDy < 0 ) {

						edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

					}
					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

					if ( inPt.y === edgeLowPt.y ) {

						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
						// continue;				// no intersection or edgeLowPt => doesn't count !!!

					} else {

						var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
						if ( perpEdge < 0 ) 				continue;
						inside = ! inside;		// true intersection left of inPt

					}

				} else {

					// parallel or collinear
					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
					// edge lies on the same horizontal line as inPt
					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
					// continue;

				}

			}

			return	inside;

		}

		var isClockWise = ShapeUtils.isClockWise;

		var subPaths = this.subPaths;
		if ( subPaths.length === 0 ) return [];

		if ( noHoles === true )	return	toShapesNoHoles( subPaths );


		var solid, tmpPath, tmpShape, shapes = [];

		if ( subPaths.length === 1 ) {

			tmpPath = subPaths[ 0 ];
			tmpShape = new Shape();
			tmpShape.curves = tmpPath.curves;
			shapes.push( tmpShape );
			return shapes;

		}

		var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
		holesFirst = isCCW ? ! holesFirst : holesFirst;

		// console.log("Holes first", holesFirst);

		var betterShapeHoles = [];
		var newShapes = [];
		var newShapeHoles = [];
		var mainIdx = 0;
		var tmpPoints;

		newShapes[ mainIdx ] = undefined;
		newShapeHoles[ mainIdx ] = [];

		for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

			tmpPath = subPaths[ i ];
			tmpPoints = tmpPath.getPoints();
			solid = isClockWise( tmpPoints );
			solid = isCCW ? ! solid : solid;

			if ( solid ) {

				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

				newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
				newShapes[ mainIdx ].s.curves = tmpPath.curves;

				if ( holesFirst )	mainIdx ++;
				newShapeHoles[ mainIdx ] = [];

				//console.log('cw', i);

			} else {

				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

				//console.log('ccw', i);

			}

		}

		// only Holes? -> probably all Shapes with wrong orientation
		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


		if ( newShapes.length > 1 ) {

			var ambiguous = false;
			var toChange = [];

			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				betterShapeHoles[ sIdx ] = [];

			}

			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				var sho = newShapeHoles[ sIdx ];

				for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

					var ho = sho[ hIdx ];
					var hole_unassigned = true;

					for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

							if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
							if ( hole_unassigned ) {

								hole_unassigned = false;
								betterShapeHoles[ s2Idx ].push( ho );

							} else {

								ambiguous = true;

							}

						}

					}
					if ( hole_unassigned ) {

						betterShapeHoles[ sIdx ].push( ho );

					}

				}

			}
			// console.log("ambiguous: ", ambiguous);
			if ( toChange.length > 0 ) {

				// console.log("to change: ", toChange);
				if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

			}

		}

		var tmpHoles;

		for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

			tmpShape = newShapes[ i ].s;
			shapes.push( tmpShape );
			tmpHoles = newShapeHoles[ i ];

			for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

				tmpShape.holes.push( tmpHoles[ j ].h );

			}

		}

		//console.log("shape", shapes);

		return shapes;

	}

} );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author mrdoob / http://mrdoob.com/
 */

function Font( data ) {

	this.type = 'Font';

	this.data = data;

}

Object.assign( Font.prototype, {

	isFont: true,

	generateShapes: function ( text, size, divisions ) {

		function createPaths( text ) {

			var chars = String( text ).split( '' );
			var scale = size / data.resolution;
			var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

			var offsetX = 0, offsetY = 0;

			var paths = [];

			for ( var i = 0; i < chars.length; i ++ ) {

				var char = chars[ i ];

				if ( char === '\n' ) {

					offsetX = 0;
					offsetY -= line_height;

				} else {

					var ret = createPath( char, scale, offsetX, offsetY );
					offsetX += ret.offsetX;
					paths.push( ret.path );

				}

			}

			return paths;

		}

		function createPath( c, scale, offsetX, offsetY ) {

			var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];

			if ( ! glyph ) return;

			var path = new ShapePath();

			var pts = [];
			var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

			if ( glyph.o ) {

				var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

				for ( var i = 0, l = outline.length; i < l; ) {

					var action = outline[ i ++ ];

					switch ( action ) {

						case 'm': // moveTo

							x = outline[ i ++ ] * scale + offsetX;
							y = outline[ i ++ ] * scale + offsetY;

							path.moveTo( x, y );

							break;

						case 'l': // lineTo

							x = outline[ i ++ ] * scale + offsetX;
							y = outline[ i ++ ] * scale + offsetY;

							path.lineTo( x, y );

							break;

						case 'q': // quadraticCurveTo

							cpx = outline[ i ++ ] * scale + offsetX;
							cpy = outline[ i ++ ] * scale + offsetY;
							cpx1 = outline[ i ++ ] * scale + offsetX;
							cpy1 = outline[ i ++ ] * scale + offsetY;

							path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

							laste = pts[ pts.length - 1 ];

							if ( laste ) {

								cpx0 = laste.x;
								cpy0 = laste.y;

								

							}

							break;

						case 'b': // bezierCurveTo

							cpx = outline[ i ++ ] * scale + offsetX;
							cpy = outline[ i ++ ] * scale + offsetY;
							cpx1 = outline[ i ++ ] * scale + offsetX;
							cpy1 = outline[ i ++ ] * scale + offsetY;
							cpx2 = outline[ i ++ ] * scale + offsetX;
							cpy2 = outline[ i ++ ] * scale + offsetY;

							path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

							laste = pts[ pts.length - 1 ];

							if ( laste ) {

								cpx0 = laste.x;
								cpy0 = laste.y;

								

							}

							break;

					}

				}

			}

			return { offsetX: glyph.ha * scale, path: path };

		}

		//

		if ( size === undefined ) size = 100;
		if ( divisions === undefined ) divisions = 4;

		var data = this.data;

		var paths = createPaths( text );
		var shapes = [];

		for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

			Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

		}

		return shapes;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function FontLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( FontLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new FileLoader( this.manager );
		loader.setPath( this.path );
		loader.load( url, function ( text ) {

			var json;

			try {

				json = JSON.parse( text );

			} catch ( e ) {

				console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
				json = JSON.parse( text.substring( 65, text.length - 2 ) );

			}

			var font = scope.parse( json );

			if ( onLoad ) onLoad( font );

		}, onProgress, onError );

	},

	parse: function ( json ) {

		return new Font( json );

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

var context;

var AudioContext = {

	getContext: function () {

		if ( context === undefined ) {

			context = new ( window.AudioContext || window.webkitAudioContext )();

		}

		return context;

	},

	setContext: function ( value ) {

		context = value;

	}

};

/**
 * @author Reece Aaron Lecrivain / http://reecenotes.com/
 */

function AudioLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( AudioLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var loader = new FileLoader( this.manager );
		loader.setResponseType( 'arraybuffer' );
		loader.load( url, function ( buffer ) {

			var context = AudioContext.getContext();

			context.decodeAudioData( buffer, function ( audioBuffer ) {

				onLoad( audioBuffer );

			} );

		}, onProgress, onError );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function StereoCamera() {

	this.type = 'StereoCamera';

	this.aspect = 1;

	this.eyeSep = 0.064;

	this.cameraL = new PerspectiveCamera();
	this.cameraL.layers.enable( 1 );
	this.cameraL.matrixAutoUpdate = false;

	this.cameraR = new PerspectiveCamera();
	this.cameraR.layers.enable( 2 );
	this.cameraR.matrixAutoUpdate = false;

}

Object.assign( StereoCamera.prototype, {

	update: ( function () {

		var instance, focus, fov, aspect, near, far, zoom, eyeSep;

		var eyeRight = new Matrix4();
		var eyeLeft = new Matrix4();

		return function update( camera ) {

			var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
												aspect !== camera.aspect * this.aspect || near !== camera.near ||
												far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;

			if ( needsUpdate ) {

				instance = this;
				focus = camera.focus;
				fov = camera.fov;
				aspect = camera.aspect * this.aspect;
				near = camera.near;
				far = camera.far;
				zoom = camera.zoom;

				// Off-axis stereoscopic effect based on
				// http://paulbourke.net/stereographics/stereorender/

				var projectionMatrix = camera.projectionMatrix.clone();
				eyeSep = this.eyeSep / 2;
				var eyeSepOnProjection = eyeSep * near / focus;
				var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
				var xmin, xmax;

				// translate xOffset

				eyeLeft.elements[ 12 ] = - eyeSep;
				eyeRight.elements[ 12 ] = eyeSep;

				// for left eye

				xmin = - ymax * aspect + eyeSepOnProjection;
				xmax = ymax * aspect + eyeSepOnProjection;

				projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

				this.cameraL.projectionMatrix.copy( projectionMatrix );

				// for right eye

				xmin = - ymax * aspect - eyeSepOnProjection;
				xmax = ymax * aspect - eyeSepOnProjection;

				projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

				this.cameraR.projectionMatrix.copy( projectionMatrix );

			}

			this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
			this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

		};

	} )()

} );

/**
 * Camera for rendering cube maps
 *	- renders scene into axis-aligned cube
 *
 * @author alteredq / http://alteredqualia.com/
 */

function CubeCamera( near, far, cubeResolution ) {

	Object3D.call( this );

	this.type = 'CubeCamera';

	var fov = 90, aspect = 1;

	var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
	cameraPX.up.set( 0, - 1, 0 );
	cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
	this.add( cameraPX );

	var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
	cameraNX.up.set( 0, - 1, 0 );
	cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
	this.add( cameraNX );

	var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
	cameraPY.up.set( 0, 0, 1 );
	cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
	this.add( cameraPY );

	var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
	cameraNY.up.set( 0, 0, - 1 );
	cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
	this.add( cameraNY );

	var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
	cameraPZ.up.set( 0, - 1, 0 );
	cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
	this.add( cameraPZ );

	var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
	cameraNZ.up.set( 0, - 1, 0 );
	cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
	this.add( cameraNZ );

	var options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };

	this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );
	this.renderTarget.texture.name = "CubeCamera";

	this.update = function ( renderer, scene ) {

		if ( this.parent === null ) this.updateMatrixWorld();

		var renderTarget = this.renderTarget;
		var generateMipmaps = renderTarget.texture.generateMipmaps;

		renderTarget.texture.generateMipmaps = false;

		renderTarget.activeCubeFace = 0;
		renderer.render( scene, cameraPX, renderTarget );

		renderTarget.activeCubeFace = 1;
		renderer.render( scene, cameraNX, renderTarget );

		renderTarget.activeCubeFace = 2;
		renderer.render( scene, cameraPY, renderTarget );

		renderTarget.activeCubeFace = 3;
		renderer.render( scene, cameraNY, renderTarget );

		renderTarget.activeCubeFace = 4;
		renderer.render( scene, cameraPZ, renderTarget );

		renderTarget.texture.generateMipmaps = generateMipmaps;

		renderTarget.activeCubeFace = 5;
		renderer.render( scene, cameraNZ, renderTarget );

		renderer.setRenderTarget( null );

	};

	this.clear = function ( renderer, color, depth, stencil ) {

		var renderTarget = this.renderTarget;

		for ( var i = 0; i < 6; i ++ ) {

			renderTarget.activeCubeFace = i;
			renderer.setRenderTarget( renderTarget );

			renderer.clear( color, depth, stencil );

		}

		renderer.setRenderTarget( null );

	};

}

CubeCamera.prototype = Object.create( Object3D.prototype );
CubeCamera.prototype.constructor = CubeCamera;

/**
 * @author mrdoob / http://mrdoob.com/
 */

function AudioListener() {

	Object3D.call( this );

	this.type = 'AudioListener';

	this.context = AudioContext.getContext();

	this.gain = this.context.createGain();
	this.gain.connect( this.context.destination );

	this.filter = null;

}

AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: AudioListener,

	getInput: function () {

		return this.gain;

	},

	removeFilter: function ( ) {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );
			this.gain.connect( this.context.destination );
			this.filter = null;

		}

	},

	getFilter: function () {

		return this.filter;

	},

	setFilter: function ( value ) {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );

		} else {

			this.gain.disconnect( this.context.destination );

		}

		this.filter = value;
		this.gain.connect( this.filter );
		this.filter.connect( this.context.destination );

	},

	getMasterVolume: function () {

		return this.gain.gain.value;

	},

	setMasterVolume: function ( value ) {

		this.gain.gain.value = value;

	},

	updateMatrixWorld: ( function () {

		var position = new Vector3();
		var quaternion = new Quaternion();
		var scale = new Vector3();

		var orientation = new Vector3();

		return function updateMatrixWorld( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			var listener = this.context.listener;
			var up = this.up;

			this.matrixWorld.decompose( position, quaternion, scale );

			orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

			if ( listener.positionX ) {

				listener.positionX.setValueAtTime( position.x, this.context.currentTime );
				listener.positionY.setValueAtTime( position.y, this.context.currentTime );
				listener.positionZ.setValueAtTime( position.z, this.context.currentTime );
				listener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );
				listener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );
				listener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );
				listener.upX.setValueAtTime( up.x, this.context.currentTime );
				listener.upY.setValueAtTime( up.y, this.context.currentTime );
				listener.upZ.setValueAtTime( up.z, this.context.currentTime );

			} else {

				listener.setPosition( position.x, position.y, position.z );
				listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

			}

		};

	} )()

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Reece Aaron Lecrivain / http://reecenotes.com/
 */

function Audio( listener ) {

	Object3D.call( this );

	this.type = 'Audio';

	this.context = listener.context;

	this.gain = this.context.createGain();
	this.gain.connect( listener.getInput() );

	this.autoplay = false;

	this.buffer = null;
	this.loop = false;
	this.startTime = 0;
	this.offset = 0;
	this.playbackRate = 1;
	this.isPlaying = false;
	this.hasPlaybackControl = true;
	this.sourceType = 'empty';

	this.filters = [];

}

Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Audio,

	getOutput: function () {

		return this.gain;

	},

	setNodeSource: function ( audioNode ) {

		this.hasPlaybackControl = false;
		this.sourceType = 'audioNode';
		this.source = audioNode;
		this.connect();

		return this;

	},

	setBuffer: function ( audioBuffer ) {

		this.buffer = audioBuffer;
		this.sourceType = 'buffer';

		if ( this.autoplay ) this.play();

		return this;

	},

	play: function () {

		if ( this.isPlaying === true ) {

			console.warn( 'THREE.Audio: Audio is already playing.' );
			return;

		}

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		var source = this.context.createBufferSource();

		source.buffer = this.buffer;
		source.loop = this.loop;
		source.onended = this.onEnded.bind( this );
		source.playbackRate.setValueAtTime( this.playbackRate, this.startTime );
		this.startTime = this.context.currentTime;
		source.start( this.startTime, this.offset );

		this.isPlaying = true;

		this.source = source;

		return this.connect();

	},

	pause: function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		if ( this.isPlaying === true ) {

			this.source.stop();
			this.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;
			this.isPlaying = false;

		}

		return this;

	},

	stop: function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.source.stop();
		this.offset = 0;
		this.isPlaying = false;

		return this;

	},

	connect: function () {

		if ( this.filters.length > 0 ) {

			this.source.connect( this.filters[ 0 ] );

			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

				this.filters[ i - 1 ].connect( this.filters[ i ] );

			}

			this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

		} else {

			this.source.connect( this.getOutput() );

		}

		return this;

	},

	disconnect: function () {

		if ( this.filters.length > 0 ) {

			this.source.disconnect( this.filters[ 0 ] );

			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

				this.filters[ i - 1 ].disconnect( this.filters[ i ] );

			}

			this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

		} else {

			this.source.disconnect( this.getOutput() );

		}

		return this;

	},

	getFilters: function () {

		return this.filters;

	},

	setFilters: function ( value ) {

		if ( ! value ) value = [];

		if ( this.isPlaying === true ) {

			this.disconnect();
			this.filters = value;
			this.connect();

		} else {

			this.filters = value;

		}

		return this;

	},

	getFilter: function () {

		return this.getFilters()[ 0 ];

	},

	setFilter: function ( filter ) {

		return this.setFilters( filter ? [ filter ] : [] );

	},

	setPlaybackRate: function ( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.playbackRate = value;

		if ( this.isPlaying === true ) {

			this.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );

		}

		return this;

	},

	getPlaybackRate: function () {

		return this.playbackRate;

	},

	onEnded: function () {

		this.isPlaying = false;

	},

	getLoop: function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return false;

		}

		return this.loop;

	},

	setLoop: function ( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.loop = value;

		if ( this.isPlaying === true ) {

			this.source.loop = this.loop;

		}

		return this;

	},

	getVolume: function () {

		return this.gain.gain.value;

	},

	setVolume: function ( value ) {

		this.gain.gain.value = value;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function PositionalAudio( listener ) {

	Audio.call( this, listener );

	this.panner = this.context.createPanner();
	this.panner.connect( this.gain );

}

PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

	constructor: PositionalAudio,

	getOutput: function () {

		return this.panner;

	},

	getRefDistance: function () {

		return this.panner.refDistance;

	},

	setRefDistance: function ( value ) {

		this.panner.refDistance = value;

	},

	getRolloffFactor: function () {

		return this.panner.rolloffFactor;

	},

	setRolloffFactor: function ( value ) {

		this.panner.rolloffFactor = value;

	},

	getDistanceModel: function () {

		return this.panner.distanceModel;

	},

	setDistanceModel: function ( value ) {

		this.panner.distanceModel = value;

	},

	getMaxDistance: function () {

		return this.panner.maxDistance;

	},

	setMaxDistance: function ( value ) {

		this.panner.maxDistance = value;

	},

	updateMatrixWorld: ( function () {

		var position = new Vector3();

		return function updateMatrixWorld( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			position.setFromMatrixPosition( this.matrixWorld );

			this.panner.setPosition( position.x, position.y, position.z );

		};

	} )()


} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function AudioAnalyser( audio, fftSize ) {

	this.analyser = audio.context.createAnalyser();
	this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

	this.data = new Uint8Array( this.analyser.frequencyBinCount );

	audio.getOutput().connect( this.analyser );

}

Object.assign( AudioAnalyser.prototype, {

	getFrequencyData: function () {

		this.analyser.getByteFrequencyData( this.data );

		return this.data;

	},

	getAverageFrequency: function () {

		var value = 0, data = this.getFrequencyData();

		for ( var i = 0; i < data.length; i ++ ) {

			value += data[ i ];

		}

		return value / data.length;

	}

} );

/**
 *
 * Buffered scene graph property that allows weighted accumulation.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function PropertyMixer( binding, typeName, valueSize ) {

	this.binding = binding;
	this.valueSize = valueSize;

	var bufferType = Float64Array,
		mixFunction;

	switch ( typeName ) {

		case 'quaternion':
			mixFunction = this._slerp;
			break;

		case 'string':
		case 'bool':
			bufferType = Array;
			mixFunction = this._select;
			break;

		default:
			mixFunction = this._lerp;

	}

	this.buffer = new bufferType( valueSize * 4 );
	// layout: [ incoming | accu0 | accu1 | orig ]
	//
	// interpolators can use .buffer as their .result
	// the data then goes to 'incoming'
	//
	// 'accu0' and 'accu1' are used frame-interleaved for
	// the cumulative result and are compared to detect
	// changes
	//
	// 'orig' stores the original state of the property

	this._mixBufferRegion = mixFunction;

	this.cumulativeWeight = 0;

	this.useCount = 0;
	this.referenceCount = 0;

}

Object.assign( PropertyMixer.prototype, {

	// accumulate data in the 'incoming' region into 'accu<i>'
	accumulate: function ( accuIndex, weight ) {

		// note: happily accumulating nothing when weight = 0, the caller knows
		// the weight and shouldn't have made the call in the first place

		var buffer = this.buffer,
			stride = this.valueSize,
			offset = accuIndex * stride + stride,

			currentWeight = this.cumulativeWeight;

		if ( currentWeight === 0 ) {

			// accuN := incoming * weight

			for ( var i = 0; i !== stride; ++ i ) {

				buffer[ offset + i ] = buffer[ i ];

			}

			currentWeight = weight;

		} else {

			// accuN := accuN + incoming * weight

			currentWeight += weight;
			var mix = weight / currentWeight;
			this._mixBufferRegion( buffer, offset, 0, mix, stride );

		}

		this.cumulativeWeight = currentWeight;

	},

	// apply the state of 'accu<i>' to the binding when accus differ
	apply: function ( accuIndex ) {

		var stride = this.valueSize,
			buffer = this.buffer,
			offset = accuIndex * stride + stride,

			weight = this.cumulativeWeight,

			binding = this.binding;

		this.cumulativeWeight = 0;

		if ( weight < 1 ) {

			// accuN := accuN + original * ( 1 - cumulativeWeight )

			var originalValueOffset = stride * 3;

			this._mixBufferRegion(
				buffer, offset, originalValueOffset, 1 - weight, stride );

		}

		for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

			if ( buffer[ i ] !== buffer[ i + stride ] ) {

				// value has changed -> update scene graph

				binding.setValue( buffer, offset );
				break;

			}

		}

	},

	// remember the state of the bound property and copy it to both accus
	saveOriginalState: function () {

		var binding = this.binding;

		var buffer = this.buffer,
			stride = this.valueSize,

			originalValueOffset = stride * 3;

		binding.getValue( buffer, originalValueOffset );

		// accu[0..1] := orig -- initially detect changes against the original
		for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

			buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

		}

		this.cumulativeWeight = 0;

	},

	// apply the state previously taken via 'saveOriginalState' to the binding
	restoreOriginalState: function () {

		var originalValueOffset = this.valueSize * 3;
		this.binding.setValue( this.buffer, originalValueOffset );

	},


	// mix functions

	_select: function ( buffer, dstOffset, srcOffset, t, stride ) {

		if ( t >= 0.5 ) {

			for ( var i = 0; i !== stride; ++ i ) {

				buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

			}

		}

	},

	_slerp: function ( buffer, dstOffset, srcOffset, t ) {

		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

	},

	_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {

		var s = 1 - t;

		for ( var i = 0; i !== stride; ++ i ) {

			var j = dstOffset + i;

			buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

		}

	}

} );

/**
 *
 * A reference to a real property in the scene graph.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function Composite( targetGroup, path, optionalParsedPath ) {

	var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

	this._targetGroup = targetGroup;
	this._bindings = targetGroup.subscribe_( path, parsedPath );

}

Object.assign( Composite.prototype, {

	getValue: function ( array, offset ) {

		this.bind(); // bind all binding

		var firstValidIndex = this._targetGroup.nCachedObjects_,
			binding = this._bindings[ firstValidIndex ];

		// and only call .getValue on the first
		if ( binding !== undefined ) binding.getValue( array, offset );

	},

	setValue: function ( array, offset ) {

		var bindings = this._bindings;

		for ( var i = this._targetGroup.nCachedObjects_,
				  n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].setValue( array, offset );

		}

	},

	bind: function () {

		var bindings = this._bindings;

		for ( var i = this._targetGroup.nCachedObjects_,
				  n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].bind();

		}

	},

	unbind: function () {

		var bindings = this._bindings;

		for ( var i = this._targetGroup.nCachedObjects_,
				  n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].unbind();

		}

	}

} );


function PropertyBinding( rootNode, path, parsedPath ) {

	this.path = path;
	this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

	this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

	this.rootNode = rootNode;

}

Object.assign( PropertyBinding, {

	Composite: Composite,

	create: function ( root, path, parsedPath ) {

		if ( ! ( root && root.isAnimationObjectGroup ) ) {

			return new PropertyBinding( root, path, parsedPath );

		} else {

			return new PropertyBinding.Composite( root, path, parsedPath );

		}

	},

	/**
	 * Replaces spaces with underscores and removes unsupported characters from
	 * node names, to ensure compatibility with parseTrackName().
	 *
	 * @param  {string} name Node name to be sanitized.
	 * @return {string}
	 */
	sanitizeNodeName: function ( name ) {

		return name.replace( /\s/g, '_' ).replace( /[^\w-]/g, '' );

	},

	parseTrackName: function () {

		// Parent directories, delimited by '/' or ':'. Currently unused, but must
		// be matched to parse the rest of the track name.
		var directoryRe = /((?:[\w-]+[\/:])*)/;

		// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
		var nodeRe = /([\w-\.]+)?/;

		// Object on target node, and accessor. Name may contain only word
		// characters. Accessor may contain any character except closing bracket.
		var objectRe = /(?:\.([\w-]+)(?:\[(.+)\])?)?/;

		// Property and accessor. May contain only word characters. Accessor may
		// contain any non-bracket characters.
		var propertyRe = /\.([\w-]+)(?:\[(.+)\])?/;

		var trackRe = new RegExp( ''
			+ '^'
			+ directoryRe.source
			+ nodeRe.source
			+ objectRe.source
			+ propertyRe.source
			+ '$'
		);

		var supportedObjectNames = [ 'material', 'materials', 'bones' ];

		return function ( trackName ) {

			var matches = trackRe.exec( trackName );

			if ( ! matches ) {

				throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

			}

			var results = {
				// directoryName: matches[ 1 ], // (tschw) currently unused
				nodeName: matches[ 2 ],
				objectName: matches[ 3 ],
				objectIndex: matches[ 4 ],
				propertyName: matches[ 5 ], // required
				propertyIndex: matches[ 6 ]
			};

			var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

			if ( lastDot !== undefined && lastDot !== - 1 ) {

				var objectName = results.nodeName.substring( lastDot + 1 );

				// Object names must be checked against a whitelist. Otherwise, there
				// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
				// 'bar' could be the objectName, or part of a nodeName (which can
				// include '.' characters).
				if ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {

					results.nodeName = results.nodeName.substring( 0, lastDot );
					results.objectName = objectName;

				}

			}

			if ( results.propertyName === null || results.propertyName.length === 0 ) {

				throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

			}

			return results;

		};

	}(),

	findNode: function ( root, nodeName ) {

		if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

			return root;

		}

		// search into skeleton bones.
		if ( root.skeleton ) {

			var searchSkeleton = function ( skeleton ) {

				for ( var i = 0; i < skeleton.bones.length; i ++ ) {

					var bone = skeleton.bones[ i ];

					if ( bone.name === nodeName ) {

						return bone;

					}

				}

				return null;

			};

			var bone = searchSkeleton( root.skeleton );

			if ( bone ) {

				return bone;

			}

		}

		// search into node subtree.
		if ( root.children ) {

			var searchNodeSubtree = function ( children ) {

				for ( var i = 0; i < children.length; i ++ ) {

					var childNode = children[ i ];

					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

						return childNode;

					}

					var result = searchNodeSubtree( childNode.children );

					if ( result ) return result;

				}

				return null;

			};

			var subTreeNode = searchNodeSubtree( root.children );

			if ( subTreeNode ) {

				return subTreeNode;

			}

		}

		return null;

	}

} );

Object.assign( PropertyBinding.prototype, { // prototype, continued

	// these are used to "bind" a nonexistent property
	_getValue_unavailable: function () {},
	_setValue_unavailable: function () {},

	BindingType: {
		Direct: 0,
		EntireArray: 1,
		ArrayElement: 2,
		HasFromToArray: 3
	},

	Versioning: {
		None: 0,
		NeedsUpdate: 1,
		MatrixWorldNeedsUpdate: 2
	},

	GetterByBindingType: [

		function getValue_direct( buffer, offset ) {

			buffer[ offset ] = this.node[ this.propertyName ];

		},

		function getValue_array( buffer, offset ) {

			var source = this.resolvedProperty;

			for ( var i = 0, n = source.length; i !== n; ++ i ) {

				buffer[ offset ++ ] = source[ i ];

			}

		},

		function getValue_arrayElement( buffer, offset ) {

			buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

		},

		function getValue_toArray( buffer, offset ) {

			this.resolvedProperty.toArray( buffer, offset );

		}

	],

	SetterByBindingTypeAndVersioning: [

		[
			// Direct

			function setValue_direct( buffer, offset ) {

				this.targetObject[ this.propertyName ] = buffer[ offset ];

			},

			function setValue_direct_setNeedsUpdate( buffer, offset ) {

				this.targetObject[ this.propertyName ] = buffer[ offset ];
				this.targetObject.needsUpdate = true;

			},

			function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

				this.targetObject[ this.propertyName ] = buffer[ offset ];
				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		], [

			// EntireArray

			function setValue_array( buffer, offset ) {

				var dest = this.resolvedProperty;

				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

					dest[ i ] = buffer[ offset ++ ];

				}

			},

			function setValue_array_setNeedsUpdate( buffer, offset ) {

				var dest = this.resolvedProperty;

				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

					dest[ i ] = buffer[ offset ++ ];

				}

				this.targetObject.needsUpdate = true;

			},

			function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

				var dest = this.resolvedProperty;

				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

					dest[ i ] = buffer[ offset ++ ];

				}

				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		], [

			// ArrayElement

			function setValue_arrayElement( buffer, offset ) {

				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

			},

			function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
				this.targetObject.needsUpdate = true;

			},

			function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		], [

			// HasToFromArray

			function setValue_fromArray( buffer, offset ) {

				this.resolvedProperty.fromArray( buffer, offset );

			},

			function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

				this.resolvedProperty.fromArray( buffer, offset );
				this.targetObject.needsUpdate = true;

			},

			function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

				this.resolvedProperty.fromArray( buffer, offset );
				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		]

	],

	getValue: function getValue_unbound( targetArray, offset ) {

		this.bind();
		this.getValue( targetArray, offset );

		// Note: This class uses a State pattern on a per-method basis:
		// 'bind' sets 'this.getValue' / 'setValue' and shadows the
		// prototype version of these methods with one that represents
		// the bound state. When the property is not found, the methods
		// become no-ops.

	},

	setValue: function getValue_unbound( sourceArray, offset ) {

		this.bind();
		this.setValue( sourceArray, offset );

	},

	// create getter / setter pair for a property in the scene graph
	bind: function () {

		var targetObject = this.node,
			parsedPath = this.parsedPath,

			objectName = parsedPath.objectName,
			propertyName = parsedPath.propertyName,
			propertyIndex = parsedPath.propertyIndex;

		if ( ! targetObject ) {

			targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;

			this.node = targetObject;

		}

		// set fail state so we can just 'return' on error
		this.getValue = this._getValue_unavailable;
		this.setValue = this._setValue_unavailable;

		// ensure there is a value node
		if ( ! targetObject ) {

			console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
			return;

		}

		if ( objectName ) {

			var objectIndex = parsedPath.objectIndex;

			// special cases were we need to reach deeper into the hierarchy to get the face materials....
			switch ( objectName ) {

				case 'materials':

					if ( ! targetObject.material ) {

						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
						return;

					}

					if ( ! targetObject.material.materials ) {

						console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
						return;

					}

					targetObject = targetObject.material.materials;

					break;

				case 'bones':

					if ( ! targetObject.skeleton ) {

						console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
						return;

					}

					// potential future optimization: skip this if propertyIndex is already an integer
					// and convert the integer string to a true integer.

					targetObject = targetObject.skeleton.bones;

					// support resolving morphTarget names into indices.
					for ( var i = 0; i < targetObject.length; i ++ ) {

						if ( targetObject[ i ].name === objectIndex ) {

							objectIndex = i;
							break;

						}

					}

					break;

				default:

					if ( targetObject[ objectName ] === undefined ) {

						console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
						return;

					}

					targetObject = targetObject[ objectName ];

			}


			if ( objectIndex !== undefined ) {

				if ( targetObject[ objectIndex ] === undefined ) {

					console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
					return;

				}

				targetObject = targetObject[ objectIndex ];

			}

		}

		// resolve property
		var nodeProperty = targetObject[ propertyName ];

		if ( nodeProperty === undefined ) {

			var nodeName = parsedPath.nodeName;

			console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
				'.' + propertyName + ' but it wasn\'t found.', targetObject );
			return;

		}

		// determine versioning scheme
		var versioning = this.Versioning.None;

		if ( targetObject.needsUpdate !== undefined ) { // material

			versioning = this.Versioning.NeedsUpdate;
			this.targetObject = targetObject;

		} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

			versioning = this.Versioning.MatrixWorldNeedsUpdate;
			this.targetObject = targetObject;

		}

		// determine how the property gets bound
		var bindingType = this.BindingType.Direct;

		if ( propertyIndex !== undefined ) {

			// access a sub element of the property array (only primitives are supported right now)

			if ( propertyName === "morphTargetInfluences" ) {

				// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

				// support resolving morphTarget names into indices.
				if ( ! targetObject.geometry ) {

					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
					return;

				}

				if ( targetObject.geometry.isBufferGeometry ) {

					if ( ! targetObject.geometry.morphAttributes ) {

						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {

						if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}


				} else {

					if ( ! targetObject.geometry.morphTargets ) {

						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

						if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}

				}

			}

			bindingType = this.BindingType.ArrayElement;

			this.resolvedProperty = nodeProperty;
			this.propertyIndex = propertyIndex;

		} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

			// must use copy for Object3D.Euler/Quaternion

			bindingType = this.BindingType.HasFromToArray;

			this.resolvedProperty = nodeProperty;

		} else if ( Array.isArray( nodeProperty ) ) {

			bindingType = this.BindingType.EntireArray;

			this.resolvedProperty = nodeProperty;

		} else {

			this.propertyName = propertyName;

		}

		// select getter / setter
		this.getValue = this.GetterByBindingType[ bindingType ];
		this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

	},

	unbind: function () {

		this.node = null;

		// back to the prototype version of getValue / setValue
		// note: avoiding to mutate the shape of 'this' via 'delete'
		this.getValue = this._getValue_unbound;
		this.setValue = this._setValue_unbound;

	}

} );

//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign( PropertyBinding.prototype, {

	// initial state of these methods that calls 'bind'
	_getValue_unbound: PropertyBinding.prototype.getValue,
	_setValue_unbound: PropertyBinding.prototype.setValue,

} );

/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 * 	-	Add objects you would otherwise pass as 'root' to the
 * 		constructor or the .clipAction method of AnimationMixer.
 *
 * 	-	Instead pass this object as 'root'.
 *
 * 	-	You can also add and remove objects later when the mixer
 * 		is running.
 *
 * Note:
 *
 *  	Objects of this class appear as one object to the mixer,
 *  	so cache control of the individual objects must be done
 *  	on the group.
 *
 * Limitation:
 *
 * 	- 	The animated properties must be compatible among the
 * 		all objects in the group.
 *
 *  -	A single property can either be controlled through a
 *  	target group or directly, but not both.
 *
 * @author tschw
 */

function AnimationObjectGroup() {

	this.uuid = _Math.generateUUID();

	// cached objects followed by the active ones
	this._objects = Array.prototype.slice.call( arguments );

	this.nCachedObjects_ = 0;			// threshold
	// note: read by PropertyBinding.Composite

	var indices = {};
	this._indicesByUUID = indices;		// for bookkeeping

	for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

		indices[ arguments[ i ].uuid ] = i;

	}

	this._paths = [];					// inside: string
	this._parsedPaths = [];				// inside: { we don't care, here }
	this._bindings = []; 				// inside: Array< PropertyBinding >
	this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

	var scope = this;

	this.stats = {

		objects: {
			get total() {

				return scope._objects.length;

			},
			get inUse() {

				return this.total - scope.nCachedObjects_;

			}
		},
		get bindingsPerObject() {

			return scope._bindings.length;

		}

	};

}

Object.assign( AnimationObjectGroup.prototype, {

	isAnimationObjectGroup: true,

	add: function () {

		var objects = this._objects,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_,
			indicesByUUID = this._indicesByUUID,
			paths = this._paths,
			parsedPaths = this._parsedPaths,
			bindings = this._bindings,
			nBindings = bindings.length;

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			var object = arguments[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ],
				knownObject = undefined;

			if ( index === undefined ) {

				// unknown object -> add it to the ACTIVE region

				index = nObjects ++;
				indicesByUUID[ uuid ] = index;
				objects.push( object );

				// accounting is done, now do the same for all bindings

				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

					bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );

				}

			} else if ( index < nCachedObjects ) {

				knownObject = objects[ index ];

				// move existing object to the ACTIVE region

				var firstActiveIndex = -- nCachedObjects,
					lastCachedObject = objects[ firstActiveIndex ];

				indicesByUUID[ lastCachedObject.uuid ] = index;
				objects[ index ] = lastCachedObject;

				indicesByUUID[ uuid ] = firstActiveIndex;
				objects[ firstActiveIndex ] = object;

				// accounting is done, now do the same for all bindings

				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

					var bindingsForPath = bindings[ j ],
						lastCached = bindingsForPath[ firstActiveIndex ],
						binding = bindingsForPath[ index ];

					bindingsForPath[ index ] = lastCached;

					if ( binding === undefined ) {

						// since we do not bother to create new bindings
						// for objects that are cached, the binding may
						// or may not exist

						binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );

					}

					bindingsForPath[ firstActiveIndex ] = binding;

				}

			} else if ( objects[ index ] !== knownObject ) {

				console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
						'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

			} // else the object is already where we want it to be

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	},

	remove: function () {

		var objects = this._objects,
			nCachedObjects = this.nCachedObjects_,
			indicesByUUID = this._indicesByUUID,
			bindings = this._bindings,
			nBindings = bindings.length;

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			var object = arguments[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ];

			if ( index !== undefined && index >= nCachedObjects ) {

				// move existing object into the CACHED region

				var lastCachedIndex = nCachedObjects ++,
					firstActiveObject = objects[ lastCachedIndex ];

				indicesByUUID[ firstActiveObject.uuid ] = index;
				objects[ index ] = firstActiveObject;

				indicesByUUID[ uuid ] = lastCachedIndex;
				objects[ lastCachedIndex ] = object;

				// accounting is done, now do the same for all bindings

				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

					var bindingsForPath = bindings[ j ],
						firstActive = bindingsForPath[ lastCachedIndex ],
						binding = bindingsForPath[ index ];

					bindingsForPath[ index ] = firstActive;
					bindingsForPath[ lastCachedIndex ] = binding;

				}

			}

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	},

	// remove & forget
	uncache: function () {

		var objects = this._objects,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_,
			indicesByUUID = this._indicesByUUID,
			bindings = this._bindings,
			nBindings = bindings.length;

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			var object = arguments[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ];

			if ( index !== undefined ) {

				delete indicesByUUID[ uuid ];

				if ( index < nCachedObjects ) {

					// object is cached, shrink the CACHED region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ],
						lastIndex = -- nObjects,
						lastObject = objects[ lastIndex ];

					// last cached object takes this object's place
					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					// last object goes to the activated slot and pop
					indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = lastObject;
					objects.pop();

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							last = bindingsForPath[ lastIndex ];

						bindingsForPath[ index ] = lastCached;
						bindingsForPath[ firstActiveIndex ] = last;
						bindingsForPath.pop();

					}

				} else {

					// object is active, just swap with the last and pop

					var lastIndex = -- nObjects,
						lastObject = objects[ lastIndex ];

					indicesByUUID[ lastObject.uuid ] = index;
					objects[ index ] = lastObject;
					objects.pop();

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ];

						bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
						bindingsForPath.pop();

					}

				} // cached or active

			} // if object is known

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	},

	// Internal interface used by befriended PropertyBinding.Composite:

	subscribe_: function ( path, parsedPath ) {

		// returns an array of bindings for the given path that is changed
		// according to the contained objects in the group

		var indicesByPath = this._bindingsIndicesByPath,
			index = indicesByPath[ path ],
			bindings = this._bindings;

		if ( index !== undefined ) return bindings[ index ];

		var paths = this._paths,
			parsedPaths = this._parsedPaths,
			objects = this._objects,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_,
			bindingsForPath = new Array( nObjects );

		index = bindings.length;

		indicesByPath[ path ] = index;

		paths.push( path );
		parsedPaths.push( parsedPath );
		bindings.push( bindingsForPath );

		for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

			var object = objects[ i ];
			bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

		}

		return bindingsForPath;

	},

	unsubscribe_: function ( path ) {

		// tells the group to forget about a property path and no longer
		// update the array previously obtained with 'subscribe_'

		var indicesByPath = this._bindingsIndicesByPath,
			index = indicesByPath[ path ];

		if ( index !== undefined ) {

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				lastBindingsIndex = bindings.length - 1,
				lastBindings = bindings[ lastBindingsIndex ],
				lastBindingsPath = path[ lastBindingsIndex ];

			indicesByPath[ lastBindingsPath ] = index;

			bindings[ index ] = lastBindings;
			bindings.pop();

			parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
			parsedPaths.pop();

			paths[ index ] = paths[ lastBindingsIndex ];
			paths.pop();

		}

	}

} );

/**
 *
 * Action provided by AnimationMixer for scheduling clip playback on specific
 * objects.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 *
 */

function AnimationAction( mixer, clip, localRoot ) {

	this._mixer = mixer;
	this._clip = clip;
	this._localRoot = localRoot || null;

	var tracks = clip.tracks,
		nTracks = tracks.length,
		interpolants = new Array( nTracks );

	var interpolantSettings = {
		endingStart: ZeroCurvatureEnding,
		endingEnd: ZeroCurvatureEnding
	};

	for ( var i = 0; i !== nTracks; ++ i ) {

		var interpolant = tracks[ i ].createInterpolant( null );
		interpolants[ i ] = interpolant;
		interpolant.settings = interpolantSettings;

	}

	this._interpolantSettings = interpolantSettings;

	this._interpolants = interpolants;	// bound by the mixer

	// inside: PropertyMixer (managed by the mixer)
	this._propertyBindings = new Array( nTracks );

	this._cacheIndex = null;			// for the memory manager
	this._byClipCacheIndex = null;		// for the memory manager

	this._timeScaleInterpolant = null;
	this._weightInterpolant = null;

	this.loop = LoopRepeat;
	this._loopCount = - 1;

	// global mixer time when the action is to be started
	// it's set back to 'null' upon start of the action
	this._startTime = null;

	// scaled local time of the action
	// gets clamped or wrapped to 0..clip.duration according to loop
	this.time = 0;

	this.timeScale = 1;
	this._effectiveTimeScale = 1;

	this.weight = 1;
	this._effectiveWeight = 1;

	this.repetitions = Infinity; 		// no. of repetitions when looping

	this.paused = false;				// true -> zero effective time scale
	this.enabled = true;				// false -> zero effective weight

	this.clampWhenFinished 	= false;	// keep feeding the last frame?

	this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
	this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

}

Object.assign( AnimationAction.prototype, {

	// State & Scheduling

	play: function () {

		this._mixer._activateAction( this );

		return this;

	},

	stop: function () {

		this._mixer._deactivateAction( this );

		return this.reset();

	},

	reset: function () {

		this.paused = false;
		this.enabled = true;

		this.time = 0;			// restart clip
		this._loopCount = - 1;	// forget previous loops
		this._startTime = null;	// forget scheduling

		return this.stopFading().stopWarping();

	},

	isRunning: function () {

		return this.enabled && ! this.paused && this.timeScale !== 0 &&
				this._startTime === null && this._mixer._isActiveAction( this );

	},

	// return true when play has been called
	isScheduled: function () {

		return this._mixer._isActiveAction( this );

	},

	startAt: function ( time ) {

		this._startTime = time;

		return this;

	},

	setLoop: function ( mode, repetitions ) {

		this.loop = mode;
		this.repetitions = repetitions;

		return this;

	},

	// Weight

	// set the weight stopping any scheduled fading
	// although .enabled = false yields an effective weight of zero, this
	// method does *not* change .enabled, because it would be confusing
	setEffectiveWeight: function ( weight ) {

		this.weight = weight;

		// note: same logic as when updated at runtime
		this._effectiveWeight = this.enabled ? weight : 0;

		return this.stopFading();

	},

	// return the weight considering fading and .enabled
	getEffectiveWeight: function () {

		return this._effectiveWeight;

	},

	fadeIn: function ( duration ) {

		return this._scheduleFading( duration, 0, 1 );

	},

	fadeOut: function ( duration ) {

		return this._scheduleFading( duration, 1, 0 );

	},

	crossFadeFrom: function ( fadeOutAction, duration, warp ) {

		fadeOutAction.fadeOut( duration );
		this.fadeIn( duration );

		if ( warp ) {

			var fadeInDuration = this._clip.duration,
				fadeOutDuration = fadeOutAction._clip.duration,

				startEndRatio = fadeOutDuration / fadeInDuration,
				endStartRatio = fadeInDuration / fadeOutDuration;

			fadeOutAction.warp( 1.0, startEndRatio, duration );
			this.warp( endStartRatio, 1.0, duration );

		}

		return this;

	},

	crossFadeTo: function ( fadeInAction, duration, warp ) {

		return fadeInAction.crossFadeFrom( this, duration, warp );

	},

	stopFading: function () {

		var weightInterpolant = this._weightInterpolant;

		if ( weightInterpolant !== null ) {

			this._weightInterpolant = null;
			this._mixer._takeBackControlInterpolant( weightInterpolant );

		}

		return this;

	},

	// Time Scale Control

	// set the time scale stopping any scheduled warping
	// although .paused = true yields an effective time scale of zero, this
	// method does *not* change .paused, because it would be confusing
	setEffectiveTimeScale: function ( timeScale ) {

		this.timeScale = timeScale;
		this._effectiveTimeScale = this.paused ? 0 : timeScale;

		return this.stopWarping();

	},

	// return the time scale considering warping and .paused
	getEffectiveTimeScale: function () {

		return this._effectiveTimeScale;

	},

	setDuration: function ( duration ) {

		this.timeScale = this._clip.duration / duration;

		return this.stopWarping();

	},

	syncWith: function ( action ) {

		this.time = action.time;
		this.timeScale = action.timeScale;

		return this.stopWarping();

	},

	halt: function ( duration ) {

		return this.warp( this._effectiveTimeScale, 0, duration );

	},

	warp: function ( startTimeScale, endTimeScale, duration ) {

		var mixer = this._mixer, now = mixer.time,
			interpolant = this._timeScaleInterpolant,

			timeScale = this.timeScale;

		if ( interpolant === null ) {

			interpolant = mixer._lendControlInterpolant();
			this._timeScaleInterpolant = interpolant;

		}

		var times = interpolant.parameterPositions,
			values = interpolant.sampleValues;

		times[ 0 ] = now;
		times[ 1 ] = now + duration;

		values[ 0 ] = startTimeScale / timeScale;
		values[ 1 ] = endTimeScale / timeScale;

		return this;

	},

	stopWarping: function () {

		var timeScaleInterpolant = this._timeScaleInterpolant;

		if ( timeScaleInterpolant !== null ) {

			this._timeScaleInterpolant = null;
			this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

		}

		return this;

	},

	// Object Accessors

	getMixer: function () {

		return this._mixer;

	},

	getClip: function () {

		return this._clip;

	},

	getRoot: function () {

		return this._localRoot || this._mixer._root;

	},

	// Interna

	_update: function ( time, deltaTime, timeDirection, accuIndex ) {

		// called by the mixer

		if ( ! this.enabled ) {

			// call ._updateWeight() to update ._effectiveWeight

			this._updateWeight( time );
			return;

		}

		var startTime = this._startTime;

		if ( startTime !== null ) {

			// check for scheduled start of action

			var timeRunning = ( time - startTime ) * timeDirection;
			if ( timeRunning < 0 || timeDirection === 0 ) {

				return; // yet to come / don't decide when delta = 0

			}

			// start

			this._startTime = null; // unschedule
			deltaTime = timeDirection * timeRunning;

		}

		// apply time scale and advance time

		deltaTime *= this._updateTimeScale( time );
		var clipTime = this._updateTime( deltaTime );

		// note: _updateTime may disable the action resulting in
		// an effective weight of 0

		var weight = this._updateWeight( time );

		if ( weight > 0 ) {

			var interpolants = this._interpolants;
			var propertyMixers = this._propertyBindings;

			for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

				interpolants[ j ].evaluate( clipTime );
				propertyMixers[ j ].accumulate( accuIndex, weight );

			}

		}

	},

	_updateWeight: function ( time ) {

		var weight = 0;

		if ( this.enabled ) {

			weight = this.weight;
			var interpolant = this._weightInterpolant;

			if ( interpolant !== null ) {

				var interpolantValue = interpolant.evaluate( time )[ 0 ];

				weight *= interpolantValue;

				if ( time > interpolant.parameterPositions[ 1 ] ) {

					this.stopFading();

					if ( interpolantValue === 0 ) {

						// faded out, disable
						this.enabled = false;

					}

				}

			}

		}

		this._effectiveWeight = weight;
		return weight;

	},

	_updateTimeScale: function ( time ) {

		var timeScale = 0;

		if ( ! this.paused ) {

			timeScale = this.timeScale;

			var interpolant = this._timeScaleInterpolant;

			if ( interpolant !== null ) {

				var interpolantValue = interpolant.evaluate( time )[ 0 ];

				timeScale *= interpolantValue;

				if ( time > interpolant.parameterPositions[ 1 ] ) {

					this.stopWarping();

					if ( timeScale === 0 ) {

						// motion has halted, pause
						this.paused = true;

					} else {

						// warp done - apply final time scale
						this.timeScale = timeScale;

					}

				}

			}

		}

		this._effectiveTimeScale = timeScale;
		return timeScale;

	},

	_updateTime: function ( deltaTime ) {

		var time = this.time + deltaTime;

		if ( deltaTime === 0 ) return time;

		var duration = this._clip.duration,

			loop = this.loop,
			loopCount = this._loopCount;

		if ( loop === LoopOnce ) {

			if ( loopCount === - 1 ) {

				// just started

				this._loopCount = 0;
				this._setEndings( true, true, false );

			}

			handle_stop: {

				if ( time >= duration ) {

					time = duration;

				} else if ( time < 0 ) {

					time = 0;

				} else break handle_stop;

				if ( this.clampWhenFinished ) this.paused = true;
				else this.enabled = false;

				this._mixer.dispatchEvent( {
					type: 'finished', action: this,
					direction: deltaTime < 0 ? - 1 : 1
				} );

			}

		} else { // repetitive Repeat or PingPong

			var pingPong = ( loop === LoopPingPong );

			if ( loopCount === - 1 ) {

				// just started

				if ( deltaTime >= 0 ) {

					loopCount = 0;

					this._setEndings( true, this.repetitions === 0, pingPong );

				} else {

					// when looping in reverse direction, the initial
					// transition through zero counts as a repetition,
					// so leave loopCount at -1

					this._setEndings( this.repetitions === 0, true, pingPong );

				}

			}

			if ( time >= duration || time < 0 ) {

				// wrap around

				var loopDelta = Math.floor( time / duration ); // signed
				time -= duration * loopDelta;

				loopCount += Math.abs( loopDelta );

				var pending = this.repetitions - loopCount;

				if ( pending < 0 ) {

					// have to stop (switch state, clamp time, fire event)

					if ( this.clampWhenFinished ) this.paused = true;
					else this.enabled = false;

					time = deltaTime > 0 ? duration : 0;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime > 0 ? 1 : - 1
					} );

				} else {

					// keep running

					if ( pending === 0 ) {

						// entering the last round

						var atStart = deltaTime < 0;
						this._setEndings( atStart, ! atStart, pingPong );

					} else {

						this._setEndings( false, false, pingPong );

					}

					this._loopCount = loopCount;

					this._mixer.dispatchEvent( {
						type: 'loop', action: this, loopDelta: loopDelta
					} );

				}

			}

			if ( pingPong && ( loopCount & 1 ) === 1 ) {

				// invert time for the "pong round"

				this.time = time;
				return duration - time;

			}

		}

		this.time = time;
		return time;

	},

	_setEndings: function ( atStart, atEnd, pingPong ) {

		var settings = this._interpolantSettings;

		if ( pingPong ) {

			settings.endingStart 	= ZeroSlopeEnding;
			settings.endingEnd		= ZeroSlopeEnding;

		} else {

			// assuming for LoopOnce atStart == atEnd == true

			if ( atStart ) {

				settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;

			} else {

				settings.endingStart = WrapAroundEnding;

			}

			if ( atEnd ) {

				settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;

			} else {

				settings.endingEnd 	 = WrapAroundEnding;

			}

		}

	},

	_scheduleFading: function ( duration, weightNow, weightThen ) {

		var mixer = this._mixer, now = mixer.time,
			interpolant = this._weightInterpolant;

		if ( interpolant === null ) {

			interpolant = mixer._lendControlInterpolant();
			this._weightInterpolant = interpolant;

		}

		var times = interpolant.parameterPositions,
			values = interpolant.sampleValues;

		times[ 0 ] = now; 				values[ 0 ] = weightNow;
		times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

		return this;

	}

} );

/**
 *
 * Player for AnimationClips.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function AnimationMixer( root ) {

	this._root = root;
	this._initMemoryManager();
	this._accuIndex = 0;

	this.time = 0;

	this.timeScale = 1.0;

}

AnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

	constructor: AnimationMixer,

	_bindAction: function ( action, prototypeAction ) {

		var root = action._localRoot || this._root,
			tracks = action._clip.tracks,
			nTracks = tracks.length,
			bindings = action._propertyBindings,
			interpolants = action._interpolants,
			rootUuid = root.uuid,
			bindingsByRoot = this._bindingsByRootAndName,
			bindingsByName = bindingsByRoot[ rootUuid ];

		if ( bindingsByName === undefined ) {

			bindingsByName = {};
			bindingsByRoot[ rootUuid ] = bindingsByName;

		}

		for ( var i = 0; i !== nTracks; ++ i ) {

			var track = tracks[ i ],
				trackName = track.name,
				binding = bindingsByName[ trackName ];

			if ( binding !== undefined ) {

				bindings[ i ] = binding;

			} else {

				binding = bindings[ i ];

				if ( binding !== undefined ) {

					// existing binding, make sure the cache knows

					if ( binding._cacheIndex === null ) {

						++ binding.referenceCount;
						this._addInactiveBinding( binding, rootUuid, trackName );

					}

					continue;

				}

				var path = prototypeAction && prototypeAction.
					_propertyBindings[ i ].binding.parsedPath;

				binding = new PropertyMixer(
					PropertyBinding.create( root, trackName, path ),
					track.ValueTypeName, track.getValueSize() );

				++ binding.referenceCount;
				this._addInactiveBinding( binding, rootUuid, trackName );

				bindings[ i ] = binding;

			}

			interpolants[ i ].resultBuffer = binding.buffer;

		}

	},

	_activateAction: function ( action ) {

		if ( ! this._isActiveAction( action ) ) {

			if ( action._cacheIndex === null ) {

				// this action has been forgotten by the cache, but the user
				// appears to be still using it -> rebind

				var rootUuid = ( action._localRoot || this._root ).uuid,
					clipUuid = action._clip.uuid,
					actionsForClip = this._actionsByClip[ clipUuid ];

				this._bindAction( action,
					actionsForClip && actionsForClip.knownActions[ 0 ] );

				this._addInactiveAction( action, clipUuid, rootUuid );

			}

			var bindings = action._propertyBindings;

			// increment reference counts / sort out state
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( binding.useCount ++ === 0 ) {

					this._lendBinding( binding );
					binding.saveOriginalState();

				}

			}

			this._lendAction( action );

		}

	},

	_deactivateAction: function ( action ) {

		if ( this._isActiveAction( action ) ) {

			var bindings = action._propertyBindings;

			// decrement reference counts / sort out state
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.useCount === 0 ) {

					binding.restoreOriginalState();
					this._takeBackBinding( binding );

				}

			}

			this._takeBackAction( action );

		}

	},

	// Memory manager

	_initMemoryManager: function () {

		this._actions = []; // 'nActiveActions' followed by inactive ones
		this._nActiveActions = 0;

		this._actionsByClip = {};
		// inside:
		// {
		// 		knownActions: Array< AnimationAction >	- used as prototypes
		// 		actionByRoot: AnimationAction			- lookup
		// }


		this._bindings = []; // 'nActiveBindings' followed by inactive ones
		this._nActiveBindings = 0;

		this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


		this._controlInterpolants = []; // same game as above
		this._nActiveControlInterpolants = 0;

		var scope = this;

		this.stats = {

			actions: {
				get total() {

					return scope._actions.length;

				},
				get inUse() {

					return scope._nActiveActions;

				}
			},
			bindings: {
				get total() {

					return scope._bindings.length;

				},
				get inUse() {

					return scope._nActiveBindings;

				}
			},
			controlInterpolants: {
				get total() {

					return scope._controlInterpolants.length;

				},
				get inUse() {

					return scope._nActiveControlInterpolants;

				}
			}

		};

	},

	// Memory management for AnimationAction objects

	_isActiveAction: function ( action ) {

		var index = action._cacheIndex;
		return index !== null && index < this._nActiveActions;

	},

	_addInactiveAction: function ( action, clipUuid, rootUuid ) {

		var actions = this._actions,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ];

		if ( actionsForClip === undefined ) {

			actionsForClip = {

				knownActions: [ action ],
				actionByRoot: {}

			};

			action._byClipCacheIndex = 0;

			actionsByClip[ clipUuid ] = actionsForClip;

		} else {

			var knownActions = actionsForClip.knownActions;

			action._byClipCacheIndex = knownActions.length;
			knownActions.push( action );

		}

		action._cacheIndex = actions.length;
		actions.push( action );

		actionsForClip.actionByRoot[ rootUuid ] = action;

	},

	_removeInactiveAction: function ( action ) {

		var actions = this._actions,
			lastInactiveAction = actions[ actions.length - 1 ],
			cacheIndex = action._cacheIndex;

		lastInactiveAction._cacheIndex = cacheIndex;
		actions[ cacheIndex ] = lastInactiveAction;
		actions.pop();

		action._cacheIndex = null;


		var clipUuid = action._clip.uuid,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ],
			knownActionsForClip = actionsForClip.knownActions,

			lastKnownAction =
				knownActionsForClip[ knownActionsForClip.length - 1 ],

			byClipCacheIndex = action._byClipCacheIndex;

		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
		knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
		knownActionsForClip.pop();

		action._byClipCacheIndex = null;


		var actionByRoot = actionsForClip.actionByRoot,
			rootUuid = ( action._localRoot || this._root ).uuid;

		delete actionByRoot[ rootUuid ];

		if ( knownActionsForClip.length === 0 ) {

			delete actionsByClip[ clipUuid ];

		}

		this._removeInactiveBindingsForAction( action );

	},

	_removeInactiveBindingsForAction: function ( action ) {

		var bindings = action._propertyBindings;
		for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

			var binding = bindings[ i ];

			if ( -- binding.referenceCount === 0 ) {

				this._removeInactiveBinding( binding );

			}

		}

	},

	_lendAction: function ( action ) {

		// [ active actions |  inactive actions  ]
		// [  active actions >| inactive actions ]
		//                 s        a
		//                  <-swap->
		//                 a        s

		var actions = this._actions,
			prevIndex = action._cacheIndex,

			lastActiveIndex = this._nActiveActions ++,

			firstInactiveAction = actions[ lastActiveIndex ];

		action._cacheIndex = lastActiveIndex;
		actions[ lastActiveIndex ] = action;

		firstInactiveAction._cacheIndex = prevIndex;
		actions[ prevIndex ] = firstInactiveAction;

	},

	_takeBackAction: function ( action ) {

		// [  active actions  | inactive actions ]
		// [ active actions |< inactive actions  ]
		//        a        s
		//         <-swap->
		//        s        a

		var actions = this._actions,
			prevIndex = action._cacheIndex,

			firstInactiveIndex = -- this._nActiveActions,

			lastActiveAction = actions[ firstInactiveIndex ];

		action._cacheIndex = firstInactiveIndex;
		actions[ firstInactiveIndex ] = action;

		lastActiveAction._cacheIndex = prevIndex;
		actions[ prevIndex ] = lastActiveAction;

	},

	// Memory management for PropertyMixer objects

	_addInactiveBinding: function ( binding, rootUuid, trackName ) {

		var bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ],

			bindings = this._bindings;

		if ( bindingByName === undefined ) {

			bindingByName = {};
			bindingsByRoot[ rootUuid ] = bindingByName;

		}

		bindingByName[ trackName ] = binding;

		binding._cacheIndex = bindings.length;
		bindings.push( binding );

	},

	_removeInactiveBinding: function ( binding ) {

		var bindings = this._bindings,
			propBinding = binding.binding,
			rootUuid = propBinding.rootNode.uuid,
			trackName = propBinding.path,
			bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ],

			lastInactiveBinding = bindings[ bindings.length - 1 ],
			cacheIndex = binding._cacheIndex;

		lastInactiveBinding._cacheIndex = cacheIndex;
		bindings[ cacheIndex ] = lastInactiveBinding;
		bindings.pop();

		delete bindingByName[ trackName ];

		remove_empty_map: {

			for ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars

			delete bindingsByRoot[ rootUuid ];

		}

	},

	_lendBinding: function ( binding ) {

		var bindings = this._bindings,
			prevIndex = binding._cacheIndex,

			lastActiveIndex = this._nActiveBindings ++,

			firstInactiveBinding = bindings[ lastActiveIndex ];

		binding._cacheIndex = lastActiveIndex;
		bindings[ lastActiveIndex ] = binding;

		firstInactiveBinding._cacheIndex = prevIndex;
		bindings[ prevIndex ] = firstInactiveBinding;

	},

	_takeBackBinding: function ( binding ) {

		var bindings = this._bindings,
			prevIndex = binding._cacheIndex,

			firstInactiveIndex = -- this._nActiveBindings,

			lastActiveBinding = bindings[ firstInactiveIndex ];

		binding._cacheIndex = firstInactiveIndex;
		bindings[ firstInactiveIndex ] = binding;

		lastActiveBinding._cacheIndex = prevIndex;
		bindings[ prevIndex ] = lastActiveBinding;

	},


	// Memory management of Interpolants for weight and time scale

	_lendControlInterpolant: function () {

		var interpolants = this._controlInterpolants,
			lastActiveIndex = this._nActiveControlInterpolants ++,
			interpolant = interpolants[ lastActiveIndex ];

		if ( interpolant === undefined ) {

			interpolant = new LinearInterpolant(
				new Float32Array( 2 ), new Float32Array( 2 ),
				1, this._controlInterpolantsResultBuffer );

			interpolant.__cacheIndex = lastActiveIndex;
			interpolants[ lastActiveIndex ] = interpolant;

		}

		return interpolant;

	},

	_takeBackControlInterpolant: function ( interpolant ) {

		var interpolants = this._controlInterpolants,
			prevIndex = interpolant.__cacheIndex,

			firstInactiveIndex = -- this._nActiveControlInterpolants,

			lastActiveInterpolant = interpolants[ firstInactiveIndex ];

		interpolant.__cacheIndex = firstInactiveIndex;
		interpolants[ firstInactiveIndex ] = interpolant;

		lastActiveInterpolant.__cacheIndex = prevIndex;
		interpolants[ prevIndex ] = lastActiveInterpolant;

	},

	_controlInterpolantsResultBuffer: new Float32Array( 1 ),

	// return an action for a clip optionally using a custom root target
	// object (this method allocates a lot of dynamic memory in case a
	// previously unknown clip/root combination is specified)
	clipAction: function ( clip, optionalRoot ) {

		var root = optionalRoot || this._root,
			rootUuid = root.uuid,

			clipObject = typeof clip === 'string' ?
				AnimationClip.findByName( root, clip ) : clip,

			clipUuid = clipObject !== null ? clipObject.uuid : clip,

			actionsForClip = this._actionsByClip[ clipUuid ],
			prototypeAction = null;

		if ( actionsForClip !== undefined ) {

			var existingAction =
					actionsForClip.actionByRoot[ rootUuid ];

			if ( existingAction !== undefined ) {

				return existingAction;

			}

			// we know the clip, so we don't have to parse all
			// the bindings again but can just copy
			prototypeAction = actionsForClip.knownActions[ 0 ];

			// also, take the clip from the prototype action
			if ( clipObject === null )
				clipObject = prototypeAction._clip;

		}

		// clip must be known when specified via string
		if ( clipObject === null ) return null;

		// allocate all resources required to run it
		var newAction = new AnimationAction( this, clipObject, optionalRoot );

		this._bindAction( newAction, prototypeAction );

		// and make the action known to the memory manager
		this._addInactiveAction( newAction, clipUuid, rootUuid );

		return newAction;

	},

	// get an existing action
	existingAction: function ( clip, optionalRoot ) {

		var root = optionalRoot || this._root,
			rootUuid = root.uuid,

			clipObject = typeof clip === 'string' ?
				AnimationClip.findByName( root, clip ) : clip,

			clipUuid = clipObject ? clipObject.uuid : clip,

			actionsForClip = this._actionsByClip[ clipUuid ];

		if ( actionsForClip !== undefined ) {

			return actionsForClip.actionByRoot[ rootUuid ] || null;

		}

		return null;

	},

	// deactivates all previously scheduled actions
	stopAllAction: function () {

		var actions = this._actions,
			nActions = this._nActiveActions,
			bindings = this._bindings,
			nBindings = this._nActiveBindings;

		this._nActiveActions = 0;
		this._nActiveBindings = 0;

		for ( var i = 0; i !== nActions; ++ i ) {

			actions[ i ].reset();

		}

		for ( var i = 0; i !== nBindings; ++ i ) {

			bindings[ i ].useCount = 0;

		}

		return this;

	},

	// advance the time and update apply the animation
	update: function ( deltaTime ) {

		deltaTime *= this.timeScale;

		var actions = this._actions,
			nActions = this._nActiveActions,

			time = this.time += deltaTime,
			timeDirection = Math.sign( deltaTime ),

			accuIndex = this._accuIndex ^= 1;

		// run active actions

		for ( var i = 0; i !== nActions; ++ i ) {

			var action = actions[ i ];

			action._update( time, deltaTime, timeDirection, accuIndex );

		}

		// update scene graph

		var bindings = this._bindings,
			nBindings = this._nActiveBindings;

		for ( var i = 0; i !== nBindings; ++ i ) {

			bindings[ i ].apply( accuIndex );

		}

		return this;

	},

	// return this mixer's root target object
	getRoot: function () {

		return this._root;

	},

	// free all resources specific to a particular clip
	uncacheClip: function ( clip ) {

		var actions = this._actions,
			clipUuid = clip.uuid,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ];

		if ( actionsForClip !== undefined ) {

			// note: just calling _removeInactiveAction would mess up the
			// iteration state and also require updating the state we can
			// just throw away

			var actionsToRemove = actionsForClip.knownActions;

			for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

				var action = actionsToRemove[ i ];

				this._deactivateAction( action );

				var cacheIndex = action._cacheIndex,
					lastInactiveAction = actions[ actions.length - 1 ];

				action._cacheIndex = null;
				action._byClipCacheIndex = null;

				lastInactiveAction._cacheIndex = cacheIndex;
				actions[ cacheIndex ] = lastInactiveAction;
				actions.pop();

				this._removeInactiveBindingsForAction( action );

			}

			delete actionsByClip[ clipUuid ];

		}

	},

	// free all resources specific to a particular root target object
	uncacheRoot: function ( root ) {

		var rootUuid = root.uuid,
			actionsByClip = this._actionsByClip;

		for ( var clipUuid in actionsByClip ) {

			var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
				action = actionByRoot[ rootUuid ];

			if ( action !== undefined ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

		var bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ];

		if ( bindingByName !== undefined ) {

			for ( var trackName in bindingByName ) {

				var binding = bindingByName[ trackName ];
				binding.restoreOriginalState();
				this._removeInactiveBinding( binding );

			}

		}

	},

	// remove a targeted clip from the cache
	uncacheAction: function ( clip, optionalRoot ) {

		var action = this.existingAction( clip, optionalRoot );

		if ( action !== null ) {

			this._deactivateAction( action );
			this._removeInactiveAction( action );

		}

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Uniform( value ) {

	if ( typeof value === 'string' ) {

		console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
		value = arguments[ 1 ];

	}

	this.value = value;

}

Uniform.prototype.clone = function () {

	return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

};

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedBufferGeometry() {

	BufferGeometry.call( this );

	this.type = 'InstancedBufferGeometry';
	this.maxInstancedCount = undefined;

}

InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {

	constructor: InstancedBufferGeometry,

	isInstancedBufferGeometry: true,

	copy: function ( source ) {

		BufferGeometry.prototype.copy.call( this, source );

		this.maxInstancedCount = source.maxInstancedCount;

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

	this.uuid = _Math.generateUUID();

	this.data = interleavedBuffer;
	this.itemSize = itemSize;
	this.offset = offset;

	this.normalized = normalized === true;

}

Object.defineProperties( InterleavedBufferAttribute.prototype, {

	count: {

		get: function () {

			return this.data.count;

		}

	},

	array: {

		get: function () {

			return this.data.array;

		}

	}

} );

Object.assign( InterleavedBufferAttribute.prototype, {

	isInterleavedBufferAttribute: true,

	setX: function ( index, x ) {

		this.data.array[ index * this.data.stride + this.offset ] = x;

		return this;

	},

	setY: function ( index, y ) {

		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

		return this;

	},

	setZ: function ( index, z ) {

		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

		return this;

	},

	setW: function ( index, w ) {

		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

		return this;

	},

	getX: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset ];

	},

	getY: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 1 ];

	},

	getZ: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 2 ];

	},

	getW: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 3 ];

	},

	setXY: function ( index, x, y ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;

		return this;

	},

	setXYZ: function ( index, x, y, z ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;
		this.data.array[ index + 2 ] = z;

		return this;

	},

	setXYZW: function ( index, x, y, z, w ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;
		this.data.array[ index + 2 ] = z;
		this.data.array[ index + 3 ] = w;

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InterleavedBuffer( array, stride ) {

	this.uuid = _Math.generateUUID();

	this.array = array;
	this.stride = stride;
	this.count = array !== undefined ? array.length / stride : 0;

	this.dynamic = false;
	this.updateRange = { offset: 0, count: - 1 };

	this.onUploadCallback = function () {};

	this.version = 0;

}

Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {

	set: function ( value ) {

		if ( value === true ) this.version ++;

	}

} );

Object.assign( InterleavedBuffer.prototype, {

	isInterleavedBuffer: true,

	setArray: function ( array ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.count = array !== undefined ? array.length / this.stride : 0;
		this.array = array;

	},

	setDynamic: function ( value ) {

		this.dynamic = value;

		return this;

	},

	copy: function ( source ) {

		this.array = new source.array.constructor( source.array );
		this.count = source.count;
		this.stride = source.stride;
		this.dynamic = source.dynamic;

		return this;

	},

	copyAt: function ( index1, attribute, index2 ) {

		index1 *= this.stride;
		index2 *= attribute.stride;

		for ( var i = 0, l = this.stride; i < l; i ++ ) {

			this.array[ index1 + i ] = attribute.array[ index2 + i ];

		}

		return this;

	},

	set: function ( value, offset ) {

		if ( offset === undefined ) offset = 0;

		this.array.set( value, offset );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	onUpload: function ( callback ) {

		this.onUploadCallback = callback;

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

	InterleavedBuffer.call( this, array, stride );

	this.meshPerAttribute = meshPerAttribute || 1;

}

InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {

	constructor: InstancedInterleavedBuffer,

	isInstancedInterleavedBuffer: true,

	copy: function ( source ) {

		InterleavedBuffer.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {

	BufferAttribute.call( this, array, itemSize );

	this.meshPerAttribute = meshPerAttribute || 1;

}

InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {

	constructor: InstancedBufferAttribute,

	isInstancedBufferAttribute: true,

	copy: function ( source ) {

		BufferAttribute.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author bhouston / http://clara.io/
 * @author stephomi / http://stephaneginier.com/
 */

function Raycaster( origin, direction, near, far ) {

	this.ray = new Ray( origin, direction );
	// direction is assumed to be normalized (for accurate distance calculations)

	this.near = near || 0;
	this.far = far || Infinity;

	this.params = {
		Mesh: {},
		Line: {},
		LOD: {},
		Points: { threshold: 1 },
		Sprite: {}
	};

	Object.defineProperties( this.params, {
		PointCloud: {
			get: function () {

				console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
				return this.Points;

			}
		}
	} );

}

function ascSort( a, b ) {

	return a.distance - b.distance;

}

function intersectObject( object, raycaster, intersects, recursive ) {

	if ( object.visible === false ) return;

	object.raycast( raycaster, intersects );

	if ( recursive === true ) {

		var children = object.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			intersectObject( children[ i ], raycaster, intersects, true );

		}

	}

}

Object.assign( Raycaster.prototype, {

	linePrecision: 1,

	set: function ( origin, direction ) {

		// direction is assumed to be normalized (for accurate distance calculations)

		this.ray.set( origin, direction );

	},

	setFromCamera: function ( coords, camera ) {

		if ( ( camera && camera.isPerspectiveCamera ) ) {

			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

		} else if ( ( camera && camera.isOrthographicCamera ) ) {

			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

		} else {

			console.error( 'THREE.Raycaster: Unsupported camera type.' );

		}

	},

	intersectObject: function ( object, recursive ) {

		var intersects = [];

		intersectObject( object, this, intersects, recursive );

		intersects.sort( ascSort );

		return intersects;

	},

	intersectObjects: function ( objects, recursive ) {

		var intersects = [];

		if ( Array.isArray( objects ) === false ) {

			console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
			return intersects;

		}

		for ( var i = 0, l = objects.length; i < l; i ++ ) {

			intersectObject( objects[ i ], this, intersects, recursive );

		}

		intersects.sort( ascSort );

		return intersects;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function Clock( autoStart ) {

	this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

	this.startTime = 0;
	this.oldTime = 0;
	this.elapsedTime = 0;

	this.running = false;

}

Object.assign( Clock.prototype, {

	start: function () {

		this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

		this.oldTime = this.startTime;
		this.elapsedTime = 0;
		this.running = true;

	},

	stop: function () {

		this.getElapsedTime();
		this.running = false;
		this.autoStart = false;

	},

	getElapsedTime: function () {

		this.getDelta();
		return this.elapsedTime;

	},

	getDelta: function () {

		var diff = 0;

		if ( this.autoStart && ! this.running ) {

			this.start();
			return 0;

		}

		if ( this.running ) {

			var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();

			diff = ( newTime - this.oldTime ) / 1000;
			this.oldTime = newTime;

			this.elapsedTime += diff;

		}

		return diff;

	}

} );

/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 *
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The poles (phi) are at the positive and negative y axis.
 * The equator starts at positive z.
 */

function Spherical( radius, phi, theta ) {

	this.radius = ( radius !== undefined ) ? radius : 1.0;
	this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
	this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere

	return this;

}

Object.assign( Spherical.prototype, {

	set: function ( radius, phi, theta ) {

		this.radius = radius;
		this.phi = phi;
		this.theta = theta;

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( other ) {

		this.radius = other.radius;
		this.phi = other.phi;
		this.theta = other.theta;

		return this;

	},

	// restrict phi to be betwee EPS and PI-EPS
	makeSafe: function () {

		var EPS = 0.000001;
		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

		return this;

	},

	setFromVector3: function ( vec3 ) {

		this.radius = vec3.length();

		if ( this.radius === 0 ) {

			this.theta = 0;
			this.phi = 0;

		} else {

			this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
			this.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle

		}

		return this;

	}

} );

/**
 * @author Mugen87 / https://github.com/Mugen87
 *
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 *
 */

function Cylindrical( radius, theta, y ) {

	this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
	this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
	this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane

	return this;

}

Object.assign( Cylindrical.prototype, {

	set: function ( radius, theta, y ) {

		this.radius = radius;
		this.theta = theta;
		this.y = y;

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( other ) {

		this.radius = other.radius;
		this.theta = other.theta;
		this.y = other.y;

		return this;

	},

	setFromVector3: function ( vec3 ) {

		this.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );
		this.theta = Math.atan2( vec3.x, vec3.z );
		this.y = vec3.y;

		return this;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function ImmediateRenderObject( material ) {

	Object3D.call( this );

	this.material = material;
	this.render = function ( /* renderCallback */ ) {};

}

ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

ImmediateRenderObject.prototype.isImmediateRenderObject = true;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function VertexNormalsHelper( object, size, hex, linewidth ) {

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0xff0000;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	//

	var nNormals = 0;

	var objGeometry = this.object.geometry;

	if ( objGeometry && objGeometry.isGeometry ) {

		nNormals = objGeometry.faces.length * 3;

	} else if ( objGeometry && objGeometry.isBufferGeometry ) {

		nNormals = objGeometry.attributes.normal.count;

	}

	//

	var geometry = new BufferGeometry();

	var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

	geometry.addAttribute( 'position', positions );

	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

	//

	this.matrixAutoUpdate = false;

	this.update();

}

VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

VertexNormalsHelper.prototype.update = ( function () {

	var v1 = new Vector3();
	var v2 = new Vector3();
	var normalMatrix = new Matrix3();

	return function update() {

		var keys = [ 'a', 'b', 'c' ];

		this.object.updateMatrixWorld( true );

		normalMatrix.getNormalMatrix( this.object.matrixWorld );

		var matrixWorld = this.object.matrixWorld;

		var position = this.geometry.attributes.position;

		//

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					var vertex = vertices[ face[ keys[ j ] ] ];

					var normal = face.vertexNormals[ j ];

					v1.copy( vertex ).applyMatrix4( matrixWorld );

					v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

			}

		} else if ( objGeometry && objGeometry.isBufferGeometry ) {

			var objPos = objGeometry.attributes.position;

			var objNorm = objGeometry.attributes.normal;

			var idx = 0;

			// for simplicity, ignore index and drawcalls, and render every normal

			for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

				v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

				v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

				v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

				position.setXYZ( idx, v1.x, v1.y, v1.z );

				idx = idx + 1;

				position.setXYZ( idx, v2.x, v2.y, v2.z );

				idx = idx + 1;

			}

		}

		position.needsUpdate = true;

	};

}() );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function SpotLightHelper( light, color ) {

	Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;

	this.color = color;

	var geometry = new BufferGeometry();

	var positions = [
		0, 0, 0, 	0, 0, 1,
		0, 0, 0, 	1, 0, 1,
		0, 0, 0,	- 1, 0, 1,
		0, 0, 0, 	0, 1, 1,
		0, 0, 0, 	0, - 1, 1
	];

	for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

		var p1 = ( i / l ) * Math.PI * 2;
		var p2 = ( j / l ) * Math.PI * 2;

		positions.push(
			Math.cos( p1 ), Math.sin( p1 ), 1,
			Math.cos( p2 ), Math.sin( p2 ), 1
		);

	}

	geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

	var material = new LineBasicMaterial( { fog: false } );

	this.cone = new LineSegments( geometry, material );
	this.add( this.cone );

	this.update();

}

SpotLightHelper.prototype = Object.create( Object3D.prototype );
SpotLightHelper.prototype.constructor = SpotLightHelper;

SpotLightHelper.prototype.dispose = function () {

	this.cone.geometry.dispose();
	this.cone.material.dispose();

};

SpotLightHelper.prototype.update = function () {

	var vector = new Vector3();
	var vector2 = new Vector3();

	return function update() {

		this.light.updateMatrixWorld();

		var coneLength = this.light.distance ? this.light.distance : 1000;
		var coneWidth = coneLength * Math.tan( this.light.angle );

		this.cone.scale.set( coneWidth, coneWidth, coneLength );

		vector.setFromMatrixPosition( this.light.matrixWorld );
		vector2.setFromMatrixPosition( this.light.target.matrixWorld );

		this.cone.lookAt( vector2.sub( vector ) );

		if ( this.color !== undefined ) {

			this.cone.material.color.set( this.color );

		} else {

			this.cone.material.color.copy( this.light.color );

		}

	};

}();

/**
 * @author Sean Griffin / http://twitter.com/sgrif
 * @author Michael Guerrero / http://realitymeltdown.com
 * @author mrdoob / http://mrdoob.com/
 * @author ikerr / http://verold.com
 * @author Mugen87 / https://github.com/Mugen87
 */

function getBoneList( object ) {

	var boneList = [];

	if ( object && object.isBone ) {

		boneList.push( object );

	}

	for ( var i = 0; i < object.children.length; i ++ ) {

		boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

	}

	return boneList;

}

function SkeletonHelper( object ) {

	var bones = getBoneList( object );

	var geometry = new BufferGeometry();

	var vertices = [];
	var colors = [];

	var color1 = new Color( 0, 0, 1 );
	var color2 = new Color( 0, 1, 0 );

	for ( var i = 0; i < bones.length; i ++ ) {

		var bone = bones[ i ];

		if ( bone.parent && bone.parent.isBone ) {

			vertices.push( 0, 0, 0 );
			vertices.push( 0, 0, 0 );
			colors.push( color1.r, color1.g, color1.b );
			colors.push( color2.r, color2.g, color2.b );

		}

	}

	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

	LineSegments.call( this, geometry, material );

	this.root = object;
	this.bones = bones;

	this.matrix = object.matrixWorld;
	this.matrixAutoUpdate = false;

}

SkeletonHelper.prototype = Object.create( LineSegments.prototype );
SkeletonHelper.prototype.constructor = SkeletonHelper;

SkeletonHelper.prototype.updateMatrixWorld = function () {

	var vector = new Vector3();

	var boneMatrix = new Matrix4();
	var matrixWorldInv = new Matrix4();

	return function updateMatrixWorld( force ) {

		var bones = this.bones;

		var geometry = this.geometry;
		var position = geometry.getAttribute( 'position' );

		matrixWorldInv.getInverse( this.root.matrixWorld );

		for ( var i = 0, j = 0; i < bones.length; i ++ ) {

			var bone = bones[ i ];

			if ( bone.parent && bone.parent.isBone ) {

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
				vector.setFromMatrixPosition( boneMatrix );
				position.setXYZ( j, vector.x, vector.y, vector.z );

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
				vector.setFromMatrixPosition( boneMatrix );
				position.setXYZ( j + 1, vector.x, vector.y, vector.z );

				j += 2;

			}

		}

		geometry.getAttribute( 'position' ).needsUpdate = true;

		Object3D.prototype.updateMatrixWorld.call( this, force );

	};

}();

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function PointLightHelper( light, sphereSize, color ) {

	this.light = light;
	this.light.updateMatrixWorld();

	this.color = color;

	var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
	var material = new MeshBasicMaterial( { wireframe: true, fog: false } );

	Mesh.call( this, geometry, material );

	this.matrix = this.light.matrixWorld;
	this.matrixAutoUpdate = false;

	this.update();


	/*
	var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
	var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	var d = light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.scale.set( d, d, d );

	}

	this.add( this.lightDistance );
	*/

}

PointLightHelper.prototype = Object.create( Mesh.prototype );
PointLightHelper.prototype.constructor = PointLightHelper;

PointLightHelper.prototype.dispose = function () {

	this.geometry.dispose();
	this.material.dispose();

};

PointLightHelper.prototype.update = function () {

	if ( this.color !== undefined ) {

		this.material.color.set( this.color );

	} else {

		this.material.color.copy( this.light.color );

	}

	/*
	var d = this.light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.visible = true;
		this.lightDistance.scale.set( d, d, d );

	}
	*/

};

/**
 * @author abelnation / http://github.com/abelnation
 * @author Mugen87 / http://github.com/Mugen87
 * @author WestLangley / http://github.com/WestLangley
 */

function RectAreaLightHelper( light, color ) {

	Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;

	this.color = color;

	var material = new LineBasicMaterial( { fog: false } );

	var geometry = new BufferGeometry();

	geometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );

	this.line = new Line( geometry, material );
	this.add( this.line );


	this.update();

}

RectAreaLightHelper.prototype = Object.create( Object3D.prototype );
RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;

RectAreaLightHelper.prototype.dispose = function () {

	this.children[ 0 ].geometry.dispose();
	this.children[ 0 ].material.dispose();

};

RectAreaLightHelper.prototype.update = function () {

	// calculate new dimensions of the helper

	var hx = this.light.width * 0.5;
	var hy = this.light.height * 0.5;

	var position = this.line.geometry.attributes.position;
	var array = position.array;

	// update vertices

	array[ 0 ] = hx; array[ 1 ] = - hy; array[ 2 ] = 0;
	array[ 3 ] = hx; array[ 4 ] = hy; array[ 5 ] = 0;
	array[ 6 ] = - hx; array[ 7 ] = hy; array[ 8 ] = 0;
	array[ 9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;
	array[ 12 ] = hx; array[ 13 ] = - hy; array[ 14 ] = 0;

	position.needsUpdate = true;

	if ( this.color !== undefined ) {

		this.line.material.color.set( this.color );

	} else {

		this.line.material.color.copy( this.light.color );

	}

};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

function HemisphereLightHelper( light, size, color ) {

	Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;

	this.color = color;

	var geometry = new OctahedronBufferGeometry( size );
	geometry.rotateY( Math.PI * 0.5 );

	this.material = new MeshBasicMaterial( { wireframe: true, fog: false } );
	if ( this.color === undefined ) this.material.vertexColors = VertexColors;

	var position = geometry.getAttribute( 'position' );
	var colors = new Float32Array( position.count * 3 );

	geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );

	this.add( new Mesh( geometry, this.material ) );

	this.update();

}

HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

HemisphereLightHelper.prototype.dispose = function () {

	this.children[ 0 ].geometry.dispose();
	this.children[ 0 ].material.dispose();

};

HemisphereLightHelper.prototype.update = function () {

	var vector = new Vector3();

	var color1 = new Color();
	var color2 = new Color();

	return function update() {

		var mesh = this.children[ 0 ];

		if ( this.color !== undefined ) {

			this.material.color.set( this.color );

		} else {

			var colors = mesh.geometry.getAttribute( 'color' );

			color1.copy( this.light.color );
			color2.copy( this.light.groundColor );

			for ( var i = 0, l = colors.count; i < l; i ++ ) {

				var color = ( i < ( l / 2 ) ) ? color1 : color2;

				colors.setXYZ( i, color.r, color.g, color.b );

			}

			colors.needsUpdate = true;

		}

		mesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );

	};

}();

/**
 * @author mrdoob / http://mrdoob.com/
 */

function GridHelper( size, divisions, color1, color2 ) {

	size = size || 10;
	divisions = divisions || 10;
	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

	var center = divisions / 2;
	var step = size / divisions;
	var halfSize = size / 2;

	var vertices = [], colors = [];

	for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {

		vertices.push( - halfSize, 0, k, halfSize, 0, k );
		vertices.push( k, 0, - halfSize, k, 0, halfSize );

		var color = i === center ? color1 : color2;

		color.toArray( colors, j ); j += 3;
		color.toArray( colors, j ); j += 3;
		color.toArray( colors, j ); j += 3;
		color.toArray( colors, j ); j += 3;

	}

	var geometry = new BufferGeometry();
	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	var material = new LineBasicMaterial( { vertexColors: VertexColors } );

	LineSegments.call( this, geometry, material );

}

GridHelper.prototype = Object.create( LineSegments.prototype );
GridHelper.prototype.constructor = GridHelper;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / http://github.com/Mugen87
 * @author Hectate / http://www.github.com/Hectate
 */

function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {

	radius = radius || 10;
	radials = radials || 16;
	circles = circles || 8;
	divisions = divisions || 64;
	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

	var vertices = [];
	var colors = [];

	var x, z;
	var v, i, j, r, color;

	// create the radials

	for ( i = 0; i <= radials; i ++ ) {

		v = ( i / radials ) * ( Math.PI * 2 );

		x = Math.sin( v ) * radius;
		z = Math.cos( v ) * radius;

		vertices.push( 0, 0, 0 );
		vertices.push( x, 0, z );

		color = ( i & 1 ) ? color1 : color2;

		colors.push( color.r, color.g, color.b );
		colors.push( color.r, color.g, color.b );

	}

	// create the circles

	for ( i = 0; i <= circles; i ++ ) {

		color = ( i & 1 ) ? color1 : color2;

		r = radius - ( radius / circles * i );

		for ( j = 0; j < divisions; j ++ ) {

			// first vertex

			v = ( j / divisions ) * ( Math.PI * 2 );

			x = Math.sin( v ) * r;
			z = Math.cos( v ) * r;

			vertices.push( x, 0, z );
			colors.push( color.r, color.g, color.b );

			// second vertex

			v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );

			x = Math.sin( v ) * r;
			z = Math.cos( v ) * r;

			vertices.push( x, 0, z );
			colors.push( color.r, color.g, color.b );

		}

	}

	var geometry = new BufferGeometry();
	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	var material = new LineBasicMaterial( { vertexColors: VertexColors } );

	LineSegments.call( this, geometry, material );

}

PolarGridHelper.prototype = Object.create( LineSegments.prototype );
PolarGridHelper.prototype.constructor = PolarGridHelper;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function FaceNormalsHelper( object, size, hex, linewidth ) {

	// FaceNormalsHelper only supports THREE.Geometry

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0xffff00;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	//

	var nNormals = 0;

	var objGeometry = this.object.geometry;

	if ( objGeometry && objGeometry.isGeometry ) {

		nNormals = objGeometry.faces.length;

	} else {

		console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

	}

	//

	var geometry = new BufferGeometry();

	var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

	geometry.addAttribute( 'position', positions );

	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

	//

	this.matrixAutoUpdate = false;
	this.update();

}

FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

FaceNormalsHelper.prototype.update = ( function () {

	var v1 = new Vector3();
	var v2 = new Vector3();
	var normalMatrix = new Matrix3();

	return function update() {

		this.object.updateMatrixWorld( true );

		normalMatrix.getNormalMatrix( this.object.matrixWorld );

		var matrixWorld = this.object.matrixWorld;

		var position = this.geometry.attributes.position;

		//

		var objGeometry = this.object.geometry;

		var vertices = objGeometry.vertices;

		var faces = objGeometry.faces;

		var idx = 0;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			var normal = face.normal;

			v1.copy( vertices[ face.a ] )
				.add( vertices[ face.b ] )
				.add( vertices[ face.c ] )
				.divideScalar( 3 )
				.applyMatrix4( matrixWorld );

			v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

			position.setXYZ( idx, v1.x, v1.y, v1.z );

			idx = idx + 1;

			position.setXYZ( idx, v2.x, v2.y, v2.z );

			idx = idx + 1;

		}

		position.needsUpdate = true;

	};

}() );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function DirectionalLightHelper( light, size, color ) {

	Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;

	this.color = color;

	if ( size === undefined ) size = 1;

	var geometry = new BufferGeometry();
	geometry.addAttribute( 'position', new Float32BufferAttribute( [
		- size, size, 0,
		size, size, 0,
		size, - size, 0,
		- size, - size, 0,
		- size, size, 0
	], 3 ) );

	var material = new LineBasicMaterial( { fog: false } );

	this.lightPlane = new Line( geometry, material );
	this.add( this.lightPlane );

	geometry = new BufferGeometry();
	geometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

	this.targetLine = new Line( geometry, material );
	this.add( this.targetLine );

	this.update();

}

DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

DirectionalLightHelper.prototype.dispose = function () {

	this.lightPlane.geometry.dispose();
	this.lightPlane.material.dispose();
	this.targetLine.geometry.dispose();
	this.targetLine.material.dispose();

};

DirectionalLightHelper.prototype.update = function () {

	var v1 = new Vector3();
	var v2 = new Vector3();
	var v3 = new Vector3();

	return function update() {

		v1.setFromMatrixPosition( this.light.matrixWorld );
		v2.setFromMatrixPosition( this.light.target.matrixWorld );
		v3.subVectors( v2, v1 );

		this.lightPlane.lookAt( v3 );

		if ( this.color !== undefined ) {

			this.lightPlane.material.color.set( this.color );
			this.targetLine.material.color.set( this.color );

		} else {

			this.lightPlane.material.color.copy( this.light.color );
			this.targetLine.material.color.copy( this.light.color );

		}

		this.targetLine.lookAt( v3 );
		this.targetLine.scale.z = v3.length();

	};

}();

/**
 * @author alteredq / http://alteredqualia.com/
 * @author Mugen87 / https://github.com/Mugen87
 *
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
 */

function CameraHelper( camera ) {

	var geometry = new BufferGeometry();
	var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

	var vertices = [];
	var colors = [];

	var pointMap = {};

	// colors

	var colorFrustum = new Color( 0xffaa00 );
	var colorCone = new Color( 0xff0000 );
	var colorUp = new Color( 0x00aaff );
	var colorTarget = new Color( 0xffffff );
	var colorCross = new Color( 0x333333 );

	// near

	addLine( 'n1', 'n2', colorFrustum );
	addLine( 'n2', 'n4', colorFrustum );
	addLine( 'n4', 'n3', colorFrustum );
	addLine( 'n3', 'n1', colorFrustum );

	// far

	addLine( 'f1', 'f2', colorFrustum );
	addLine( 'f2', 'f4', colorFrustum );
	addLine( 'f4', 'f3', colorFrustum );
	addLine( 'f3', 'f1', colorFrustum );

	// sides

	addLine( 'n1', 'f1', colorFrustum );
	addLine( 'n2', 'f2', colorFrustum );
	addLine( 'n3', 'f3', colorFrustum );
	addLine( 'n4', 'f4', colorFrustum );

	// cone

	addLine( 'p', 'n1', colorCone );
	addLine( 'p', 'n2', colorCone );
	addLine( 'p', 'n3', colorCone );
	addLine( 'p', 'n4', colorCone );

	// up

	addLine( 'u1', 'u2', colorUp );
	addLine( 'u2', 'u3', colorUp );
	addLine( 'u3', 'u1', colorUp );

	// target

	addLine( 'c', 't', colorTarget );
	addLine( 'p', 'c', colorCross );

	// cross

	addLine( 'cn1', 'cn2', colorCross );
	addLine( 'cn3', 'cn4', colorCross );

	addLine( 'cf1', 'cf2', colorCross );
	addLine( 'cf3', 'cf4', colorCross );

	function addLine( a, b, color ) {

		addPoint( a, color );
		addPoint( b, color );

	}

	function addPoint( id, color ) {

		vertices.push( 0, 0, 0 );
		colors.push( color.r, color.g, color.b );

		if ( pointMap[ id ] === undefined ) {

			pointMap[ id ] = [];

		}

		pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

	}

	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	LineSegments.call( this, geometry, material );

	this.camera = camera;
	if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

	this.matrix = camera.matrixWorld;
	this.matrixAutoUpdate = false;

	this.pointMap = pointMap;

	this.update();

}

CameraHelper.prototype = Object.create( LineSegments.prototype );
CameraHelper.prototype.constructor = CameraHelper;

CameraHelper.prototype.update = function () {

	var geometry, pointMap;

	var vector = new Vector3();
	var camera = new Camera();

	function setPoint( point, x, y, z ) {

		vector.set( x, y, z ).unproject( camera );

		var points = pointMap[ point ];

		if ( points !== undefined ) {

			var position = geometry.getAttribute( 'position' );

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				position.setXYZ( points[ i ], vector.x, vector.y, vector.z );

			}

		}

	}

	return function update() {

		geometry = this.geometry;
		pointMap = this.pointMap;

		var w = 1, h = 1;

		// we need just camera projection matrix
		// world matrix must be identity

		camera.projectionMatrix.copy( this.camera.projectionMatrix );

		// center / target

		setPoint( 'c', 0, 0, - 1 );
		setPoint( 't', 0, 0, 1 );

		// near

		setPoint( 'n1', - w, - h, - 1 );
		setPoint( 'n2', w, - h, - 1 );
		setPoint( 'n3', - w, h, - 1 );
		setPoint( 'n4', w, h, - 1 );

		// far

		setPoint( 'f1', - w, - h, 1 );
		setPoint( 'f2', w, - h, 1 );
		setPoint( 'f3', - w, h, 1 );
		setPoint( 'f4', w, h, 1 );

		// up

		setPoint( 'u1', w * 0.7, h * 1.1, - 1 );
		setPoint( 'u2', - w * 0.7, h * 1.1, - 1 );
		setPoint( 'u3', 0, h * 2, - 1 );

		// cross

		setPoint( 'cf1', - w, 0, 1 );
		setPoint( 'cf2', w, 0, 1 );
		setPoint( 'cf3', 0, - h, 1 );
		setPoint( 'cf4', 0, h, 1 );

		setPoint( 'cn1', - w, 0, - 1 );
		setPoint( 'cn2', w, 0, - 1 );
		setPoint( 'cn3', 0, - h, - 1 );
		setPoint( 'cn4', 0, h, - 1 );

		geometry.getAttribute( 'position' ).needsUpdate = true;

	};

}();

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / http://github.com/Mugen87
 */

function BoxHelper( object, color ) {

	this.object = object;

	if ( color === undefined ) color = 0xffff00;

	var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
	var positions = new Float32Array( 8 * 3 );

	var geometry = new BufferGeometry();
	geometry.setIndex( new BufferAttribute( indices, 1 ) );
	geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );

	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

	this.matrixAutoUpdate = false;

	this.update();

}

BoxHelper.prototype = Object.create( LineSegments.prototype );
BoxHelper.prototype.constructor = BoxHelper;

BoxHelper.prototype.update = ( function () {

	var box = new Box3();

	return function update( object ) {

		if ( object !== undefined ) {

			console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );

		}

		if ( this.object !== undefined ) {

			box.setFromObject( this.object );

		}

		if ( box.isEmpty() ) return;

		var min = box.min;
		var max = box.max;

		/*
		  5____4
		1/___0/|
		| 6__|_7
		2/___3/

		0: max.x, max.y, max.z
		1: min.x, max.y, max.z
		2: min.x, min.y, max.z
		3: max.x, min.y, max.z
		4: max.x, max.y, min.z
		5: min.x, max.y, min.z
		6: min.x, min.y, min.z
		7: max.x, min.y, min.z
		*/

		var position = this.geometry.attributes.position;
		var array = position.array;

		array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
		array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
		array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
		array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
		array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
		array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
		array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
		array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

		position.needsUpdate = true;

		this.geometry.computeBoundingSphere();

	};

} )();

BoxHelper.prototype.setFromObject = function ( object ) {

	this.object = object;
	this.update();

	return this;

};

/**
 * @author WestLangley / http://github.com/WestLangley
 */

function Box3Helper( box, hex ) {

	this.type = 'Box3Helper';

	this.box = box;

	var color = ( hex !== undefined ) ? hex : 0xffff00;

	var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );

	var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];

	var geometry = new BufferGeometry();

	geometry.setIndex( new BufferAttribute( indices, 1 ) );

	geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

	this.geometry.computeBoundingSphere();

}

Box3Helper.prototype = Object.create( LineSegments.prototype );
Box3Helper.prototype.constructor = Box3Helper;

Box3Helper.prototype.updateMatrixWorld = function ( force ) {

	var box = this.box;

	if ( box.isEmpty() ) return;

	box.getCenter( this.position );

	box.getSize( this.scale );

	this.scale.multiplyScalar( 0.5 );

	Object3D.prototype.updateMatrixWorld.call( this, force );

};

/**
 * @author WestLangley / http://github.com/WestLangley
 */

function PlaneHelper( plane, size, hex ) {

	this.type = 'PlaneHelper';

	this.plane = plane;

	this.size = ( size === undefined ) ? 1 : size;

	var color = ( hex !== undefined ) ? hex : 0xffff00;

	var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];

	var geometry = new BufferGeometry();
	geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
	geometry.computeBoundingSphere();

	Line.call( this, geometry, new LineBasicMaterial( { color: color } ) );

	//

	var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];

	var geometry2 = new BufferGeometry();
	geometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
	geometry2.computeBoundingSphere();

	this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );

}

PlaneHelper.prototype = Object.create( Line.prototype );
PlaneHelper.prototype.constructor = PlaneHelper;

PlaneHelper.prototype.updateMatrixWorld = function ( force ) {

	var scale = - this.plane.constant;

	if ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter

	this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );

	this.lookAt( this.plane.normal );

	Object3D.prototype.updateMatrixWorld.call( this, force );

};

/**
 * @author WestLangley / http://github.com/WestLangley
 * @author zz85 / http://github.com/zz85
 * @author bhouston / http://clara.io
 *
 * Creates an arrow for visualizing directions
 *
 * Parameters:
 *  dir - Vector3
 *  origin - Vector3
 *  length - Number
 *  color - color in hex value
 *  headLength - Number
 *  headWidth - Number
 */

var lineGeometry;
var coneGeometry;

function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

	// dir is assumed to be normalized

	Object3D.call( this );

	if ( color === undefined ) color = 0xffff00;
	if ( length === undefined ) length = 1;
	if ( headLength === undefined ) headLength = 0.2 * length;
	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

	if ( lineGeometry === undefined ) {

		lineGeometry = new BufferGeometry();
		lineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

		coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
		coneGeometry.translate( 0, - 0.5, 0 );

	}

	this.position.copy( origin );

	this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
	this.line.matrixAutoUpdate = false;
	this.add( this.line );

	this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
	this.cone.matrixAutoUpdate = false;
	this.add( this.cone );

	this.setDirection( dir );
	this.setLength( length, headLength, headWidth );

}

ArrowHelper.prototype = Object.create( Object3D.prototype );
ArrowHelper.prototype.constructor = ArrowHelper;

ArrowHelper.prototype.setDirection = ( function () {

	var axis = new Vector3();
	var radians;

	return function setDirection( dir ) {

		// dir is assumed to be normalized

		if ( dir.y > 0.99999 ) {

			this.quaternion.set( 0, 0, 0, 1 );

		} else if ( dir.y < - 0.99999 ) {

			this.quaternion.set( 1, 0, 0, 0 );

		} else {

			axis.set( dir.z, 0, - dir.x ).normalize();

			radians = Math.acos( dir.y );

			this.quaternion.setFromAxisAngle( axis, radians );

		}

	};

}() );

ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

	if ( headLength === undefined ) headLength = 0.2 * length;
	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

	this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
	this.line.updateMatrix();

	this.cone.scale.set( headWidth, headLength, headWidth );
	this.cone.position.y = length;
	this.cone.updateMatrix();

};

ArrowHelper.prototype.setColor = function ( color ) {

	this.line.material.color.copy( color );
	this.cone.material.color.copy( color );

};

/**
 * @author sroucheray / http://sroucheray.org/
 * @author mrdoob / http://mrdoob.com/
 */

function AxesHelper( size ) {

	size = size || 1;

	var vertices = [
		0, 0, 0,	size, 0, 0,
		0, 0, 0,	0, size, 0,
		0, 0, 0,	0, 0, size
	];

	var colors = [
		1, 0, 0,	1, 0.6, 0,
		0, 1, 0,	0.6, 1, 0,
		0, 0, 1,	0, 0.6, 1
	];

	var geometry = new BufferGeometry();
	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	var material = new LineBasicMaterial( { vertexColors: VertexColors } );

	LineSegments.call( this, geometry, material );

}

AxesHelper.prototype = Object.create( LineSegments.prototype );
AxesHelper.prototype.constructor = AxesHelper;

/**
 * @author alteredq / http://alteredqualia.com/
 */

var SceneUtils = {

	createMultiMaterialObject: function ( geometry, materials ) {

		var group = new Group();

		for ( var i = 0, l = materials.length; i < l; i ++ ) {

			group.add( new Mesh( geometry, materials[ i ] ) );

		}

		return group;

	},

	detach: function ( child, parent, scene ) {

		child.applyMatrix( parent.matrixWorld );
		parent.remove( child );
		scene.add( child );

	},

	attach: function ( child, scene, parent ) {

		child.applyMatrix( new Matrix4().getInverse( parent.matrixWorld ) );

		scene.remove( child );
		parent.add( child );

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Face4( a, b, c, d, normal, color, materialIndex ) {

	console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
	return new Face3( a, b, c, normal, color, materialIndex );

}

var LineStrip = 0;

var LinePieces = 1;

function MeshFaceMaterial( materials ) {

	console.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );
	return materials;

}

function MultiMaterial( materials ) {

	if ( materials === undefined ) materials = [];

	console.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );
	materials.isMultiMaterial = true;
	materials.materials = materials;
	materials.clone = function () {

		return materials.slice();

	};
	return materials;

}

function PointCloud( geometry, material ) {

	console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
	return new Points( geometry, material );

}

function Particle( material ) {

	console.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );
	return new Sprite( material );

}

function ParticleSystem( geometry, material ) {

	console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
	return new Points( geometry, material );

}

function PointCloudMaterial( parameters ) {

	console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
	return new PointsMaterial( parameters );

}

function ParticleBasicMaterial( parameters ) {

	console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
	return new PointsMaterial( parameters );

}

function ParticleSystemMaterial( parameters ) {

	console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
	return new PointsMaterial( parameters );

}

function Vertex( x, y, z ) {

	console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
	return new Vector3( x, y, z );

}

//

function DynamicBufferAttribute( array, itemSize ) {

	console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
	return new BufferAttribute( array, itemSize ).setDynamic( true );

}

function Int8Attribute( array, itemSize ) {

	console.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );
	return new Int8BufferAttribute( array, itemSize );

}

function Uint8Attribute( array, itemSize ) {

	console.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );
	return new Uint8BufferAttribute( array, itemSize );

}

function Uint8ClampedAttribute( array, itemSize ) {

	console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );
	return new Uint8ClampedBufferAttribute( array, itemSize );

}

function Int16Attribute( array, itemSize ) {

	console.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );
	return new Int16BufferAttribute( array, itemSize );

}

function Uint16Attribute( array, itemSize ) {

	console.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );
	return new Uint16BufferAttribute( array, itemSize );

}

function Int32Attribute( array, itemSize ) {

	console.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );
	return new Int32BufferAttribute( array, itemSize );

}

function Uint32Attribute( array, itemSize ) {

	console.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );
	return new Uint32BufferAttribute( array, itemSize );

}

function Float32Attribute( array, itemSize ) {

	console.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );
	return new Float32BufferAttribute( array, itemSize );

}

function Float64Attribute( array, itemSize ) {

	console.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );
	return new Float64BufferAttribute( array, itemSize );

}

//

Curve.create = function ( construct, getPoint ) {

	console.log( 'THREE.Curve.create() has been deprecated' );

	construct.prototype = Object.create( Curve.prototype );
	construct.prototype.constructor = construct;
	construct.prototype.getPoint = getPoint;

	return construct;

};

//

Object.assign( CurvePath.prototype, {

	createPointsGeometry: function ( divisions ) {

		console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

		// generate geometry from path points (for Line or Points objects)

		var pts = this.getPoints( divisions );
		return this.createGeometry( pts );

	},

	createSpacedPointsGeometry: function ( divisions ) {

		console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

		// generate geometry from equidistant sampling along the path

		var pts = this.getSpacedPoints( divisions );
		return this.createGeometry( pts );

	},

	createGeometry: function ( points ) {

		console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

		var geometry = new Geometry();

		for ( var i = 0, l = points.length; i < l; i ++ ) {

			var point = points[ i ];
			geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

		}

		return geometry;

	}

} );

//

Object.assign( Path.prototype, {

	fromPoints: function ( points ) {

		console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
		this.setFromPoints( points );

	}

} );

//

function ClosedSplineCurve3( points ) {

	console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

	CatmullRomCurve3.call( this, points );
	this.type = 'catmullrom';
	this.closed = true;

}

ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

//

function SplineCurve3( points ) {

	console.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

	CatmullRomCurve3.call( this, points );
	this.type = 'catmullrom';

}

SplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

//

function Spline( points ) {

	console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );

	CatmullRomCurve3.call( this, points );
	this.type = 'catmullrom';

}

Spline.prototype = Object.create( CatmullRomCurve3.prototype );

Object.assign( Spline.prototype, {

	initFromArray: function ( /* a */ ) {

		console.error( 'THREE.Spline: .initFromArray() has been removed.' );

	},
	getControlPointsArray: function ( /* optionalTarget */ ) {

		console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );

	},
	reparametrizeByArcLength: function ( /* samplingCoef */ ) {

		console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );

	}

} );

//

function AxisHelper( size ) {

	console.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );
	return new AxesHelper( size );

}

function BoundingBoxHelper( object, color ) {

	console.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );
	return new BoxHelper( object, color );

}

function EdgesHelper( object, hex ) {

	console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
	return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

}

GridHelper.prototype.setColors = function () {

	console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

};

SkeletonHelper.prototype.update = function () {

	console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );

};

function WireframeHelper( object, hex ) {

	console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
	return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

}

//

Object.assign( Loader.prototype, {

	extractUrlBase: function ( url ) {

		console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
		return LoaderUtils.extractUrlBase( url );

	}

} );

function XHRLoader( manager ) {

	console.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );
	return new FileLoader( manager );

}

function BinaryTextureLoader( manager ) {

	console.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );
	return new DataTextureLoader( manager );

}

//

Object.assign( Box2.prototype, {

	center: function ( optionalTarget ) {

		console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
		return this.getCenter( optionalTarget );

	},
	empty: function () {

		console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
		return this.isEmpty();

	},
	isIntersectionBox: function ( box ) {

		console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
		return this.intersectsBox( box );

	},
	size: function ( optionalTarget ) {

		console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
		return this.getSize( optionalTarget );

	}
} );

Object.assign( Box3.prototype, {

	center: function ( optionalTarget ) {

		console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
		return this.getCenter( optionalTarget );

	},
	empty: function () {

		console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
		return this.isEmpty();

	},
	isIntersectionBox: function ( box ) {

		console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
		return this.intersectsBox( box );

	},
	isIntersectionSphere: function ( sphere ) {

		console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
		return this.intersectsSphere( sphere );

	},
	size: function ( optionalTarget ) {

		console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
		return this.getSize( optionalTarget );

	}
} );

Line3.prototype.center = function ( optionalTarget ) {

	console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
	return this.getCenter( optionalTarget );

};

Object.assign( _Math, {

	random16: function () {

		console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
		return Math.random();

	},

	nearestPowerOfTwo: function ( value ) {

		console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
		return _Math.floorPowerOfTwo( value );

	},

	nextPowerOfTwo: function ( value ) {

		console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
		return _Math.ceilPowerOfTwo( value );

	}

} );

Object.assign( Matrix3.prototype, {

	flattenToArrayOffset: function ( array, offset ) {

		console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
		return this.toArray( array, offset );

	},
	multiplyVector3: function ( vector ) {

		console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
		return vector.applyMatrix3( this );

	},
	multiplyVector3Array: function ( /* a */ ) {

		console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );

	},
	applyToBuffer: function ( buffer /*, offset, length */ ) {

		console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
		return this.applyToBufferAttribute( buffer );

	},
	applyToVector3Array: function ( /* array, offset, length */ ) {

		console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

	}

} );

Object.assign( Matrix4.prototype, {

	extractPosition: function ( m ) {

		console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
		return this.copyPosition( m );

	},
	flattenToArrayOffset: function ( array, offset ) {

		console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
		return this.toArray( array, offset );

	},
	getPosition: function () {

		var v1;

		return function getPosition() {

			if ( v1 === undefined ) v1 = new Vector3();
			console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
			return v1.setFromMatrixColumn( this, 3 );

		};

	}(),
	setRotationFromQuaternion: function ( q ) {

		console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
		return this.makeRotationFromQuaternion( q );

	},
	multiplyToArray: function () {

		console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

	},
	multiplyVector3: function ( vector ) {

		console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},
	multiplyVector4: function ( vector ) {

		console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},
	multiplyVector3Array: function ( /* a */ ) {

		console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );

	},
	rotateAxis: function ( v ) {

		console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
		v.transformDirection( this );

	},
	crossVector: function ( vector ) {

		console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},
	translate: function () {

		console.error( 'THREE.Matrix4: .translate() has been removed.' );

	},
	rotateX: function () {

		console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

	},
	rotateY: function () {

		console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

	},
	rotateZ: function () {

		console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

	},
	rotateByAxis: function () {

		console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

	},
	applyToBuffer: function ( buffer /*, offset, length */ ) {

		console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
		return this.applyToBufferAttribute( buffer );

	},
	applyToVector3Array: function ( /* array, offset, length */ ) {

		console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

	},
	makeFrustum: function ( left, right, bottom, top, near, far ) {

		console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
		return this.makePerspective( left, right, top, bottom, near, far );

	}

} );

Plane.prototype.isIntersectionLine = function ( line ) {

	console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
	return this.intersectsLine( line );

};

Quaternion.prototype.multiplyVector3 = function ( vector ) {

	console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
	return vector.applyQuaternion( this );

};

Object.assign( Ray.prototype, {

	isIntersectionBox: function ( box ) {

		console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
		return this.intersectsBox( box );

	},
	isIntersectionPlane: function ( plane ) {

		console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
		return this.intersectsPlane( plane );

	},
	isIntersectionSphere: function ( sphere ) {

		console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
		return this.intersectsSphere( sphere );

	}

} );

Object.assign( Shape.prototype, {

	extractAllPoints: function ( divisions ) {

		console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
		return this.extractPoints( divisions );

	},
	extrude: function ( options ) {

		console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
		return new ExtrudeGeometry( this, options );

	},
	makeGeometry: function ( options ) {

		console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
		return new ShapeGeometry( this, options );

	}

} );

Object.assign( Vector2.prototype, {

	fromAttribute: function ( attribute, index, offset ) {

		console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
		return this.fromBufferAttribute( attribute, index, offset );

	},
	distanceToManhattan: function ( v ) {

		console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
		return this.manhattanDistanceTo( v );

	},
	lengthManhattan: function () {

		console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
		return this.manhattanLength();

	}

} );

Object.assign( Vector3.prototype, {

	setEulerFromRotationMatrix: function () {

		console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

	},
	setEulerFromQuaternion: function () {

		console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

	},
	getPositionFromMatrix: function ( m ) {

		console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
		return this.setFromMatrixPosition( m );

	},
	getScaleFromMatrix: function ( m ) {

		console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
		return this.setFromMatrixScale( m );

	},
	getColumnFromMatrix: function ( index, matrix ) {

		console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
		return this.setFromMatrixColumn( matrix, index );

	},
	applyProjection: function ( m ) {

		console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
		return this.applyMatrix4( m );

	},
	fromAttribute: function ( attribute, index, offset ) {

		console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
		return this.fromBufferAttribute( attribute, index, offset );

	},
	distanceToManhattan: function ( v ) {

		console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
		return this.manhattanDistanceTo( v );

	},
	lengthManhattan: function () {

		console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
		return this.manhattanLength();

	}

} );

Object.assign( Vector4.prototype, {

	fromAttribute: function ( attribute, index, offset ) {

		console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
		return this.fromBufferAttribute( attribute, index, offset );

	},
	lengthManhattan: function () {

		console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
		return this.manhattanLength();

	}

} );

//

Geometry.prototype.computeTangents = function () {

	console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

};

Object.assign( Object3D.prototype, {

	getChildByName: function ( name ) {

		console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
		return this.getObjectByName( name );

	},
	renderDepth: function () {

		console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

	},
	translate: function ( distance, axis ) {

		console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
		return this.translateOnAxis( axis, distance );

	}

} );

Object.defineProperties( Object3D.prototype, {

	eulerOrder: {
		get: function () {

			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
			return this.rotation.order;

		},
		set: function ( value ) {

			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
			this.rotation.order = value;

		}
	},
	useQuaternion: {
		get: function () {

			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

		},
		set: function () {

			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

		}
	}

} );

Object.defineProperties( LOD.prototype, {

	objects: {
		get: function () {

			console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
			return this.levels;

		}
	}

} );

Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {

	get: function () {

		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

	},
	set: function () {

		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

	}

} );

Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {

	get: function () {

		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
		return this.arcLengthDivisions;

	},
	set: function ( value ) {

		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
		this.arcLengthDivisions = value;

	}

} );

//

PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

	console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
			"Use .setFocalLength and .filmGauge for a photographic setup." );

	if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
	this.setFocalLength( focalLength );

};

//

Object.defineProperties( Light.prototype, {
	onlyShadow: {
		set: function () {

			console.warn( 'THREE.Light: .onlyShadow has been removed.' );

		}
	},
	shadowCameraFov: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
			this.shadow.camera.fov = value;

		}
	},
	shadowCameraLeft: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
			this.shadow.camera.left = value;

		}
	},
	shadowCameraRight: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
			this.shadow.camera.right = value;

		}
	},
	shadowCameraTop: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
			this.shadow.camera.top = value;

		}
	},
	shadowCameraBottom: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
			this.shadow.camera.bottom = value;

		}
	},
	shadowCameraNear: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
			this.shadow.camera.near = value;

		}
	},
	shadowCameraFar: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
			this.shadow.camera.far = value;

		}
	},
	shadowCameraVisible: {
		set: function () {

			console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

		}
	},
	shadowBias: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
			this.shadow.bias = value;

		}
	},
	shadowDarkness: {
		set: function () {

			console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

		}
	},
	shadowMapWidth: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
			this.shadow.mapSize.width = value;

		}
	},
	shadowMapHeight: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
			this.shadow.mapSize.height = value;

		}
	}
} );

//

Object.defineProperties( BufferAttribute.prototype, {

	length: {
		get: function () {

			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
			return this.array.length;

		}
	}

} );

Object.assign( BufferGeometry.prototype, {

	addIndex: function ( index ) {

		console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
		this.setIndex( index );

	},
	addDrawCall: function ( start, count, indexOffset ) {

		if ( indexOffset !== undefined ) {

			console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

		}
		console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
		this.addGroup( start, count );

	},
	clearDrawCalls: function () {

		console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
		this.clearGroups();

	},
	computeTangents: function () {

		console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

	},
	computeOffsets: function () {

		console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

	}

} );

Object.defineProperties( BufferGeometry.prototype, {

	drawcalls: {
		get: function () {

			console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
			return this.groups;

		}
	},
	offsets: {
		get: function () {

			console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
			return this.groups;

		}
	}

} );

//

Object.defineProperties( Uniform.prototype, {

	dynamic: {
		set: function () {

			console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );

		}
	},
	onUpdate: {
		value: function () {

			console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
			return this;

		}
	}

} );

//

Object.defineProperties( Material.prototype, {

	wrapAround: {
		get: function () {

			console.warn( 'THREE.Material: .wrapAround has been removed.' );

		},
		set: function () {

			console.warn( 'THREE.Material: .wrapAround has been removed.' );

		}
	},
	wrapRGB: {
		get: function () {

			console.warn( 'THREE.Material: .wrapRGB has been removed.' );
			return new Color();

		}
	},

	shading: {
		get: function () {

			console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );

		},
		set: function ( value ) {

			console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
			this.flatShading = ( value === FlatShading );

		}
	}

} );

Object.defineProperties( MeshPhongMaterial.prototype, {

	metal: {
		get: function () {

			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
			return false;

		},
		set: function () {

			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );

		}
	}

} );

Object.defineProperties( ShaderMaterial.prototype, {

	derivatives: {
		get: function () {

			console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
			return this.extensions.derivatives;

		},
		set: function ( value ) {

			console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
			this.extensions.derivatives = value;

		}
	}

} );

//

Object.assign( WebGLRenderer.prototype, {

	getCurrentRenderTarget: function () {

		console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
		return this.getRenderTarget();

	},

	getMaxAnisotropy: function () {

		console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
		return this.capabilities.getMaxAnisotropy();

	},

	getPrecision: function () {

		console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
		return this.capabilities.precision;

	},

	resetGLState: function () {

		console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
		return this.state.reset();

	},

	supportsFloatTextures: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
		return this.extensions.get( 'OES_texture_float' );

	},
	supportsHalfFloatTextures: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
		return this.extensions.get( 'OES_texture_half_float' );

	},
	supportsStandardDerivatives: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
		return this.extensions.get( 'OES_standard_derivatives' );

	},
	supportsCompressedTextureS3TC: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
		return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

	},
	supportsCompressedTexturePVRTC: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
		return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

	},
	supportsBlendMinMax: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
		return this.extensions.get( 'EXT_blend_minmax' );

	},
	supportsVertexTextures: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
		return this.capabilities.vertexTextures;

	},
	supportsInstancedArrays: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
		return this.extensions.get( 'ANGLE_instanced_arrays' );

	},
	enableScissorTest: function ( boolean ) {

		console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
		this.setScissorTest( boolean );

	},
	initMaterial: function () {

		console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

	},
	addPrePlugin: function () {

		console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

	},
	addPostPlugin: function () {

		console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

	},
	updateShadowMap: function () {

		console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

	}

} );

Object.defineProperties( WebGLRenderer.prototype, {

	shadowMapEnabled: {
		get: function () {

			return this.shadowMap.enabled;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
			this.shadowMap.enabled = value;

		}
	},
	shadowMapType: {
		get: function () {

			return this.shadowMap.type;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
			this.shadowMap.type = value;

		}
	},
	shadowMapCullFace: {
		get: function () {

			return this.shadowMap.cullFace;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
			this.shadowMap.cullFace = value;

		}
	}
} );

Object.defineProperties( WebGLShadowMap.prototype, {

	cullFace: {
		get: function () {

			return this.renderReverseSided ? CullFaceFront : CullFaceBack;

		},
		set: function ( cullFace ) {

			var value = ( cullFace !== CullFaceBack );
			console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
			this.renderReverseSided = value;

		}
	}

} );

//

Object.defineProperties( WebGLRenderTarget.prototype, {

	wrapS: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
			return this.texture.wrapS;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
			this.texture.wrapS = value;

		}
	},
	wrapT: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
			return this.texture.wrapT;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
			this.texture.wrapT = value;

		}
	},
	magFilter: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
			return this.texture.magFilter;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
			this.texture.magFilter = value;

		}
	},
	minFilter: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
			return this.texture.minFilter;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
			this.texture.minFilter = value;

		}
	},
	anisotropy: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
			return this.texture.anisotropy;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
			this.texture.anisotropy = value;

		}
	},
	offset: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
			return this.texture.offset;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
			this.texture.offset = value;

		}
	},
	repeat: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
			return this.texture.repeat;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
			this.texture.repeat = value;

		}
	},
	format: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
			return this.texture.format;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
			this.texture.format = value;

		}
	},
	type: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
			return this.texture.type;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
			this.texture.type = value;

		}
	},
	generateMipmaps: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
			return this.texture.generateMipmaps;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
			this.texture.generateMipmaps = value;

		}
	}

} );

//

Object.assign( WebVRManager.prototype, {

	getStandingMatrix: function () {

		console.warn( 'THREE.WebVRManager: .getStandingMatrix() has been removed.' );

	}

} );

Object.defineProperties( WebVRManager.prototype, {

	standing: {
		set: function ( /* value */ ) {

			console.warn( 'THREE.WebVRManager: .standing has been removed.' );

		}
	}

} );

//

Audio.prototype.load = function ( file ) {

	console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
	var scope = this;
	var audioLoader = new AudioLoader();
	audioLoader.load( file, function ( buffer ) {

		scope.setBuffer( buffer );

	} );
	return this;

};

AudioAnalyser.prototype.getData = function () {

	console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
	return this.getFrequencyData();

};

//

CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {

	console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
	return this.update( renderer, scene );

};

//

var GeometryUtils = {

	merge: function ( geometry1, geometry2, materialIndexOffset ) {

		console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
		var matrix;

		if ( geometry2.isMesh ) {

			geometry2.matrixAutoUpdate && geometry2.updateMatrix();

			matrix = geometry2.matrix;
			geometry2 = geometry2.geometry;

		}

		geometry1.merge( geometry2, matrix, materialIndexOffset );

	},

	center: function ( geometry ) {

		console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
		return geometry.center();

	}

};

var ImageUtils = {

	crossOrigin: undefined,

	loadTexture: function ( url, mapping, onLoad, onError ) {

		console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

		var loader = new TextureLoader();
		loader.setCrossOrigin( this.crossOrigin );

		var texture = loader.load( url, onLoad, undefined, onError );

		if ( mapping ) texture.mapping = mapping;

		return texture;

	},

	loadTextureCube: function ( urls, mapping, onLoad, onError ) {

		console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

		var loader = new CubeTextureLoader();
		loader.setCrossOrigin( this.crossOrigin );

		var texture = loader.load( urls, onLoad, undefined, onError );

		if ( mapping ) texture.mapping = mapping;

		return texture;

	},

	loadCompressedTexture: function () {

		console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

	},

	loadCompressedTextureCube: function () {

		console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

	}

};

//

function Projector() {

	console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );

	this.projectVector = function ( vector, camera ) {

		console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
		vector.project( camera );

	};

	this.unprojectVector = function ( vector, camera ) {

		console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
		vector.unproject( camera );

	};

	this.pickingRay = function () {

		console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

	};

}

//

function CanvasRenderer() {

	console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );

	this.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
	this.clear = function () {};
	this.render = function () {};
	this.setClearColor = function () {};
	this.setSize = function () {};

}




/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Rot_1 = __webpack_require__(1);
const Point_1 = __webpack_require__(2);
var DirEnum;
(function (DirEnum) {
    DirEnum[DirEnum["East"] = 0] = "East";
    DirEnum[DirEnum["NorthEast"] = 1] = "NorthEast";
    DirEnum[DirEnum["North"] = 2] = "North";
    DirEnum[DirEnum["NorthWest"] = 3] = "NorthWest";
    DirEnum[DirEnum["West"] = 4] = "West";
    DirEnum[DirEnum["SouthWest"] = 5] = "SouthWest";
    DirEnum[DirEnum["South"] = 6] = "South";
    DirEnum[DirEnum["SouthEast"] = 7] = "SouthEast";
})(DirEnum || (DirEnum = {}));
/**
 * Dirの正面方向，つまり角度としての0度の方向は東側とする．
 * そのため，negで逆をとったら南北が反転するものとする．
 */
class Dir {
    constructor(dir) {
        this.dir = dir;
        this.dir = dir % 8;
    }
    opposite() {
        return new Dir((this.dir + 4) % 8);
    }
    add(by) {
        return new Dir((this.dir + by.dir) % 8);
    }
    sub(by) {
        return this.add(by.neg());
    }
    neg() {
        return new Dir((8 - this.dir) % 8);
    }
    apply(target) {
        if (target instanceof Dir) {
            return this.add(target);
        }
        else if (target instanceof Point_1.Point) {
            return this.rotatePoint(target);
        }
        else {
            return this.rotateRot(target);
        }
    }
    hasEffect() {
        return this.dir !== DirEnum.East;
    }
    equal(other) {
        return this.dir === other.dir;
    }
    flipVert() {
        return this.neg();
    }
    toRot() {
        return Dir.rotTable[this.dir % 8];
    }
    rotateRot(r) {
        return this.toRot().mul(r);
    }
    rotatePoint(p) {
        return new Point_1.Point(this.rotateRot(p.single), this.rotateRot(p.double), p.up);
    }
    valueOf() {
        return this.dir.toString();
    }
}
Dir.East = new Dir(DirEnum.East);
Dir.NorthEast = new Dir(DirEnum.NorthEast);
Dir.North = new Dir(DirEnum.North);
Dir.NorthWest = new Dir(DirEnum.NorthWest);
Dir.West = new Dir(DirEnum.West);
Dir.SouthWest = new Dir(DirEnum.SouthWest);
Dir.South = new Dir(DirEnum.South);
Dir.SouthEast = new Dir(DirEnum.SouthEast);
Dir.rotTable = [
    new Rot_1.Rot(1, 0, 0, 0),
    new Rot_1.Rot(0, 1, 0, 0),
    new Rot_1.Rot(0, 0, 1, 0),
    new Rot_1.Rot(0, 0, 0, 1),
    new Rot_1.Rot(-1, 0, 0, 0),
    new Rot_1.Rot(0, -1, 0, 0),
    new Rot_1.Rot(0, 0, -1, 0),
    new Rot_1.Rot(0, 0, 0, -1)
];
exports.Dir = Dir;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const End_1 = __webpack_require__(0);
var PoleEnum;
(function (PoleEnum) {
    PoleEnum[PoleEnum["Plus"] = 0] = "Plus";
    PoleEnum[PoleEnum["Minus"] = 1] = "Minus";
})(PoleEnum || (PoleEnum = {}));
/**
 * Pole
 */
class Pole {
    constructor(pole) {
        this.pole = pole;
        this.pole = pole % 2;
    }
    apply(target) {
        if (target instanceof Pole) {
            return this.applyPole(target);
        }
        else {
            return this.applyEnd(target);
        }
    }
    applyPole(target) {
        return new Pole((this.pole + target.pole) % 2);
    }
    applyEnd(target) {
        if (this.isMinus()) {
            return new End_1.End(target.point, target.dir, this.applyPole(target.pole));
        }
        else {
            return target;
        }
    }
    equal(other) {
        return this.pole === other.pole;
    }
    isPlus() {
        return this.pole === PoleEnum.Plus;
    }
    isMinus() {
        return this.pole === PoleEnum.Minus;
    }
    hasEffect() {
        return this.isMinus();
    }
    opposite() {
        return new Pole((1 - this.pole) % 2);
    }
    valueOf() {
        return this.pole.toString();
    }
}
Pole.Plus = new Pole(PoleEnum.Plus);
Pole.Minus = new Pole(PoleEnum.Minus);
exports.Pole = Pole;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(4));
__export(__webpack_require__(0));
__export(__webpack_require__(2));
__export(__webpack_require__(5));
__export(__webpack_require__(1));
__export(__webpack_require__(7));
__export(__webpack_require__(13));
__export(__webpack_require__(15));


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Dir_1 = __webpack_require__(4);
const Rot_1 = __webpack_require__(1);
const Point_1 = __webpack_require__(2);
const End_1 = __webpack_require__(0);
var FlipEnum;
(function (FlipEnum) {
    FlipEnum[FlipEnum["No"] = 0] = "No";
    FlipEnum[FlipEnum["Yes"] = 1] = "Yes";
})(FlipEnum || (FlipEnum = {}));
/**
 * Flip, 180度の回転を表す．回転軸は東西の線
 */
class Flip {
    constructor(flip) {
        this.flip = flip;
        this.flip = flip % 2;
    }
    apply(target) {
        if (target instanceof Flip) {
            return new Flip((this.flip + target.flip) % 2);
        }
        else if (target instanceof Dir_1.Dir) {
            return this.flipDir(target);
        }
        else if (target instanceof Rot_1.Rot) {
            return this.flipRot(target);
        }
        else if (target instanceof Point_1.Point) {
            return this.flipPoint(target);
        }
        else {
            return this.flipEnd(target);
        }
    }
    flipDir(target) {
        return this.isYes() ? target.neg() : target;
    }
    flipRot(target) {
        return this.isYes() ? Rot_1.Rot.of(target.a, -target.d, -target.c, -target.b) : target;
    }
    flipPoint(target) {
        if (this.isYes()) {
            return Point_1.Point.of(this.flipRot(target.single), this.flipRot(target.double), -target.up);
        }
        else {
            return target;
        }
    }
    flipEnd(target) {
        if (this.isYes()) {
            return End_1.End.of(this.flipPoint(target.point), this.flipDir(target.dir), target.pole);
        }
        else {
            return target;
        }
    }
    hasEffect() {
        return this.flip === FlipEnum.Yes;
    }
    equal(other) {
        return this.flip === other.flip;
    }
    isYes() {
        return this.flip === FlipEnum.Yes;
    }
    opposite() {
        return new Flip((1 - this.flip) % 2);
    }
    valueOf() {
        return this.flip.toString();
    }
}
Flip.No = new Flip(FlipEnum.No);
Flip.Yes = new Flip(FlipEnum.Yes);
exports.Flip = Flip;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(3);
const rawModel = __webpack_require__(17);
class ModelManager {
    constructor() {
        this.geometries = [];
        var loader = new THREE.JSONLoader();
        for (let name in rawModel) {
            const geometry = loader.parse(rawModel[name]).geometry;
            this.geometries[name] = geometry;
        }
    }
    static instance() {
        if (this.instance_) {
            return this.instance_;
        }
        this.instance_ = new ModelManager();
        return this.instance_;
    }
    static create(name, color = 0x5588FF) {
        const geom = this.instance().geometries[name];
        if (!geom) {
            console.error("geometry ", name, " not found");
        }
        const mat = new THREE.MeshLambertMaterial({ color: color });
        return new THREE.Mesh(geom, mat);
    }
}
exports.ModelManager = ModelManager;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Main_1 = __webpack_require__(10);
window.addEventListener("load", function () {
    const main = new Main_1.Main();
    main.setup();
}, false);


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const RailView_1 = __webpack_require__(11);
class Main {
    constructor() {
        this.view = new RailView_1.RailView();
    }
    setup() {
        this.view.render();
    }
}
exports.Main = Main;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(3);
__webpack_require__(12);
const librail_1 = __webpack_require__(6);
const Layout_1 = __webpack_require__(16);
const ModelManager_1 = __webpack_require__(8);
const Model_1 = __webpack_require__(18);
const FrontierManager_1 = __webpack_require__(19);
class RailView {
    constructor() {
        this.WIDTH = 1600;
        this.HEIGHT = 900;
        this.initRenderer();
        this.initCamera();
        this.initScene();
        this.initHandler();
        this.initLayout();
        this.initFrontier();
    }
    initRenderer() {
        this.renderer = new THREE.WebGLRenderer({ antialias: true });
        this.renderer.setPixelRatio(window.devicePixelRatio || 1);
        this.renderer.setSize(this.WIDTH, this.HEIGHT);
        document.body.appendChild(this.renderer.domElement);
        this.renderer.domElement.setAttribute('tabindex', '0');
        this.renderer.domElement.focus();
    }
    initCamera() {
        const radius = 1000;
        const ratio = this.WIDTH / this.HEIGHT;
        const w = radius * ratio;
        const h = radius;
        this.camera = new THREE.OrthographicCamera(-w, w, h, -h, 0, 100000);
        this.camera.position.set(0, 5000, 1000);
        this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
        this.controls.enableKeys = false;
        this.controls.maxPolarAngle = Math.PI * 87 / 180;
        this.controls.update();
        // need to set `controls.target` correctly 
        // when adding rails in order to maintain appropriate viewpoint.
    }
    load(path, color) {
        var rail = ModelManager_1.ModelManager.create(path, color);
        this.scene.add(rail);
        return rail;
    }
    initFloor() {
        let loader = new THREE.TextureLoader();
        loader.load('./assets/grass.png', texture => {
            var geometry = new THREE.PlaneBufferGeometry(10000, 10000);
            texture.wrapS = THREE.RepeatWrapping;
            texture.wrapT = THREE.RepeatWrapping;
            texture.repeat.set(10, 10);
            var material = new THREE.MeshBasicMaterial({ map: texture });
            var plane = new THREE.Mesh(geometry, material);
            plane.rotateX(-Math.PI / 2);
            plane.position.setY(-4);
            this.scene.add(plane);
        });
    }
    initFrontier() {
        var geometry = new THREE.CylinderBufferGeometry(0, 15, 40, 6, 1);
        var material = new THREE.MeshLambertMaterial({ color: 0xFFFFFF });
        this.frontier = new THREE.Mesh(geometry, material);
        this.updateFrontier(this.frontierManager.selection);
        this.scene.add(this.frontier);
    }
    initScene() {
        this.scene = new THREE.Scene();
        this.scene.background = new THREE.Color(0x88DDFF);
        const light = new THREE.DirectionalLight(0xFFFFFF);
        light.position.set(200, 400, -100);
        this.scene.add(light);
        this.scene.add(new THREE.AmbientLight(0xAAAAAA));
        this.initFloor();
        if (0) {
            const axisHelper = new THREE.AxisHelper(50);
            this.scene.add(axisHelper);
        }
    }
    initHandler() {
        window.document.addEventListener('keydown', this.onKeyDown.bind(this), false);
    }
    updateFrontier(f) {
        let vec3 = Model_1.Model.pointToVec3(f.point);
        vec3.y += 20;
        let euler = new THREE.Euler(0, f.dir.dir * Math.PI / 4, Math.PI / 2);
        this.frontier.position.copy(vec3);
        this.frontier.setRotationFromEuler(euler);
        this.controls.target = vec3;
        this.controls.update();
    }
    selectionChanged(fm, f) {
        if (f) {
            console.log(f.toString());
            this.updateFrontier(f);
        }
    }
    initLayout() {
        this.layout = new Layout_1.Layout();
        this.layout.observer = this;
        this.frontierManager = new FrontierManager_1.FrontierManager();
        this.frontierManager.observer = this;
        if (0) {
            // load initial layout
            const blue = 0x3399FF;
            const gray = 0x666666;
            const yellow = 0xaaaa33;
            const p = Math.SQRT1_2;
            const q = 1 - p;
            const l = 216;
            //            this.load('curve_8', blue);
            //            var c = this.load('slope', blue);
            //            c.rotateX(Math.PI);
            //            c.position.setY(66);
            var c = this.load('pier', yellow);
            var d = this.load('pier', yellow);
            c.position.set(3 * l * p, 0, -3 * l * q);
            d.position.set(2 * l, 0, -l);
            c.rotateY(Math.PI / 4);
        }
    }
    onKeyDown(event) {
        let handle = this.frontierManager.selection.opposite();
        var r;
        if (event.code === "ArrowUp") {
            r = new librail_1.Rail(librail_1.Straight, 0, handle, librail_1.Flip.No);
        }
        else if (event.code === "ArrowLeft") {
            r = new librail_1.Rail(librail_1.Curve, 0, handle, librail_1.Flip.No);
        }
        else if (event.code === "ArrowRight") {
            r = new librail_1.Rail(librail_1.Curve, 0, handle, librail_1.Flip.Yes);
        }
        else if (event.code === "KeyW") {
            r = new librail_1.Rail(librail_1.Slope, 0, handle, librail_1.Flip.No);
        }
        else if (event.code === "KeyS") {
            r = new librail_1.Rail(librail_1.Slope, 0, handle, librail_1.Flip.Yes);
        }
        else if (event.code === "KeyL") {
            r = new librail_1.Rail(librail_1.Turnout, 0, handle, librail_1.Flip.No);
        }
        else if (event.code === "KeyR") {
            r = new librail_1.Rail(librail_1.Turnout, 0, handle, librail_1.Flip.Yes);
        }
        else if (event.code === "Tab") {
            event.stopPropagation();
            event.preventDefault();
            this.frontierManager.selectNext();
            return;
        }
        else {
            return;
        }
        this.layout.add(r);
        for (let e of r.ends()) {
            this.frontierManager.addEnd(e);
        }
        event.stopPropagation();
        event.preventDefault();
    }
    render() {
        window.requestAnimationFrame(this.render.bind(this));
        this.renderer.render(this.scene, this.camera);
    }
    // a rail is added to the layout
    // so we need to add a rail model to the scene
    // this is ugly glue code
    railAdded(layout, rail) {
        if (rail.factory === librail_1.Straight) {
            const m = new Model_1.StraightModel(rail);
            m.addToScene(this.scene);
        }
        else if (rail.factory === librail_1.Curve) {
            const m = new Model_1.CurveModel(rail);
            m.addToScene(this.scene);
        }
        else if (rail.factory === librail_1.Slope) {
            const m = new Model_1.SlopeModel(rail);
            m.addToScene(this.scene);
        }
        else if (rail.factory === librail_1.Turnout) {
            const m = new Model_1.TurnoutModel(rail);
            m.addToScene(this.scene);
        }
    }
    railRemoved(layout, rail) {
    }
}
exports.RailView = RailView;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var THREE = __webpack_require__(3);

/**
 * @author qiao / https://github.com/qiao
 * @author mrdoob / http://mrdoob.com
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author erich666 / http://erichaines.com
 */

// This set of controls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
//
//    Orbit - left mouse / touch: one finger move
//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish
//    Pan - right mouse, or arrow keys / touch: three finger swipe

THREE.OrbitControls = function ( object, domElement ) {

	this.object = object;

	this.domElement = ( domElement !== undefined ) ? domElement : document;

	// Set to false to disable this control
	this.enabled = true;

	// "target" sets the location of focus, where the object orbits around
	this.target = new THREE.Vector3();

	// How far you can dolly in and out ( PerspectiveCamera only )
	this.minDistance = 0;
	this.maxDistance = Infinity;

	// How far you can zoom in and out ( OrthographicCamera only )
	this.minZoom = 0;
	this.maxZoom = Infinity;

	// How far you can orbit vertically, upper and lower limits.
	// Range is 0 to Math.PI radians.
	this.minPolarAngle = 0; // radians
	this.maxPolarAngle = Math.PI; // radians

	// How far you can orbit horizontally, upper and lower limits.
	// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
	this.minAzimuthAngle = - Infinity; // radians
	this.maxAzimuthAngle = Infinity; // radians

	// Set to true to enable damping (inertia)
	// If damping is enabled, you must call controls.update() in your animation loop
	this.enableDamping = false;
	this.dampingFactor = 0.25;

	// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
	// Set to false to disable zooming
	this.enableZoom = true;
	this.zoomSpeed = 1.0;

	// Set to false to disable rotating
	this.enableRotate = true;
	this.rotateSpeed = 1.0;

	// Set to false to disable panning
	this.enablePan = true;
	this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

	// Set to true to automatically rotate around the target
	// If auto-rotate is enabled, you must call controls.update() in your animation loop
	this.autoRotate = false;
	this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

	// Set to false to disable use of the keys
	this.enableKeys = true;

	// The four arrow keys
	this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };

	// Mouse buttons
	this.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };

	// for reset
	this.target0 = this.target.clone();
	this.position0 = this.object.position.clone();
	this.zoom0 = this.object.zoom;

	//
	// public methods
	//

	this.getPolarAngle = function () {

		return spherical.phi;

	};

	this.getAzimuthalAngle = function () {

		return spherical.theta;

	};

	this.saveState = function () {

		scope.target0.copy( scope.target );
		scope.position0.copy( scope.object.position );
		scope.zoom0 = scope.object.zoom;

	};

	this.reset = function () {

		scope.target.copy( scope.target0 );
		scope.object.position.copy( scope.position0 );
		scope.object.zoom = scope.zoom0;

		scope.object.updateProjectionMatrix();
		scope.dispatchEvent( changeEvent );

		scope.update();

		state = STATE.NONE;

	};

	// this method is exposed, but perhaps it would be better if we can make it private...
	this.update = function () {

		var offset = new THREE.Vector3();

		// so camera.up is the orbit axis
		var quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );
		var quatInverse = quat.clone().inverse();

		var lastPosition = new THREE.Vector3();
		var lastQuaternion = new THREE.Quaternion();

		return function update() {

			var position = scope.object.position;

			offset.copy( position ).sub( scope.target );

			// rotate offset to "y-axis-is-up" space
			offset.applyQuaternion( quat );

			// angle from z-axis around y-axis
			spherical.setFromVector3( offset );

			if ( scope.autoRotate && state === STATE.NONE ) {

				rotateLeft( getAutoRotationAngle() );

			}

			spherical.theta += sphericalDelta.theta;
			spherical.phi += sphericalDelta.phi;

			// restrict theta to be between desired limits
			spherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );

			// restrict phi to be between desired limits
			spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );

			spherical.makeSafe();


			spherical.radius *= scale;

			// restrict radius to be between desired limits
			spherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );

			// move target to panned location
			scope.target.add( panOffset );

			offset.setFromSpherical( spherical );

			// rotate offset back to "camera-up-vector-is-up" space
			offset.applyQuaternion( quatInverse );

			position.copy( scope.target ).add( offset );

			scope.object.lookAt( scope.target );

			if ( scope.enableDamping === true ) {

				sphericalDelta.theta *= ( 1 - scope.dampingFactor );
				sphericalDelta.phi *= ( 1 - scope.dampingFactor );

			} else {

				sphericalDelta.set( 0, 0, 0 );

			}

			scale = 1;
			panOffset.set( 0, 0, 0 );

			// update condition is:
			// min(camera displacement, camera rotation in radians)^2 > EPS
			// using small-angle approximation cos(x/2) = 1 - x^2 / 8

			if ( zoomChanged ||
				lastPosition.distanceToSquared( scope.object.position ) > EPS ||
				8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {

				scope.dispatchEvent( changeEvent );

				lastPosition.copy( scope.object.position );
				lastQuaternion.copy( scope.object.quaternion );
				zoomChanged = false;

				return true;

			}

			return false;

		};

	}();

	this.dispose = function () {

		scope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );
		scope.domElement.removeEventListener( 'mousedown', onMouseDown, false );
		scope.domElement.removeEventListener( 'wheel', onMouseWheel, false );

		scope.domElement.removeEventListener( 'touchstart', onTouchStart, false );
		scope.domElement.removeEventListener( 'touchend', onTouchEnd, false );
		scope.domElement.removeEventListener( 'touchmove', onTouchMove, false );

		document.removeEventListener( 'mousemove', onMouseMove, false );
		document.removeEventListener( 'mouseup', onMouseUp, false );

		window.removeEventListener( 'keydown', onKeyDown, false );

		//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

	};

	//
	// internals
	//

	var scope = this;

	var changeEvent = { type: 'change' };
	var startEvent = { type: 'start' };
	var endEvent = { type: 'end' };

	var STATE = { NONE: - 1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY: 4, TOUCH_PAN: 5 };

	var state = STATE.NONE;

	var EPS = 0.000001;

	// current position in spherical coordinates
	var spherical = new THREE.Spherical();
	var sphericalDelta = new THREE.Spherical();

	var scale = 1;
	var panOffset = new THREE.Vector3();
	var zoomChanged = false;

	var rotateStart = new THREE.Vector2();
	var rotateEnd = new THREE.Vector2();
	var rotateDelta = new THREE.Vector2();

	var panStart = new THREE.Vector2();
	var panEnd = new THREE.Vector2();
	var panDelta = new THREE.Vector2();

	var dollyStart = new THREE.Vector2();
	var dollyEnd = new THREE.Vector2();
	var dollyDelta = new THREE.Vector2();

	function getAutoRotationAngle() {

		return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

	}

	function getZoomScale() {

		return Math.pow( 0.95, scope.zoomSpeed );

	}

	function rotateLeft( angle ) {

		sphericalDelta.theta -= angle;

	}

	function rotateUp( angle ) {

		sphericalDelta.phi -= angle;

	}

	var panLeft = function () {

		var v = new THREE.Vector3();

		return function panLeft( distance, objectMatrix ) {

			v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
			v.multiplyScalar( - distance );

			panOffset.add( v );

		};

	}();

	var panUp = function () {

		var v = new THREE.Vector3();

		return function panUp( distance, objectMatrix ) {

			v.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix
			v.multiplyScalar( distance );

			panOffset.add( v );

		};

	}();

	// deltaX and deltaY are in pixels; right and down are positive
	var pan = function () {

		var offset = new THREE.Vector3();

		return function pan( deltaX, deltaY ) {

			var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

			if ( scope.object.isPerspectiveCamera ) {

				// perspective
				var position = scope.object.position;
				offset.copy( position ).sub( scope.target );
				var targetDistance = offset.length();

				// half of the fov is center to top of screen
				targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

				// we actually don't use screenWidth, since perspective camera is fixed to screen height
				panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
				panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

			} else if ( scope.object.isOrthographicCamera ) {

				// orthographic
				panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
				panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

			} else {

				// camera neither orthographic nor perspective
				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
				scope.enablePan = false;

			}

		};

	}();

	function dollyIn( dollyScale ) {

		if ( scope.object.isPerspectiveCamera ) {

			scale /= dollyScale;

		} else if ( scope.object.isOrthographicCamera ) {

			scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );
			scope.object.updateProjectionMatrix();
			zoomChanged = true;

		} else {

			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
			scope.enableZoom = false;

		}

	}

	function dollyOut( dollyScale ) {

		if ( scope.object.isPerspectiveCamera ) {

			scale *= dollyScale;

		} else if ( scope.object.isOrthographicCamera ) {

			scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );
			scope.object.updateProjectionMatrix();
			zoomChanged = true;

		} else {

			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
			scope.enableZoom = false;

		}

	}

	//
	// event callbacks - update the object state
	//

	function handleMouseDownRotate( event ) {

		//console.log( 'handleMouseDownRotate' );

		rotateStart.set( event.clientX, event.clientY );

	}

	function handleMouseDownDolly( event ) {

		//console.log( 'handleMouseDownDolly' );

		dollyStart.set( event.clientX, event.clientY );

	}

	function handleMouseDownPan( event ) {

		//console.log( 'handleMouseDownPan' );

		panStart.set( event.clientX, event.clientY );

	}

	function handleMouseMoveRotate( event ) {

		//console.log( 'handleMouseMoveRotate' );

		rotateEnd.set( event.clientX, event.clientY );
		rotateDelta.subVectors( rotateEnd, rotateStart );

		var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

		// rotating across whole screen goes 360 degrees around
		rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

		// rotating up and down along whole screen attempts to go 360, but limited to 180
		rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

		rotateStart.copy( rotateEnd );

		scope.update();

	}

	function handleMouseMoveDolly( event ) {

		//console.log( 'handleMouseMoveDolly' );

		dollyEnd.set( event.clientX, event.clientY );

		dollyDelta.subVectors( dollyEnd, dollyStart );

		if ( dollyDelta.y > 0 ) {

			dollyIn( getZoomScale() );

		} else if ( dollyDelta.y < 0 ) {

			dollyOut( getZoomScale() );

		}

		dollyStart.copy( dollyEnd );

		scope.update();

	}

	function handleMouseMovePan( event ) {

		//console.log( 'handleMouseMovePan' );

		panEnd.set( event.clientX, event.clientY );

		panDelta.subVectors( panEnd, panStart );

		pan( panDelta.x, panDelta.y );

		panStart.copy( panEnd );

		scope.update();

	}

	function handleMouseUp( event ) {

		// console.log( 'handleMouseUp' );

	}

	function handleMouseWheel( event ) {

		// console.log( 'handleMouseWheel' );

		if ( event.deltaY < 0 ) {

			dollyOut( getZoomScale() );

		} else if ( event.deltaY > 0 ) {

			dollyIn( getZoomScale() );

		}

		scope.update();

	}

	function handleKeyDown( event ) {

		//console.log( 'handleKeyDown' );

		switch ( event.keyCode ) {

			case scope.keys.UP:
				pan( 0, scope.keyPanSpeed );
				scope.update();
				break;

			case scope.keys.BOTTOM:
				pan( 0, - scope.keyPanSpeed );
				scope.update();
				break;

			case scope.keys.LEFT:
				pan( scope.keyPanSpeed, 0 );
				scope.update();
				break;

			case scope.keys.RIGHT:
				pan( - scope.keyPanSpeed, 0 );
				scope.update();
				break;

		}

	}

	function handleTouchStartRotate( event ) {

		//console.log( 'handleTouchStartRotate' );

		rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

	}

	function handleTouchStartDolly( event ) {

		//console.log( 'handleTouchStartDolly' );

		var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
		var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

		var distance = Math.sqrt( dx * dx + dy * dy );

		dollyStart.set( 0, distance );

	}

	function handleTouchStartPan( event ) {

		//console.log( 'handleTouchStartPan' );

		panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

	}

	function handleTouchMoveRotate( event ) {

		//console.log( 'handleTouchMoveRotate' );

		rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
		rotateDelta.subVectors( rotateEnd, rotateStart );

		var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

		// rotating across whole screen goes 360 degrees around
		rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

		// rotating up and down along whole screen attempts to go 360, but limited to 180
		rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

		rotateStart.copy( rotateEnd );

		scope.update();

	}

	function handleTouchMoveDolly( event ) {

		//console.log( 'handleTouchMoveDolly' );

		var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
		var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

		var distance = Math.sqrt( dx * dx + dy * dy );

		dollyEnd.set( 0, distance );

		dollyDelta.subVectors( dollyEnd, dollyStart );

		if ( dollyDelta.y > 0 ) {

			dollyOut( getZoomScale() );

		} else if ( dollyDelta.y < 0 ) {

			dollyIn( getZoomScale() );

		}

		dollyStart.copy( dollyEnd );

		scope.update();

	}

	function handleTouchMovePan( event ) {

		//console.log( 'handleTouchMovePan' );

		panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

		panDelta.subVectors( panEnd, panStart );

		pan( panDelta.x, panDelta.y );

		panStart.copy( panEnd );

		scope.update();

	}

	function handleTouchEnd( event ) {

		//console.log( 'handleTouchEnd' );

	}

	//
	// event handlers - FSM: listen for events and reset state
	//

	function onMouseDown( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();

		switch ( event.button ) {

			case scope.mouseButtons.ORBIT:

				if ( scope.enableRotate === false ) return;

				handleMouseDownRotate( event );

				state = STATE.ROTATE;

				break;

			case scope.mouseButtons.ZOOM:

				if ( scope.enableZoom === false ) return;

				handleMouseDownDolly( event );

				state = STATE.DOLLY;

				break;

			case scope.mouseButtons.PAN:

				if ( scope.enablePan === false ) return;

				handleMouseDownPan( event );

				state = STATE.PAN;

				break;

		}

		if ( state !== STATE.NONE ) {

			document.addEventListener( 'mousemove', onMouseMove, false );
			document.addEventListener( 'mouseup', onMouseUp, false );

			scope.dispatchEvent( startEvent );

		}

	}

	function onMouseMove( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();

		switch ( state ) {

			case STATE.ROTATE:

				if ( scope.enableRotate === false ) return;

				handleMouseMoveRotate( event );

				break;

			case STATE.DOLLY:

				if ( scope.enableZoom === false ) return;

				handleMouseMoveDolly( event );

				break;

			case STATE.PAN:

				if ( scope.enablePan === false ) return;

				handleMouseMovePan( event );

				break;

		}

	}

	function onMouseUp( event ) {

		if ( scope.enabled === false ) return;

		handleMouseUp( event );

		document.removeEventListener( 'mousemove', onMouseMove, false );
		document.removeEventListener( 'mouseup', onMouseUp, false );

		scope.dispatchEvent( endEvent );

		state = STATE.NONE;

	}

	function onMouseWheel( event ) {

		if ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;

		event.preventDefault();
		event.stopPropagation();

		handleMouseWheel( event );

		scope.dispatchEvent( startEvent ); // not sure why these are here...
		scope.dispatchEvent( endEvent );

	}

	function onKeyDown( event ) {

		if ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;

		handleKeyDown( event );

	}

	function onTouchStart( event ) {

		if ( scope.enabled === false ) return;

		switch ( event.touches.length ) {

			case 1:	// one-fingered touch: rotate

				if ( scope.enableRotate === false ) return;

				handleTouchStartRotate( event );

				state = STATE.TOUCH_ROTATE;

				break;

			case 2:	// two-fingered touch: dolly

				if ( scope.enableZoom === false ) return;

				handleTouchStartDolly( event );

				state = STATE.TOUCH_DOLLY;

				break;

			case 3: // three-fingered touch: pan

				if ( scope.enablePan === false ) return;

				handleTouchStartPan( event );

				state = STATE.TOUCH_PAN;

				break;

			default:

				state = STATE.NONE;

		}

		if ( state !== STATE.NONE ) {

			scope.dispatchEvent( startEvent );

		}

	}

	function onTouchMove( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();
		event.stopPropagation();

		switch ( event.touches.length ) {

			case 1: // one-fingered touch: rotate

				if ( scope.enableRotate === false ) return;
				if ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...

				handleTouchMoveRotate( event );

				break;

			case 2: // two-fingered touch: dolly

				if ( scope.enableZoom === false ) return;
				if ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...

				handleTouchMoveDolly( event );

				break;

			case 3: // three-fingered touch: pan

				if ( scope.enablePan === false ) return;
				if ( state !== STATE.TOUCH_PAN ) return; // is this needed?...

				handleTouchMovePan( event );

				break;

			default:

				state = STATE.NONE;

		}

	}

	function onTouchEnd( event ) {

		if ( scope.enabled === false ) return;

		handleTouchEnd( event );

		scope.dispatchEvent( endEvent );

		state = STATE.NONE;

	}

	function onContextMenu( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();

	}

	//

	scope.domElement.addEventListener( 'contextmenu', onContextMenu, false );

	scope.domElement.addEventListener( 'mousedown', onMouseDown, false );
	scope.domElement.addEventListener( 'wheel', onMouseWheel, false );

	scope.domElement.addEventListener( 'touchstart', onTouchStart, false );
	scope.domElement.addEventListener( 'touchend', onTouchEnd, false );
	scope.domElement.addEventListener( 'touchmove', onTouchMove, false );

	window.addEventListener( 'keydown', onKeyDown, false );

	// force an update at start

	this.update();

};

THREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );
THREE.OrbitControls.prototype.constructor = THREE.OrbitControls;

Object.defineProperties( THREE.OrbitControls.prototype, {

	center: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .center has been renamed to .target' );
			return this.target;

		}

	},

	// backward compatibility

	noZoom: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
			return ! this.enableZoom;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
			this.enableZoom = ! value;

		}

	},

	noRotate: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
			return ! this.enableRotate;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
			this.enableRotate = ! value;

		}

	},

	noPan: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
			return ! this.enablePan;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
			this.enablePan = ! value;

		}

	},

	noKeys: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
			return ! this.enableKeys;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
			this.enableKeys = ! value;

		}

	},

	staticMoving: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
			return ! this.enableDamping;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
			this.enableDamping = ! value;

		}

	},

	dynamicDampingFactor: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
			return this.dampingFactor;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
			this.dampingFactor = value;

		}

	}

} );



/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Rot_1 = __webpack_require__(1);
const Point_1 = __webpack_require__(2);
const End_1 = __webpack_require__(0);
const Dir_1 = __webpack_require__(4);
const Flip_1 = __webpack_require__(7);
const Transform_1 = __webpack_require__(14);
// # レールの種類ごとに共通した特徴
// * 端点の(位置)と(凹凸)と(方向)
// * 状態数
// * 状態に対応してオンになるモデルの名前
// * 端点から端点に移動した時の状態遷移関数
// * 端点から端点に移動する時のベクトル関数、導関数
// * 
/* 問題：
* レールの種類ごとに一意性を判定する部分が微妙に異なる
* 端点に名前をつけるべきか？

*/
// レールはどんどん継承して作っていくことにした
/* レールのローカルから見た端点の方向は，内側に向かう方向とする．
 * 例えば，原点から東においた直線レールの場合，
 * 原点の方の端の方向は東で，a = 1の部分の方向は西となる．
 * こうすることで，原点でのローカルとグローバルのギャップがなくなり，座標変換が素直に対応する．
 *

 */
var Meaning;
(function (Meaning) {
    Meaning[Meaning["Impossible"] = 0] = "Impossible";
    Meaning[Meaning["DontCare"] = 1] = "DontCare";
    Meaning[Meaning["Meaningful"] = 2] = "Meaningful";
})(Meaning = exports.Meaning || (exports.Meaning = {}));
class RailFactory {
    // this string can be a key or object property
    // [0] should be origin
    // canFlip is Impossible => Flip.No only
    //            DontCare => flip will be Flip.No, but one can specify Flip.Yes
    //            Meaningful => set to given parameter
    // hasPole is Impossible => origin's pole must be Pole.Plus
    //            DontCare => will be normalized to Pole.Plus, by flipping and
    //                        setting the origin to other end,
    //                        therefore localEnds should have exact 2 elems
    //            Meaningful => meaningful
    /**
     *
     * @param name unique identifier among the rails
     * @param localEnds [0] should be the origin
     * @param canFlip Impossible => Flip.No only
     *                DontCare => flip will be Flip.No, but one can specify Flip.Yes
     *                Meaningful => set to given parameter
     * @param hasPole Impossible => origin's pole must be Pole.Plus
     *                DontCare => will be normalized to Pole.Plus, by flipping and
     *                            setting the origin to other end,
     *                            therefore localEnds should have exact 2 elems
     *                Meaningful => meaningful
     * @param localPierPoints an point to set a pier, pole will be ignored
     */
    constructor(name, localEnds, canFlip, hasPole, localPierEnds = localEnds) {
        this.name = name;
        this.localEnds = localEnds;
        this.canFlip = canFlip;
        this.hasPole = hasPole;
        this.localPierEnds = localPierEnds;
    }
    /**
     * このメソッドでは，端点termを指定された場合は，原点の座標に戻してインスタンスを作る．
     * @param term a valid index of localEnds.
     * @param origin origin
     * @param flip isFlipped
     */
    create(term, termEnd, flip) {
        var o = this.convert(term, 0, termEnd, flip);
        var f = flip;
        // 重複が発生するため処理する．
        if (o.pole.isMinus()) {
            if (this.hasPole === Meaning.Meaningful) {
                // 正規化の余地なし
            }
            else if (this.hasPole === Meaning.DontCare) {
                // もう片方の端点を原点として作り直す
                o = this.convert(0, 1, o, f);
                f = f.opposite();
            }
            else {
                throw "this kind of rail can't have minus-pole origin";
            }
        }
        // normalize flip
        if (f.isYes()) {
            if (this.canFlip === Meaning.Meaningful) {
                // proceed
            }
            else if (this.canFlip === Meaning.DontCare) {
                f = Flip_1.Flip.No;
            }
            else {
                throw "this kind of rail can't be flipped";
            }
        }
        return { origin: o, flip: f };
    }
    convert(from, to, end, flip) {
        let oEnd = flip.apply(this.localEnds[from]);
        let tEnd = flip.apply(this.localEnds[to]);
        let fromto = new Transform_1.FromTo(tEnd, oEnd);
        let origin = fromto.apply(end);
        return origin;
    }
    canCreate(term, origin_, flip) {
        let origin = this.convert(term, 0, origin_, flip);
        if (term < 0 || this.localEnds.length <= term) {
            return false;
        }
        else if (this.canFlip === Meaning.Impossible && flip.hasEffect()) {
            return false;
        }
        else if (this.hasPole === Meaning.Impossible && origin.pole.hasEffect()) {
            return false;
        }
        else {
            return true;
        }
    }
}
exports.RailFactory = RailFactory;
class Rail {
    constructor(factory, term, origin, flip) {
        this.factory = factory;
        this.instance = factory.create(term, origin, flip);
    }
    localToGlobal(local) {
        return this.instance.origin.apply(this.instance.flip.apply(local));
    }
    ends() {
        return this.factory.localEnds.map(e => this.localToGlobal(e));
    }
    pierPoints() {
        return this.factory.localPierEnds.map(e => this.localToGlobal(e));
    }
}
exports.Rail = Rail;
let origin = End_1.End.plus(Point_1.Point.zero(), Dir_1.Dir.East);
let straight1 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(1)), Dir_1.Dir.West);
let straight2 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(2)), Dir_1.Dir.West);
let straight4 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(4)), Dir_1.Dir.West);
let straight6 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(6)), Dir_1.Dir.West);
let straight8 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(8)), Dir_1.Dir.West);
let straight4_slope = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(4), Rot_1.Rot.zero(), 1), Dir_1.Dir.West);
let straight8_slope = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(8), Rot_1.Rot.zero(), 4), Dir_1.Dir.West);
let curve4_8 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(0, 0, 4, -4)), Dir_1.Dir.SouthWest);
let curve6_8 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(2, 0, 4, -4)), Dir_1.Dir.SouthWest);
let curve4_4 = End_1.End.minus(Point_1.Point.of(Rot_1.Rot.of(4, 4, 0, 0)), Dir_1.Dir.South);
exports.Straight = new RailFactory("straight_1", [origin, straight4], Meaning.DontCare, Meaning.DontCare);
exports.Curve = new RailFactory("curve_8", [origin, curve4_8], Meaning.Meaningful, Meaning.DontCare);
exports.Slope = new RailFactory("slope", [origin, straight8_slope], Meaning.Meaningful, Meaning.DontCare);
exports.Turnout = new RailFactory("turnout", [origin, straight4, curve4_8], Meaning.Meaningful, Meaning.Meaningful);


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const End_1 = __webpack_require__(0);
/**
 * ローカル座標を2つ指定することで，片方のローカル座標と重なるグローバル座標を，もう片方のローカル座標と重なるグローバル座標に変換する．
 */
class FromTo {
    constructor(from, to) {
        this.from = from;
        this.to = to;
    }
    /**
     *
     * @param global グローバル座標
     */
    apply(global) {
        // まず，ローカル座標の原点に対応するグローバル座標を作る．
        let d0 = global.dir.sub(this.from.dir);
        let p0 = global.point.sub(d0.apply(this.from.point));
        // 次に，行き先を構成する．
        let p = p0.add(d0.apply(this.to.point));
        let d = d0.add(this.to.dir);
        let pole = this.to.pole.apply(this.from.pole.apply(global.pole));
        return End_1.End.of(p, d, pole);
    }
    hasEffect() {
        return !(this.from.equal(this.to));
    }
}
exports.FromTo = FromTo;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Point_1 = __webpack_require__(2);
const Pole_1 = __webpack_require__(5);
const End_1 = __webpack_require__(0);
const Dir_1 = __webpack_require__(4);
class Pier {
    constructor(at) {
        this.name = "pier";
        this.height = 4;
        this.origin = this.normalizeEnd(at);
    }
    normalizeEnd(e) {
        return new End_1.End(e.point, this.normalizeDir(e.dir), Pole_1.Pole.Plus);
    }
    normalizeDir(d) {
        return new Dir_1.Dir(d.dir % 4);
    }
}
exports.Pier = Pier;
class MiniPier extends Pier {
    constructor() {
        super(...arguments);
        this.name = "mini pier";
        this.height = 1;
    }
}
exports.MiniPier = MiniPier;
class CustomPier extends Pier {
    constructor(at, floors) {
        super(at);
        this.floors = floors;
        this.name = "CustomPier";
    }
    endWithReplacingUp(end, up) {
        let p = new Point_1.Point(this.origin.point.single, this.origin.point.double, up);
        return new End_1.End(p, this.origin.dir, this.origin.pole);
    }
    equivalentPiers() {
        var piers = [];
        var current = 0;
        this.floors.sort().forEach(n => {
            // n階層になるまで建て続ける
            for (; current + 4 <= n; current += 4) {
                let e = this.endWithReplacingUp(this.origin, current);
                piers.push(new Pier(e));
            }
            for (; current + 1 <= n; current += 1) {
                let e = this.endWithReplacingUp(this.origin, current);
                piers.push(new MiniPier(e));
            }
            // n階になった．
        });
        return piers;
    }
}
exports.CustomPier = CustomPier;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Layout {
    constructor() {
        this.observer_ = null;
        this.rails_ = new Set();
    }
    get observer() {
        return this.observer_;
    }
    set observer(ob) {
        this.observer_ = ob;
    }
    get rails() {
        return this.rails_;
    }
    addPierForEndIfNeed(end) {
    }
    notifyAddRail(rail) {
        //        this.openEnds_.forEach((e, i) => console.log("%d, %s", i, this.openEnds_[i].toString()), this)
        this.observer.railAdded(this, rail);
    }
    add(rail) {
        this.rails.add(rail);
        this.notifyAddRail(rail);
    }
    notifyRemoveRail(rail) {
        this.observer.railRemoved(this, rail);
    }
    remove(rail) {
        this.notifyRemoveRail(rail);
        this.rails.delete(rail);
    }
}
exports.Layout = Layout;


/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = {"slope":{"normals":[0,0,-1,0,1,-4.47035e-8,0,0,1,0,1,0,0,0,-1,0,-1,0,0,0,1,0,-1,4.47035e-8,-1.32455e-8,-1,7.94726e-8,0,-1,0,0,-1,1.58946e-7,4.03208e-8,-1,4.47035e-8,1.77152e-8,-1,5.01934e-8,-0.0107379,0.999942,-4.4781e-8,-0.0107307,0.999942,0,0.0107498,-0.999942,0,0.0107427,-0.999942,4.46211e-8,0.0107498,-0.999942,5.00647e-8,0.0107427,-0.999942,4.46211e-8,0.0107498,-0.999942,0,-0.0107307,0.999942,0,-0.0107379,0.999942,-4.42281e-8,-0.0107307,0.999942,-5.03181e-8,-0.0376097,0.999293,-4.64187e-8,-0.0376099,0.999292,0,0.0376093,-0.999292,0,0.0376095,-0.999292,4.40328e-8,0.0376093,-0.999293,4.97621e-8,-0.0376099,0.999293,-4.96237e-8,-0.0641487,0.99794,-3.5317e-8,-0.0641492,0.99794,0,0.0641481,-0.99794,0,0.0641484,-0.99794,4.39754e-8,0.0641481,-0.99794,5.15455e-8,-0.0641487,0.99794,-3.5317e-8,-0.0641491,0.99794,-4.86118e-8,-0.0898462,0.995956,-2.64331e-8,-0.0898467,0.995956,0,0.0898453,-0.995956,4.65574e-8,0.0898458,-0.995956,4.38912e-8,0.0898453,-0.995956,4.4107e-8,0.0898458,-0.995956,4.38912e-8,0.0898453,-0.995956,0,-0.0898467,0.995956,-4.85005e-8,-0.114382,0.993437,-4.39395e-8,-0.114383,0.993437,0,0.114381,-0.993437,4.64576e-8,0.114382,-0.993437,3.50276e-8,0.114381,-0.993437,3.6677e-8,0.114381,-0.993437,4.64576e-8,-0.114382,0.993437,-4.39395e-8,-0.114383,0.993437,-2.60394e-8,-0.137467,0.990506,-6.13266e-8,-0.137467,0.990506,0,0.137466,-0.990507,4.63421e-8,0.137466,-0.990506,4.36604e-8,0.137466,-0.990507,5.12203e-8,0.137466,-0.990506,4.36604e-8,0.137466,-0.990507,4.63421e-8,-9.31276e-9,-1.62491e-7,-1,-0.158845,0.987304,-8.73143e-8,-0.158845,0.987303,0,0.158843,-0.987304,0,0.158844,-0.987304,5.22301e-8,0.158843,-0.987304,5.1082e-8,0.158843,-0.987304,0,-0.158845,0.987304,-9.60457e-8,9.31276e-9,1.62491e-7,1,-0.158845,0.987304,0,-5.97563e-9,-1.62618e-7,-1,-0.178298,0.983977,-1.2181e-7,-0.178299,0.983976,0,0.178297,-0.983977,0,0.178297,-0.983977,8.67698e-8,0.178297,-0.983977,5.09402e-8,0.178297,-0.983977,1.04124e-7,-0.178298,0.983976,-1.2181e-7,5.97563e-9,1.62618e-7,1,-0.178299,0.983976,0,-0.195645,0.980675,-1.04041e-7,-0.195646,0.980675,0,0.195644,-0.980675,0,0.195645,-0.980675,1.2109e-7,-2.7708e-9,-1.6263e-7,-1,0.195644,-0.980675,2.17723e-8,2.7708e-9,1.6263e-7,1,0.195645,-0.980675,1.2109e-7,-0.195646,0.980675,0,-0.195645,0.980675,-1.04041e-7,-0.195646,0.980675,0,-0.210739,0.977542,-5.18456e-8,-0.21074,0.977542,0,0.210738,-0.977543,0,0.210739,-0.977542,1.20724e-7,-1.70398e-10,-1.62631e-7,-1,0.210738,-0.977543,0,1.70398e-10,1.62631e-7,1,0.210739,-0.977542,1.20724e-7,-0.210739,0.977542,-5.18456e-8,-0.21074,0.977542,0,0,0,-1,-0.223467,0.974712,0,-3.77789e-9,3.25264e-7,1,-0.223467,0.974711,0,-4.04784e-8,-1.3157e-7,-1,0.223465,-0.974712,0,0,0,1,0.223466,-0.974712,6.87974e-8,0,0,-1,0.223465,-0.974712,0,0.223466,-0.974712,5.15981e-8,4.04784e-8,1.3157e-7,1,3.77789e-9,-3.25264e-7,-1,-0.223467,0.974712,0,0,0,1,-0.223467,0.974711,0,-0.233739,0.9723,0,-7.40608e-9,3.25156e-7,1,-0.233739,0.972299,0,5.57282e-8,-2.31817e-7,-1,0.233738,-0.9723,0,0.233739,-0.972299,0,0.233738,-0.9723,0,0.233738,-0.9723,0,-5.57282e-8,2.31817e-7,1,7.40608e-9,-3.25156e-7,-1,-0.233739,0.972299,0,-0.241493,0.970403,0,-0.241493,0.970403,0,-3.77381e-8,-1.32222e-7,-1,0.241492,-0.970403,0,1.32893e-7,3.30404e-8,1,0.241492,-0.970403,0,0.241492,-0.970403,0,-1.32893e-7,-3.30404e-8,-1,3.77381e-8,1.32222e-7,1,-0.241493,0.970403,0,-0.241493,0.970403,0,6.01189e-9,-1.62477e-7,-1,-0.246685,0.969096,0,-0.246685,0.969096,0,0.246684,-0.969096,0,0.246685,-0.969096,0,0.246684,-0.969096,0,0.246685,-0.969096,0,-0.246685,0.969096,0,-6.01189e-9,1.62477e-7,1,-0.246685,0.969096,0,6.48699e-9,-1.6245e-7,-1,-0.249287,0.96843,0,-0.249287,0.96843,0,0.249287,-0.96843,0,0.249287,-0.96843,0,0.249287,-0.96843,0,-0.249287,0.96843,0,-6.48699e-9,1.6245e-7,1,-0.249287,0.96843,0,-0.249287,0.96843,0,-0.249287,0.96843,0,0.249287,-0.96843,0,0.249287,-0.96843,0,6.48695e-9,-1.6245e-7,-1,0.249287,-0.96843,0,-6.48695e-9,1.6245e-7,1,0.249287,-0.96843,0,-0.249287,0.96843,0,-0.246685,0.969096,0,-0.246684,0.969096,0,0.246685,-0.969096,0,0.246685,-0.969096,0,6.01189e-9,-1.62477e-7,-1,0.246685,-0.969096,0,-6.01189e-9,1.62477e-7,1,-0.246684,0.969096,0,-0.241492,0.970403,0,-0.241492,0.970403,0,0.241493,-0.970403,0,0.241493,-0.970403,0,0.241493,-0.970403,0,-0.241492,0.970403,0,-0.233738,0.9723,0,-0.233738,0.9723,0,0.233739,-0.972299,0,0.233739,-0.972299,0,0.233739,-0.972299,0,-0.233738,0.9723,0,-0.223466,0.974712,0,-0.223465,0.974712,0,0.223467,-0.974712,0,0.223466,-0.974712,0,0.223467,-0.974712,0,-0.223465,0.974712,0,-1.70442e-10,-1.62631e-7,-1,-0.210739,0.977542,0,-0.210738,0.977543,0,0.21074,-0.977542,0,0.210739,-0.977542,0,0.21074,-0.977542,0,1.70442e-10,1.62631e-7,1,-0.210738,0.977543,0,-2.7708e-9,-1.6263e-7,-1,-0.195644,0.980675,0,-0.195644,0.980675,0,0.195646,-0.980675,0,0.195645,-0.980675,0,0.195646,-0.980675,0,-0.195644,0.980675,0,2.7708e-9,1.6263e-7,1,-0.178298,0.983976,0,-0.178297,0.983977,0,0.178299,-0.983976,0,0.178298,-0.983976,0,-5.97557e-9,-1.62618e-7,-1,5.97557e-9,1.62618e-7,1,0.178298,-0.983976,0,-0.178298,0.983976,0,-0.178297,0.983977,0,-0.158844,0.987304,0,-0.158843,0.987304,0,0.158845,-0.987304,0,0.158844,-0.987304,0,-9.31281e-9,-1.62491e-7,-1,9.31281e-9,1.62491e-7,1,0.158844,-0.987304,0,-0.158844,0.987304,0,-0.158843,0.987304,0,-0.137466,0.990506,0,2.53223e-8,3.24463e-7,1,-0.137466,0.990506,0,-5.29206e-8,-1.27694e-7,-1,0.137467,-0.990506,0,0.137467,-0.990506,0,0.137467,-0.990506,0,5.29206e-8,1.27694e-7,1,-2.53223e-8,-3.24463e-7,-1,-0.114382,0.993437,0,-7.2727e-8,6.31654e-7,1,-0.114381,0.993437,0,2.72728e-8,-2.36871e-7,-1,0.114383,-0.993437,0,0.114382,-0.993437,0,0.114383,-0.993437,0,-2.72728e-8,2.36871e-7,1,7.2727e-8,-6.31654e-7,-1,-0.114381,0.993437,0,-0.0898459,0.995956,0,4.11845e-8,3.22916e-7,1,-0.0898449,0.995956,0,2.14227e-8,-2.37473e-7,-1,0.0898471,-0.995956,0,0.0898461,-0.995956,0,0.089847,-0.995956,0,0.0898461,-0.995956,0,-2.14227e-8,2.37473e-7,1,-4.11845e-8,-3.22916e-7,-1,-0.0898449,0.995956,0,-0.0641487,0.99794,0,-0.0641478,0.99794,0,1.52955e-8,-2.37948e-7,-1,0.0641489,-0.99794,0,0.0641491,-0.99794,0,0.0641491,-0.99794,0,-1.52955e-8,2.37948e-7,1,-0.0641487,0.99794,0,-0.0376086,0.999292,0,-0.037609,0.999292,0,8.96753e-9,-2.38271e-7,-1,0.0376093,-0.999292,0,0.0376092,-0.999293,0,0.0376093,-0.999293,0,0.0376092,-0.999293,0,-8.96753e-9,2.38271e-7,1,-0.0376086,0.999292,0,-0.037609,0.999292,0,-0.0107433,0.999942,0,-0.01075,0.999942,0,2.56098e-9,-2.38422e-7,-1,0.0107313,-0.999942,0,0.0107382,-0.999942,0,0.0107313,-0.999942,0,0.0107382,-0.999942,0,-2.56098e-9,2.38422e-7,1,-0.0107433,0.999942,0,0,-2.38419e-7,-1,0,2.38419e-7,1,0,-1,0,0,-1,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0.164399,0.00000122813,-0.986394,0.164399,-0.00000305727,0.986394,-1.32454e-8,1,-7.94725e-8,0,1,0,0,1,-1.58944e-7,0,1,0,4.03206e-8,1,-4.47035e-8,1.77153e-8,1,-5.01934e-8,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-0.164399,0,0.986394,1,0,0,-0.164399,0.00000258692,-0.986394,0,1,0,0,1,0,0,1,0],"uvs":[],"vertices":[0.25,4,-9.5,0.25,1,-9.5,0.25,0.999999,-17.5,0.25,4,-17.5,0.25,4,-19,0.25,-4,-19,0.25,-4,-17.5,0.25,-1,-17.5,0.25,-1,-9.5,0.25,-4,-9.5,0.25,-4,9.5,0.25,-1,9.5,0.25,-0.999999,17.5,0.25,-4,17.5,0.25,-4,19,0.25,4,19,0.25,4,17.5,0.25,1,17.5,0.25,1,9.5,0.25,4,9.5,13.5,4,-9.5,13.5,1,-9.5,13.5,0.999999,-17.5,13.5,4,-17.5,13.5,4,-19,13.5,-4,-19,13.5,-4,-17.5,13.5,-1,-17.5,13.5,-1,-9.5,13.5,-4,-9.5,13.5,-4,9.5,13.5,-1,9.5,13.5,-0.999999,17.5,13.5,-4,17.5,13.5,-4,19,13.5,4,19,13.5,4,17.5,13.5,1,17.5,13.5,1,9.5,13.5,4,9.5,26.9034,4.14384,-9.5,26.9759,1.14471,-9.5,26.9759,1.14471,-17.5,26.9034,4.14384,-17.5,26.9034,4.14384,-19,27.0966,-3.85383,-19,27.0966,-3.85383,-17.5,27.0241,-0.854707,-17.5,27.0241,-0.854706,-9.5,27.0966,-3.85383,-9.5,27.0966,-3.85383,9.5,27.0241,-0.854705,9.5,27.0241,-0.854705,17.5,27.0966,-3.85383,17.5,27.0966,-3.85383,19,26.9034,4.14384,19,26.9034,4.14384,17.5,26.9759,1.14471,17.5,26.9759,1.14471,9.5,26.9034,4.14384,9.5,40.2961,4.64789,-9.5,40.449,1.65179,-9.5,40.449,1.65179,-17.5,40.2961,4.64789,-17.5,40.2961,4.64789,-19,40.7039,-3.34171,-19,40.7039,-3.34171,-17.5,40.551,-0.345608,-17.5,40.551,-0.345608,-9.5,40.7039,-3.34171,-9.5,40.7039,-3.34171,9.5,40.551,-0.345607,9.5,40.551,-0.345607,17.5,40.7039,-3.3417,17.5,40.7039,-3.3417,19,40.2961,4.64789,19,40.2961,4.64789,17.5,40.449,1.65179,17.5,40.449,1.65179,9.5,40.2961,4.64789,9.5,53.6914,5.50896,-9.5,53.9228,2.5179,-9.5,53.9228,2.5179,-17.5,53.6914,5.50896,-17.5,53.6914,5.50896,-19,54.3086,-2.46719,-19,54.3086,-2.46719,-17.5,54.0772,0.523865,-17.5,54.0772,0.523866,-9.5,54.3086,-2.46719,-9.5,54.3086,-2.46719,9.5,54.0772,0.523867,9.5,54.0772,0.523867,17.5,54.3086,-2.46719,17.5,54.3086,-2.46719,19,53.6914,5.50896,19,53.6914,5.50896,17.5,53.9228,2.5179,17.5,53.9228,2.5179,9.5,53.6914,5.50896,9.5,67.0907,6.71773,-9.5,67.3977,3.73348,-9.5,67.3977,3.73348,-17.5,67.0907,6.71773,-17.5,67.0907,6.71773,-19,67.9093,-1.24027,-19,67.9093,-1.24027,-17.5,67.6023,1.74398,-17.5,67.6023,1.74398,-9.5,67.9093,-1.24027,-9.5,67.9093,-1.24027,9.5,67.6023,1.74398,9.5,67.6023,1.74398,17.5,67.9093,-1.24027,17.5,67.9093,-1.24027,19,67.0907,6.71774,19,67.0907,6.71774,17.5,67.3977,3.73348,17.5,67.3977,3.73348,9.5,67.0907,6.71774,9.5,80.4953,8.26112,-9.5,80.8738,5.2851,-9.5,80.8738,5.2851,-17.5,80.4953,8.26112,-17.5,80.4953,8.26112,-19,81.5047,0.32506,-19,81.5047,0.32506,-17.5,81.1262,3.30108,-17.5,81.1262,3.30108,-9.5,81.5047,0.32506,-9.5,81.5047,0.325061,9.5,81.1262,3.30108,9.5,81.1262,3.30108,17.5,81.5047,0.325061,17.5,81.5047,0.325061,19,80.4953,8.26112,19,80.4953,8.26112,17.5,80.8738,5.2851,17.5,80.8738,5.2851,9.5,80.4953,8.26112,9.5,93.9062,10.1224,-9.5,94.3515,7.15559,-9.5,94.3515,7.15559,-17.5,93.9062,10.1224,-17.5,93.9062,10.1224,-19,95.0938,2.21099,-19,95.0938,2.21099,-17.5,94.6485,5.17775,-17.5,94.6485,5.17775,-9.5,95.0938,2.21099,-9.5,95.0938,2.211,9.5,94.6485,5.17775,9.5,94.6485,5.17776,17.5,95.0938,2.211,17.5,95.0938,2.211,19,93.9062,10.1224,19,93.9062,10.1224,17.5,94.3515,7.15559,17.5,94.3515,7.15559,9.5,93.9062,10.1224,9.5,107.324,12.2812,-9.5,107.831,9.32428,-9.5,107.831,9.32428,-17.5,107.324,12.2812,-17.5,107.324,12.2812,-19,108.676,4.39612,-19,108.676,4.39612,-17.5,108.169,7.35301,-17.5,108.169,7.35302,-9.5,108.676,4.39612,-9.5,108.676,4.39612,9.5,108.169,7.35302,9.5,108.169,7.35302,17.5,108.676,4.39612,17.5,108.676,4.39612,19,107.324,12.2812,19,107.324,12.2812,17.5,107.831,9.32428,17.5,107.831,9.32428,9.5,107.324,12.2812,9.5,120.751,14.7141,-9.5,121.313,11.7672,-9.5,121.313,11.7672,-17.5,120.751,14.7141,-17.5,120.751,14.7141,-19,122.249,6.85567,-19,122.249,6.85567,-17.5,121.687,9.80257,-17.5,121.687,9.80257,-9.5,122.249,6.85567,-9.5,122.249,6.85568,9.5,121.687,9.80257,9.5,121.687,9.80257,17.5,122.249,6.85568,17.5,122.249,6.85568,19,120.751,14.7141,19,120.751,14.7141,17.5,121.313,11.7672,17.5,121.313,11.7672,9.5,120.751,14.7141,9.5,134.186,17.3944,-9.5,134.796,14.4572,-9.5,134.796,14.4572,-17.5,134.186,17.3944,-17.5,134.186,17.3944,-19,135.814,9.56188,-19,135.814,9.56188,-17.5,135.204,12.4991,-17.5,135.204,12.4991,-9.5,135.814,9.56188,-9.5,135.814,9.56188,9.5,135.204,12.4991,9.5,135.204,12.4991,17.5,135.814,9.56188,17.5,135.814,9.56188,19,134.186,17.3944,19,134.186,17.3944,17.5,134.796,14.4572,17.5,134.796,14.4572,9.5,134.186,17.3944,9.5,147.63,20.2927,-9.5,148.283,17.3645,-9.5,148.283,17.3645,-17.5,147.63,20.2927,-17.5,147.63,20.2927,-19,149.37,12.4842,-19,149.37,12.4842,-17.5,148.717,15.4124,-17.5,148.717,15.4124,-9.5,149.37,12.4842,-9.5,149.37,12.4842,9.5,148.717,15.4124,9.5,148.717,15.4124,17.5,149.37,12.4842,17.5,149.37,12.4842,19,147.63,20.2927,19,147.63,20.2927,17.5,148.283,17.3645,17.5,148.283,17.3645,9.5,147.63,20.2927,9.5,161.084,23.3772,-9.5,161.771,20.4569,-9.5,161.771,20.4569,-17.5,161.084,23.3772,-17.5,161.084,23.3772,-19,162.916,15.5898,-19,162.916,15.5898,-17.5,162.229,18.5101,-17.5,162.229,18.5101,-9.5,162.916,15.5898,-9.5,162.916,15.5898,9.5,162.229,18.5101,9.5,162.229,18.5101,17.5,162.916,15.5898,17.5,162.916,15.5898,19,161.084,23.3772,19,161.084,23.3772,17.5,161.771,20.4569,17.5,161.771,20.4569,9.5,161.084,23.3772,9.5,174.548,26.6139,-9.5,175.262,23.7001,-9.5,175.262,23.7001,-17.5,174.548,26.6139,-17.5,174.548,26.6139,-19,176.452,18.8439,-19,176.452,18.8439,-17.5,175.738,21.7576,-17.5,175.738,21.7576,-9.5,176.452,18.8439,-9.5,176.452,18.8439,9.5,175.738,21.7576,9.5,175.738,21.7576,17.5,176.452,18.8439,17.5,176.452,18.8439,19,174.548,26.6139,19,174.548,26.6139,17.5,175.262,23.7001,17.5,175.262,23.7001,9.5,174.548,26.6139,9.5,188.022,29.967,-9.5,188.755,27.0581,-9.5,188.755,27.0581,-17.5,188.022,29.967,-17.5,188.022,29.967,-19,189.978,22.2099,-19,189.978,22.2099,-17.5,189.245,25.1188,-17.5,189.245,25.1188,-9.5,189.978,22.2099,-9.5,189.978,22.2099,9.5,189.245,25.1188,9.5,189.245,25.1188,17.5,189.978,22.2099,17.5,189.978,22.2099,19,188.022,29.967,19,188.022,29.967,17.5,188.755,27.0581,17.5,188.755,27.0581,9.5,188.022,29.967,9.5,201.506,33.3995,-9.5,202.252,30.4936,-9.5,202.252,30.4936,-17.5,201.506,33.3995,-17.5,201.506,33.3995,-19,203.494,25.6503,-19,203.494,25.6503,-17.5,202.748,28.5563,-17.5,202.748,28.5563,-9.5,203.494,25.6503,-9.5,203.494,25.6503,9.5,202.748,28.5563,9.5,202.748,28.5563,17.5,203.494,25.6503,17.5,203.494,25.6503,19,201.506,33.3995,19,201.506,33.3995,17.5,202.252,30.4936,17.5,202.252,30.4936,9.5,201.506,33.3995,9.5,215.001,36.8733,-9.5,215.75,33.9683,-9.5,215.75,33.9683,-17.5,215.001,36.8733,-17.5,215.001,36.8733,-19,216.999,29.1267,-19,216.999,29.1267,-17.5,216.25,32.0317,-17.5,216.25,32.0317,-9.5,216.999,29.1267,-9.5,216.999,29.1267,9.5,216.25,32.0317,9.5,216.25,32.0317,17.5,216.999,29.1267,17.5,216.999,29.1267,19,215.001,36.8733,19,215.001,36.8733,17.5,215.75,33.9683,17.5,215.75,33.9683,9.5,215.001,36.8733,9.5,228.506,40.3497,-9.5,229.252,37.4437,-9.5,229.252,37.4437,-17.5,228.506,40.3497,-17.5,228.506,40.3497,-19,230.494,32.6005,-19,230.494,32.6005,-17.5,229.748,35.5064,-17.5,229.748,35.5064,-9.5,230.494,32.6005,-9.5,230.494,32.6005,9.5,229.748,35.5064,9.5,229.748,35.5064,17.5,230.494,32.6005,17.5,230.494,32.6005,19,228.506,40.3497,19,228.506,40.3497,17.5,229.252,37.4437,17.5,229.252,37.4437,9.5,228.506,40.3497,9.5,242.022,43.7901,-9.5,242.755,40.8812,-9.5,242.755,40.8812,-17.5,242.022,43.7901,-17.5,242.022,43.7901,-19,243.978,36.033,-19,243.978,36.033,-17.5,243.245,38.9419,-17.5,243.245,38.9419,-9.5,243.978,36.033,-9.5,243.978,36.033,9.5,243.245,38.9419,9.5,243.245,38.9419,17.5,243.978,36.033,17.5,243.978,36.033,19,242.022,43.7901,19,242.022,43.7901,17.5,242.755,40.8812,17.5,242.755,40.8812,9.5,242.022,43.7901,9.5,255.548,47.1561,-9.5,256.262,44.2424,-9.5,256.262,44.2424,-17.5,255.548,47.1561,-17.5,255.548,47.1561,-19,257.452,39.3861,-19,257.452,39.3861,-17.5,256.738,42.2999,-17.5,256.738,42.2999,-9.5,257.452,39.3861,-9.5,257.452,39.3861,9.5,256.738,42.2999,9.5,256.738,42.2999,17.5,257.452,39.3861,17.5,257.452,39.3861,19,255.548,47.1561,19,255.548,47.1561,17.5,256.262,44.2424,17.5,256.262,44.2424,9.5,255.548,47.1561,9.5,269.084,50.4102,-9.5,269.771,47.4899,-9.5,269.771,47.4899,-17.5,269.084,50.4102,-17.5,269.084,50.4102,-19,270.916,42.6228,-19,270.916,42.6228,-17.5,270.229,45.5431,-17.5,270.229,45.5431,-9.5,270.916,42.6228,-9.5,270.916,42.6228,9.5,270.229,45.5431,9.5,270.229,45.5431,17.5,270.916,42.6228,17.5,270.916,42.6228,19,269.084,50.4102,19,269.084,50.4102,17.5,269.771,47.4899,17.5,269.771,47.4899,9.5,269.084,50.4102,9.5,282.63,53.5158,-9.5,283.283,50.5876,-9.5,283.283,50.5876,-17.5,282.63,53.5158,-17.5,282.63,53.5158,-19,284.37,45.7073,-19,284.37,45.7073,-17.5,283.717,48.6355,-17.5,283.717,48.6355,-9.5,284.37,45.7073,-9.5,284.37,45.7073,9.5,283.717,48.6355,9.5,283.717,48.6355,17.5,284.37,45.7073,17.5,284.37,45.7073,19,282.63,53.5158,19,282.63,53.5158,17.5,283.283,50.5876,17.5,283.283,50.5876,9.5,282.63,53.5158,9.5,296.186,56.4381,-9.5,296.796,53.5009,-9.5,296.796,53.5009,-17.5,296.186,56.4381,-17.5,296.186,56.4381,-19,297.814,48.6056,-19,297.814,48.6056,-17.5,297.204,51.5428,-17.5,297.204,51.5428,-9.5,297.814,48.6056,-9.5,297.814,48.6056,9.5,297.204,51.5428,9.5,297.204,51.5428,17.5,297.814,48.6056,17.5,297.814,48.6056,19,296.186,56.4381,19,296.186,56.4381,17.5,296.796,53.5009,17.5,296.796,53.5009,9.5,296.186,56.4381,9.5,309.751,59.1443,-9.5,310.313,56.1974,-9.5,310.313,56.1974,-17.5,309.751,59.1443,-17.5,309.751,59.1443,-19,311.249,51.2859,-19,311.249,51.2859,-17.5,310.687,54.2328,-17.5,310.687,54.2328,-9.5,311.249,51.2859,-9.5,311.249,51.2859,9.5,310.687,54.2328,9.5,310.687,54.2328,17.5,311.249,51.2859,17.5,311.249,51.2859,19,309.751,59.1443,19,309.751,59.1443,17.5,310.313,56.1974,17.5,310.313,56.1974,9.5,309.751,59.1443,9.5,323.324,61.6039,-9.5,323.831,58.647,-9.5,323.831,58.647,-17.5,323.324,61.6039,-17.5,323.324,61.6039,-19,324.676,53.7188,-19,324.676,53.7188,-17.5,324.169,56.6757,-17.5,324.169,56.6757,-9.5,324.676,53.7188,-9.5,324.676,53.7188,9.5,324.169,56.6757,9.5,324.169,56.6757,17.5,324.676,53.7188,17.5,324.676,53.7188,19,323.324,61.6039,19,323.324,61.6039,17.5,323.831,58.647,17.5,323.831,58.647,9.5,323.324,61.6039,9.5,336.906,63.789,-9.5,337.352,60.8222,-9.5,337.352,60.8222,-17.5,336.906,63.789,-17.5,336.906,63.789,-19,338.094,55.8776,-19,338.094,55.8776,-17.5,337.648,58.8444,-17.5,337.648,58.8444,-9.5,338.094,55.8776,-9.5,338.094,55.8776,9.5,337.648,58.8444,9.5,337.648,58.8444,17.5,338.094,55.8776,17.5,338.094,55.8776,19,336.906,63.789,19,336.906,63.789,17.5,337.352,60.8222,17.5,337.352,60.8222,9.5,336.906,63.789,9.5,350.495,65.6749,-9.5,350.874,62.6989,-9.5,350.874,62.6989,-17.5,350.495,65.6749,-17.5,350.495,65.6749,-19,351.505,57.7389,-19,351.505,57.7389,-17.5,351.126,60.7149,-17.5,351.126,60.7149,-9.5,351.505,57.7389,-9.5,351.505,57.7389,9.5,351.126,60.7149,9.5,351.126,60.7149,17.5,351.505,57.7389,17.5,351.505,57.7389,19,350.495,65.6749,19,350.495,65.6749,17.5,350.874,62.6989,17.5,350.874,62.6989,9.5,350.495,65.6749,9.5,364.091,67.2403,-9.5,364.398,64.256,-9.5,364.398,64.256,-17.5,364.091,67.2403,-17.5,364.091,67.2403,-19,364.909,59.2823,-19,364.909,59.2823,-17.5,364.602,62.2665,-17.5,364.602,62.2665,-9.5,364.909,59.2823,-9.5,364.909,59.2823,9.5,364.602,62.2665,9.5,364.602,62.2665,17.5,364.909,59.2823,17.5,364.909,59.2823,19,364.091,67.2403,19,364.091,67.2403,17.5,364.398,64.256,17.5,364.398,64.256,9.5,364.091,67.2403,9.5,377.691,68.4672,-9.5,377.923,65.4761,-9.5,377.923,65.4761,-17.5,377.691,68.4672,-17.5,377.691,68.4672,-19,378.309,60.491,-19,378.309,60.491,-17.5,378.077,63.4821,-17.5,378.077,63.4821,-9.5,378.309,60.491,-9.5,378.309,60.491,9.5,378.077,63.4821,9.5,378.077,63.4821,17.5,378.309,60.491,17.5,378.309,60.491,19,377.691,68.4672,19,377.691,68.4672,17.5,377.923,65.4761,17.5,377.923,65.4761,9.5,377.691,68.4672,9.5,391.296,69.3417,-9.5,391.449,66.3456,-9.5,391.449,66.3456,-17.5,391.296,69.3417,-17.5,391.296,69.3417,-19,391.704,61.3521,-19,391.704,61.3521,-17.5,391.551,64.3482,-17.5,391.551,64.3482,-9.5,391.704,61.3521,-9.5,391.704,61.3521,9.5,391.551,64.3482,9.5,391.551,64.3482,17.5,391.704,61.3521,17.5,391.704,61.3521,19,391.296,69.3417,19,391.296,69.3417,17.5,391.449,66.3456,17.5,391.449,66.3456,9.5,391.296,69.3417,9.5,404.903,69.8538,-9.5,404.976,66.8547,-9.5,404.976,66.8547,-17.5,404.903,69.8538,-17.5,404.903,69.8538,-19,405.097,61.8562,-19,405.097,61.8562,-17.5,405.024,64.8553,-17.5,405.024,64.8553,-9.5,405.097,61.8562,-9.5,405.097,61.8562,9.5,405.024,64.8553,9.5,405.024,64.8553,17.5,405.097,61.8562,17.5,405.097,61.8562,19,404.903,69.8538,19,404.903,69.8538,17.5,404.976,66.8547,17.5,404.976,66.8547,9.5,404.903,69.8538,9.5,418.5,70,-9.5,418.5,67,-9.5,418.5,67,-17.5,418.5,70,-17.5,418.5,70,-19,418.5,62,-19,418.5,62,-17.5,418.5,65,-17.5,418.5,65,-9.5,418.5,62,-9.5,418.5,62,9.5,418.5,65,9.5,418.5,65,17.5,418.5,62,17.5,418.5,62,19,418.5,70,19,418.5,70,17.5,418.5,67,17.5,418.5,67,9.5,418.5,70,9.5,431.75,70,-9.5,431.75,67,-9.5,431.75,67,-17.5,431.75,70,-17.5,431.75,70,-19,431.75,62,-19,431.75,62,-17.5,431.75,65,-17.5,431.75,65,-9.5,431.75,62,-9.5,431.75,62,9.5,431.75,65,9.5,431.75,65,17.5,431.75,62,17.5,431.75,62,19,431.75,70,19,431.75,70,17.5,431.75,67,17.5,431.75,67,9.5,431.75,70,9.5,0.25,-4,6.49999,0.25,4,6.50001,0.25,4,-6.49999,0.25,-4,-6.50001,9.25,-4,-8.00001,9.25,-4,8,9.25,4,-7.99999,9.25,4,8,431.75,62,-6.00001,431.75,70,-5.99999,431.75,62,6,431.75,70,6,440.75,70,-7.49999,440.75,62,-7.50001,440.75,62,7.5,440.75,70,7.5],"faces":[33,0,20,21,1,0,0,0,0,33,1,21,22,2,1,1,1,1,33,2,22,23,3,2,2,2,2,33,3,23,24,4,3,3,3,3,33,4,24,25,5,4,4,4,4,33,5,25,26,6,5,5,5,5,33,6,26,27,7,6,6,6,6,33,7,27,28,8,7,7,7,7,33,8,28,29,9,0,0,0,0,33,10,30,31,11,2,2,2,2,33,11,31,32,12,7,7,7,7,33,12,32,33,13,0,0,0,0,33,13,33,34,14,5,5,5,5,33,14,34,35,15,6,6,6,6,33,15,35,36,16,3,3,3,3,33,16,36,37,17,4,4,4,4,33,17,37,38,18,1,1,1,1,33,18,38,39,19,2,2,2,2,32,10,660,665,8,8,8,32,664,663,9,9,9,9,32,30,10,665,10,10,10,32,664,9,29,9,9,9,32,30,665,664,11,11,11,32,664,29,30,12,12,12,33,20,40,41,21,4,4,4,4,33,21,41,42,22,13,13,13,13,33,22,42,43,23,6,6,6,6,33,23,43,44,24,14,14,14,14,33,24,44,45,25,4,4,4,4,33,25,45,46,26,15,15,15,15,33,26,46,47,27,2,2,2,2,33,27,47,48,28,16,16,16,16,33,28,48,49,29,4,4,4,4,33,29,49,50,30,17,17,17,17,33,30,50,51,31,6,6,6,6,33,31,51,52,32,18,18,18,18,33,32,52,53,33,4,4,4,4,33,33,53,54,34,19,19,19,19,33,34,54,55,35,6,6,6,6,33,35,55,56,36,20,20,20,20,33,36,56,57,37,4,4,4,4,33,37,57,58,38,21,21,21,21,33,38,58,59,39,6,6,6,6,33,39,59,40,20,22,22,22,22,33,40,60,61,41,4,4,4,4,33,41,61,62,42,23,23,23,23,33,42,62,63,43,6,6,6,6,33,43,63,64,44,24,24,24,24,33,44,64,65,45,4,4,4,4,33,45,65,66,46,25,25,25,25,33,46,66,67,47,6,6,6,6,33,47,67,68,48,26,26,26,26,33,48,68,69,49,4,4,4,4,33,49,69,70,50,27,27,27,27,33,50,70,71,51,6,6,6,6,33,51,71,72,52,26,26,26,26,33,52,72,73,53,4,4,4,4,33,53,73,74,54,25,25,25,25,33,54,74,75,55,6,6,6,6,33,55,75,76,56,24,24,24,24,33,56,76,77,57,4,4,4,4,33,57,77,78,58,23,23,23,23,33,58,78,79,59,6,6,6,6,33,59,79,60,40,28,28,28,28,33,60,80,81,61,4,4,4,4,33,61,81,82,62,29,29,29,29,33,62,82,83,63,6,6,6,6,33,63,83,84,64,30,30,30,30,33,64,84,85,65,4,4,4,4,33,65,85,86,66,31,31,31,31,33,66,86,87,67,6,6,6,6,33,67,87,88,68,32,32,32,32,33,68,88,89,69,4,4,4,4,33,69,89,90,70,33,33,33,33,33,70,90,91,71,6,6,6,6,33,71,91,92,72,32,32,32,32,33,72,92,93,73,4,4,4,4,33,73,93,94,74,31,31,31,31,33,74,94,95,75,6,6,6,6,33,75,95,96,76,30,30,30,30,33,76,96,97,77,0,0,0,0,33,77,97,98,78,34,34,34,34,33,78,98,99,79,6,6,6,6,33,79,99,80,60,35,35,35,35,33,80,100,101,81,4,4,4,4,33,81,101,102,82,36,36,36,36,33,82,102,103,83,6,6,6,6,33,83,103,104,84,37,37,37,37,33,84,104,105,85,4,4,4,4,33,85,105,106,86,38,38,38,38,33,86,106,107,87,6,6,6,6,33,87,107,108,88,39,39,39,39,33,88,108,109,89,4,4,4,4,33,89,109,110,90,40,40,40,40,33,90,110,111,91,6,6,6,6,33,91,111,112,92,41,41,41,41,33,92,112,113,93,4,4,4,4,33,93,113,114,94,42,42,42,42,33,94,114,115,95,6,6,6,6,33,95,115,116,96,37,37,37,37,33,96,116,117,97,4,4,4,4,33,97,117,118,98,36,36,36,36,33,98,118,119,99,6,6,6,6,33,99,119,100,80,43,43,43,43,33,100,120,121,101,4,4,4,4,33,101,121,122,102,44,44,44,44,33,102,122,123,103,6,6,6,6,33,103,123,124,104,45,45,45,45,33,104,124,125,105,0,0,0,0,33,105,125,126,106,46,46,46,46,33,106,126,127,107,6,6,6,6,33,107,127,128,108,47,47,47,47,33,108,128,129,109,4,4,4,4,33,109,129,130,110,48,48,48,48,33,110,130,131,111,6,6,6,6,33,111,131,132,112,47,47,47,47,33,112,132,133,113,4,4,4,4,33,113,133,134,114,49,49,49,49,33,114,134,135,115,2,2,2,2,33,115,135,136,116,45,45,45,45,33,116,136,137,117,4,4,4,4,33,117,137,138,118,50,50,50,50,33,118,138,139,119,6,6,6,6,33,119,139,120,100,51,51,51,51,33,120,140,141,121,4,4,4,4,33,121,141,142,122,52,52,52,52,33,122,142,143,123,6,6,6,6,33,123,143,144,124,53,53,53,53,33,124,144,145,125,4,4,4,4,33,125,145,146,126,54,54,54,54,33,126,146,147,127,6,6,6,6,33,127,147,148,128,55,55,55,55,33,128,148,149,129,4,4,4,4,33,129,149,150,130,56,56,56,56,33,130,150,151,131,6,6,6,6,33,131,151,152,132,57,57,57,57,33,132,152,153,133,4,4,4,4,33,133,153,154,134,58,58,58,58,33,134,154,155,135,6,6,6,6,33,135,155,156,136,53,53,53,53,33,136,156,157,137,4,4,4,4,33,137,157,158,138,52,52,52,52,33,138,158,159,139,6,6,6,6,33,139,159,140,120,53,53,53,53,33,140,160,161,141,59,59,59,59,33,141,161,162,142,60,60,60,60,33,142,162,163,143,6,6,6,6,33,143,163,164,144,61,61,61,61,33,144,164,165,145,4,4,4,4,33,145,165,166,146,62,62,62,62,33,146,166,167,147,6,6,6,6,33,147,167,168,148,63,63,63,63,33,148,168,169,149,4,4,4,4,33,149,169,170,150,64,64,64,64,33,150,170,171,151,6,6,6,6,33,151,171,172,152,63,63,63,63,33,152,172,173,153,4,4,4,4,33,153,173,174,154,65,65,65,65,33,154,174,175,155,6,6,6,6,33,155,175,176,156,61,61,61,61,33,156,176,177,157,4,4,4,4,33,157,177,178,158,66,66,66,66,33,158,178,179,159,67,67,67,67,33,159,179,160,140,68,68,68,68,33,160,180,181,161,69,69,69,69,33,161,181,182,162,70,70,70,70,33,162,182,183,163,6,6,6,6,33,163,183,184,164,71,71,71,71,33,164,184,185,165,4,4,4,4,33,165,185,186,166,72,72,72,72,33,166,186,187,167,6,6,6,6,33,167,187,188,168,73,73,73,73,33,168,188,189,169,0,0,0,0,33,169,189,190,170,74,74,74,74,33,170,190,191,171,6,6,6,6,33,171,191,192,172,75,75,75,75,33,172,192,193,173,4,4,4,4,33,173,193,194,174,72,72,72,72,33,174,194,195,175,6,6,6,6,33,175,195,196,176,71,71,71,71,33,176,196,197,177,4,4,4,4,33,177,197,198,178,76,76,76,76,33,178,198,199,179,77,77,77,77,33,179,199,180,160,78,78,78,78,33,180,200,201,181,4,4,4,4,33,181,201,202,182,79,79,79,79,33,182,202,203,183,6,6,6,6,33,183,203,204,184,80,80,80,80,33,184,204,205,185,4,4,4,4,33,185,205,206,186,81,81,81,81,33,186,206,207,187,6,6,6,6,33,187,207,208,188,82,82,82,82,33,188,208,209,189,83,83,83,83,33,189,209,210,190,84,84,84,84,33,190,210,211,191,85,85,85,85,33,191,211,212,192,86,86,86,86,33,192,212,213,193,4,4,4,4,33,193,213,214,194,81,81,81,81,33,194,214,215,195,2,2,2,2,33,195,215,216,196,87,87,87,87,33,196,216,217,197,4,4,4,4,33,197,217,218,198,88,88,88,88,33,198,218,219,199,6,6,6,6,33,199,219,200,180,89,89,89,89,33,200,220,221,201,4,4,4,4,33,201,221,222,202,90,90,90,90,33,202,222,223,203,6,6,6,6,33,203,223,224,204,91,91,91,91,33,204,224,225,205,4,4,4,4,33,205,225,226,206,92,92,92,92,33,206,226,227,207,6,6,6,6,33,207,227,228,208,93,93,93,93,33,208,228,229,209,94,94,94,94,33,209,229,230,210,95,95,95,95,33,210,230,231,211,96,96,96,96,33,211,231,232,212,97,97,97,97,33,212,232,233,213,4,4,4,4,33,213,233,234,214,92,92,92,92,33,214,234,235,215,2,2,2,2,33,215,235,236,216,91,91,91,91,33,216,236,237,217,4,4,4,4,33,217,237,238,218,98,98,98,98,33,218,238,239,219,6,6,6,6,33,219,239,220,200,99,99,99,99,33,220,240,241,221,100,100,100,100,33,221,241,242,222,101,101,101,101,33,222,242,243,223,102,102,102,102,33,223,243,244,224,103,103,103,103,33,224,244,245,225,104,104,104,104,33,225,245,246,226,105,105,105,105,33,226,246,247,227,106,106,106,106,33,227,247,248,228,107,107,107,107,33,228,248,249,229,108,108,108,108,33,229,249,250,230,109,109,109,109,33,230,250,251,231,106,106,106,106,33,231,251,252,232,110,110,110,110,33,232,252,253,233,108,108,108,108,33,233,253,254,234,105,105,105,105,33,234,254,255,235,111,111,111,111,33,235,255,256,236,103,103,103,103,33,236,256,257,237,112,112,112,112,33,237,257,258,238,113,113,113,113,33,238,258,259,239,114,114,114,114,33,239,259,240,220,115,115,115,115,33,240,260,261,241,108,108,108,108,33,241,261,262,242,116,116,116,116,33,242,262,263,243,117,117,117,117,33,243,263,264,244,118,118,118,118,33,244,264,265,245,119,119,119,119,33,245,265,266,246,120,120,120,120,33,246,266,267,247,106,106,106,106,33,247,267,268,248,121,121,121,121,33,248,268,269,249,108,108,108,108,33,249,269,270,250,122,122,122,122,33,250,270,271,251,106,106,106,106,33,251,271,272,252,121,121,121,121,33,252,272,273,253,100,100,100,100,33,253,273,274,254,123,123,123,123,33,254,274,275,255,124,124,124,124,33,255,275,276,256,118,118,118,118,33,256,276,277,257,125,125,125,125,33,257,277,278,258,116,116,116,116,33,258,278,279,259,106,106,106,106,33,259,279,260,240,126,126,126,126,33,260,280,281,261,108,108,108,108,33,261,281,282,262,127,127,127,127,33,262,282,283,263,106,106,106,106,33,263,283,284,264,128,128,128,128,33,264,284,285,265,129,129,129,129,33,265,285,286,266,130,130,130,130,33,266,286,287,267,131,131,131,131,33,267,287,288,268,132,132,132,132,33,268,288,289,269,108,108,108,108,33,269,289,290,270,133,133,133,133,33,270,290,291,271,106,106,106,106,33,271,291,292,272,132,132,132,132,33,272,292,293,273,134,134,134,134,33,273,293,294,274,130,130,130,130,33,274,294,295,275,135,135,135,135,33,275,295,296,276,128,128,128,128,33,276,296,297,277,108,108,108,108,33,277,297,298,278,136,136,136,136,33,278,298,299,279,106,106,106,106,33,279,299,280,260,137,137,137,137,33,280,300,301,281,138,138,138,138,33,281,301,302,282,139,139,139,139,33,282,302,303,283,106,106,106,106,33,283,303,304,284,140,140,140,140,33,284,304,305,285,4,4,4,4,33,285,305,306,286,141,141,141,141,33,286,306,307,287,106,106,106,106,33,287,307,308,288,142,142,142,142,33,288,308,309,289,108,108,108,108,33,289,309,310,290,143,143,143,143,33,290,310,311,291,106,106,106,106,33,291,311,312,292,144,144,144,144,33,292,312,313,293,108,108,108,108,33,293,313,314,294,141,141,141,141,33,294,314,315,295,6,6,6,6,33,295,315,316,296,140,140,140,140,33,296,316,317,297,108,108,108,108,33,297,317,318,298,145,145,145,145,33,298,318,319,299,146,146,146,146,33,299,319,300,280,147,147,147,147,33,300,320,321,301,148,148,148,148,33,301,321,322,302,149,149,149,149,33,302,322,323,303,106,106,106,106,33,303,323,324,304,150,150,150,150,33,304,324,325,305,4,4,4,4,33,305,325,326,306,151,151,151,151,33,306,326,327,307,106,106,106,106,33,307,327,328,308,152,152,152,152,33,308,328,329,309,108,108,108,108,33,309,329,330,310,151,151,151,151,33,310,330,331,311,106,106,106,106,33,311,331,332,312,153,153,153,153,33,312,332,333,313,108,108,108,108,33,313,333,334,314,151,151,151,151,33,314,334,335,315,6,6,6,6,33,315,335,336,316,150,150,150,150,33,316,336,337,317,108,108,108,108,33,317,337,338,318,154,154,154,154,33,318,338,339,319,155,155,155,155,33,319,339,320,300,156,156,156,156,33,320,340,341,321,108,108,108,108,33,321,341,342,322,157,157,157,157,33,322,342,343,323,106,106,106,106,33,323,343,344,324,158,158,158,158,33,324,344,345,325,4,4,4,4,33,325,345,346,326,159,159,159,159,33,326,346,347,327,106,106,106,106,33,327,347,348,328,160,160,160,160,33,328,348,349,329,161,161,161,161,33,329,349,350,330,162,162,162,162,33,330,350,351,331,163,163,163,163,33,331,351,352,332,164,164,164,164,33,332,352,353,333,108,108,108,108,33,333,353,354,334,159,159,159,159,33,334,354,355,335,6,6,6,6,33,335,355,356,336,158,158,158,158,33,336,356,357,337,108,108,108,108,33,337,357,358,338,157,157,157,157,33,338,358,359,339,106,106,106,106,33,339,359,340,320,165,165,165,165,33,340,360,361,341,108,108,108,108,33,341,361,362,342,166,166,166,166,33,342,362,363,343,106,106,106,106,33,343,363,364,344,167,167,167,167,33,344,364,365,345,4,4,4,4,33,345,365,366,346,168,168,168,168,33,346,366,367,347,106,106,106,106,33,347,367,368,348,169,169,169,169,33,348,368,369,349,170,170,170,170,33,349,369,370,350,171,171,171,171,33,350,370,371,351,172,172,172,172,33,351,371,372,352,169,169,169,169,33,352,372,373,353,108,108,108,108,33,353,373,374,354,168,168,168,168,33,354,374,375,355,6,6,6,6,33,355,375,376,356,167,167,167,167,33,356,376,377,357,108,108,108,108,33,357,377,378,358,166,166,166,166,33,358,378,379,359,106,106,106,106,33,359,379,360,340,173,173,173,173,33,360,380,381,361,108,108,108,108,33,361,381,382,362,174,174,174,174,33,362,382,383,363,106,106,106,106,33,363,383,384,364,175,175,175,175,33,364,384,385,365,4,4,4,4,33,365,385,386,366,176,176,176,176,33,366,386,387,367,106,106,106,106,33,367,387,388,368,177,177,177,177,33,368,388,389,369,108,108,108,108,33,369,389,390,370,178,178,178,178,33,370,390,391,371,106,106,106,106,33,371,391,392,372,177,177,177,177,33,372,392,393,373,108,108,108,108,33,373,393,394,374,176,176,176,176,33,374,394,395,375,6,6,6,6,33,375,395,396,376,175,175,175,175,33,376,396,397,377,108,108,108,108,33,377,397,398,378,174,174,174,174,33,378,398,399,379,106,106,106,106,33,379,399,380,360,179,179,179,179,33,380,400,401,381,108,108,108,108,33,381,401,402,382,180,180,180,180,33,382,402,403,383,106,106,106,106,33,383,403,404,384,181,181,181,181,33,384,404,405,385,4,4,4,4,33,385,405,406,386,182,182,182,182,33,386,406,407,387,106,106,106,106,33,387,407,408,388,183,183,183,183,33,388,408,409,389,108,108,108,108,33,389,409,410,390,184,184,184,184,33,390,410,411,391,106,106,106,106,33,391,411,412,392,183,183,183,183,33,392,412,413,393,108,108,108,108,33,393,413,414,394,182,182,182,182,33,394,414,415,395,6,6,6,6,33,395,415,416,396,181,181,181,181,33,396,416,417,397,108,108,108,108,33,397,417,418,398,180,180,180,180,33,398,418,419,399,106,106,106,106,33,399,419,400,380,185,185,185,185,33,400,420,421,401,108,108,108,108,33,401,421,422,402,186,186,186,186,33,402,422,423,403,106,106,106,106,33,403,423,424,404,187,187,187,187,33,404,424,425,405,4,4,4,4,33,405,425,426,406,188,188,188,188,33,406,426,427,407,106,106,106,106,33,407,427,428,408,189,189,189,189,33,408,428,429,409,108,108,108,108,33,409,429,430,410,190,190,190,190,33,410,430,431,411,106,106,106,106,33,411,431,432,412,189,189,189,189,33,412,432,433,413,108,108,108,108,33,413,433,434,414,188,188,188,188,33,414,434,435,415,6,6,6,6,33,415,435,436,416,187,187,187,187,33,416,436,437,417,108,108,108,108,33,417,437,438,418,186,186,186,186,33,418,438,439,419,106,106,106,106,33,419,439,420,400,191,191,191,191,33,420,440,441,421,192,192,192,192,33,421,441,442,422,193,193,193,193,33,422,442,443,423,2,2,2,2,33,423,443,444,424,194,194,194,194,33,424,444,445,425,4,4,4,4,33,425,445,446,426,195,195,195,195,33,426,446,447,427,6,6,6,6,33,427,447,448,428,196,196,196,196,33,428,448,449,429,4,4,4,4,33,429,449,450,430,197,197,197,197,33,430,450,451,431,6,6,6,6,33,431,451,452,432,196,196,196,196,33,432,452,453,433,4,4,4,4,33,433,453,454,434,195,195,195,195,33,434,454,455,435,6,6,6,6,33,435,455,456,436,194,194,194,194,33,436,456,457,437,0,0,0,0,33,437,457,458,438,193,193,193,193,33,438,458,459,439,198,198,198,198,33,439,459,440,420,199,199,199,199,33,440,460,461,441,200,200,200,200,33,441,461,462,442,201,201,201,201,33,442,462,463,443,6,6,6,6,33,443,463,464,444,202,202,202,202,33,444,464,465,445,4,4,4,4,33,445,465,466,446,203,203,203,203,33,446,466,467,447,6,6,6,6,33,447,467,468,448,204,204,204,204,33,448,468,469,449,4,4,4,4,33,449,469,470,450,205,205,205,205,33,450,470,471,451,6,6,6,6,33,451,471,472,452,204,204,204,204,33,452,472,473,453,4,4,4,4,33,453,473,474,454,203,203,203,203,33,454,474,475,455,6,6,6,6,33,455,475,476,456,202,202,202,202,33,456,476,477,457,4,4,4,4,33,457,477,478,458,206,206,206,206,33,458,478,479,459,207,207,207,207,33,459,479,460,440,202,202,202,202,33,460,480,481,461,4,4,4,4,33,461,481,482,462,208,208,208,208,33,462,482,483,463,6,6,6,6,33,463,483,484,464,209,209,209,209,33,464,484,485,465,4,4,4,4,33,465,485,486,466,210,210,210,210,33,466,486,487,467,6,6,6,6,33,467,487,488,468,211,211,211,211,33,468,488,489,469,212,212,212,212,33,469,489,490,470,210,210,210,210,33,470,490,491,471,213,213,213,213,33,471,491,492,472,214,214,214,214,33,472,492,493,473,4,4,4,4,33,473,493,494,474,210,210,210,210,33,474,494,495,475,6,6,6,6,33,475,495,496,476,209,209,209,209,33,476,496,497,477,4,4,4,4,33,477,497,498,478,215,215,215,215,33,478,498,499,479,6,6,6,6,33,479,499,480,460,216,216,216,216,33,480,500,501,481,4,4,4,4,33,481,501,502,482,217,217,217,217,33,482,502,503,483,6,6,6,6,33,483,503,504,484,218,218,218,218,33,484,504,505,485,4,4,4,4,33,485,505,506,486,219,219,219,219,33,486,506,507,487,2,2,2,2,33,487,507,508,488,220,220,220,220,33,488,508,509,489,221,221,221,221,33,489,509,510,490,219,219,219,219,33,490,510,511,491,222,222,222,222,33,491,511,512,492,223,223,223,223,33,492,512,513,493,0,0,0,0,33,493,513,514,494,219,219,219,219,33,494,514,515,495,6,6,6,6,33,495,515,516,496,218,218,218,218,33,496,516,517,497,4,4,4,4,33,497,517,518,498,224,224,224,224,33,498,518,519,499,6,6,6,6,33,499,519,500,480,225,225,225,225,33,500,520,521,501,4,4,4,4,33,501,521,522,502,226,226,226,226,33,502,522,523,503,227,227,227,227,33,503,523,524,504,228,228,228,228,33,504,524,525,505,229,229,229,229,33,505,525,526,506,230,230,230,230,33,506,526,527,507,6,6,6,6,33,507,527,528,508,231,231,231,231,33,508,528,529,509,4,4,4,4,33,509,529,530,510,230,230,230,230,33,510,530,531,511,6,6,6,6,33,511,531,532,512,232,232,232,232,33,512,532,533,513,4,4,4,4,33,513,533,534,514,230,230,230,230,33,514,534,535,515,233,233,233,233,33,515,535,536,516,228,228,228,228,33,516,536,537,517,234,234,234,234,33,517,537,538,518,226,226,226,226,33,518,538,539,519,6,6,6,6,33,519,539,520,500,228,228,228,228,33,520,540,541,521,4,4,4,4,33,521,541,542,522,235,235,235,235,33,522,542,543,523,236,236,236,236,33,523,543,544,524,237,237,237,237,33,524,544,545,525,238,238,238,238,33,525,545,546,526,239,239,239,239,33,526,546,547,527,6,6,6,6,33,527,547,548,528,240,240,240,240,33,528,548,549,529,4,4,4,4,33,529,549,550,530,241,241,241,241,33,530,550,551,531,6,6,6,6,33,531,551,552,532,240,240,240,240,33,532,552,553,533,4,4,4,4,33,533,553,554,534,239,239,239,239,33,534,554,555,535,242,242,242,242,33,535,555,556,536,237,237,237,237,33,536,556,557,537,243,243,243,243,33,537,557,558,538,235,235,235,235,33,538,558,559,539,6,6,6,6,33,539,559,540,520,244,244,244,244,33,540,560,561,541,4,4,4,4,33,541,561,562,542,245,245,245,245,33,542,562,563,543,246,246,246,246,33,543,563,564,544,247,247,247,247,33,544,564,565,545,248,248,248,248,33,545,565,566,546,249,249,249,249,33,546,566,567,547,6,6,6,6,33,547,567,568,548,250,250,250,250,33,548,568,569,549,4,4,4,4,33,549,569,570,550,251,251,251,251,33,550,570,571,551,6,6,6,6,33,551,571,572,552,252,252,252,252,33,552,572,573,553,4,4,4,4,33,553,573,574,554,249,249,249,249,33,554,574,575,555,253,253,253,253,33,555,575,576,556,247,247,247,247,33,556,576,577,557,254,254,254,254,33,557,577,578,558,245,245,245,245,33,558,578,579,559,6,6,6,6,33,559,579,560,540,255,255,255,255,33,560,580,581,561,4,4,4,4,33,561,581,582,562,256,256,256,256,33,562,582,583,563,6,6,6,6,33,563,583,584,564,257,257,257,257,33,564,584,585,565,258,258,258,258,33,565,585,586,566,259,259,259,259,33,566,586,587,567,6,6,6,6,33,567,587,588,568,260,260,260,260,33,568,588,589,569,4,4,4,4,33,569,589,590,570,259,259,259,259,33,570,590,591,571,6,6,6,6,33,571,591,592,572,261,261,261,261,33,572,592,593,573,4,4,4,4,33,573,593,594,574,259,259,259,259,33,574,594,595,575,262,262,262,262,33,575,595,596,576,257,257,257,257,33,576,596,597,577,4,4,4,4,33,577,597,598,578,263,263,263,263,33,578,598,599,579,6,6,6,6,33,579,599,580,560,257,257,257,257,33,580,600,601,581,0,0,0,0,33,581,601,602,582,264,264,264,264,33,582,602,603,583,2,2,2,2,33,583,603,604,584,265,265,265,265,33,584,604,605,585,266,266,266,266,33,585,605,606,586,267,267,267,267,33,586,606,607,587,6,6,6,6,33,587,607,608,588,268,268,268,268,33,588,608,609,589,4,4,4,4,33,589,609,610,590,269,269,269,269,33,590,610,611,591,6,6,6,6,33,591,611,612,592,270,270,270,270,33,592,612,613,593,4,4,4,4,33,593,613,614,594,267,267,267,267,33,594,614,615,595,271,271,271,271,33,595,615,616,596,265,265,265,265,33,596,616,617,597,0,0,0,0,33,597,617,618,598,272,272,272,272,33,598,618,619,599,2,2,2,2,33,599,619,600,580,273,273,273,273,33,600,620,621,601,4,4,4,4,33,601,621,622,602,274,274,274,274,33,602,622,623,603,6,6,6,6,33,603,623,624,604,275,275,275,275,33,604,624,625,605,276,276,276,276,33,605,625,626,606,277,277,277,277,33,606,626,627,607,6,6,6,6,33,607,627,628,608,278,278,278,278,33,608,628,629,609,4,4,4,4,33,609,629,630,610,279,279,279,279,33,610,630,631,611,6,6,6,6,33,611,631,632,612,280,280,280,280,33,612,632,633,613,4,4,4,4,33,613,633,634,614,277,277,277,277,33,614,634,635,615,281,281,281,281,33,615,635,636,616,275,275,275,275,33,616,636,637,617,4,4,4,4,33,617,637,638,618,282,282,282,282,33,618,638,639,619,6,6,6,6,33,619,639,620,600,275,275,275,275,33,620,640,641,621,0,0,0,0,33,621,641,642,622,3,3,3,3,33,622,642,643,623,2,2,2,2,33,623,643,644,624,3,3,3,3,33,624,644,645,625,283,283,283,283,33,625,645,646,626,5,5,5,5,33,626,646,647,627,2,2,2,2,33,627,647,648,628,5,5,5,5,33,628,648,649,629,0,0,0,0,33,630,650,651,631,2,2,2,2,33,631,651,652,632,5,5,5,5,33,632,652,653,633,0,0,0,0,33,633,653,654,634,5,5,5,5,33,634,654,655,635,284,284,284,284,33,635,655,656,636,3,3,3,3,33,636,656,657,637,0,0,0,0,33,637,657,658,638,3,3,3,3,33,638,658,659,639,2,2,2,2,32,668,673,674,285,285,285,32,670,650,630,9,9,9,32,668,674,670,5,5,5,32,629,649,668,286,286,286,32,670,630,629,9,9,9,32,668,670,629,9,9,9,32,15,16,17,287,287,287,32,18,19,661,288,288,288,32,14,15,17,287,287,287,32,18,661,660,287,287,287,32,12,13,14,287,287,287,32,660,10,11,289,289,289,32,12,14,17,290,290,290,32,18,660,11,291,291,291,32,11,12,17,289,289,289,32,17,18,11,287,287,287,33,665,667,666,664,287,287,287,287,32,9,663,662,291,291,291,32,662,0,1,287,287,287,32,2,3,4,287,287,287,32,2,4,5,287,287,287,32,5,6,7,290,290,290,32,8,9,662,291,291,291,32,2,5,7,292,292,292,32,8,662,1,289,289,289,32,1,2,7,287,287,287,32,1,7,8,291,291,291,33,660,661,667,665,293,293,293,293,33,662,663,664,666,294,294,294,294,32,0,662,666,295,295,295,32,667,661,19,296,296,296,32,20,0,666,297,297,297,32,667,19,39,298,298,298,32,20,666,667,299,299,299,32,667,39,20,300,300,300,32,647,646,645,301,301,301,32,645,644,643,301,301,301,32,645,643,642,302,302,302,32,647,645,642,303,303,303,32,641,640,669,304,304,304,32,647,642,641,301,301,301,32,668,649,648,305,305,305,32,648,647,641,305,305,305,32,641,669,668,306,306,306,32,648,641,668,304,304,304,33,673,672,675,674,301,301,301,301,33,671,670,674,675,307,307,307,307,32,650,670,671,305,305,305,32,671,659,658,302,302,302,32,657,656,655,301,301,301,32,657,655,654,304,304,304,32,654,653,652,305,305,305,32,651,650,671,305,305,305,32,657,654,652,308,308,308,32,651,671,658,301,301,301,32,658,657,652,301,301,301,32,658,652,651,302,302,302,33,668,669,672,673,309,309,309,309,32,671,675,672,310,310,310,32,669,640,620,311,311,311,32,671,672,669,312,312,312,32,639,659,671,310,310,310,32,669,620,639,296,296,296,32,671,669,639,296,296,296],"metadata":{"generator":"io_three","uvs":0,"vertices":676,"version":3,"normals":313,"type":"Geometry","faces":706}},"double_turnout_L_a2":{"uvs":[],"normals":[0,-1,4.3652e-8,0,-1,4.32338e-8,3.04205e-9,-1,4.89076e-8,2.24137e-9,-1,4.95647e-8,0,0,-1,-2.07698e-7,-0.00000238419,1,-6.32223e-15,-1,4.50095e-8,-6.96594e-15,-1,4.68608e-8,-1.18885e-9,-1,4.10481e-8,-1.04085e-9,-1,4.20272e-8,-4.55387e-15,-1,4.27362e-8,-1.11407e-15,-1,3.86459e-8,7.0261e-10,-1,4.97454e-8,7.45282e-10,-1,4.78158e-8,1.06558e-7,0,-1,-8.64829e-8,-0.00000286102,1,-1.06045e-14,-1,4.85051e-8,-2.93279e-15,-1,4.81329e-8,-1.60415e-9,-1,3.9979e-8,-1.45826e-9,-1,3.63431e-8,0,-1,4.31658e-8,1.93316e-8,-1,9.43515e-8,0,-1,4.81329e-8,1.19733e-9,-1,4.44169e-8,-2.8711e-9,-1,4.65915e-8,0,0,-1,0,-0.0000038147,1,0,0,1,0,0,1,-1.28221e-7,-4.7447e-7,1,-1.57557e-7,0,1,-1.0517e-7,-0.0000021036,1,-1.38348e-7,3.37202e-7,1,-1.57557e-7,6.48846e-7,1,0,0,1,-1.28221e-7,-3.12518e-7,1,-1.38348e-7,4.1603e-7,1,-1.0517e-7,3.89174e-7,1,-1.57557e-7,0.00000153309,1,0,-1,0,0,-1,0,0,-1,0,0,-1,5.37435e-8,-1.15337e-7,-1,-1.40476e-7,0,-1,4.70834e-8,-6.36386e-9,-1,3.9673e-8,0,-1,6.63412e-8,-4.71246e-7,-1,-6.03846e-7,-3.65966e-7,-1,-5.77924e-7,2.01229e-8,-1,8.47308e-8,0,-1,4.26767e-8,9.59301e-9,-1,6.19069e-8,-8.7815e-15,-1,6.09242e-8,1.32552e-9,-1,5.18119e-8,8.42119e-15,-1,6.31163e-8,8.68092e-7,-1,0.00000100636,-3.25978e-9,-1,4.66029e-8,-6.32597e-7,-1,-6.64442e-7,-2.46648e-14,-1,5.93763e-8,3.58313e-8,-1,9.06715e-8,-6.55573e-7,-1,-6.24159e-7,3.6813e-22,-1,5.63364e-8,2.61122e-8,-1,7.70536e-8,2.05904e-14,-1,4.47035e-8,0,-0.00000158946,-1,9.21204e-7,0,1,0,-1,4.47035e-8,0,-1,3.52793e-8,5.14718e-9,-1,5.7001e-8,3.44198e-15,-1,5.15948e-8,4.43321e-15,-1,3.1758e-8,3.19656e-8,-1,2.82946e-7,9.15304e-10,-1,3.61508e-8,-1.00068e-7,-0.00000222524,-1,1.39594e-7,0,1,1.77529e-14,-1,2.41986e-7,-7.14055e-9,-1,4.44135e-8,3.43212e-9,-1,3.57368e-8,0,-1,5.35632e-8,0.0000066822,-1,0.0000110658,-1.46148e-8,-1,1.19942e-8,0,-1,0,0,-0.00000286102,-1,0,0,1,-1.39809e-7,2.76874e-7,-1,-1.40936e-7,0,-1,-1.72869e-7,-0.00000146179,-1,-1.5642e-7,-3.5911e-7,-1,-1.40936e-7,0,-1,-1.40936e-7,-1.34754e-7,-1,0,0,-1,0,0,-1,-1.39809e-7,3.20973e-7,-1,-1.5642e-7,-5.47379e-7,-1,-1.72869e-7,-3.42346e-7,-1,-1.40936e-7,7.32282e-8,-1,0,1,-4.69663e-8,0,1,-3.60076e-8,4.36715e-8,1,-3.58401e-8,2.07663e-8,1,-1.70424e-8,-2.07698e-7,0.00000238419,1,1.28536e-14,1,-8.64676e-8,4.00194e-15,1,-2.84908e-8,-2.54391e-9,1,-6.57408e-8,2.41948e-9,1,-3.29074e-8,1.80118e-15,1,-6.2481e-8,2.5843e-15,1,-2.42525e-8,1.65163e-9,1,-7.46836e-8,6.10891e-10,1,-2.76234e-8,-8.64829e-8,0.00000286102,1,1.06558e-7,0,-1,4.70948e-15,1,-7.72918e-8,9.43716e-15,1,-4.31658e-8,-5.54341e-9,1,-5.79183e-8,-6.43823e-9,1,-3.56176e-8,0,1,-4.81329e-8,4.4926e-8,1,-2.4014e-8,0,1,-4.31658e-8,1.6674e-8,1,-8.91265e-9,1.10176e-7,1,2.48556e-7,0,0.0000038147,1,0,1,0,0,1,0,0,1,0,0,1,-9.41667e-8,-4.47814e-7,1,-7.90498e-7,-8.9978e-8,1,-1.98941e-7,-4.09769e-7,1,-6.47096e-7,6.30097e-8,1,2.31258e-8,2.44854e-8,1,-2.17017e-8,8.12652e-7,1,9.42092e-7,0,1,-8.53534e-8,6.20021e-9,1,-4.26227e-8,5.67856e-8,1,1.23536e-8,-8.42119e-15,1,-6.31163e-8,3.25978e-9,1,-4.66029e-8,2.46648e-14,1,-5.93763e-8,6.32597e-7,1,6.64442e-7,0,1,0,-3.58313e-8,1,-9.06715e-8,0,1,-5.63364e-8,-8.29695e-7,1,-9.03656e-7,-2.61122e-8,1,-7.70537e-8,-2.05904e-14,1,-4.47035e-8,0,0.00000158946,-1,0,1,-4.47035e-8,0,1,-3.86961e-8,5.95181e-9,1,-4.72524e-8,-7.38716e-15,1,-5.2919e-8,-6.36821e-10,1,-4.83752e-8,6.69405e-10,1,-3.7993e-8,-1.00068e-7,0.00000222524,-1,-7.42063e-15,1,-4.76369e-8,-3.27464e-15,1,-4.4636e-8,-1.58974e-9,1,-4.68871e-8,-2.29261e-8,1,-2.93769e-8,0,1,-4.50441e-8,-2.5962e-8,1,-3.00981e-8,0,1,-4.4636e-8,-2.53216e-9,1,-4.93267e-8,1.95741e-7,1,2.77945e-7,0,0.00000286102,-1,0,1,0,-0.757278,0,-0.653093,0,1,-4.26544e-8,3.69261e-10,1,-3.93848e-8,-0.724245,0,-0.689542,0.724245,0,0.689543,-0.724252,5.4175e-7,-0.689536,4.4132e-15,1,-2.96881e-8,-9.70399e-8,1,-1.49928e-7,0,1,-4.72898e-8,3.30769e-9,1,-2.05688e-8,7.85351e-10,1,-4.46741e-8,-3.05122e-9,1,-5.20807e-8,-0.689541,0,-0.724247,-0.689542,-2.87789e-8,-0.724246,-0.689541,-0.00000108769,-0.724247,-0.653172,0.00000237869,-0.75721,0.689542,-6.95645e-7,0.724246,0.653172,0,0.75721,0.653172,0,0.75721,0.653172,-6.19209e-7,0.75721,0.61523,8.54682e-7,0.788347,-0.689553,0,-0.724235,-6.21555e-15,1,-3.97363e-8,-8.95868e-15,1,-5.75105e-8,4.82346e-9,1,5.06607e-9,-0.653168,0,-0.757213,0.653173,0,0.757209,-0.615231,-5.17748e-7,-0.788347,-3.87237e-15,1,-5.27836e-8,1.05422e-9,1,-3.92967e-8,-5.6085e-8,1,-1.19204e-7,1.85609e-15,1,-3.0462e-8,-1.10456e-9,1,-4.5649e-8,-2.88038e-10,1,-3.20689e-8,-3.95137e-10,1,-4.39927e-8,-0.575809,-3.24879e-8,-0.817585,-0.575808,0,-0.817585,-0.575811,0.0000111045,-0.817583,0.615231,4.32989e-7,0.788347,0.575809,0,0.817584,0.534997,0,0.844854,0.534998,3.35715e-8,0.844853,0.534997,-6.83514e-7,0.844854,0.4929,-8.71144e-7,0.870086,-0.534998,0.00000126031,-0.844853,-0.615233,0,-0.788346,-0.575808,-0.00000233913,-0.817585,-0.575808,-4.87319e-8,-0.817585,-0.575788,0,-0.817599,-0.575809,0.00000233913,-0.817584,-0.575788,0,-0.817599,-0.575808,0,-0.817585,-0.653173,0,-0.757209,-0.653162,0,-0.757218,-0.653173,0,-0.757209,-0.653162,0,-0.757218,-0.534998,0,-0.844853,-0.534998,-5.03572e-8,-0.844854,-0.534998,0,-0.844853,-0.534998,-5.51618e-8,-0.844854,-0.4929,0,-0.870086,-0.4929,-4.4141e-7,-0.870086,-0.492899,0,-0.870087,-0.492899,4.41407e-7,-0.870086,-0.492899,0,-0.870087,-0.4929,0,-0.870086,-0.449612,0,-0.893224,-0.405239,0,-0.914211,-0.405238,0,-0.914211,-0.405239,0,-0.914211,-0.405239,0,-0.914211,-0.615232,0,-0.788346,1.10783e-14,1,-7.94726e-8,0.575815,0,0.81758,-5.53916e-15,-1,3.97363e-8,-7.37529e-15,-1,4.96145e-8,0,-1,2.36449e-8,1.58161e-9,-1,4.74181e-8,-2.32124e-8,-1,1.76224e-8,-9.94069e-9,-1,-9.46418e-9,4.69811e-9,-1,4.82972e-8,0.615231,-8.54682e-7,0.788347,0.0790287,0.992653,0.0916164,0.653172,0,0.75721,0.689542,6.95645e-7,0.724246,-0.724252,-5.4175e-7,-0.689536,-0.689541,0.0000010359,-0.724247,-0.653172,-0.00000237869,-0.75721,0,-1,7.94727e-8,-7.92756e-10,-1,8.4554e-8,-0.492897,0,-0.870088,9.50709e-15,1,-9.03971e-8,-8.23737e-10,1,-8.09269e-8,0.449604,0,0.893228,0.405239,0,0.914211,0.653173,4.51332e-8,0.757209,0.65317,0,0.757211,0.653174,0.00000168497,0.757208,0.653173,-0.00000168497,0.757209,0.65317,0,0.757211,0.653173,0,0.757209,0.689542,0,0.724246,0.689538,4.31686e-8,0.72425,0.689542,0,0.724246,0.689538,4.77776e-8,0.72425,0.615226,0,0.788351,0.615231,0,0.788347,0.615226,0,0.788351,0.724246,0,0.689542,0.724246,0.000001096,0.689542,0.724261,0,0.689526,0.724247,-6.58879e-7,0.68954,0.724261,0,0.689526,1,0,0,0.724261,0,0.689526,0.724245,0,0.689542,0.724245,0,0.689542,0.757204,0,0.653179,0.757204,0,0.653179,1.79174e-14,-1,1.15021e-7,-3.00896e-9,-1,7.59844e-8,2.3152e-15,-1,3.15581e-8,1.1237e-8,-1,6.34381e-8,-2.88452e-15,-1,4.73406e-8,3.08689e-9,-1,3.99985e-8,-8.00197e-9,-1,3.50731e-8,-7.53476e-9,-1,3.82538e-8,7.18072e-8,-1,9.20127e-8,-0.615231,5.17748e-7,-0.788347,-0.00412087,-0.999974,-0.00585114,-0.575809,0,-0.817585,-0.534998,-0.00000126031,-0.844853,0.4929,8.71144e-7,0.870086,0.534997,0,0.844854,0.0110928,0.999785,0.0175175,0.534997,3.35715e-8,0.844854,0.615231,-4.32989e-7,0.788347,-8.68739e-15,-1,3.97364e-8,-4.75354e-15,-1,4.51985e-8,3.35221e-9,-1,6.65983e-9],"metadata":{"generator":"io_three","normals":303,"uvs":0,"vertices":234,"version":3,"faces":388,"type":"Geometry"},"vertices":[180.147,-0.999999,17.5,177.71,-0.999999,17.5,186.194,-1,10.8787,187.793,-1,9.5,190.088,-1,9.5,187.146,-0.999999,12.0382,180.147,-4,17.5,177.71,-4,17.5,187.793,-4,9.5,190.088,-4,9.5,164.131,-0.999999,17.5,170.072,-0.999999,13.3159,174.962,-1,9.5,128.332,-0.999999,17.5,137.008,-0.999999,12.5847,141.88,-1,9.5,164.131,-4,17.5,128.332,-4,17.5,141.88,-4,9.49999,174.962,-4,9.5,110.883,-0.999999,17.5,121.856,-0.999999,11.9767,126.228,-1,9.5,107.232,-0.999999,17.5,109.882,-0.999999,16.3253,121.149,-1,10.6538,123.186,-1,9.5,110.883,-4,17.5,107.232,-4,17.5,123.186,-4,9.49999,126.228,-4,9.49999,178.225,8.30516e-7,19,103.848,8.30516e-7,19,103.848,-4,19,107.548,-4,19,107.548,-0.999999,19,125.684,-0.999999,19,125.684,-4,19,162.001,-4,19,162.001,-0.999999,19,175.788,-0.999999,19,175.788,-4,19,178.225,-4,19,178.225,4,19,175.788,4,19,175.788,1,19,162.001,1,19,162.001,4,19,125.684,4,19,125.684,1,19,107.548,1,19,107.548,4,19,103.848,4,19,110.523,-4,17.6813,139.13,-4,1.74846e-7,141.933,-4,1.74846e-7,132.896,-4,5.72282,132.124,-4,4.43623,152.987,-4,-9.49999,155.435,-4,-9.49999,153.988,-4,-8.37077,143.615,-4,-1.06514,142.782,-4,-2.31235,155.992,-4,1.74846e-7,186.561,-4,1.74846e-7,181.119,-4,4.69458,148.06,-4,5.58662,168.434,-4,-9.49999,197.025,-4,-9.5,191.73,-4,-4.45836,158.754,-4,-1.9451,198.646,-4,1.74846e-7,200.82,-4,1.74846e-7,198.11,-4,2.58069,197.102,-4,1.46924,208.522,-4,-9.5,210.593,-4,-9.5,208.596,-4,-7.40343,207.536,-4,-8.46411,210.593,-1,-9.5,208.522,-1,-9.5,216.139,-1,-17.5,218.209,-1,-17.5,216.139,-4,-17.5,218.209,-4,-17.5,197.025,-1,-9.5,201.879,-1,-14.121,205.096,-1,-17.5,168.434,-1,-9.5,169.066,-1,-9.99263,177.769,-1,-17.5,177.769,-4,-17.5,205.096,-4,-17.5,155.435,-1,-9.5,163.991,-1,-16.1767,165.525,-1,-17.5,152.987,-1,-9.5,153.095,-1,-9.57558,163.039,-1,-17.3363,163.229,-1,-17.5,163.229,-4,-17.5,165.525,-4,-17.5,219.538,-4,-19,217.558,-4,-19,217.558,-1,-19,206.524,-1,-19,206.524,-4,-19,179.457,-4,-19,179.457,-1,-19,167.264,-1,-19,167.264,-4,-19,164.968,-4,-19,164.968,-8.30516e-7,-19,219.538,-8.30517e-7,-19,164.968,4,-19,167.264,4,-19,167.264,0.999999,-19,179.457,0.999999,-19,179.457,4,-19,206.524,4,-19,206.524,0.999999,-19,217.558,0.999999,-19,217.558,4,-19,219.538,4,-19,217.469,-4,-18.8974,218.581,-4,-17.8901,178.97,-4,-18.5364,190.088,1,9.5,187.793,1,9.5,186.194,1,10.8787,177.71,1,17.5,180.147,1,17.5,187.146,1,12.0382,190.088,4,9.5,187.793,4,9.5,177.71,4,17.5,180.147,4,17.5,174.962,1,9.5,170.072,1,13.3159,164.131,1,17.5,141.88,1,9.5,137.008,1,12.5847,128.332,1,17.5,174.962,4,9.5,141.88,4,9.49999,128.332,4,17.5,164.131,4,17.5,126.228,1,9.5,121.856,1,11.9767,110.883,1,17.5,123.186,1,9.5,121.149,1,10.6538,109.882,1,16.3253,107.232,1,17.5,126.228,4,9.49999,123.186,4,9.49999,107.232,4,17.5,110.883,4,17.5,110.523,4,17.6813,132.896,4,5.72282,141.933,4,-1.74846e-7,139.13,4,-1.74846e-7,132.124,4,4.43623,143.615,4,-1.06514,153.988,4,-8.37077,155.435,4,-9.49999,152.987,4,-9.49999,142.782,4,-2.31235,181.119,4,4.69458,186.561,4,-1.74846e-7,155.992,4,-1.74846e-7,148.06,4,5.58662,191.73,4,-4.45836,197.025,4,-9.5,168.434,4,-9.49999,158.754,4,-1.9451,198.11,4,2.58069,200.82,4,-1.74846e-7,198.646,4,-1.74846e-7,197.102,4,1.46924,208.596,4,-7.40343,210.593,4,-9.5,208.522,4,-9.5,207.536,4,-8.46411,218.209,0.999999,-17.5,216.139,0.999999,-17.5,208.522,1,-9.5,210.593,1,-9.5,218.209,4,-17.5,216.139,4,-17.5,205.096,0.999999,-17.5,201.879,0.999999,-14.121,197.025,1,-9.5,177.769,0.999999,-17.5,169.066,1,-9.99263,168.434,1,-9.5,205.096,4,-17.5,177.769,4,-17.5,165.525,0.999999,-17.5,163.991,0.999999,-16.1767,155.435,1,-9.5,163.229,0.999999,-17.5,163.039,0.999999,-17.3363,153.095,1,-9.57558,152.987,1,-9.5,165.525,4,-17.5,163.229,4,-17.5,217.469,4,-18.8974,218.581,4,-17.8901,178.97,4,-18.5364,217.469,0.999999,-18.8974,207.536,1,-8.46411,197.102,1,1.46924,191.73,1,-4.45836,181.119,1,4.69458,178.97,0.999999,-18.5364,158.754,1,-1.9451,153.988,1,-8.37077,143.615,1,-1.06514,132.896,1,5.72282,148.06,1,5.58662,181.119,-1,4.69458,191.73,-1,-4.45836,207.536,-1,-8.46411,197.102,-1,1.46924,217.469,-1,-18.8974,110.523,1,17.6813,178.97,-1,-18.5364,158.754,-1,-1.9451,148.06,-1,5.58662,132.896,-1,5.72282,143.615,-1,-1.06514,153.988,-1,-8.37077,110.523,-0.999999,17.6813],"faces":[32,5,0,1,0,0,0,32,2,3,4,1,1,1,32,5,1,2,2,2,2,32,2,4,5,3,3,3,33,1,0,6,7,4,4,4,4,33,4,3,8,9,5,5,5,5,32,2,1,10,6,6,6,32,11,12,3,7,7,7,32,2,10,11,8,8,8,32,11,3,2,9,9,9,32,11,10,13,10,10,10,32,14,15,12,11,11,11,32,11,13,14,12,12,12,32,14,12,11,13,13,13,33,16,17,13,10,14,14,14,14,33,12,15,18,19,15,15,15,15,32,14,13,20,16,16,16,32,21,22,15,17,17,17,32,14,20,21,18,18,18,32,21,15,14,19,19,19,32,21,20,23,20,20,20,32,21,23,24,21,21,21,32,26,22,21,22,22,22,32,21,24,25,23,23,23,32,25,26,21,24,24,24,33,27,28,23,20,25,25,25,25,33,22,26,29,30,26,26,26,26,32,32,33,34,27,27,27,32,32,34,35,28,28,28,32,41,42,31,28,28,28,32,40,41,31,27,27,27,32,31,32,35,29,29,29,32,36,37,38,30,30,30,32,31,35,36,31,31,31,32,39,40,31,32,32,32,32,36,38,39,30,30,30,32,31,36,39,33,33,33,32,31,43,44,34,34,34,32,31,44,45,34,34,34,32,51,52,32,28,28,28,32,50,51,32,34,34,34,32,32,31,45,35,35,35,32,46,47,48,30,30,30,32,32,45,46,36,36,36,32,49,50,32,37,37,37,32,46,48,49,30,30,30,32,46,49,32,38,38,38,33,42,41,7,6,39,39,39,39,33,38,37,17,16,40,40,40,40,32,53,34,33,40,40,40,32,33,28,27,40,40,40,32,33,27,53,41,41,41,32,57,54,55,42,42,42,32,55,56,30,43,43,43,32,30,29,57,44,44,44,32,55,30,57,45,45,45,32,62,58,59,46,46,46,32,59,60,61,47,47,47,32,61,55,54,40,40,40,32,54,62,59,48,48,48,32,59,61,54,49,49,49,32,66,63,64,50,50,50,32,64,65,19,51,51,51,32,19,18,66,52,52,52,32,64,19,66,53,53,53,32,70,67,68,54,54,54,32,68,69,64,55,55,55,32,64,63,70,39,39,39,32,68,64,70,56,56,56,32,74,71,72,40,40,40,32,72,73,9,57,57,57,32,9,8,74,58,58,58,32,72,9,74,59,59,59,32,78,75,76,40,40,40,32,76,77,72,60,60,60,32,72,71,78,61,61,61,32,76,72,78,62,62,62,33,79,80,81,82,63,63,63,63,33,76,75,80,79,64,64,64,64,33,82,81,83,84,65,65,65,65,32,81,80,85,66,66,66,32,86,87,81,67,67,67,32,85,86,81,68,68,68,32,86,85,88,69,69,69,32,89,90,87,70,70,70,32,86,88,89,71,71,71,32,89,87,86,72,72,72,33,68,67,88,85,73,73,73,73,33,87,90,91,92,74,74,74,74,32,89,88,93,75,75,75,32,94,95,90,40,40,40,32,89,93,94,76,76,76,32,94,90,89,77,77,77,32,94,93,96,78,78,78,32,94,96,97,79,79,79,32,99,95,94,41,41,41,32,94,97,98,80,80,80,32,98,99,94,81,81,81,33,59,58,96,93,82,82,82,82,33,95,99,100,101,83,83,83,83,32,113,102,103,4,4,4,32,113,103,104,4,4,4,32,110,111,112,4,4,4,32,109,110,112,4,4,4,32,112,113,104,84,84,84,32,105,106,107,85,85,85,32,112,104,105,86,86,86,32,108,109,112,87,87,87,32,105,107,108,88,88,88,32,105,108,112,89,89,89,32,112,114,115,90,90,90,32,112,115,116,91,91,91,32,122,123,113,4,4,4,32,121,122,113,90,90,90,32,113,112,116,92,92,92,32,117,118,119,88,88,88,32,113,116,117,93,93,93,32,120,121,113,94,94,94,32,117,119,120,85,85,85,32,113,117,120,95,95,95,32,125,84,83,40,40,40,32,124,103,102,40,40,40,32,125,83,124,40,40,40,32,124,102,125,41,41,41,32,106,92,91,40,40,40,32,126,107,106,40,40,40,32,91,126,106,40,40,40,33,101,100,111,110,40,40,40,40,32,132,127,128,96,96,96,32,129,130,131,97,97,97,32,132,128,129,98,98,98,32,129,131,132,99,99,99,33,133,134,128,127,100,100,100,100,33,131,130,135,136,25,25,25,25,32,129,128,137,101,101,101,32,138,139,130,102,102,102,32,129,137,138,103,103,103,32,138,130,129,104,104,104,32,138,137,140,105,105,105,32,141,142,139,106,106,106,32,138,140,141,107,107,107,32,141,139,138,108,108,108,33,143,144,140,137,109,109,109,109,33,139,142,145,146,110,110,110,110,32,141,140,147,111,111,111,32,148,149,142,112,112,112,32,141,147,148,113,113,113,32,148,142,141,114,114,114,32,148,147,150,115,115,115,32,148,150,151,116,116,116,32,153,149,148,117,117,117,32,148,151,152,118,118,118,32,152,153,148,119,119,119,33,154,155,150,147,120,120,120,120,33,149,153,156,157,25,25,25,25,33,136,135,44,43,121,121,121,121,33,146,145,48,47,122,122,122,122,32,158,157,156,123,123,123,32,156,52,51,122,122,122,32,156,51,158,122,122,122,32,162,155,154,124,124,124,32,154,159,160,125,125,125,32,160,161,162,121,121,121,32,154,160,162,126,126,126,32,167,161,160,122,122,122,32,160,163,164,127,127,127,32,164,165,166,123,123,123,32,166,167,160,128,128,128,32,160,164,166,129,129,129,32,171,144,143,122,122,122,32,143,168,169,130,130,130,32,169,170,171,131,131,131,32,143,169,171,132,132,132,32,175,170,169,121,121,121,32,169,172,173,133,133,133,32,173,174,175,134,134,134,32,169,173,175,135,135,135,32,179,134,133,136,136,136,32,133,176,177,137,137,137,32,177,178,179,138,138,138,32,133,177,179,139,139,139,32,183,178,177,140,140,140,32,177,180,181,141,141,141,32,181,182,183,138,138,138,32,177,181,183,142,142,142,33,184,185,186,187,143,143,143,143,33,188,189,185,184,65,65,65,65,33,187,186,182,181,144,144,144,144,32,186,185,190,145,145,145,32,191,192,186,146,146,146,32,190,191,186,147,147,147,32,191,190,193,148,148,148,32,194,195,192,122,122,122,32,191,193,194,149,149,149,32,194,192,191,150,150,150,33,196,197,193,190,74,74,74,74,33,192,195,174,173,151,151,151,151,32,194,193,198,152,152,152,32,199,200,195,153,153,153,32,194,198,199,154,154,154,32,199,195,194,155,155,155,32,199,198,201,156,156,156,32,199,201,202,157,157,157,32,204,200,199,158,158,158,32,199,202,203,159,159,159,32,203,204,199,160,160,160,33,205,206,201,198,27,27,27,27,33,200,204,166,165,161,161,161,161,32,208,123,122,123,123,123,32,207,189,188,122,122,122,32,208,122,207,138,138,138,32,207,188,208,122,122,122,32,196,119,118,162,162,162,32,209,197,196,122,122,122,32,118,209,196,121,121,121,33,115,114,206,205,122,122,122,122,33,121,210,207,122,163,163,163,163,32,190,185,210,164,164,164,32,210,121,120,162,162,162,32,210,120,190,165,165,165,33,210,185,189,207,166,166,166,166,33,190,120,119,196,167,167,167,167,33,186,211,183,182,168,168,168,168,32,137,128,212,169,169,169,32,212,211,186,170,170,170,32,186,192,213,171,171,171,32,214,137,212,172,172,172,32,186,213,214,173,173,173,32,212,186,214,174,174,174,32,183,211,212,175,175,175,32,212,179,178,176,176,176,32,212,178,183,177,177,177,33,134,179,212,128,178,178,178,178,33,173,172,213,192,179,179,179,179,32,168,214,213,180,180,180,32,213,172,169,181,181,181,32,213,169,168,182,182,182,33,137,214,168,143,183,183,183,183,33,117,215,209,118,184,184,184,184,32,117,116,198,185,185,185,32,198,193,215,186,186,186,32,198,215,117,187,187,187,33,197,209,215,193,188,188,188,188,33,198,116,115,205,189,189,189,189,33,195,216,175,174,190,190,190,190,32,195,200,217,191,191,191,32,195,217,218,192,192,192,32,220,216,195,193,193,193,32,147,140,220,194,194,194,32,195,218,219,195,195,195,32,219,147,220,196,196,196,32,219,220,195,197,197,197,32,175,216,220,198,198,198,32,220,171,170,199,199,199,32,220,170,175,200,200,200,33,165,164,217,200,201,201,201,201,33,218,217,164,163,202,202,202,202,32,159,219,218,203,203,203,32,218,163,160,204,204,204,32,218,160,159,205,205,205,33,147,219,159,154,206,206,206,206,33,144,171,220,140,207,207,207,207,33,97,203,202,98,208,208,208,208,32,96,58,62,209,209,209,32,62,167,166,210,210,210,32,204,203,97,211,211,211,32,62,166,204,212,212,212,32,204,97,96,213,213,213,32,62,204,96,214,214,214,32,112,111,100,215,215,215,32,99,98,202,216,216,216,32,112,100,99,217,217,217,32,206,114,112,215,215,215,32,99,202,201,218,218,218,32,201,206,112,217,217,217,32,99,201,112,217,217,217,32,57,162,161,219,219,219,32,161,167,62,220,220,220,32,54,57,161,221,221,221,32,161,62,54,222,222,222,32,155,162,57,223,223,223,32,57,29,26,224,224,224,32,26,25,151,225,225,225,32,150,155,57,226,226,226,32,26,151,150,227,227,227,32,57,26,150,228,228,228,33,151,25,24,152,229,229,229,229,32,32,52,156,230,230,230,32,153,152,24,231,231,231,32,32,156,153,232,232,232,32,28,33,32,230,230,230,32,153,24,23,231,231,231,32,23,28,32,233,233,233,32,153,23,32,233,233,233,33,130,45,44,135,234,234,234,234,33,45,130,139,46,235,235,235,235,33,46,139,146,47,236,236,236,236,33,39,10,1,40,237,237,237,237,33,38,16,10,39,236,236,236,236,33,7,41,40,1,234,234,234,234,32,3,12,221,238,238,238,32,222,85,80,239,239,239,32,3,221,222,240,240,240,32,223,224,3,241,241,241,32,222,80,223,242,242,242,32,222,223,3,243,243,243,33,19,65,221,12,244,244,244,244,32,222,221,65,180,180,180,32,65,64,69,245,245,245,32,65,69,222,246,246,246,33,85,222,69,68,247,247,247,247,33,75,78,223,80,248,248,248,248,32,224,223,78,175,175,175,32,71,74,224,176,176,176,32,78,71,224,249,249,249,33,3,224,74,8,250,250,250,250,32,81,87,105,251,251,251,32,105,104,225,41,41,41,32,105,225,81,252,252,252,33,92,106,105,87,167,167,167,167,33,103,124,225,104,163,163,163,163,33,225,124,83,81,166,166,166,166,33,142,49,48,145,253,253,253,253,32,142,149,226,138,138,138,32,226,50,49,254,254,254,32,226,49,142,255,255,255,33,157,158,226,149,256,256,256,256,33,50,226,158,51,257,257,257,257,32,73,176,133,258,258,258,32,127,132,5,259,259,259,32,73,133,127,260,260,260,32,4,9,73,261,261,261,32,127,5,4,262,262,262,32,127,4,73,263,263,263,32,77,180,177,264,264,264,32,177,176,73,265,265,265,32,72,77,177,266,266,266,32,177,73,72,267,267,267,32,31,42,6,268,268,268,32,0,5,132,269,269,269,32,31,6,0,270,270,270,32,136,43,31,268,268,268,32,0,132,131,269,269,269,32,131,136,31,270,270,270,32,0,131,31,270,270,270,32,181,180,77,271,271,271,32,77,76,79,272,272,272,32,82,84,125,273,273,273,32,181,77,79,274,274,274,32,82,125,208,275,275,275,32,187,181,79,276,276,276,32,208,188,184,277,277,277,32,184,187,79,278,278,278,32,82,208,184,275,275,275,32,79,82,184,279,279,279,32,123,208,125,280,280,280,32,125,102,113,281,281,281,32,125,113,123,281,281,281,32,109,108,227,41,41,41,32,227,90,95,282,282,282,32,227,95,109,283,283,283,33,107,126,227,108,184,184,184,184,33,90,227,126,91,188,188,188,188,33,101,110,109,95,189,189,189,189,32,93,88,228,284,284,284,32,228,229,15,285,285,285,32,15,22,230,286,286,286,32,15,230,231,287,287,287,32,93,228,15,288,288,288,32,15,231,232,289,289,289,32,15,232,93,290,290,290,33,67,70,228,88,291,291,291,291,32,229,228,70,198,198,198,32,70,63,66,292,292,292,32,70,66,229,293,293,293,33,15,229,66,18,294,294,294,294,33,30,56,230,22,295,295,295,295,32,231,230,56,296,296,296,32,56,55,61,297,297,297,32,56,61,231,298,298,298,33,231,61,60,232,202,202,202,202,33,93,232,60,59,299,299,299,299,32,20,13,36,300,300,300,32,36,35,233,301,301,301,32,36,233,20,302,302,302,33,17,37,36,13,253,253,253,253,33,34,53,233,35,257,257,257,257,33,20,233,53,27,256,256,256,256]},"eight_R_ab":{"uvs":[],"normals":[-0.388952,3.76793e-8,0.921258,0,1,-4.61659e-8,0,1,-4.46261e-8,3.2713e-8,1,2.36681e-7,1.13053e-8,1,-2.67773e-8,-9.55496e-10,1,-4.56694e-8,1.07257e-8,1,-2.78054e-8,0,1,-4.08461e-8,-4.75406e-8,1,-1.81256e-7,-1.02314e-8,1,-9.24939e-8,-1.11361e-8,1,-7.92405e-8,2.61151e-9,1,-3.54028e-8,1.46271e-9,1,-4.09602e-8,-1.86816e-8,1,-1.07666e-7,6.24947e-9,1,-2.78302e-8,3.06355e-9,1,-3.59368e-8,4.70801e-9,1,-2.72164e-8,0,-1,4.341e-8,0.40524,3.63274e-8,0.91421,0.359908,0,0.932988,0.40524,3.99614e-8,0.91421,0.359908,0,0.932988,0.361119,-0.0928731,0.927883,0.368672,-0.00449755,0.929549,0,1,0,0.242089,0,0.970254,0.122883,0,0.992421,0,0,1,0,-1,0,0.0735656,0,-0.99729,0,1,-4.98564e-7,0.0251882,1.87666e-9,-0.999683,0.0251882,0,-0.999683,0.105981,0,0.994368,0.0852211,0,0.996362,0.0986573,-0.115616,0.988382,0.0852211,0,0.996362,0.170959,0,0.985278,0.242978,0,0.970032,0.265064,0,0.964231,0.100041,-0.994002,0.0441822,-0.219101,0,0.975702,-0.170959,0,-0.985278,0,1,0,-0.31368,0,-0.949529,-2.81545e-9,-1,2.88257e-8,-0.2191,0,-0.975702,-0.23575,0.242095,-0.941176,-0.278513,-0.26558,-0.922983,0.359895,0,-0.932993,-1.05964e-8,1,-6.35783e-8,2.70517e-8,1,1.08418e-7,0,1,-7.94729e-8,6.00157e-9,1,-1.50162e-8,0,0,1,0,1,0,4.89062e-8,1,1.26779e-7,2.65849e-8,1,-6.89187e-8,1.43347e-7,1,5.17995e-7,6.2216e-8,1,1.74945e-7,-1,0,-8.90096e-7,0.164399,0,0.986394,-1,0,-0.00000404366,-1,0,-0.00000197148,-1,-7.45058e-8,-0.00000217163,-1,0,-0.00000404366,-1,2.27019e-7,-0.00000196913,-1,-0.00000524219,-0.00000254466,-0.388952,-3.76793e-8,-0.921258,0,4.37114e-8,1,0,0,0,6.23449e-9,1,-5.78887e-8,-3.60623e-8,1,7.18147e-8,5.57143e-9,1,-5.67126e-8,0,1,-4.61659e-8,-8.58615e-9,1,2.80725e-8,-8.31239e-9,1,-2.0148e-8,3.6239e-8,1,-2.08854e-7,3.66859e-9,1,-5.30667e-8,-1.40984e-9,1,-1.91125e-8,0,1,-4.46261e-8,-7.83437e-10,1,-3.10934e-8,4.97207e-9,1,-6.05117e-8,-4.27635e-10,1,-4.26439e-8,9.50922e-11,1,-4.47299e-8,-5.22234e-10,1,-4.16137e-8,0.40524,-3.63274e-8,-0.91421,0.359908,0,-0.932988,0.359908,0,-0.932988,0.40524,-3.99614e-8,-0.91421,0.362687,-0.00142386,-0.93191,0.367494,-0.0800054,-0.926578,0,1,0,0.242089,0,-0.970254,0.122883,0,-0.992421,0,0,-1,0,0,1,0.0251883,-3.05897e-7,0.999683,0.0735656,0,0.99729,0.0251882,0,0.999683,0.105981,0,-0.994368,0.0852211,0,-0.996362,0.0986573,-0.115616,-0.988382,0.0852211,0,-0.996362,0.170959,0,-0.985278,0.265064,0,-0.964231,0.242978,0,-0.970032,0.100041,-0.994002,-0.0441826,-0.219101,0,-0.975702,-0.170959,0,0.985278,9.28953e-8,1,-4.13683e-7,-0.2191,0,0.975702,-0.31368,0,0.949529,-0.262145,-0.184234,0.947279,-4.43657e-8,1,1.34298e-7,-0.261001,-0.170361,0.950187,0.359895,0,0.932993,0,1,-5.50271e-8,5.29819e-9,1,-3.17891e-8,1.30238e-9,1,-6.81755e-8,7.37954e-10,1,-3.86295e-8,0,0,-1,-4.89062e-8,1,1.26779e-7,-3.25203e-8,1,-1.44819e-7,5.52009e-8,1,-2.77471e-7,3.55379e-8,1,-1.58258e-7,1.00718e-8,1,-8.66501e-8,-1,0,8.90096e-7,0.164399,0,-0.986394,-1,0,0.00000404366,-1,-7.45058e-8,0.00000197148,-1,0,0.00000404366,-1,0,0.00000212159,-1,-0.00000725491,0.00000196913,-1,-6.29948e-7,0.00000254466,6.23449e-9,-1,5.78887e-8,-3.60623e-8,-1,-7.18147e-8,5.57143e-9,-1,5.67126e-8,0,-1,4.61659e-8,0,-1,4.46261e-8,-8.58615e-9,-1,-2.80725e-8,-8.31239e-9,-1,2.0148e-8,3.6239e-8,-1,2.08854e-7,3.66859e-9,-1,5.30667e-8,-1.40984e-9,-1,1.91125e-8,0,-1,4.46261e-8,-7.83437e-10,-1,3.10934e-8,4.97207e-9,-1,6.05117e-8,-4.27635e-10,-1,4.26439e-8,9.50922e-11,-1,4.47299e-8,-5.22234e-10,-1,4.16137e-8,0.359908,0,0.932988,0.359908,0,0.932988,0.362687,0.00142386,0.93191,0.367494,0.0800054,0.926578,0,-1,0,0.122883,0,0.992421,0.0251883,3.05897e-7,-0.999683,0.0986573,0.115616,0.988382,0.100041,0.994002,0.0441826,9.28953e-8,-1,4.13683e-7,-0.31368,0,-0.949529,-0.262145,0.184234,-0.947279,-4.43657e-8,-1,-1.34298e-7,-0.261001,0.170361,-0.950187,0.359895,0,-0.932993,0,-1,5.50271e-8,5.29819e-9,-1,3.17891e-8,1.30238e-9,-1,6.81755e-8,7.37954e-10,-1,3.86295e-8,0,-1,0,-4.89062e-8,-1,-1.26779e-7,-3.25203e-8,-1,1.44819e-7,5.52009e-8,-1,2.77471e-7,3.55379e-8,-1,1.58258e-7,1.00718e-8,-1,8.66501e-8,0,1,-4.37114e-8,-1,7.45058e-8,-0.00000197148,-1,0,-0.00000212159,-1,0.00000725491,-0.00000196913,-1,6.29948e-7,-0.00000254466,0,-1,4.61659e-8,3.2713e-8,-1,-2.36681e-7,1.13053e-8,-1,2.67773e-8,-9.55496e-10,-1,4.56694e-8,1.07257e-8,-1,2.78054e-8,0,-1,4.08461e-8,-4.75406e-8,-1,1.81256e-7,-1.02314e-8,-1,9.24939e-8,-1.11361e-8,-1,7.92405e-8,2.61151e-9,-1,3.54028e-8,1.46271e-9,-1,4.09602e-8,-1.86816e-8,-1,1.07666e-7,6.24947e-9,-1,2.78302e-8,3.06355e-9,-1,3.59368e-8,4.70801e-9,-1,2.72164e-8,0,1,-4.341e-8,0.359908,0,-0.932988,0.361119,0.0928731,-0.927883,0.368672,0.00449755,-0.929549,0,-1,0,0.122883,0,-0.992421,0,0,-1,0,-1,4.98564e-7,0.0251882,-1.87666e-9,0.999683,0.0986573,0.115616,-0.988382,0.100041,0.994002,-0.0441822,-0.31368,0,0.949529,-2.81545e-9,1,-2.88257e-8,-0.23575,-0.242095,0.941176,-0.278513,0.26558,0.922983,0.359895,0,0.932993,-1.05964e-8,-1,6.35783e-8,2.70517e-8,-1,-1.08418e-7,0,-1,7.94729e-8,6.00157e-9,-1,1.50162e-8,4.89062e-8,-1,-1.26779e-7,2.65849e-8,-1,6.89187e-8,1.43347e-7,-1,-5.17995e-7,6.2216e-8,-1,-1.74945e-7,4.36167e-15,1,-4.37114e-8,-1,0,0.00000197148,-1,7.45058e-8,0.00000217163,-1,-2.27019e-7,0.00000196913,-1,0.00000524219,0.00000254466],"faces":[33,36,0,1,39,0,0,0,0,32,40,42,2,1,1,1,32,3,4,5,2,2,2,32,40,2,3,3,3,3,32,16,0,36,4,4,4,32,40,3,5,5,5,5,32,15,16,36,6,6,6,32,40,5,6,7,7,7,32,14,15,36,8,8,8,32,40,6,7,9,9,9,32,13,14,36,10,10,10,32,40,7,8,11,11,11,32,12,13,36,12,12,12,32,11,12,36,13,13,13,32,9,10,11,14,14,14,32,8,9,11,15,15,15,32,40,8,11,16,16,16,32,11,36,40,17,17,17,32,58,1,0,18,18,18,32,16,30,35,19,19,19,32,164,58,0,20,20,20,32,16,35,113,21,21,21,32,164,0,16,22,22,22,32,16,113,164,23,23,23,33,41,39,1,58,24,24,24,24,33,2,42,59,17,25,25,25,25,33,2,17,18,3,26,26,26,26,33,4,3,18,19,27,27,27,27,32,21,22,23,28,28,28,32,23,34,8,29,29,29,32,7,6,5,30,30,30,32,23,8,7,29,29,29,32,5,21,23,31,31,31,32,23,7,5,32,32,32,32,105,9,8,33,33,33,32,8,34,33,34,34,34,32,116,105,8,35,35,35,32,8,33,116,36,36,36,32,10,9,105,37,37,37,32,105,113,35,38,38,38,32,35,24,10,39,39,39,32,105,35,10,40,40,40,33,11,10,24,25,41,41,41,41,33,25,26,12,11,42,42,42,42,32,26,27,28,43,43,43,32,28,29,15,44,44,44,32,15,14,13,45,45,45,32,13,12,26,46,46,46,32,26,28,15,47,47,47,32,15,13,26,48,48,48,33,16,15,29,30,49,49,49,49,32,74,31,32,50,50,50,32,32,19,18,24,24,24,32,18,17,59,51,51,51,32,59,74,32,52,52,52,32,32,18,59,53,53,53,33,116,33,20,102,54,54,54,54,32,20,33,34,43,43,43,32,34,23,22,43,43,43,32,22,21,20,55,55,55,32,34,22,20,55,55,55,32,26,25,24,24,24,24,32,24,35,30,56,56,56,32,30,29,28,57,57,57,32,27,26,24,43,43,43,32,30,28,27,58,58,58,32,27,24,30,59,59,59,33,174,122,31,74,60,60,60,60,33,32,31,122,119,61,61,61,61,32,4,19,32,62,62,62,32,102,20,21,63,63,63,32,102,21,5,64,64,64,32,4,32,119,65,65,65,32,102,5,4,66,66,66,32,119,102,4,67,67,67,33,36,39,38,37,68,68,68,68,33,40,41,39,36,69,69,69,69,32,42,40,36,70,70,70,32,36,37,57,71,71,71,32,56,55,54,72,72,72,32,36,57,56,73,73,73,32,43,42,36,74,74,74,32,46,45,44,2,2,2,32,44,43,36,75,75,75,32,36,56,54,76,76,76,32,54,53,52,77,77,77,32,52,51,50,78,78,78,32,50,49,48,79,79,79,32,47,46,44,80,80,80,32,50,48,47,81,81,81,32,36,54,52,82,82,82,32,52,50,47,83,83,83,32,47,44,36,84,84,84,32,36,52,47,85,85,85,32,37,38,58,86,86,86,32,163,79,73,87,87,87,32,163,73,57,88,88,88,32,37,58,164,89,89,89,32,163,57,37,90,90,90,32,164,163,37,91,91,91,33,41,58,38,39,92,92,92,92,33,43,60,59,42,93,93,93,93,33,43,44,61,60,94,94,94,94,33,45,62,61,44,95,95,95,95,32,65,64,46,96,96,96,32,46,47,48,43,43,43,32,66,65,46,97,97,97,32,49,78,66,98,98,98,32,66,46,48,99,99,99,32,48,49,66,98,98,98,32,49,50,155,100,100,100,32,168,77,78,101,101,101,32,49,155,168,102,102,102,32,168,78,49,103,103,103,32,155,50,51,104,104,104,32,51,67,79,105,105,105,32,79,163,155,106,106,106,32,51,79,155,107,107,107,33,52,68,67,51,108,108,108,108,33,68,52,53,69,109,109,109,109,32,71,70,69,110,110,110,32,69,53,54,111,111,111,32,55,56,72,112,112,112,32,69,54,55,113,113,113,32,72,71,69,114,114,114,32,69,55,72,115,115,115,33,57,73,72,56,116,116,116,116,32,74,59,60,74,74,74,32,60,61,62,117,117,117,32,76,75,74,118,118,118,32,60,62,76,119,119,119,32,74,60,76,120,120,120,33,168,152,63,77,121,121,121,121,32,78,77,63,43,43,43,32,63,64,65,43,43,43,32,65,66,78,43,43,43,32,63,65,78,43,43,43,32,71,72,73,43,43,43,32,73,79,67,122,122,122,32,67,68,69,123,123,123,32,70,71,73,124,124,124,32,67,69,70,125,125,125,32,73,67,70,126,126,126,33,174,74,75,175,127,127,127,127,33,76,171,175,75,128,128,128,128,32,76,62,45,129,129,129,32,46,64,63,130,130,130,32,171,76,45,131,131,131,32,46,63,152,132,132,132,32,171,45,46,133,133,133,32,46,152,171,134,134,134,33,123,126,81,80,0,0,0,0,32,129,127,123,70,70,70,32,123,80,96,135,135,135,32,95,94,93,136,136,136,32,123,96,95,137,137,137,32,82,129,123,138,138,138,32,85,84,83,139,139,139,32,83,82,123,140,140,140,32,123,95,93,141,141,141,32,93,92,91,142,142,142,32,91,90,89,143,143,143,32,89,88,87,144,144,144,32,86,85,83,145,145,145,32,89,87,86,146,146,146,32,123,93,91,147,147,147,32,91,89,86,148,148,148,32,86,83,123,149,149,149,32,123,91,86,150,150,150,32,80,81,145,18,18,18,32,113,121,112,151,151,151,32,113,112,96,152,152,152,32,80,145,164,20,20,20,32,113,96,80,153,153,153,32,164,113,80,154,154,154,33,128,145,81,126,155,155,155,155,33,82,97,146,129,25,25,25,25,33,82,83,98,97,156,156,156,156,33,84,99,98,83,27,27,27,27,32,103,101,85,121,121,121,32,85,86,87,28,28,28,32,104,103,85,157,157,157,32,88,118,104,29,29,29,32,104,85,87,32,32,32,32,87,88,104,29,29,29,32,88,89,105,33,33,33,32,116,117,118,36,36,36,32,88,105,116,158,158,158,32,116,118,88,34,34,34,32,105,89,90,37,37,37,32,90,106,121,39,39,39,32,121,113,105,38,38,38,32,90,121,105,159,159,159,33,91,107,106,90,41,41,41,41,33,107,91,92,108,42,42,42,42,32,110,109,108,160,160,160,32,108,92,93,46,46,46,32,94,95,111,161,161,161,32,108,93,94,162,162,162,32,111,110,108,163,163,163,32,108,94,111,164,164,164,33,96,112,111,95,165,165,165,165,32,165,146,97,138,138,138,32,97,98,99,166,166,166,32,115,114,165,167,167,167,32,97,99,115,168,168,168,32,165,97,115,169,169,169,33,116,102,100,117,96,96,96,96,32,118,117,100,170,170,170,32,100,101,103,170,170,170,32,103,104,118,170,170,170,32,100,103,118,28,28,28,32,110,111,112,28,28,28,32,112,121,106,171,171,171,32,106,107,108,172,172,172,32,109,110,112,173,173,173,32,106,108,109,174,174,174,32,112,106,109,175,175,175,33,174,165,114,122,60,60,60,60,33,115,119,122,114,61,61,61,61,32,120,113,105,176,176,176,32,115,99,84,62,62,62,32,85,101,100,177,177,177,32,119,115,84,65,65,65,32,85,100,102,178,178,178,32,119,84,85,179,179,179,32,85,102,119,180,180,180,33,123,124,125,126,68,68,68,68,33,127,123,126,128,69,69,69,69,32,127,129,130,181,181,181,32,131,132,133,139,139,139,32,127,130,131,182,182,182,32,144,124,123,183,183,183,32,127,131,133,184,184,184,32,143,144,123,185,185,185,32,127,133,134,186,186,186,32,142,143,123,187,187,187,32,127,134,135,188,188,188,32,141,142,123,189,189,189,32,127,135,136,190,190,190,32,140,141,123,191,191,191,32,139,140,123,192,192,192,32,137,138,139,193,193,193,32,136,137,139,194,194,194,32,127,136,139,195,195,195,32,139,123,127,196,196,196,32,145,125,124,86,86,86,32,144,162,173,87,87,87,32,164,145,124,89,89,89,32,144,173,163,197,197,197,32,164,124,144,198,198,198,32,144,163,164,199,199,199,33,128,126,125,145,200,200,200,200,33,130,129,146,147,93,93,93,93,33,130,147,148,131,201,201,201,201,33,132,131,148,149,202,202,202,202,32,151,153,154,43,43,43,32,154,170,136,98,98,98,32,135,134,133,203,203,203,32,154,136,135,98,98,98,32,133,151,154,204,204,204,32,154,135,133,99,99,99,32,155,137,136,100,100,100,32,136,170,169,103,103,103,32,168,155,136,205,205,205,32,136,169,168,101,101,101,32,138,137,155,104,104,104,32,155,163,173,106,106,106,32,173,156,138,105,105,105,32,155,173,138,206,206,206,33,139,138,156,157,108,108,108,108,33,157,158,140,139,109,109,109,109,32,158,159,160,170,170,170,32,160,161,143,207,207,207,32,143,142,141,208,208,208,32,141,140,158,111,111,111,32,158,160,143,209,209,209,32,143,141,158,210,210,210,33,144,143,161,162,211,211,211,211,32,165,166,167,212,212,212,32,167,149,148,200,200,200,32,148,147,146,213,213,213,32,146,165,167,214,214,214,32,167,148,146,215,215,215,33,168,169,150,152,202,202,202,202,32,150,169,170,28,28,28,32,170,154,153,170,170,170,32,153,151,150,170,170,170,32,170,153,150,170,170,170,32,158,157,156,200,200,200,32,156,173,162,216,216,216,32,162,161,160,217,217,217,32,159,158,156,170,170,170,32,162,160,159,218,218,218,32,159,156,162,219,219,219,33,174,175,166,165,127,127,127,127,33,167,166,175,171,128,128,128,128,32,172,155,163,220,220,220,32,132,149,167,129,129,129,32,152,150,151,221,221,221,32,152,151,133,222,222,222,32,132,167,171,131,131,131,32,152,133,132,223,223,223,32,171,152,132,224,224,224],"vertices":[90.5878,1,0.820373,90.5878,4,0.820373,43.9918,1,5.16438,8.99998,1,9.49713,0.249979,1,9.49713,0.249964,1,17.511,0.25,1,17.511,9.73972,1,17.7501,17.1888,1,18.2996,34.4812,1,16.4565,45.2417,1,14.5894,41.4173,1,13.7306,45.553,1,13.013,56.7352,1,10.502,67.7808,1,7.4453,77.4427,1,4.25346,79.6142,1,5.09113,43.9918,4,5.16438,8.99998,4,9.49713,0.249979,4,9.49713,0.24996,4,19,0.249963,4,17.511,0.25,4,17.511,9.73972,4,17.7501,45.2417,4,14.5894,41.4173,4,13.7306,45.553,4,13.013,56.7352,4,10.502,67.7808,4,7.4453,77.4427,4,4.25346,79.6142,4,5.09113,-8.75001,4,7.5,0.249993,4,6,8.99996,4,19,17.1888,4,18.2996,79.1685,4,5.26306,88.6447,1,-4.37114e-8,90.5878,1,-0.820374,90.5878,4,-0.820374,88.6447,4,-1.74846e-7,88.6447,1,-4.37114e-8,88.6447,4,-1.74846e-7,64.6898,1,-4.37114e-8,43.9918,1,-5.16438,8.99998,1,-9.49713,0.249979,1,-9.49713,0.249964,0.999999,-17.511,0.25,0.999999,-17.511,9.73972,0.999999,-17.7501,17.1888,0.999999,-18.2996,34.4812,0.999999,-16.4565,45.2417,0.999999,-14.5894,41.4173,0.999999,-13.7306,45.553,0.999999,-13.013,56.7352,1,-10.502,67.7808,1,-7.4453,77.4427,1,-4.25346,79.6142,1,-5.09113,92.4385,4,-1.74846e-7,64.6898,4,-1.74846e-7,43.9918,4,-5.16438,8.99998,4,-9.49713,0.249979,4,-9.49713,0.24996,4,-19,0.249963,4,-17.511,0.25,4,-17.511,9.73972,4,-17.7501,45.2417,4,-14.5894,41.4173,4,-13.7306,45.553,4,-13.013,56.7352,4,-10.502,67.7808,4,-7.4453,77.4427,4,-4.25346,79.6142,4,-5.09113,-8.75,4,-1.74846e-7,-8.75001,4,-7.5,0.249993,4,-6,8.99996,4,-19,17.1888,4,-18.2996,79.1685,4,-5.26306,90.5878,-1,0.820374,90.5878,-4,0.820374,43.9918,-1,5.16438,8.99998,-1,9.49713,0.249979,-1,9.49713,0.249964,-0.999999,17.511,0.25,-0.999999,17.511,9.73972,-0.999999,17.7501,17.1888,-0.999999,18.2996,34.4812,-0.999999,16.4565,45.2417,-0.999999,14.5894,41.4173,-0.999999,13.7306,45.553,-0.999999,13.013,56.7352,-1,10.502,67.7808,-1,7.4453,77.4427,-1,4.25346,79.6142,-1,5.09113,43.9918,-4,5.16438,8.99998,-4,9.49713,0.249979,-4,9.49713,0.24996,-4,19,0.249963,-4,17.511,0.24996,8.30516e-7,19,0.25,-4,17.511,9.73972,-4,17.7501,34.4812,7.19338e-7,16.4565,45.2417,-4,14.5894,41.4173,-4,13.7306,45.553,-4,13.013,56.7352,-4,10.502,67.7808,-4,7.4453,77.4427,-4,4.25346,79.6142,-4,5.09113,79.1685,2.30056e-7,5.26306,-8.75001,-4,7.5,0.249993,-4,6,8.99996,8.30516e-7,19,8.99996,-4,19,17.1888,-4,18.2996,0.249993,2.62268e-7,6,57.0998,5.22678e-7,11.9575,79.1685,-4,5.26306,-8.75001,3.27835e-7,7.5,88.6447,-1,4.37114e-8,90.5878,-1,-0.820373,90.5878,-4,-0.820373,88.6447,-4,1.74846e-7,88.6447,-1,4.37114e-8,88.6447,-4,1.74846e-7,64.6898,-1,4.37114e-8,43.9918,-1,-5.16438,8.99998,-1,-9.49713,0.249979,-1,-9.49713,0.249964,-1,-17.511,0.25,-1,-17.511,9.73972,-1,-17.7501,17.1888,-1,-18.2996,34.4812,-1,-16.4565,45.2417,-1,-14.5894,41.4173,-1,-13.7306,45.553,-1,-13.013,56.7352,-1,-10.502,67.7808,-1,-7.4453,77.4427,-1,-4.25346,79.6142,-1,-5.09113,92.4385,-4,1.74846e-7,64.6898,-4,1.74846e-7,43.9918,-4,-5.16438,8.99998,-4,-9.49713,0.249979,-4,-9.49713,0.24996,-4,-19,0.249963,-4,-17.511,0.24996,-8.30516e-7,-19,0.25,-4,-17.511,9.73972,-4,-17.7501,34.4812,-7.19338e-7,-16.4565,45.2417,-4,-14.5894,41.4173,-4,-13.7306,45.553,-4,-13.013,56.7352,-4,-10.502,67.7808,-4,-7.4453,77.4427,-4,-4.25346,79.6142,-4,-5.09113,79.1685,-2.30056e-7,-5.26306,92.4385,0,0,-8.75,-4,1.74846e-7,-8.75001,-4,-7.5,0.249993,-4,-6,8.99996,-8.30516e-7,-19,8.99996,-4,-19,17.1888,-4,-18.2996,0.249993,-2.62268e-7,-6,57.0998,-5.22678e-7,-11.9575,79.1685,-4,-5.26306,-8.75,0,0,-8.75001,-3.27835e-7,-7.5],"metadata":{"generator":"io_three","normals":225,"uvs":0,"vertices":176,"version":3,"faces":304,"type":"Geometry"}},"turnout_R_b":{"uvs":[],"vertices":[215.75,1,-17.5,125.656,1,-17.5,120.814,0.999999,-14.4335,112.105,1,-9.50002,215.75,1,-9.50002,215.75,4,-19,215.75,4,-17.5,215.75,4,-9.50002,215.75,4,-6.50003,125.656,4,-17.5,112.105,4,-9.5,128.025,4,-19,110.778,4,-8.74826,100.475,4,-3.5623,92.4385,4,-0.000017945,206.75,4,-8.00003,206.75,4,8.00001,89.9301,4,1.1119,79.1685,4,5.26304,68.2164,4,8.88112,65.9801,4,9.49998,215.75,4,9.49998,215.75,4,6.5,215.75,0.999999,9.49998,65.98,1,9.49998,215.75,4,19,215.75,0.999999,17.5,215.75,4,17.5,57.0998,1,11.9575,45.8457,1,14.4846,34.4812,1,16.4565,26.0212,1,17.5,26.0212,4,17.5,23.0336,4,17.8684,11.5305,4,18.7169,0.25,4,19,89.9301,1,1.1119,100.475,1,-3.5623,26.0311,0.738152,17.4987,123.372,0.999993,-16.0534,71.1734,4,7.90423,14.6363,3.99999,18.4878,215.75,-0.999999,-17.5,125.656,-0.999999,-17.5,120.814,-0.999998,-14.4335,112.105,-0.999999,-9.50002,215.75,-1,-9.50002,215.75,-4,-19,215.75,-4,-17.5,215.75,-4,-9.50002,215.75,-4,-6.50003,215.75,2.84125e-7,-6.50003,215.75,8.30517e-7,-19,125.656,-4,-17.5,112.105,-4,-9.5,128.025,8.30517e-7,-19,128.025,-4,-19,110.778,-4,-8.74826,100.475,-4,-3.5623,92.4385,-4,-0.0000182947,206.75,-4,-8.00003,206.75,3.49692e-7,-8.00003,206.75,-4,8.00001,89.9301,-4,1.1119,79.1685,-4,5.26304,68.2164,-4,8.88112,65.9801,-4,9.49998,215.75,-4,9.49998,215.75,-4,6.5,215.75,-2.84124e-7,6.5,206.75,-3.49691e-7,8.00001,215.75,-1,9.49998,65.98,-1,9.49998,215.75,-4,19,215.75,-8.30516e-7,19,215.75,-1,17.5,215.75,-4,17.5,57.0998,-1,11.9575,45.8457,-1,14.4846,34.4812,-1,16.4565,26.0212,-1,17.5,26.0212,-4,17.5,23.0336,-4,17.8684,11.5305,-4,18.7169,0.25,-4,19,0.25,-8.30515e-7,19,79.1685,-2.30055e-7,5.26304,89.9301,-1,1.1119,89.9301,-4.86029e-8,1.1119,68.2164,-3.88206e-7,8.88112,100.475,-0.999999,-3.5623,100.475,1.55713e-7,-3.5623,57.0998,-5.22677e-7,11.9575,110.778,3.82399e-7,-8.74826,45.8457,-6.33143e-7,14.4846,120.814,6.3091e-7,-14.4335,34.4812,-7.19338e-7,16.4565,23.0336,-7.81054e-7,17.8684,11.5305,-8.18144e-7,18.7169,26.0311,-0.738154,17.4987,59.9902,-4.87714e-7,11.1576,123.372,-0.999992,-16.0534,71.1734,-4,7.90423,14.6363,-3.99999,18.4878],"normals":[-5.29267e-9,1,4.47035e-8,-0.2173,0.913796,-0.343158,-4.02558e-9,1,-1.52085e-7,-2.68937e-8,1,2.8797e-7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1.90536e-7,0,1,-8.74127e-8,0.00000301997,-1,0,0,-1,-1.07264e-8,1,-8.46932e-9,-0.266718,0.000006783,-0.963775,-2.98023e-8,1,-5.96046e-8,-0.266712,0,-0.963776,-0.26671,0,-0.963777,-0.266712,-0.00000409272,-0.963776,-0.164398,0,0.986394,-1.32455e-8,1,7.94732e-8,-9.20156e-9,1,-0.00000128487,-0.0019304,0.999989,-0.00435488,3.33992e-10,1,4.66374e-8,8.85592e-9,1,2.12082e-7,2.35142e-9,1,5.6312e-8,1.32456e-8,1,7.94732e-8,2.83663e-10,1,2.98023e-8,-0.0110048,0.999384,-0.0333122,1.35203e-8,1,-1.94687e-7,6.3676e-9,1,1.20742e-7,6.1191e-9,1,1.50316e-7,5.2845e-9,1,1.90953e-8,-0.1644,0,-0.986394,0,0,1,2.51326e-9,1,-1.49011e-8,3.1838e-9,1,-3.52311e-7,1.00661e-8,1,9.19979e-8,6.69923e-8,1,0.0000015143,2.46268e-9,1,-1.67169e-7,4.4254e-9,1,0,5.02689e-9,1,-0.00000190032,-0.0441647,0.799732,-0.59873,3.04696e-8,1,0.00000374174,8.89046e-9,1,1.20526e-7,-1.68165e-7,0,1,2.0106e-7,0,-1,-0.492902,2.41203e-7,-0.870085,-0.492896,0,-0.870088,-0.492902,0,-0.870085,-0.492897,-0.00000959098,-0.870088,-0.219099,0,-0.975703,-0.40524,0,-0.91421,-0.405244,3.63274e-8,-0.914209,-0.405239,7.2655e-8,-0.914211,-0.40524,0,-0.91421,-0.40524,-0.00000391356,-0.91421,-0.313679,0,-0.949529,-0.313678,0,-0.949529,-0.313682,-0.00000968444,-0.949528,-0.449608,0,-0.893226,-0.535003,0,-0.84485,-0.534997,0,-0.844854,-0.534998,-0.0000122842,-0.844853,-0.535003,0,-0.84485,-0.534989,0.0000456737,-0.844859,-0.025081,0,-0.999685,-0.0735641,0,-0.99729,-0.0735679,0,-0.99729,-0.0735627,-0.00000402435,-0.997291,-0.170959,0,-0.985278,-0.359892,3.70739e-8,-0.932994,-0.359892,0,-0.932994,-0.359892,0,-0.932994,-0.12241,0,-0.99248,-0.122407,0,-0.99248,-0.12241,0,-0.99248,-0.122408,-0.00000768935,-0.99248,0.122408,0.00000745465,0.99248,-5.29268e-9,-1,-4.47035e-8,-4.60067e-9,-1,-2.49753e-7,-0.217972,-0.913237,-0.344219,-2.93152e-8,-1,2.25833e-7,1,0,0,1,0,0,-8.74127e-8,-0.00000301997,-1,0,0,-1,-1.07264e-8,-1,-8.46932e-9,-0.266712,0.000003657,-0.963776,-0.266718,-0.000006783,-0.963775,-0.266712,0.00000402235,-0.963776,-1.32456e-8,-1,-7.94732e-8,6.3676e-9,-1,2.3009e-8,-0.0104337,-0.999447,-0.0315836,0.0019304,-0.999989,0.00435488,6.92897e-9,-1,-1.10819e-7,9.82766e-9,-1,-2.0426e-7,1.13449e-8,-1,-2.27019e-7,8.5317e-10,-1,-4.90826e-8,1.32455e-8,-1,-7.94732e-8,-1.24445e-9,-1,-2.98023e-8,-9.20156e-9,-1,-0.00000128487,-2.09339e-9,-1,-5.01327e-8,-1.1894e-9,-1,-1.66083e-7,0,0,1,2.51328e-9,-1,-9.68575e-8,6.85833e-8,-1,0.00000147007,2.78582e-9,-1,-4.26512e-7,7.2688e-10,-1,-2.9808e-7,9.30355e-9,-1,-5.74008e-9,4.4254e-9,-1,0,-0.0456476,-0.784195,-0.618833,3.85846e-8,-1,0.00000490762,5.02702e-9,-1,-0.00000254734,1.01605e-8,-1,1.37744e-7,-1.68165e-7,0,1,2.0106e-7,0,-1,-0.492902,-2.41203e-7,-0.870085,-0.492897,0,-0.870088,-0.492896,0.0000110524,-0.870088,-0.40524,0,-0.91421,-0.405239,5.44912e-8,-0.914211,-0.40524,0.00000372817,-0.91421,-0.313682,0.00000968444,-0.949528,-1,0,0,-0.534998,0,-0.844853,-0.535003,0,-0.84485,-0.534989,0.0000318312,-0.844859,-0.535003,0,-0.84485,-0.534997,-0.0000201114,-0.844854,-0.0735627,0.00000402435,-0.997291,-0.359892,0,-0.932994,-0.12241,0,-0.99248,-0.122408,0,-0.99248,-0.122407,0.0000104048,-0.99248,0.122408,-0.00000745465,0.99248],"metadata":{"generator":"io_three","normals":135,"uvs":0,"vertices":104,"version":3,"faces":178,"type":"Geometry"},"faces":[32,4,0,1,0,0,0,32,1,39,2,1,1,1,32,2,3,4,2,2,2,32,1,2,4,3,3,3,32,52,5,6,4,4,4,32,52,6,0,5,5,5,32,7,8,51,6,6,6,32,52,0,4,7,7,7,32,4,7,51,7,7,7,32,4,51,52,8,8,8,33,1,0,6,9,9,9,9,9,33,4,3,10,7,10,10,10,10,33,52,55,11,5,11,11,11,11,33,5,11,9,6,12,12,12,12,32,24,20,19,13,13,13,32,89,100,92,14,14,14,32,92,28,24,15,15,15,32,24,19,89,16,16,16,32,24,89,92,17,17,17,33,51,8,15,61,18,18,18,18,32,15,8,7,19,19,19,32,7,10,12,20,20,20,32,13,14,17,21,21,21,32,7,12,13,22,22,22,32,15,7,13,23,23,23,32,15,13,17,24,24,24,32,21,22,16,25,25,25,32,16,15,17,26,26,26,32,18,40,19,27,27,27,32,16,17,18,28,28,28,32,20,21,16,29,29,29,32,16,18,19,30,30,30,32,16,19,20,31,31,31,33,69,70,16,22,32,32,32,32,33,23,21,20,24,33,33,33,33,32,27,25,74,5,5,5,32,69,22,21,4,4,4,32,69,21,23,5,5,5,32,26,27,74,7,7,7,32,69,23,26,7,7,7,32,74,69,26,7,7,7,32,31,26,23,34,34,34,32,23,24,28,35,35,35,32,23,28,29,36,36,36,32,30,31,23,37,37,37,32,23,29,30,38,38,38,32,35,25,27,39,39,39,32,27,32,33,40,40,40,32,33,41,34,41,41,41,32,34,35,27,42,42,42,32,27,33,34,43,43,43,33,74,25,35,85,44,44,44,44,33,32,27,26,31,45,45,45,45,32,12,10,3,46,46,46,32,3,2,95,47,47,47,32,93,12,3,48,48,48,32,3,95,93,49,49,49,33,28,92,94,29,50,50,50,50,32,91,88,36,51,51,51,32,36,17,14,52,52,52,32,14,13,37,53,53,53,32,37,91,36,54,54,54,32,36,14,37,55,55,55,32,86,89,19,56,56,56,32,40,18,86,57,57,57,32,19,40,86,58,58,58,32,91,37,13,7,7,7,32,13,12,93,59,59,59,32,13,93,91,59,59,59,33,15,16,70,61,5,5,5,5,32,1,9,11,60,60,60,32,55,95,2,61,61,61,32,55,2,39,62,62,62,32,1,11,55,63,63,63,32,1,55,39,64,64,64,33,98,85,35,34,65,65,65,65,32,33,97,98,66,66,66,32,98,34,41,67,67,67,32,98,41,33,68,68,68,33,29,94,96,30,69,69,69,69,32,18,17,36,70,70,70,32,36,88,86,71,71,71,32,36,86,18,72,72,72,32,33,32,31,73,73,73,32,31,30,96,74,74,74,32,97,33,31,75,75,75,32,31,96,97,76,76,76,33,30,31,38,96,77,77,77,77,32,19,24,20,13,13,13,32,43,42,46,78,78,78,32,46,45,44,79,79,79,32,44,101,43,80,80,80,32,46,44,43,81,81,81,32,48,47,52,82,82,82,32,51,50,49,82,82,82,32,51,49,46,83,83,83,32,42,48,52,83,83,83,32,51,46,42,83,83,83,32,52,51,42,5,5,5,33,48,42,43,53,9,9,9,9,33,46,49,54,45,84,84,84,84,33,52,47,56,55,85,85,85,85,33,47,48,53,56,86,86,86,86,32,72,77,92,15,15,15,32,72,92,100,87,87,87,32,65,66,72,88,88,88,32,72,100,89,89,89,89,32,72,89,65,16,16,16,33,51,61,60,50,18,18,18,18,32,62,68,67,90,90,90,32,67,66,65,91,91,91,32,65,102,64,92,92,92,32,63,59,58,93,93,93,32,67,65,64,94,94,94,32,67,64,63,95,95,95,32,62,67,63,96,96,96,32,62,63,58,97,97,97,32,49,50,60,98,98,98,32,60,62,58,99,99,99,32,57,54,49,100,100,100,32,60,58,57,101,101,101,32,57,49,60,102,102,102,33,69,68,62,70,32,32,32,32,33,71,72,66,67,103,103,103,103,32,74,73,76,7,7,7,32,74,76,75,83,83,83,32,67,68,69,4,4,4,32,74,75,71,83,83,83,32,71,67,69,83,83,83,32,71,69,74,7,7,7,32,71,75,80,104,104,104,32,71,80,79,105,105,105,32,77,72,71,106,106,106,32,71,79,78,107,107,107,32,78,77,71,108,108,108,32,76,73,84,109,109,109,32,83,103,82,110,110,110,32,76,84,83,111,111,111,32,82,81,76,112,112,112,32,83,82,76,113,113,113,33,74,85,84,73,114,114,114,114,33,81,80,75,76,115,115,115,115,32,45,54,57,116,116,116,32,93,95,44,117,117,117,32,45,57,93,48,48,48,32,93,44,45,118,118,118,33,77,78,94,92,50,50,50,50,32,87,88,91,119,119,119,32,91,90,58,7,7,7,32,59,63,87,52,52,52,32,91,58,59,120,120,120,32,91,59,87,121,121,121,32,65,89,86,56,56,56,32,86,64,102,57,57,57,32,86,102,65,122,122,122,32,58,90,91,123,123,123,32,91,93,57,59,59,59,32,91,57,58,59,59,59,33,60,61,70,62,7,7,7,7,32,101,44,95,124,124,124,32,55,56,53,125,125,125,32,43,101,95,126,126,126,32,55,53,43,127,127,127,32,43,95,55,128,128,128,33,98,83,84,85,65,65,65,65,32,98,97,82,66,66,66,32,103,83,98,67,67,67,32,82,103,98,129,129,129,33,78,79,96,94,69,69,69,69,32,87,63,64,70,70,70,32,64,86,88,72,72,72,32,64,88,87,130,130,130,32,80,81,82,131,131,131,32,97,96,79,132,132,132,32,80,82,97,75,75,75,32,97,79,80,133,133,133,33,79,96,99,80,134,134,134,134,32,65,66,72,88,88,88]},"turnout_L_a":{"normals":[-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534996,0,-0.844855,-1.12262e-14,1,-4.98865e-8,-2.01378e-9,1,-4.34445e-8,0,1,-4.98865e-8,-1.93861e-9,1,-4.48604e-8,1.80506e-10,1,-4.56916e-8,-2.06171e-9,1,-4.56455e-8,1.37714e-10,1,-4.43967e-8,-9.42067e-10,1,-4.02524e-8,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,3.37906e-9,1,-4.12318e-8,1.35172e-9,1,-4.13479e-8,-6.78548e-10,1,-4.13645e-8,2.51045e-9,1,-4.42373e-8,-4.72985e-9,1,-4.10987e-8,2.75902e-9,1,-4.29512e-8,6.48216e-10,1,-4.30349e-8,-1.62677e-9,1,-4.77945e-8,-3.05415e-9,1,-4.33853e-8,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.689069,0,-0.724696,0.575808,0,0.817585,0.615229,0,0.788348,0.65317,0,0.757211,0.689147,-5.07059e-7,0.724622,1.53516e-8,1,-1.46159e-8,-0.689144,0,-0.724624,-0.35989,0,-0.932995,-0.405242,0,-0.914209,-0.449607,0,-0.893227,-0.492901,0,-0.870086,-0.534994,0,-0.844856,2.3806e-8,1,-6.94077e-8,1.69538e-8,1,-1.19401e-8,-2.43728e-8,1,-8.17886e-8,-2.83562e-8,1,-8.04939e-8,0.575808,0,0.817585,0.615229,0,0.788348,0.653171,0,0.757211,0.689147,0,0.724622,-2.62771e-9,1,-8.01815e-8,-1.04234e-8,1,-5.2888e-8,9.81558e-10,1,-4.77594e-8,1.62811e-9,1,-4.48518e-8,0,1,-4.8034e-8,7.13915e-9,1,-5.39129e-8,-1.14e-9,1,-4.38361e-8,-3.28962e-9,1,-4.37273e-8,7.29344e-9,1,-4.5485e-8,5.0529e-9,1,-4.57882e-8,-3.75655e-8,1,-7.45052e-8,-9.6079e-9,1,-4.20829e-8,-9.04154e-9,1,-1.79325e-8,1.15993e-8,1,-1.08014e-7,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,-1.71421e-8,1,-7.85686e-8,2.24578e-8,1,-9.95472e-9,2.19424e-8,1,-1.10446e-8,-2.84851e-8,1,-7.52021e-8,-6.42811e-8,1,-1.47428e-7,-7.14385e-8,1,-1.44097e-7,-7.84226e-8,1,-1.40419e-7,-2.40076e-8,1,-8.42456e-8,1.8261e-8,1,-1.73858e-8,-0.405242,0,-0.914209,-0.449607,0,-0.893226,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,1.0035e-8,1,-4.61608e-8,0.581237,0,0.813734,-0.813734,0,-0.581237,0.707109,0,-0.707105,0.707107,0,-0.707107,0.707108,0,-0.707106,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707107,-0.0000216099,-0.707107,0.707109,0.0000081038,-0.707105,0.707106,0.0000431584,-0.707108,-0.00260037,0.999993,0.00260032,0.707108,-0.00000802852,-0.707105,-0.313679,0,-0.949529,0,1,0,2.65033e-9,1,-4.04452e-8,-1.69439e-9,1,-4.35346e-8,5.66244e-10,1,-4.15627e-8,-1.60987e-10,1,-3.94962e-8,0,1,-4.22264e-8,1.10567e-9,1,-4.28749e-8,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0,0,-1,-0.073564,0,-0.99729,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.2191,0,-0.975702,-0.266711,0,-0.963776,-0.313679,0,-0.949529,-2.01976e-14,1,-9.24436e-8,-1.44413e-8,1,-3.93227e-7,0,1,0,0,1,-2.48357e-7,8.87305e-9,1,-2.89678e-7,-5.42823e-9,1,-8.0233e-8,-9.35859e-9,1,-7.987e-8,-1.32662e-8,1,-7.93148e-8,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.335866,0,-0.94191,1.55275e-8,1,-9.17037e-7,-0.335866,0,-0.94191,-0.999994,0.00000982353,-0.00342704,-1,0,-0.00000259724,0.534996,0,0.844854,0.534996,0,0.844854,0.492898,0,0.870087,0.122409,0,0.99248,7.48412e-15,-1,3.32576e-8,-1.97224e-9,-1,3.71499e-8,0,-1,4.1799e-8,-1.82364e-9,-1,3.43507e-8,-1.80506e-10,-1,4.56916e-8,2.06171e-9,-1,4.56455e-8,-4.57433e-9,-1,4.3304e-8,-2.9771e-9,-1,4.39838e-8,4.89768e-9,-1,4.60248e-8,-1.35172e-9,-1,4.13479e-8,6.78548e-10,-1,4.13645e-8,1.16194e-9,-1,5.07199e-8,3.64912e-9,-1,5.06018e-8,6.12774e-9,-1,5.03618e-8,-7.2024e-10,-1,4.78166e-8,1.30142e-9,-1,3.82356e-8,-6.19593e-9,-1,4.70484e-8,0.689147,5.07059e-7,0.724622,-3.07033e-8,-1,2.92319e-8,0,-1,0,7.4569e-8,-1,1.41893e-7,8.14408e-8,-1,1.38062e-7,-3.14037e-8,-1,2.70887e-8,-1.58023e-8,-1,3.59186e-8,7.3317e-9,-1,3.40736e-8,-1.56263e-8,-1,6.78673e-8,9.14892e-9,-1,2.71325e-8,1.14e-9,-1,4.38361e-8,3.28962e-9,-1,4.37273e-8,5.43117e-9,-1,4.35133e-8,7.55968e-9,-1,4.31944e-8,0,-1,0,-3.11768e-8,-1,3.11768e-8,1.80831e-8,-1,3.58649e-8,1.36101e-8,-1,5.53858e-8,0,-1,0,-4.38849e-8,-1,2.20892e-8,-4.15079e-8,-1,2.62846e-8,-3.87319e-8,-1,3.02262e-8,-3.65219e-8,-1,3.47717e-8,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-1.338e-8,-1,6.15477e-8,0,0,0,0.707109,-0.0000081038,-0.707105,0.707108,0.00000259162,-0.707106,0.707106,-0.0000431584,-0.707108,0.013,-0.999831,-0.0129999,0.707108,0.00000802852,-0.707105,0,-1,0,-2.65033e-9,-1,4.04452e-8,-3.31684e-10,-1,5.27921e-8,7.43291e-10,-1,5.15428e-8,2.49808e-9,-1,4.65707e-8,0,-1,4.62218e-8,1.08392e-9,-1,5.03428e-8,0,0,-1,0,-1,0,1.87172e-8,-1,1.5974e-7,2.65325e-8,-1,1.5863e-7,-0.266711,0,-0.963776,-0.999994,-0.00000982353,-0.00342704],"uvs":[],"vertices":[156.808,4,-42.988,164.932,4,-50.7141,156.808,0.999998,-42.988,130.559,0.999999,-20.6044,139.989,0.999999,-27.246,149.082,0.999999,-34.3423,157.816,0.999998,-41.8762,165.993,0.999998,-49.6531,66.363,0.999999,-30.5264,75.3838,0.999999,-34.0061,84.223,0.999998,-37.9243,92.8594,0.999998,-42.2714,101.272,0.999998,-47.0371,109.441,0.999998,-52.2098,117.346,0.999997,-57.7771,124.968,0.999997,-63.7256,132.289,0.999997,-70.0409,139.115,0.999997,-76.5313,129.725,0.999999,-21.852,139.095,0.999999,-28.4512,148.13,0.999998,-35.5022,164.932,0.999998,-50.7141,115.928,0.999999,-22.5844,125.279,0.999999,-28.5057,134.328,0.999998,-34.8788,143.054,0.999998,-41.6881,151.434,0.999998,-48.9174,159.274,0.999998,-56.3727,69.5643,0.999999,-21.5791,79.0204,0.999999,-25.2266,88.286,0.999999,-29.3338,97.339,0.999999,-33.8906,106.157,0.999998,-38.8862,114.72,0.999998,-44.3084,123.006,0.999998,-50.1443,130.997,0.999998,-56.3798,138.671,0.999997,-62.9997,145.835,0.999997,-69.8117,66.8684,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5679,93.5667,0.999998,-40.9481,102.043,0.999998,-45.7501,110.274,0.999998,-50.9622,118.239,0.999998,-56.5719,125.92,0.999997,-62.5657,133.297,0.999997,-68.9291,140.176,0.999997,-75.4703,129.725,4,-21.852,139.095,4,-28.4512,148.13,4,-35.5022,130.559,4,-20.6044,139.989,4,-27.246,149.082,4,-34.3423,157.816,4,-41.8762,165.993,4,-49.6531,115.928,4,-22.5844,125.279,4,-28.5057,134.328,4,-34.8788,143.054,4,-41.6881,151.434,4,-48.9174,159.274,4,-56.3727,69.5643,4,-21.5791,79.0204,4,-25.2266,88.286,4,-29.3338,97.339,4,-33.8906,106.157,4,-38.8862,114.72,4,-44.3084,123.006,4,-50.1443,130.997,4,-56.3798,138.671,4,-62.9997,145.835,4,-69.8117,66.8684,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5679,93.5667,4,-40.9481,102.043,4,-45.7501,110.274,4,-50.9622,118.239,4,-56.5719,125.92,4,-62.5657,133.297,4,-68.9291,140.176,4,-75.4703,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9243,92.8594,4,-42.2714,101.272,4,-47.0371,109.441,4,-52.2098,117.346,4,-57.7771,124.968,4,-63.7256,132.289,4,-70.0409,139.115,4,-76.5313,164.226,4,-64.1488,153.265,4,-75.109,156.801,4,-58.8455,147.962,4,-67.6843,0.250039,0.999999,-19.0114,9.66539,0.999999,-19.2487,19.3078,0.999999,-19.96,28.9038,0.999999,-21.1435,38.4301,0.999999,-22.7964,47.8638,0.999999,-24.9148,57.1823,0.999999,-27.4936,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,9.00004,0.999999,-19.0114,9.00004,4,-19.0114,109.601,4,-19,125.221,0.999999,-19,118.077,0.999999,-19,109.601,0.999999,-19,128.025,0.999999,-19,128.025,4,-19,125.221,4,-19,105.298,4,-19,93.1735,4,-19,81.5995,4,-19,70.4871,4,-19,61.7573,0.999999,-19,59.7588,0.999999,-19,61.7573,4,-19,49.3454,0.999999,-19,39.1853,0.999999,-19,29.2218,0.999999,-19,23.7784,4,-19,19.4024,4,-19,23.7784,0.999999,-19,9.67761,4,-19,9.00004,4,-19,0.250039,4,-19,0.25,-8.30515e-7,-19,130.559,-9.00646e-7,-20.6044,139.989,-0.00000119096,-27.246,149.082,-0.00000150115,-34.3423,157.816,-0.00000183047,-41.8762,165.993,-0.00000217041,-49.6531,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9243,92.8594,-0.00000184774,-42.2714,101.272,-0.00000205606,-47.0371,109.441,-0.00000228216,-52.2098,117.346,-0.00000252552,-57.7771,124.968,-0.00000278553,-63.7256,132.289,-0.00000306158,-70.0409,139.115,-0.00000334529,-76.5313,156.808,-4,-42.988,164.932,-4,-50.7141,156.808,-1,-42.988,130.559,-1,-20.6044,139.989,-1,-27.246,149.082,-1,-34.3423,157.816,-1,-41.8762,165.993,-1,-49.6531,66.363,-1,-30.5264,75.3838,-1,-34.0061,84.223,-1,-37.9243,92.8594,-1,-42.2714,101.272,-1,-47.0371,109.441,-1,-52.2098,117.346,-1,-57.7771,124.968,-1,-63.7256,132.289,-1,-70.0409,139.115,-1,-76.5313,129.725,-1,-21.852,139.095,-1,-28.4512,148.13,-1,-35.5022,164.932,-1,-50.7141,115.928,-1,-22.5844,125.279,-1,-28.5057,134.328,-1,-34.8788,143.054,-1,-41.6881,151.434,-1,-48.9174,159.274,-1,-56.3727,69.5643,-1,-21.5791,79.0204,-1,-25.2266,88.286,-1,-29.3338,97.339,-1,-33.8906,106.157,-1,-38.8862,114.72,-1,-44.3084,123.006,-1,-50.1443,130.997,-1,-56.3798,138.671,-1,-62.9997,145.835,-1,-69.8117,66.8684,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5679,93.5667,-1,-40.9481,102.043,-1,-45.7501,110.274,-1,-50.9622,118.239,-1,-56.5719,125.92,-1,-62.5657,133.297,-1,-68.9291,140.176,-1,-75.4703,129.725,-4,-21.852,139.095,-4,-28.4512,148.13,-4,-35.5022,130.559,-4,-20.6044,139.989,-4,-27.246,149.082,-4,-34.3423,157.816,-4,-41.8762,165.993,-4,-49.6531,115.928,-4,-22.5844,125.279,-4,-28.5057,134.328,-4,-34.8788,143.054,-4,-41.6881,151.434,-4,-48.9174,159.274,-4,-56.3727,69.5643,-4,-21.5791,79.0204,-4,-25.2266,88.286,-4,-29.3338,97.339,-4,-33.8906,106.157,-4,-38.8862,114.72,-4,-44.3084,123.006,-4,-50.1443,130.997,-4,-56.3798,138.671,-4,-62.9997,145.835,-4,-69.8117,66.8684,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5679,93.5667,-4,-40.9481,102.043,-4,-45.7501,110.274,-4,-50.9622,118.239,-4,-56.5719,125.92,-4,-62.5657,133.297,-4,-68.9291,140.176,-4,-75.4703,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9243,92.8594,-4,-42.2714,101.272,-4,-47.0371,109.441,-4,-52.2098,117.346,-4,-57.7771,124.968,-4,-63.7256,132.289,-4,-70.0409,139.115,-4,-76.5313,164.226,-4,-64.1488,153.265,-4,-75.109,156.801,-4,-58.8455,147.962,-4,-67.6843,164.226,-0.00000280403,-64.1488,153.265,-0.00000328312,-75.109,156.801,-0.00000257222,-58.8455,147.962,-0.00000295858,-67.6843,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,0.250039,-1,-19.0114,9.66539,-1,-19.2487,19.3078,-1,-19.96,28.9038,-1,-21.1435,38.4301,-1,-22.7964,47.8638,-1,-24.9148,57.1823,-1,-27.4936,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,9.00004,-8.31017e-7,-19.0114,9.00004,-1,-19.0114,9.00004,-4,-19.0114,128.025,-8.30516e-7,-19,109.601,-4,-19,125.221,-1,-19,118.077,-1,-19,109.601,-1,-19,128.025,-1,-19,128.025,-4,-19,125.221,-4,-19,105.298,-4,-19,93.1735,-4,-19,81.5995,-4,-19,70.4871,-4,-19,61.7573,-1,-19,59.7588,-1,-19,61.7573,-4,-19,49.3454,-1,-19,39.1853,-1,-19,29.2218,-1,-19,23.7784,-4,-19,19.4024,-4,-19,23.7784,-1,-19,9.67761,-4,-19,9.00004,-4,-19,0.250039,-4,-19],"faces":[33,50,0,2,20,0,0,0,0,33,20,19,49,50,1,1,1,1,33,19,18,48,49,2,2,2,2,33,18,121,126,48,3,3,3,3,32,22,123,122,4,4,4,32,18,23,22,5,5,5,32,22,122,121,6,6,6,32,22,121,18,7,7,7,33,24,23,18,19,8,8,8,8,33,25,24,19,20,9,9,9,9,33,26,25,20,2,10,10,10,10,33,27,26,2,21,11,11,11,11,33,29,28,62,63,12,12,12,12,33,26,27,61,60,13,13,13,13,33,25,26,60,59,14,14,14,14,33,24,25,59,58,15,15,15,15,33,23,24,58,57,16,16,16,16,33,22,23,57,56,17,17,17,17,33,39,38,28,29,18,18,18,18,33,40,39,29,30,19,19,19,19,33,41,40,30,31,20,20,20,20,33,42,41,31,32,21,21,21,21,33,43,42,32,33,22,22,22,22,33,44,43,33,34,23,23,23,23,33,45,44,34,35,24,24,24,24,33,46,45,35,36,25,25,25,25,33,47,46,36,37,26,26,26,26,33,46,47,81,80,27,27,27,27,33,45,46,80,79,28,28,28,28,33,44,45,79,78,29,29,29,29,33,43,44,78,77,30,30,30,30,33,42,43,77,76,31,31,31,31,33,41,42,76,75,32,32,32,32,33,40,41,75,74,33,33,33,33,33,39,40,74,73,34,34,34,34,33,38,39,73,72,35,35,35,35,33,155,154,13,14,36,36,36,36,33,156,155,14,15,37,37,37,37,33,157,156,15,16,38,38,38,38,33,158,157,16,17,39,39,39,39,33,144,145,4,3,40,40,40,40,33,145,146,5,4,41,41,41,41,33,146,147,6,5,42,42,42,42,33,147,148,7,6,43,43,43,43,33,1,0,54,55,44,44,44,44,33,2,0,1,21,45,45,45,45,33,150,149,8,9,46,46,46,46,33,151,150,9,10,47,47,47,47,33,152,151,10,11,48,48,48,48,33,153,152,11,12,49,49,49,49,33,154,153,12,13,50,50,50,50,33,48,126,125,51,51,51,51,51,33,49,48,51,52,52,52,52,52,33,50,49,52,53,53,53,53,53,33,0,50,53,54,54,54,54,54,33,3,4,52,51,55,55,55,55,33,4,5,53,52,56,56,56,56,33,5,6,54,53,57,57,57,57,33,6,7,55,54,58,58,58,58,33,63,62,130,129,59,59,59,59,33,64,63,129,128,60,60,60,60,33,65,64,128,127,61,61,61,61,32,56,66,65,62,62,62,32,65,127,120,63,63,63,32,65,120,56,64,64,64,33,67,66,56,57,65,65,65,65,33,68,67,57,58,66,66,66,66,33,69,68,58,59,67,67,67,67,33,70,69,59,60,68,68,68,68,32,95,71,70,69,69,69,32,70,60,61,70,70,70,32,94,95,70,71,71,71,32,70,61,94,72,72,72,33,30,29,63,64,73,73,73,73,33,31,30,64,65,74,74,74,74,33,32,31,65,66,75,75,75,75,33,33,32,66,67,76,76,76,76,33,34,33,67,68,77,77,77,77,33,35,34,68,69,78,78,78,78,33,36,35,69,70,79,79,79,79,33,37,36,70,71,80,80,80,80,33,83,82,72,73,81,81,81,81,33,84,83,73,74,82,82,82,82,33,85,84,74,75,83,83,83,83,33,86,85,75,76,84,84,84,84,33,87,86,76,77,85,85,85,85,33,88,87,77,78,86,86,86,86,33,89,88,78,79,87,87,87,87,33,90,89,79,80,88,88,88,88,33,91,90,80,81,89,89,89,89,33,9,8,82,83,46,46,46,46,33,10,9,83,84,90,90,90,90,33,11,10,84,85,91,91,91,91,33,12,11,85,86,49,49,49,49,33,13,12,86,87,92,92,92,92,33,14,13,87,88,93,93,93,93,33,15,14,88,89,94,94,94,94,33,16,15,89,90,95,95,95,95,33,17,16,90,91,39,39,39,39,33,93,95,94,92,96,96,96,96,33,94,257,255,92,97,97,97,97,33,93,256,258,95,98,98,98,98,33,92,255,256,93,99,99,99,99,32,37,71,95,100,100,100,32,258,158,17,101,101,101,32,17,91,81,102,102,102,32,17,81,47,102,102,102,32,37,95,258,103,103,103,32,258,17,47,104,104,104,32,37,258,47,105,105,105,32,21,1,55,102,102,102,32,7,148,257,106,106,106,32,21,55,7,102,102,102,32,94,61,27,102,102,102,32,27,21,7,107,107,107,32,257,94,27,102,102,102,32,7,257,27,108,108,108,33,28,131,133,62,109,109,109,109,32,103,139,136,110,110,110,33,104,103,136,135,111,111,111,111,33,105,104,135,134,112,112,112,112,33,106,105,134,132,113,113,113,113,32,28,38,106,114,114,114,32,106,132,131,115,115,115,32,106,131,28,116,116,116,33,106,38,72,110,117,117,117,117,33,105,106,110,109,118,118,118,118,33,104,105,109,108,119,119,119,119,33,103,104,108,107,120,120,120,120,33,288,259,96,118,121,121,121,121,33,261,260,97,98,122,122,122,122,33,262,261,98,99,123,123,123,123,33,263,262,99,100,124,124,124,124,33,264,263,100,101,125,125,125,125,33,265,264,101,102,126,126,126,126,33,149,265,102,8,127,127,127,127,32,62,133,130,128,128,128,33,119,111,142,141,110,110,110,110,33,113,112,140,138,129,129,129,129,32,107,114,113,130,130,130,32,113,138,137,131,131,131,32,113,137,107,132,132,132,33,115,114,107,108,110,110,110,110,33,116,115,108,109,133,133,133,133,33,117,116,109,110,134,134,134,134,33,82,117,110,72,135,135,135,135,33,118,96,111,119,121,121,121,121,33,98,97,112,113,122,122,122,122,33,99,98,113,114,136,136,136,136,33,100,99,114,115,137,137,137,137,33,101,100,115,116,125,125,125,125,33,102,101,116,117,126,126,126,126,33,8,102,117,82,127,127,127,127,33,97,118,119,112,138,138,138,138,33,112,119,141,140,139,139,139,139,33,260,288,118,97,140,140,140,140,32,259,143,142,141,141,141,32,142,111,96,142,142,142,32,142,96,259,142,142,142,33,125,124,3,51,143,143,143,143,33,124,291,144,3,144,144,144,144,33,120,123,22,56,145,145,145,145,33,137,139,103,107,146,146,146,146,33,161,159,209,179,0,0,0,0,33,179,209,208,178,1,1,1,1,33,178,208,207,177,2,2,2,2,33,177,207,298,293,3,3,3,3,32,181,294,295,147,147,147,32,181,182,177,148,148,148,32,177,293,294,149,149,149,32,177,294,181,150,150,150,33,183,178,177,182,151,151,151,151,33,184,179,178,183,152,152,152,152,33,185,161,179,184,153,153,153,153,33,186,180,161,185,154,154,154,154,33,188,222,221,187,12,12,12,12,33,185,219,220,186,13,13,13,13,33,184,218,219,185,14,14,14,14,33,183,217,218,184,15,15,15,15,33,182,216,217,183,16,16,16,16,33,181,215,216,182,17,17,17,17,33,198,188,187,197,155,155,155,155,33,199,189,188,198,156,156,156,156,33,200,190,189,199,157,157,157,157,33,201,191,190,200,158,158,158,158,33,202,192,191,201,159,159,159,159,33,203,193,192,202,160,160,160,160,33,204,194,193,203,161,161,161,161,33,205,195,194,204,162,162,162,162,33,206,196,195,205,163,163,163,163,33,205,239,240,206,27,27,27,27,33,204,238,239,205,28,28,28,28,33,203,237,238,204,29,29,29,29,33,202,236,237,203,30,30,30,30,33,201,235,236,202,31,31,31,31,33,200,234,235,201,32,32,32,32,33,199,233,234,200,33,33,33,33,33,198,232,233,199,34,34,34,34,33,197,231,232,198,35,35,35,35,33,155,173,172,154,36,36,36,36,33,156,174,173,155,37,37,37,37,33,157,175,174,156,38,38,38,38,33,158,176,175,157,39,39,39,39,33,144,162,163,145,40,40,40,40,33,145,163,164,146,41,41,41,41,33,146,164,165,147,42,42,42,42,33,147,165,166,148,164,164,164,164,33,213,159,160,214,165,165,165,165,33,161,180,160,159,45,45,45,45,33,150,168,167,149,46,46,46,46,33,151,169,168,150,47,47,47,47,33,152,170,169,151,48,48,48,48,33,153,171,170,152,49,49,49,49,33,154,172,171,153,50,50,50,50,33,207,210,297,298,166,166,166,166,33,208,211,210,207,167,167,167,167,33,209,212,211,208,168,168,168,168,33,159,213,212,209,169,169,169,169,33,162,210,211,163,55,55,55,55,33,163,211,212,164,56,56,56,56,33,164,212,213,165,57,57,57,57,33,165,213,214,166,58,58,58,58,33,222,301,302,221,166,166,166,166,33,223,300,301,222,170,170,170,170,33,224,299,300,223,171,171,171,171,32,224,225,215,172,172,172,32,215,292,299,166,166,166,32,215,299,224,173,173,173,33,226,216,215,225,174,174,174,174,33,227,217,216,226,175,175,175,175,33,228,218,217,227,176,176,176,176,33,229,219,218,228,177,177,177,177,32,229,230,254,178,178,178,32,253,220,219,179,179,179,32,229,254,253,180,180,180,32,253,219,229,181,181,181,33,189,223,222,188,73,73,73,73,33,190,224,223,189,74,74,74,74,33,191,225,224,190,75,75,75,75,33,192,226,225,191,76,76,76,76,33,193,227,226,192,77,77,77,77,33,194,228,227,193,78,78,78,78,33,195,229,228,194,79,79,79,79,33,196,230,229,195,80,80,80,80,33,242,232,231,241,182,182,182,182,33,243,233,232,242,166,166,166,166,33,244,234,233,243,183,183,183,183,33,245,235,234,244,182,182,182,182,33,246,236,235,245,184,184,184,184,33,247,237,236,246,166,166,166,166,33,248,238,237,247,185,185,185,185,33,249,239,238,248,182,182,182,182,33,250,240,239,249,186,186,186,186,33,168,242,241,167,46,46,46,46,33,169,243,242,168,90,90,90,90,33,170,244,243,169,91,91,91,91,33,171,245,244,170,49,49,49,49,33,172,246,245,171,187,187,187,187,33,173,247,246,172,188,188,188,188,33,174,248,247,173,94,94,94,94,33,175,249,248,174,95,95,95,95,33,176,250,249,175,39,39,39,39,33,252,251,253,254,189,189,189,189,33,253,251,255,257,97,97,97,97,33,252,254,258,256,98,98,98,98,33,251,252,256,255,99,99,99,99,32,206,240,250,102,102,102,32,250,176,158,190,190,190,32,258,254,230,103,103,103,32,258,230,196,103,103,103,32,206,250,158,102,102,102,32,258,196,206,191,191,191,32,206,158,258,192,192,192,32,186,220,253,102,102,102,32,257,148,166,193,193,193,32,166,214,160,103,103,103,32,166,160,180,102,102,102,32,186,253,257,103,103,103,32,166,180,186,194,194,194,32,186,257,166,195,195,195,33,187,221,305,303,109,109,109,109,32,273,308,311,196,196,196,33,274,307,308,273,197,197,197,197,33,275,306,307,274,198,198,198,198,33,276,304,306,275,199,199,199,199,32,276,197,187,200,200,200,32,187,303,304,201,201,201,32,187,304,276,202,202,202,33,276,280,231,197,117,117,117,117,33,275,279,280,276,118,118,118,118,33,274,278,279,275,119,119,119,119,33,273,277,278,274,120,120,120,120,33,288,289,266,259,203,203,203,203,33,261,268,267,260,122,122,122,122,33,262,269,268,261,123,123,123,123,33,263,270,269,262,124,124,124,124,33,264,271,270,263,125,125,125,125,33,265,272,271,264,126,126,126,126,33,149,167,272,265,127,127,127,127,32,221,302,305,196,196,196,33,290,313,314,281,166,166,166,166,33,283,310,312,282,182,182,182,182,32,283,284,277,204,204,204,32,277,309,310,166,166,166,32,277,310,283,166,166,166,33,285,278,277,284,166,166,166,166,33,286,279,278,285,166,166,166,166,33,287,280,279,286,205,205,205,205,33,241,231,280,287,206,206,206,206,33,289,290,281,266,203,203,203,203,33,268,283,282,267,122,122,122,122,33,269,284,283,268,136,136,136,136,33,270,285,284,269,137,137,137,137,33,271,286,285,270,125,125,125,125,33,272,287,286,271,207,207,207,207,33,167,241,287,272,127,127,127,127,33,267,282,290,289,138,138,138,138,33,282,312,313,290,166,166,166,166,33,260,267,289,288,140,140,140,140,32,314,143,259,208,208,208,32,266,281,314,142,142,142,32,259,266,314,142,142,142,33,297,210,162,296,143,143,143,143,33,296,162,144,291,144,144,144,144,33,292,215,181,295,145,145,145,145,33,309,277,273,311,146,146,146,146],"metadata":{"generator":"io_three","normals":209,"uvs":0,"vertices":315,"version":3,"faces":326,"type":"Geometry"}},"slope_curve_A":{"uvs":[],"metadata":{"generator":"io_three","uvs":0,"vertices":504,"version":3,"normals":407,"type":"Geometry","faces":532},"normals":[-0.0735675,0,0.99729,-0.122411,0,0.99248,-0.170964,0,0.985277,-0.219105,0,0.975701,-0.266713,0,0.963776,-0.313686,0,0.949527,-0.359895,0,0.932993,-0.405245,0,0.914208,0.0948476,-0.994604,0.0420435,0.096796,-0.994604,0.0373389,0.098512,-0.994604,0.0325443,0.0999902,-0.994604,0.0276713,0.101227,-0.994604,0.0227317,0.102221,-0.994604,0.0177373,0.102968,-0.994604,0.0127001,0.10782,-0.994139,0.0079534,-1.12195e-9,-1,4.46895e-8,-0.405245,0,0.914208,0.0251089,0,-0.999685,0.0735671,0,-0.99729,0.122412,0,-0.992479,0.170964,0,-0.985277,0.219103,0,-0.975702,0.266715,0,-0.963775,0.313684,0,-0.949527,0.359894,0,-0.932993,0.405247,0,-0.914207,0.107334,-0.993084,0.0475784,0.109539,-0.993084,0.0422543,0.111481,-0.993084,0.0368287,0.113154,-0.993084,0.031314,0.114554,-0.993084,0.025724,0.115678,-0.993084,0.0200722,0.116523,-0.993084,0.0143721,0.121998,-0.992489,0.00899937,-1.12532e-9,-1,4.46894e-8,0.0251866,0,-0.999683,0.0735664,0,-0.99729,0.122416,0,-0.992479,0.170963,0,-0.985277,0.219103,0,-0.975702,0.266711,0,-0.963777,0.313689,0,-0.949526,0.359894,0,-0.932993,0.405245,0,-0.914208,-0.170965,0,0.985277,-0.122415,0,0.992479,-0.0735649,0,0.99729,-0.0251924,0,0.999683,0.405241,0,-0.91421,0.359897,0,-0.932992,0.313688,0,-0.949526,0.266714,0,-0.963776,0.219103,0,-0.975702,0.170963,0,-0.985277,0.122412,0,-0.992479,0.0735687,0,-0.99729,0.0250852,4.75368e-7,-0.999685,-7.9745e-9,-1,3.17786e-7,-0.0250867,0,0.999685,-0.405246,0,0.914208,-0.359892,0,0.932994,-0.313687,0,0.949526,-0.26671,0,0.963777,-0.219105,0,0.975701,0.0929438,-0.994819,0.0411995,0.0948536,-0.994819,0.0365884,0.0965348,-0.994819,0.0318907,0.0979832,-0.994819,0.027116,0.0991954,-0.994819,0.0222755,0.100169,-0.994819,0.0173816,0.100901,-0.994819,0.0124458,0.105657,-0.994372,0.00779422,0.359897,0,-0.932992,0.266714,0,-0.963776,0.219103,0,-0.975702,0.170963,0,-0.985277,0.122412,0,-0.992479,0.0735687,0,-0.99729,0.0250853,0,-0.999685,0.100707,-0.993914,0.0446409,0.102777,-0.993914,0.0396457,0.104599,-0.993914,0.034555,0.106168,-0.993914,0.0293808,0.107481,-0.993914,0.024136,0.108536,-0.993914,0.0188331,0.10933,-0.993914,0.0134849,0.114474,-0.99339,0.00844445,0,-1,0,-3.42468e-9,-1,1.3635e-7,-1.25736e-8,-1,3.8147e-8,-2.95399e-8,-1,4.87876e-8,-0.359893,0,0.932993,-0.313688,0,0.949526,-0.266713,0,0.963776,-0.219105,0,0.975701,-0.170961,0,0.985278,-0.122415,0,0.992479,-0.0735681,0,0.99729,-0.0251599,0,0.999683,0.109877,-0.992751,0.0487047,0.112134,-0.992751,0.0432551,0.114122,-0.992751,0.0377014,0.115834,-0.992751,0.0320563,0.117267,-0.992751,0.0263336,0.118418,-0.992751,0.0205486,0.119283,-0.992751,0.0147129,0.124885,-0.992128,0.0092121,0,-1,0,-0.405246,0,0.914208,-0.359892,0,0.932994,-0.313687,0,0.949526,-0.26671,0,0.963777,-0.122415,0,0.992479,-0.0735649,0,0.99729,0,-1,3.40598e-8,0.164402,0,-0.986393,0.164402,0,0.986393,-1,0,-0.00000295331,-1,0,0,-1,0,-0.00000121959,-1,0,0,-1,0,0.00000253586,-0.0121517,0.999926,-7.94427e-8,-1,-0.0000148758,-0.00000240856,-1,0,0,-1,-0.000038147,0.00000176063,-1,0,0.00000508461,-0.00562501,-0.999984,2.8601e-8,-1,0.0000056154,-0.0000016057,0.449615,0,-0.893223,0.492899,0,-0.870086,0.534999,0,-0.844853,0.575813,0,-0.817581,0.615232,0,-0.788346,0.653173,0,-0.757209,0.624126,0,-0.781324,-0.449612,0,0.893224,-0.492901,0,0.870085,-0.534999,0,0.844853,-0.57581,0,0.817584,-0.615234,0,0.788345,-0.653174,0,0.757208,-0.707107,0,0.707107,-3.6001e-9,-1,8.06685e-8,0.0785596,-0.994604,0.0677661,0.0817898,-0.994604,0.0638296,0.0848232,-0.994604,0.0597396,0.0876525,-0.994604,0.0555055,0.0902705,-0.994604,0.0511377,0.092671,-0.994604,0.0466469,-0.449612,0,0.893224,-0.4929,0,0.870086,-0.535001,0,0.844851,-0.575809,0,0.817584,-0.615233,0,0.788345,-0.653174,0,0.757207,-0.707107,0,0.707107,-3.59977e-9,-1,8.06684e-8,0.0889017,-0.993084,0.0766876,0.0925567,-0.993084,0.0722325,0.0959902,-0.993084,0.0676044,0.0991919,-0.993084,0.0628129,0.102154,-0.993084,0.0578699,0.104871,-0.993084,0.052788,0.449614,0,-0.893223,0.492898,0,-0.870087,0.534999,0,-0.844852,0.575811,0,-0.817583,0.615234,0,-0.788345,0.653174,0,-0.757208,0.455141,0,-0.890419,-0.653173,0,0.757209,-0.615235,0,0.788344,-0.57581,0,0.817583,-0.534998,0,0.844853,-0.492901,0,0.870086,-0.449614,0,0.893223,0.624126,0,-0.781324,0.653173,0,-0.757209,0.615232,0,-0.788346,0.492899,0,-0.870086,0.449615,0,-0.893223,0.0769827,-0.994819,0.0664058,0.0801485,-0.994819,0.0625481,0.0831207,-0.994819,0.0585405,0.0858931,-0.994819,0.0543912,0.0884589,-0.994819,0.0501107,0.090811,-0.994819,0.0457108,0.0834132,-0.993914,0.071953,0.0868429,-0.993914,0.0677732,0.090064,-0.993914,0.0634306,0.093068,-0.993914,0.058935,0.0958475,-0.993914,0.0542973,0.0983966,-0.993914,0.0495291,0.608831,0,-0.7933,0.653173,0,-0.757209,0.615234,0,-0.788345,0.57581,0,-0.817583,0.534998,0,-0.844853,0.492901,0,-0.870085,0.449612,0,-0.893224,7.70675e-8,-1,7.70697e-8,0.0910077,-0.992751,0.0785036,0.0947493,-0.992751,0.0739429,0.0982642,-0.992751,0.0692052,0.101541,-0.992751,0.0643007,0.104573,-0.992751,0.0592411,0.107355,-0.992751,0.0540381,-0.653173,0,0.757209,-0.615235,0,0.788344,-0.57581,0,0.817583,-0.534998,0,0.844853,-0.492901,0,0.870086,-0.449614,0,0.893223,-0.428539,0,0.903523,0,-1,0,0.707107,0,-0.707107,0,-1,0,0,-1,0,-7.06182e-8,-1,1.36755e-8,3.21351e-8,-1,9.68471e-8,0.707107,0,-0.707107,-0.428539,0,0.903523,0.707107,0,-0.707107,0,-1,0,-0.538831,0,0.842414,-0.622108,0,0.782932,-0.813734,0,0.581237,7.14203e-8,-1,7.98347e-8,0.707107,0,0.707107,0.581239,0,-0.813733,0.707107,0,0.707107,0.707104,0,0.707109,0.707097,0,0.707117,0.707097,0,0.707117,0.707107,0,0.707107,0.707097,0.000136653,0.707117,0.707105,0.00000810374,0.707109,0.707104,0,0.707109,0.707102,0,0.707112,0.707102,0,0.707112,0.707105,0.0000134666,0.707109,0.707107,0,0.707107,0.707107,0.0000406775,0.707107,-0.0735675,0,0.99729,-0.219105,0,0.975701,-0.266713,0,0.963776,-0.313686,0,0.949527,-0.359895,0,0.932993,-0.405245,0,0.914208,-0.0948476,0.994604,-0.0420435,-0.0967961,0.994604,-0.0373388,-0.098512,0.994604,-0.0325443,-0.0999902,0.994604,-0.0276713,-0.101227,0.994604,-0.0227317,-0.102221,0.994604,-0.0177374,-0.102968,0.994604,-0.0127001,-0.10782,0.994139,-0.0079534,1.12195e-9,1,-4.46895e-8,-0.405246,0,0.914208,0.0251089,0,-0.999685,0.170964,0,-0.985277,0.219103,0,-0.975702,0.266715,0,-0.963775,-0.107334,0.993084,-0.0475785,-0.109539,0.993084,-0.0422543,-0.111481,0.993084,-0.0368286,-0.113154,0.993084,-0.031314,-0.114554,0.993084,-0.025724,-0.115678,0.993084,-0.0200722,-0.116523,0.993084,-0.0143721,-0.121998,0.992489,-0.00899937,-2.04339e-9,1,-4.10407e-8,0.0251866,0,-0.999683,0.170963,0,-0.985277,0.219103,0,-0.975702,0.266711,0,-0.963777,0.359894,0,-0.932993,0.405245,0,-0.914208,-0.170965,0,0.985277,0.405241,0,-0.91421,0.266714,0,-0.963776,0.219103,0,-0.975702,0.122412,0,-0.992479,0.0250852,-4.75368e-7,-0.999685,0,1,0,-0.0250867,0,0.999685,-0.405246,0,0.914208,-0.313687,0,0.949526,-0.0929438,0.994819,-0.0411995,-0.0948536,0.994819,-0.0365883,-0.0965348,0.994819,-0.0318906,-0.0979832,0.994819,-0.0271159,-0.0991955,0.994819,-0.0222755,-0.100169,0.994819,-0.0173816,-0.100901,0.994819,-0.0124458,-0.105657,0.994372,-0.00779405,0.405241,0,-0.91421,0.313688,0,-0.949526,0.266714,0,-0.963776,0.170963,0,-0.985278,0.0735687,0,-0.99729,-0.100708,0.993914,-0.0446409,-0.102777,0.993914,-0.0396457,-0.104599,0.993914,-0.034555,-0.106168,0.993914,-0.0293809,-0.107481,0.993914,-0.024136,-0.108536,0.993914,-0.0188331,-0.10933,0.993914,-0.0134849,-0.114474,0.99339,-0.00844445,9.45215e-10,1,-3.76327e-8,1.88605e-8,1,-5.72206e-8,-7.23772e-8,1,0,-0.359893,0,0.932993,-0.266713,0,0.963776,-0.219105,0,0.975701,-0.170961,0,0.985278,-0.122415,0,0.992479,-0.109876,0.992751,-0.0487047,-0.112134,0.992751,-0.0432552,-0.114122,0.992751,-0.0377013,-0.115834,0.992751,-0.0320562,-0.117267,0.992751,-0.0263335,-0.118417,0.992751,-0.0205485,-0.119283,0.992751,-0.0147129,-0.124885,0.992128,-0.0092121,0,1,0,-0.313687,0,0.949526,-0.219105,0,0.975701,0,1,-5.10897e-8,0.164402,0,-0.986393,-1,-0.0000152588,1.21229e-12,-1,0.0000162345,-0.00000286017,-1,0.000038147,0.00000176062,-1,0,0,-1,0.0000813589,0.0000050846,-1,-0.0000100025,-0.00000286017,0.449615,0,-0.893223,0.575813,0,-0.817581,-0.449612,0,0.893224,-0.492901,0,0.870086,-0.575809,0,0.817584,-0.615234,0,0.788345,-0.0785594,0.994604,-0.0677659,-0.0817898,0.994604,-0.0638297,-0.0848232,0.994604,-0.0597396,-0.0876526,0.994604,-0.0555055,-0.0902703,0.994604,-0.0511377,-0.0926711,0.994604,-0.046647,-0.449612,0,0.893224,-0.4929,0,0.870086,-0.535001,0,0.844851,-0.0889015,0.993084,-0.0766876,-0.0925567,0.993084,-0.0722325,-0.0959902,0.993084,-0.0676044,-0.099192,0.993084,-0.0628129,-0.102154,0.993084,-0.0578698,-0.104871,0.993084,-0.052788,0.449614,0,-0.893223,0.492898,0,-0.870087,0.534999,0,-0.844853,0.575811,0,-0.817583,0.615234,0,-0.788345,-0.615235,0,0.788344,-0.534998,0,0.844854,-0.449614,0,0.893223,0.653173,0,-0.757209,0.534998,0,-0.844853,0.449615,0,-0.893223,-0.0769825,0.994819,-0.0664056,-0.0801485,0.994819,-0.0625481,-0.0831207,0.994819,-0.0585405,-0.0858932,0.994819,-0.0543913,-0.0884589,0.994819,-0.0501107,-0.090811,0.994819,-0.0457109,1.92255e-7,1,-3.93742e-7,-0.0834131,0.993914,-0.0719528,-0.0868429,0.993914,-0.0677732,-0.090064,0.993914,-0.0634306,-0.0930681,0.993914,-0.058935,-0.0958475,0.993914,-0.0542973,-0.0983967,0.993914,-0.0495291,0.57581,0,-0.817583,0.534998,0,-0.844853,0.449612,0,-0.893224,-0.0910072,0.992751,-0.078504,-0.0947491,0.992751,-0.0739435,-0.0982642,0.992751,-0.0692051,-0.101541,0.992751,-0.0643005,-0.104573,0.992751,-0.059241,-0.107355,0.992751,-0.0540381,-0.57581,0,0.817583,-0.492901,0,0.870086,-6.67469e-7,1,-0.00000201159,-6.72057e-7,1,-8.04453e-7,-0.813734,0,0.581237,0.581239,0,-0.813733,0.707105,-0.00000810377,0.707109,0.707097,-0.000136653,0.707117,0,0,0,0.707102,0,0.707112,0.707105,-0.00000405191,0.707109,0.707104,-0.0000112915,0.707109,-0.707107,0,-0.707107,1.18309e-9,-1,4.37736e-8,-2.36614e-8,1,-6.62519e-8],"vertices":[11.4576,-4,-17.2182,0.250038,-4,-17.4995,11.4576,-1,-17.2182,100.476,8.45,3.56281,89.9311,7.275,-1.11142,79.1696,6.1,-5.26262,68.2174,4.925,-8.88081,57.1008,3.75,-11.9572,45.8467,2.575,-14.4844,34.4821,1.4,-16.4564,23.0344,0.224998,-17.8683,11.5312,-1,-18.7169,0.250031,-1,-19,84.2239,8.45,37.9247,75.3847,7.275,34.0065,66.3638,6.1,30.5268,57.1832,4.925,27.4939,47.8647,3.75,24.9151,38.4309,2.575,22.7966,28.9045,1.4,21.1436,19.3085,0.224999,19.96,9.66607,-1,19.2488,0.249969,-1,19.0115,99.8344,8.45,4.9192,89.3569,7.275,0.274796,78.6641,6.1,-3.84988,67.7818,4.925,-7.44496,56.7362,3.75,-10.5017,45.5539,2.575,-13.0128,34.2619,1.4,-14.9722,22.8873,0.224998,-16.3751,0.250038,-1,-17.4995,96.413,8.45,12.1533,86.2945,7.275,7.66803,75.9682,6.1,3.68472,65.4588,4.925,0.212875,54.7918,3.75,-2.73912,43.9927,2.575,-5.16415,33.0877,1.4,-7.05638,22.1029,0.224998,-8.41124,11.0649,-1,-9.22548,0.250015,-1,-9.49712,88.2869,8.45,29.3342,79.0213,7.275,25.227,69.5653,6.1,21.5795,59.9417,4.925,18.4002,50.1737,3.75,15.697,40.2849,2.575,13.4764,30.2989,1.4,11.7437,20.24,0.224999,10.503,10.1323,-1,9.75734,0.249992,-1,9.50862,84.8654,8.45,36.5683,75.9589,7.275,32.6203,66.8693,6.1,29.1141,57.6188,4.925,26.058,48.2293,3.75,23.4596,38.7237,2.575,21.325,29.1247,1.4,19.6594,19.4556,0.224999,18.4668,9.73969,-1,17.7501,0.249969,-1,17.511,99.8344,5.45,4.9192,89.3569,4.275,0.274796,78.6641,3.1,-3.84988,67.7818,1.925,-7.44496,56.7362,0.749998,-10.5017,45.5539,-0.425002,-13.0128,34.2619,-1.6,-14.9722,22.8873,-2.775,-16.3751,100.476,5.45,3.56281,89.9311,4.275,-1.11142,79.1696,3.1,-5.26262,68.2174,1.925,-8.88081,57.1008,0.749998,-11.9572,45.8467,-0.425002,-14.4844,34.4821,-1.6,-16.4564,23.0344,-2.775,-17.8683,11.5312,-4,-18.7169,0.250031,-4,-19,96.413,5.45,12.1533,86.2945,4.275,7.66803,75.9682,3.1,3.68472,65.4588,1.925,0.212875,54.7918,0.749998,-2.73912,43.9927,-0.425001,-5.16415,33.0877,-1.6,-7.05638,22.1029,-2.775,-8.41124,11.0649,-4,-9.22548,0.250015,-4,-9.49712,88.2869,5.45,29.3342,79.0213,4.275,25.227,69.5653,3.1,21.5795,59.9417,1.925,18.4002,50.1737,0.749999,15.697,40.2849,-0.425001,13.4764,30.2989,-1.6,11.7437,20.24,-2.775,10.503,10.1323,-4,9.75734,0.249992,-4,9.50862,84.8654,5.45,36.5683,75.9589,4.275,32.6203,66.8693,3.1,29.1141,57.6188,1.925,26.058,48.2293,0.749999,23.4596,38.7237,-0.425,21.325,29.1247,-1.6,19.6594,19.4556,-2.775,18.4668,9.73969,-4,17.7501,0.249969,-4,17.511,84.2239,5.45,37.9247,75.3847,4.275,34.0065,66.3638,3.1,30.5268,57.1832,1.925,27.4939,47.8647,0.749999,24.9151,38.4309,-0.425,22.7966,28.9045,-1.6,21.1436,19.3085,-2.775,19.96,9.66607,-4,19.2488,0.249969,-4,19.0115,-8.74998,-4,-7.49998,-8.75002,-4,8.00005,0.250015,-4,-5.99995,0.249985,-4,6.50002,3.01145,54.0119,23.4871,165.993,15.5,49.6532,157.817,15.5,41.8768,149.083,14.325,34.3429,139.99,13.15,27.2466,130.559,11.975,20.6049,120.815,10.8,14.4341,110.779,9.625,8.74879,139.115,15.5,76.5313,132.29,15.5,70.0414,124.969,14.325,63.7261,117.346,13.15,57.7776,109.441,11.975,52.2103,101.273,10.8,47.0376,92.8602,9.625,42.2719,164.932,15.5,50.7142,156.809,15.5,42.9886,148.131,14.325,35.5027,139.096,13.15,28.4517,129.726,11.975,21.8525,120.043,10.8,15.7211,110.071,9.625,10.0721,159.274,15.5,56.3727,151.435,15.5,48.9179,143.054,14.325,41.6887,134.329,13.15,34.8793,125.28,11.975,28.5063,115.929,10.8,22.585,106.299,9.625,17.1296,145.835,15.5,69.8117,138.671,15.5,63.0002,130.997,14.325,56.3803,123.007,13.15,50.1448,114.721,11.975,44.3089,106.158,10.8,38.8867,97.3398,9.625,33.8911,140.176,15.5,75.4703,133.297,15.5,68.9296,125.92,14.325,62.5662,118.24,13.15,56.5724,110.275,11.975,50.9627,102.044,10.8,45.7506,93.5675,9.625,40.9486,164.932,12.5,50.7142,156.809,12.5,42.9886,148.131,11.325,35.5027,139.096,10.15,28.4517,129.726,8.975,21.8525,120.043,7.8,15.7211,110.071,6.625,10.0721,165.993,12.5,49.6532,157.817,12.5,41.8768,149.083,11.325,34.3429,139.99,10.15,27.2466,130.559,8.975,20.6049,120.815,7.8,14.4341,110.779,6.625,8.74879,159.274,12.5,56.3727,151.435,12.5,48.9179,143.054,11.325,41.6887,134.329,10.15,34.8793,125.28,8.975,28.5063,115.929,7.8,22.585,106.299,6.625,17.1296,145.835,12.5,69.8117,138.671,12.5,63.0002,130.997,11.325,56.3803,123.007,10.15,50.1448,114.721,8.975,44.3089,106.158,7.8,38.8867,97.3398,6.625,33.8911,140.176,12.5,75.4703,133.297,12.5,68.9296,125.92,11.325,62.5662,118.24,10.15,56.5724,110.275,8.975,50.9627,102.044,7.8,45.7506,93.5675,6.625,40.9486,139.115,12.5,76.5313,132.29,12.5,70.0414,124.969,11.325,63.7261,117.346,10.15,57.7776,109.441,8.975,52.2103,101.273,7.8,47.0376,92.8602,6.625,42.2719,158.745,15.5,44.527,159.806,15.5,43.466,153.087,15.5,50.1855,139.647,15.5,63.6246,133.989,15.5,69.2831,132.928,15.5,70.3441,158.745,12.5,44.527,159.806,12.5,43.466,153.087,12.5,50.1855,139.647,12.5,63.6246,133.989,12.5,69.2831,132.928,12.5,70.3441,140.537,12.5,62.3811,151.851,12.5,51.0674,157.154,12.5,58.492,147.962,12.5,67.6844,-133.998,54.0119,77.7434,100.476,9.45,3.56281,89.9311,8.275,-1.11142,79.1696,7.1,-5.26262,68.2174,5.925,-8.88081,57.1008,4.75,-11.9572,45.8467,3.575,-14.4844,34.4821,2.4,-16.4564,23.0344,1.225,-17.8683,11.5312,-0.00000272549,-18.7169,0.249992,-0.00000273786,-19,84.2239,9.45,37.9247,75.3847,8.275,34.0065,66.3638,7.1,30.5268,57.1832,5.925,27.4939,47.8647,4.75,24.9151,38.4309,3.575,22.7966,28.9045,2.4,21.1436,19.3085,1.225,19.96,9.66607,-0.00000106596,19.2488,0.249969,-0.00000107633,19.0115,11.4576,4,-17.2182,0.250038,4,-17.4995,11.4576,0.999997,-17.2182,100.476,10.45,3.56281,89.9311,9.275,-1.11142,79.1696,8.1,-5.26262,68.2174,6.925,-8.88081,57.1008,5.75,-11.9572,45.8467,4.575,-14.4844,34.4821,3.4,-16.4564,23.0344,2.225,-17.8683,11.5312,0.999997,-18.7169,0.250031,0.999997,-19,84.2239,10.45,37.9247,75.3847,9.275,34.0065,66.3638,8.1,30.5268,57.1832,6.925,27.4939,47.8647,5.75,24.9151,38.4309,4.575,22.7966,28.9045,3.4,21.1436,19.3085,2.225,19.96,9.66607,0.999999,19.2488,0.249969,0.999999,19.0115,99.8344,10.45,4.9192,89.3569,9.275,0.274796,78.6641,8.1,-3.84988,67.7818,6.925,-7.44496,56.7362,5.75,-10.5017,45.5539,4.575,-13.0128,34.2619,3.4,-14.9722,22.8873,2.225,-16.3751,0.250038,0.999997,-17.4995,96.413,10.45,12.1533,86.2945,9.275,7.66803,75.9682,8.1,3.68472,65.4588,6.925,0.212875,54.7918,5.75,-2.73912,43.9927,4.575,-5.16415,33.0877,3.4,-7.05638,22.1029,2.225,-8.41124,11.0649,0.999998,-9.22548,0.250015,0.999998,-9.49712,88.2869,10.45,29.3342,79.0213,9.275,25.227,69.5653,8.1,21.5795,59.9417,6.925,18.4002,50.1737,5.75,15.697,40.2849,4.575,13.4764,30.2989,3.4,11.7437,20.24,2.225,10.503,10.1323,0.999999,9.75734,0.249992,0.999999,9.50862,84.8654,10.45,36.5683,75.9589,9.275,32.6203,66.8693,8.1,29.1141,57.6188,6.925,26.058,48.2293,5.75,23.4596,38.7237,4.575,21.325,29.1247,3.4,19.6594,19.4556,2.225,18.4668,9.73969,0.999999,17.7501,0.249969,0.999999,17.511,99.8344,13.45,4.9192,89.3569,12.275,0.274796,78.6641,11.1,-3.84988,67.7818,9.925,-7.44496,56.7362,8.75,-10.5017,45.5539,7.575,-13.0128,34.2619,6.4,-14.9722,22.8873,5.225,-16.3751,100.476,13.45,3.56281,89.9311,12.275,-1.11142,79.1696,11.1,-5.26262,68.2174,9.925,-8.88081,57.1008,8.75,-11.9572,45.8467,7.575,-14.4844,34.4821,6.4,-16.4564,23.0344,5.225,-17.8683,11.5312,4,-18.7169,0.250031,4,-19,96.413,13.45,12.1533,86.2945,12.275,7.66803,75.9682,11.1,3.68472,65.4588,9.925,0.212875,54.7918,8.75,-2.73912,43.9927,7.575,-5.16415,33.0877,6.4,-7.05638,22.1029,5.225,-8.41124,11.0649,4,-9.22548,0.250015,4,-9.49712,88.2869,13.45,29.3342,79.0213,12.275,25.227,69.5653,11.1,21.5795,59.9417,9.925,18.4002,50.1737,8.75,15.697,40.2849,7.575,13.4764,30.2989,6.4,11.7437,20.24,5.225,10.503,10.1323,4,9.75734,0.249992,4,9.50862,84.8654,13.45,36.5683,75.9589,12.275,32.6203,66.8693,11.1,29.1141,57.6188,9.925,26.058,48.2293,8.75,23.4596,38.7237,7.575,21.325,29.1247,6.4,19.6594,19.4556,5.225,18.4668,9.73969,4,17.7501,0.249969,4,17.511,84.2239,13.45,37.9247,75.3847,12.275,34.0065,66.3638,11.1,30.5268,57.1832,9.925,27.4939,47.8647,8.75,24.9151,38.4309,7.575,22.7966,28.9045,6.4,21.1436,19.3085,5.225,19.96,9.66607,4,19.2488,0.249969,4,19.0115,-8.74998,4,-7.49998,-8.75002,4,8.00005,0.250015,4,-5.99995,0.249985,4,6.50002,-8.74998,-0.00000223518,-7.49998,-8.75002,-0.00000155766,8.00005,0.250015,-0.00000216961,-5.99995,0.249985,-0.00000162322,6.50002,3.01145,-21.0119,23.4871,165.993,16.5,49.6532,157.817,16.5,41.8768,149.083,15.325,34.3429,139.99,14.15,27.2466,130.559,12.975,20.6049,120.815,11.8,14.4341,110.779,10.625,8.74879,139.115,16.5,76.5313,132.29,16.5,70.0414,124.969,15.325,63.7261,117.346,14.15,57.7776,109.441,12.975,52.2103,101.273,11.8,47.0376,92.8602,10.625,42.2719,165.993,17.5,49.6532,157.817,17.5,41.8768,149.083,16.325,34.3429,139.99,15.15,27.2466,130.559,13.975,20.6049,120.815,12.8,14.4341,110.779,11.625,8.74879,139.115,17.5,76.5313,132.29,17.5,70.0414,124.969,16.325,63.7261,117.346,15.15,57.7776,109.441,13.975,52.2103,101.273,12.8,47.0376,92.8602,11.625,42.2719,164.932,17.5,50.7142,156.809,17.5,42.9886,148.131,16.325,35.5027,139.096,15.15,28.4517,129.726,13.975,21.8525,120.043,12.8,15.7211,110.071,11.625,10.0721,159.274,17.5,56.3727,151.435,17.5,48.9179,143.054,16.325,41.6887,134.329,15.15,34.8793,125.28,13.975,28.5063,115.929,12.8,22.585,106.299,11.625,17.1296,145.835,17.5,69.8117,138.671,17.5,63.0002,130.997,16.325,56.3803,123.007,15.15,50.1448,114.721,13.975,44.3089,106.158,12.8,38.8867,97.3398,11.625,33.8911,140.176,17.5,75.4703,133.297,17.5,68.9296,125.92,16.325,62.5662,118.24,15.15,56.5724,110.275,13.975,50.9627,102.044,12.8,45.7506,93.5675,11.625,40.9486,164.932,20.5,50.7142,156.809,20.5,42.9886,148.131,19.325,35.5027,139.096,18.15,28.4517,129.726,16.975,21.8525,120.043,15.8,15.7211,110.071,14.625,10.0721,165.993,20.5,49.6532,157.817,20.5,41.8768,149.083,19.325,34.3429,139.99,18.15,27.2466,130.559,16.975,20.6049,120.815,15.8,14.4341,110.779,14.625,8.74879,159.274,20.5,56.3727,151.435,20.5,48.9179,143.054,19.325,41.6887,134.329,18.15,34.8793,125.28,16.975,28.5063,115.929,15.8,22.585,106.299,14.625,17.1296,145.835,20.5,69.8117,138.671,20.5,63.0002,130.997,19.325,56.3803,123.007,18.15,50.1448,114.721,16.975,44.3089,106.158,15.8,38.8867,97.3398,14.625,33.8911,140.176,20.5,75.4703,133.297,20.5,68.9296,125.92,19.325,62.5662,118.24,18.15,56.5724,110.275,16.975,50.9627,102.044,15.8,45.7506,93.5675,14.625,40.9486,139.115,20.5,76.5313,132.29,20.5,70.0414,124.969,19.325,63.7261,117.346,18.15,57.7776,109.441,16.975,52.2103,101.273,15.8,47.0376,92.8602,14.625,42.2719,159.806,16.5,43.466,132.928,16.5,70.3441,158.745,17.5,44.527,159.806,17.5,43.466,153.087,17.5,50.1855,139.647,17.5,63.6246,133.989,17.5,69.2831,132.928,17.5,70.3441,158.745,20.5,44.527,159.806,20.5,43.466,153.087,20.5,50.1855,139.647,20.5,63.6246,133.989,20.5,69.2831,132.928,20.5,70.3441,140.537,20.5,62.3811,151.851,20.5,51.0674,157.154,20.5,58.492,147.962,20.5,67.6844,140.537,16.5,62.3811,151.851,16.5,51.0674,157.154,16.5,58.492,147.962,16.5,67.6844,-133.998,-21.0119,77.7434,191.626,-4,34.9806,191.626,12,34.9806,124.451,-4,102.156,124.451,12,102.156,181.019,-4,24.374,181.019,12,24.374,113.844,-4,91.5492,113.844,12,91.5492],"faces":[33,2,0,69,30,0,0,0,0,33,30,69,68,29,1,1,1,1,33,29,68,67,28,2,2,2,2,33,28,67,66,27,3,3,3,3,33,27,66,65,26,4,4,4,4,33,26,65,64,25,5,5,5,5,33,25,64,63,24,6,6,6,6,33,24,63,62,23,7,7,7,7,33,33,24,23,32,8,8,8,8,33,34,25,24,33,9,9,9,9,33,35,26,25,34,10,10,10,10,33,36,27,26,35,11,11,11,11,33,37,28,27,36,12,12,12,12,33,38,29,28,37,13,13,13,13,33,39,30,29,38,14,14,14,14,33,40,2,30,39,15,15,15,15,33,41,31,2,40,16,16,16,16,33,43,91,90,42,17,17,17,17,33,40,88,89,41,18,18,18,18,33,39,87,88,40,19,19,19,19,33,38,86,87,39,20,20,20,20,33,37,85,86,38,21,21,21,21,33,36,84,85,37,22,22,22,22,33,35,83,84,36,23,23,23,23,33,34,82,83,35,24,24,24,24,33,33,81,82,34,25,25,25,25,33,32,80,81,33,26,26,26,26,33,53,43,42,52,27,27,27,27,33,54,44,43,53,28,28,28,28,33,55,45,44,54,29,29,29,29,33,56,46,45,55,30,30,30,30,33,57,47,46,56,31,31,31,31,33,58,48,47,57,32,32,32,32,33,59,49,48,58,33,33,33,33,33,60,50,49,59,34,34,34,34,33,61,51,50,60,35,35,35,35,33,60,108,109,61,36,36,36,36,33,59,107,108,60,37,37,37,37,33,58,106,107,59,38,38,38,38,33,57,105,106,58,39,39,39,39,33,56,104,105,57,40,40,40,40,33,55,103,104,56,41,41,41,41,33,54,102,103,55,42,42,42,42,33,53,101,102,54,43,43,43,43,33,52,100,101,53,44,44,44,44,33,242,19,18,241,45,45,45,45,33,243,20,19,242,46,46,46,46,33,244,21,20,243,47,47,47,47,33,245,22,21,244,48,48,48,48,33,226,3,4,227,49,49,49,49,33,227,4,5,228,50,50,50,50,33,228,5,6,229,51,51,51,51,33,229,6,7,230,52,52,52,52,33,230,7,8,231,53,53,53,53,33,231,8,9,232,54,54,54,54,33,232,9,10,233,55,55,55,55,33,233,10,11,234,56,56,56,56,33,234,11,12,235,57,57,57,57,33,78,0,1,79,58,58,58,58,33,1,0,2,31,59,59,59,59,33,237,14,13,236,60,60,60,60,33,238,15,14,237,61,61,61,61,33,239,16,15,238,62,62,62,62,33,240,17,16,239,63,63,63,63,33,241,18,17,240,64,64,64,64,33,63,71,70,62,65,65,65,65,33,64,72,71,63,66,66,66,66,33,65,73,72,64,67,67,67,67,33,66,74,73,65,68,68,68,68,33,67,75,74,66,69,69,69,69,33,68,76,75,67,70,70,70,70,33,69,77,76,68,71,71,71,71,33,0,78,77,69,72,72,72,72,33,3,70,71,4,49,49,49,49,33,4,71,72,5,73,73,73,73,33,5,72,73,6,51,51,51,51,33,6,73,74,7,74,74,74,74,33,7,74,75,8,75,75,75,75,33,8,75,76,9,76,76,76,76,33,9,76,77,10,77,77,77,77,33,10,77,78,11,78,78,78,78,33,11,78,79,12,79,79,79,79,33,91,81,80,90,80,80,80,80,33,92,82,81,91,81,81,81,81,33,93,83,82,92,82,82,82,82,33,94,84,83,93,83,83,83,83,33,95,85,84,94,84,84,84,84,33,96,86,85,95,85,85,85,85,33,97,87,86,96,86,86,86,86,33,98,88,87,97,87,87,87,87,32,98,99,123,88,88,88,32,122,89,88,89,89,89,32,98,123,122,90,90,90,32,122,88,98,91,91,91,33,44,92,91,43,92,92,92,92,33,45,93,92,44,93,93,93,93,33,46,94,93,45,94,94,94,94,33,47,95,94,46,95,95,95,95,33,48,96,95,47,96,96,96,96,33,49,97,96,48,97,97,97,97,33,50,98,97,49,98,98,98,98,33,51,99,98,50,99,99,99,99,33,111,101,100,110,100,100,100,100,33,112,102,101,111,101,101,101,101,33,113,103,102,112,102,102,102,102,33,114,104,103,113,103,103,103,103,33,115,105,104,114,104,104,104,104,33,116,106,105,115,105,105,105,105,33,117,107,106,116,106,106,106,106,33,118,108,107,117,107,107,107,107,33,119,109,108,118,108,108,108,108,33,14,111,110,13,109,109,109,109,33,15,112,111,14,110,110,110,110,33,16,113,112,15,111,111,111,111,33,17,114,113,16,112,112,112,112,33,18,115,114,17,64,64,64,64,33,19,116,115,18,45,45,45,45,33,20,117,116,19,113,113,113,113,33,21,118,117,20,114,114,114,114,33,22,119,118,21,48,48,48,48,33,121,120,122,123,115,115,115,115,33,122,120,370,372,116,116,116,116,33,121,123,373,371,117,117,117,117,33,120,121,371,370,118,118,118,118,32,61,109,119,119,119,119,32,22,245,373,120,120,120,32,61,119,22,121,121,121,32,123,99,51,122,122,122,32,51,61,22,123,123,123,32,373,123,51,122,122,122,32,51,22,373,124,124,124,32,41,89,122,125,125,125,32,372,235,12,126,126,126,32,12,79,1,127,127,127,32,12,1,31,127,127,127,32,41,122,372,121,121,121,32,12,31,41,128,128,128,32,41,372,12,129,129,129,33,131,180,70,3,130,130,130,130,33,130,179,180,131,131,131,131,131,33,129,178,179,130,132,132,132,132,33,128,177,178,129,133,133,133,133,33,127,176,177,128,134,134,134,134,33,126,175,176,127,135,135,135,135,33,210,216,175,126,136,136,136,136,33,23,62,173,145,137,137,137,137,33,145,173,172,144,138,138,138,138,33,144,172,171,143,139,139,139,139,33,143,171,170,142,140,140,140,140,33,142,170,169,141,141,141,141,141,33,141,169,168,140,142,142,142,142,33,209,215,167,139,143,143,143,143,33,211,209,139,146,144,144,144,144,33,148,141,140,147,145,145,145,145,33,149,142,141,148,146,146,146,146,33,150,143,142,149,147,147,147,147,33,151,144,143,150,148,148,148,148,33,152,145,144,151,149,149,149,149,33,32,23,145,152,150,150,150,150,33,42,90,194,159,151,151,151,151,33,159,194,193,158,152,152,152,152,33,158,193,192,157,153,153,153,153,33,157,192,191,156,154,154,154,154,33,156,191,190,155,155,155,155,155,33,155,190,189,154,156,156,156,156,33,212,218,188,153,157,157,157,157,33,213,212,153,160,158,158,158,158,33,162,155,154,161,159,159,159,159,33,163,156,155,162,160,160,160,160,33,164,157,156,163,161,161,161,161,33,165,158,157,164,162,162,162,162,33,166,159,158,165,163,163,163,163,33,52,42,159,166,164,164,164,164,33,166,201,100,52,165,165,165,165,33,165,200,201,166,166,166,166,166,33,164,199,200,165,167,167,167,167,33,163,198,199,164,168,168,168,168,33,162,197,198,163,169,169,169,169,33,161,196,197,162,170,170,170,170,33,213,219,196,161,171,171,171,171,33,474,214,132,382,157,157,157,157,33,384,134,133,383,172,172,172,172,33,385,135,134,384,173,173,173,173,33,386,136,135,385,174,174,174,174,33,387,137,136,386,175,175,175,175,33,388,138,137,387,176,176,176,176,33,236,13,138,388,177,177,177,177,33,473,210,126,376,178,178,178,178,33,376,126,127,377,179,179,179,179,33,377,127,128,378,180,180,180,180,33,378,128,129,379,133,133,133,133,33,379,129,130,380,132,132,132,132,33,380,130,131,381,181,181,181,181,33,381,131,3,226,182,182,182,182,33,215,216,174,167,88,88,88,88,33,169,176,175,168,183,183,183,183,33,170,177,176,169,184,184,184,184,33,171,178,177,170,185,185,185,185,33,172,179,178,171,186,186,186,186,33,173,180,179,172,187,187,187,187,33,62,70,180,173,188,188,188,188,33,218,221,224,188,88,88,88,88,33,190,183,182,189,189,189,189,189,33,191,184,183,190,190,190,190,190,33,192,185,184,191,191,191,191,191,33,193,186,185,192,192,192,192,192,33,194,187,186,193,193,193,193,193,33,90,80,187,194,194,194,194,194,33,211,217,182,147,195,195,195,195,33,147,182,183,148,196,196,196,196,33,148,183,184,149,197,197,197,197,33,149,184,185,150,198,198,198,198,33,150,185,186,151,199,199,199,199,33,151,186,187,152,200,200,200,200,33,152,187,80,32,201,201,201,201,33,220,219,195,202,202,202,202,202,33,204,197,196,203,203,203,203,203,33,205,198,197,204,204,204,204,204,33,206,199,198,205,205,205,205,205,33,207,200,199,206,206,206,206,206,33,208,201,200,207,207,207,207,207,33,110,100,201,208,208,208,208,208,33,214,220,202,132,157,157,157,157,33,134,204,203,133,209,209,209,209,33,135,205,204,134,210,210,210,210,33,136,206,205,135,211,211,211,211,33,137,207,206,136,212,212,212,212,33,138,208,207,137,213,213,213,213,33,13,110,208,138,214,214,214,214,33,133,203,220,214,215,215,215,215,33,203,196,219,220,216,216,216,216,33,146,181,217,211,217,217,217,217,32,182,217,222,218,218,218,32,221,218,189,219,219,219,32,182,222,221,220,220,220,32,189,182,221,221,221,221,33,168,175,216,215,88,88,88,88,33,375,125,210,473,222,222,222,222,33,383,133,214,474,223,223,223,223,33,160,195,219,213,224,224,224,224,33,161,154,212,213,225,225,225,225,33,154,189,218,212,226,226,226,226,33,147,140,209,211,216,216,216,216,33,140,168,215,209,227,227,227,227,33,125,174,216,210,217,217,217,217,33,223,493,492,222,228,228,228,228,33,222,217,181,223,229,229,229,229,33,222,492,491,221,230,230,230,230,33,221,491,494,224,231,231,231,231,32,153,188,224,232,232,232,32,494,382,132,233,233,233,32,132,202,195,234,234,234,32,132,195,160,235,235,235,32,153,224,494,236,236,236,32,494,132,160,237,237,237,32,494,160,153,238,238,238,32,125,375,493,239,239,239,32,493,223,181,240,240,240,32,493,181,146,241,241,241,32,167,174,125,230,230,230,32,493,146,139,242,242,242,32,139,167,125,243,243,243,32,125,493,139,244,244,244,33,248,276,315,246,245,245,245,245,33,276,275,314,315,1,1,1,1,33,275,274,313,314,2,2,2,2,33,274,273,312,313,246,246,246,246,33,273,272,311,312,247,247,247,247,33,272,271,310,311,248,248,248,248,33,271,270,309,310,249,249,249,249,33,270,269,308,309,250,250,250,250,33,279,278,269,270,251,251,251,251,33,280,279,270,271,252,252,252,252,33,281,280,271,272,253,253,253,253,33,282,281,272,273,254,254,254,254,33,283,282,273,274,255,255,255,255,33,284,283,274,275,256,256,256,256,33,285,284,275,276,257,257,257,257,33,286,285,276,248,258,258,258,258,33,287,286,248,277,259,259,259,259,33,289,288,336,337,260,260,260,260,33,286,287,335,334,261,261,261,261,33,285,286,334,333,19,19,19,19,33,284,285,333,332,20,20,20,20,33,283,284,332,331,262,262,262,262,33,282,283,331,330,263,263,263,263,33,281,282,330,329,264,264,264,264,33,280,281,329,328,24,24,24,24,33,279,280,328,327,25,25,25,25,33,278,279,327,326,26,26,26,26,33,299,298,288,289,265,265,265,265,33,300,299,289,290,266,266,266,266,33,301,300,290,291,267,267,267,267,33,302,301,291,292,268,268,268,268,33,303,302,292,293,269,269,269,269,33,304,303,293,294,270,270,270,270,33,305,304,294,295,271,271,271,271,33,306,305,295,296,272,272,272,272,33,307,306,296,297,273,273,273,273,33,306,307,355,354,274,274,274,274,33,305,306,354,353,37,37,37,37,33,304,305,353,352,38,38,38,38,33,303,304,352,351,275,275,275,275,33,302,303,351,350,276,276,276,276,33,301,302,350,349,277,277,277,277,33,300,301,349,348,42,42,42,42,33,299,300,348,347,278,278,278,278,33,298,299,347,346,279,279,279,279,33,242,241,264,265,280,280,280,280,33,243,242,265,266,113,113,113,113,33,244,243,266,267,47,47,47,47,33,245,244,267,268,48,48,48,48,33,226,227,250,249,281,281,281,281,33,227,228,251,250,50,50,50,50,33,228,229,252,251,51,51,51,51,33,229,230,253,252,282,282,282,282,33,230,231,254,253,283,283,283,283,33,231,232,255,254,54,54,54,54,33,232,233,256,255,284,284,284,284,33,233,234,257,256,56,56,56,56,33,234,235,258,257,285,285,285,285,33,324,325,247,246,286,286,286,286,33,248,246,247,277,287,287,287,287,33,237,236,259,260,288,288,288,288,33,238,237,260,261,110,110,110,110,33,239,238,261,262,289,289,289,289,33,240,239,262,263,63,63,63,63,33,241,240,263,264,64,64,64,64,33,309,308,316,317,290,290,290,290,33,310,309,317,318,291,291,291,291,33,311,310,318,319,292,292,292,292,33,312,311,319,320,293,293,293,293,33,313,312,320,321,294,294,294,294,33,314,313,321,322,295,295,295,295,33,315,314,322,323,296,296,296,296,33,246,315,323,324,297,297,297,297,33,249,250,317,316,298,298,298,298,33,250,251,318,317,73,73,73,73,33,251,252,319,318,299,299,299,299,33,252,253,320,319,300,300,300,300,33,253,254,321,320,53,53,53,53,33,254,255,322,321,301,301,301,301,33,255,256,323,322,77,77,77,77,33,256,257,324,323,302,302,302,302,33,257,258,325,324,79,79,79,79,33,337,336,326,327,303,303,303,303,33,338,337,327,328,304,304,304,304,33,339,338,328,329,305,305,305,305,33,340,339,329,330,306,306,306,306,33,341,340,330,331,307,307,307,307,33,342,341,331,332,308,308,308,308,33,343,342,332,333,309,309,309,309,33,344,343,333,334,310,310,310,310,32,369,345,344,286,286,286,32,344,334,335,311,311,311,32,368,369,344,312,312,312,32,344,335,368,313,313,313,33,290,289,337,338,314,314,314,314,33,291,290,338,339,93,93,93,93,33,292,291,339,340,315,315,315,315,33,293,292,340,341,316,316,316,316,33,294,293,341,342,317,317,317,317,33,295,294,342,343,318,318,318,318,33,296,295,343,344,98,98,98,98,33,297,296,344,345,99,99,99,99,33,357,356,346,347,319,319,319,319,33,358,357,347,348,320,320,320,320,33,359,358,348,349,321,321,321,321,33,360,359,349,350,322,322,322,322,33,361,360,350,351,323,323,323,323,33,362,361,351,352,324,324,324,324,33,363,362,352,353,325,325,325,325,33,364,363,353,354,326,326,326,326,33,365,364,354,355,327,327,327,327,33,260,259,356,357,288,288,288,288,33,261,260,357,358,61,61,61,61,33,262,261,358,359,328,328,328,328,33,263,262,359,360,63,63,63,63,33,264,263,360,361,329,329,329,329,33,265,264,361,362,280,280,280,280,33,266,265,362,363,113,113,113,113,33,267,266,363,364,114,114,114,114,33,268,267,364,365,48,48,48,48,33,367,369,368,366,330,330,330,330,33,368,372,370,366,331,331,331,331,33,367,371,373,369,117,117,117,117,33,366,370,371,367,118,118,118,118,32,297,345,369,122,122,122,32,373,245,268,120,120,120,32,268,365,355,119,119,119,32,268,355,307,119,119,119,32,297,369,373,122,122,122,32,373,268,307,332,332,332,32,297,373,307,333,333,333,32,277,247,325,127,127,127,32,258,235,372,334,334,334,32,277,325,258,127,127,127,32,368,335,287,335,335,335,32,277,258,372,336,336,336,32,372,368,287,119,119,119,32,277,372,287,337,337,337,33,395,249,316,444,338,338,338,338,33,394,395,444,443,181,181,181,181,33,393,394,443,442,132,132,132,132,33,392,393,442,441,339,339,339,339,33,391,392,441,440,180,180,180,180,33,390,391,440,439,135,135,135,135,33,476,390,439,482,136,136,136,136,33,269,409,437,308,340,340,340,340,33,409,408,436,437,341,341,341,341,33,408,407,435,436,139,139,139,139,33,407,406,434,435,342,342,342,342,33,406,405,433,434,343,343,343,343,33,405,404,432,433,142,142,142,142,33,475,403,431,481,143,143,143,143,33,477,410,403,475,327,327,327,327,33,412,411,404,405,344,344,344,344,33,413,412,405,406,345,345,345,345,33,414,413,406,407,346,346,346,346,33,415,414,407,408,347,347,347,347,33,416,415,408,409,348,348,348,348,33,278,416,409,269,349,349,349,349,33,288,423,458,336,350,350,350,350,33,423,422,457,458,351,351,351,351,33,422,421,456,457,352,352,352,352,33,421,420,455,456,154,154,154,154,33,420,419,454,455,155,155,155,155,33,419,418,453,454,156,156,156,156,33,478,417,452,484,157,157,157,157,33,479,424,417,478,327,327,327,327,33,426,425,418,419,353,353,353,353,33,427,426,419,420,354,354,354,354,33,428,427,420,421,355,355,355,355,33,429,428,421,422,356,356,356,356,33,430,429,422,423,357,357,357,357,33,298,430,423,288,358,358,358,358,33,430,298,346,465,359,359,359,359,33,429,430,465,464,360,360,360,360,33,428,429,464,463,361,361,361,361,33,427,428,463,462,362,362,362,362,33,426,427,462,461,363,363,363,363,33,425,426,461,460,170,170,170,170,33,479,425,460,485,171,171,171,171,33,474,382,396,480,143,143,143,143,33,384,383,397,398,172,172,172,172,33,385,384,398,399,364,364,364,364,33,386,385,399,400,174,174,174,174,33,387,386,400,401,365,365,365,365,33,388,387,401,402,176,176,176,176,33,236,388,402,259,366,366,366,366,33,473,376,390,476,178,178,178,178,33,376,377,391,390,367,367,367,367,33,377,378,392,391,134,134,134,134,33,378,379,393,392,133,133,133,133,33,379,380,394,393,368,368,368,368,33,380,381,395,394,181,181,181,181,33,381,226,249,395,369,369,369,369,33,481,431,438,482,327,327,327,327,33,433,432,439,440,370,370,370,370,33,434,433,440,441,371,371,371,371,33,435,434,441,442,372,372,372,372,33,436,435,442,443,373,373,373,373,33,437,436,443,444,374,374,374,374,33,308,437,444,316,375,375,375,375,33,484,452,490,487,376,376,376,376,33,454,453,446,447,377,377,377,377,33,455,454,447,448,378,378,378,378,33,456,455,448,449,379,379,379,379,33,457,456,449,450,380,380,380,380,33,458,457,450,451,381,381,381,381,33,336,458,451,326,382,382,382,382,33,477,411,446,483,195,195,195,195,33,411,412,447,446,196,196,196,196,33,412,413,448,447,197,197,197,197,33,413,414,449,448,383,383,383,383,33,414,415,450,449,384,384,384,384,33,415,416,451,450,200,200,200,200,33,416,278,326,451,385,385,385,385,33,486,466,459,485,327,327,327,327,33,468,467,460,461,386,386,386,386,33,469,468,461,462,387,387,387,387,33,470,469,462,463,388,388,388,388,33,471,470,463,464,389,389,389,389,33,472,471,464,465,390,390,390,390,33,356,472,465,346,391,391,391,391,33,480,396,466,486,157,157,157,157,33,398,397,467,468,209,209,209,209,33,399,398,468,469,173,173,173,173,33,400,399,469,470,392,392,392,392,33,401,400,470,471,212,212,212,212,33,402,401,471,472,393,393,393,393,33,259,402,472,356,177,177,177,177,33,397,480,486,467,215,215,215,215,33,467,486,485,460,286,286,286,286,33,410,477,483,445,217,217,217,217,32,453,484,487,394,394,394,32,488,483,446,327,327,327,32,453,487,488,286,286,286,32,453,488,446,327,327,327,33,432,481,482,439,327,327,327,327,33,375,473,476,389,224,224,224,224,33,383,474,480,397,215,215,215,215,33,424,479,485,459,224,224,224,224,33,425,479,478,418,395,395,395,395,33,418,478,484,453,226,226,226,226,33,411,477,475,404,286,286,286,286,33,404,475,481,432,227,227,227,227,33,389,476,482,438,217,217,217,217,33,489,488,492,493,396,396,396,396,33,488,489,445,483,327,327,327,327,33,488,487,491,492,230,230,230,230,33,487,490,494,491,397,397,397,397,32,490,452,417,232,232,232,32,424,459,466,235,235,235,32,494,490,417,236,236,236,32,424,466,396,234,234,234,32,494,417,424,398,398,398,32,396,382,494,233,233,233,32,424,396,494,399,399,399,32,375,389,438,400,400,400,32,438,431,403,243,243,243,32,410,445,489,241,241,241,32,375,438,403,236,236,236,32,410,489,493,401,401,401,32,375,403,410,402,402,402,32,410,493,375,403,403,403,33,496,497,499,498,230,230,230,230,33,498,499,503,502,143,143,143,143,33,502,503,501,500,404,404,404,404,33,500,501,497,496,217,217,217,217,33,498,502,500,496,405,405,405,405,33,503,499,497,501,406,406,406,406]},"straight_0":{"normals":[-2.43709e-15,-1,4.47036e-8,-7.95649e-8,0,1,-5.30433e-8,-0.00000349681,1,0,-1,0,7.95649e-8,0,-1,0.164399,0,-0.986394,0,-1,2.98023e-8,-5.29818e-9,-1,3.17891e-8,-5.26938e-15,-1,6.81196e-8,-1.32456e-8,-1,7.94738e-8,1.89446e-10,-1,4.00205e-8,7.74418e-10,-1,1.63596e-7,-0.164399,0,0.986394,1,0,0,1,0,0,-1,-1.19209e-7,-5.96046e-8,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,2.43709e-15,-1,4.47036e-8,-7.95649e-8,0,-1,-5.30433e-8,-0.00000349681,-1,7.95649e-8,0,1,0.164399,0,0.986394,0,-1,5.96046e-8,0,-1,0,1.05964e-8,-1,6.35782e-8,1.24339e-9,-1,-7.4605e-9,-6.52555e-10,-1,8.04516e-8,-0.164399,0,-0.986394,1,0,0,-1,-1.19209e-7,5.96046e-8,-1,0,0,2.43709e-15,1,-4.47036e-8,-5.30433e-8,0.00000349681,1,0,1,0,0,1,-5.96046e-8,0,1,0,1.05964e-8,1,-6.35782e-8,1.24339e-9,1,7.4605e-9,-6.52555e-10,1,-8.04516e-8,-1,1.19209e-7,-5.96046e-8,1,0,0,-2.43709e-15,1,-4.47036e-8,-5.30433e-8,0.00000349681,-1,0,1,0,0,1,-2.98023e-8,-5.29818e-9,1,-3.17891e-8,-5.26938e-15,1,-6.81196e-8,-1.32456e-8,1,-7.94738e-8,1.89446e-10,1,-4.00205e-8,7.74418e-10,1,-1.63596e-7,-1,1.19209e-7,5.96046e-8,1,0,0,-1,0,0],"faces":[33,5,12,11,6,0,0,0,0,33,7,0,44,47,1,1,1,1,33,6,11,9,2,2,2,2,2,33,0,7,8,1,3,3,3,3,33,1,8,12,5,4,4,4,4,33,45,3,10,46,5,5,5,5,32,3,15,29,6,6,6,32,29,13,4,7,7,7,32,4,2,9,8,8,8,32,9,10,3,9,9,9,32,3,29,4,10,10,10,32,4,9,3,11,11,11,33,48,4,13,49,12,12,12,12,32,44,0,1,13,13,13,32,44,1,5,14,14,14,32,2,4,48,14,14,14,32,44,5,6,13,13,13,32,6,2,48,14,14,14,32,6,48,44,13,13,13,33,3,45,67,15,15,15,15,15,33,29,72,49,13,16,16,16,16,32,12,8,7,17,17,17,32,46,10,9,18,18,18,32,46,9,11,19,19,19,32,12,7,47,20,20,20,32,46,11,12,19,19,19,32,47,46,12,17,17,17,33,20,21,26,27,21,21,21,21,33,66,14,22,70,22,22,22,22,33,21,17,24,26,23,23,23,23,33,14,16,23,22,3,3,3,3,33,16,20,27,23,24,24,24,24,33,68,69,25,18,25,25,25,25,32,29,15,18,26,26,26,32,18,25,24,3,3,3,32,24,17,19,27,27,27,32,19,28,29,28,28,28,32,29,18,24,29,29,29,32,24,19,29,30,30,30,33,71,73,28,19,31,31,31,31,32,16,14,66,14,14,14,32,71,19,17,13,13,13,32,71,17,21,14,14,14,32,20,16,66,14,14,14,32,71,21,20,13,13,13,32,66,71,20,32,32,32,33,18,15,67,68,33,33,33,33,33,29,28,73,72,16,16,16,16,32,22,23,27,20,20,20,32,26,24,25,17,17,17,32,70,22,27,19,19,19,32,26,25,69,20,20,20,32,70,27,26,19,19,19,32,26,69,70,34,34,34,33,35,36,41,42,35,35,35,35,33,44,30,37,47,1,1,1,1,33,36,32,39,41,36,36,36,36,33,30,31,38,37,37,37,37,37,33,31,35,42,38,4,4,4,4,33,45,46,40,33,5,5,5,5,32,65,51,33,38,38,38,32,33,40,39,37,37,37,32,39,32,34,39,39,39,32,34,43,65,40,40,40,32,65,33,39,41,41,41,32,39,34,65,42,42,42,33,48,49,43,34,12,12,12,12,32,31,30,44,32,32,32,32,48,34,32,13,13,13,32,48,32,36,32,32,32,32,35,31,44,13,13,13,32,48,36,35,13,13,13,32,44,48,35,14,14,14,33,33,51,67,45,43,43,43,43,33,65,43,49,72,44,44,44,44,32,37,38,42,17,17,17,32,41,39,40,17,17,17,32,47,37,42,17,17,17,32,41,40,46,17,17,17,32,47,42,41,17,17,17,32,41,46,47,19,19,19,33,56,63,62,57,45,45,45,45,33,66,70,58,50,22,22,22,22,33,57,62,60,53,46,46,46,46,33,50,58,59,52,47,47,47,47,33,52,59,63,56,24,24,24,24,33,68,54,61,69,25,25,25,25,32,54,51,65,48,48,48,32,65,64,55,49,49,49,32,55,53,60,50,50,50,32,60,61,54,51,51,51,32,54,65,55,52,52,52,32,55,60,54,53,53,53,33,71,55,64,73,31,31,31,31,32,66,50,52,13,13,13,32,66,52,56,32,32,32,32,53,55,71,32,32,32,32,66,56,57,13,13,13,32,57,53,71,13,13,13,32,57,71,66,32,32,32,33,54,68,67,51,54,54,54,54,33,65,72,73,64,55,55,55,55,32,63,59,58,17,17,17,32,69,61,60,56,56,56,32,69,60,62,17,17,17,32,63,58,70,17,17,17,32,69,62,63,17,17,17,32,70,69,63,34,34,34],"uvs":[],"vertices":[431.75,-4,19,431.75,-4,17.5,431.75,-4,9.50001,9.25002,-4,8.00001,431.75,-4,6.00001,431.75,-0.999999,17.5,431.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.50001,0.25,-1,9.49999,0.25,-0.999999,17.5,440.75,-4,7.50001,431.75,-4,-19,9.25002,-4,1.15241e-7,431.75,-4,-17.5,431.75,-4,-9.50001,9.25002,-4,-8.00001,431.75,-4,-6.00001,431.75,-1,-17.5,431.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.50001,0.25,-1,-9.49999,0.25,-1,-17.5,440.75,-4,-7.50001,440.75,-4,1.15241e-7,431.75,4,19,431.75,4,17.5,431.75,4,9.50001,9.25002,4,8.00001,431.75,4,6.00001,431.75,1,17.5,431.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.50001,0.25,1,9.49999,0.25,1,17.5,440.75,4,7.50001,431.75,8.30517e-7,19,9.25002,3.49691e-7,8.00001,0.25,2.84124e-7,6.50001,0.25,8.30515e-7,19,431.75,2.62269e-7,6.00001,440.75,3.27836e-7,7.50001,431.75,4,-19,9.25002,4,-2.3445e-7,431.75,4,-17.5,431.75,4,-9.50001,9.25002,4,-8.00001,431.75,4,-6.00001,431.75,0.999999,-17.5,431.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.50001,0.25,1,-9.49999,0.25,0.999999,-17.5,440.75,4,-7.50001,440.75,4,-2.3445e-7,431.75,-8.30517e-7,-19,9.25002,-2.6054e-15,-5.96046e-8,9.25002,-3.49691e-7,-8.00001,0.25,-2.84124e-7,-6.50001,0.25,-8.30515e-7,-19,431.75,-2.62269e-7,-6.00001,440.75,-2.6054e-15,-5.96046e-8,440.75,-3.27836e-7,-7.50001],"metadata":{"generator":"io_three","uvs":0,"vertices":74,"version":3,"normals":57,"type":"Geometry","faces":108}},"straight_2":{"faces":[33,5,12,11,6,0,0,0,0,33,7,0,44,46,1,1,1,1,33,6,11,9,2,2,2,2,2,33,0,7,8,1,3,3,3,3,33,1,8,12,5,4,4,4,4,33,45,3,10,47,5,5,5,5,32,3,15,29,6,6,6,32,29,13,4,7,7,7,32,4,2,9,8,8,8,32,9,10,3,9,9,9,32,3,29,4,10,10,10,32,4,9,3,11,11,11,33,48,4,13,49,12,12,12,12,32,44,0,1,13,13,13,32,44,1,5,14,14,14,32,2,4,48,14,14,14,32,44,5,6,13,13,13,32,6,2,48,14,14,14,32,6,48,44,13,13,13,33,3,45,67,15,15,15,15,15,33,29,72,49,13,16,16,16,16,32,12,8,7,17,17,17,32,47,10,9,18,18,18,32,47,9,11,19,19,19,32,12,7,46,20,20,20,32,47,11,12,19,19,19,32,46,47,12,17,17,17,33,20,21,26,27,21,21,21,21,33,66,14,22,69,22,22,22,22,33,21,17,24,26,23,23,23,23,33,14,16,23,22,3,3,3,3,33,16,20,27,23,24,24,24,24,33,68,70,25,18,25,25,25,25,32,29,15,18,26,26,26,32,18,25,24,3,3,3,32,24,17,19,27,27,27,32,19,28,29,28,28,28,32,29,18,24,29,29,29,32,24,19,29,30,30,30,33,71,73,28,19,31,31,31,31,32,16,14,66,14,14,14,32,71,19,17,13,13,13,32,71,17,21,14,14,14,32,20,16,66,14,14,14,32,71,21,20,13,13,13,32,66,71,20,32,32,32,33,18,15,67,68,33,33,33,33,33,29,28,73,72,16,16,16,16,32,22,23,27,20,20,20,32,26,24,25,17,17,17,32,69,22,27,19,19,19,32,26,25,70,20,20,20,32,69,27,26,19,19,19,32,26,70,69,34,34,34,33,35,36,41,42,35,35,35,35,33,44,30,37,46,1,1,1,1,33,36,32,39,41,36,36,36,36,33,30,31,38,37,37,37,37,37,33,31,35,42,38,38,38,38,38,33,45,47,40,33,5,5,5,5,32,65,51,33,39,39,39,32,33,40,39,37,37,37,32,39,32,34,40,40,40,32,34,43,65,41,41,41,32,65,33,39,42,42,42,32,39,34,65,43,43,43,33,48,49,43,34,12,12,12,12,32,31,30,44,32,32,32,32,48,34,32,13,13,13,32,48,32,36,32,32,32,32,35,31,44,13,13,13,32,48,36,35,13,13,13,32,44,48,35,14,14,14,33,33,51,67,45,44,44,44,44,33,65,43,49,72,45,45,45,45,32,37,38,42,17,17,17,32,41,39,40,17,17,17,32,46,37,42,17,17,17,32,41,40,47,17,17,17,32,46,42,41,17,17,17,32,41,47,46,19,19,19,33,56,63,62,57,46,46,46,46,33,66,69,58,50,22,22,22,22,33,57,62,60,53,47,47,47,47,33,50,58,59,52,48,48,48,48,33,52,59,63,56,49,49,49,49,33,68,54,61,70,25,25,25,25,32,54,51,65,50,50,50,32,65,64,55,51,51,51,32,55,53,60,52,52,52,32,60,61,54,53,53,53,32,54,65,55,54,54,54,32,55,60,54,55,55,55,33,71,55,64,73,31,31,31,31,32,66,50,52,13,13,13,32,66,52,56,32,32,32,32,53,55,71,32,32,32,32,66,56,57,13,13,13,32,57,53,71,13,13,13,32,57,71,66,32,32,32,33,54,68,67,51,56,56,56,56,33,65,72,73,64,57,57,57,57,32,63,59,58,17,17,17,32,70,61,60,58,58,58,32,70,60,62,17,17,17,32,63,58,69,17,17,17,32,70,62,63,17,17,17,32,69,70,63,34,34,34],"metadata":{"generator":"io_three","uvs":0,"vertices":74,"version":3,"normals":59,"type":"Geometry","faces":108},"uvs":[],"vertices":[107.75,-4,19,107.75,-4,17.5,107.75,-4,9.50001,9.25002,-4,8.00001,107.75,-4,6.00001,107.75,-0.999999,17.5,107.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.50001,0.25,-1,9.49999,0.25,-0.999999,17.5,116.75,-4,7.50001,107.75,-4,-19,9.25002,-4,1.15241e-7,107.75,-4,-17.5,107.75,-4,-9.50001,9.25002,-4,-8.00001,107.75,-4,-6.00001,107.75,-1,-17.5,107.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.50001,0.25,-1,-9.49999,0.25,-1,-17.5,116.75,-4,-7.50001,116.75,-4,1.15241e-7,107.75,4,19,107.75,4,17.5,107.75,4,9.50001,9.25002,4,8.00001,107.75,4,6.00001,107.75,1,17.5,107.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.50001,0.25,1,9.49999,0.25,1,17.5,116.75,4,7.50001,107.75,8.30517e-7,19,9.25002,3.49691e-7,8.00001,0.25,8.30515e-7,19,0.25,2.84124e-7,6.50001,107.75,2.62269e-7,6.00001,116.75,3.27836e-7,7.50001,107.75,4,-19,9.25002,4,-2.3445e-7,107.75,4,-17.5,107.75,4,-9.50001,9.25002,4,-8.00001,107.75,4,-6.00001,107.75,0.999999,-17.5,107.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.50001,0.25,1,-9.49999,0.25,0.999999,-17.5,116.75,4,-7.50001,116.75,4,-2.3445e-7,107.75,-8.30517e-7,-19,9.25002,-2.6054e-15,-5.96046e-8,9.25002,-3.49691e-7,-8.00001,0.25,-8.30515e-7,-19,0.25,-2.84124e-7,-6.50001,107.75,-2.62269e-7,-6.00001,116.75,-2.6054e-15,-5.96046e-8,116.75,-3.27836e-7,-7.50001],"normals":[-9.78237e-15,-1,4.47036e-8,-3.1937e-7,0,1,-2.12913e-7,-0.00000349681,1,0,-1,0,3.1937e-7,0,-1,0.164399,0,-0.986394,0,-1,2.98023e-8,-5.2982e-9,-1,3.17891e-8,-2.1151e-14,-1,6.81196e-8,-1.32456e-8,-1,7.94738e-8,8.32174e-10,-1,4.09846e-8,3.67514e-9,-1,1.81001e-7,-0.164399,0,0.986394,1,0,0,1,0,0,-1,-1.19209e-7,-5.96046e-8,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,9.78237e-15,-1,4.47036e-8,-3.1937e-7,0,-1,-2.12913e-7,-0.00000349681,-1,3.1937e-7,0,1,0.164399,0,0.986394,0,-1,5.96046e-8,0,-1,0,1.05964e-8,-1,6.35782e-8,8.01423e-9,-1,-4.80866e-8,-2.72031e-9,-1,8.35532e-8,-0.164399,0,-0.986394,1,0,0,-1,-1.19209e-7,5.96046e-8,-1,0,0,9.78237e-15,1,-4.47036e-8,-2.12913e-7,0.00000349681,1,0,1,0,3.1937e-7,0,-1,0,1,-5.96046e-8,0,1,0,1.05964e-8,1,-6.35782e-8,8.01423e-9,1,4.80866e-8,-2.72031e-9,1,-8.35532e-8,-1,1.19209e-7,-5.96046e-8,1,0,0,-9.78237e-15,1,-4.47036e-8,-2.12913e-7,0.00000349681,-1,0,1,0,3.1937e-7,0,1,0,1,-2.98023e-8,-5.2982e-9,1,-3.17891e-8,-2.1151e-14,1,-6.81196e-8,-1.32456e-8,1,-7.94738e-8,8.32174e-10,1,-4.09846e-8,3.67514e-9,1,-1.81001e-7,-1,1.19209e-7,5.96046e-8,1,0,0,-1,0,0]},"straight_4":{"uvs":[],"normals":[-1.96562e-14,-1,4.47036e-8,-6.41724e-7,0,1,-4.27816e-7,-0.00000349681,1,0,-1,0,6.41724e-7,0,-1,0.164399,0,-0.986394,0,-1,2.98023e-8,-5.2982e-9,-1,3.17891e-8,-4.24997e-14,-1,6.81196e-8,-1.32456e-8,-1,7.94738e-8,1.915e-9,-1,4.26089e-8,9.78156e-9,-1,2.1764e-7,-0.164399,0,0.986394,1,0,0,1,0,0,-1,-1.19209e-7,-5.96046e-8,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,1.96562e-14,-1,4.47036e-8,-6.41724e-7,0,-1,-4.27816e-7,-0.00000349681,-1,6.41724e-7,0,1,0.164399,0,0.986394,0,-1,5.96046e-8,0,-1,0,1.05964e-8,-1,6.35782e-8,8.67167e-8,-1,-5.20313e-7,-5.76479e-9,-1,8.81199e-8,-0.164399,0,-0.986394,1,0,0,-1,-1.19209e-7,5.96046e-8,-1,0,0,1.96562e-14,1,-4.47036e-8,-4.27816e-7,0.00000349681,1,0,1,0,0,1,-5.96046e-8,0,1,0,1.05964e-8,1,-6.35782e-8,8.67167e-8,1,5.20313e-7,-5.76479e-9,1,-8.81199e-8,-1,1.19209e-7,-5.96046e-8,1,0,0,-1.96562e-14,1,-4.47036e-8,-4.27816e-7,0.00000349681,-1,0,1,0,0,1,-2.98023e-8,-5.2982e-9,1,-3.17891e-8,-4.24997e-14,1,-6.81196e-8,-1.32456e-8,1,-7.94738e-8,1.915e-9,1,-4.26089e-8,9.78156e-9,1,-2.1764e-7,-1,1.19209e-7,5.96046e-8,1,0,0,-1,0,0],"metadata":{"generator":"io_three","uvs":0,"vertices":74,"version":3,"normals":57,"type":"Geometry","faces":108},"vertices":[53.75,-4,19,53.75,-4,17.5,53.75,-4,9.50001,9.25002,-4,8.00001,53.75,-4,6.00001,53.75,-0.999999,17.5,53.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.50001,0.25,-1,9.49999,0.25,-0.999999,17.5,62.75,-4,7.50001,53.75,-4,-19,9.25002,-4,1.15241e-7,53.75,-4,-17.5,53.75,-4,-9.50001,9.25002,-4,-8.00001,53.75,-4,-6.00001,53.75,-1,-17.5,53.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.50001,0.25,-1,-9.49999,0.25,-1,-17.5,62.75,-4,-7.50001,62.75,-4,1.15241e-7,53.75,4,19,53.75,4,17.5,53.75,4,9.50001,9.25002,4,8.00001,53.75,4,6.00001,53.75,1,17.5,53.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.50001,0.25,1,9.49999,0.25,1,17.5,62.75,4,7.50001,53.75,8.30517e-7,19,9.25002,3.49691e-7,8.00001,0.25,8.30515e-7,19,0.25,2.84124e-7,6.50001,53.75,2.62269e-7,6.00001,62.75,3.27836e-7,7.50001,53.75,4,-19,9.25002,4,-2.3445e-7,53.75,4,-17.5,53.75,4,-9.50001,9.25002,4,-8.00001,53.75,4,-6.00001,53.75,0.999999,-17.5,53.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.50001,0.25,1,-9.49999,0.25,0.999999,-17.5,62.75,4,-7.50001,62.75,4,-2.3445e-7,53.75,-8.30517e-7,-19,9.25002,-2.6054e-15,-5.96046e-8,9.25002,-3.49691e-7,-8.00001,0.25,-8.30515e-7,-19,0.25,-2.84124e-7,-6.50001,53.75,-2.62269e-7,-6.00001,62.75,-2.6054e-15,-5.96046e-8,62.75,-3.27836e-7,-7.50001],"faces":[33,5,12,11,6,0,0,0,0,33,7,0,44,46,1,1,1,1,33,6,11,9,2,2,2,2,2,33,0,7,8,1,3,3,3,3,33,1,8,12,5,4,4,4,4,33,45,3,10,47,5,5,5,5,32,3,15,29,6,6,6,32,29,13,4,7,7,7,32,4,2,9,8,8,8,32,9,10,3,9,9,9,32,3,29,4,10,10,10,32,4,9,3,11,11,11,33,48,4,13,49,12,12,12,12,32,44,0,1,13,13,13,32,44,1,5,14,14,14,32,2,4,48,14,14,14,32,44,5,6,13,13,13,32,6,2,48,14,14,14,32,6,48,44,13,13,13,33,3,45,67,15,15,15,15,15,33,29,72,49,13,16,16,16,16,32,12,8,7,17,17,17,32,47,10,9,18,18,18,32,47,9,11,19,19,19,32,12,7,46,20,20,20,32,47,11,12,19,19,19,32,46,47,12,17,17,17,33,20,21,26,27,21,21,21,21,33,66,14,22,69,22,22,22,22,33,21,17,24,26,23,23,23,23,33,14,16,23,22,3,3,3,3,33,16,20,27,23,24,24,24,24,33,68,70,25,18,25,25,25,25,32,29,15,18,26,26,26,32,18,25,24,3,3,3,32,24,17,19,27,27,27,32,19,28,29,28,28,28,32,29,18,24,29,29,29,32,24,19,29,30,30,30,33,71,73,28,19,31,31,31,31,32,16,14,66,14,14,14,32,71,19,17,13,13,13,32,71,17,21,14,14,14,32,20,16,66,14,14,14,32,71,21,20,13,13,13,32,66,71,20,32,32,32,33,18,15,67,68,33,33,33,33,33,29,28,73,72,16,16,16,16,32,22,23,27,20,20,20,32,26,24,25,17,17,17,32,69,22,27,19,19,19,32,26,25,70,20,20,20,32,69,27,26,19,19,19,32,26,70,69,34,34,34,33,35,36,41,42,35,35,35,35,33,44,30,37,46,1,1,1,1,33,36,32,39,41,36,36,36,36,33,30,31,38,37,37,37,37,37,33,31,35,42,38,4,4,4,4,33,45,47,40,33,5,5,5,5,32,65,51,33,38,38,38,32,33,40,39,37,37,37,32,39,32,34,39,39,39,32,34,43,65,40,40,40,32,65,33,39,41,41,41,32,39,34,65,42,42,42,33,48,49,43,34,12,12,12,12,32,31,30,44,32,32,32,32,48,34,32,13,13,13,32,48,32,36,32,32,32,32,35,31,44,13,13,13,32,48,36,35,13,13,13,32,44,48,35,14,14,14,33,33,51,67,45,43,43,43,43,33,65,43,49,72,44,44,44,44,32,37,38,42,17,17,17,32,41,39,40,17,17,17,32,46,37,42,17,17,17,32,41,40,47,17,17,17,32,46,42,41,17,17,17,32,41,47,46,19,19,19,33,56,63,62,57,45,45,45,45,33,66,69,58,50,22,22,22,22,33,57,62,60,53,46,46,46,46,33,50,58,59,52,47,47,47,47,33,52,59,63,56,24,24,24,24,33,68,54,61,70,25,25,25,25,32,54,51,65,48,48,48,32,65,64,55,49,49,49,32,55,53,60,50,50,50,32,60,61,54,51,51,51,32,54,65,55,52,52,52,32,55,60,54,53,53,53,33,71,55,64,73,31,31,31,31,32,66,50,52,13,13,13,32,66,52,56,32,32,32,32,53,55,71,32,32,32,32,66,56,57,13,13,13,32,57,53,71,13,13,13,32,57,71,66,32,32,32,33,54,68,67,51,54,54,54,54,33,65,72,73,64,55,55,55,55,32,63,59,58,17,17,17,32,70,61,60,56,56,56,32,70,60,62,17,17,17,32,63,58,69,17,17,17,32,70,62,63,17,17,17,32,69,70,63,34,34,34]},"single_double_R_ab":{"normals":[1.67996e-7,1,3.17104e-7,-2.05003e-14,1,-7.18347e-8,4.86166e-8,1,-2.39968e-8,-9.06765e-8,1,-2.57034e-7,2.37331e-14,1,-1.12125e-7,1.37894e-8,1,-6.80638e-9,-1.95025e-7,1,-4.58308e-7,-1.92142e-9,1,-5.00929e-8,0,0,1,0.0446298,0,0.999004,0.155718,0,0.987801,-0.332928,0,-0.942952,0,-1,0,0,-1,0,0,0,1,6.71764e-8,-1,2.38095e-7,-4.11973e-8,-1,-1.57307e-7,7.94729e-9,-1,4.76837e-8,1.62991e-9,-1,6.81203e-8,1.17515e-8,-1,9.56046e-8,0,-1,0,-9.9341e-9,-1,5.96046e-8,0,-1,0,2.12357e-9,-1,6.32976e-8,1.50688e-9,-1,5.96046e-8,0,0,-1,-0.0463845,0,-0.998924,0,-1,0,0,-1,0,0,1,0,0,1,0,0,0,-1,-0.0463845,0,-0.998924,-5.41036e-7,1,-0.00000131139,-1.03899e-14,1,-6.81203e-8,7.94729e-9,1,-4.76837e-8,-9.9341e-9,1,-5.96046e-8,1.23631e-10,1,-6.50279e-8,1.28903e-7,1,3.653e-7,1.57438e-8,1,-5.96046e-8,-3.77542e-10,1,-5.57026e-8,-4.31721e-9,1,-4.24549e-8,0.0457993,-5.48889e-8,0.998951,0.155468,0,0.987841,0.253347,4.28659e-8,0.967375,0.332759,8.46926e-8,0.943012,0.3916,0,0.920135,0.43,-3.1431e-7,0.902829,-0.332696,9.94759e-8,-0.943034,-0.391555,0,-0.920155,-0.429974,0,-0.902841,-0.448859,1.62645e-7,-0.893603,0.046112,0,0.998936,0.155402,0,0.987851,0.155402,0,0.987851,0.155402,0,0.987851,0.155402,0,0.987851,0.253265,0,0.967397,0.332685,-2.66446e-7,0.943038,0.332685,0,0.943038,0.332685,0,0.943038,0.332685,2.66442e-7,0.943038,0.332685,0,0.943038,0.332685,0,0.943038,0.391547,3.04221e-8,0.920158,0.42997,3.06589e-8,0.902843,0.0457993,5.48889e-8,0.998951,0.155468,0,0.987841,0.253347,4.28659e-8,0.967375,-0.332696,-9.94759e-8,-0.943034,0.332759,8.46926e-8,0.943012,-0.391555,0,-0.920155,0.3916,0,0.920135,0.43,3.1431e-7,0.902829,-0.448859,-1.62645e-7,-0.893603,0,1,0,0,1,0,-6.54502e-7,-1,-0.00000130301,-9.20724e-8,-1,-1.77527e-7,-1.18666e-14,-1,5.60624e-8,4.51517e-8,-1,1.66329e-7,2.95996e-8,-1,1.08604e-7,-1.21856e-8,-1,2.25068e-8,-2.63274e-8,-1,-9.62437e-9,-4.28773e-8,1,-1.49568e-7,1.3317e-7,1,2.34924e-7,-1.27576e-14,1,-4.47036e-8,-4.25272e-15,1,-3.97363e-8,0,1,-4.47035e-8,-2.34239e-9,1,-4.62477e-8,0,1,-5.02898e-8,-2.36217e-8,1,-1.50157e-7,7.9057e-15,1,-4.23514e-8,-1.14468e-8,1,-6.74913e-8,-1.09344e-9,1,-5.1311e-8,6.43485e-15,1,-4.47036e-8,7.2413e-10,1,-4.03279e-8,-4.25266e-15,1,-3.97363e-8,-5.03496e-15,1,-3.97363e-8,-1.60877e-14,1,-4.47036e-8,-2.04954e-9,1,-4.47035e-8,9.0412e-10,1,-5.53219e-8,2.33718e-9,1,-3.73797e-8,-1.01022e-8,1,-7.02986e-8,-7.47624e-15,1,-4.47036e-8,1.29682e-8,1,-2.33605e-9,-9.59561e-9,1,-7.49151e-8,-6.57636e-15,1,-4.47036e-8,4.87022e-16,1,-4.47035e-8,2.74717e-9,1,-3.36708e-8,3.86602e-10,1,-4.30453e-8,-1.43945e-7,0,1,-1.83594e-7,0,-1,-1.83594e-7,0,-1,-1.66789e-7,0,-1,-1.66789e-7,0,-1,-1.26709e-7,0,-1,-1.26709e-7,0,-1,-1.66789e-7,0,-1,-5.70813e-7,0,-1,-1.50032e-7,-3.83246e-7,-1,-1.07023e-7,0,-1,-5.70813e-7,0,-1,0.448868,0,0.893598,0.448898,0,0.893583,0.448898,0,0.893583,0.448898,0,0.893583,0.448898,0,0.893583,0.448858,2.99755e-7,0.893603,0.44888,0,0.893592,0.448858,-2.99755e-7,0.893603,0.44888,0,0.893592,0.448858,0,0.893603,0.448858,0,0.893603,-0.448897,0,-0.893584,-1,0,-9.93427e-9,-0.0000858307,-1,4.47035e-8,-1,0,-9.93427e-9,0.0000858307,1,-4.47035e-8,-1,0,0,-1,0,0,-1,0,0,-0.999997,0,0.00260416,-1,0,-9.93427e-9,-1,0,0,-0.0000171662,1,-4.47036e-8,-0.0000858307,1,-4.47035e-8,-1,0,0,-0.999997,0,-0.00260416,0.0000858309,-1,4.47036e-8,-1,0,9.93427e-9,-1,0,9.93427e-9,-1,-7.45058e-9,3.33067e-16,-1,0,-1.86264e-9,1.86669e-7,0,-1,-1.05833e-7,-0.00000492732,1,-1.0796e-7,-0.00000683467,1,0.164399,0,0.986394,2.31357e-9,-1,8.60254e-8,-9.91689e-14,-1,2.27596e-7,8.50544e-15,-1,7.94727e-8,8.50533e-15,-1,7.94727e-8,7.37665e-15,-1,4.47036e-8,1.27576e-14,-1,4.47036e-8,-4.92476e-7,-1,-9.80438e-7,-6.19558e-9,-1,2.44852e-8,0,-1,5.02898e-8,3.48814e-9,-1,5.82707e-8,-7.9057e-15,-1,4.23514e-8,2.34239e-9,-1,4.62477e-8,1.09344e-9,-1,5.1311e-8,-6.43485e-15,-1,4.47036e-8,-1.05717e-9,-1,3.83154e-8,4.02888e-15,-1,4.47035e-8,-4.87022e-16,-1,4.47035e-8,3.09132e-15,-1,4.47035e-8,1.60877e-14,-1,4.47036e-8,-2.07138e-9,-1,4.47037e-8,3.02155e-9,-1,4.72254e-8,4.70642e-9,-1,5.60195e-8,7.57892e-9,-1,6.91999e-8,-3.432e-9,-1,3.44824e-8,5.44397e-9,-1,6.063e-8,-2.85382e-7,-0.0000034968,-1,0,0,1,-1.03498e-7,-0.0000055631,-1,1.6231e-7,0,1,-1.05833e-7,0.00000492732,1,1.86669e-7,0,-1,-1.0796e-7,0.00000683467,1,-2.85382e-7,0.0000034968,-1,-1.03498e-7,0.0000055631,-1,0.164399,0,-0.986394],"metadata":{"uvs":0,"generator":"io_three","faces":254,"vertices":160,"version":3,"normals":193,"type":"Geometry"},"uvs":[],"vertices":[13.5,0.999999,-17.5,0.25,0.999999,-17.5,0.25,0.999999,-17.5,25.2242,0.999999,-18.0238,13.5,4,-17.5,0.25,4,-17.5,31.4168,0.999999,-19,25.2242,4,-18.0238,31.4168,4,-19,57.2743,0.999999,-17.5,61.5227,0.999999,-19,57.2743,4,-17.5,61.5227,4,-19,0.25,1,-9.5,0.25,4,-19,13.5,-4,-17.5,0.25,-4,-17.5,0.25,-4,-19,25.2242,-4,-18.0238,31.4168,-4,-19,13.5,-1,-17.5,0.25,-1,-17.5,25.2242,-1,-18.0238,0.25,-1,-17.5,31.4168,-1,-19,61.5227,-1,-19,57.2743,-1,-17.5,61.5227,-4,-19,57.2743,-4,-17.5,0.25,-1,-9.5,0.25,-4,9.49997,0.25,-4,6.00001,-8.74998,-4,7.50001,-8.74998,-4,-7.50001,0.25,-4,-6.00001,0.25,-4,-9.49997,27.964,-4,8.83686,13.5005,-4,9.49998,42.4663,-4,6.55447,56.8143,-4,2.79686,70.9725,-4,-2.19915,84.9338,-4,-8.14093,87.7873,-4,-9.49999,13.5,-0.999999,17.5,0.25,-0.999999,17.5,0.25,-0.999999,17.5,13.5006,-0.999999,17.5,13.5,-4,17.5,0.25,-4,17.5,13.5006,-4,17.5,0.25,-1,9.5,13.5001,-1,9.5,61.8423,-1,9.5,0.25,-4,19,28.928,-4,18.2878,13.5005,-4,19,33.9362,-4,17.5,13.5,4,17.5,0.25,4,17.5,0.25,4,19,13.5005,4,19,28.928,4,18.2878,13.5006,4,17.5,33.9362,4,17.5,13.5,1,17.5,0.25,1,17.5,13.5006,1,17.5,0.25,1,17.5,0.25,1,9.5,13.5001,1,9.5,61.8423,1,9.5,0.25,4,-9.49997,0.25,4,-6.00001,-8.74998,4,-7.50001,-8.74998,4,7.50001,0.25,4,6.00001,0.25,4,9.49997,13.5005,4,9.49998,27.964,4,8.83686,42.4663,4,6.55447,56.8143,4,2.79686,70.9725,4,-2.19915,84.9338,4,-8.14093,87.7873,4,-9.49999,27.964,-1,8.83686,42.4663,-1,6.55447,56.8143,-1,2.79686,70.9725,-1,-2.19915,84.9338,-1,-8.14093,73.8968,-1,5.24725,87.7873,-1,-9.5,88.2466,-1,-0.859041,73.8968,-4,5.24725,61.8423,-4,9.49998,102.246,-1,-7.52607,88.2466,-4,-0.859041,106.175,-1,-9.5,102.246,-4,-7.52607,106.175,-4,-9.49999,33.9362,-0.999999,17.5,44.4325,-0.999999,15.8488,44.4325,1,15.8488,33.9362,1,17.5,59.6285,-0.999999,11.8704,59.6285,1,11.8704,66.3479,-4,9.49998,74.4451,-4,6.64344,74.4451,4,6.64344,66.3479,4,9.49998,66.3478,1,9.5,66.3478,-1,9.5,88.8677,-4,0.506314,88.8677,4,0.506313,102.91,-4,-6.181,102.91,4,-6.181,109.517,-4,-9.49999,109.517,-1,-9.5,109.517,1,-9.5,109.517,4,-9.49999,125.443,-4,-17.5,128.429,-4,-19,128.429,4,-19,125.443,4,-17.5,125.443,0.999999,-17.5,125.443,-1,-17.5,27.964,1,8.83686,42.4663,1,6.55447,56.8143,1,2.79686,73.8968,1,5.24725,70.9725,1,-2.19915,61.8423,4,9.49998,73.8968,4,5.24725,88.2466,1,-0.859041,84.9338,1,-8.14093,88.2466,4,-0.859041,87.7873,1,-9.5,102.246,1,-7.52607,102.246,4,-7.52607,106.175,1,-9.5,106.175,4,-9.49999,107.266,-4,-19,104.279,-4,-17.5,104.279,4,-17.5,107.266,4,-19,104.279,-1,-17.5,122.101,-1,-17.5,104.279,0.999999,-17.5,122.101,0.999999,-17.5,107.266,-1,-19,125.087,-1,-19,125.087,-4,-19,122.101,-4,-17.5,107.266,0.999999,-19,125.087,0.999999,-19,122.101,4,-17.5,125.087,4,-19,0.25,1,9.49999,0.25,-1,9.49999,0.25,1,-9.49999,0.25,-1,-9.49999],"faces":[32,107,112,114,0,0,0,32,114,118,139,1,1,1,32,114,139,137,2,2,2,32,108,107,114,3,3,3,32,131,130,108,4,4,4,32,114,137,134,5,5,5,32,134,131,108,6,6,6,32,114,134,108,7,7,7,33,1,0,4,5,8,8,8,8,33,0,3,7,4,9,9,9,9,33,8,7,3,6,10,10,10,10,33,11,12,10,9,11,11,11,11,32,19,18,15,12,12,12,32,15,16,17,13,13,13,32,15,17,19,12,12,12,33,16,15,20,21,14,14,14,14,33,15,18,22,20,9,9,9,9,33,24,22,18,19,10,10,10,10,33,26,25,27,28,11,11,11,11,32,41,40,39,15,15,15,32,39,38,36,16,16,16,32,36,37,30,12,12,12,32,31,32,33,17,17,17,32,36,30,31,18,18,18,32,41,39,36,19,19,19,32,35,42,41,20,20,20,32,31,33,34,21,21,21,32,34,35,41,22,22,22,32,41,36,31,23,23,23,32,31,34,41,24,24,24,33,44,43,47,48,25,25,25,25,33,49,47,43,46,26,26,26,26,32,47,49,56,27,27,27,32,56,54,55,12,12,12,32,55,53,48,12,12,12,32,47,56,55,20,20,20,32,47,55,48,28,28,28,32,60,61,63,29,29,29,32,63,62,57,30,30,30,32,57,58,59,30,30,30,32,59,60,63,29,29,29,32,63,57,59,29,29,29,33,58,57,64,65,31,31,31,31,33,66,64,57,62,32,32,32,32,32,81,82,83,33,33,33,32,83,71,72,34,34,34,32,72,73,74,35,35,35,32,75,76,77,29,29,29,32,72,74,75,36,36,36,32,81,83,72,37,37,37,32,79,80,81,38,38,38,32,77,78,79,29,29,29,32,72,75,77,39,39,39,32,79,81,72,40,40,40,32,72,77,79,41,41,41,33,37,36,84,51,42,42,42,42,33,36,38,85,84,43,43,43,43,33,38,39,86,85,44,44,44,44,33,39,40,87,86,45,45,45,45,33,40,41,88,87,46,46,46,46,33,90,88,41,42,47,47,47,47,33,52,89,92,93,48,48,48,48,33,89,91,95,92,49,49,49,49,33,91,94,97,95,50,50,50,50,33,98,97,94,96,51,51,51,51,33,55,54,61,60,52,52,52,52,32,61,54,56,53,53,53,32,99,100,101,54,54,54,32,61,56,99,55,55,55,32,102,63,61,56,56,56,32,99,101,102,54,54,54,32,99,102,61,56,56,56,33,103,104,101,100,57,57,57,57,32,110,105,106,58,58,58,32,106,107,108,59,59,59,32,109,104,103,60,60,60,32,106,108,109,61,61,61,32,109,103,110,62,62,62,32,106,109,110,63,63,63,33,106,111,112,107,64,64,64,64,33,111,113,114,112,65,65,65,65,33,69,125,78,77,66,66,66,66,33,125,126,79,78,67,67,67,67,33,126,127,80,79,68,68,68,68,33,130,131,128,70,69,69,69,69,33,127,129,81,80,70,70,70,70,33,131,134,132,128,71,71,71,71,33,129,133,82,81,72,72,72,72,33,134,137,136,132,50,50,50,50,33,83,82,133,135,73,73,73,73,33,138,136,137,139,74,74,74,74,32,5,4,7,29,29,29,32,7,8,14,75,75,75,32,7,14,5,76,76,76,33,28,27,140,141,22,22,22,22,32,97,98,115,12,12,12,32,115,113,111,77,77,77,32,111,106,105,78,78,78,32,105,93,92,79,79,79,32,95,97,115,80,80,80,32,105,92,95,81,81,81,32,115,111,105,82,82,82,32,95,115,105,83,83,83,32,70,128,132,84,84,84,32,132,136,138,85,85,85,32,138,117,123,86,86,86,32,147,153,152,87,87,87,32,138,123,147,88,88,88,32,70,132,138,89,89,89,32,104,109,70,90,90,90,32,102,101,104,91,91,91,32,65,64,66,29,29,29,32,66,102,104,92,92,92,32,70,138,147,93,93,93,32,66,104,70,94,94,94,32,67,65,66,29,29,29,32,69,156,68,76,76,76,32,68,67,66,95,95,95,32,66,70,147,96,96,96,32,147,152,146,97,97,97,32,9,10,6,98,98,98,32,147,146,9,29,29,29,32,69,68,66,99,99,99,32,125,69,66,100,100,100,32,9,6,3,101,101,101,32,0,1,2,76,76,76,32,9,3,0,76,76,76,32,126,125,66,102,102,102,32,127,126,66,103,103,103,32,9,0,2,76,76,76,32,13,158,135,29,29,29,32,9,2,13,104,104,104,32,127,66,147,105,105,105,32,129,127,147,106,106,106,32,147,9,13,107,107,107,32,147,13,135,108,108,108,32,133,129,147,109,109,109,32,147,135,133,110,110,110,33,60,59,53,55,111,111,111,111,32,17,14,8,112,112,112,32,17,8,6,113,113,113,32,24,19,17,113,113,113,32,140,27,25,114,114,114,32,24,17,6,113,113,113,32,148,140,25,115,115,115,32,25,24,6,116,116,116,32,10,12,143,114,114,114,32,25,6,10,117,117,117,32,149,148,25,29,29,29,32,25,10,143,118,118,118,32,25,143,152,115,115,115,32,120,150,149,119,119,119,32,149,25,152,120,120,120,32,153,155,121,119,119,119,32,149,152,153,121,121,121,32,121,120,149,122,122,122,32,153,121,149,122,122,122,33,141,140,148,144,123,123,123,123,32,124,119,120,124,124,124,32,120,121,122,125,125,125,32,120,122,123,126,126,126,32,124,120,123,127,127,127,32,117,118,114,128,128,128,32,124,123,117,129,129,129,32,113,115,116,130,130,130,32,116,124,117,131,131,131,32,117,114,113,132,132,132,32,117,113,116,133,133,133,33,145,149,150,151,134,134,134,134,33,12,11,142,143,29,29,29,29,33,146,152,143,142,123,123,123,123,33,154,155,153,147,134,134,134,134,33,151,150,120,119,22,22,22,22,33,122,121,155,154,76,76,76,76,32,59,58,65,135,135,135,32,65,67,68,136,136,136,32,53,59,65,137,137,137,32,44,48,53,135,135,135,32,50,45,44,138,138,138,32,31,30,157,139,139,139,32,75,31,157,140,140,140,32,156,76,75,139,139,139,32,156,75,157,141,141,141,32,156,157,50,142,142,142,32,68,156,50,142,142,142,32,44,53,65,143,143,143,32,68,50,44,144,144,144,32,65,68,44,141,141,141,32,34,72,71,141,141,141,32,158,13,2,145,145,145,32,34,71,158,141,141,141,32,159,35,34,139,139,139,32,21,23,29,146,146,146,32,159,34,158,147,147,147,32,29,159,158,148,148,148,32,158,2,1,149,149,149,32,1,5,14,150,150,150,32,14,17,16,151,151,151,32,21,29,158,152,152,152,32,14,16,21,150,150,150,32,21,158,1,153,153,153,32,1,14,21,151,151,151,33,56,49,46,99,154,154,154,154,33,110,52,93,105,155,155,155,155,33,51,157,30,37,156,156,156,156,33,75,74,32,31,157,157,157,157,33,73,33,32,74,144,144,144,144,32,22,24,25,13,13,13,32,22,25,26,158,158,158,32,23,21,20,12,12,12,32,20,22,26,159,159,159,32,144,148,149,160,160,160,32,23,20,26,22,22,22,32,144,149,145,161,161,161,32,23,26,144,12,12,12,32,90,159,29,12,12,12,32,29,23,144,162,162,162,32,144,145,124,12,12,12,32,124,116,96,163,163,163,32,96,94,91,164,164,164,32,91,89,52,165,165,165,32,52,110,103,166,166,166,32,103,100,99,167,167,167,32,46,43,44,12,12,12,32,103,99,46,168,168,168,32,96,91,52,169,169,169,32,52,103,46,170,170,170,32,46,44,45,12,12,12,32,50,157,51,22,22,22,32,46,45,50,171,171,171,32,96,52,46,172,172,172,32,144,124,96,173,173,173,32,90,29,144,174,174,174,32,90,144,96,175,175,175,32,46,50,51,176,176,176,32,46,51,84,177,177,177,32,88,90,96,12,12,12,32,87,88,96,178,178,178,32,46,84,85,179,179,179,32,86,87,96,180,180,180,32,46,85,86,181,181,181,32,96,46,86,182,182,182,33,115,98,96,116,183,183,183,183,33,124,145,151,119,184,184,184,184,33,42,35,159,90,185,185,185,185,33,144,26,28,141,186,186,186,186,33,108,130,70,109,187,187,187,187,33,102,66,62,63,188,188,188,188,33,77,76,156,69,189,189,189,189,33,122,154,147,123,184,184,184,184,33,117,138,139,118,190,190,190,190,33,142,11,9,146,186,186,186,186,33,135,158,71,83,191,191,191,191,33,33,73,72,34,192,192,192,192]},"double_turnout_L_12":{"uvs":[],"normals":[0,0,-1,0,-0.00000762939,1,0,-1,0,0,-1,0,0,-1,0,0,-1,0,-1.51937e-7,1,-6.76615e-7,0,1,0,1.05964e-8,1,-6.35783e-8,0,1,0,7.28407e-8,1,2.20754e-7,0,1,0,-1.32455e-8,1,-7.94729e-8,-1.81795e-8,1,-1.84579e-7,3.08414e-9,1,-7.94729e-8,7.88425e-9,1,-3.43697e-8,2.22796e-8,1,1.12734e-8,-1.01182e-13,1,-4.84435e-8,0,1,0,-3.85688e-8,1,-1.56601e-7,8.45107e-9,1,-2.91717e-8,-7.46012e-9,-1,1.81806e-8,-2.19342e-8,-1,-2.2777e-8,0,-1,4.47035e-8,0,-1,7.94727e-8,5.6053e-14,-1,4.47036e-8,-5.42944e-9,-1,3.21866e-8,4.45166e-9,-1,5.36818e-8,0,-1,7.94727e-8,0,-1,7.94725e-8,-1.55727e-7,-1,-3.68664e-7,5.52278e-9,-1,7.99863e-8,8.51543e-10,-1,4.47035e-8,0,-1,4.28986e-8,2.40549e-9,-1,1.9503e-8,-8.46825e-9,-1,4.47035e-8,2.1159e-9,-1,2.86845e-8,1.313e-10,-1,4.47036e-8,8.49047e-10,-1,3.397e-8,1.9273e-9,-1,6.02551e-8,0,-1,4.47036e-8,-6.25262e-10,-1,4.93441e-8,8.01172e-10,-1,4.12432e-8,6.89851e-15,-1,4.47036e-8,-5.31732e-9,-1,2.02509e-8,-8.35329e-10,-1,4.49457e-8,3.65465e-8,-1,1.79906e-7,1.27947e-9,-1,4.45251e-8,4.58569e-10,-1,4.37418e-8,-0.00000104433,-0.00000254312,-1,0.00000125388,0,1,-3.74274e-8,-0.00000508626,-1,2.03135e-7,0,1,-1.4047e-7,0,-1,-1.4047e-7,0,-1,-1.41265e-7,0,-1,-1.4047e-7,0,-1,-1.41265e-7,0,-1,0,0,-1,-1.41265e-7,0,-1,-1.06873e-7,-9.28702e-7,-1,0,0,-1,0,0.00000762939,1,0,0,-1,0,0.00000762939,1,0,1,0,0,1,0,-3.69807e-8,1,-1.64683e-7,0,1,-4.47035e-8,2.82571e-9,1,-2.94569e-8,0,1,-1.8082e-7,8.07727e-9,1,-1.60676e-9,-8.51543e-10,1,-4.47035e-8,-1.11732e-9,1,-4.47035e-8,-2.07e-9,1,-5.2621e-8,-1.41001e-8,1,-7.85031e-8,-9.47345e-9,1,-1.2466e-7,-3.59937e-9,1,-4.8796e-8,6.08741e-9,1,-2.014e-8,-4.98249e-14,1,-3.97366e-8,0,1,-7.94727e-8,0,1,-7.94727e-8,3.64303e-10,1,-4.16289e-8,7.90911e-10,1,-4.52017e-8,0,1,-3.97364e-8,0,1,-7.94725e-8,-6.96411e-10,1,-4.19285e-8,-2.88994e-9,1,-4.23387e-8,-2.40549e-9,1,-1.9503e-8,-1.11938e-9,1,-4.47035e-8,7.05832e-10,1,-1.1815e-7,-1.96381e-9,1,-4.12008e-8,0,1,-4.30289e-8,2.74728e-10,1,-4.59869e-8,1.25987e-8,1,-1.48335e-8,-9.08085e-15,1,-4.47035e-8,-0.00000104433,0.00000254312,-1,-3.74274e-8,0.00000508626,-1,0,1,0,0.0249711,0,0.999688,0.0735636,0,0.99729,0.122409,0,0.99248,0.122409,0,0.99248,0.122411,0,0.992479,0.122409,0,0.99248,0.170961,0,0.985278,0.219099,0,0.975703,0.383594,-0.0000017523,0.923502,0.492898,0,0.870087,0.383594,4.4036e-7,0.923502,0.492898,0,0.870087,0.41272,0.433856,0.800894,0.383594,0.0000017523,0.923502,0.492898,0,0.870087,-0.0348198,-0.983365,0.178273,0.458078,0,0.888912,0.328288,8.71417e-7,0.944578,0.436625,0,0.899644,-1,0,-0.00000215429,-1,1.64359e-11,-0.00000215429,-1,0,-0.00000108283,-1,-9.87445e-12,-0.00000215427,-1,0,-0.00000108283,-1,0,0,-1,0,-0.00000108283,-1,0,-0.00000110455,-1,0,-0.00000108283,-1,0,-0.00000110455,0.164399,0,0.986394,9.65702e-8,-1,3.48961e-7,5.92816e-8,-1,3.4165e-7,-4.24442e-8,-1,-3.44126e-7,7.94729e-9,-1,4.76837e-8,1.70248e-9,-1,6.81199e-8,-8.42762e-9,-1,1.25005e-9,1.75737e-9,-1,5.11762e-8,-9.93409e-9,-1,5.96046e-8,1.57436e-9,-1,6.86784e-8,9.10641e-10,-1,5.96046e-8,-0.0190452,0,-0.999819,-0.0190452,0,-0.999819,0,0,1,-1,0,-5.72205e-7,0.164399,0,-0.986394,-1,0,-0.00000129145,-1,0,-0.00000129145,-1,1.19101e-11,-0.0000018733,-1,0,-0.00000187329,-1,0,-0.00000124052,-1,-1.19101e-11,-0.0000018733,-1,0,-0.00000124052,-1,0,-0.00000187329,0.0250323,0,0.999687,1.01182e-13,-1,4.84435e-8,-2.22796e-8,-1,-1.12734e-8,3.85688e-8,-1,1.56601e-7,-8.45107e-9,-1,2.91717e-8,0.0250323,0,0.999687,0.0735648,0,0.99729,-0.266712,0,-0.963776,0.122412,0,0.992479,-0.380134,-7.85702e-7,-0.924932,-0.492899,0,-0.870087,-0.380134,7.85702e-7,-0.924932,0.292475,4.55987e-7,0.956273,0.292475,0.00000283297,0.956273,0.266711,0,0.963777,0.292476,-0.00000283295,0.956273,0.266711,0,0.963777,0.292476,0,0.956273,-0.2191,0.00000149886,-0.975702,0.0249861,-4.73521e-7,0.999688,0.0735637,0,0.99729,0.122412,0,0.992479,0.170961,0,0.985278,0.219099,0,0.975703,0.266712,0,0.963776,0.328288,-8.71417e-7,0.944578,-0.2191,-0.00000149886,-0.975703,-0.290284,0,-0.956941,-0.290284,0,-0.956941,0.219099,0,0.975703,0.0735637,0,0.99729,0.0249861,4.73521e-7,0.999688],"metadata":{"generator":"io_three","normals":184,"uvs":0,"vertices":146,"version":3,"faces":230,"type":"Geometry"},"vertices":[29.5597,-0.999997,77.5,0.250777,-0.999997,77.5,67.7707,-0.999997,69.5,74.0613,-0.999997,69.5,71.6789,-0.999997,70.1593,57.5514,-0.999997,73.3317,43.2852,-0.999997,75.8071,29.5597,-4,77.5,0.250777,-4,77.5,67.7707,-4,69.5,74.0613,-4,69.5,0.249985,-0.999997,69.5,0.249975,-4,79,0.250554,-4,79,0.250554,4,79,0.249975,4,79,0.249985,-4,69.5,0.250786,-4,69.5,0.249976,-4,77.5,28.9147,-4,77.5795,14.4746,-4,78.6447,69.3706,-4,60.944,55.6981,-4,64.0142,41.8913,-4,66.4099,27.9836,-4,68.1253,14.0085,-4,69.1561,0.249993,-4,66,-8.75001,-4,67.5,0.250007,-4,50.5,102.173,-4,50.5,82.8761,-4,57.2065,-8.75,-4,52.5,0.25,-4,54,99.3824,-4,61.7556,71.3145,-4,68.7042,98.8771,-4,60.3432,122.827,-4,50.5,126.48,-4,50.5,126.48,-0.999998,50.5,122.827,-0.999998,50.5,138.962,-0.999998,42.5,142.004,-0.999998,42.5,138.962,-4,42.5,142.004,-4,42.5,102.173,-0.999998,50.5,121.14,-0.999998,42.5,0.250007,-0.999998,50.5,64.8023,-0.999998,42.5,64.8023,-4,42.5,121.14,-4,42.5,144.652,-4,41,141.61,-4,41,141.61,-0.999998,41,124.23,-0.999998,41,124.23,-4,41,70.2227,-4,41,70.2227,-0.999998,41,27.4068,-0.999998,41,27.4068,-4,41,0.250019,-4,41,0.250019,4,41,27.4068,4,41,27.4068,1,41,70.2227,1,41,70.2227,4,41,124.23,4,41,124.23,1,41,141.61,1,41,141.61,4,41,144.652,4,41,25.3371,-4,41.2553,12.6837,-4,42.1887,0.250017,-4,42.5,74.0613,1,69.5,67.7707,1,69.5,0.250777,1,77.5,29.5597,1,77.5,43.2852,1,75.8071,57.5514,1,73.3317,71.6789,1,70.1593,74.0613,4,69.5,67.7707,4,69.5,0.250777,4,77.5,29.5597,4,77.5,0.249985,1,69.5,0.250786,4,69.5,0.249985,4,69.5,0.249976,4,77.5,14.4746,4,78.6447,28.9147,4,77.5795,14.0085,4,69.1561,27.9836,4,68.1253,41.8913,4,66.4099,55.6981,4,64.0142,69.3706,4,60.944,-8.75001,4,67.5,0.249993,4,66,82.8761,4,57.2065,102.173,4,50.5,0.250007,4,50.5,0.25,4,54,-8.75,4,52.5,99.3824,4,61.7556,98.8771,4,60.3432,71.3145,4,68.7042,126.48,4,50.5,122.827,4,50.5,142.004,1,42.5,138.962,1,42.5,122.827,1,50.5,126.48,1,50.5,142.004,4,42.5,138.962,4,42.5,121.14,1,42.5,102.173,1,50.5,64.8023,1,42.5,0.250007,1,50.5,121.14,4,42.5,64.8023,4,42.5,0.250017,4,42.5,12.6837,4,42.1887,25.3371,4,41.2553,0.249976,-0.999997,77.5,0.249976,1,77.5,0.250017,-0.999998,42.5,0.250017,1,42.5,12.6837,-0.999998,42.1887,25.3371,-0.999998,41.2553,25.3371,1,41.2553,12.6837,1,42.1887,98.8771,-0.999997,60.3432,71.3145,-0.999997,68.7042,14.0085,-0.999997,69.1561,27.9836,-0.999997,68.1253,41.8913,-0.999997,66.4099,55.6981,-0.999997,64.0142,69.3706,-0.999997,60.944,82.8761,-0.999997,57.2065,71.3145,1,68.7042,98.8771,1,60.3432,82.8761,1,57.2065,69.3706,1,60.944,55.6981,1,64.0142,41.8913,1,66.4099,27.9836,1,68.1253,14.0085,1,69.1561],"faces":[33,1,0,7,8,0,0,0,0,33,3,2,9,10,1,1,1,1,32,11,16,17,1,1,1,32,20,13,12,2,2,2,32,12,18,8,3,3,3,32,8,7,19,4,4,4,32,19,20,12,2,2,2,32,12,8,19,5,5,5,32,93,94,97,6,6,6,32,97,98,99,7,7,7,32,100,101,95,8,8,8,32,97,99,100,9,9,9,32,92,93,97,10,10,10,32,90,91,92,11,11,11,32,86,85,90,11,11,11,32,100,95,96,12,12,12,32,96,86,90,11,11,11,32,90,92,97,13,13,13,32,97,100,96,14,14,14,32,97,96,90,15,15,15,32,80,102,105,16,16,16,32,105,106,103,17,17,17,32,104,81,80,18,18,18,32,80,105,103,19,19,19,32,103,104,80,20,20,20,32,39,130,131,21,21,21,32,2,3,4,4,4,4,32,39,131,2,22,22,22,32,41,38,39,23,23,23,32,53,52,40,24,24,24,32,40,41,39,25,25,25,32,2,4,5,26,26,26,32,40,39,2,27,27,27,32,45,53,40,28,28,28,32,57,56,47,29,29,29,32,47,45,40,2,2,2,32,40,2,5,30,30,30,32,5,6,0,31,31,31,32,1,122,11,32,32,32,32,5,0,1,33,33,33,32,127,57,47,34,34,34,32,46,124,126,35,35,35,32,126,127,47,36,36,36,32,5,1,11,37,37,37,32,5,11,132,38,38,38,32,46,126,47,39,39,39,32,44,46,47,40,40,40,32,5,132,133,41,41,41,32,5,133,134,42,42,42,32,44,47,40,43,43,43,32,137,44,40,44,44,44,32,5,134,135,45,45,45,32,136,137,40,46,46,46,32,5,135,136,47,47,47,32,5,136,40,48,48,48,33,37,36,39,38,49,49,49,49,33,41,40,42,43,50,50,50,50,33,29,28,46,44,51,51,51,51,33,45,47,48,49,52,52,52,52,33,43,42,51,50,2,2,2,2,33,49,48,55,54,2,2,2,2,32,72,59,58,2,2,2,32,58,70,71,2,2,2,32,58,71,72,2,2,2,32,59,60,61,53,53,53,32,59,61,62,54,54,54,32,57,58,59,54,54,54,32,54,55,56,55,55,55,32,57,59,62,56,56,56,32,53,54,56,57,57,57,32,56,57,62,0,0,0,32,63,64,65,55,55,55,32,56,62,63,58,58,58,32,52,53,56,9,9,9,32,56,63,65,59,59,59,32,56,65,66,57,57,57,32,50,51,52,0,0,0,32,52,56,66,60,60,60,32,67,68,69,58,58,58,32,52,66,67,58,58,58,32,69,50,52,0,0,0,32,67,69,52,61,61,61,33,80,81,74,73,62,62,62,62,33,76,75,82,83,63,63,63,63,32,85,86,84,64,64,64,32,89,83,82,65,65,65,32,82,87,15,18,18,18,32,15,14,88,11,11,11,32,88,89,82,66,66,66,32,82,15,88,11,11,11,32,74,138,139,67,67,67,32,109,110,107,68,68,68,32,74,139,109,69,69,69,32,79,73,74,70,70,70,32,77,78,79,71,71,71,32,75,76,77,11,11,11,32,84,123,75,72,72,72,32,145,84,75,73,73,73,32,75,77,79,74,74,74,32,74,109,107,75,75,75,32,75,79,74,76,76,76,32,144,145,75,77,77,77,32,143,144,75,78,78,78,32,74,107,108,79,79,79,32,108,67,66,80,80,80,32,108,66,113,81,81,81,32,143,75,74,82,82,82,32,142,143,74,83,83,83,32,74,108,113,84,84,84,32,115,63,62,85,85,85,32,141,142,74,86,86,86,32,140,141,74,87,87,87,32,115,62,128,88,88,88,32,129,125,116,89,89,89,32,115,128,129,90,90,90,32,114,140,74,91,91,91,32,129,116,114,92,92,92,32,115,129,114,93,93,93,32,114,74,113,94,94,94,32,113,115,114,95,95,95,33,111,112,108,107,50,50,50,50,33,110,109,106,105,96,96,96,96,33,117,118,115,113,52,52,52,52,33,114,116,99,98,97,97,97,97,33,69,68,112,111,11,11,11,11,33,65,64,118,117,11,11,11,11,32,121,61,60,98,98,98,32,60,119,120,11,11,11,32,60,120,121,11,11,11,33,13,20,88,14,99,99,99,99,33,89,88,20,19,100,100,100,100,32,83,89,19,101,101,101,32,19,7,0,102,102,102,32,0,6,77,103,103,103,32,76,83,19,104,104,104,32,0,77,76,103,103,103,32,19,0,76,104,104,104,33,77,6,5,78,105,105,105,105,33,78,5,4,79,106,106,106,106,32,33,37,38,107,107,107,32,41,43,50,108,108,108,32,102,33,38,109,109,109,32,41,50,69,110,110,110,32,102,38,41,111,111,111,32,110,105,102,112,112,112,32,69,111,107,113,113,113,32,110,102,41,114,114,114,32,41,69,107,110,110,110,32,41,107,110,115,115,115,33,44,137,30,29,116,116,116,116,33,113,66,65,117,117,117,117,117,32,86,96,26,118,118,118,32,26,16,11,119,119,119,32,122,18,12,120,120,120,32,86,26,11,121,121,121,32,122,12,15,122,122,122,32,84,86,11,123,123,123,32,15,87,123,124,124,124,32,123,84,11,125,125,125,32,122,15,123,126,126,126,32,11,122,123,127,127,127,33,95,27,26,96,128,128,128,128,32,32,28,29,2,2,2,32,29,30,21,129,129,129,32,21,22,23,130,130,130,32,23,24,25,131,131,131,32,25,17,16,2,2,2,32,26,27,31,132,132,132,32,25,16,26,133,133,133,32,21,23,25,134,134,134,32,32,29,21,135,135,135,32,26,31,32,136,136,136,32,21,25,26,137,137,137,32,21,26,32,138,138,138,33,8,18,122,1,139,139,139,139,33,75,123,87,82,140,140,140,140,33,14,15,12,13,141,141,141,141,33,101,31,27,95,142,142,142,142,33,32,31,101,100,143,143,143,143,32,60,59,72,144,144,144,32,60,72,124,145,145,145,32,125,119,60,145,145,145,32,100,99,116,146,146,146,32,125,60,124,144,144,144,32,32,100,116,147,147,147,32,116,125,124,148,148,148,32,46,28,32,149,149,149,32,116,124,46,150,150,150,32,46,32,116,151,151,151,33,124,72,71,126,152,152,152,152,32,35,36,37,153,153,153,32,37,33,10,154,154,154,32,10,9,34,3,3,3,32,35,37,10,155,155,155,32,10,34,35,156,156,156,33,125,129,120,119,157,157,157,157,33,126,71,70,127,158,158,158,158,33,55,48,47,56,159,159,159,159,33,57,127,70,58,160,160,160,160,33,61,121,128,62,160,160,160,160,33,129,128,121,120,158,158,158,158,33,63,115,118,64,159,159,159,159,33,35,130,39,36,161,161,161,161,33,51,42,40,52,162,162,162,162,33,139,103,106,109,163,163,163,163,32,10,33,102,164,164,164,32,102,80,73,165,165,165,32,73,79,4,166,166,166,32,3,10,102,167,167,167,32,73,4,3,168,168,168,32,102,73,3,169,169,169,33,2,131,34,9,170,170,170,170,33,17,25,132,11,171,171,171,171,33,132,25,24,133,172,172,172,172,33,133,24,23,134,173,173,173,173,33,134,23,22,135,174,174,174,174,33,135,22,21,136,175,175,175,175,33,136,21,30,137,176,176,176,176,33,140,114,98,97,177,177,177,177,33,67,108,112,68,162,162,162,162,33,53,45,49,54,117,117,117,117,33,81,104,138,74,178,178,178,178,33,34,131,130,35,179,179,179,179,33,139,138,104,103,180,180,180,180,33,141,140,97,94,176,176,176,176,33,142,141,94,93,181,181,181,181,33,143,142,93,92,174,174,174,174,33,144,143,92,91,173,173,173,173,33,145,144,91,90,182,182,182,182,33,84,145,90,85,183,183,183,183]},"single_double_L_ab":{"faces":[32,109,114,116,0,0,0,32,116,120,141,1,1,1,32,116,141,139,2,2,2,32,110,109,116,3,3,3,32,133,132,110,4,4,4,32,116,139,136,5,5,5,32,136,133,110,6,6,6,32,116,136,110,7,7,7,33,1,0,4,5,8,8,8,8,33,0,3,7,4,9,9,9,9,33,8,7,3,6,10,10,10,10,33,11,12,10,9,11,11,11,11,32,19,18,15,12,12,12,32,15,16,17,13,13,13,32,15,17,19,12,12,12,33,16,15,20,21,14,14,14,14,33,15,18,22,20,9,9,9,9,33,24,22,18,19,10,10,10,10,33,26,25,27,28,11,11,11,11,32,42,41,40,15,15,15,32,40,39,37,16,16,16,32,37,38,30,12,12,12,32,30,31,32,17,17,17,32,37,30,32,18,18,18,32,42,40,37,19,19,19,32,36,43,42,20,20,20,32,34,35,36,12,12,12,32,37,32,33,21,21,21,32,34,36,42,22,22,22,32,37,33,34,23,23,23,32,37,34,42,24,24,24,33,45,44,48,49,25,25,25,25,33,50,48,44,47,26,26,26,26,32,48,50,57,27,27,27,32,57,55,56,12,12,12,32,56,54,49,12,12,12,32,48,57,56,20,20,20,32,48,56,49,28,28,28,32,61,62,64,29,29,29,32,64,63,58,30,30,30,32,58,59,60,30,30,30,32,60,61,64,29,29,29,32,64,58,60,29,29,29,33,59,58,65,66,31,31,31,31,33,67,65,58,63,32,32,32,32,32,83,84,85,33,33,33,32,72,73,74,34,34,34,32,85,72,74,35,35,35,32,82,83,85,36,36,36,32,80,81,82,37,37,37,32,78,79,80,29,29,29,32,76,77,78,38,38,38,32,85,74,75,39,39,39,32,76,78,80,29,29,29,32,85,75,76,40,40,40,32,80,82,85,41,41,41,32,85,76,80,42,42,42,33,38,37,86,52,43,43,43,43,33,37,39,87,86,44,44,44,44,33,39,40,88,87,45,45,45,45,33,40,41,89,88,46,46,46,46,33,41,42,90,89,47,47,47,47,33,92,90,42,43,48,48,48,48,33,53,91,94,95,49,49,49,49,33,91,93,97,94,50,50,50,50,33,93,96,99,97,51,51,51,51,33,100,99,96,98,52,52,52,52,33,56,55,62,61,53,53,53,53,32,62,55,57,54,54,54,32,101,102,103,55,55,55,32,62,57,101,56,56,56,32,104,64,62,57,57,57,32,101,103,104,55,55,55,32,101,104,62,57,57,57,33,105,106,103,102,58,58,58,58,32,112,107,108,59,59,59,32,108,109,110,60,60,60,32,111,106,105,61,61,61,32,108,110,111,62,62,62,32,111,105,112,63,63,63,32,108,111,112,64,64,64,33,108,113,114,109,65,65,65,65,33,113,115,116,114,66,66,66,66,33,70,127,80,79,67,67,67,67,33,127,128,81,80,68,68,68,68,33,128,129,82,81,69,69,69,69,33,132,133,130,71,70,70,70,70,33,129,131,83,82,71,71,71,71,33,133,136,134,130,72,72,72,72,33,131,135,84,83,73,73,73,73,33,136,139,138,134,51,51,51,51,33,85,84,135,137,74,74,74,74,33,140,138,139,141,75,75,75,75,32,5,4,7,29,29,29,32,7,8,14,76,76,76,32,7,14,5,38,38,38,33,28,27,142,143,22,22,22,22,32,99,100,117,12,12,12,32,117,115,113,77,77,77,32,113,108,107,78,78,78,32,107,95,94,79,79,79,32,97,99,117,80,80,80,32,107,94,97,81,81,81,32,117,113,107,82,82,82,32,97,117,107,83,83,83,32,71,130,134,84,84,84,32,134,138,140,85,85,85,32,140,119,125,86,86,86,32,149,155,154,87,87,87,32,140,125,149,88,88,88,32,71,134,140,89,89,89,32,106,111,71,90,90,90,32,104,103,106,91,91,91,32,66,65,67,29,29,29,32,67,104,106,92,92,92,32,71,140,149,93,93,93,32,67,106,71,94,94,94,32,68,66,67,29,29,29,32,70,158,69,38,38,38,32,69,68,67,95,95,95,32,67,71,149,96,96,96,32,149,154,148,97,97,97,32,9,10,6,98,98,98,32,149,148,9,29,29,29,32,70,69,67,99,99,99,32,127,70,67,100,100,100,32,9,6,3,101,101,101,32,0,1,2,38,38,38,32,9,3,0,38,38,38,32,128,127,67,102,102,102,32,129,128,67,103,103,103,32,9,0,2,38,38,38,32,13,161,137,29,29,29,32,9,2,13,104,104,104,32,129,67,149,105,105,105,32,131,129,149,106,106,106,32,149,9,13,107,107,107,32,149,13,137,108,108,108,32,135,131,149,109,109,109,32,149,137,135,110,110,110,33,61,60,54,56,111,111,111,111,32,17,14,8,112,112,112,32,17,8,6,113,113,113,32,24,19,17,113,113,113,32,142,27,25,114,114,114,32,24,17,6,113,113,113,32,150,142,25,115,115,115,32,25,24,6,116,116,116,32,10,12,145,114,114,114,32,25,6,10,117,117,117,32,151,150,25,29,29,29,32,25,10,145,118,118,118,32,25,145,154,115,115,115,32,122,152,151,119,119,119,32,151,25,154,120,120,120,32,155,157,123,119,119,119,32,151,154,155,121,121,121,32,123,122,151,122,122,122,32,155,123,151,122,122,122,33,143,142,150,146,123,123,123,123,32,126,121,122,124,124,124,32,122,123,124,125,125,125,32,122,124,125,126,126,126,32,126,122,125,127,127,127,32,119,120,116,128,128,128,32,126,125,119,129,129,129,32,115,117,118,130,130,130,32,118,126,119,131,131,131,32,119,116,115,132,132,132,32,119,115,118,133,133,133,33,147,151,152,153,134,134,134,134,33,12,11,144,145,29,29,29,29,33,148,154,145,144,123,123,123,123,33,156,157,155,149,134,134,134,134,33,153,152,122,121,22,22,22,22,33,124,123,157,156,38,38,38,38,32,60,59,66,135,135,135,32,66,68,69,136,136,136,32,54,60,66,137,137,137,32,45,49,54,135,135,135,32,51,46,45,138,138,138,32,31,30,160,139,139,139,32,159,31,160,140,140,140,32,78,77,159,141,141,141,32,158,78,159,139,139,139,32,159,160,51,142,142,142,32,45,54,66,143,143,143,32,159,51,45,144,144,144,32,69,158,159,145,145,145,32,45,66,69,139,139,139,32,69,159,45,146,146,146,32,163,73,72,141,141,141,32,161,13,2,147,147,147,32,163,72,161,139,139,139,32,36,35,163,148,148,148,32,162,36,163,140,140,140,32,163,161,2,139,139,139,32,1,5,14,149,149,149,32,163,2,1,150,150,150,32,29,162,163,151,151,151,32,21,23,29,152,152,152,32,29,163,1,153,153,153,32,1,14,17,154,154,154,32,17,16,21,149,149,149,32,21,29,1,155,155,155,32,1,17,21,156,156,156,33,57,50,47,101,157,157,157,157,33,112,53,95,107,158,158,158,158,33,52,160,30,38,159,159,159,159,33,164,32,31,159,160,160,160,160,33,164,159,77,76,160,160,160,160,33,32,164,165,33,161,161,161,161,33,76,75,165,164,162,162,162,162,33,34,33,165,166,163,163,163,163,33,74,166,165,75,164,164,164,164,33,166,163,35,34,165,165,165,165,33,166,74,73,163,165,165,165,165,32,22,24,25,13,13,13,32,22,25,26,166,166,166,32,23,21,20,12,12,12,32,20,22,26,167,167,167,32,146,150,151,168,168,168,32,23,20,26,22,22,22,32,146,151,147,169,169,169,32,23,26,146,12,12,12,32,92,162,29,12,12,12,32,29,23,146,170,170,170,32,146,147,126,12,12,12,32,126,118,98,171,171,171,32,98,96,93,172,172,172,32,93,91,53,173,173,173,32,53,112,105,174,174,174,32,105,102,101,175,175,175,32,47,44,45,12,12,12,32,105,101,47,176,176,176,32,98,93,53,177,177,177,32,53,105,47,178,178,178,32,47,45,46,12,12,12,32,51,160,52,22,22,22,32,47,46,51,179,179,179,32,98,53,47,180,180,180,32,146,126,98,181,181,181,32,92,29,146,182,182,182,32,92,146,98,183,183,183,32,47,51,52,184,184,184,32,47,52,86,185,185,185,32,90,92,98,12,12,12,32,89,90,98,186,186,186,32,47,86,87,187,187,187,32,88,89,98,188,188,188,32,47,87,88,189,189,189,32,98,47,88,190,190,190,33,117,100,98,118,191,191,191,191,33,126,147,153,121,192,192,192,192,33,43,36,162,92,193,193,193,193,33,146,26,28,143,194,194,194,194,33,110,132,71,111,195,195,195,195,33,104,67,63,64,196,196,196,196,33,79,78,158,70,197,197,197,197,33,124,156,149,125,192,192,192,192,33,119,140,141,120,198,198,198,198,33,144,11,9,148,194,194,194,194,33,137,161,72,85,199,199,199,199],"metadata":{"generator":"io_three","uvs":0,"vertices":167,"version":3,"normals":200,"type":"Geometry","faces":263},"uvs":[],"vertices":[13.5,0.999999,-17.5,0.25,0.999999,-17.5,0.25,0.999999,-17.5,25.2242,0.999999,-18.0238,13.5,4,-17.5,0.25,4,-17.5,31.4168,0.999999,-19,25.2242,4,-18.0238,31.4168,4,-19,57.2743,0.999999,-17.5,61.5227,0.999999,-19,57.2743,4,-17.5,61.5227,4,-19,0.25,1,-9.5,0.25,4,-19,13.5,-4,-17.5,0.25,-4,-17.5,0.25,-4,-19,25.2242,-4,-18.0238,31.4168,-4,-19,13.5,-1,-17.5,0.25,-1,-17.5,25.2242,-1,-18.0238,0.25,-1,-17.5,31.4168,-1,-19,61.5227,-1,-19,57.2743,-1,-17.5,61.5227,-4,-19,57.2743,-4,-17.5,0.25,-1,-9.5,0.25,-4,9.49997,0.25,-4,6.50001,9.25002,-4,8.00001,9.25002,-4,1.74846e-7,9.25002,-4,-8.00001,0.25,-4,-6.50001,0.25,-4,-9.49997,27.964,-4,8.83686,13.5005,-4,9.49998,42.4663,-4,6.55447,56.8143,-4,2.79686,70.9725,-4,-2.19915,84.9338,-4,-8.14093,87.7873,-4,-9.49999,13.5,-0.999999,17.5,0.25,-0.999999,17.5,0.25,-0.999999,17.5,13.5006,-0.999999,17.5,13.5,-4,17.5,0.25,-4,17.5,13.5006,-4,17.5,0.25,-1,9.5,13.5001,-1,9.5,61.8423,-1,9.5,0.25,-4,19,28.928,-4,18.2878,13.5005,-4,19,33.9362,-4,17.5,13.5,4,17.5,0.25,4,17.5,0.25,4,19,13.5005,4,19,28.928,4,18.2878,13.5006,4,17.5,33.9362,4,17.5,13.5,1,17.5,0.25,1,17.5,13.5006,1,17.5,0.25,1,17.5,0.25,1,9.5,13.5001,1,9.5,61.8423,1,9.5,0.25,4,-9.49997,0.25,4,-6.50001,9.25002,4,-8.00001,9.25002,4,-1.74846e-7,9.25002,4,8.00001,0.25,4,6.50001,0.25,4,9.49997,13.5005,4,9.49998,27.964,4,8.83686,42.4663,4,6.55447,56.8143,4,2.79686,70.9725,4,-2.19915,84.9338,4,-8.14093,87.7873,4,-9.49999,27.964,-1,8.83686,42.4663,-1,6.55447,56.8143,-1,2.79686,70.9725,-1,-2.19915,84.9338,-1,-8.14093,73.8968,-1,5.24725,87.7873,-1,-9.5,88.2466,-1,-0.859041,73.8968,-4,5.24725,61.8423,-4,9.49998,102.246,-1,-7.52607,88.2466,-4,-0.859041,106.175,-1,-9.5,102.246,-4,-7.52607,106.175,-4,-9.49999,33.9362,-0.999999,17.5,44.4325,-0.999999,15.8488,44.4325,1,15.8488,33.9362,1,17.5,59.6285,-0.999999,11.8704,59.6285,1,11.8704,66.3479,-4,9.49998,74.4451,-4,6.64344,74.4451,4,6.64344,66.3479,4,9.49998,66.3478,1,9.5,66.3478,-1,9.5,88.8677,-4,0.506314,88.8677,4,0.506313,102.91,-4,-6.181,102.91,4,-6.181,109.517,-4,-9.49999,109.517,-1,-9.5,109.517,1,-9.5,109.517,4,-9.49999,125.443,-4,-17.5,128.429,-4,-19,128.429,4,-19,125.443,4,-17.5,125.443,0.999999,-17.5,125.443,-1,-17.5,27.964,1,8.83686,42.4663,1,6.55447,56.8143,1,2.79686,73.8968,1,5.24725,70.9725,1,-2.19915,61.8423,4,9.49998,73.8968,4,5.24725,88.2466,1,-0.859041,84.9338,1,-8.14093,88.2466,4,-0.859041,87.7873,1,-9.5,102.246,1,-7.52607,102.246,4,-7.52607,106.175,1,-9.5,106.175,4,-9.49999,107.266,-4,-19,104.279,-4,-17.5,104.279,4,-17.5,107.266,4,-19,104.279,-1,-17.5,122.101,-1,-17.5,104.279,0.999999,-17.5,122.101,0.999999,-17.5,107.266,-1,-19,125.087,-1,-19,125.087,-4,-19,122.101,-4,-17.5,107.266,0.999999,-19,125.087,0.999999,-19,122.101,4,-17.5,125.087,4,-19,0.25,1,9.49999,0.25,2.84124e-7,6.50001,0.25,-1,9.49999,0.25,1,-9.49999,0.25,-1,-9.49999,0.25,-2.84124e-7,-6.50001,9.25002,3.49691e-7,8.00001,9.25002,0,0,9.25002,-3.49691e-7,-8.00001],"normals":[1.67996e-7,1,3.17104e-7,-2.05003e-14,1,-7.18347e-8,4.86166e-8,1,-2.39968e-8,-9.06765e-8,1,-2.57034e-7,2.37331e-14,1,-1.12125e-7,1.37894e-8,1,-6.80638e-9,-1.95025e-7,1,-4.58308e-7,-1.92142e-9,1,-5.00929e-8,0,0,1,0.0446298,0,0.999004,0.155718,0,0.987801,-0.332928,0,-0.942952,0,-1,0,0,-1,0,0,0,1,6.71764e-8,-1,2.38095e-7,-4.11973e-8,-1,-1.57307e-7,-1.32456e-8,-1,7.94738e-8,4.4407e-9,-1,1.85594e-7,1.17515e-8,-1,9.56046e-8,0,-1,0,1.14074e-8,-1,2.98023e-8,0,-1,0,-2.66541e-9,-1,5.96046e-8,1.0525e-10,-1,5.6525e-8,0,0,-1,-0.0463845,0,-0.998924,0,-1,0,0,-1,0,0,1,0,0,1,0,0,0,-1,-0.0463845,0,-0.998924,-5.41036e-7,1,-0.00000131139,-1.32456e-8,1,-7.94738e-8,-2.42434e-14,1,-1.58949e-7,-1.23047e-7,1,-3.48705e-7,-5.00467e-8,1,-3.17996e-7,0,1,0,2.46654e-9,1,-2.98023e-8,-1.13839e-9,1,-5.96046e-8,1.77917e-8,1,6.03631e-9,2.02963e-9,1,-4.5387e-8,0.0457993,-5.48889e-8,0.998951,0.155468,0,0.987841,0.253347,4.28659e-8,0.967375,0.332759,8.46926e-8,0.943012,0.3916,0,0.920135,0.43,-3.1431e-7,0.902829,-0.332696,9.94759e-8,-0.943034,-0.391555,0,-0.920155,-0.429974,0,-0.902841,-0.448859,1.62645e-7,-0.893603,0.046112,0,0.998936,0.155402,0,0.987851,0.155402,0,0.987851,0.155402,0,0.987851,0.155402,0,0.987851,0.253265,0,0.967397,0.332685,-2.66446e-7,0.943038,0.332685,0,0.943038,0.332685,0,0.943038,0.332685,2.66442e-7,0.943038,0.332685,0,0.943038,0.332685,0,0.943038,0.391547,3.04221e-8,0.920158,0.42997,3.06589e-8,0.902843,0.0457993,5.48889e-8,0.998951,0.155468,0,0.987841,0.253347,4.28659e-8,0.967375,-0.332696,-9.94759e-8,-0.943034,0.332759,8.46926e-8,0.943012,-0.391555,0,-0.920155,0.3916,0,0.920135,0.43,3.1431e-7,0.902829,-0.448859,-1.62645e-7,-0.893603,0,1,0,-6.54502e-7,-1,-0.00000130301,-9.20724e-8,-1,-1.77527e-7,-1.18666e-14,-1,5.60624e-8,4.51517e-8,-1,1.66329e-7,2.95996e-8,-1,1.08604e-7,-1.21856e-8,-1,2.25068e-8,-2.63274e-8,-1,-9.62437e-9,-4.28773e-8,1,-1.49568e-7,1.3317e-7,1,2.34924e-7,-1.27576e-14,1,-4.47036e-8,-4.25272e-15,1,-3.97363e-8,0,1,-4.47035e-8,-2.34239e-9,1,-4.62477e-8,0,1,-5.02898e-8,-2.36217e-8,1,-1.50157e-7,7.9057e-15,1,-4.23514e-8,-1.14468e-8,1,-6.74913e-8,-1.09344e-9,1,-5.1311e-8,6.43485e-15,1,-4.47036e-8,7.2413e-10,1,-4.03279e-8,-4.25266e-15,1,-3.97363e-8,-5.03496e-15,1,-3.97363e-8,-1.60877e-14,1,-4.47036e-8,-2.04954e-9,1,-4.47035e-8,9.0412e-10,1,-5.53219e-8,2.33718e-9,1,-3.73797e-8,-1.01022e-8,1,-7.02986e-8,-7.47624e-15,1,-4.47036e-8,1.29682e-8,1,-2.33605e-9,-9.59561e-9,1,-7.49151e-8,-6.57636e-15,1,-4.47036e-8,4.87022e-16,1,-4.47035e-8,2.74717e-9,1,-3.36708e-8,3.86602e-10,1,-4.30453e-8,-1.43945e-7,0,1,-1.83594e-7,0,-1,-1.83594e-7,0,-1,-1.66789e-7,0,-1,-1.66789e-7,0,-1,-1.26709e-7,0,-1,-1.26709e-7,0,-1,-1.66789e-7,0,-1,-5.70813e-7,0,-1,-1.50032e-7,-3.83246e-7,-1,-1.07023e-7,0,-1,-5.70813e-7,0,-1,0.448868,0,0.893598,0.448898,0,0.893583,0.448898,0,0.893583,0.448898,0,0.893583,0.448898,0,0.893583,0.448858,2.99755e-7,0.893603,0.44888,0,0.893592,0.448858,-2.99755e-7,0.893603,0.44888,0,0.893592,0.448858,0,0.893603,0.448858,0,0.893603,-0.448897,0,-0.893584,-1,0,-9.93427e-9,-0.0000858307,-1,4.47035e-8,-1,0,-9.93427e-9,0.0000858307,1,-4.47035e-8,-1,0,0,-1,0,0,-1,0,0,-0.999966,0.0078122,0.00260408,-1,0,-9.93427e-9,-1,-1.49012e-8,6.66134e-16,-0.999966,-0.0078122,0.00260408,-1,8.51496e-9,2.12874e-9,-0.0000171662,1,-4.47036e-8,-1,0,0,-1,0,9.93427e-9,-0.999983,-0.00572906,-0.000520825,-0.999966,0.0078122,-0.00260408,-0.0000858307,1,-4.47035e-8,-1,-8.51496e-9,-2.12874e-9,-1,0,9.93427e-9,-1,0,0,-1,0,9.93427e-9,1.86669e-7,0,-1,-1.05833e-7,-0.00000492732,1,-1.0796e-7,-0.00000683467,1,0.164399,0,-0.986394,-1,-1.19209e-7,-5.96046e-8,-1,1.19209e-7,-5.96046e-8,-1,-1.19209e-7,5.96046e-8,-1,1.19209e-7,5.96046e-8,0.164399,0,0.986394,2.31357e-9,-1,8.60254e-8,-9.91689e-14,-1,2.27596e-7,8.50544e-15,-1,7.94727e-8,8.50533e-15,-1,7.94727e-8,7.37665e-15,-1,4.47036e-8,1.27576e-14,-1,4.47036e-8,-4.92476e-7,-1,-9.80438e-7,-6.19558e-9,-1,2.44852e-8,0,-1,5.02898e-8,3.48814e-9,-1,5.82707e-8,-7.9057e-15,-1,4.23514e-8,2.34239e-9,-1,4.62477e-8,1.09344e-9,-1,5.1311e-8,-6.43485e-15,-1,4.47036e-8,-1.05717e-9,-1,3.83154e-8,4.02888e-15,-1,4.47035e-8,-4.87022e-16,-1,4.47035e-8,3.09132e-15,-1,4.47035e-8,1.60877e-14,-1,4.47036e-8,-2.07138e-9,-1,4.47037e-8,3.02155e-9,-1,4.72254e-8,4.70642e-9,-1,5.60195e-8,7.57892e-9,-1,6.91999e-8,-3.432e-9,-1,3.44824e-8,5.44397e-9,-1,6.063e-8,-2.85382e-7,-0.0000034968,-1,0,0,1,-1.03498e-7,-0.0000055631,-1,1.6231e-7,0,1,-1.05833e-7,0.00000492732,1,1.86669e-7,0,-1,-1.0796e-7,0.00000683467,1,-2.85382e-7,0.0000034968,-1,-1.03498e-7,0.0000055631,-1]},"curve_outer_4":{"normals":[0.893225,0,0.44961,-0.999686,0,-0.0250375,-0.893226,0,-0.449608,-0.870086,0,-0.4929,-0.844854,0,-0.534997,-0.817584,0,-0.57581,-0.788347,0,-0.615231,-0.75721,0,-0.653172,-0.724245,0,-0.689542,-0.893226,0,-0.449608,-0.870086,0,-0.4929,-0.844854,0,-0.534997,-0.817585,0,-0.575808,-0.788347,0,-0.615231,-0.757209,0,-0.653173,-0.724246,0,-0.689542,-0.689541,0,-0.724246,-0.653171,0,-0.75721,-0.615232,0,-0.788346,0.0249712,0,0.999688,-0.893224,0,-0.449611,-0.870087,0,-0.492898,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,-0.0000038147,-1,0,-0.0000038147,0,0,-1,-0.615234,0,-0.788345,-0.757209,0,-0.653173,-0.689541,0,-0.724246,-0.615233,0,-0.788345,-0.653172,0,-0.75721,-0.689541,0,-0.724247,6.3884e-7,1,2.11131e-7,9.56288e-9,1,-3.15236e-8,6.67655e-7,1,8.24242e-8,-6.62921e-7,1,-1.14944e-7,0,1,-3.3521e-8,1.6535e-9,1,-3.36541e-8,7.25866e-9,1,-4.89374e-8,1.71921e-7,1,1.77268e-8,1.55288e-8,1,-2.90524e-8,1.83019e-8,1,-2.73902e-8,2.08984e-8,1,-2.54645e-8,2.32939e-8,1,-2.32932e-8,2.54656e-8,1,-2.0897e-8,3.86462e-7,1,5.48735e-7,-3.01776e-7,1,-5.99523e-7,-2.41556e-7,1,-6.26209e-7,-1.79005e-7,1,-6.46844e-7,-1.14743e-7,1,-6.61284e-7,0,1,0,-1.64712e-8,1,-1.67235e-7,1.5527e-8,1,-5.55551e-9,1.41439e-8,1,-8.47959e-9,2.44383e-8,1,-2.21489e-8,1.96477e-8,1,-2.6491e-8,3.24966e-9,1,-6.61411e-8,5.99957e-7,1,4.06469e-8,7.26633e-9,1,-4.89361e-8,-5.85919e-7,1,-1.35261e-7,4.48164e-7,1,0.0000029651,-7.13607e-8,1,-6.04876e-7,1.60907e-8,1,-6.42363e-8,8.04536e-9,1,-3.21181e-8,6.67936e-9,1,-3.26534e-8,-0.00000280969,1,-0.00000104911,2.22206e-7,1,5.67107e-7,1.55261e-8,1,-5.55838e-9,-5.48191e-7,1,-2.4694e-7,2.83126e-8,1,-5.98648e-8,2.17469e-7,1,5.63766e-7,2.99314e-8,1,-1.4157e-8,1.4101e-8,1,-2.98155e-8,1.83681e-8,1,-2.78117e-8,0,1,0,3.28575e-7,1,5.1286e-7,1.70221e-8,1,-2.83999e-8,1.70221e-8,1,-2.83999e-8,1.41587e-8,1,-8.45505e-9,-2.97409e-7,1,-5.31531e-7,1.58708e-8,1,-2.93081e-8,1.9637e-8,1,-2.6499e-8,2.65943e-8,1,-1.97242e-8,2.34392e-8,1,-2.36952e-8,2.22352e-8,1,-2.45336e-8,2.7611e-8,1,-1.86676e-8,2.22353e-8,1,-2.45337e-8,2.44334e-8,1,-2.21546e-8,2.12833e-8,1,-2.5649e-8,0.61523,0,0.788347,0.653171,0,0.75721,0.689542,0,0.724245,0.724244,0,0.689543,0.757209,0,0.653172,0.788345,0,0.615233,0.817585,0,0.575808,0.844854,0,0.534996,0.870088,0,0.492897,0.893225,0,0.44961,0.615231,0,0.788347,0.65317,0,0.757212,0.689542,0,0.724245,0.724244,0,0.689544,0.75721,0,0.653171,0.788348,0,0.61523,0.817584,0,0.57581,0.844854,0,0.534997,0.870086,0,0.4929,0.893225,0,0.44961,0.985278,0,0.170961,0,0.0000038147,-1,0.00000435965,0,-1,0,-0.0000038147,-1,-0.00000190735,0.0000219345,-1,0,0,-1,0,0,-1,-0.00000190735,-0.0000219345,-1,0,0,-1,-0.999688,0,-0.0249732,-0.99729,0,-0.0735646,-0.992479,0,-0.122412,-0.985278,0,-0.170962,-0.975702,0,-0.219101,-0.963776,0,-0.266715,-0.949529,0,-0.31368,-0.932992,0,-0.359897,-0.975703,0,-0.219097,8.26281e-14,-1,4.33209e-8,1.29389e-8,-1,4.24424e-8,1.60096e-7,-1,6.97732e-8,-1.00557e-8,-1,4.01479e-8,-1.39454e-8,-1,3.8968e-8,1.36502e-7,-1,1.05766e-7,-2.1278e-8,-1,3.54996e-8,-1.97251e-8,-1,2.65936e-8,-2.22367e-8,-1,2.45323e-8,-2.14667e-8,-1,1.94561e-8,2.85982e-8,-1,8.37214e-8,2.38137e-8,-1,8.40087e-8,1.92037e-8,-1,8.41637e-8,1.47589e-8,-1,8.4247e-8,1.04447e-8,-1,8.42819e-8,6.22839e-9,-1,8.42986e-8,2.12468e-9,-1,8.50499e-8,1.1173e-9,-1,4.47035e-8,-1.25627e-9,-1,4.07896e-8,9.99487e-12,-1,4.23776e-8,3.46322e-10,-1,4.39666e-8,1.60805e-9,-1,4.69608e-8,-8.24607e-9,-1,3.40428e-8,-2.10309e-8,-1,2.56252e-8,-5.57465e-8,-1,1.48399e-8,-1.20293e-8,-1,3.96536e-8,-4.276e-8,-1,3.96822e-8,-1.25827e-9,-1,4.25578e-8,-5.8606e-10,-1,4.2785e-8,2.98168e-9,-1,4.42071e-8,6.12291e-9,-1,4.79098e-8,2.11921e-10,-1,4.43489e-8,8.0499e-11,-1,4.30903e-8,1.89508e-9,-1,5.01124e-8,-3.36752e-9,-1,3.03523e-8,1.00287e-8,-1,4.5612e-8,6.09918e-8,-1,5.37539e-8,1.67112e-9,-1,5.10691e-8,-8.02584e-10,-1,3.52531e-8,9.10066e-9,-1,4.56378e-8,1.95859e-9,-1,4.46757e-8,1.74092e-9,-1,5.41346e-8,1.01977e-9,-1,4.37668e-8,-9.83481e-10,-1,4.44711e-8,-2.37559e-9,-1,4.46736e-8,3.69865e-10,-1,4.82334e-8,2.3973e-9,-1,4.73936e-8,-2.65586e-9,-1,4.53502e-8,-1.29176e-8,-1,3.15935e-8,6.25772e-9,-1,5.02733e-8,-1.10171e-10,-1,4.29533e-8,1.99541e-8,-1,6.01898e-8,-3.63166e-8,-1,1.72796e-8,-5.04132e-9,-1,3.64868e-8,6.30892e-8,-1,1.47332e-7,7.52167e-10,-1,4.43211e-8,2.38184e-8,-1,5.8395e-8,1.78606e-9,-1,4.6859e-8,-5.25339e-9,-1,3.47504e-8,6.95386e-9,-1,4.85906e-8,5.1583e-10,-1,4.53836e-8,8.01621e-9,-1,6.13897e-8,-2.47817e-9,-1,4.46249e-8,2.5046e-9,-1,3.96421e-8,-2.80989e-7,1,-6.33908e-7,3.71008e-7,1,5.85886e-7,2.73498e-8,1,-2.02637e-8,4.7815e-7,1,5.02214e-7,2.28604e-8,1,-2.52192e-8,2.02747e-8,1,-2.73411e-8,6.20894e-7,1,3.12622e-7,1.45406e-8,1,-3.07766e-8,1.14687e-8,1,-3.20481e-8,6.8486e-7,1,1.18913e-7,4.99401e-9,1,-3.36699e-8,6.88583e-7,1,-1.74471e-8,0,1,-5.29819e-8,0,1,-5.15798e-8,1.78406e-7,1,-7.94646e-9,1.30443e-8,1,-3.14843e-8,-1.20528e-7,1,-1.31767e-7,-1.04559e-7,1,-1.40706e-7,-7.50994e-8,1,-1.584e-7,1.14513e-7,1,2.02311e-7,-1.18562e-7,1,-6.83295e-7,0,1,0,-1.70194e-8,1,-1.72801e-7,-5.38385e-8,1,-1.77482e-7,1.98538e-8,1,-1.62928e-8,5.64885e-8,1,-1.34891e-8,-2.95639e-8,1,-4.93143e-8,-6.73698e-14,1,-5.29818e-8,0,1,-3.71758e-8,2.77835e-9,1,-3.63481e-8,-5.87056e-14,1,-4.6168e-8,-1.8731e-9,1,-4.27671e-8,5.34797e-9,1,-2.20115e-8,-2.6491e-8,1,-1.58946e-7,4.4336e-9,1,-2.98023e-8,-4.16029e-8,1,-4.45535e-8,8.72744e-8,1,-6.26962e-8,4.40343e-7,1,-0.00000295995,-9.80236e-10,1,-3.91693e-8,-1.6747e-8,1,-3.99045e-8,-1.47421e-8,1,-4.06723e-8,-2.35786e-9,1,-3.19651e-8,-3.44707e-9,1,-2.79481e-8,-1.36096e-8,1,-4.15905e-8,-1.3252e-8,1,-4.27696e-8,-4.45305e-9,1,-2.56637e-8,-5.50033e-9,1,-2.44943e-8,-1.62215e-8,1,-5.23534e-8,-1.44368e-7,1,-9.47618e-8,2.86766e-8,1,-3.30551e-8,-1.6341e-8,1,-4.94651e-8,-6.89619e-8,1,-7.04445e-8,1.57804e-7,1,-2.19218e-9,-2.02695e-8,1,-5.25463e-8,4.93219e-8,1,2.13124e-8,-3.46404e-9,1,-4.38593e-8,-2.01432e-10,1,-4.32758e-8,-5.29667e-8,1,-1.05226e-7,9.41561e-8,1,9.22502e-8,1.94478e-9,1,-4.32178e-8,-3.95817e-8,1,-3.08898e-8,2.03826e-9,1,-3.65904e-8,-1.51991e-7,1,-3.0816e-7,-1.48852e-8,1,-6.09827e-8,-1.45857e-8,1,-6.42206e-8,9.42624e-8,1,1.33842e-7,-2.63966e-8,1,-9.30767e-8,-1.57686e-8,1,-6.94289e-8,-1.91142e-8,1,-7.79699e-8,-0.999687,0,-0.0250219,-0.997291,0,-0.0735613,-0.992479,0,-0.122411,-0.985278,0,-0.170961,-0.975702,0,-0.219102,-0.963776,0,-0.266715,-0.94953,0,-0.313676,-0.932992,0,-0.359898,-0.91421,0,-0.405242,-0.963776,0,-0.266712,-0.073565,0,-0.99729,-0.932993,0,-0.359895,-0.534998,0,-0.844853,-0.914211,0,-0.405239,0.914209,0,0.405243,0.932993,0,0.359894,0.949529,0,0.313681,0.963776,0,0.266714,0.975703,0,0.219099,0.985277,0,0.170965,0.99248,0,0.122409,0.99729,0,0.0735659,0.999688,0,0.024985,0,-1,3.85779e-8,-7.59864e-7,-1,1.93192e-8,-5.51321e-9,-1,3.7187e-8,-9.1325e-9,-1,3.64673e-8,-1.26607e-8,-1,3.53975e-8,-1.60559e-8,-1,3.39928e-8,-1.93269e-8,-1,3.22451e-8,-2.23924e-8,-1,3.01968e-8,-2.52427e-8,-1,2.78583e-8,-2.78582e-8,-1,2.52426e-8,-4.71253e-7,-1,-6.03856e-7,-1.61218e-8,-1,9.66462e-9,-1.69915e-8,-1,8.03798e-9,1.20115e-7,-1,3.63597e-7,8.39074e-8,-1,3.73659e-7,4.68777e-8,-1,3.80077e-7,0,-1,0,4.77527e-9,-1,9.62445e-8,-9.00452e-9,-1,2.73154e-9,-1.65976e-8,-1,8.8709e-9,9.96903e-8,-1,1.65971e-7,-2.38791e-8,-1,2.90942e-8,-1.77389e-8,-1,3.31969e-8,-1.09274e-8,-1,3.60177e-8,1.92626e-7,-1,6.65783e-8,5.12534e-7,-1,1.13613e-7,-9.13432e-7,-1,-4.29021e-8,-4.83717e-8,-1,-4.40691e-7,-3.32789e-8,-1,-2.69821e-7,-8.69864e-9,-1,3.70151e-8,-7.3768e-9,-1,3.70863e-8,-1.85431e-8,-1,3.68842e-9,-7.37682e-9,-1,3.70864e-8,-6.13145e-9,-1,3.75254e-8,-9.12708e-8,-1,-2.58946e-7,-9.00462e-9,-1,2.73123e-9,-1.09185e-8,-1,3.60204e-8,-1.57546e-8,-1,3.46065e-8,6.79793e-8,-1,2.66032e-7,-1.44704e-8,-1,3.49346e-8,-1.44707e-8,-1,3.49354e-8,-1.74674e-8,-1,7.23499e-9,-1.78054e-8,-1,6.66501e-9,-1.33443e-8,-1,3.56033e-8,-1.77608e-8,-1,3.31851e-8,-1.65959e-8,-1,8.87403e-9,2.37128e-7,-1,4.9528e-7,-2.2201e-8,-1,3.0869e-8,-2.10077e-8,-1,3.14403e-8,-3.1441e-8,-1,2.10079e-8,-2.10076e-8,-1,3.14403e-8,-2.00238e-8,-1,3.23236e-8,-3.23192e-8,-1,2.00298e-8,5.70681e-7,-1,7.39874e-7,-2.38711e-8,-1,2.91008e-8,-2.77987e-8,-1,2.59432e-8,-3.55169e-7,-1,-4.11743e-7,-2.67376e-8,-1,2.67379e-8,-2.67375e-8,-1,2.67379e-8,0.914211,0,0.405238,0.932991,0,0.359899,0.94953,0,0.313677,0.963776,0,0.266714,0.975702,0,0.2191,0.985277,0,0.170965,0.99248,0,0.122409,0.997291,0,0.0735623,0.999687,0,0.0250365,-0.844856,0,-0.534994,0.122411,0,0.992479,-0.266711,0,-0.963776,0,-1,6.73908e-8,6.9735e-7,-1,8.44621e-8,-6.70935e-7,-1,-4.95689e-8,-8.00561e-9,-1,3.19545e-8,-6.48336e-7,-1,-1.79497e-7,-1.40709e-8,-1,2.97862e-8,-1.69349e-8,-1,2.82558e-8,-1.96242e-8,-1,2.64589e-8,-2.21218e-8,-1,2.44091e-8,-2.44084e-8,-1,2.21226e-8,-2.19697e-7,-1,-2.54752e-7,-1.93658e-7,-1,-2.75042e-7,-1.48895e-8,-1,7.04268e-9,-1.55084e-8,-1,5.54855e-9,-8.95015e-8,-1,-3.23418e-7,-5.73727e-8,-1,-3.3065e-7,0,-1,0,4.17666e-9,-1,8.42839e-8,1.25247e-8,-1,8.38959e-8,2.138e-8,-1,8.3728e-8,3.09284e-8,-1,8.31776e-8,-2.09235e-8,-1,2.54953e-8,-1.55441e-8,-1,2.90894e-8,-1.72584e-7,-1,-9.27033e-9,-5.03132e-10,-1,4.98793e-8,-5.97773e-7,-1,-1.0904e-8,-7.18733e-8,-1,4.28192e-8,-1.3141e-7,-1,-0.00000128637,2.0798e-8,-1,3.03826e-7,5.91806e-7,-1,1.06344e-7,3.06844e-7,-1,8.68375e-8,-1.62371e-8,-1,3.22971e-9,2.97341e-7,-1,1.3462e-7,-5.06829e-9,-1,3.2942e-8,-1.6471e-8,-1,2.53415e-9,4.23511e-7,-1,0.00000143874,0.0000028569,-1,9.09712e-7,5.59714e-7,-1,2.19763e-7,-9.47793e-8,-1,-2.86902e-7,-1.5295e-8,-1,6.33545e-9,-2.53414e-8,-1,6.11804e-8,-1.2671e-8,-1,3.05908e-8,-1.5295e-8,-1,6.33546e-9,-1.67171e-7,-1,-2.58492e-7,-1.14086e-8,-1,3.13148e-8,-1.56112e-8,-1,2.90535e-8,6.88785e-7,-1,0.00000133236,-1.34385e-8,-1,9.85511e-9,-1.97094e-8,-1,2.68775e-8,-1.83954e-8,-1,2.75302e-8,-1.37652e-8,-1,9.19746e-9,-2.75311e-8,-1,1.83954e-8,-1.83953e-8,-1,2.75302e-8,-1.72885e-8,-1,2.84952e-8,1.71656e-7,-1,2.46856e-7,-9.73183e-7,-1,-0.00000114034,-2.09191e-8,-1,2.54992e-8,-2.45737e-8,-1,2.25164e-8,-2.25161e-8,-1,2.4574e-8,-2.34129e-8,-1,2.34125e-8,-2.34128e-8,-1,2.34124e-8,-0.122409,0,-0.99248,0.844852,0,0.534999,0.2191,0,0.975703,0.164399,0,-0.986394,-0.575807,0,-0.817585,-0.534997,0,-0.844854,-0.492899,0,-0.870087,-0.449612,0,-0.893224,-0.40524,0,-0.914211,0.40524,0,0.91421,1.27382e-8,1,1.72692e-7,2.88329e-8,1,1.66168e-7,5.30076e-8,1,1.60519e-7,1.55877e-8,1,-5.57673e-9,1.4966e-8,1,-7.07786e-9,2.13005e-8,1,-1.27655e-8,1.9953e-8,1,-1.47839e-8,-9.17514e-8,1,-1.44373e-7,2.22367e-8,1,-2.45323e-8,1.97251e-8,1,-2.65936e-8,1.63766e-7,1,5.473e-8,1.76807e-8,1,-3.7422e-8,1.39454e-8,1,-3.8968e-8,1.00557e-8,1,-4.01479e-8,6.07191e-9,1,-4.09403e-8,1.57151e-7,1,-3.81934e-8,-8.26281e-14,1,-4.33209e-8,1.25827e-9,1,-4.25578e-8,-4.19157e-8,1,-4.80586e-8,1.20293e-8,1,-3.96536e-8,-1.86408e-8,1,-5.46007e-8,2.10309e-8,1,-2.56252e-8,-5.93272e-9,1,-4.96867e-8,-2.14888e-8,1,-8.41552e-8,1.63636e-9,1,-4.45681e-8,4.17822e-9,1,-3.96169e-11,-1.1173e-9,1,-4.47035e-8,6.11193e-9,1,-3.2783e-8,-1.12824e-9,1,-5.36818e-8,2.29125e-9,1,-3.96657e-8,-6.12291e-9,1,-4.79098e-8,-2.98168e-9,1,-4.42071e-8,5.8606e-10,1,-4.2785e-8,-2.4727e-9,1,-4.35996e-8,-9.87767e-9,1,-8.00856e-8,3.36752e-9,1,-3.03523e-8,-1.40099e-8,1,-4.64056e-8,-9.10066e-9,1,-4.56378e-8,4.22772e-9,1,-2.68154e-8,7.74002e-9,1,-4.35901e-9,-1.95859e-9,1,-4.46757e-8,9.83481e-10,1,-4.44711e-8,-5.18414e-10,1,-6.5665e-8,2.73946e-9,1,-1.88275e-8,2.37559e-9,1,-4.46736e-8,2.65586e-9,1,-4.53502e-8,4.99463e-9,1,-3.43266e-8,3.64301e-9,1,-3.37667e-8,1.29176e-8,1,-3.15935e-8,-1.99541e-8,1,-6.01898e-8,1.63441e-8,1,-2.42922e-8,-1.39049e-8,1,-5.90638e-8,1.22356e-8,1,-3.5643e-8,-1.55271e-7,1,-1.38601e-7,1.22289e-8,1,-2.4793e-8,-6.30892e-8,1,-1.47332e-7,-2.38184e-8,1,-5.8395e-8,-6.95386e-9,1,-4.85906e-8,-1.78606e-9,1,-4.6859e-8,5.25339e-9,1,-3.47504e-8,-5.1583e-10,1,-4.53836e-8,2.47817e-9,1,-4.46249e-8,7.33776e-9,1,-3.05659e-8,3.51257e-9,1,-4.56592e-8,-0.575809,0,-0.817585,-0.534997,0,-0.844854,-0.492898,0,-0.870087,-0.449613,0,-0.893223,-0.405238,0,-0.914211,-0.359897,0,-0.932992,-0.313681,0,-0.949528,-0.266712,0,-0.963776,-0.2191,0,-0.975702,-0.170961,0,-0.985278,-0.122411,0,-0.99248,-0.0735638,0,-0.99729,-0.0250178,0,-0.999687,0,-1,3.71758e-8,0,-1,5.29818e-8,0,-1,6.93134e-8,6.737e-14,-1,5.29819e-8,1.60303e-7,-1,8.49302e-8,-3.01602e-7,-1,-4.6884e-10,8.81366e-14,-1,6.93134e-8,-3.33564e-9,-1,3.38744e-8,-6.90003e-7,-1,-8.51929e-8,-9.88185e-9,-1,3.25722e-8,-1.30371e-8,-1,3.1443e-8,5.87349e-7,-1,3.71836e-7,-1.8911e-8,-1,2.83015e-8,-2.15952e-8,-1,2.63106e-8,-2.40664e-8,-1,2.4071e-8,-4.52972e-7,-1,-5.25122e-7,1.71361e-7,-1,3.0241e-7,-1.50101e-8,-1,8.02162e-9,-1.57235e-8,-1,6.51325e-9,-1.62861e-8,-1,4.94089e-9,-7.59731e-8,-1,-3.38327e-7,0,-1,0,8.50969e-9,-1,8.64004e-8,-1.60436e-8,-1,5.74054e-9,2.63116e-8,-1,8.53289e-8,9.75256e-8,-1,1.45663e-7,-2.03006e-8,-1,2.7373e-8,-1.74989e-7,-1,-3.56396e-8,1.57877e-7,-1,8.34614e-8,2.92577e-8,-1,3.70846e-8,-7.10863e-9,-1,4.79224e-8,-1.44221e-8,-1,4.03027e-8,1.20796e-8,-1,5.13878e-8,-8.12186e-9,-1,2.78803e-8,-2.67399e-9,-1,1.10057e-8,1.28093e-9,-1,4.47035e-8,-5.35052e-9,-1,3.60702e-8,-5.30202e-9,-1,3.61712e-8,7.38502e-8,-1,-4.43101e-7,9.80236e-10,-1,3.91693e-8,5.45516e-9,-1,4.74148e-8,7.85578e-8,-1,5.95642e-8,2.35786e-9,-1,3.19651e-8,-9.17616e-9,-1,7.4502e-8,5.26168e-8,-1,5.57737e-8,-9.98906e-8,-1,3.96121e-8,6.67958e-9,-1,3.84955e-8,-6.68543e-9,-1,5.34187e-8,6.54737e-9,-1,4.2778e-8,4.41786e-9,-1,4.30354e-8,1.33912e-8,-1,4.83898e-8,-5.48303e-9,-1,4.15097e-8,3.09613e-9,-1,4.36509e-8,2.46273e-9,-1,4.47077e-8,5.69703e-10,-1,4.62571e-8,5.78828e-9,-1,6.56503e-8,2.34467e-9,-1,4.25646e-8,-4.99183e-8,-1,9.43109e-9,1.49484e-9,-1,4.83509e-8,-2.02127e-10,-1,4.01379e-8,-3.62531e-8,-1,1.79489e-8,-3.22018e-8,-1,2.03652e-8,-7.87069e-10,-1,3.55898e-8,-7.2802e-10,-1,3.29197e-8,-3.05105e-8,-1,2.12854e-8,5.82526e-8,-1,6.11845e-8,-1.89535e-10,-1,3.13861e-8,-1.23877e-8,-1,4.14501e-8,-1.38441e-8,-1,4.1513e-8,-0.817584,0,-0.575809,-0.949528,0,-0.313683,0.359895,0,0.932993,0.534998,0,0.844853,-0.986394,0,0.164399,-0.986394,-6.27131e-7,0.164399,-0.986394,6.27129e-7,0.164398,-0.219101,0,-0.975702,-1.11938e-9,1,-4.47035e-8,-4.69226e-9,1,-1.87498e-7,-2.2736e-8,1,-1.84339e-7,8.84303e-9,1,-2.21514e-9,1.71679e-8,1,-6.13903e-9,1.64815e-8,1,-7.79644e-9,-7.59114e-8,1,-1.70981e-7,1.2892e-7,1,1.35569e-7,1.4833e-7,1,1.16145e-7,-1.16146e-7,1,-1.48331e-7,2.17206e-8,1,-2.92901e-8,1.87459e-8,1,-3.12775e-8,-1.50343e-7,1,-1.16487e-7,-1.60973e-7,1,-1.01167e-7,-1.70141e-7,1,-8.49089e-8,1.89687e-7,1,-1.33345e-8,-1.59738e-8,1,-4.68696e-8,-9.14324e-14,1,-4.79369e-8,1.72406e-8,1,-3.64125e-8,-4.6643e-8,1,-4.83908e-8,1.19242e-8,1,-3.93036e-8,-2.26806e-8,1,-5.61076e-8,-1.41898e-8,1,-5.5923e-8,-3.77642e-8,1,-8.91781e-8,-3.78334e-9,1,-5.0643e-8,-1.38639e-8,1,-9.28669e-8,4.60769e-9,1,-2.03693e-12,7.02198e-9,1,-3.25241e-8,-9.56203e-9,1,-7.75276e-8,-8.87e-11,1,-4.7456e-8,6.17117e-10,1,-4.24103e-8,1.02458e-9,1,-4.3437e-8,-4.17781e-9,1,-4.41881e-8,-1.86327e-8,1,-4.96318e-8,5.43897e-8,1,-2.8706e-8,1.86879e-9,1,-3.76392e-8,-4.75914e-9,1,-8.23845e-8,-1.00758e-8,1,-4.53642e-8,5.1023e-8,1,-3.66901e-8,2.30824e-9,1,-3.26034e-8,3.44782e-9,1,-2.27684e-8,3.81752e-8,1,-3.81788e-8,-8.1833e-10,1,-3.98503e-8,2.13246e-9,1,-5.34505e-8,-2.04608e-9,1,-3.14103e-8,4.79546e-10,1,-4.00964e-8,4.3565e-9,1,-4.94562e-8,5.28526e-9,1,-3.4447e-8,2.87003e-9,1,-3.60924e-8,1.42827e-8,1,-3.48854e-8,1.36646e-8,1,-3.54527e-8,2.65899e-8,1,-1.02477e-8,-2.73873e-8,1,-7.8373e-8,1.73821e-8,1,-3.25072e-8,4.57719e-8,1,-1.5499e-8,8.51706e-9,1,-3.05872e-8,-1.45112e-8,1,-6.95566e-8,-7.12099e-8,1,-8.46274e-8,1.20521e-8,1,-3.82664e-8,-4.50767e-9,1,-5.15907e-8,-1.26282e-9,1,-4.46177e-8,1.44942e-8,1,-3.713e-8,-6.19232e-10,1,-4.15276e-8,-1.65367e-9,1,-4.04931e-8,-0.0249738,0,-0.999688,-0.0735626,0,-0.997291,-0.122412,0,-0.992479,-0.170962,0,-0.985278,-0.219099,0,-0.975703,-0.266713,0,-0.963776,-0.313681,0,-0.949528,-0.359896,0,-0.932992,0.0249857,0,0.999688,0.0735637,0,0.99729,0.122411,0,0.992479,0.170961,0,0.985278,0.219099,0,0.975703,0.266712,0,0.963776,0.313681,0,0.949529,0.359897,0,0.932992,0.405237,0,0.914212,0.449614,0,0.893223,0.492898,0,0.870087,0.534998,0,0.844853,0.57581,0,0.817584,-1,0,0,0.0250323,0,0.999687,0.0735652,0,0.99729,0.12241,0,0.99248,0.170961,0,0.985278,0.2191,0,0.975702,0.266712,0,0.963776,0.31368,0,0.949529,0.359898,0,0.932992,0.405238,0,0.914211,0.449612,0,0.893224,0.492899,0,0.870086,0.534998,0,0.844853,0.575809,0,0.817584,-0.0250357,0,-0.999687,0.653171,0,0.75721,0.817585,0,0.575808,0.870088,0,0.492897,0.91421,0,0.405241,0.170961,0,0.985278,0.724246,0,0.689541,-5.63474e-8,1,-7.63876e-7,-2.04286e-7,1,-7.38197e-7,-2.75688e-7,1,-7.14688e-7,-3.44369e-7,1,-6.84142e-7,-4.09766e-7,1,-6.47091e-7,5.00316e-7,1,5.8001e-7,2.65812e-8,1,-2.65839e-8,2.38543e-8,1,-2.90559e-8,2.08863e-8,1,-3.12576e-8,1.7722e-8,1,-3.31542e-8,1.44035e-8,1,-3.47253e-8,1.09187e-8,1,-3.5973e-8,-7.4005e-7,1,-2.04701e-7,3.68724e-9,1,-3.74122e-8,0,1,-3.83495e-8,1.8927e-9,1,-3.85305e-8,1.96363e-7,1,-1.84358e-8,1.26839e-8,1,-3.54376e-8,1.93504e-8,1,-3.22838e-8,2.52757e-8,1,-2.78894e-8,1.51172e-8,1,-1.12092e-8,1.70123e-8,1,-8.04684e-9,-3.74127e-8,1,-1.88087e-7,-6.43899e-9,1,-2.57147e-7,7.6397e-8,1,5.21829e-7,1.85521e-9,1,-3.77673e-8,5.55164e-10,1,-3.80195e-8,-8.62137e-10,1,-1.82041e-7,-9.1722e-7,1,-1.8362e-7,5.56667e-7,1,1.98609e-8,9.18801e-9,1,-3.66797e-8,9.18796e-9,1,-3.66795e-8,2.36077e-7,1,9.03751e-7,1.45016e-7,1,5.24022e-7,7.95889e-9,1,-3.71818e-8,1.26615e-8,1,-3.54455e-8,3.56027e-8,1,-1.27389e-8,1.74194e-8,1,-3.37971e-8,1.61672e-8,1,-3.41834e-8,2.56547e-7,1,4.85481e-7,1.70139e-8,1,-8.04343e-9,1.61668e-8,1,-3.41826e-8,1.50625e-8,1,-3.49129e-8,2.44469e-7,1,4.85675e-7,3.24332e-8,1,-1.94396e-8,1.93485e-8,1,-3.2285e-8,2.36889e-8,1,-2.97425e-8,3.46348e-7,1,4.26127e-7,2.25248e-8,1,-3.03718e-8,2.25248e-8,1,-3.03718e-8,1.5112e-8,1,-1.12161e-8,-3.07202e-7,1,-4.55083e-7,2.15818e-8,1,-3.13059e-8,2.52798e-8,1,-2.78856e-8,-1.7968e-7,1,-2.66175e-7,2.90367e-8,1,-2.45489e-8,-2.19263e-7,1,-2.30298e-7,1.74099e-7,-1,7.64572e-8,-1.3236e-8,-1,4.36173e-8,-1.87268e-7,-1,-3.31658e-8,-1.7189e-8,-1,3.21595e-8,-2.02609e-8,-1,3.03181e-8,1.23285e-7,-1,1.42453e-7,1.08743e-7,-1,1.53866e-7,-2.11403e-8,-1,1.73506e-8,8.04213e-8,-1,1.69586e-7,-6.18561e-8,-1,-7.22121e-8,2.07932e-8,-1,9.18876e-8,-1.30852e-8,-1,3.97077e-9,1.14065e-8,-1,9.23909e-8,-4.5362e-9,-1,4.46536e-10,9.32278e-10,-1,3.72529e-8,-3.66857e-9,-1,4.49377e-8,-2.23517e-9,-1,2.38094e-8,-6.14122e-9,-1,2.68621e-8,1.52695e-8,-1,7.20794e-8,9.21172e-9,-1,5.43348e-8,1.69176e-8,-1,5.51601e-8,2.54081e-8,-1,5.49281e-8,-5.55917e-8,-1,3.07689e-8,-1.88792e-7,-1,2.26276e-8,8.8634e-14,-1,4.64697e-8,1.3019e-8,-1,3.86756e-8,-2.2844e-8,-1,3.89717e-8,1.1085e-9,-1,4.34352e-8,-4.30492e-9,-1,3.94215e-8,1.30438e-9,-1,4.76712e-8,3.28962e-9,-1,4.45958e-8,2.52241e-10,-1,4.04226e-8,1.25594e-8,-1,4.80317e-8,1.39674e-8,-1,4.90564e-8,-4.46265e-9,-1,2.92379e-8,-3.08515e-10,-1,4.15086e-8,1.55904e-9,-1,4.38258e-8,6.81044e-8,-1,4.99612e-8,5.13564e-11,-1,4.26688e-8,6.59467e-9,-1,7.66711e-8,-1.71067e-8,-1,4.43062e-8,1.83922e-8,-1,4.40845e-8,2.66709e-9,-1,5.30027e-8,1.82763e-9,-1,4.3897e-8,-1.67788e-9,-1,4.89207e-8,1.24192e-9,-1,4.07605e-8,1.12894e-9,-1,4.89174e-8,3.11315e-9,-1,4.79789e-8,2.26443e-9,-1,4.21136e-8,5.62248e-9,-1,4.49048e-8,6.89258e-9,-1,5.02906e-8,-7.11799e-10,-1,4.27806e-8,1.62801e-8,-1,5.25287e-8,1.97681e-8,-1,5.43922e-8,-7.91733e-9,-1,3.45507e-8,3.29149e-8,-1,9.56878e-8,-4.6828e-9,-1,4.15182e-8,-1.01612e-8,-1,3.88111e-8,2.49917e-10,-1,4.61349e-8,-5.7858e-9,-1,3.64464e-8,-1.26541e-8,-1,3.77966e-8,3.6386e-9,-1,4.03632e-8,-7.72482e-9,-1,3.27636e-8,-3.65566e-9,-1,4.84111e-8,-0.893226,0,-0.449608,-0.788347,0,-0.615231,-0.757209,0,-0.653173,-0.724246,0,-0.689542,0.266712,0,0.963776,-0.724244,0,-0.689543,-0.65317,0,-0.757211,0.689541,0,0.724247,0.653171,0,0.75721,0.689542,0,0.724245,0.844854,0,0.534996,0.870088,0,0.492897,0.975702,0,0.219104,0.817584,0,0.57581,0.844854,0,0.534997,0.999688,0,0.0249726,0.932993,0,0.359896,-0.992479,0,-0.122412,-0.985277,0,-0.170967,0.164399,0,0.986394,-0.985278,0,-0.170962,-0.932992,0,-0.359898,-0.91421,0,-0.405242,0.99729,0,0.0735657,0.615231,0,0.788347,-0.313681,0,-0.949529,0.99248,0,0.122409,-0.91421,0,-0.405242,0.949529,0,0.313679,0.963776,0,0.266712,-0.997291,0,-0.073561,0.985277,0,0.170965,0.997291,0,0.0735623,0.999687,0,0.0250365,0.575808,0,0.817585,-0.405239,0,-0.914211,0.492898,0,0.870087,-0.170961,0,-0.985278,-0.492899,0,-0.870087,-0.405238,0,-0.914211,-0.359897,0,-0.932992,-0.313681,0,-0.949528,-0.2191,0,-0.975702,-0.122411,0,-0.992479,-0.0735638,0,-0.99729,0.313681,0,0.949528,0.986394,0,0.164399,0.986394,0,0.164399,0.788347,0,0.61523,-0.492899,0,-0.870086,-0.575807,0,-0.817586,0.757209,0,0.653173,-0.359896,0,-0.932992,0.0735635,0,0.997291,-0.449612,0,-0.893224,0.449613,0,0.893223,-0.266713,0,-0.963776,0.0249857,0,0.999688,0.219099,0,0.975703,0.359897,0,0.932992,0.405237,0,0.914212,0.449614,0,0.893223,0.492898,0,0.870087,0.534998,0,0.844853,-0.00000190735,-0.00000667572,-1,-0.00000190735,0.00000667572,-1,-0.00000132685,0,-1,0.0250323,0,0.999687,0.170961,0,0.985278,0.266712,0,0.963776,0.405238,0,0.914211],"metadata":{"generator":"io_three","uvs":0,"vertices":711,"version":3,"normals":881,"type":"Geometry","faces":1028},"uvs":[],"vertices":[474.838,1,19.7415,486.194,1,10.8787,497.102,1,1.46924,507.536,1,-8.46411,517.469,0.999999,-18.8974,526.879,0.999999,-29.8056,535.741,0.999998,-41.1623,544.036,0.999998,-52.9402,551.743,0.999997,-65.1109,558.844,0.999997,-77.6452,565.321,0.999996,-90.5127,470.072,1,13.3159,481.119,1,4.69458,491.73,1,-4.45836,501.879,0.999999,-14.121,511.542,0.999999,-24.2699,520.694,0.999998,-34.8807,529.316,0.999998,-45.9279,537.385,0.999997,-57.3848,544.882,0.999997,-69.2238,551.789,0.999996,-81.4164,558.089,0.999996,-93.9332,458.754,1,-1.9451,469.066,1,-9.99263,478.97,0.999999,-18.5364,488.444,0.999999,-27.556,497.463,0.999998,-37.0295,506.007,0.999998,-46.9342,514.055,0.999997,-57.2462,521.587,0.999997,-67.9406,528.585,0.999997,-78.9917,535.032,0.999996,-90.3729,540.913,0.999996,-102.057,453.988,1,-8.37077,463.991,0.999999,-16.1767,473.598,0.999999,-24.464,482.787,0.999999,-33.2129,491.536,0.999998,-42.402,499.823,0.999998,-52.0093,514.935,0.999997,-72.3851,527.977,0.999996,-94.1441,507.629,0.999997,-62.0118,521.723,0.999996,-83.1045,533.681,0.999995,-105.477,474.838,4,19.7415,486.194,4,10.8787,497.102,4,1.46924,507.536,4,-8.46411,517.469,4,-18.8974,526.879,4,-29.8056,535.741,4,-41.1623,544.036,4,-52.9402,551.743,4,-65.1109,558.844,4,-77.6452,565.321,4,-90.5127,475.731,4,20.9463,487.146,4,12.0382,498.11,4,2.58069,508.596,4,-7.40343,518.581,4,-17.8901,528.038,4,-28.854,536.946,4,-40.2687,545.284,4,-52.1068,553.03,4,-64.3398,560.167,4,-76.9381,566.677,4,-89.8714,470.072,4,13.3159,481.119,4,4.69458,491.73,4,-4.45836,501.879,4,-14.121,511.542,4,-24.2699,520.694,4,-34.8807,529.316,4,-45.9279,537.385,4,-57.3848,544.882,4,-69.2238,551.789,4,-81.4164,558.089,4,-93.9332,458.754,4,-1.9451,469.066,4,-9.99263,478.97,4,-18.5364,488.444,4,-27.556,497.463,4,-37.0295,506.007,4,-46.9342,514.055,4,-57.2462,521.587,4,-67.9406,528.585,4,-78.9917,535.032,4,-90.3729,540.913,4,-102.057,453.988,4,-8.37077,463.991,4,-16.1767,473.598,4,-24.464,482.787,4,-33.2129,491.536,4,-42.402,499.823,4,-52.0093,507.629,4,-62.0118,514.935,4,-72.3851,521.723,4,-83.1045,527.977,4,-94.1441,533.681,4,-105.477,453.095,4,-9.57558,463.039,4,-17.3363,472.591,4,-25.5755,481.726,4,-34.2735,490.424,4,-43.4093,498.664,4,-52.9609,506.424,4,-62.9053,513.688,4,-73.2185,520.436,4,-83.8757,526.654,4,-94.8512,532.325,4,-106.119,571.159,0.999995,-103.682,576.343,0.999995,-117.123,580.862,0.999994,-130.801,584.704,0.999994,-144.685,587.86,0.999993,-158.741,590.323,0.999992,-172.935,592.087,0.999992,-187.232,593.146,0.999991,-201.599,593.5,0.999991,-215.75,563.768,0.999995,-106.744,568.811,0.999995,-119.818,573.206,0.999994,-133.124,576.944,0.999994,-146.629,580.014,0.999993,-160.302,582.41,0.999992,-174.109,584.125,0.999992,-188.016,585.156,0.999991,-201.991,585.5,0.999991,-215.75,546.214,0.999995,-114.015,550.922,0.999995,-126.219,555.025,0.999994,-138.639,558.513,0.999993,-151.246,561.379,0.999993,-164.008,563.616,0.999992,-176.896,565.217,0.999992,-189.879,566.179,0.999991,-202.924,566.5,0.999991,-215.75,538.823,0.999995,-117.076,543.389,0.999994,-128.914,547.369,0.999994,-140.961,550.753,0.999993,-153.19,558.189,0.999991,-203.316,558.5,0.999991,-215.75,553.533,0.999993,-165.569,555.702,0.999992,-178.07,557.255,0.999992,-190.663,571.159,4,-103.682,576.343,3.99999,-117.123,580.862,3.99999,-130.801,584.704,3.99999,-144.685,587.86,3.99999,-158.741,590.323,3.99999,-172.935,592.087,3.99999,-187.232,593.146,3.99999,-201.599,593.5,3.99999,-215.75,572.544,4,-103.108,577.755,3.99999,-116.617,582.297,3.99999,-130.366,586.159,3.99999,-144.321,589.332,3.99999,-158.448,591.807,3.99999,-172.715,593.579,3.99999,-187.085,594.645,3.99999,-201.525,595,3.99999,-215.75,563.768,4,-106.744,568.811,3.99999,-119.818,573.206,3.99999,-133.124,576.944,3.99999,-146.629,580.014,3.99999,-160.302,582.41,3.99999,-174.109,584.125,3.99999,-188.016,585.156,3.99999,-201.991,585.5,3.99999,-215.75,546.214,3.99999,-114.015,550.922,3.99999,-126.219,555.025,3.99999,-138.639,558.513,3.99999,-151.246,561.379,3.99999,-164.008,563.616,3.99999,-176.896,565.217,3.99999,-189.879,566.179,3.99999,-202.924,566.5,3.99999,-215.75,538.823,3.99999,-117.076,543.389,3.99999,-128.914,547.369,3.99999,-140.961,550.753,3.99999,-153.19,553.533,3.99999,-165.569,555.702,3.99999,-178.07,557.255,3.99999,-190.663,558.189,3.99999,-203.316,558.5,3.99999,-215.75,537.437,3.99999,-117.65,541.977,3.99999,-129.419,545.934,3.99999,-141.397,549.298,3.99999,-153.554,552.062,3.99999,-165.862,554.218,3.99999,-178.29,555.763,3.99999,-190.81,556.69,3.99999,-203.39,557,3.99999,-215.75,582,3.99999,-215.75,570,3.99999,-215.75,583.5,3.99999,-224.75,568.5,3.99999,-224.75,300.25,1,77.5,314.401,1,77.1465,328.768,1,76.0868,343.065,1,74.3233,357.259,1,71.8605,371.314,1,68.7042,385.198,1,64.862,398.877,1,60.3432,412.318,1,55.1587,425.487,1,49.3209,438.355,1,42.8439,450.889,1,35.7433,463.06,1,28.0363,300.25,1,69.5,314.008,1,69.1561,327.984,1,68.1253,341.891,1,66.4099,355.698,1,64.0142,369.371,1,60.944,382.876,1,57.2065,396.182,1,52.8109,409.256,1,47.7676,422.067,1,42.089,434.584,1,35.7885,446.776,1,28.8815,458.615,1,21.3845,300.25,1,50.5,313.076,1,50.179,326.121,1,49.2168,339.103,1,47.6156,351.991,1,45.3793,364.754,1,42.5134,377.361,1,39.0246,389.781,1,34.9216,401.985,1,30.2139,413.943,1,24.9132,425.627,1,19.032,437.008,1,12.5847,448.06,1,5.58662,300.25,1,42.5,325.337,1,41.2553,337.93,1,39.7022,350.431,1,37.533,362.81,1,34.7531,375.038,1,31.3691,387.086,1,27.3892,432.896,1,5.72282,443.615,1,-1.06514,312.684,1,42.1887,398.924,1,22.8229,410.523,1,17.6813,421.856,1,11.9767,300.25,4,77.5,314.401,4,77.1465,328.768,4,76.0868,343.065,4,74.3233,357.259,4,71.8605,371.314,4,68.7042,385.198,4,64.862,398.877,4,60.3432,412.318,4,55.1587,425.487,4,49.3209,438.355,4,42.8439,450.889,4,35.7433,463.06,4,28.0363,300.25,4,79,314.475,4,78.6447,328.915,4,77.5795,343.285,4,75.8071,357.551,4,73.3317,371.679,4,70.1593,385.634,4,66.2975,399.382,4,61.7556,412.892,4,56.5445,426.129,4,50.6769,439.062,4,44.1668,451.66,4,37.0299,463.893,4,29.2835,300.25,4,69.5,314.008,4,69.1561,327.984,4,68.1253,341.891,4,66.4099,355.698,4,64.0142,369.371,4,60.944,382.876,4,57.2065,396.182,4,52.8109,409.256,4,47.7676,422.067,4,42.089,434.584,4,35.7885,446.776,4,28.8815,458.615,4,21.3845,300.25,4,50.5,313.076,4,50.179,326.121,4,49.2168,339.103,4,47.6156,351.991,4,45.3793,364.754,4,42.5134,377.361,4,39.0246,389.781,4,34.9216,401.985,4,30.2139,413.943,4,24.9132,425.627,4,19.032,437.008,4,12.5847,448.06,4,5.58662,300.25,4,42.5,312.684,4,42.1887,325.337,4,41.2553,337.93,4,39.7022,350.431,4,37.533,362.81,4,34.7531,375.038,4,31.3691,387.086,4,27.3892,398.924,4,22.8229,410.523,4,17.6813,421.856,4,11.9767,432.896,4,5.72282,443.615,4,-1.06514,300.25,4,41,312.61,4,40.6905,325.19,4,39.7625,337.709,4,38.2184,350.138,4,36.0618,362.446,4,33.2981,374.603,4,29.9337,386.581,4,25.9769,398.35,4,21.437,409.882,4,16.3253,421.149,4,10.6538,432.124,4,4.43623,442.782,4,-2.31235,300.25,4,53.5,300.25,4,66.5,309.25,4,68,309.25,4,52,453.988,-3.65898e-7,-8.37077,473.598,-0.00000106936,-24.464,482.787,-0.00000145178,-33.2129,521.723,-0.00000363261,-83.1045,527.977,-0.00000411517,-94.1441,463.991,-7.07108e-7,-16.1767,491.536,-0.00000185345,-42.402,499.823,-0.0000022734,-52.0093,507.629,-0.00000271062,-62.0118,514.935,-0.00000316406,-72.3851,533.681,-0.00000461055,-105.477,474.838,-0.999999,19.7415,486.194,-1,10.8787,497.102,-1,1.46924,507.536,-1,-8.46411,517.469,-1,-18.8974,526.879,-1,-29.8056,535.741,-1,-41.1623,544.036,-1,-52.9402,551.743,-1,-65.1109,558.844,-1,-77.6452,565.321,-1,-90.5127,470.072,-0.999999,13.3159,481.119,-1,4.69458,491.73,-1,-4.45836,501.879,-1,-14.121,511.542,-1,-24.2699,520.694,-1,-34.8807,529.316,-1,-45.9279,537.385,-1,-57.3848,544.882,-1,-69.2238,551.789,-1,-81.4164,558.089,-1,-93.9332,458.754,-1,-1.9451,469.066,-1,-9.99263,478.97,-1,-18.5364,488.444,-1,-27.556,497.463,-1,-37.0295,506.007,-1,-46.9342,514.055,-1,-57.2462,521.587,-1,-67.9406,528.585,-1,-78.9917,535.032,-1,-90.3729,540.913,-1,-102.057,453.988,-1,-8.37077,463.991,-1,-16.1767,473.598,-1,-24.464,482.787,-1,-33.2129,491.536,-1,-42.402,499.823,-1,-52.0093,514.935,-1,-72.3851,527.977,-1,-94.1441,507.629,-1,-62.0118,521.723,-1,-83.1045,533.681,-1,-105.477,474.838,-4,19.7415,486.194,-4,10.8787,497.102,-4,1.46924,507.536,-4,-8.46411,517.469,-4,-18.8974,526.879,-4,-29.8056,535.741,-4,-41.1623,544.036,-4,-52.9402,551.743,-4,-65.1109,558.844,-4,-77.6452,565.321,-4,-90.5127,475.731,-4,20.9463,487.146,-4,12.0382,498.11,-4,2.58069,508.596,-4,-7.40343,518.581,-4,-17.8901,528.038,-4,-28.854,536.946,-4,-40.2687,545.284,-4,-52.1068,553.03,-4,-64.3398,560.167,-4,-76.9381,566.677,-4,-89.8714,470.072,-4,13.3159,481.119,-4,4.69458,491.73,-4,-4.45836,501.879,-4,-14.121,511.542,-4,-24.2699,520.694,-4,-34.8807,529.316,-4,-45.9279,537.385,-4,-57.3848,544.882,-4,-69.2238,551.789,-4,-81.4164,558.089,-4,-93.9332,458.754,-4,-1.9451,469.066,-4,-9.99263,478.97,-4,-18.5364,488.444,-4,-27.556,497.463,-4,-37.0295,506.007,-4,-46.9342,514.055,-4,-57.2462,521.587,-4,-67.9406,528.585,-4,-78.9917,535.032,-4,-90.3729,540.913,-4,-102.057,453.988,-4,-8.37077,463.991,-4,-16.1767,473.598,-4,-24.464,482.787,-4,-33.2129,491.536,-4,-42.402,499.823,-4,-52.0093,507.629,-4,-62.0118,514.935,-4,-72.3851,521.723,-4,-83.1045,527.977,-4,-94.1441,533.681,-4,-105.477,453.095,-4,-9.57558,463.039,-4,-17.3363,472.591,-4,-25.5755,481.726,-4,-34.2735,490.424,-4,-43.4093,498.664,-4,-52.9609,506.424,-4,-62.9053,513.688,-4,-73.2185,520.436,-4,-83.8757,526.654,-4,-94.8512,532.325,-4,-106.119,543.389,-0.00000563501,-128.914,547.369,-0.00000616162,-140.961,553.533,-0.00000723726,-165.569,555.702,-0.0000077837,-178.07,557.255,-0.00000833413,-190.663,558.189,-0.00000888723,-203.316,558.5,-0.00000943074,-215.75,538.823,-0.00000511757,-117.076,550.753,-0.00000669613,-153.19,571.159,-1,-103.682,576.343,-1.00001,-117.123,580.862,-1.00001,-130.801,584.704,-1.00001,-144.685,587.86,-1.00001,-158.741,590.323,-1.00001,-172.935,592.087,-1.00001,-187.232,593.146,-1.00001,-201.599,593.5,-1.00001,-215.75,563.768,-1,-106.744,568.811,-1.00001,-119.818,573.206,-1.00001,-133.124,576.944,-1.00001,-146.629,580.014,-1.00001,-160.302,582.41,-1.00001,-174.109,584.125,-1.00001,-188.016,585.156,-1.00001,-201.991,585.5,-1.00001,-215.75,546.214,-1.00001,-114.015,550.922,-1.00001,-126.219,555.025,-1.00001,-138.639,558.513,-1.00001,-151.246,561.379,-1.00001,-164.008,563.616,-1.00001,-176.896,565.217,-1.00001,-189.879,566.179,-1.00001,-202.924,566.5,-1.00001,-215.75,538.823,-1.00001,-117.076,543.389,-1.00001,-128.914,547.369,-1.00001,-140.961,550.753,-1.00001,-153.19,558.189,-1.00001,-203.316,558.5,-1.00001,-215.75,553.533,-1.00001,-165.569,555.702,-1.00001,-178.07,557.255,-1.00001,-190.663,571.159,-4,-103.682,576.343,-4.00001,-117.123,580.862,-4.00001,-130.801,584.704,-4.00001,-144.685,587.86,-4.00001,-158.741,590.323,-4.00001,-172.935,592.087,-4.00001,-187.232,593.146,-4.00001,-201.599,593.5,-4.00001,-215.75,572.544,-4,-103.108,577.755,-4.00001,-116.617,582.297,-4.00001,-130.366,586.159,-4.00001,-144.321,589.332,-4.00001,-158.448,591.807,-4.00001,-172.715,593.579,-4.00001,-187.085,594.645,-4.00001,-201.525,595,-4.00001,-215.75,563.768,-4,-106.744,568.811,-4.00001,-119.818,573.206,-4.00001,-133.124,576.944,-4.00001,-146.629,580.014,-4.00001,-160.302,582.41,-4.00001,-174.109,584.125,-4.00001,-188.016,585.156,-4.00001,-201.991,585.5,-4.00001,-215.75,546.214,-4,-114.015,550.922,-4.00001,-126.219,555.025,-4.00001,-138.639,558.513,-4.00001,-151.246,561.379,-4.00001,-164.008,563.616,-4.00001,-176.896,565.217,-4.00001,-189.879,566.179,-4.00001,-202.924,566.5,-4.00001,-215.75,538.823,-4.00001,-117.076,543.389,-4.00001,-128.914,547.369,-4.00001,-140.961,550.753,-4.00001,-153.19,553.533,-4.00001,-165.569,555.702,-4.00001,-178.07,557.255,-4.00001,-190.663,558.189,-4.00001,-203.316,558.5,-4.00001,-215.75,537.437,-4.00001,-117.65,541.977,-4.00001,-129.419,545.934,-4.00001,-141.397,549.298,-4.00001,-153.554,552.062,-4.00001,-165.862,554.218,-4.00001,-178.29,555.763,-4.00001,-190.81,556.69,-4.00001,-203.39,557,-4.00001,-215.75,582,-0.00000943074,-215.75,582,-4.00001,-215.75,570,-0.00000943074,-215.75,570,-4.00001,-215.75,583.5,-4.00001,-224.75,568.5,-4.00001,-224.75,337.93,0.00000173544,39.7022,421.856,5.23517e-7,11.9767,300.25,0.00000185773,42.5,312.684,0.00000184413,42.1887,325.337,0.00000180333,41.2553,350.431,0.00000164062,37.533,362.81,0.00000151911,34.7531,375.038,0.00000137119,31.3691,387.086,0.00000119722,27.3892,398.924,9.97619e-7,22.8229,410.523,7.72873e-7,17.6813,432.896,2.50153e-7,5.72282,443.615,-4.65589e-8,-1.06514,300.25,-0.999997,77.5,314.401,-0.999997,77.1465,328.768,-0.999997,76.0868,343.065,-0.999997,74.3233,357.259,-0.999997,71.8605,371.314,-0.999997,68.7042,385.198,-0.999997,64.862,398.877,-0.999997,60.3432,412.318,-0.999998,55.1587,425.487,-0.999998,49.3209,438.355,-0.999998,42.8439,450.889,-0.999998,35.7433,463.06,-0.999999,28.0363,300.25,-0.999997,69.5,314.008,-0.999997,69.1561,327.984,-0.999997,68.1253,341.891,-0.999997,66.4099,355.698,-0.999997,64.0142,369.371,-0.999997,60.944,382.876,-0.999997,57.2065,396.182,-0.999998,52.8109,409.256,-0.999998,47.7676,422.067,-0.999998,42.089,434.584,-0.999998,35.7885,446.776,-0.999999,28.8815,458.615,-0.999999,21.3845,300.25,-0.999998,50.5,313.076,-0.999998,50.179,326.121,-0.999998,49.2168,339.103,-0.999998,47.6156,351.991,-0.999998,45.3793,364.754,-0.999998,42.5134,377.361,-0.999998,39.0246,389.781,-0.999998,34.9216,401.985,-0.999999,30.2139,413.943,-0.999999,24.9132,425.627,-0.999999,19.032,437.008,-0.999999,12.5847,448.06,-1,5.58662,300.25,-0.999998,42.5,325.337,-0.999998,41.2553,337.93,-0.999998,39.7022,350.431,-0.999998,37.533,362.81,-0.999998,34.7531,375.038,-0.999999,31.3691,387.086,-0.999999,27.3892,432.896,-1,5.72282,443.615,-1,-1.06514,312.684,-0.999998,42.1887,398.924,-0.999999,22.8229,410.523,-0.999999,17.6813,421.856,-0.999999,11.9767,300.25,-4,77.5,314.401,-4,77.1465,328.768,-4,76.0868,343.065,-4,74.3233,357.259,-4,71.8605,371.314,-4,68.7042,385.198,-4,64.862,398.877,-4,60.3432,412.318,-4,55.1587,425.487,-4,49.3209,438.355,-4,42.8439,450.889,-4,35.7433,463.06,-4,28.0363,300.25,-4,79,314.475,-4,78.6447,328.915,-4,77.5795,343.285,-4,75.8071,357.551,-4,73.3317,371.679,-4,70.1593,385.634,-4,66.2975,399.382,-4,61.7556,412.892,-4,56.5445,426.129,-4,50.6769,439.062,-4,44.1668,451.66,-4,37.0299,463.893,-4,29.2835,300.25,-4,69.5,314.008,-4,69.1561,327.984,-4,68.1253,341.891,-4,66.4099,355.698,-4,64.0142,369.371,-4,60.944,382.876,-4,57.2065,396.182,-4,52.8109,409.256,-4,47.7676,422.067,-4,42.089,434.584,-4,35.7885,446.776,-4,28.8815,458.615,-4,21.3845,300.25,-4,50.5,313.076,-4,50.179,326.121,-4,49.2168,339.103,-4,47.6156,351.991,-4,45.3793,364.754,-4,42.5134,377.361,-4,39.0246,389.781,-4,34.9216,401.985,-4,30.2139,413.943,-4,24.9132,425.627,-4,19.032,437.008,-4,12.5847,448.06,-4,5.58662,300.25,-4,42.5,312.684,-4,42.1887,325.337,-4,41.2553,337.93,-4,39.7022,350.431,-4,37.533,362.81,-4,34.7531,375.038,-4,31.3691,387.086,-4,27.3892,398.924,-4,22.8229,410.523,-4,17.6813,421.856,-4,11.9767,432.896,-4,5.72282,443.615,-4,-1.06514,300.25,-4,41,312.61,-4,40.6905,325.19,-4,39.7625,337.709,-4,38.2184,350.138,-4,36.0618,362.446,-4,33.2981,374.603,-4,29.9337,386.581,-4,25.9769,398.35,-4,21.437,409.882,-4,16.3253,421.149,-4,10.6538,432.124,-4,4.43623,442.782,-4,-2.31235,300.25,-4,53.5,300.25,-4,66.5,309.25,-4,68,309.25,-4,52],"faces":[33,64,413,414,65,0,0,0,0,33,199,557,556,198,1,1,1,1,33,10,9,53,54,2,2,2,2,33,9,8,52,53,3,3,3,3,33,8,7,51,52,4,4,4,4,33,7,6,50,51,5,5,5,5,33,6,5,49,50,6,6,6,6,33,5,4,48,49,7,7,7,7,33,4,3,47,48,8,8,8,8,33,32,31,86,87,9,9,9,9,33,31,30,85,86,10,10,10,10,33,30,29,84,85,11,11,11,11,33,29,28,83,84,12,12,12,12,33,28,27,82,83,13,13,13,13,33,27,26,81,82,14,14,14,14,33,26,25,80,81,15,15,15,15,33,25,24,79,80,16,16,16,16,33,24,23,78,79,17,17,17,17,33,23,22,77,78,18,18,18,18,33,269,642,643,270,19,19,19,19,33,109,458,457,108,20,20,20,20,33,108,457,456,107,21,21,21,21,32,282,335,708,22,22,22,32,708,655,590,23,23,23,32,577,629,642,22,22,22,32,577,642,269,23,23,23,32,269,256,204,22,22,22,32,217,282,708,24,24,24,32,577,269,204,25,25,25,32,217,708,590,26,26,26,32,590,577,204,27,27,27,32,590,204,217,28,28,28,33,562,563,203,202,29,29,29,29,33,449,448,99,100,30,30,30,30,33,453,452,103,104,31,31,31,31,33,102,451,450,101,32,32,32,32,33,1,0,44,45,33,33,33,33,33,2,1,45,46,34,34,34,34,33,3,2,46,47,35,35,35,35,32,65,155,156,36,36,36,32,156,157,158,37,37,37,32,158,159,160,38,38,38,32,160,161,162,39,39,39,32,162,163,154,40,40,40,32,162,154,153,41,41,41,32,158,160,162,42,42,42,32,65,156,158,43,43,43,32,63,64,65,44,44,44,32,61,62,63,45,45,45,32,59,60,61,46,46,46,32,57,58,59,47,47,47,32,55,56,57,48,48,48,32,280,281,55,49,49,49,32,278,279,280,50,50,50,32,276,277,278,51,51,51,32,274,275,276,52,52,52,32,272,273,274,53,53,53,32,270,271,272,54,54,54,32,256,269,270,54,54,54,32,257,256,270,54,54,54,32,270,272,274,55,55,55,32,274,276,278,56,56,56,32,278,280,55,57,57,57,32,55,57,59,58,58,58,32,59,61,63,59,59,59,32,162,153,152,60,60,60,32,162,152,151,61,61,61,32,258,257,270,54,54,54,32,259,258,270,54,54,54,32,158,162,151,62,62,62,32,158,151,150,63,63,63,32,259,270,274,64,64,64,32,260,259,274,65,65,65,32,158,150,149,66,66,66,32,158,149,148,67,67,67,32,261,260,274,54,54,54,32,262,261,274,54,54,54,32,158,148,147,68,68,68,32,65,158,147,69,69,69,32,263,262,274,70,70,70,32,263,274,278,71,71,71,32,65,147,146,72,72,72,32,65,146,54,73,73,73,32,264,263,278,74,74,74,32,265,264,278,75,75,75,32,63,65,54,76,76,76,32,63,54,53,77,77,77,32,266,265,278,78,78,78,32,267,266,278,79,79,79,32,63,53,52,80,80,80,32,63,52,51,81,81,81,32,267,278,55,82,82,82,32,268,267,55,83,83,83,32,63,51,50,84,84,84,32,59,63,50,85,85,85,32,44,268,55,54,54,54,32,45,44,55,86,86,86,32,59,50,49,87,87,87,32,59,49,48,88,88,88,32,46,45,55,89,89,89,32,59,48,47,90,90,90,32,46,55,59,91,91,91,32,47,46,59,92,92,92,33,11,12,67,66,93,93,93,93,33,12,13,68,67,94,94,94,94,33,13,14,69,68,95,95,95,95,33,14,15,70,69,96,96,96,96,33,15,16,71,70,97,97,97,97,33,16,17,72,71,98,98,98,98,33,17,18,73,72,99,99,99,99,33,18,19,74,73,100,100,100,100,33,19,20,75,74,101,101,101,101,33,20,21,76,75,102,102,102,102,33,33,34,89,88,103,103,103,103,33,34,35,90,89,104,104,104,104,33,35,36,91,90,105,105,105,105,33,36,37,92,91,106,106,106,106,33,37,38,93,92,107,107,107,107,33,38,41,94,93,108,108,108,108,33,41,39,95,94,109,109,109,109,33,39,42,96,95,110,110,110,110,33,42,40,97,96,111,111,111,111,33,40,43,98,97,112,112,112,112,33,159,517,518,160,113,113,113,113,32,560,561,539,114,114,114,32,560,539,494,115,115,115,32,181,201,560,116,116,116,32,136,181,560,115,115,115,32,560,494,500,117,117,117,32,500,548,557,118,118,118,32,557,199,190,119,119,119,32,142,136,560,120,120,120,32,557,190,142,121,121,121,32,142,560,500,118,118,118,32,500,557,142,29,29,29,33,118,117,153,154,122,122,122,122,33,117,116,152,153,123,123,123,123,33,116,115,151,152,124,124,124,124,33,115,114,150,151,125,125,125,125,33,114,113,149,150,126,126,126,126,33,113,112,148,149,127,127,127,127,33,112,111,147,148,128,128,128,128,33,111,110,146,147,129,129,129,129,33,194,195,553,552,130,130,130,130,32,484,485,476,131,131,131,32,476,475,474,132,132,132,32,474,473,472,133,133,133,32,472,471,470,134,134,134,32,470,469,468,135,135,135,32,468,359,358,136,136,136,32,358,357,356,137,137,137,32,356,355,354,138,138,138,32,354,353,352,139,139,139,32,352,351,350,140,140,140,32,350,349,589,141,141,141,32,589,588,587,142,142,142,32,587,586,585,143,143,143,32,585,584,583,144,144,144,32,583,582,581,145,145,145,32,581,580,579,146,146,146,32,579,578,577,147,147,147,32,577,590,591,148,148,148,32,577,591,592,149,149,149,32,581,579,577,150,150,150,32,585,583,581,151,151,151,32,589,587,585,152,152,152,32,352,350,589,153,153,153,32,356,354,352,154,154,154,32,468,358,356,155,155,155,32,472,470,468,156,156,156,32,476,474,472,157,157,157,32,483,484,476,158,158,158,32,482,483,476,159,159,159,32,476,472,468,160,160,160,32,468,356,352,161,161,161,32,352,589,585,162,162,162,32,585,581,577,163,163,163,32,577,592,593,164,164,164,32,577,593,594,165,165,165,32,482,476,468,166,166,166,32,481,482,468,167,167,167,32,585,577,594,168,168,168,32,585,594,595,169,169,169,32,480,481,468,170,170,170,32,479,480,468,171,171,171,32,585,595,596,172,172,172,32,585,596,597,173,173,173,32,478,479,468,174,174,174,32,477,478,468,175,175,175,32,585,597,598,176,176,176,32,585,598,599,177,177,177,32,370,477,468,178,178,178,32,369,370,468,179,179,179,32,585,599,600,180,180,180,32,585,600,601,181,181,181,32,368,369,468,182,182,182,32,367,368,468,183,183,183,32,352,585,601,184,184,184,32,352,601,602,185,185,185,32,367,468,352,186,186,186,32,366,367,352,187,187,187,32,352,602,360,188,188,188,32,352,360,361,189,189,189,32,365,366,352,190,190,190,32,364,365,352,191,191,191,32,352,361,362,192,192,192,32,363,364,352,193,193,193,32,362,363,352,194,194,194,32,290,291,292,195,195,195,32,292,293,294,196,196,196,32,294,66,67,197,197,197,32,67,68,69,198,198,198,32,69,70,71,199,199,199,32,71,72,73,200,200,200,32,73,74,75,201,201,201,32,75,76,164,202,202,202,32,164,165,166,203,203,203,32,166,167,168,204,204,204,32,168,169,170,205,205,205,32,170,171,172,206,206,206,32,200,202,203,207,207,207,32,170,172,200,208,208,208,32,166,168,170,209,209,209,32,75,164,166,210,210,210,32,71,73,75,211,211,211,32,67,69,71,212,212,212,32,292,294,67,213,213,213,32,289,290,292,214,214,214,32,287,288,289,54,54,54,32,285,286,287,215,215,215,32,283,284,285,54,54,54,32,335,282,283,54,54,54,32,336,335,283,216,216,216,32,283,285,287,217,217,217,32,287,289,292,218,218,218,32,292,67,71,219,219,219,32,71,75,166,220,220,220,32,166,170,200,221,221,221,32,200,203,201,222,222,222,32,201,181,180,223,223,223,32,201,180,179,224,224,224,32,166,200,201,225,225,225,32,287,292,71,226,226,226,32,336,283,287,227,227,227,32,295,334,337,228,228,228,32,337,336,287,229,229,229,32,166,201,179,230,230,230,32,166,179,178,231,231,231,32,295,337,287,232,232,232,32,296,295,287,233,233,233,32,166,178,177,234,234,234,32,166,177,176,235,235,235,32,297,296,287,236,236,236,32,298,297,287,237,237,237,32,166,176,175,238,238,238,32,166,175,174,239,239,239,32,299,298,287,240,240,240,32,300,299,287,241,241,241,32,71,166,174,242,242,242,32,71,174,173,243,243,243,32,301,300,287,244,244,244,32,302,301,287,245,245,245,32,71,173,87,246,246,246,32,71,87,86,247,247,247,32,303,302,287,248,248,248,32,304,303,287,249,249,249,32,71,86,85,250,250,250,32,71,85,84,251,251,251,32,305,304,287,252,252,252,32,306,305,287,253,253,253,32,71,84,83,254,254,254,32,71,83,82,255,255,255,32,306,287,71,256,256,256,32,307,306,71,257,257,257,32,71,82,81,258,258,258,32,71,81,80,259,259,259,32,77,307,71,260,260,260,32,78,77,71,261,261,261,32,71,80,79,262,262,262,32,71,79,78,263,263,263,33,136,135,180,181,264,264,264,264,33,135,134,179,180,265,265,265,265,33,134,133,178,179,266,266,266,266,33,133,132,177,178,267,267,267,267,33,132,131,176,177,268,268,268,268,33,131,130,175,176,269,269,269,269,33,130,129,174,175,270,270,270,270,33,129,128,173,174,271,271,271,271,33,128,32,87,173,272,272,272,272,33,194,552,551,193,273,273,273,273,33,322,323,696,695,274,274,274,274,33,192,550,549,191,275,275,275,275,33,332,333,706,705,276,276,276,276,33,110,10,54,146,277,277,277,277,33,21,119,164,76,278,278,278,278,33,119,120,165,164,279,279,279,279,33,120,121,166,165,280,280,280,280,33,121,122,167,166,281,281,281,281,33,122,123,168,167,282,282,282,282,33,123,124,169,168,283,283,283,283,33,124,125,170,169,284,284,284,284,33,125,126,171,170,285,285,285,285,33,126,127,172,171,286,286,286,286,32,556,557,548,287,287,287,32,548,547,546,288,288,288,32,546,545,544,289,289,289,32,544,543,542,290,290,290,32,542,541,540,291,291,291,32,540,447,446,292,292,292,32,446,445,444,293,293,293,32,444,443,442,294,294,294,32,442,441,440,295,295,295,32,440,439,438,296,296,296,32,438,437,693,297,297,297,32,693,692,691,298,298,298,32,691,690,689,299,299,299,32,689,688,687,300,300,300,32,687,686,685,301,301,301,32,685,684,683,302,302,302,32,683,682,681,303,303,303,32,681,694,695,303,303,303,32,681,695,696,303,303,303,32,685,683,681,304,304,304,32,689,687,685,305,305,305,32,693,691,689,306,306,306,32,440,438,693,307,307,307,32,444,442,440,308,308,308,32,540,446,444,309,309,309,32,544,542,540,310,310,310,32,548,546,544,311,311,311,32,555,556,548,312,312,312,32,555,548,544,313,313,313,32,685,681,696,314,314,314,32,685,696,697,315,315,315,32,554,555,544,316,316,316,32,553,554,544,317,317,317,32,685,697,698,318,318,318,32,685,698,699,303,303,303,32,552,553,544,319,319,319,32,551,552,544,320,320,320,32,685,699,700,321,321,321,32,689,685,700,322,322,322,32,551,544,540,323,323,323,32,550,551,540,324,324,324,32,689,700,701,325,325,325,32,689,701,702,303,303,303,32,549,550,540,326,326,326,32,458,549,540,327,327,327,32,689,702,703,328,328,328,32,689,703,704,329,329,329,32,457,458,540,330,330,330,32,457,540,444,331,331,331,32,693,689,704,332,332,332,32,693,704,705,333,333,333,32,456,457,444,334,334,334,32,455,456,444,335,335,335,32,693,705,706,303,303,303,32,693,706,448,336,336,336,32,454,455,444,337,337,337,32,453,454,444,338,338,338,32,693,448,449,339,339,339,32,440,693,449,340,340,340,32,453,444,440,341,341,341,32,452,453,440,342,342,342,32,440,449,450,343,343,343,32,451,452,440,344,344,344,32,450,451,440,345,345,345,33,43,137,182,98,346,346,346,346,33,137,138,183,182,347,347,347,347,33,138,139,184,183,348,348,348,348,33,139,140,185,184,349,349,349,349,33,140,143,186,185,350,350,350,350,33,143,144,187,186,351,351,351,351,33,144,145,188,187,352,352,352,352,33,145,141,189,188,353,353,353,353,33,141,142,190,189,354,354,354,354,33,107,456,455,106,355,355,355,355,33,271,644,645,272,356,356,356,356,33,327,700,699,326,357,357,357,357,32,511,512,521,358,358,358,32,521,520,519,359,359,359,32,519,518,517,360,360,360,32,517,516,515,361,361,361,32,515,514,513,362,362,362,32,513,414,413,363,363,363,32,413,412,411,364,364,364,32,411,410,409,365,365,365,32,409,408,407,366,366,366,32,407,406,405,367,367,367,32,405,404,654,368,368,368,32,654,653,652,369,369,369,32,652,651,650,370,370,370,32,650,649,648,371,371,371,32,648,647,646,372,372,372,32,646,645,644,373,373,373,32,644,643,642,303,303,303,32,642,629,630,303,303,303,32,642,630,631,374,374,374,32,646,644,642,375,375,375,32,650,648,646,376,376,376,32,654,652,650,377,377,377,32,407,405,654,378,378,378,32,411,409,407,379,379,379,32,513,413,411,380,380,380,32,517,515,513,381,381,381,32,521,519,517,382,382,382,32,510,511,521,383,383,383,32,510,521,517,384,384,384,32,646,642,631,385,385,385,32,646,631,632,386,386,386,32,509,510,517,387,387,387,32,508,509,517,388,388,388,32,646,632,633,303,303,303,32,646,633,634,389,389,389,32,507,508,517,390,390,390,32,506,507,517,391,391,391,32,646,634,635,392,392,392,32,650,646,635,393,393,393,32,506,517,513,394,394,394,32,505,506,513,395,395,395,32,650,635,636,396,396,396,32,650,636,637,397,397,397,32,504,505,513,398,398,398,32,403,504,513,399,399,399,32,650,637,638,400,400,400,32,650,638,639,401,401,401,32,402,403,513,402,402,402,32,402,513,411,403,403,403,32,654,650,639,404,404,404,32,654,639,640,405,405,405,32,401,402,411,406,406,406,32,400,401,411,407,407,407,32,654,640,641,408,408,408,32,654,641,393,409,409,409,32,399,400,411,410,410,410,32,398,399,411,411,411,411,32,654,393,394,412,412,412,32,407,654,394,413,413,413,32,398,411,407,414,414,414,32,397,398,407,415,415,415,32,407,394,395,416,416,416,32,396,397,407,417,417,417,32,407,395,396,418,418,418,33,323,324,697,696,419,419,419,419,33,62,411,412,63,420,420,420,420,33,274,273,646,647,421,421,421,421,33,336,709,708,335,422,422,422,422,33,0,216,268,44,423,423,423,423,33,216,215,267,268,424,424,424,424,33,215,214,266,267,425,425,425,425,33,214,213,265,266,426,426,426,426,33,213,212,264,265,427,427,427,427,33,277,650,651,278,428,428,428,428,32,204,205,206,429,429,429,32,206,207,208,430,430,430,32,208,209,210,431,431,431,32,210,211,212,432,432,432,32,212,213,214,433,433,433,32,214,215,216,434,434,434,32,216,0,1,435,435,435,32,1,2,3,436,436,436,32,3,4,5,437,437,437,32,5,6,7,438,438,438,32,7,8,9,439,439,439,32,9,10,110,440,440,440,32,110,111,112,441,441,441,32,112,113,114,442,442,442,32,114,115,116,443,443,443,32,116,117,118,444,444,444,32,118,127,126,445,445,445,32,118,126,125,446,446,446,32,114,116,118,447,447,447,32,110,112,114,448,448,448,32,7,9,110,449,449,449,32,3,5,7,450,450,450,32,216,1,3,451,451,451,32,212,214,216,452,452,452,32,208,210,212,453,453,453,32,204,206,208,454,454,454,32,218,217,204,455,455,455,32,219,218,204,456,456,456,32,204,208,212,457,457,457,32,212,216,3,458,458,458,32,3,7,110,459,459,459,32,110,114,118,460,460,460,32,118,125,124,461,461,461,32,118,124,123,462,462,462,32,220,219,204,463,463,463,32,221,220,204,464,464,464,32,110,118,123,465,465,465,32,110,123,122,466,466,466,32,221,204,212,467,467,467,32,222,221,212,468,468,468,32,110,122,121,469,469,469,32,110,121,120,470,470,470,32,223,222,212,471,471,471,32,224,223,212,472,472,472,32,110,120,119,473,473,473,32,110,119,21,474,474,474,32,225,224,212,475,475,475,32,226,225,212,476,476,476,32,110,21,20,477,477,477,32,110,20,19,478,478,478,32,227,226,212,479,479,479,32,228,227,212,480,480,480,32,3,110,19,481,481,481,32,3,19,18,482,482,482,32,228,212,3,483,483,483,32,229,228,3,484,484,484,32,3,18,17,485,485,485,32,3,17,16,486,486,486,32,11,229,3,487,487,487,32,12,11,3,488,488,488,32,3,16,15,489,489,489,32,3,15,14,490,490,490,32,13,12,3,491,491,491,32,3,14,13,492,492,492,33,22,242,307,77,493,493,493,493,33,242,241,306,307,494,494,494,494,33,241,240,305,306,495,495,495,495,33,240,239,304,305,496,496,496,496,33,239,238,303,304,497,497,497,497,33,238,237,302,303,498,498,498,498,33,237,236,301,302,499,499,499,499,33,236,235,300,301,500,500,500,500,33,235,234,299,300,501,501,501,501,33,234,233,298,299,502,502,502,502,33,233,232,297,298,503,503,503,503,33,232,231,296,297,504,504,504,504,33,231,230,295,296,505,505,505,505,32,538,539,561,506,506,506,32,561,563,562,507,507,507,32,559,530,529,508,508,508,32,561,562,559,509,509,509,32,537,538,561,510,510,510,32,536,537,561,511,511,511,32,561,559,529,512,512,512,32,529,528,527,513,513,513,32,527,526,525,514,514,514,32,525,524,523,515,515,515,32,523,522,425,516,516,516,32,425,424,423,517,517,517,32,423,422,421,518,518,518,32,421,420,419,519,519,519,32,419,418,417,520,520,520,32,417,416,415,521,521,521,32,415,667,666,522,522,522,32,666,665,664,523,523,523,32,664,663,662,524,524,524,32,662,661,660,525,525,525,32,660,659,658,526,526,526,32,658,657,656,303,303,303,32,656,655,708,303,303,303,32,656,708,709,527,527,527,32,660,658,656,528,528,528,32,664,662,660,529,529,529,32,415,666,664,530,530,530,32,419,417,415,531,531,531,32,423,421,419,532,532,532,32,523,425,423,533,533,533,32,527,525,523,534,534,534,32,561,529,527,535,535,535,32,536,561,527,536,536,536,32,527,523,423,537,537,537,32,423,419,415,538,538,538,32,415,664,660,539,539,539,32,660,656,709,540,540,540,32,710,707,668,303,303,303,32,660,709,710,541,541,541,32,535,536,527,542,542,542,32,534,535,527,543,543,543,32,660,710,668,544,544,544,32,660,668,669,545,545,545,32,534,527,423,546,546,546,32,533,534,423,547,547,547,32,660,669,670,548,548,548,32,660,670,671,549,549,549,32,532,533,423,550,550,550,32,531,532,423,551,551,551,32,660,671,672,552,552,552,32,660,672,673,553,553,553,32,436,531,423,554,554,554,32,435,436,423,555,555,555,32,660,673,674,556,556,556,32,660,674,675,557,557,557,32,434,435,423,558,558,558,32,433,434,423,559,559,559,32,415,660,675,560,560,560,32,415,675,676,561,561,561,32,433,423,415,562,562,562,32,432,433,415,563,563,563,32,415,676,677,564,564,564,32,415,677,678,565,565,565,32,431,432,415,566,566,566,32,430,431,415,567,567,567,32,415,678,679,568,568,568,32,415,679,680,569,569,569,32,429,430,415,570,570,570,32,428,429,415,571,571,571,32,415,680,426,572,572,572,32,427,428,415,573,573,573,32,415,426,427,574,574,574,33,105,106,455,454,575,575,575,575,33,193,551,550,192,576,576,576,576,33,276,649,650,277,577,577,577,577,33,280,653,654,281,578,578,578,578,32,201,203,563,579,579,579,32,563,561,560,580,580,580,32,563,560,201,581,581,581,33,326,699,698,325,582,582,582,582,32,252,243,230,583,583,583,32,230,231,232,584,584,584,32,232,233,234,585,585,585,32,234,235,236,586,586,586,32,236,237,238,587,587,587,32,238,239,240,588,588,588,32,240,241,242,589,589,589,32,242,22,23,590,590,590,32,23,24,25,591,591,591,32,25,26,27,592,592,592,32,27,28,29,593,593,593,32,29,30,31,594,594,594,32,31,32,128,595,595,595,32,128,129,130,596,596,596,32,130,131,132,597,597,597,32,132,133,134,598,598,598,32,134,135,136,599,599,599,32,136,142,141,600,600,600,32,136,141,145,601,601,601,32,132,134,136,602,602,602,32,128,130,132,603,603,603,32,29,31,128,604,604,604,32,25,27,29,605,605,605,32,242,23,25,606,606,606,32,238,240,242,607,607,607,32,234,236,238,608,608,608,32,230,232,234,609,609,609,32,244,252,230,610,610,610,32,245,244,230,611,611,611,32,230,234,238,612,612,612,32,238,242,25,613,613,613,32,25,29,128,614,614,614,32,128,132,136,615,615,615,32,136,145,144,616,616,616,32,136,144,143,617,617,617,32,245,230,238,618,618,618,32,246,245,238,619,619,619,32,128,136,143,620,620,620,32,128,143,140,621,621,621,32,247,246,238,622,622,622,32,248,247,238,623,623,623,32,128,140,139,624,624,624,32,128,139,138,625,625,625,32,249,248,238,626,626,626,32,253,249,238,627,627,627,32,128,138,137,628,628,628,32,128,137,43,629,629,629,32,254,253,238,630,630,630,32,255,254,238,631,631,631,32,128,43,40,632,632,632,32,128,40,42,633,633,633,32,250,255,238,634,634,634,32,251,250,238,635,635,635,32,25,128,42,636,636,636,32,25,42,39,637,637,637,32,251,238,25,638,638,638,32,33,251,25,639,639,639,32,25,39,41,640,640,640,32,25,41,38,641,641,641,32,34,33,25,642,642,642,32,35,34,25,643,643,643,32,25,38,37,644,644,644,32,36,35,25,645,645,645,32,37,36,25,646,646,646,33,205,204,256,257,647,647,647,647,33,206,205,257,258,648,648,648,648,33,207,206,258,259,649,649,649,649,33,208,207,259,260,650,650,650,650,33,209,208,260,261,651,651,651,651,33,210,209,261,262,652,652,652,652,33,211,210,262,263,653,653,653,653,33,212,211,263,264,654,654,654,654,33,217,218,283,282,655,655,655,655,33,218,219,284,283,656,656,656,656,33,219,220,285,284,657,657,657,657,33,220,221,286,285,658,658,658,658,33,221,222,287,286,659,659,659,659,33,222,223,288,287,660,660,660,660,33,223,224,289,288,661,661,661,661,33,224,225,290,289,662,662,662,662,33,225,226,291,290,663,663,663,663,33,226,227,292,291,664,664,664,664,33,227,228,293,292,665,665,665,665,33,228,229,294,293,666,666,666,666,33,229,11,66,294,667,667,667,667,33,337,710,709,336,668,668,668,668,33,243,252,309,308,669,669,669,669,33,252,244,310,309,670,670,670,670,33,244,245,311,310,671,671,671,671,33,245,246,312,311,672,672,672,672,33,246,247,313,312,673,673,673,673,33,247,248,314,313,674,674,674,674,33,248,249,315,314,675,675,675,675,33,249,253,316,315,676,676,676,676,33,253,254,317,316,677,677,677,677,33,254,255,318,317,678,678,678,678,33,255,250,319,318,679,679,679,679,33,250,251,320,319,680,680,680,680,33,251,33,88,320,681,681,681,681,33,322,695,694,321,682,682,682,682,33,57,56,405,406,683,683,683,683,33,61,410,411,62,684,684,684,684,33,63,412,413,64,685,685,685,685,33,155,65,414,513,686,686,686,686,33,273,272,645,646,687,687,687,687,33,58,407,408,59,688,688,688,688,32,309,310,311,689,689,689,32,311,312,313,54,54,54,32,313,314,315,690,690,690,32,315,316,317,691,691,691,32,317,318,319,692,692,692,32,319,320,88,693,693,693,32,88,89,90,694,694,694,32,90,91,92,695,695,695,32,92,93,94,696,696,696,32,94,95,96,697,697,697,32,96,97,98,698,698,698,32,98,182,183,699,699,699,32,183,184,185,700,700,700,32,185,186,187,701,701,701,32,187,188,189,702,702,702,32,189,190,199,703,703,703,32,189,199,198,704,704,704,32,185,187,189,705,705,705,32,98,183,185,706,706,706,32,94,96,98,707,707,707,32,90,92,94,708,708,708,32,319,88,90,709,709,709,32,315,317,319,710,710,710,32,311,313,315,711,711,711,32,308,309,311,712,712,712,32,322,321,308,54,54,54,32,323,322,308,713,713,713,32,189,198,197,714,714,714,32,189,197,196,715,715,715,32,323,308,311,716,716,716,32,324,323,311,54,54,54,32,185,189,196,717,717,717,32,185,196,195,718,718,718,32,325,324,311,54,54,54,32,326,325,311,54,54,54,32,185,195,194,719,719,719,32,185,194,193,720,720,720,32,326,311,315,721,721,721,32,327,326,315,722,722,722,32,185,193,192,723,723,723,32,98,185,192,724,724,724,32,328,327,315,725,725,725,32,329,328,315,54,54,54,32,98,192,191,726,726,726,32,98,191,109,727,727,727,32,330,329,315,728,728,728,32,330,315,319,729,729,729,32,98,109,108,730,730,730,32,98,108,107,731,731,731,32,331,330,319,732,732,732,32,332,331,319,733,733,733,32,94,98,107,734,734,734,32,94,107,106,735,735,735,32,333,332,319,54,54,54,32,99,333,319,736,736,736,32,94,106,105,737,737,737,32,94,105,104,738,738,738,32,99,319,90,739,739,739,32,100,99,90,740,740,740,32,94,104,103,741,741,741,32,90,94,103,742,742,742,32,101,100,90,743,743,743,32,90,103,102,744,744,744,32,90,102,101,745,745,745,33,359,403,402,358,2,2,2,2,33,358,402,401,357,3,3,3,3,33,357,401,400,356,4,4,4,4,33,356,400,399,355,5,5,5,5,33,355,399,398,354,6,6,6,6,33,354,398,397,353,7,7,7,7,33,353,397,396,352,8,8,8,8,32,491,490,489,746,746,746,32,489,488,487,747,747,747,32,487,486,381,748,748,748,32,381,380,379,749,749,749,32,379,378,377,750,750,750,32,377,376,375,751,751,751,32,375,374,373,752,752,752,32,373,372,371,753,753,753,32,371,615,614,754,754,754,32,614,613,612,755,755,755,32,612,611,610,756,756,756,32,610,609,608,757,757,757,32,608,607,606,758,758,758,32,606,605,604,759,759,759,32,604,603,616,760,760,760,32,604,616,625,761,761,761,32,608,606,604,762,762,762,32,612,610,608,763,763,763,32,371,614,612,764,764,764,32,375,373,371,765,765,765,32,379,377,375,766,766,766,32,487,381,379,767,767,767,32,491,489,487,768,768,768,32,493,492,491,769,769,769,32,500,494,493,770,770,770,32,499,500,493,771,771,771,32,493,491,487,772,772,772,32,487,379,375,773,773,773,32,375,371,612,774,774,774,32,612,608,604,775,775,775,32,604,625,617,776,776,776,32,604,617,618,777,777,777,32,503,499,493,778,778,778,32,502,503,493,779,779,779,32,604,618,619,780,780,780,32,604,619,620,781,781,781,32,502,493,487,782,782,782,32,501,502,487,783,783,783,32,612,604,620,784,784,784,32,612,620,621,785,785,785,32,498,501,487,786,786,786,32,497,498,487,787,787,787,32,612,621,622,788,788,788,32,612,622,626,789,789,789,32,496,497,487,790,790,790,32,495,496,487,791,791,791,32,612,626,627,792,792,792,32,612,627,628,793,793,793,32,392,495,487,794,794,794,32,389,392,487,795,795,795,32,612,628,623,796,796,796,32,612,623,624,797,797,797,32,389,487,375,798,798,798,32,391,389,375,799,799,799,32,375,612,624,800,800,800,32,375,624,382,801,801,801,32,388,391,375,802,802,802,32,390,388,375,803,803,803,32,375,382,383,804,804,804,32,375,383,384,805,805,805,32,387,390,375,806,806,806,32,386,387,375,807,807,807,32,375,384,385,808,808,808,32,375,385,386,809,809,809,33,381,436,435,380,810,810,810,810,33,380,435,434,379,10,10,10,10,33,379,434,433,378,11,11,11,11,33,378,433,432,377,12,12,12,12,33,377,432,431,376,811,811,811,811,33,376,431,430,375,812,812,812,812,33,375,430,429,374,813,813,813,813,33,374,429,428,373,16,16,16,16,33,373,428,427,372,17,17,17,17,33,372,427,426,371,18,18,18,18,33,275,274,647,648,814,814,814,814,33,103,452,451,102,815,815,815,815,33,101,450,449,100,816,816,816,816,33,58,57,406,407,817,817,817,817,33,350,394,393,349,33,33,33,33,33,351,395,394,350,34,34,34,34,33,352,396,395,351,35,35,35,35,33,360,415,416,361,93,93,93,93,33,361,416,417,362,818,818,818,818,33,362,417,418,363,819,819,819,819,33,363,418,419,364,96,96,96,96,33,364,419,420,365,97,97,97,97,33,365,420,421,366,98,98,98,98,33,366,421,422,367,99,99,99,99,33,367,422,423,368,820,820,820,820,33,368,423,424,369,821,821,821,821,33,369,424,425,370,102,102,102,102,33,158,516,517,159,822,822,822,822,33,382,437,438,383,103,103,103,103,33,383,438,439,384,104,104,104,104,33,384,439,440,385,105,105,105,105,33,385,440,441,386,106,106,106,106,33,386,441,442,387,107,107,107,107,33,387,442,443,390,108,108,108,108,33,390,443,444,388,823,823,823,823,33,388,444,445,391,824,824,824,824,33,391,445,446,389,111,111,111,111,33,389,446,447,392,112,112,112,112,33,162,520,521,163,825,825,825,825,33,155,513,514,156,826,826,826,826,33,196,197,555,554,827,827,827,827,33,195,196,554,553,828,828,828,828,33,707,710,337,334,829,829,829,829,33,476,512,511,475,122,122,122,122,33,475,511,510,474,123,123,123,123,33,474,510,509,473,124,124,124,124,33,473,509,508,472,830,830,830,830,33,472,508,507,471,126,126,126,126,33,471,507,506,470,127,127,127,127,33,470,506,505,469,128,128,128,128,33,469,505,504,468,129,129,129,129,33,494,539,538,493,264,264,264,264,33,493,538,537,492,265,265,265,265,33,492,537,536,491,266,266,266,266,33,491,536,535,490,267,267,267,267,33,490,535,534,489,268,268,268,268,33,489,534,533,488,269,269,269,269,33,488,533,532,487,270,270,270,270,33,487,532,531,486,831,831,831,831,33,486,531,436,381,832,832,832,832,33,162,161,519,520,833,833,833,833,33,55,404,405,56,834,834,834,834,33,327,328,701,700,835,835,835,835,33,160,518,519,161,836,836,836,836,33,191,549,458,109,837,837,837,837,33,157,156,514,515,838,838,838,838,33,158,157,515,516,839,839,839,839,33,555,197,198,556,840,840,840,840,33,468,504,403,359,277,277,277,277,33,370,425,522,477,278,278,278,278,33,477,522,523,478,279,279,279,279,33,478,523,524,479,280,280,280,280,33,479,524,525,480,281,281,281,281,33,480,525,526,481,282,282,282,282,33,481,526,527,482,283,283,283,283,33,482,527,528,483,284,284,284,284,33,483,528,529,484,285,285,285,285,33,484,529,530,485,286,286,286,286,33,392,447,540,495,346,346,346,346,33,495,540,541,496,347,347,347,347,33,496,541,542,497,348,348,348,348,33,497,542,543,498,349,349,349,349,33,498,543,544,501,350,350,350,350,33,501,544,545,502,841,841,841,841,33,502,545,546,503,352,352,352,352,33,503,546,547,499,842,842,842,842,33,499,547,548,500,843,843,843,843,33,281,654,404,55,844,844,844,844,33,329,330,703,702,845,845,845,845,32,308,321,694,22,22,22,32,694,681,616,23,23,23,32,603,668,707,22,22,22,32,603,707,334,23,23,23,32,334,295,230,22,22,22,32,243,308,694,22,22,22,32,603,334,230,25,25,25,32,243,694,616,26,26,26,32,616,603,230,27,27,27,32,616,230,243,28,28,28,33,279,652,653,280,846,846,846,846,33,453,104,105,454,13,13,13,13,33,325,698,697,324,847,847,847,847,33,349,393,641,589,423,423,423,423,33,589,641,640,588,424,424,424,424,33,588,640,639,587,425,425,425,425,33,587,639,638,586,426,426,426,426,33,586,638,637,585,427,427,427,427,33,371,426,680,615,493,493,493,493,33,615,680,679,614,494,494,494,494,33,614,679,678,613,848,848,848,848,33,613,678,677,612,496,496,496,496,33,612,677,676,611,849,849,849,849,33,611,676,675,610,850,850,850,850,33,610,675,674,609,851,851,851,851,33,609,674,673,608,500,500,500,500,33,608,673,672,607,852,852,852,852,33,607,672,671,606,502,502,502,502,33,606,671,670,605,853,853,853,853,33,605,670,669,604,854,854,854,854,33,604,669,668,603,505,505,505,505,33,275,648,649,276,855,855,855,855,32,558,559,562,856,856,856,32,562,202,200,857,857,857,32,562,200,558,856,856,856,33,60,409,410,61,858,858,858,858,33,332,705,704,331,859,859,859,859,33,448,706,333,99,860,860,860,860,33,59,408,409,60,861,861,861,861,33,329,702,701,328,862,862,862,862,33,271,270,643,644,863,863,863,863,33,330,331,704,703,864,864,864,864,33,279,278,651,652,865,865,865,865,33,578,630,629,577,647,647,647,647,33,579,631,630,578,648,648,648,648,33,580,632,631,579,649,649,649,649,33,581,633,632,580,650,650,650,650,33,582,634,633,581,651,651,651,651,33,583,635,634,582,866,866,866,866,33,584,636,635,583,653,653,653,653,33,585,637,636,584,654,654,654,654,33,590,655,656,591,867,867,867,867,33,591,656,657,592,656,656,656,656,33,592,657,658,593,657,657,657,657,33,593,658,659,594,658,658,658,658,33,594,659,660,595,868,868,868,868,33,595,660,661,596,660,660,660,660,33,596,661,662,597,661,661,661,661,33,597,662,663,598,869,869,869,869,33,598,663,664,599,870,870,870,870,33,599,664,665,600,871,871,871,871,33,600,665,666,601,872,872,872,872,33,601,666,667,602,873,873,873,873,33,602,667,415,360,667,667,667,667,32,154,163,521,118,118,118,32,521,512,476,118,118,118,32,485,530,559,118,118,118,32,485,559,558,118,118,118,32,558,200,172,119,119,119,32,558,172,127,121,121,121,32,476,485,558,874,874,874,32,118,154,521,119,119,119,32,558,127,118,875,875,875,32,118,521,476,118,118,118,32,476,558,118,876,876,876,33,616,681,682,625,877,877,877,877,33,625,682,683,617,670,670,670,670,33,617,683,684,618,671,671,671,671,33,618,684,685,619,878,878,878,878,33,619,685,686,620,673,673,673,673,33,620,686,687,621,879,879,879,879,33,621,687,688,622,675,675,675,675,33,622,688,689,626,676,676,676,676,33,626,689,690,627,880,880,880,880,33,627,690,691,628,678,678,678,678,33,628,691,692,623,679,679,679,679,33,623,692,693,624,680,680,680,680,33,624,693,437,382,681,681,681,681]},"pier_wide":{"uvs":[],"faces":[33,0,20,18,3,0,0,0,0,33,4,0,3,5,1,1,1,1,33,1,9,11,2,2,2,2,2,32,1,22,23,3,3,3,32,1,23,6,4,4,4,32,21,20,0,5,5,5,32,10,21,0,6,6,6,32,9,1,6,7,7,7,32,9,6,7,8,8,8,32,10,0,4,9,9,9,32,9,7,8,10,10,10,32,8,10,4,11,11,11,32,4,9,8,12,12,12,32,3,18,19,13,13,13,32,3,19,13,14,14,14,32,17,16,2,15,15,15,32,12,17,2,16,16,16,32,5,3,13,17,17,17,32,5,13,14,18,18,18,32,12,2,11,19,19,19,32,5,14,15,20,20,20,32,15,12,11,21,21,21,32,15,11,5,22,22,22,33,4,5,11,9,23,23,23,23,33,14,13,10,8,24,24,24,24,33,8,7,15,14,25,25,25,25,33,13,19,21,10,26,26,26,26,33,7,6,12,15,27,27,27,27,33,19,18,20,21,28,28,28,28,33,23,17,12,6,29,29,29,29,33,16,22,1,2,30,30,30,30,33,22,16,17,23,31,31,31,31],"metadata":{"generator":"io_three","uvs":0,"vertices":24,"version":3,"normals":32,"type":"Geometry","faces":32},"vertices":[7.5,-4,-47.5,7.5,-4,107.5,-7.5,-4,107.5,-7.49999,-4,-47.5,7.5,61.5,-47.5,-7.5,61.5,-47.5,7.5,4,95.5,7.49999,56,95.5,7.5,56,-35.5,7.49999,61.5,107.5,7.5,4,-35.5,-7.5,61.5,107.5,-7.5,4,95.5,-7.5,4,-35.5,-7.5,56,-35.5,-7.5,56,95.5,-7.5,-4,79.5,-7.5,4,79.5,-7.5,-4,-19.5,-7.5,4,-19.5,7.5,-4,-19.5,7.5,4,-19.5,7.5,-4,79.5,7.5,4,79.5],"normals":[-6.0633e-14,-1,1.36239e-7,0.00000152588,2.91198e-7,-1,-0.00000178019,-2.91198e-7,1,1,0,0,1,2.08616e-7,5.96047e-8,1,-1.19209e-7,1.6241e-14,1,-3.27825e-7,5.96047e-8,1,6.55196e-8,-3.57931e-8,1,1.83399e-8,1.90276e-7,1,-5.09597e-8,-1.24973e-7,1,3.69954e-7,2.91198e-8,1,0,1.1921e-7,1,-1.527e-7,4.92219e-8,-1,-5.96047e-8,-3.40598e-8,-1,-7.45058e-8,-2.98023e-8,-1,0,-3.40598e-8,-1,1.19209e-7,-1.42109e-14,-1,-3.63998e-8,-5.52064e-8,-1,-2.75098e-8,-1.26087e-8,-1,-2.18399e-8,-9.4033e-8,-1,-4.76506e-8,-2.18399e-8,-1,-3.66798e-8,-2.29249e-8,-1,-3.97132e-8,-2.15346e-8,1.25178e-13,1,-4.92219e-8,0,0,1,0,-1,5.82397e-8,0,1,-1.19209e-7,0,0,-1,1.90735e-7,3.57628e-7,1,0,1,-1.19209e-7,0,-1,0,0,0,-1]},"autopoint_c":{"normals":[-0.0445486,0,0.999007,0.155718,0,-0.987802,-0.155736,0,0.987799,0.253644,0,-0.967298,-0.253664,0,0.967292,0,-1,-4.47035e-8,0,-1,0,-7.54727e-9,-1,-1.40275e-9,-1.42173e-8,-1,-5.6341e-9,-8.89173e-8,-1,1.33063e-7,9.03341e-9,-1,-6.54494e-8,1.05009e-9,-1,-4.25226e-8,2.21797e-9,-1,-4.8377e-8,-3.47031e-9,-1,-3.01798e-8,-5.58276e-8,-1,7.86905e-8,2.18467e-9,-1,-5.19907e-8,3.65253e-9,-1,-4.56714e-8,1.01887e-9,-1,-4.64883e-8,6.56137e-7,-1,-0.00000190716,3.02054e-9,-1,-5.13552e-8,-7.19151e-9,-1,-2.3228e-8,5.38274e-7,-1,-0.00000157907,-1.18012e-7,-1,1.90983e-7,-1.21046e-8,-1,-1.09358e-8,0,-1,0,-8.01621e-11,-1,-4.78459e-8,-1.17389e-9,-1,-3.3605e-8,8.88404e-8,-1,-2.51623e-7,-1.28239e-9,-1,-3.39504e-8,0.33301,0,-0.942923,0.448878,0,-0.893593,-0.333026,0,0.942918,0.391772,0,-0.920063,-0.391782,0,0.920058,4.72254e-8,1,-5.44608e-8,-5.92871e-9,1,6.27385e-8,-8.14254e-9,1,7.64448e-8,0,1,8.46131e-8,0,1,4.47035e-8,2.24156e-9,1,4.09909e-8,1.31926e-9,1,3.11904e-8,1.1424e-8,1,1.80966e-8,-3.75878e-8,1,1.27015e-7,-1.15863e-9,1,5.18683e-8,-1.86994e-9,1,3.79966e-8,1.89593e-10,1,4.68631e-8,2.91841e-10,1,4.68948e-8,-2.30254e-9,1,4.9315e-8,5.38174e-9,1,2.74804e-8,-1.03396e-9,1,4.66897e-8,-5.63618e-8,1,1.56148e-7,-2.25546e-9,1,5.01739e-8,6.47834e-9,1,2.28626e-8,2.91198e-9,1,3.611e-8,-8.54019e-15,1,6.73999e-8,-6.01328e-11,1,6.9617e-8,5.49758e-10,1,4.10609e-8,-3.30025e-11,1,3.82077e-8,-0.332928,0,0.942952,0.430095,0,-0.902784,-0.430101,0,0.902781,0,-1,0,-5.29819e-9,-1,-3.17891e-8,6.62274e-9,-1,-3.97364e-8,-0.0000639161,-1,0.00040544,-1.04964e-8,-1,-3.97364e-8,9.69503e-8,-1,-3.70193e-7,2.90707e-7,-1,-6.83068e-7,-1.31181e-8,-1,-9.04295e-9,8.28178e-9,-1,-8.14429e-8,-6.70333e-9,-1,-3.6494e-8,1.66951e-8,-1,-6.3695e-8,-1.48187e-9,-1,-3.34785e-8,4.33247e-8,-1,-1.66613e-7,2.91662e-8,-1,-8.26075e-8,-8.49251e-8,-1,1.13577e-7,-8.69641e-8,-1,2.04266e-7,1.4641e-7,-1,-3.07344e-7,-1.0117e-9,-1,-4.94655e-8,-4.04117e-9,-1,-2.7164e-8,-0.391717,0,0.920086,0.391772,0,-0.920063,-0.430066,0,0.902798,0.429975,0,-0.902841,-0.42997,0,0.902843,0.391555,0,-0.920155,-0.391547,0,0.920158,-0.430001,0,0.902829,0.332696,0,-0.943034,-0.332685,0,0.943038,-0.3916,0,0.920136,0.253278,0,-0.967394,-0.253265,0,0.967397,0.430066,0,-0.902798,-0.332759,0,0.943012,0.155411,0,-0.98785,-0.155402,0,0.987851,0.448883,0,-0.893591,-0.448897,0,0.893584,0.391717,0,-0.920086,-0.253347,0,0.967375,0.0460657,0,-0.998938,-0.0461121,0,0.998936,-0.448878,0,0.893593,-0.3916,0,0.920136,0,-1,0,-1.88263e-7,-1,4.42428e-7,-3.31461e-7,-1,6.24691e-7,0,-1,0,-2.27476e-7,-1,5.3422e-7,-3.86211e-7,-1,7.33682e-7,-1.40089e-9,-1,-4.54348e-8,-3.52742e-8,-1,-1.09405e-8,5.13143e-8,-1,-3.16913e-7,2.75532e-7,-1,-6.47057e-7,1.05839e-7,-1,-3.00002e-7,-5.40339e-7,-1,0.00000114163,-3.11412e-8,-1,-4.90784e-9,-4.75677e-7,-1,9.98805e-7,4.85142e-7,-1,-0.00000109555,1.01484e-7,-1,-3.03072e-7,1.21751e-7,-1,-2.93852e-7,-0.430095,0,0.902784,0.332927,0,-0.942953,-0.155468,0,0.987841,0,0,-1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,1,4.91841e-13,1,4.62014e-7,-2.47888e-8,1,1.5723e-7,1.09467e-7,1,-4.17462e-7,2.21094e-8,1,-7.66168e-9,-1.31503e-7,1,3.14523e-7,1.40089e-9,1,4.54348e-8,-1.98675e-8,1,1.46344e-7,0,1,0,0,1,0,0,1,0,-2.36216e-8,1,1.50157e-7,1.39595e-8,1,6.0429e-9,-1.56656e-7,1,3.64595e-7,0,1,0,1.76371e-8,1,5.47025e-9,9.77349e-9,1,2.15644e-8,4.15284e-8,1,-1.61519e-7,5.40339e-7,1,-0.00000114163,1.47634e-7,1,-2.74234e-7,1.10853e-7,1,-1.9406e-7,1.8977e-8,1,8.63316e-9,1.46402e-8,1,4.54088e-9,1.39201e-8,1,6.33264e-9,1.46067e-8,1,4.53048e-9,1.4242e-8,1,5.31616e-9,0.430066,0,-0.902798,1.99284e-8,1,-3.85894e-9,9.71368e-9,1,-1.11212e-9,-2.15667e-9,1,4.82755e-8,-1.1036e-9,1,5.03617e-8,2.0233e-8,1,-4.64051e-9,-4.82082e-15,1,4.50445e-8,-8.58194e-9,1,4.56166e-8,-4.58005e-10,1,4.47408e-8,6.71823e-9,1,2.22725e-8,-2.85244e-8,1,1.46863e-7,-6.69482e-10,1,4.95221e-8,-8.613e-10,1,4.62842e-8,-2.87923e-9,1,5.4545e-8,-1.65483e-10,1,4.16748e-8,0.448899,0,-0.893583,6.02107e-8,-1,-3.81947e-7,-7.10125e-7,-1,0.00000141359,1.16942e-7,-1,-2.99838e-7,1.13723e-7,-1,-2.92313e-7,-2.95077e-7,-1,6.03923e-7,-1.97872e-8,-1,-2.01804e-9,-2.80263e-7,-1,0.00000177765,-3.73577e-8,-1,-1.15871e-8,-0.391772,0,0.920062,0.253545,0,-0.967324,-6.75794e-9,1,1.474e-7,0,1,6.81196e-8,-5.29819e-9,1,3.17891e-8,0,1,6.81196e-8,6.62274e-9,1,3.97364e-8,9.41506e-10,1,7.16839e-8,-4.84751e-8,1,1.85097e-7,-1.30258e-7,1,3.46191e-7,9.68652e-8,1,-1.57675e-7,3.43056e-10,1,2.61194e-8,7.49744e-9,1,3.97364e-8,-2.16338e-9,1,4.79949e-8,-2.55293e-9,1,5.1099e-8,2.50817e-9,1,3.25675e-8,-9.38893e-9,1,5.95926e-8,1.90468e-8,1,-7.72236e-10,-1.68911e-9,1,4.69173e-8,-4.49661e-14,1,2.69599e-7,-4.28666e-9,1,6.00129e-8,-3.65778e-9,1,5.33943e-8,-1.13758e-8,1,8.48041e-8,-1.78175e-9,1,4.1573e-8,-3.8016e-9,1,5.18793e-8,-0.0457995,0,0.998951,0.448882,0,-0.893591,0,0,1,0,0,-1,0.4301,0,-0.902781,-0.33301,0,0.942923,0.155632,0,-0.987815,-0.0446296,0,0.999004,0.0445486,0,-0.999007,-0.448878,0,0.893593,0.0450295,0,-0.998986,-0.430095,0,0.902784,2.21096e-8,1,-7.66203e-9,5.12982e-8,1,-1.95631e-7,3.3993e-8,1,-3.00271e-7,2.26541e-8,1,-9.05828e-9,-6.51485e-14,1,1.14133e-7,1.29016e-7,1,6.36824e-8,-3.34361e-9,1,1.59429e-7,-2.47906e-8,1,1.57242e-7,1.48962e-8,1,7.35277e-9,1.02827e-8,1,2.03685e-8,-1.83419e-8,1,1.35106e-7,9.99051e-9,1,2.11203e-8,1.7637e-8,1,5.47042e-9,0.391782,0,-0.920058,-0.253644,0,0.967298,0,-1,-2.10966e-7,2.83955e-8,-1,-1.8023e-7,3.44556e-8,-1,-1.23881e-7,-1.67171e-7,-1,2.94178e-7,6.10744e-15,-1,-5.70664e-8,-2.20502e-9,-1,-3.38651e-8,1.97398e-8,-1,-8.61174e-8,-4.0576e-9,-1,-2.58022e-8,-8.82356e-9,-1,-3.00895e-8,1.63882e-8,-1,-1.03959e-7,-6.81594e-10,-1,-4.02991e-8,-2.93301e-9,-1,-3.73734e-8,-2.9213e-9,-1,-3.56954e-8,-7.55607e-9,-1,-3.35464e-8,-1.66811e-9,-1,-3.17203e-8,-0.155718,0,0.987801,0.155736,0,-0.987799,0.333026,0,-0.942918,0.253664,0,-0.967292,-0.164399,0,0.986394,-0.164399,0,-0.986394,5.70813e-7,0,-1,1.66789e-7,0,-1,1.07023e-7,0,-1,1.66789e-7,0,-1,-0.00000106456,0,-1,1.5088e-7,3.63846e-7,-1,1.26709e-7,0,-1,-0.00000106456,0,-1],"metadata":{"generator":"io_three","normals":261,"uvs":0,"vertices":232,"version":3,"faces":355,"type":"Geometry"},"uvs":[],"vertices":[121.5,-4,19,133.072,-4,19.516,121.5,4,19,139.417,-4,19,144.878,-4,19.8609,144.567,-4,21.3284,133.072,4,19.516,139.417,-1,19,144.878,-1,19.8609,156.816,-4,22.9912,156.371,-4,24.4239,144.567,4,21.3284,156.816,-1,22.9912,169.103,-4,27.3307,168.555,-4,28.7269,156.371,4,24.4239,144.878,4,19.8609,139.417,4,19,169.103,-1,27.3307,181.753,-4,32.7173,181.132,-4,34.0827,168.555,4,28.7269,156.816,4,22.9912,144.878,0.999999,19.8609,139.417,0.999999,19,169.523,-1,19,172.027,-1,19.8843,181.753,-1,32.7173,194.754,-4,38.911,194.09,-4,40.2561,181.132,4,34.0827,169.103,4,27.3307,156.816,0.999999,22.9912,169.523,-4,19,172.027,-4,19.8843,185.066,-1,25.4354,194.754,-1,38.911,194.09,4,40.2561,181.753,4,32.7173,169.103,0.999999,27.3307,185.066,-4,25.4354,198.295,-1,31.7373,221.754,-4,52.4739,221.09,-4,53.819,194.754,4,38.911,181.753,0.999999,32.7173,172.027,0.999999,19.8843,169.523,0.999999,19,198.295,-4,31.7373,221.754,-1,52.4739,235.753,-4,59.141,235.132,-4,60.5063,221.09,4,53.819,194.754,0.999998,38.911,185.066,0.999999,25.4354,172.027,4,19.8843,169.523,4,19,225.295,-1,45.3002,235.753,-1,59.141,250.103,-4,65.2472,249.555,-4,66.6434,235.132,4,60.5063,221.754,4,52.4739,198.295,0.999999,31.7373,185.066,4,25.4354,215.266,-4,19,225.295,-4,45.3002,239.066,-1,51.8591,250.103,-1,65.2472,264.816,-4,70.4378,264.371,-4,71.8705,249.555,4,66.6434,235.753,4,59.141,221.754,0.999998,52.4739,198.295,4,31.7373,215.266,-1,19,233.705,-4,28.2627,239.066,-4,51.8591,253.027,-1,57.8009,264.816,-1,70.4378,279.878,-4,74.3812,279.568,-4,75.8488,264.371,4,71.8705,250.103,4,65.2472,235.753,0.999997,59.141,225.295,0.999998,45.3002,233.705,-1,28.2627,246.934,-4,34.5646,253.027,-4,57.8009,267.186,-1,62.7969,279.878,-1,74.3812,295.224,-4,76.7956,295.072,-4,78.2878,279.568,4,75.8488,264.816,4,70.4378,250.103,0.999997,65.2472,239.066,0.999998,51.8591,225.295,4,45.3002,215.266,4,19,233.087,-1,19,237.246,-1,21.089,246.934,-1,34.5646,259.973,-4,40.1157,267.186,-4,62.7969,281.534,-1,66.5545,295.224,-1,76.7956,310.5,-4,77.5,310.5,-4,79,295.072,4,78.2878,279.878,4,74.3812,264.816,0.999997,70.4378,253.027,0.999997,57.8009,239.066,4,51.8591,233.705,4,28.2627,215.266,0.999999,19,233.087,-4,19,237.246,-4,21.089,250.247,-1,27.2827,259.973,-1,40.1157,272.814,-4,44.6497,281.534,-4,66.5545,296.036,-1,68.8369,310.5,-1,77.5,323.75,-4,77.5,323.75,-4,79,310.5,4,79,295.224,4,76.7956,279.878,0.999997,74.3812,267.186,0.999997,62.7969,253.027,4,57.8009,246.934,4,34.5646,233.705,0.999999,28.2627,236.429,-4,19,237.91,-4,19.7439,250.247,-4,27.2827,262.897,-1,32.6693,272.814,-1,44.6497,285.466,-4,47.9659,296.036,-4,68.8369,310.5,-1,69.5,323.75,-1,77.5,323.75,-1,42.5,323.75,-4,42.5,323.75,-4,41,323.75,4,41,323.75,4,42.5,323.75,0.999998,42.5,323.75,0.999998,50.5,323.75,4,50.5,323.75,4,69.5,323.75,0.999997,69.5,323.75,0.999997,77.5,323.75,4,77.5,323.75,4,79,323.75,-1,69.5,323.75,-4,69.5,323.75,-4,50.5,323.75,-1,50.5,310.5,4,77.5,295.224,0.999997,76.7956,281.534,0.999997,66.5545,267.186,4,62.7969,259.973,4,40.1157,246.934,0.999999,34.5646,237.246,0.999999,21.089,233.087,0.999999,19,236.429,4,19,237.91,4,19.7439,250.868,-4,25.9173,262.897,-4,32.6693,275.184,-1,37.0088,285.466,-1,47.9659,297.964,-4,49.9349,310.5,-4,69.5,310.5,-1,42.5,310.5,-1,50.5,310.5,-4,42.5,310.5,-4,41,310.5,4,41,310.5,4,42.5,310.5,0.999998,42.5,310.5,0.999998,50.5,310.5,4,50.5,310.5,4,69.5,310.5,0.999997,69.5,310.5,0.999997,77.5,310.5,-4,50.5,296.036,0.999997,68.8369,281.534,4,66.5545,272.814,4,44.6497,259.973,0.999998,40.1157,250.247,0.999999,27.2827,237.246,4,21.089,233.087,4,19,250.868,4,25.9173,263.445,-4,31.2731,275.184,-4,37.0088,287.122,-1,40.1391,297.964,-1,49.9349,298.776,-1,41.9762,298.776,-4,41.9762,298.928,-4,40.484,298.928,4,40.484,298.776,4,41.9762,298.776,0.999998,41.9762,297.964,0.999998,49.9349,297.964,4,49.9349,296.036,4,68.8369,285.466,4,47.9659,272.814,0.999998,44.6497,262.897,0.999999,32.6693,250.247,4,27.2827,263.445,4,31.2731,275.629,-4,35.5761,287.122,-4,40.1391,287.432,-4,38.6716,287.432,4,38.6716,287.122,4,40.1391,287.122,0.999998,40.1391,285.466,0.999998,47.9659,275.184,0.999998,37.0088,262.897,4,32.6693,275.629,4,35.5761,275.184,4,37.0088,323.75,4,54,323.75,-4,54,323.75,4,66,323.75,-4,66,332.75,-4,67.5,332.75,-4,52.5,332.75,4,52.5,332.75,4,67.5],"faces":[33,0,1,6,2,0,0,0,0,33,7,8,4,3,1,1,1,1,33,1,5,11,6,2,2,2,2,33,8,12,9,4,3,3,3,3,33,5,10,15,11,4,4,4,4,32,139,154,140,5,5,5,32,140,122,105,6,6,6,32,105,90,79,7,7,7,32,79,68,58,8,8,8,32,58,49,36,9,9,9,32,79,58,36,10,10,10,32,140,105,79,11,11,11,32,121,139,140,12,12,12,32,104,121,140,13,13,13,32,79,36,27,14,14,14,32,104,140,79,15,15,15,32,89,104,79,16,16,16,32,89,79,27,17,17,17,32,78,89,27,18,18,18,32,78,27,18,19,19,19,32,67,78,18,20,20,20,32,67,18,12,21,21,21,32,35,41,57,22,22,22,32,57,67,12,23,23,23,32,8,7,25,24,24,24,32,35,57,12,25,25,25,32,12,8,25,26,26,26,32,25,26,35,27,27,27,32,12,25,35,28,28,28,33,12,18,13,9,29,29,29,29,33,36,49,42,28,30,30,30,30,33,10,14,21,15,31,31,31,31,33,17,16,23,24,1,1,1,1,33,18,27,19,13,32,32,32,32,33,14,20,30,21,33,33,33,33,33,16,22,32,23,3,3,3,3,32,53,73,84,34,34,34,32,84,95,110,35,35,35,32,110,127,159,36,36,36,32,159,185,151,37,37,37,32,151,150,184,38,38,38,32,151,184,187,39,39,39,32,110,159,151,40,40,40,32,53,84,110,41,41,41,32,45,53,110,42,42,42,32,110,151,187,43,43,43,32,110,187,160,44,44,44,32,110,160,128,45,45,45,32,110,128,111,46,46,46,32,45,110,111,47,47,47,32,45,111,96,48,48,48,32,39,45,96,49,49,49,32,85,63,54,50,50,50,32,39,96,85,51,51,51,32,32,39,85,52,52,52,32,85,54,46,53,53,53,32,46,47,24,54,54,54,32,46,24,23,55,55,55,32,32,85,46,56,56,56,32,46,23,32,57,57,57,33,33,34,26,25,58,58,58,58,33,27,36,28,19,59,59,59,59,33,20,29,37,30,60,60,60,60,33,22,31,39,32,29,29,29,29,32,186,156,225,61,61,61,32,225,229,228,62,62,62,32,227,155,173,6,6,6,32,225,228,227,63,63,63,32,172,186,225,6,6,6,32,137,172,225,64,64,64,32,225,227,173,65,65,65,32,173,138,120,6,6,6,32,120,103,88,66,66,66,32,88,77,66,67,67,67,32,88,66,48,68,68,68,32,173,120,88,69,69,69,32,137,225,173,70,70,70,32,119,137,173,71,71,71,32,173,88,48,72,72,72,32,173,48,40,73,73,73,32,102,119,173,74,74,74,32,87,102,173,75,75,75,32,173,40,34,76,76,76,32,34,33,65,24,24,24,32,76,87,173,77,77,77,32,34,65,76,78,78,78,32,173,34,76,79,79,79,33,34,40,35,26,80,80,80,80,33,31,38,45,39,81,81,81,81,33,40,48,41,35,82,82,82,82,33,38,44,53,45,59,59,59,59,33,47,46,55,56,58,58,58,58,33,44,62,73,53,30,30,30,30,33,49,58,50,42,83,83,83,83,33,43,51,61,52,84,84,84,84,33,46,54,64,55,80,80,80,80,33,58,68,59,50,85,85,85,85,33,51,60,71,61,86,86,86,86,33,54,63,74,64,82,82,82,82,33,66,77,67,57,87,87,87,87,33,68,79,69,59,88,88,88,88,33,60,70,82,71,89,89,89,89,33,62,72,84,73,83,83,83,83,33,77,88,78,67,90,90,90,90,33,79,90,80,69,91,91,91,91,33,70,81,93,82,92,92,92,92,33,72,83,95,84,85,85,85,85,33,86,101,87,76,93,93,93,93,33,88,103,89,78,94,94,94,94,33,90,105,91,80,95,95,95,95,33,81,92,108,93,96,96,96,96,33,83,94,110,95,88,88,88,88,33,85,96,112,97,87,87,87,87,33,75,86,76,65,97,97,97,97,33,115,116,100,99,98,98,98,98,33,101,118,102,87,99,99,99,99,33,103,120,104,89,100,100,100,100,33,105,122,106,91,101,101,101,101,33,92,107,125,108,102,102,102,102,33,48,66,57,41,103,103,103,103,33,94,109,127,110,91,91,91,91,33,96,111,129,112,104,104,104,104,32,106,123,124,105,105,105,32,124,107,92,6,6,6,32,92,81,70,6,6,6,32,70,60,51,106,106,106,32,51,43,29,107,107,107,32,106,124,92,108,108,108,32,91,106,92,108,108,108,32,1,0,3,6,6,6,32,3,4,9,6,6,6,32,9,13,19,109,109,109,32,19,28,42,110,110,110,32,9,19,42,111,111,111,32,1,3,9,24,24,24,32,5,1,9,24,24,24,32,80,91,92,108,108,108,32,10,5,9,24,24,24,32,80,92,70,108,108,108,32,14,10,9,112,112,112,32,69,80,70,113,113,113,32,20,14,9,114,114,114,32,59,69,70,115,115,115,32,20,9,42,116,116,116,32,50,59,70,117,117,117,32,20,42,50,118,118,118,32,29,20,50,119,119,119,32,50,70,51,120,120,120,32,51,29,50,121,121,121,33,116,134,117,100,122,122,122,122,33,118,136,119,102,123,123,123,123,33,120,138,121,104,124,124,124,124,33,122,140,123,106,125,125,125,125,32,141,142,143,126,126,126,32,143,144,145,126,126,126,32,143,145,146,127,127,127,32,141,143,146,128,128,128,32,147,148,224,126,126,126,32,141,146,147,126,126,126,32,225,156,157,128,128,128,32,157,141,147,126,126,126,32,147,224,225,127,127,127,32,147,225,157,129,129,129,33,107,124,153,125,130,130,130,130,32,17,2,6,131,131,131,32,17,6,11,132,132,132,32,22,16,17,133,133,133,32,38,31,22,134,134,134,32,62,44,38,135,135,135,32,62,38,22,136,136,136,32,22,17,11,137,137,137,32,22,11,15,138,138,138,32,153,152,158,139,139,139,32,108,125,153,140,140,140,32,82,93,108,141,141,141,32,61,71,82,142,142,142,32,37,52,61,143,143,143,32,108,153,158,144,144,144,32,108,158,126,144,144,144,32,22,15,21,145,145,145,32,108,126,109,144,144,144,32,22,21,30,146,146,146,32,82,108,109,147,147,147,32,62,22,30,148,148,148,32,72,62,30,149,149,149,32,72,30,37,150,150,150,32,72,37,61,151,151,151,32,82,109,94,152,152,152,32,83,72,61,153,153,153,32,82,94,83,154,154,154,32,61,82,83,155,155,155,33,109,126,159,127,95,95,95,95,33,111,128,161,129,94,94,94,94,33,113,130,163,131,156,156,156,156,32,163,190,209,157,157,157,32,209,219,205,158,158,158,32,205,181,147,140,140,140,32,147,146,180,38,38,38,32,147,180,204,159,159,159,32,209,205,147,160,160,160,32,131,163,209,161,161,161,32,165,114,131,162,162,162,32,164,165,131,163,163,163,32,131,209,147,164,164,164,32,147,204,218,165,165,165,32,147,218,220,166,166,166,32,191,164,131,167,167,167,32,210,191,131,168,168,168,32,131,147,220,169,169,169,32,220,210,131,170,170,170,33,166,167,133,132,171,171,171,171,32,177,143,142,105,105,105,32,142,176,200,6,6,6,32,200,214,196,172,172,172,32,196,169,134,6,6,6,32,134,116,115,173,173,173,32,115,132,133,6,6,6,32,115,133,168,6,6,6,32,196,134,115,174,174,174,32,177,142,200,108,108,108,32,201,177,200,108,108,108,32,196,115,168,175,175,175,32,196,168,195,176,176,176,32,201,200,196,177,177,177,32,215,201,196,178,178,178,32,196,195,213,24,24,24,32,215,196,213,179,179,179,33,134,169,135,117,180,180,180,180,33,136,171,137,119,181,181,181,181,32,188,207,183,182,182,182,32,183,149,226,183,183,183,32,226,231,230,184,184,184,32,224,148,182,185,185,185,32,226,230,224,186,186,186,32,188,183,226,187,187,187,32,129,161,188,188,188,188,32,97,112,129,189,189,189,32,74,97,129,190,190,190,32,129,188,226,191,191,191,32,226,224,182,192,192,192,32,226,182,206,193,193,193,32,74,129,226,194,194,194,32,64,74,226,195,195,195,32,226,206,208,196,196,196,32,226,208,189,197,197,197,32,55,64,226,198,198,198,32,98,56,55,199,199,199,32,113,98,55,200,200,200,32,55,226,189,201,201,201,32,55,189,162,202,202,202,32,130,113,55,203,203,203,32,162,130,55,204,204,204,33,138,173,139,121,205,205,205,205,33,98,113,131,114,206,206,206,206,33,176,142,141,174,207,207,207,207,33,178,144,143,177,208,208,208,208,33,180,146,145,179,207,207,207,207,33,182,148,147,181,125,125,125,125,33,184,150,149,183,207,207,207,207,33,158,152,151,185,125,125,125,125,33,173,155,154,139,207,207,207,207,33,175,157,156,186,125,125,125,125,33,126,158,185,159,101,101,101,101,33,128,160,188,161,100,100,100,100,33,130,162,190,163,99,99,99,99,33,165,164,192,193,98,98,98,98,33,167,194,168,133,209,209,209,209,33,169,196,170,135,210,210,210,210,33,171,198,172,137,211,211,211,211,33,200,176,174,199,212,212,212,212,33,202,178,177,201,213,213,213,213,33,29,43,52,37,214,214,214,214,33,204,180,179,203,212,212,212,212,33,206,182,181,205,215,215,215,215,33,187,184,183,207,205,205,205,205,33,198,175,186,172,215,215,215,215,33,160,187,207,188,124,124,124,124,33,162,189,209,190,123,123,123,123,33,164,191,211,192,216,216,216,216,32,211,221,223,217,217,217,32,223,217,203,218,218,218,32,203,179,145,140,140,140,32,145,144,178,139,139,139,32,145,178,202,219,219,219,32,192,211,223,220,220,220,32,166,193,192,221,221,221,32,167,166,192,222,222,222,32,203,145,202,223,223,223,32,203,202,216,224,224,224,32,194,167,192,225,225,225,32,212,194,192,226,226,226,32,223,203,216,227,227,227,32,223,216,222,144,144,144,32,212,192,223,228,228,228,32,223,222,212,229,229,229,33,194,212,195,168,230,230,230,230,33,196,214,197,170,231,231,231,231,32,174,141,157,5,5,5,32,157,175,198,232,232,232,32,198,171,136,233,233,233,32,136,118,101,234,234,234,32,101,86,75,235,235,235,32,75,99,100,236,236,236,32,75,100,117,237,237,237,32,136,101,75,238,238,238,32,157,198,136,239,239,239,32,199,174,157,240,240,240,32,197,199,157,241,241,241,32,136,75,117,242,242,242,32,136,117,135,243,243,243,32,197,157,136,244,244,244,32,136,135,170,245,245,245,32,170,197,136,246,246,246,33,214,200,199,197,247,247,247,247,33,216,202,201,215,248,248,248,248,33,218,204,203,217,247,247,247,247,33,208,206,205,219,211,211,211,211,33,189,208,219,209,181,181,181,181,33,191,210,221,211,180,180,180,180,33,212,222,213,195,249,249,249,249,33,222,216,215,213,250,250,250,250,33,220,218,217,223,231,231,231,231,33,210,220,223,221,210,210,210,210,33,63,85,97,74,103,103,103,103,33,226,227,228,231,251,251,251,251,32,155,227,226,128,128,128,32,226,149,150,127,127,127,32,151,152,153,126,126,126,32,151,153,124,127,127,127,32,124,123,140,128,128,128,32,154,155,226,128,128,128,32,151,124,140,129,129,129,32,154,226,150,126,126,126,32,150,151,140,127,127,127,32,150,140,154,129,129,129,33,229,230,231,228,126,126,126,126,33,225,224,230,229,252,252,252,252,32,166,132,115,253,253,253,32,166,115,99,253,253,253,32,165,193,166,253,253,253,32,56,98,114,254,254,254,32,165,166,99,253,253,253,32,47,56,114,254,254,254,32,114,165,99,255,255,255,32,75,65,33,254,254,254,32,114,99,75,255,255,255,32,24,47,114,6,6,6,32,114,75,33,256,256,256,32,114,33,25,254,254,254,32,2,17,24,257,257,257,32,24,114,25,258,258,258,32,7,3,0,257,257,257,32,24,25,7,259,259,259,32,0,2,24,260,260,260,32,7,0,24,257,257,257]},"autopoint_b":{"normals":[9.46403e-15,1,4.47034e-8,0,1,4.83261e-8,4.5388e-10,1,3.95921e-8,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,2.11707e-7,6.35783e-7,1,0,0,-1,0,-1,0,-1.63068e-7,-1.19209e-7,-1,0,1,0,-1.16078e-14,1,7.18348e-8,4.76836e-8,1,3.17891e-8,1.09255e-10,1,6.81199e-8,1.02359e-7,1,-1.72398e-7,0,1,0,-2.50647e-7,1,-8.41882e-8,0,1,0,1.46345e-9,1,2.0436e-7,7.69055e-11,1,4.79501e-8,6.81376e-9,1,0,-0.1644,5.87935e-8,-0.986394,-2.6491e-9,-1,-1.58945e-8,0,-1,0,6.29157e-8,-1,-5.96045e-8,0,-1,-6.81199e-8,-2.17092e-9,-1,-3.83228e-9,-1.96374e-9,-1,-5.96045e-8,-6.30248e-9,-1,-7.18352e-8,5.21739e-9,-1,-1.0387e-8,-1.01484e-9,-1,-4.79899e-8,-1.54423e-9,-1,-7.30242e-8,-3.15468e-15,-1,-1.49011e-8,1.86701e-9,-1,-3.5927e-8,2.11707e-7,0,1,-0.448906,0,0.893579,-0.448906,0,0.893579,-0.448906,0,0.893579,-0.448906,0,0.893579,-0.448858,0.0000031143,0.893603,-0.448879,0,0.893593,-0.448858,-0.00000311429,0.893603,-0.448879,0,0.893593,-0.448859,-5.32629e-8,0.893602,-0.448859,0,0.893602,-8.07949e-8,0.00000317891,1,-0.164398,-5.87935e-8,0.986394,-0.42997,-8.7785e-7,0.902843,-8.52835e-8,-0.00000301997,1,1.3015e-15,-1,-1.49012e-8,1.90086e-7,0,-1,-3.07208e-14,-1,3.17887e-7,0,0,1,-2.73074e-14,1,3.17887e-7,1.79526e-7,-3.17891e-7,-1,-3.75988e-15,1,4.47036e-8,-0.492896,0,-0.870088,-0.492892,0,-0.87009,-0.492896,-3.81116e-7,-0.870088,-0.492892,-1.03723e-7,-0.870091,-0.492893,-4.299e-7,-0.87009,-0.44961,-6.20108e-8,-0.893225,-0.405239,-7.70503e-7,-0.914211,-0.534994,-2.01429e-7,-0.844856,-0.534994,0,-0.844856,-0.534997,0,-0.844854,-0.534995,-5.37144e-7,-0.844855,-0.534997,0,-0.844854,-0.534994,0,-0.844856],"metadata":{"generator":"io_three","normals":72,"uvs":0,"vertices":58,"version":3,"faces":90,"type":"Geometry"},"uvs":[],"vertices":[323.75,1,-17.5,233.656,1,-17.5,228.814,1,-14.4335,220.105,1,-9.49998,323.75,1,-9.49998,323.75,-4,-19,323.75,4,-19,323.75,4,-17.5,323.75,4,-9.49998,323.75,4,-5.99999,323.75,-4,-6,323.75,-4,-9.49998,323.75,-0.999999,-9.49998,323.75,-0.999999,-17.5,323.75,-4,-17.5,233.656,4,-17.5,220.105,4,-9.49998,236.025,-4,-19,233.656,-4,-17.5,236.025,4,-19,217.517,4,9.5,323.75,4,9.50002,323.75,4,6.00003,332.75,4,7.50003,332.75,4,-7.50001,218.778,4,-8.74826,208.475,4,-3.56229,199.14,4,0.575712,210.91,4,6.18101,332.75,-4,-7.50001,332.75,-4,7.50003,323.75,-4,6.00003,323.75,-4,9.50002,217.517,-4,9.5,210.91,-4,6.18101,199.14,-4,0.575712,208.475,-4,-3.56229,218.778,-4,-8.74826,220.105,-4,-9.49998,220.105,-0.999999,-9.49998,228.814,-0.999999,-14.4335,233.656,-0.999999,-17.5,233.443,-1,17.5,233.443,-4,17.5,236.429,-4,19,236.429,4,19,233.443,4,17.5,233.443,0.999999,17.5,217.517,1,9.50002,217.517,-1,9.50002,323.75,1,9.50002,323.75,-4,19,323.75,-4,17.5,323.75,-1,17.5,323.75,-1,9.50002,323.75,0.999999,17.5,323.75,4,17.5,323.75,4,19],"faces":[32,4,0,1,0,0,0,32,2,3,4,1,1,1,32,1,2,4,2,2,2,32,14,5,6,3,3,3,32,6,7,0,4,4,4,32,4,8,9,5,5,5,32,4,9,10,6,6,6,32,10,11,12,5,5,5,32,13,14,6,7,7,7,32,4,10,12,8,8,8,32,13,6,0,5,5,5,32,0,4,12,5,5,5,32,0,12,13,8,8,8,33,1,0,7,15,9,9,9,9,33,16,8,4,3,10,10,10,10,33,17,5,14,18,11,11,11,11,33,19,6,5,17,12,12,12,12,33,15,7,6,19,13,13,13,13,32,28,20,21,14,14,14,32,22,23,24,15,15,15,32,28,21,22,16,16,16,32,26,27,28,17,17,17,32,8,16,25,18,18,18,32,25,26,28,19,19,19,32,22,24,9,20,20,20,32,9,8,25,21,21,21,32,25,28,22,22,22,22,32,22,9,25,23,23,23,33,24,29,10,9,24,24,24,24,32,10,29,30,25,25,25,32,31,32,33,26,26,26,32,10,30,31,27,27,27,32,38,11,10,28,28,28,32,37,38,10,29,29,29,32,10,31,33,30,30,30,32,34,35,36,31,31,31,32,10,33,34,32,32,32,32,36,37,10,33,33,33,32,34,36,10,34,34,34,33,39,12,11,38,10,10,10,10,32,41,13,12,35,35,35,32,12,39,40,26,26,26,32,12,40,41,36,36,36,33,18,14,13,41,37,37,37,37,32,42,43,44,38,38,38,32,44,45,46,39,39,39,32,44,46,47,40,40,40,32,42,44,47,41,41,41,32,48,20,28,42,42,42,32,42,47,48,43,43,43,32,34,33,49,44,44,44,32,49,42,48,45,45,45,32,48,28,34,46,46,46,32,48,34,49,47,47,47,33,48,50,21,20,48,48,48,48,32,57,51,52,5,5,5,32,57,52,53,7,7,7,32,55,56,57,5,5,5,32,22,21,50,5,5,5,32,55,57,53,6,6,6,32,31,22,50,5,5,5,32,50,55,53,6,6,6,32,54,32,31,5,5,5,32,50,53,54,8,8,8,32,54,31,50,7,7,7,33,22,31,30,23,49,49,49,49,33,24,23,30,29,6,6,6,6,33,28,27,35,34,50,50,50,50,33,33,32,54,49,51,51,51,51,33,53,42,49,54,52,52,52,52,33,42,53,52,43,53,53,53,53,33,43,52,51,44,54,54,54,54,33,44,51,57,45,55,55,55,55,33,45,57,56,46,56,56,56,56,33,46,56,55,47,57,57,57,57,33,55,50,48,47,58,58,58,58,32,3,2,40,59,59,59,32,39,38,37,60,60,60,32,3,40,39,61,61,61,32,25,16,3,60,60,60,32,39,37,25,62,62,62,32,39,25,3,63,63,63,33,37,36,26,25,64,64,64,64,33,36,35,27,26,65,65,65,65,32,15,19,17,66,66,66,32,17,18,41,67,67,67,32,41,40,2,68,68,68,32,1,15,17,69,69,69,32,41,2,1,70,70,70,32,17,41,1,71,71,71]},"autopoint_a":{"normals":[-0.653171,0,-0.75721,-0.61523,0,-0.788347,-0.575807,0,-0.817585,-0.534996,0,-0.844855,-0.359892,0,-0.932994,0.689131,0,0.724637,0.65317,0,0.757212,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,-0.689069,0,-0.724696,0.689147,0,0.724622,0.689072,0,0.724693,0.653171,0,0.75721,0.615228,0,0.788349,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,-0.575806,0,-0.817586,-0.405242,0,-0.914209,0,1,0,-6.44473e-9,1,-6.57305e-8,1.59536e-8,1,-7.54615e-9,7.9264e-8,1,9.21945e-8,9.26454e-8,1,8.04791e-8,1.17909e-8,1,-3.135e-8,-2.771e-9,1,-3.93631e-8,-3.58989e-9,1,-5.09958e-8,2.62533e-10,1,-4.40853e-8,2.75318e-9,1,-3.54564e-8,9.15696e-10,1,-4.5324e-8,-5.64024e-9,1,-1.04081e-7,-5.83591e-9,1,-5.15255e-8,-5.85733e-9,1,-5.72275e-8,3.79065e-9,1,-3.71186e-8,3.04775e-9,1,-1.43517e-8,1.56236e-9,1,-4.02325e-8,3.84029e-9,1,-3.70249e-8,-2.02363e-8,1,-6.6264e-8,1.3555e-9,1,-3.49056e-8,3.5553e-9,1,-4.17827e-8,9.45924e-9,1,-3.2952e-8,1.86581e-9,1,-4.10829e-8,-8.29957e-10,1,-4.24721e-8,0.581237,0,0.813734,-0.170958,0,-0.985278,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707109,0,-0.707105,0.707107,0,-0.707107,0.707108,0,-0.707105,0,0,-1,-0.689144,0,-0.724624,-0.813734,0,-0.581237,-0.615228,0,-0.788349,-0.2191,0,-0.975702,-5.68704e-14,1,-8.35981e-8,7.07575e-7,1,9.68783e-7,-2.43201e-7,1,-3.45232e-7,1.4944e-8,1,-1.49442e-8,1.57617e-8,1,-1.42857e-8,3.8463e-8,1,-2.0212e-9,-5.76221e-8,1,-1.17946e-7,1.54186e-8,1,-1.39748e-8,1.5601e-7,1,1.32282e-7,-6.76754e-8,1,-1.40242e-7,0.534996,0,0.844854,-1.47416e-14,1,-9.24436e-8,1.41084e-7,1,1.82533e-7,-2.35488e-7,1,-3.71778e-7,9.27575e-9,1,-2.22263e-8,6.04374e-10,1,-4.41107e-8,-3.03826e-8,1,-6.60319e-8,-1.36061e-8,1,-7.26042e-8,-1.4948e-9,1,-6.92391e-8,-1.06848e-8,1,-2.41046e-8,1.61237e-8,1,-2.87688e-8,2.1729e-8,1,-4.8703e-8,-3.75655e-8,1,-7.45052e-8,-8.74091e-8,1,-1.73362e-7,9.56462e-9,1,-3.65386e-8,1.52561e-9,1,-4.92903e-8,-1.19067e-10,1,-4.7936e-8,-2.65721e-9,1,-4.61689e-8,-9.04347e-9,1,-4.98243e-8,-2.27481e-9,1,-4.75627e-8,-5.13203e-9,1,-4.81406e-8,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575808,0,-0.817585,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,-0.335864,0,-0.941911,-0.313679,0,-0.949529,0.653169,0,0.757212,-0.266711,0,-0.963776,0.575808,0,0.817585,-0.492901,0,-0.870086,-0.313678,0,-0.949529,-1,0,0,0.313679,0,0.949529,0.266712,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,-0.073564,0,-0.99729,-0.35989,0,-0.932995,-0.534994,0,-0.844856,-6.09146e-15,1,-4.98865e-8,-2.11036e-8,1,-7.51254e-8,-4.51046e-8,1,-1.00063e-7,-1.73552e-9,1,-4.03986e-8,-1.1983e-10,1,-4.0101e-8,-3.83454e-9,1,-4.97751e-8,-2.30646e-9,1,-4.39067e-8,2.03034e-9,1,-4.38803e-8,2.03148e-9,1,-4.20508e-8,-1.8055e-9,1,-4.60803e-8,-9.20604e-9,1,-5.18969e-8,-0.449607,0,-0.893227,1.79042e-8,1,-1.79042e-8,2.09976e-8,1,-1.34105e-8,3.57707e-7,1,3.39749e-7,1.96628e-8,1,-1.45818e-8,-2.45854e-7,1,-4.33991e-7,2.2129e-8,1,-1.04676e-8,-1.56454e-7,1,-4.73599e-7,-1.09276e-7,1,-4.86632e-7,1.54232e-7,1,8.88878e-7,0,1,0,-9.34614e-8,1,-0.00000126704,0,1,0,2.14201e-8,1,3.51399e-8,-3.07462e-8,1,-1.22263e-7,-5.40106e-8,1,-1.13919e-7,-7.79732e-8,1,-1.41567e-7,-7.87213e-8,1,-1.40953e-7,1.93471e-10,1,-2.49258e-7,-1.94564e-8,1,-1.5775e-7,-1.12568e-7,1,-2.01557e-7,4.67088e-8,1,2.34974e-8,-1.81674e-8,1,-1.54668e-7,6.08256e-7,1,0.00000350554,2.21071e-8,1,-1.11804e-8,2.17539e-8,1,-1.16273e-8,-2.75771e-8,1,-2.35354e-7,2.17539e-8,1,-1.16273e-8,2.15783e-8,1,-1.21697e-8,2.36043e-8,1,-7.1601e-9,0.00000256228,1,0.00000664257,-1.16307e-8,1,-7.6114e-8,0.61523,0,0.788348,-0.653173,0,-0.757209,0.492898,0,0.870087,0.122409,0,0.99248,0.707109,0,-0.707105,0.707102,0,-0.707112,0.707102,0,-0.707112,-6.11165e-9,-1,4.82457e-8,1.53142e-7,-1,2.13551e-7,1.19138e-7,-1,2.10017e-7,-2.01838e-8,-1,1.20964e-8,-1.18417e-7,-1,-2.09097e-7,-3.11511e-8,-1,-4.8075e-8,0,-1,0,-1.29523e-9,-1,6.41097e-8,4.53916e-9,-1,5.08748e-8,1.12661e-8,-1,6.45677e-8,-6.92244e-9,-1,3.67281e-8,5.42815e-10,-1,3.80965e-8,8.599e-9,-1,6.0576e-8,-3.18313e-10,-1,5.44304e-8,1.14129e-9,-1,5.00023e-8,-5.87807e-10,-1,3.90244e-8,-6.26768e-10,-1,4.1611e-8,3.22749e-9,-1,4.87787e-8,6.29965e-9,-1,5.03312e-8,3.24187e-10,-1,4.52484e-8,-1.61137e-8,-1,2.02965e-8,1.11828e-8,-1,5.54226e-8,-1.96192e-8,-1,1.50173e-8,-2.04313e-8,-1,1.38402e-8,-3.00843e-8,-1,3.00847e-8,-1.83375e-8,-1,4.20334e-8,4.85145e-7,-1,6.88853e-7,0,-1,0,1.13109e-7,-1,1.87219e-7,-3.58543e-8,-1,2.21333e-8,-3.46045e-8,-1,2.3122e-8,-4.27132e-7,-1,-4.71786e-7,3.14085e-7,-1,4.02464e-7,0,-1,0,-1.20852e-8,-1,5.55914e-8,-3.11769e-8,-1,3.11767e-8,-1.49857e-8,-1,6.89336e-8,8.74091e-8,-1,1.73362e-7,-1.92274e-7,-1,-2.46378e-7,3.84211e-9,-1,5.01059e-8,-5.73515e-7,-1,-6.64868e-7,-5.05548e-7,-1,-7.17824e-7,-1.73282e-8,-1,1.28514e-8,1.46977e-8,-1,4.80973e-8,1.24821e-8,-1,9.94307e-8,8.08959e-10,-1,3.73067e-8,-8.6719e-8,-1,-2.24813e-7,3.47303e-8,-1,1.56759e-7,9.47267e-8,-1,3.298e-7,-1.96699e-8,-1,-3.90778e-8,-2.84467e-9,-1,4.49787e-8,-1.37809e-8,-1,3.17981e-8,1.05347e-7,-1,1.8571e-7,5.10393e-15,-1,4.1799e-8,-1.61432e-9,-1,3.04079e-8,1.37555e-8,-1,6.22129e-8,-2.65692e-9,-1,4.63892e-8,-1.55928e-8,-1,1.50329e-8,-2.2653e-9,-1,4.267e-8,2.13501e-8,-1,8.64306e-8,-3.89947e-8,-1,-2.13154e-8,-3.58083e-8,-1,3.58083e-8,6.77551e-7,-1,7.85474e-7,5.74398e-7,-1,8.15585e-7,4.91707e-7,-1,8.67981e-7,4.04292e-7,-1,9.12064e-7,-3.59009e-7,-1,-9.30709e-7,-2.26437e-8,-1,9.37917e-9,-2.03789e-8,-1,1.36162e-8,-1.46235e-7,-1,-1.24602e-7,0,-1,0,-3.81346e-8,-1,3.12957e-8,-2.68663e-7,-1,-3.81474e-7,-2.03782e-8,-1,1.36173e-8,-2.9382e-7,-1,-3.71813e-7,3.7577e-8,-1,3.20697e-7,-4.35077e-8,-1,2.32547e-8,9.9716e-8,-1,3.01848e-7,-1.89071e-7,-1,-4.26535e-7,1.67916e-7,-1,4.35312e-7,-2.26437e-8,-1,9.37928e-9,-0.122409,0,-0.99248],"metadata":{"generator":"io_three","normals":245,"uvs":0,"vertices":214,"version":3,"faces":310,"type":"Geometry"},"uvs":[],"vertices":[264.808,4,-42.988,272.932,4,-50.7141,264.808,0.999998,-42.988,237.725,0.999999,-21.852,247.095,0.999999,-28.4512,256.13,0.999998,-35.5022,272.932,0.999998,-50.7141,223.928,0.999999,-22.5844,233.279,0.999999,-28.5057,242.328,0.999998,-34.8788,251.054,0.999998,-41.6881,259.434,0.999998,-48.9174,267.274,0.999998,-56.3727,177.564,0.999999,-21.5791,187.02,0.999999,-25.2266,196.286,0.999999,-29.3338,205.339,0.999999,-33.8906,214.157,0.999998,-38.8862,222.72,0.999998,-44.3084,231.006,0.999998,-50.1443,238.997,0.999998,-56.3798,246.671,0.999997,-62.9997,253.835,0.999997,-69.8117,174.868,0.999999,-29.1137,183.958,0.999999,-32.6199,192.865,0.999998,-36.5679,201.567,0.999998,-40.9481,210.043,0.999998,-45.7501,218.274,0.999998,-50.9622,226.239,0.999998,-56.5719,233.92,0.999997,-62.5657,241.297,0.999997,-68.9291,248.176,0.999997,-75.4703,237.725,4,-21.852,247.095,4,-28.4512,256.13,4,-35.5022,238.559,4,-20.6044,247.989,4,-27.246,257.082,4,-34.3423,265.816,4,-41.8762,273.993,4,-49.6531,223.928,4,-22.5844,233.279,4,-28.5057,242.328,4,-34.8788,251.054,4,-41.6881,259.434,4,-48.9174,267.274,4,-56.3727,177.564,4,-21.5791,187.02,4,-25.2266,196.286,4,-29.3338,205.339,4,-33.8906,214.157,4,-38.8862,222.72,4,-44.3084,231.006,4,-50.1443,238.997,4,-56.3798,246.671,4,-62.9997,253.835,4,-69.8117,174.868,4,-29.1137,183.958,4,-32.6199,192.865,4,-36.5679,201.567,4,-40.9481,210.043,4,-45.7501,218.274,4,-50.9622,226.239,4,-56.5719,233.92,4,-62.5657,241.297,4,-68.9291,248.176,4,-75.4703,174.363,4,-30.5264,183.384,4,-34.0061,192.223,4,-37.9243,200.859,4,-42.2714,209.272,4,-47.0371,217.441,4,-52.2098,225.346,4,-57.7771,232.968,4,-63.7256,240.289,4,-70.0409,247.115,4,-76.5313,272.226,4,-64.1488,261.265,4,-75.109,264.801,4,-58.8455,255.962,4,-67.6843,137.124,0.999999,-19.6593,146.723,0.999999,-21.3248,156.228,0.999999,-23.4593,165.618,0.999999,-26.0577,137.124,4,-19.6593,146.723,4,-21.3248,156.228,4,-23.4593,165.618,4,-26.0577,108.25,4,-19.0114,117.665,4,-19.2487,127.308,4,-19.96,136.904,4,-21.1435,146.43,4,-22.7964,155.864,4,-24.9148,165.182,4,-27.4936,117,4,-19.0114,217.601,4,-19,233.221,0.999999,-19,217.601,0.999999,-19,236.025,4,-19,233.221,4,-19,169.757,0.999999,-19,169.757,4,-19,131.778,4,-19,131.778,0.999999,-19,108.25,4,-19,264.808,-4,-42.988,272.932,-4,-50.7141,264.808,-1,-42.988,237.725,-1,-21.852,247.095,-1,-28.4512,256.13,-1,-35.5022,272.932,-1,-50.7141,223.928,-1,-22.5844,233.279,-1,-28.5057,242.328,-1,-34.8788,251.054,-1,-41.6881,259.434,-1,-48.9174,267.274,-1,-56.3727,177.564,-1,-21.5791,187.02,-1,-25.2266,196.286,-1,-29.3338,205.339,-1,-33.8906,214.157,-1,-38.8862,222.72,-1,-44.3084,231.006,-1,-50.1443,238.997,-1,-56.3798,246.671,-1,-62.9997,253.835,-1,-69.8117,174.868,-1,-29.1137,183.958,-1,-32.6199,192.865,-1,-36.5679,201.567,-1,-40.9481,210.043,-1,-45.7501,218.274,-1,-50.9622,226.239,-1,-56.5719,233.92,-1,-62.5657,241.297,-1,-68.9291,248.176,-1,-75.4703,237.725,-4,-21.852,247.095,-4,-28.4512,256.13,-4,-35.5022,238.559,-4,-20.6044,247.989,-4,-27.246,257.082,-4,-34.3423,265.816,-4,-41.8762,273.993,-4,-49.6531,223.928,-4,-22.5844,233.279,-4,-28.5057,242.328,-4,-34.8788,251.054,-4,-41.6881,259.434,-4,-48.9174,267.274,-4,-56.3727,177.564,-4,-21.5791,187.02,-4,-25.2266,196.286,-4,-29.3338,205.339,-4,-33.8906,214.157,-4,-38.8862,222.72,-4,-44.3084,231.006,-4,-50.1443,238.997,-4,-56.3798,246.671,-4,-62.9997,253.835,-4,-69.8117,174.868,-4,-29.1137,183.958,-4,-32.6199,192.865,-4,-36.5679,201.567,-4,-40.9481,210.043,-4,-45.7501,218.274,-4,-50.9622,226.239,-4,-56.5719,233.92,-4,-62.5657,241.297,-4,-68.9291,248.176,-4,-75.4703,174.363,-4,-30.5264,183.384,-4,-34.0061,192.223,-4,-37.9243,200.859,-4,-42.2714,209.272,-4,-47.0371,217.441,-4,-52.2098,225.346,-4,-57.7771,232.968,-4,-63.7256,240.289,-4,-70.0409,247.115,-4,-76.5313,272.226,-4,-64.1488,261.265,-4,-75.109,264.801,-4,-58.8455,255.962,-4,-67.6843,137.124,-1,-19.6593,146.723,-1,-21.3248,156.228,-1,-23.4593,165.618,-1,-26.0577,137.124,-4,-19.6593,146.723,-4,-21.3248,156.228,-4,-23.4593,165.618,-4,-26.0577,108.25,-4,-19.0114,117.665,-4,-19.2487,127.308,-4,-19.96,136.904,-4,-21.1435,146.43,-4,-22.7964,155.864,-4,-24.9148,165.182,-4,-27.4936,117,-4,-19.0114,217.601,-4,-19,233.221,-1,-19,217.601,-1,-19,236.025,-4,-19,233.221,-4,-19,169.757,-1,-19,169.757,-4,-19,131.778,-4,-19,131.778,-1,-19,108.25,-4,-19],"faces":[33,35,0,2,5,0,0,0,0,33,5,4,34,35,1,1,1,1,33,4,3,33,34,2,2,2,2,33,3,98,101,33,3,3,3,3,33,14,13,47,48,4,4,4,4,33,11,12,46,45,5,5,5,5,33,10,11,45,44,6,6,6,6,33,9,10,44,43,7,7,7,7,33,8,9,43,42,8,8,8,8,33,7,8,42,41,9,9,9,9,33,76,183,182,75,10,10,10,10,33,39,146,147,40,11,11,11,11,33,31,32,66,65,12,12,12,12,33,30,31,65,64,13,13,13,13,33,29,30,64,63,14,14,14,14,33,28,29,63,62,15,15,15,15,33,27,28,62,61,16,16,16,16,33,26,27,61,60,17,17,17,17,33,25,26,60,59,18,18,18,18,33,24,25,59,58,19,19,19,19,33,23,24,58,57,20,20,20,20,33,73,180,179,72,21,21,21,21,33,69,176,175,68,22,22,22,22,32,81,105,102,23,23,23,32,102,13,14,24,24,24,32,14,15,16,25,25,25,32,16,17,18,26,26,26,32,18,19,20,27,27,27,32,20,21,22,28,28,28,32,22,32,31,29,29,29,32,22,31,30,30,30,30,32,18,20,22,31,31,31,32,14,16,18,32,32,32,32,81,102,14,33,33,33,32,82,81,14,34,34,34,32,14,18,22,35,35,35,32,22,30,29,36,36,36,32,22,29,28,37,37,37,32,83,82,14,38,38,38,32,84,83,14,39,39,39,32,14,22,28,40,40,40,32,14,28,27,41,41,41,32,23,84,14,42,42,42,32,24,23,14,43,43,43,32,14,27,26,44,44,44,32,25,24,14,45,45,45,32,14,26,25,46,46,46,33,186,184,77,79,47,47,47,47,33,93,200,199,92,48,48,48,48,32,139,173,183,49,49,49,32,183,76,66,49,49,49,32,183,66,32,49,49,49,32,139,183,32,49,49,49,32,22,56,80,50,50,50,32,139,32,22,51,51,51,32,187,163,129,52,52,52,32,129,139,22,51,51,51,32,22,80,187,52,52,52,32,129,22,187,52,52,52,33,184,185,78,77,53,53,53,53,33,96,203,196,89,54,54,54,54,33,2,0,1,6,55,55,55,55,33,185,187,80,78,56,56,56,56,33,74,181,180,73,57,57,57,57,33,94,201,200,93,58,58,58,58,32,33,101,100,59,59,59,32,100,36,37,60,60,60,32,37,38,39,61,61,61,32,39,40,1,62,62,62,32,39,1,0,63,63,63,32,100,37,39,64,64,64,32,34,33,100,65,65,65,32,39,0,35,66,66,66,32,35,34,100,67,67,67,32,100,39,35,68,68,68,33,100,207,143,36,69,69,69,69,32,47,103,97,70,70,70,32,97,41,42,71,71,71,32,42,43,44,72,72,72,32,44,45,46,73,73,73,32,79,77,78,74,74,74,32,44,46,79,75,75,75,32,97,42,44,76,76,76,32,48,47,97,77,77,77,32,49,48,97,78,78,78,32,97,44,79,79,79,79,32,79,78,80,80,80,80,32,80,56,55,81,81,81,32,80,55,54,82,82,82,32,97,79,80,83,83,83,32,50,49,97,84,84,84,32,51,50,97,85,85,85,32,97,80,54,86,86,86,32,97,54,53,87,87,87,32,52,51,97,88,88,88,32,53,52,97,89,89,89,33,15,14,48,49,90,90,90,90,33,16,15,49,50,91,91,91,91,33,17,16,50,51,92,92,92,92,33,18,17,51,52,93,93,93,93,33,19,18,52,53,94,94,94,94,33,20,19,53,54,95,95,95,95,33,21,20,54,55,96,96,96,96,33,22,21,55,56,97,97,97,97,33,90,197,203,96,98,98,98,98,33,67,174,202,95,99,99,99,99,33,38,145,146,39,100,100,100,100,33,95,202,201,94,101,101,101,101,33,36,143,144,37,102,102,102,102,33,71,178,177,70,103,103,103,103,33,13,102,103,47,104,104,104,104,33,89,196,213,106,105,105,105,105,33,84,23,57,88,106,106,106,106,33,83,84,88,87,107,107,107,107,33,82,83,87,86,108,108,108,108,33,81,82,86,85,109,109,109,109,33,91,198,197,90,110,110,110,110,33,68,175,174,67,111,111,111,111,33,72,179,178,71,112,112,112,112,32,7,99,98,113,113,113,32,98,3,4,114,114,114,32,4,5,2,115,115,115,32,2,6,12,116,116,116,32,2,12,11,117,117,117,32,98,4,2,118,118,118,32,8,7,98,119,119,119,32,9,8,98,120,120,120,32,98,2,11,121,121,121,32,10,9,98,122,122,122,32,10,98,11,123,123,123,33,70,177,176,69,124,124,124,124,32,66,76,75,125,125,125,32,66,75,74,126,126,126,32,64,65,66,127,127,127,32,62,63,64,128,128,128,32,60,61,62,129,129,129,32,58,59,60,130,130,130,32,88,57,58,131,131,131,32,86,87,88,132,132,132,32,104,85,86,133,133,133,32,89,106,104,134,134,134,32,91,90,96,135,135,135,32,96,89,104,136,136,136,32,104,86,88,137,137,137,32,88,58,60,138,138,138,32,60,62,64,139,139,139,32,64,66,74,140,140,140,32,64,74,73,141,141,141,32,91,96,104,142,142,142,32,92,91,104,143,143,143,32,60,64,73,144,144,144,32,60,73,72,145,145,145,32,92,104,88,146,146,146,32,93,92,88,147,147,147,32,60,72,71,148,148,148,32,60,71,70,149,149,149,32,94,93,88,150,150,150,32,95,94,88,23,23,23,32,60,70,69,151,151,151,32,60,69,68,152,152,152,32,67,95,88,153,153,153,32,60,68,67,154,154,154,32,67,88,60,155,155,155,33,37,144,145,38,156,156,156,156,33,75,182,181,74,157,157,157,157,33,97,99,7,41,158,158,158,158,33,104,105,81,85,159,159,159,159,32,119,153,186,160,160,160,32,186,79,46,160,160,160,32,186,46,12,160,160,160,32,119,186,12,160,160,160,32,6,1,40,161,161,161,32,119,12,6,51,51,51,32,147,108,113,161,161,161,32,113,119,6,51,51,51,32,6,40,147,162,162,162,32,113,6,147,162,162,162,33,109,107,142,112,0,0,0,0,33,112,142,141,111,1,1,1,1,33,111,141,140,110,2,2,2,2,33,110,140,208,205,3,3,3,3,33,121,155,154,120,4,4,4,4,33,118,152,153,119,5,5,5,5,33,117,151,152,118,6,6,6,6,33,116,150,151,117,7,7,7,7,33,115,149,150,116,8,8,8,8,33,114,148,149,115,9,9,9,9,33,138,172,173,139,12,12,12,12,33,137,171,172,138,13,13,13,13,33,136,170,171,137,14,14,14,14,33,135,169,170,136,15,15,15,15,33,134,168,169,135,16,16,16,16,33,133,167,168,134,17,17,17,17,33,132,166,167,133,18,18,18,18,33,131,165,166,132,19,19,19,19,33,130,164,165,131,20,20,20,20,32,138,139,129,163,163,163,32,129,128,127,164,164,164,32,127,126,125,165,165,165,32,125,124,123,166,166,166,32,123,122,121,167,167,167,32,121,120,209,168,168,168,32,209,212,188,169,169,169,32,209,188,189,170,170,170,32,123,121,209,171,171,171,32,127,125,123,172,172,172,32,138,129,127,173,173,173,32,137,138,127,174,174,174,32,127,123,209,175,175,175,32,209,189,190,176,176,176,32,209,190,191,177,177,177,32,136,137,127,178,178,178,32,135,136,127,179,179,179,32,209,191,130,180,180,180,32,209,130,131,181,181,181,32,135,127,209,182,182,182,32,134,135,209,183,183,183,32,209,131,132,184,184,184,32,133,134,209,185,185,185,32,132,133,209,186,186,186,33,109,113,108,107,55,55,55,55,32,107,108,147,187,187,187,32,147,146,145,188,188,188,32,145,144,143,189,189,189,32,143,207,208,190,190,190,32,143,208,140,169,169,169,32,147,145,143,191,191,191,32,142,107,147,192,192,192,32,143,140,141,193,193,193,32,142,147,143,194,194,194,32,141,142,143,195,195,195,32,162,163,187,196,196,196,32,187,185,184,197,197,197,32,186,153,152,198,198,198,32,187,184,186,199,199,199,32,161,162,187,200,200,200,32,160,161,187,201,201,201,32,187,186,152,202,202,202,32,152,151,150,203,203,203,32,150,149,148,204,204,204,32,148,204,210,190,190,190,32,148,210,154,190,190,190,32,152,150,148,205,205,205,32,160,187,152,206,206,206,32,159,160,152,207,207,207,32,152,148,154,208,208,208,32,152,154,155,209,209,209,32,158,159,152,190,190,190,32,157,158,152,210,210,210,32,152,155,156,211,211,211,32,152,156,157,212,212,212,33,122,156,155,121,90,90,90,90,33,123,157,156,122,91,91,91,91,33,124,158,157,123,92,92,92,92,33,125,159,158,124,93,93,93,93,33,126,160,159,125,94,94,94,94,33,127,161,160,126,95,95,95,95,33,128,162,161,127,96,96,96,96,33,129,163,162,128,97,97,97,97,33,120,154,210,209,104,104,104,104,33,191,195,164,130,106,106,106,106,33,190,194,195,191,107,107,107,107,33,189,193,194,190,108,108,108,108,33,188,192,193,189,109,109,109,109,32,118,119,113,213,213,213,32,113,109,112,214,214,214,32,112,111,110,215,215,215,32,110,205,206,216,216,216,32,110,206,114,217,217,217,32,113,112,110,218,218,218,32,117,118,113,219,219,219,32,116,117,113,220,220,220,32,113,110,114,221,221,221,32,115,116,113,222,222,222,32,113,114,115,223,223,223,32,182,183,173,224,224,224,32,173,172,171,225,225,225,32,171,170,169,226,226,226,32,169,168,167,227,227,227,32,167,166,165,228,228,228,32,165,164,195,229,229,229,32,195,194,193,190,190,190,32,193,192,211,190,190,190,32,211,213,196,190,190,190,32,203,197,198,190,190,190,32,211,196,203,190,190,190,32,195,193,211,190,190,190,32,167,165,195,230,230,230,32,171,169,167,231,231,231,32,182,173,171,232,232,232,32,181,182,171,233,233,233,32,211,203,198,169,169,169,32,211,198,199,190,190,190,32,180,181,171,234,234,234,32,179,180,171,235,235,235,32,195,211,199,190,190,190,32,195,199,200,190,190,190,32,179,171,167,236,236,236,32,178,179,167,237,237,237,32,195,200,201,190,190,190,32,195,201,202,238,238,238,32,177,178,167,233,233,233,32,176,177,167,239,239,239,32,195,202,174,240,240,240,32,175,176,167,241,241,241,32,195,174,175,242,242,242,32,167,195,175,243,243,243,33,204,148,114,206,158,158,158,158,33,211,192,188,212,159,159,159,159,33,92,199,198,91,244,244,244,244]},"single_double_L_b":{"faces":[32,5,0,1,0,0,0,32,5,1,2,1,1,1,32,3,4,5,2,2,2,32,2,3,5,3,3,3,32,15,6,7,4,4,4,32,7,8,0,5,5,5,32,5,9,10,6,6,6,32,5,10,11,5,5,5,32,11,12,13,7,7,7,32,14,15,7,6,6,6,32,5,11,13,6,6,6,32,14,7,0,8,8,8,32,0,5,13,5,5,5,32,0,13,14,6,6,6,33,1,0,8,16,9,9,9,9,33,17,9,5,4,10,10,10,10,32,20,6,15,11,11,11,32,15,18,19,12,12,12,32,15,19,20,13,13,13,33,21,7,6,20,14,14,14,14,32,8,7,21,15,15,15,32,22,16,8,16,16,16,32,21,22,8,15,15,15,32,30,23,24,15,15,15,32,25,26,27,17,17,17,32,30,24,25,18,18,18,32,29,30,25,19,19,19,32,25,27,10,20,20,20,32,10,9,17,21,21,21,32,28,29,25,22,22,22,32,10,17,28,23,23,23,32,25,10,28,24,24,24,33,27,31,11,10,25,25,25,25,32,11,31,32,26,26,26,32,33,34,35,27,27,27,32,11,32,33,28,28,28,32,39,12,11,11,11,11,32,38,39,11,29,29,29,32,11,33,35,30,30,30,32,11,35,36,31,31,31,32,37,38,11,32,32,32,32,36,37,11,33,33,33,33,40,13,12,39,10,10,10,10,32,43,14,13,34,34,34,32,13,40,41,35,35,35,32,42,43,13,36,36,36,32,13,41,42,37,37,37,33,18,15,14,43,38,38,38,38,33,44,45,24,23,39,39,39,39,32,52,46,47,6,6,6,32,52,47,48,7,7,7,32,50,51,52,6,6,6,32,25,24,45,5,5,5,32,50,52,48,5,5,5,32,33,25,45,5,5,5,32,45,50,48,5,5,5,32,49,34,33,6,6,6,32,45,48,49,6,6,6,32,49,33,45,4,4,4,33,25,33,32,26,40,40,40,40,33,27,26,32,31,6,6,6,6,33,35,34,49,53,41,41,41,41,33,50,45,44,54,42,42,42,42,33,55,46,52,56,43,43,43,43,33,57,47,46,55,11,11,11,11,33,58,48,47,57,44,44,44,44,33,48,58,53,49,45,45,45,45,33,59,51,50,54,46,46,46,46,33,56,52,51,59,47,47,47,47,33,22,21,20,19,48,48,48,48,32,42,2,1,49,49,49,32,1,16,22,50,50,50,32,22,19,18,51,51,51,32,43,42,1,49,49,49,32,22,18,43,52,52,52,32,1,22,43,52,52,52,33,3,2,42,41,53,53,53,53,32,38,28,17,54,54,54,32,4,3,41,55,55,55,32,38,17,4,56,56,56,32,40,39,38,57,57,57,32,4,41,40,58,58,58,32,4,40,38,59,59,59,33,29,28,38,37,60,60,60,60,33,30,29,37,36,61,61,61,61,32,58,57,55,62,62,62,32,55,56,59,63,63,63,32,55,59,54,64,64,64,32,58,55,54,63,63,63,32,44,23,30,65,65,65,32,58,54,44,66,66,66,32,36,35,53,67,67,67,32,53,58,44,68,68,68,32,44,30,36,69,69,69,32,44,36,53,70,70,70],"metadata":{"generator":"io_three","uvs":0,"vertices":60,"version":3,"normals":71,"type":"Geometry","faces":95},"uvs":[],"vertices":[215.75,-0.999999,17.5,33.9362,-0.999999,17.5,44.4325,-0.999999,15.8488,59.6285,-0.999999,11.8704,66.3478,-1,9.49998,215.75,-1,9.49998,215.75,4,19,215.75,-4,19,215.75,-4,17.5,215.75,-4,9.49998,215.75,-4,6,215.75,4,6,215.75,4,9.49998,215.75,1,9.49998,215.75,1,17.5,215.75,4,17.5,33.9362,-4,17.5,66.3479,-4,9.49998,33.9362,4,17.5,28.928,4,18.2878,13.5006,4,19,13.5006,-4,19,28.928,-4,18.2878,109.517,-4,-9.5,215.75,-4,-9.50002,215.75,-4,-6.00003,224.75,-4,-7.50003,224.75,-4,7.50001,74.4451,-4,6.64343,88.8677,-4,0.506304,102.91,-4,-6.18101,224.75,4,7.50001,224.75,4,-7.50003,215.75,4,-6.00003,215.75,4,-9.50002,109.517,4,-9.5,102.91,4,-6.18101,88.8677,4,0.506304,74.4451,4,6.64343,66.3479,4,9.49998,66.3478,1,9.49998,59.6285,1,11.8704,44.4325,1,15.8488,33.9362,1,17.5,109.517,-1,-9.50002,215.75,-1,-9.50002,215.75,4,-19,215.75,4,-17.5,215.75,0.999999,-17.5,215.75,1,-9.50002,215.75,-1,-17.5,215.75,-4,-17.5,215.75,-4,-19,109.517,1,-9.50002,125.443,-1,-17.5,128.429,4,-19,128.429,-4,-19,125.443,4,-17.5,125.443,0.999999,-17.5,125.443,-4,-17.5],"normals":[-9.37938e-15,-1,4.47034e-8,-5.25692e-10,-1,3.27564e-8,0,-1,5.02897e-8,-8.61149e-11,-1,4.4618e-8,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,2.09813e-7,0,-1,0,0,1,0,1,0,0,1,0,0,1,0,-1.79183e-7,0,1,0,-1,0,0,-1,0,7.94725e-9,-1,4.76836e-8,0,-1,0,-1.13979e-10,-1,7.10654e-8,-9.93419e-9,-1,5.96045e-8,0,-1,6.81199e-8,-2.00799e-9,-1,3.41297e-8,3.85023e-10,-1,8.45552e-8,2.7141e-10,-1,5.96045e-8,-0.164401,0,0.986394,7.94735e-9,1,-4.76836e-8,-1.1619e-14,1,-6.81199e-8,-9.93406e-9,1,-5.96045e-8,0,1,0,-2.8056e-10,1,-5.96045e-8,1.16538e-9,1,-6.95146e-8,-3.57622e-10,1,-7.85376e-8,-2.0299e-9,1,-3.99147e-8,9.37938e-15,1,-4.47034e-8,0,1,-5.02897e-8,2.73083e-9,1,1.73595e-8,-1.55373e-10,1,-6.05228e-8,2.09813e-7,0,-1,-8.52835e-8,-0.00000301997,-1,-0.164399,0,-0.986394,-8.52835e-8,0.00000301997,-1,3.75988e-15,-1,4.47036e-8,0,0,-1,1.90086e-7,0,1,-3.75988e-15,1,-4.47036e-8,1.90086e-7,0,1,0,-1,0,-0.046112,0,-0.998936,-0.1554,0,-0.987852,-0.155404,0,-0.987851,-0.155404,0,-0.987851,-0.155404,0,-0.987851,-0.253266,0,-0.967397,-0.332687,0,-0.943037,-0.332686,0,-0.943038,-0.332682,-0.00000592237,-0.943039,-0.332687,0.00000592246,-0.943037,-0.332686,0,-0.943038,-0.332685,0,-0.943038,-0.391547,0,-0.920158,-0.42997,0,-0.902843,-0.448904,0,-0.89358,-0.448904,0,-0.89358,-0.448904,0,-0.89358,-0.448857,-0.0000019728,-0.893603,-0.448879,0,-0.893592,-0.448857,0.0000019728,-0.893603,-0.448879,0,-0.893592,-0.448858,0,-0.893603,-0.448858,0,-0.893603]},"turnout_L_ab":{"normals":[-0.534995,0,-0.844855,0,1,-7.15254e-7,0,1,0,-1.33106e-13,1,-7.15254e-7,0.534997,0,0.844854,0.492898,0,0.870087,0.534996,0,0.844855,0.534996,-0.00000134076,0.844854,0.492896,0,0.870088,0.492896,0,0.870088,0.492895,-0.0000121933,0.870089,0.449609,0,0.893225,0.492896,4.23381e-7,0.870088,0.405239,0,0.914211,0.449609,0,0.893225,0.359893,0,0.932994,0.405239,0,0.914211,0,1,-5.20414e-8,1.86913e-8,1,-8.84035e-9,1.83522e-8,1,-9.80941e-9,0,1,0,0,1,0,0.313679,0,0.949529,0.359893,0,0.932994,1.89574e-8,1,-8.40323e-9,-0.449609,-3.11977e-7,-0.893226,-0.313679,0,-0.949529,0.266711,0,0.963777,0.266711,0,0.963777,0.266711,-2.58757e-7,0.963776,0.313679,0,0.949529,-0.405239,0,-0.914211,6.60659e-15,1,7.8062e-8,0,1,-9.93271e-8,-0.266711,0,-0.963777,0.2191,0,0.975702,0.266711,-1.37002e-7,0.963776,3.938e-8,1,-1.30091e-8,-0.359892,0,-0.932994,0,1,2.60224e-7,1.10969e-9,1,-4.88318e-8,-2.72714e-8,1,9.09603e-8,-1.31009e-13,1,-7.15254e-7,-3.08222e-13,1,-0.00000112597,8.80514e-8,1,-1.26037e-7,0.170958,0,0.985278,0,1,0,-0.313679,0,-0.949529,-2.40551e-9,1,-4.29933e-8,0.40524,3.86662e-7,0.91421,-1.33764e-13,1,-7.15254e-7,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,-5.54426e-7,0.99248,-0.266711,-4.12639e-8,-0.963777,4.73139e-9,1,-4.47193e-8,0.35989,5.74434e-8,0.932995,0,1,-1.30112e-7,-1.36404e-13,1,-7.15254e-7,0.0735638,0,0.99729,0.122409,0,0.99248,0,1,2.03062e-7,-1.6129e-9,1,-4.62117e-8,-3.07239e-8,1,3.41453e-8,0.31368,5.74439e-8,0.949529,-1.05888e-8,1,-5.84156e-8,0,1,0,-2.13936e-13,1,-0.00000110977,-3.87372e-8,1,-7.09508e-7,0.111157,0,0.993803,0.266711,8.61655e-8,0.963776,9.71906e-9,1,4.07343e-8,3.23418e-9,1,-4.84071e-8,0.122409,0,0.99248,-5.97138e-8,1,-0.00000170913,0.111157,0,0.993803,0.2191,2.87219e-8,0.975702,-5.84101e-9,1,-4.27054e-8,1.40761e-8,1,1.02966e-7,0.0735639,0,0.99729,-0.00000123575,1,-0.00000770339,0,1,0,0,1,0,0.170958,0,0.985278,-3.90934e-9,1,-3.45783e-8,1.42861e-8,1,2.34351e-7,0.307795,0,0.951453,-1.00185e-11,1,-0.0000919197,0.122409,0,0.99248,1.79999e-8,1,-4.89166e-8,2.24102e-8,1,6.10201e-7,0,0,1,-0.999982,-0.00591354,-0.00000215972,-1,0,-0.00000224171,-1,0,-0.00000299018,-1,4.66913e-7,-0.00000236763,-1,0,-0.00000224171,-1,-0.0004917,-0.000166424,-1,-1.21638e-7,-0.00000216002,-1,0.00000187029,-0.00000236989,-1,0,-0.00000197688,-0.986871,-0.161509,-0.00000195501,-1,-7.45058e-8,-0.00000217556,-1,0,-0.00000471824,-1,0,-0.00000471824,-1,-7.80839e-7,-0.00000264645,-1,-0.000014135,-2.06411e-9,-1,-0.00000823475,-0.00000196882,0.073564,0,0.99729,-3.49624e-9,1,-5.4909e-8,1.96691e-7,1,0.00000299966,0.164399,0,0.986394,-8.91245e-9,1,-1.05472e-7,0,1,0.000146028,0.164399,0,-0.986394,0.130446,0,0.991455,-1.99086e-9,1,-5.19151e-8,-1,0,-8.34465e-7,-1.32637e-13,1,-1.58947e-7,1.91621e-7,1,-4.47033e-8,3.55853e-8,1,-5.26772e-8,0,1,-2.47157e-7,3.52188e-7,1,-2.38922e-7,-0.00000120976,1,5.95959e-7,-9.91836e-15,1,-1.17193e-7,-8.10064e-8,1,-2.08844e-7,1.52753e-14,1,8.82621e-8,2.48954e-7,1,3.86709e-7,0,1,5.35926e-7,0,1,-9.6863e-8,1.05856e-14,1,-1.00392e-7,-8.25344e-9,1,-1.1189e-7,5.88463e-15,1,-1.12703e-7,-4.21965e-9,1,-1.19186e-7,0,1,-1.19812e-7,-3.1303e-8,1,-1.80408e-7,1.66955e-14,1,-1.86634e-7,-1.03727e-7,1,-5.09395e-7,0,1,-5.35377e-7,1.30068e-14,1,8.20447e-8,0,1,8.20447e-8,0,1,8.468e-8,1.33403e-8,1,1.00908e-7,1.31372e-14,1,1.02221e-7,2.21227e-8,1,1.31325e-7,3.1475e-14,1,1.34606e-7,4.05527e-8,1,1.99315e-7,4.41569e-14,1,2.07382e-7,1.2385e-7,1,4.97849e-7,1.44773e-13,1,5.28872e-7,0,1,8.468e-8,1.80308e-8,1,8.20447e-8,0,1,-1.00392e-7,-1.10875e-8,1,-9.6863e-8,0,1,2.91563e-7,-2.67259e-7,1,1.13876e-7,0,1,-1.5706e-7,2.72506e-9,1,-4.79467e-8,-0.00000185602,1,-0.0000046259,0,0.00000190735,-1,0,0.00000190735,-1,5.28153e-9,1,-0.000117925,7.39862e-7,1,0.00000142195,4.14602e-13,1,0.00000273149,1.60372e-8,1,5.86822e-7,0,1,-0.0000624653,8.87628e-9,1,4.03894e-8,-6.57382e-9,1,-1.34259e-7,-2.03681e-9,1,-1.2143e-7,-7.39573e-9,1,-8.66184e-8,-6.99529e-9,1,-1.04761e-7,-7.9179e-9,1,-8.00333e-8,-5.28777e-8,0.00000254313,-1,-1.08974e-7,0.00000413259,-1,0,-1,0,-8.34472e-7,0.00000624897,-1,0,9.53675e-7,-1,-8.18729e-8,0.00000328117,-1,-9.3102e-8,0.00000380387,-1,-9.13133e-8,0.00000378575,-1,-1.16262e-7,0.00000412526,-1,1.51786e-7,0,1,0,0,1,1.56123e-7,4.43972e-8,1,0,-0.00000254313,1,1.66879e-7,9.12559e-8,1,1.76442e-7,2.05789e-7,1,-3.91239e-7,1,-0.00000231527,-2.03793e-7,1,-9.54707e-7,9.0784e-14,1,-5.35376e-7,1.02216e-7,1,4.07719e-7,-1.53237e-7,1,-7.505e-7,-1.89797e-8,0.999995,0.00322308,0,0.999998,0.00208333,2.45842e-7,1,0.00000124285,1.22457e-7,1,7.05752e-7,5.25106e-8,1,6.4856e-7,8.0761e-8,1,5.69827e-7,-1.6957e-7,0.00000254313,1,1.48022e-7,0,-1,2.17983e-7,1.6241e-14,-1,0,6.35782e-7,-1,1.31085e-7,1.45494e-7,-1,-0.534995,0,-0.844855,0,-1,-5.56309e-7,0,-1,0,-1.03527e-13,-1,-5.56309e-7,0.534997,0,0.844854,0.492898,0,0.870087,0.534996,0,0.844854,0.534996,0.0000019966,0.844855,0.131225,0.963909,0.231645,0.492896,0,0.870088,0.492896,-4.23381e-7,0.870088,0,-1,0,0,-1,1.04083e-7,-3.647e-8,-1,1.94936e-8,-3.75186e-8,-1,1.77451e-8,-0.449609,3.11977e-7,-0.893226,0.266711,0,0.963776,0.266711,2.58757e-7,0.963776,-1.9347e-8,-1,7.46276e-9,1.1011e-14,-1,1.30103e-7,0,-1,0,-0.266711,0,-0.963777,0.266711,1.37002e-7,0.963776,1.5084e-8,-1,7.8714e-8,0,-1,2.60224e-7,2.8864e-8,-1,1.16452e-7,-3.19977e-8,-1,6.16259e-8,-1.01896e-13,-1,-5.56309e-7,2.36734e-7,-1,-7.18125e-8,-1.52284e-13,-1,-5.56309e-7,9.81273e-9,-1,1.24635e-7,-0.313679,-5.54751e-8,-0.949529,-2.53136e-9,-1,4.48976e-8,0.40524,-3.86662e-7,0.91421,-1.04039e-13,-1,-5.56309e-7,0.122409,5.54426e-7,0.99248,-0.266711,4.12639e-8,-0.963777,1.63667e-9,-1,3.86923e-8,0.35989,0,0.932995,-1.06092e-13,-1,-5.56309e-7,0,-1,2.90088e-7,1.92106e-8,-1,1.09802e-7,-4.32961e-8,-1,5.20511e-8,-9.74224e-9,-1,6.59648e-8,0,-1,0,-1.07242e-13,-1,-5.56309e-7,-4.68738e-8,-1,-8.58539e-7,0.266711,8.61655e-8,0.963777,8.41395e-9,-1,1.26981e-7,9.58103e-9,-1,6.0037e-8,-5.02066e-8,-1,-0.00000136709,0.2191,5.74437e-8,0.975702,-3.34753e-9,-1,5.62919e-8,1.27921e-8,-1,1.8233e-7,-0.00000116976,-1,-0.00000679338,5.864e-9,-1,5.18675e-8,1.67279e-8,-1,3.18402e-7,-9.42913e-12,-1,-0.0000865127,0.122409,0,0.99248,3.99992e-9,-1,4.51307e-8,2.45325e-8,-1,7.41195e-7,-1,-4.66916e-7,-0.00000299018,-0.99998,0.00627683,-0.00000216026,-1,0,-0.00000224171,-1,0,-0.00000252327,-1,1.21638e-7,-0.00000216002,-1,0.00049171,-0.000166427,-1,-0.00000187029,-0.00000236988,-1,7.45058e-8,-0.00000217556,-0.987922,0.154949,-0.00000197044,-1,0.0000141341,-2.35883e-9,-1,7.80839e-7,-0.00000264645,-1,0.00000823475,-0.00000196882,-8.05924e-9,-1,4.94066e-8,2.24789e-7,-1,0.00000342818,0,-1,0.000166889,-8.92414e-9,-1,1.05602e-7,1.99086e-9,-1,5.19151e-8,2.14232e-8,-1,1.62827e-7,7.49812e-8,-1,4.47035e-8,1.00344e-7,-1,4.59997e-8,0,-1,-1.34813e-7,2.61591e-7,-1,-1.06041e-7,-0.00000110317,-1,6.23441e-7,-1.32245e-15,-1,-1.56258e-8,-7.42892e-8,-1,-9.96771e-8,2.54588e-14,-1,1.60476e-7,2.08794e-7,-1,4.1078e-7,0,-1,5.35926e-7,0,-1,-1.4902e-8,0,-1,-1.4902e-8,1.3232e-15,-1,-1.5445e-8,-7.08194e-9,-1,-2.53109e-8,2.20674e-15,-1,-2.60084e-8,-1.0423e-8,-1,-4.20219e-8,0,-1,-4.3568e-8,-1.9331e-8,-1,-8.09885e-8,6.95644e-15,-1,-8.48336e-8,-9.86195e-8,-1,-3.91701e-7,0,-1,-4.16404e-7,3.57687e-14,-1,1.64089e-7,0,-1,1.64089e-7,0,-1,1.53964e-7,1.24764e-8,-1,1.6914e-7,3.28429e-14,-1,1.70369e-7,2.50825e-8,-1,2.03366e-7,3.93438e-14,-1,2.07087e-7,3.31813e-8,-1,2.60033e-7,4.96765e-14,-1,2.66633e-7,1.01024e-7,-1,5.03566e-7,1.44773e-13,-1,5.28872e-7,0,-1,1.53964e-7,-6.92811e-8,-1,1.64089e-7,0,-1,-1.5445e-8,-1.70577e-9,-1,-1.4902e-8,0,-1,3.49875e-7,0,-1,-4.83263e-8,-0.00000137124,-1,-0.00000334994,-2.03483e-7,-1,2.1459e-7,2.1323e-8,-1,7.98461e-8,0,-0.00000190735,-1,0,-0.00000190735,-1,0,-0.00000190735,-1,5.2819e-9,-1,-0.000110988,5.32209e-8,-1,7.21506e-7,0,-1,-0.0000555247,6.78512e-7,-1,0.00000139589,3.90214e-13,-1,0.00000257081,1.48673e-8,-1,5.82595e-7,-5.85305e-9,-1,-2.78019e-8,4.98389e-8,-1,6.83276e-7,1.54561e-9,-1,6.05665e-8,-7.37349e-9,-1,-5.97836e-8,2.93828e-9,-1,8.57347e-8,-5.28777e-8,-0.00000254313,-1,0,-9.53675e-7,-1,-1.08974e-7,-0.00000413259,-1,-8.34472e-7,-0.00000624897,-1,-1.24968e-7,-0.0000045063,-1,-8.73688e-8,-0.00000372434,-1,-9.3102e-8,-0.00000380387,-1,-9.0421e-8,-0.00000377672,-1,1.51786e-7,0,1,0,0.00000254313,1,1.56123e-7,-4.43972e-8,1,1.69949e-7,-1.04633e-7,1,-4.0129e-7,-1,-0.00000228251,-1.90005e-8,-0.999994,0.00336321,-1.46658e-8,-1,-1.28124e-7,0,-0.999997,0.00222222,-1.4549e-7,-1,-6.00731e-7,2.4677e-14,-1,-1.45526e-7,1.18362e-7,-1,1.13038e-8,5.601e-8,-1,7.44795e-7,7.87901e-8,-1,6.81307e-7,-2.97261e-8,-1,4.83977e-8,1.57403e-7,-1,9.3758e-7,0.00000204532,-1,0.00000915574,-1.6957e-7,-0.00000254313,1,0,-0.00000127157,-1,2.17983e-7,-1.6241e-14,-1,1.36265e-7,-2.38342e-7,-1],"uvs":[],"vertices":[125.221,0.999999,-19,122.852,1,-17.5,122.852,4,-17.5,125.221,4,-19,118.077,0.999999,-19,118.976,1,-17.5,125.656,4,-17.5,128.025,4,-19,109.601,0.999999,-19,106.953,1,-17.5,125.656,1,-17.5,128.025,0.999999,-19,109.601,4,-19,106.953,4,-17.5,120.814,0.999999,-14.4335,105.298,4,-19,106.1,4,-17.5,112.105,1,-9.5,110.778,1,-8.74826,93.1735,4,-19,93.8829,4,-17.5,100.475,1,-3.56229,112.105,4,-9.5,110.778,4,-8.74826,81.5995,4,-19,82.2208,4,-17.5,89.9301,1,1.11191,100.475,4,-3.56229,110.376,4,-9.5,70.4871,4,-19,71.0238,4,-17.5,79.1685,1,5.26306,89.9301,4,1.11191,108.935,4,-9.5,99.8334,4,-4.91867,61.7573,4,-19,59.9408,4,-18.3999,60.2138,4,-17.5,68.2164,1,8.88113,79.1685,4,5.26306,89.3559,4,-0.274323,108.935,1,-9.5,99.8334,1,-4.91867,61.7573,0.999999,-19,59.9408,0.999999,-18.3999,56.6889,4,-17.5,65.98,1,9.5,57.0998,1,11.9575,68.2164,4,8.88113,78.663,4,3.85031,89.3559,1,-0.274323,97.6666,1,-9.5,59.7588,0.999999,-19,56.6889,1,-17.5,45.8457,1,14.4846,65.9801,4,9.49999,67.7808,4,7.44529,78.663,1,3.85031,90.4274,1,-9.5,86.2935,1,-7.66759,49.3454,0.999999,-19,49.7212,1,-17.5,34.4812,1,16.4565,60.356,4,9.49999,67.7808,1,7.44529,75.9671,1,-3.68433,90.4274,4,-9.49999,86.2935,4,-7.66759,39.1853,0.999999,-19,39.4837,1,-17.5,26.0211,1,17.5,23.0336,1,17.8685,60.356,1,9.5,65.4578,1,-0.212544,75.9671,4,-3.68433,85.5345,4,-9.49999,29.2218,0.999999,-19,29.4443,1,-17.5,11.5305,1,18.717,26.0211,4,17.5,23.0336,4,17.8685,54.7908,1,2.7394,56.4843,1,9.5,65.4578,4,-0.212545,73.8863,4,-9.49999,23.7784,0.999999,-19,19.4549,0.999999,-18.4667,19.5501,1,-17.5,9.00015,1,19,11.5305,4,18.717,22.9973,4,17.5,54.7908,4,2.7394,43.9918,1,5.16438,44.8542,1,9.5,62.6405,4,-9.49999,23.7784,4,-19,19.4549,4,-18.4667,9.73901,0.999999,-17.7501,9.75129,1,-17.5,9.00015,4,19,11.4707,4,17.5,43.9918,4,5.16438,51.725,4,-9.49999,33.0868,1,7.05653,33.4493,1,9.5,19.4024,4,-19,9.73901,4,-17.7501,9.00004,0.999999,-17.511,9.00004,1,-17.5,8.99996,4,17.5,8.99996,4,19,33.0868,4,7.05653,41.0749,4,-9.49999,22.1021,1,8.41135,22.2093,1,9.5,9.67761,4,-19,9.00004,4,-17.511,0.250036,0.999999,-17.511,0.250036,1,-17.5,0.249963,4,17.5,0.24996,4,19,22.1021,4,8.41135,30.631,4,-9.49999,11.0642,1,9.22555,11.0777,1,9.5,9.00004,4,-19,0.250036,4,-17.511,0.250019,1,-9.50859,0.250039,4,-19,0.25001,4,-6.5,0.250019,4,-9.49998,0.250017,1,-9.5,0.249964,0.999999,17.5,0.249963,1,17.4995,0.249979,1,9.5,0.249979,1,9.49714,0.249979,4,9.49714,0.249993,4,6.5,11.0642,4,9.22555,20.338,4,-9.49999,8.99998,1,9.49714,8.99998,1,9.5,9.25001,4,-8,9.00144,4,-9.49998,8.99998,4,9.49714,9.24999,4,8,10.1443,4,-9.49998,96.412,0.999999,-12.1528,106.298,0.999999,-17.129,110.07,1,-10.0715,120.042,0.999999,-15.7205,8.99996,1,17.4995,11.4568,1,17.2183,22.8865,1,16.3752,34.261,1,14.9723,45.553,1,13.013,56.7352,1,10.502,9.00002,1,-9.50859,10.1317,1,-9.75728,20.2393,1,-10.5029,30.2982,0.999999,-11.7435,40.284,0.999999,-13.4762,50.1728,0.999999,-15.6968,125.221,-1,-19,122.852,-1,-17.5,122.852,-4,-17.5,125.221,-4,-19,118.077,-1,-19,118.976,-1,-17.5,125.656,-4,-17.5,128.025,-4,-19,109.601,-1,-19,106.953,-1,-17.5,125.656,-1,-17.5,128.025,-1,-19,109.601,-4,-19,106.953,-4,-17.5,120.814,-1,-14.4335,120.814,-6.30909e-7,-14.4335,128.025,-8.30516e-7,-19,105.298,-4,-19,106.1,-4,-17.5,110.778,-3.82399e-7,-8.74826,112.105,-1,-9.5,110.778,-1,-8.74826,93.1735,-4,-19,93.8829,-4,-17.5,100.475,-1.55712e-7,-3.56229,100.475,-1,-3.56229,112.105,-4,-9.5,110.778,-4,-8.74826,81.5995,-4,-19,82.2208,-4,-17.5,89.9301,4.8603e-8,1.11191,89.9301,-1,1.11191,100.475,-4,-3.56229,110.376,-4,-9.5,70.4871,-4,-19,71.0238,-4,-17.5,79.1685,2.30056e-7,5.26306,79.1685,-1,5.26306,89.9301,-4,1.11191,108.935,-4,-9.5,99.8334,-4,-4.91867,61.7573,-4,-19,59.9408,-4,-18.3999,60.2138,-4,-17.5,68.2164,3.88207e-7,8.88113,68.2164,-1,8.88113,79.1685,-4,5.26306,89.3559,-4,-0.274322,108.935,-1,-9.5,99.8334,-1,-4.91867,61.7573,-1,-19,59.9408,-1,-18.3999,56.6889,-4,-17.5,57.0998,5.22678e-7,11.9575,65.98,-0.999999,9.5,57.0998,-0.999999,11.9575,68.2164,-4,8.88113,78.663,-4,3.85031,89.3559,-1,-0.274322,97.6666,-1,-9.5,59.7588,-1,-19,56.6889,-1,-17.5,45.8457,6.33144e-7,14.4846,45.8457,-0.999999,14.4846,65.9801,-4,9.49999,67.7808,-4,7.44529,78.663,-1,3.85031,90.4274,-1,-9.5,86.2935,-1,-7.66759,49.3454,-1,-19,49.7212,-1,-17.5,34.4812,7.19338e-7,16.4565,34.4812,-0.999999,16.4565,60.356,-4,9.49999,67.7808,-1,7.44529,75.9671,-1,-3.68433,90.4274,-4,-9.49999,86.2935,-4,-7.66759,39.1853,-1,-19,39.4837,-1,-17.5,23.0336,7.81055e-7,17.8685,26.0211,-0.999998,17.5,23.0336,-0.999999,17.8685,60.356,-0.999999,9.5,65.4578,-1,-0.212544,75.9671,-4,-3.68433,85.5345,-4,-9.49999,29.2218,-1,-19,29.4443,-1,-17.5,11.5305,8.18144e-7,18.717,11.5305,-0.999999,18.717,26.0211,-4,17.5,23.0336,-4,17.8685,54.7908,-1,2.7394,56.4843,-0.999999,9.5,65.4578,-4,-0.212544,73.8863,-4,-9.49999,23.7784,-1,-19,19.4549,-1,-18.4667,19.5501,-1,-17.5,9.00015,8.30515e-7,19,9.00015,-0.999999,19,11.5305,-4,18.717,22.9973,-4,17.5,54.7908,-4,2.7394,43.9918,-1,5.16438,44.8542,-0.999999,9.5,62.6405,-4,-9.49999,23.7784,-4,-19,19.4549,-4,-18.4667,9.73901,-1,-17.7501,9.75129,-1,-17.5,9.00015,-4,19,11.4707,-4,17.5,43.9918,-4,5.16438,51.725,-4,-9.49999,33.0868,-1,7.05653,33.4493,-0.999999,9.5,19.4024,-4,-19,9.73901,-4,-17.7501,9.00004,-1,-17.511,9.00004,-1,-17.5,8.99996,-4,17.5,8.99996,-4,19,33.0868,-4,7.05653,41.0749,-4,-9.49999,22.1021,-1,8.41135,22.2093,-0.999999,9.5,9.67761,-4,-19,9.00004,-4,-17.511,0.250036,-1,-17.511,0.250036,-1,-17.5,0.249963,-4,17.5,0.24996,-4,19,22.1021,-4,8.41135,30.631,-4,-9.49999,11.0642,-1,9.22555,11.0777,-0.999999,9.5,9.00004,-4,-19,0.250036,-4,-17.511,0.250019,-1,-9.50859,0.250039,-4,-19,0.250039,-8.30515e-7,-19,0.25001,-2.84124e-7,-6.5,0.25001,-4,-6.5,0.250019,-4,-9.49998,0.250017,-1,-9.5,0.249964,-0.999998,17.5,0.249963,-0.999999,17.4995,0.249979,-0.999999,9.5,0.249979,-1,9.49714,0.249979,-4,9.49714,0.249993,-4,6.5,0.249993,2.84124e-7,6.5,0.24996,8.30515e-7,19,11.0642,-4,9.22555,20.338,-4,-9.49999,8.99998,-1,9.49714,8.99998,-0.999999,9.5,9.25001,-4,-8,9.25001,-3.49691e-7,-8,9.00144,-4,-9.49998,8.99998,-4,9.49714,9.24999,-4,8,9.24999,3.49691e-7,8,10.1443,-4,-9.49998,96.412,-1,-12.1528,106.298,-1,-17.129,110.07,-1,-10.0715,120.042,-1,-15.7205,8.99996,-0.999999,17.4995,11.4568,-0.999999,17.2183,22.8865,-0.999999,16.3752,34.261,-0.999999,14.9723,45.553,-0.999999,13.013,56.7352,-1,10.502,9.00002,-1,-9.50859,10.1317,-1,-9.75728,20.2393,-1,-10.5029,30.2982,-1,-11.7435,40.284,-1,-13.4762,50.1728,-1,-15.6968],"faces":[33,0,1,2,3,0,0,0,0,33,1,0,4,5,1,1,1,1,33,3,2,6,7,2,2,2,2,33,8,9,5,4,3,3,3,3,33,10,11,7,6,4,4,4,4,33,9,8,12,13,5,5,5,5,32,179,11,10,4,4,4,32,10,14,178,6,6,6,32,10,178,179,7,7,7,33,15,16,13,12,2,2,2,2,32,18,182,178,8,8,8,32,178,14,17,9,9,9,32,178,17,18,10,10,10,33,19,20,16,15,2,2,2,2,33,187,182,18,21,11,11,11,11,33,22,23,18,17,12,12,12,12,33,24,25,20,19,2,2,2,2,33,193,187,21,26,13,13,13,13,33,21,18,23,27,14,14,14,14,32,28,23,22,2,2,2,33,29,30,25,24,2,2,2,2,33,199,193,26,31,15,15,15,15,33,26,21,27,32,16,16,16,16,32,28,33,34,17,17,17,32,34,27,23,18,18,18,32,34,23,28,19,19,19,32,29,35,36,2,2,2,32,36,37,30,20,20,20,32,36,30,29,21,21,21,33,207,199,31,38,22,22,22,22,33,31,26,32,39,23,23,23,23,33,34,40,32,27,24,24,24,24,33,41,42,34,33,25,25,25,25,33,43,44,36,35,26,26,26,26,32,36,45,37,2,2,2,32,47,216,207,27,27,27,32,207,38,46,28,28,28,32,207,46,47,29,29,29,33,38,31,39,48,30,30,30,30,33,40,49,39,32,2,2,2,2,33,42,50,40,34,31,31,31,31,32,51,42,41,32,32,32,32,52,44,43,33,33,33,33,45,36,44,53,34,34,34,34,33,225,216,47,54,35,35,35,35,33,46,38,48,55,36,36,36,36,33,49,56,48,39,37,37,37,37,33,50,57,49,40,38,38,38,38,32,51,58,59,39,39,39,32,59,50,42,40,40,40,32,59,42,51,41,41,41,32,52,60,61,42,42,42,32,61,53,44,43,43,43,32,61,44,52,44,44,44,33,234,225,54,62,45,45,45,45,33,55,48,56,63,46,46,46,46,33,57,64,56,49,47,47,47,47,33,59,65,57,50,48,48,48,48,33,66,67,59,58,49,49,49,49,33,68,69,61,60,50,50,50,50,32,71,243,234,51,51,51,32,234,62,70,52,52,52,32,234,70,71,53,53,53,33,63,56,64,72,54,54,54,54,33,65,73,64,57,55,55,55,55,33,65,59,67,74,56,56,56,56,32,75,67,66,57,57,57,33,76,77,69,68,58,58,58,58,33,252,243,71,78,59,59,59,59,33,79,80,71,70,60,60,60,60,32,82,72,64,61,61,61,32,64,73,81,62,62,62,32,64,81,82,63,63,63,33,73,65,74,83,64,64,64,64,33,84,74,67,75,65,65,65,65,32,76,85,86,66,66,66,32,86,87,77,67,67,67,32,86,77,76,68,68,68,33,263,252,78,88,69,69,69,69,33,78,71,80,89,59,59,59,59,32,90,80,79,2,2,2,33,81,73,83,91,70,70,70,70,33,81,92,93,82,71,71,71,71,33,94,83,74,84,72,72,72,72,33,95,96,86,85,73,73,73,73,33,86,97,98,87,74,74,74,74,33,88,78,89,99,75,75,75,75,33,100,89,80,90,2,2,2,2,33,92,81,91,101,76,76,76,76,33,102,91,83,94,77,77,77,77,33,92,103,104,93,78,78,78,78,32,105,96,95,2,2,2,33,97,86,96,106,79,79,79,79,33,97,107,108,98,80,80,80,80,32,100,109,110,81,81,81,32,110,99,89,2,2,2,32,110,89,100,82,82,82,33,103,92,101,111,83,83,83,83,33,112,101,91,102,84,84,84,84,33,103,113,114,104,85,85,85,85,33,115,106,96,105,2,2,2,2,33,107,97,106,116,86,86,86,86,33,107,117,118,108,87,87,87,87,33,119,120,110,109,2,2,2,2,33,113,103,111,121,88,88,88,88,33,122,111,101,112,89,89,89,89,33,113,123,124,114,90,90,90,90,33,125,116,106,115,2,2,2,2,33,117,107,116,126,91,91,91,91,32,127,118,117,92,92,92,32,117,126,128,93,93,93,32,306,129,130,94,94,94,32,306,130,131,95,95,95,32,117,128,305,96,96,96,32,306,131,127,97,97,97,32,127,117,305,98,98,98,32,127,305,306,99,99,99,32,317,120,119,100,100,100,32,132,133,134,101,101,101,32,317,119,132,102,102,102,32,136,137,316,103,103,103,32,135,136,316,104,104,104,32,316,317,132,105,105,105,32,134,135,316,106,106,106,32,132,134,316,107,107,107,33,123,113,121,138,108,108,108,108,33,139,121,111,122,109,109,109,109,33,123,140,141,124,110,110,110,110,33,128,126,116,125,2,2,2,2,33,142,129,306,323,111,111,111,111,33,130,129,142,143,112,112,112,112,33,140,135,134,141,113,113,113,113,33,135,140,144,136,91,91,91,91,33,145,137,136,144,2,2,2,2,33,137,145,327,316,114,114,114,114,33,140,123,138,144,115,115,115,115,33,146,138,121,139,116,116,116,116,33,145,142,323,327,117,117,117,117,32,146,143,142,118,118,118,32,145,144,138,2,2,2,32,146,142,145,119,119,119,32,145,138,146,120,120,120,32,51,147,58,121,121,121,32,148,41,149,122,122,122,32,9,148,149,123,123,123,32,148,51,41,124,124,124,32,148,147,51,125,125,125,32,9,149,5,126,126,126,32,149,150,5,127,127,127,32,5,150,1,128,128,128,32,134,151,141,129,129,129,32,134,133,151,129,129,129,32,124,152,114,130,130,130,32,152,153,114,131,131,131,32,114,153,104,132,132,132,32,153,154,104,133,133,133,32,104,154,93,134,134,134,32,154,155,93,135,135,135,32,93,155,82,136,136,136,32,155,156,82,137,137,137,32,82,156,72,138,138,138,32,118,157,108,139,139,139,32,118,127,157,140,140,140,32,98,158,87,141,141,141,32,158,159,87,142,142,142,32,87,159,77,143,143,143,32,159,160,77,144,144,144,32,77,160,69,145,145,145,32,160,161,69,146,146,146,32,69,161,61,147,147,147,32,161,162,61,148,148,148,32,61,162,53,149,149,149,32,108,158,98,150,150,150,32,108,157,158,151,151,151,32,141,152,124,152,152,152,32,141,151,152,153,153,153,32,14,10,1,154,154,154,32,14,1,150,155,155,155,32,41,17,14,156,156,156,32,14,150,149,157,157,157,32,149,41,14,158,158,158,33,1,10,6,2,91,91,91,91,32,22,17,41,159,159,159,32,41,33,28,160,160,160,32,41,28,22,159,159,159,32,127,131,58,161,161,161,32,58,147,148,162,162,162,32,148,9,53,163,163,163,32,148,53,162,164,164,164,32,157,127,58,165,165,165,32,159,158,157,166,166,166,32,159,157,58,167,167,167,32,58,148,162,168,168,168,32,58,162,161,169,169,169,32,160,159,58,170,170,170,32,58,161,160,171,171,171,32,66,58,131,172,172,172,32,131,130,143,173,173,173,32,146,139,122,174,174,174,32,131,143,146,175,175,175,32,75,66,131,176,176,176,32,102,94,84,20,20,20,32,84,75,131,177,177,177,32,131,146,122,178,178,178,32,112,102,84,2,2,2,32,131,122,112,179,179,179,32,131,112,84,180,180,180,32,45,53,9,181,181,181,32,9,13,16,182,182,182,32,20,25,30,2,2,2,32,9,16,20,183,183,183,32,37,45,9,184,184,184,32,9,20,30,185,185,185,32,9,30,37,186,186,186,32,70,62,54,187,187,187,32,54,47,46,188,188,188,32,46,72,156,189,189,189,32,46,156,155,190,190,190,32,70,54,46,191,191,191,32,133,132,70,192,192,192,32,153,152,151,2,2,2,32,151,133,70,193,193,193,32,70,46,155,194,194,194,32,70,155,154,195,195,195,32,153,151,70,196,196,196,32,154,153,70,197,197,197,33,72,46,55,63,198,198,198,198,32,79,70,132,199,199,199,32,132,119,109,200,200,200,32,100,90,79,2,2,2,32,132,109,100,201,201,201,32,132,100,79,202,202,202,33,163,166,165,164,203,203,203,203,33,167,163,164,168,204,204,204,204,33,166,170,169,165,205,205,205,205,33,171,167,168,172,206,206,206,206,33,173,169,170,174,207,207,207,207,33,172,176,175,171,208,208,208,208,32,173,174,179,4,4,4,32,179,178,177,209,209,209,32,179,177,173,210,210,210,33,180,175,176,181,205,205,205,205,32,178,182,184,8,8,8,32,184,183,177,211,211,211,32,184,177,178,212,212,212,33,185,180,181,186,205,205,205,205,33,187,188,184,182,11,11,11,11,33,189,183,184,190,213,213,213,213,33,191,185,186,192,205,205,205,205,33,193,194,188,187,13,13,13,13,33,188,195,190,184,14,14,14,14,32,196,189,190,214,214,214,33,197,191,192,198,205,205,205,205,33,199,200,194,193,15,15,15,15,33,194,201,195,188,16,16,16,16,32,203,202,196,215,215,215,32,196,190,195,216,216,216,32,196,195,203,217,217,217,32,205,204,197,174,174,174,32,197,198,206,205,205,205,32,197,206,205,174,174,174,33,207,208,200,199,22,22,22,22,33,200,209,201,194,23,23,23,23,33,203,195,201,210,174,174,174,174,33,211,202,203,212,218,218,218,218,33,213,204,205,214,26,26,26,26,32,205,206,215,205,205,205,32,207,216,218,27,27,27,32,217,208,207,219,219,219,32,218,217,207,220,220,220,33,208,219,209,200,30,30,30,30,33,210,201,209,220,221,221,221,221,33,212,203,210,221,31,31,31,31,32,222,211,212,222,222,222,32,223,213,214,223,223,223,33,215,224,214,205,224,224,224,224,33,225,226,218,216,35,35,35,35,33,217,227,219,208,225,225,225,225,33,220,209,219,228,226,226,226,226,33,221,210,220,229,38,38,38,38,32,231,230,222,227,227,227,32,222,212,221,228,228,228,32,222,221,231,229,229,229,32,233,232,223,230,230,230,32,223,214,224,231,231,231,32,223,224,233,232,232,232,33,234,235,226,225,45,45,45,45,33,227,236,228,219,233,233,233,233,33,229,220,228,237,234,234,234,234,33,231,221,229,238,235,235,235,235,33,239,230,231,240,236,236,236,236,33,241,232,233,242,237,237,237,237,32,234,243,245,51,51,51,32,244,235,234,52,52,52,32,245,244,234,238,238,238,33,236,246,237,228,239,239,239,239,33,238,229,237,247,240,240,240,240,33,238,248,240,231,241,241,241,241,32,249,239,240,214,214,214,33,250,241,242,251,242,242,242,242,33,252,253,245,243,59,59,59,59,33,254,244,245,255,60,60,60,60,32,237,246,257,243,243,243,32,257,256,247,244,244,244,32,257,247,237,245,245,245,33,247,258,248,238,64,64,64,64,33,259,249,240,248,246,246,246,246,32,261,260,250,247,247,247,32,250,251,262,248,248,248,32,250,262,261,249,249,249,33,263,264,253,252,69,69,69,69,33,253,265,255,245,59,59,59,59,32,266,254,255,214,214,214,33,256,267,258,247,250,250,250,250,33,256,257,269,268,251,251,251,251,33,270,259,248,258,252,252,252,252,33,271,260,261,272,73,73,73,73,33,261,262,274,273,253,253,253,253,33,264,275,265,253,75,75,75,75,33,276,266,255,265,205,205,205,205,33,268,277,267,256,254,254,254,254,33,278,270,258,267,255,255,255,255,33,268,269,280,279,256,256,256,256,32,281,271,272,214,214,214,33,273,282,272,261,79,79,79,79,33,273,274,284,283,257,257,257,257,32,286,285,276,174,174,174,32,276,265,275,205,205,205,32,276,275,286,247,247,247,33,279,287,277,268,83,83,83,83,33,288,278,267,277,258,258,258,258,33,279,280,290,289,259,259,259,259,33,291,281,272,282,205,205,205,205,33,283,292,282,273,86,86,86,86,33,283,284,294,293,260,260,260,260,33,295,285,286,296,205,205,205,205,33,289,297,287,279,261,261,261,261,33,298,288,277,287,262,262,262,262,33,289,290,300,299,263,263,263,263,33,301,291,282,292,205,205,205,205,33,293,302,292,283,91,91,91,91,32,309,308,307,264,264,264,32,305,304,302,96,96,96,32,293,294,303,265,265,265,32,305,302,293,266,266,266,32,309,307,306,267,267,267,32,305,293,303,268,268,268,32,303,309,306,269,269,269,32,303,306,305,270,270,270,32,295,296,317,100,100,100,32,316,315,314,103,103,103,32,316,314,313,104,104,104,32,310,295,317,271,271,271,32,312,311,310,272,272,272,32,316,313,312,273,273,273,32,310,317,316,274,274,274,32,316,312,310,275,275,275,33,299,318,297,289,108,108,108,108,33,319,298,287,297,276,276,276,276,33,299,300,321,320,277,277,277,277,33,304,301,292,302,205,205,205,205,33,322,323,306,307,111,111,111,111,33,308,324,322,307,205,205,205,205,33,320,321,312,313,278,278,278,278,33,313,314,325,320,91,91,91,91,33,326,325,314,315,279,279,279,279,33,315,316,327,326,114,114,114,114,33,320,325,318,299,115,115,115,115,33,328,319,297,318,280,280,280,280,33,326,327,323,322,117,117,117,117,32,322,324,328,174,174,174,32,318,325,326,281,281,281,32,326,322,328,282,282,282,32,328,318,326,283,283,283,32,222,230,329,284,284,284,32,330,331,211,285,285,285,32,172,331,330,286,286,286,32,330,211,222,287,287,287,32,330,222,329,288,288,288,32,172,168,331,289,289,289,32,331,168,332,290,290,290,32,168,164,332,291,291,291,32,312,321,333,292,292,292,32,312,333,311,293,293,293,32,300,290,334,294,294,294,32,334,290,335,295,295,295,32,290,280,335,296,296,296,32,335,280,336,297,297,297,32,280,269,336,298,298,298,32,336,269,337,299,299,299,32,269,257,337,300,300,300,32,337,257,338,301,301,301,32,257,246,338,302,302,302,32,294,284,339,303,303,303,32,294,339,303,304,304,304,32,274,262,340,305,305,305,32,340,262,341,306,306,306,32,262,251,341,307,307,307,32,341,251,342,308,308,308,32,251,242,342,309,309,309,32,342,242,343,310,310,310,32,242,233,343,311,311,311,32,343,233,344,312,312,312,32,233,224,344,313,313,313,32,284,274,340,314,314,314,32,284,340,339,315,315,315,32,321,300,334,316,316,316,32,321,334,333,317,317,317,32,164,173,177,318,318,318,32,177,183,211,319,319,319,32,177,211,331,320,320,320,32,332,164,177,321,321,321,32,177,331,332,322,322,322,33,164,165,169,173,91,91,91,91,32,211,183,189,323,323,323,32,196,202,211,324,324,324,32,189,196,211,325,325,325,32,230,309,303,326,326,326,32,339,340,341,327,327,327,32,230,303,339,328,328,328,32,330,329,230,329,329,329,32,224,172,330,330,330,330,32,344,224,330,331,331,331,32,330,230,339,332,332,332,32,330,339,341,333,333,333,32,343,344,330,334,334,334,32,330,341,342,335,335,335,32,342,343,330,336,336,336,32,309,230,239,337,337,337,32,249,259,270,20,20,20,32,309,239,249,338,338,338,32,324,308,309,339,339,339,32,298,319,328,2,2,2,32,328,324,309,340,340,340,32,309,249,270,341,341,341,32,278,288,298,2,2,2,32,309,270,278,342,342,342,32,298,328,309,343,343,343,32,278,298,309,344,344,344,32,172,224,215,345,345,345,32,206,198,192,247,247,247,32,172,215,206,346,346,346,32,181,176,172,91,91,91,32,206,192,186,174,174,174,32,186,181,172,347,347,347,32,206,186,172,348,348,348,32,226,235,244,349,349,349,32,244,310,311,350,350,350,32,333,334,335,351,351,351,32,244,311,333,352,352,352,32,218,226,244,353,353,353,32,246,217,218,354,354,354,32,338,246,218,355,355,355,32,244,333,335,356,356,356,32,244,335,336,357,357,357,32,338,218,244,358,358,358,32,244,336,337,359,359,359,32,244,337,338,360,360,360,33,246,236,227,217,361,361,361,361,32,310,244,254,199,199,199,32,266,276,285,2,2,2,32,310,254,266,362,362,362,32,285,295,310,363,363,363,32,266,285,310,364,364,364],"metadata":{"generator":"io_three","normals":365,"uvs":0,"vertices":345,"version":3,"faces":464,"type":"Geometry"}},"single_double_R_b":{"normals":[-9.37938e-15,-1,4.47034e-8,-5.25692e-10,-1,3.27564e-8,0,-1,5.02897e-8,-8.61149e-11,-1,4.4618e-8,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,2.09813e-7,0,-1,0,0,1,0,1,0,0,1,0,0,1,0,-1.79183e-7,0,1,0,-1,0,0,-1,0,0,-1,0,1.32456e-8,-1,7.94732e-8,0,-1,0,0,-1,1.58948e-7,7.83087e-10,-1,4.47034e-8,-2.21466e-9,-1,6.66544e-8,-8.31618e-10,-1,8.11064e-8,-3.88958e-10,-1,3.79345e-8,-0.1644,0,-0.986394,1.32455e-8,1,-7.94732e-8,-1.22526e-14,1,-7.18348e-8,1.13429e-9,1,-3.32706e-8,-1.66602e-8,1,-2.58908e-7,-4.31597e-9,1,-8.78399e-8,0,1,0,4.58363e-10,1,-4.47034e-8,9.37938e-15,1,-4.47034e-8,0,1,-5.02897e-8,2.73083e-9,1,1.73595e-8,-1.55373e-10,1,-6.05228e-8,2.09813e-7,0,-1,-8.52835e-8,-0.00000301997,-1,-0.164398,0,0.986394,-8.52835e-8,0.00000301997,-1,3.75988e-15,-1,4.47036e-8,0,0,-1,1.90086e-7,0,1,-3.75988e-15,1,-4.47036e-8,1.90086e-7,0,1,0,-1,0,-0.046112,0,-0.998936,-0.1554,0,-0.987852,-0.155404,0,-0.987851,-0.155404,0,-0.987851,-0.155404,0,-0.987851,-0.253266,0,-0.967397,-0.332687,0,-0.943037,-0.332686,0,-0.943038,-0.332682,-0.00000592237,-0.943039,-0.332687,0.00000592246,-0.943037,-0.332686,0,-0.943038,-0.332685,0,-0.943038,-0.391547,0,-0.920158,-0.42997,0,-0.902843,-0.448904,0,-0.89358,-0.448904,0,-0.89358,-0.448904,0,-0.89358,-0.448857,-0.0000019728,-0.893603,-0.448879,0,-0.893592,-0.448857,0.0000019728,-0.893603,-0.448879,0,-0.893592,-0.448858,0,-0.893603,-0.448858,0,-0.893603],"metadata":{"uvs":0,"generator":"io_three","faces":95,"vertices":60,"version":3,"normals":72,"type":"Geometry"},"uvs":[],"vertices":[215.75,-0.999999,17.5,33.9362,-0.999999,17.5,44.4325,-0.999999,15.8488,59.6285,-0.999999,11.8704,66.3478,-1,9.49998,215.75,-1,9.49998,215.75,4,19,215.75,-4,19,215.75,-4,17.5,215.75,-4,9.49998,215.75,-4,6.5,215.75,4,6.5,215.75,4,9.49998,215.75,1,9.49998,215.75,1,17.5,215.75,4,17.5,33.9362,-4,17.5,66.3479,-4,9.49998,33.9362,4,17.5,28.928,4,18.2878,13.5006,4,19,13.5006,-4,19,28.928,-4,18.2878,109.517,-4,-9.5,215.75,-4,-9.50002,215.75,-4,-6.50003,206.75,-4,-8.00003,206.75,-4,8.00001,74.4451,-4,6.64343,88.8677,-4,0.506304,102.91,-4,-6.18101,206.75,4,8.00001,206.75,4,-8.00003,215.75,4,-6.50003,215.75,4,-9.50002,109.517,4,-9.5,102.91,4,-6.18101,88.8677,4,0.506304,74.4451,4,6.64343,66.3479,4,9.49998,66.3478,1,9.49998,59.6285,1,11.8704,44.4325,1,15.8488,33.9362,1,17.5,109.517,-1,-9.50002,215.75,-1,-9.50002,215.75,4,-19,215.75,4,-17.5,215.75,0.999999,-17.5,215.75,1,-9.50002,215.75,-1,-17.5,215.75,-4,-17.5,215.75,-4,-19,109.517,1,-9.50002,125.443,-1,-17.5,128.429,4,-19,128.429,-4,-19,125.443,4,-17.5,125.443,0.999999,-17.5,125.443,-4,-17.5],"faces":[32,5,0,1,0,0,0,32,5,1,2,1,1,1,32,3,4,5,2,2,2,32,2,3,5,3,3,3,32,15,6,7,4,4,4,32,7,8,0,5,5,5,32,5,9,10,6,6,6,32,5,10,11,7,7,7,32,11,12,13,8,8,8,32,14,15,7,6,6,6,32,5,11,13,9,9,9,32,14,7,0,10,10,10,32,0,5,13,5,5,5,32,0,13,14,6,6,6,33,1,0,8,16,11,11,11,11,33,17,9,5,4,12,12,12,12,32,20,6,15,13,13,13,32,15,18,19,14,14,14,32,15,19,20,15,15,15,33,21,7,6,20,16,16,16,16,32,8,7,21,17,17,17,32,22,16,8,18,18,18,32,21,22,8,17,17,17,32,30,23,24,17,17,17,32,24,25,26,19,19,19,32,27,10,9,20,20,20,32,30,24,26,21,21,21,32,27,9,17,22,22,22,32,30,26,27,23,23,23,32,29,30,27,24,24,24,32,27,17,28,25,25,25,32,27,28,29,26,26,26,33,27,31,11,10,27,27,27,27,32,32,33,34,28,28,28,32,34,35,36,29,29,29,32,34,36,37,30,30,30,32,32,34,37,31,31,31,32,38,39,12,15,15,15,32,32,37,38,32,32,32,32,12,11,31,33,33,33,32,31,32,38,34,34,34,32,31,38,12,33,33,33,33,40,13,12,39,12,12,12,12,32,43,14,13,35,35,35,32,13,40,41,36,36,36,32,42,43,13,37,37,37,32,13,41,42,38,38,38,33,18,15,14,43,39,39,39,39,33,44,45,24,23,40,40,40,40,32,52,46,47,6,6,6,32,52,47,48,8,8,8,32,50,51,52,6,6,6,32,25,24,45,5,5,5,32,50,52,48,5,5,5,32,33,25,45,7,7,7,32,45,50,48,5,5,5,32,49,34,33,6,6,6,32,45,48,49,6,6,6,32,49,33,45,8,8,8,33,25,33,32,26,41,41,41,41,33,27,26,32,31,6,6,6,6,33,35,34,49,53,42,42,42,42,33,50,45,44,54,43,43,43,43,33,55,46,52,56,44,44,44,44,33,57,47,46,55,13,13,13,13,33,58,48,47,57,45,45,45,45,33,48,58,53,49,46,46,46,46,33,59,51,50,54,47,47,47,47,33,56,52,51,59,48,48,48,48,33,22,21,20,19,49,49,49,49,32,42,2,1,50,50,50,32,1,16,22,51,51,51,32,22,19,18,52,52,52,32,43,42,1,50,50,50,32,22,18,43,53,53,53,32,1,22,43,53,53,53,33,3,2,42,41,54,54,54,54,32,38,28,17,55,55,55,32,4,3,41,56,56,56,32,38,17,4,57,57,57,32,40,39,38,58,58,58,32,4,41,40,59,59,59,32,4,40,38,60,60,60,33,29,28,38,37,61,61,61,61,33,30,29,37,36,62,62,62,62,32,58,57,55,63,63,63,32,55,56,59,64,64,64,32,55,59,54,65,65,65,32,58,55,54,64,64,64,32,44,23,30,66,66,66,32,58,54,44,67,67,67,32,36,35,53,68,68,68,32,53,58,44,69,69,69,32,44,30,36,70,70,70,32,44,36,53,71,71,71]},"single_double_R_a":{"normals":[0,0,-1,-1,0,0,-0.0445486,0,-0.999007,0.155718,0,0.987801,-0.155736,0,-0.987799,0.253644,0,0.967297,-0.253664,0,-0.967292,0,1,-4.47035e-8,0,1,-8.46131e-8,-8.14258e-9,1,-7.6445e-8,-5.92875e-9,1,-6.27385e-8,4.72257e-8,1,5.44613e-8,1.1424e-8,1,-1.80965e-8,1.31926e-9,1,-3.11904e-8,2.24156e-9,1,-4.09909e-8,-6.98805e-9,1,-7.05171e-8,-3.75876e-8,1,-1.27014e-7,-3.04131e-10,1,-4.47376e-8,1.89593e-10,1,-4.68631e-8,-1.01887e-9,1,-4.64883e-8,-6.56412e-7,1,-0.00000190795,-3.02055e-9,1,-5.13552e-8,7.1915e-9,1,-2.3228e-8,1.21781e-7,1,3.03618e-7,-5.63625e-8,1,-1.56149e-7,-2.77311e-9,1,-5.12607e-8,-8.77279e-15,1,-6.92356e-8,7.09665e-10,1,-4.05701e-8,-9.60341e-10,1,-4.17442e-8,5.0574e-8,1,7.5841e-8,2.69361e-10,1,-4.56591e-8,0.33301,0,0.942923,0.448878,0,0.893593,-0.333026,0,-0.942918,0.391771,0,0.920063,-0.391782,0,-0.920058,-8.89178e-8,-1,-1.33064e-7,-1.42174e-8,-1,5.6339e-9,-7.54731e-9,-1,1.40254e-9,0,-1,0,0,-1,4.47035e-8,2.21797e-9,-1,4.8377e-8,1.05009e-9,-1,4.25226e-8,9.03344e-9,-1,6.54495e-8,-5.58271e-8,-1,-7.86895e-8,1.46171e-9,-1,4.59577e-8,8.59902e-10,-1,5.76939e-8,3.65253e-9,-1,4.56714e-8,-2.9184e-10,-1,4.68948e-8,2.30254e-9,-1,4.9315e-8,-5.38174e-9,-1,2.74804e-8,1.03396e-9,-1,4.66897e-8,-1.18014e-7,-1,-1.90986e-7,-9.81745e-9,-1,1.57379e-8,2.87717e-8,-1,1.36409e-7,1.56263e-8,-1,7.96536e-8,-1.22058e-9,-1,4.43453e-8,3.30025e-11,-1,3.82077e-8,-0.332928,0,-0.942952,0.430095,0,0.902784,-0.430101,0,-0.902781,0,1,-7.94729e-8,-5.01934e-8,1,-3.0116e-7,-8.21348e-9,1,-1.82217e-7,1.32455e-8,1,-7.94729e-8,1.0537e-8,1,-2.98023e-8,-7.30786e-9,1,-4.63838e-8,0,1,-1.58946e-7,-6.75794e-9,1,-1.474e-7,-4.84757e-8,1,-1.85098e-7,-1.30259e-7,1,-3.46192e-7,9.6865e-8,1,1.57674e-7,8.16515e-9,1,-6.46645e-10,-2.86945e-8,1,-7.76445e-8,1.04077e-8,1,-3.21876e-8,-1.77051e-9,1,-4.9456e-8,7.29561e-9,1,-2.25177e-8,3.50621e-9,1,-4.26538e-8,-9.10971e-9,1,-6.43473e-8,6.73916e-10,1,-4.1367e-8,-4.49661e-14,1,-2.69599e-7,-3.55381e-8,1,-1.12435e-7,-4.28666e-9,1,-6.00129e-8,-3.23615e-9,1,-5.22795e-8,-0.391717,0,-0.920086,0.391771,0,0.920063,-0.430066,0,-0.902798,0.448878,0,0.893593,0.429975,0,0.902841,-0.42997,0,-0.902843,0.391555,0,0.920155,-0.391547,0,-0.920158,-0.430001,0,-0.902829,0.332696,0,0.943034,-0.332685,0,-0.943038,-0.3916,0,-0.920136,0.253277,0,0.967394,-0.253265,0,-0.967397,0.430066,0,0.902798,-0.332758,0,-0.943012,0.155412,0,0.98785,-0.155402,0,-0.987851,0.448882,0,0.893591,-0.448897,0,-0.893584,0.391717,0,0.920086,-0.253347,0,-0.967375,0.0460657,0,0.998938,-0.046112,0,-0.998936,-0.448878,0,-0.893593,-0.3916,0,-0.920136,0,1,0,0,1,0,-2.36216e-8,1,-1.50157e-7,1.39595e-8,1,-6.043e-9,-1.56654e-7,1,-3.64592e-7,0,1,0,1.09466e-7,1,4.17461e-7,2.21095e-8,1,7.66205e-9,-1.31505e-7,1,-3.14528e-7,1.40089e-9,1,-4.54348e-8,0,1,0,4.91841e-13,1,-4.62014e-7,0,1,0,-2.47888e-8,1,-1.5723e-7,4.15281e-8,1,1.61517e-7,-6.39491e-8,1,-2.43856e-7,1.46402e-8,1,-4.54072e-9,1.27928e-8,1,-3.9678e-9,1.46067e-8,1,-4.53034e-9,1.76371e-8,1,-5.47029e-9,1.55706e-8,1,-2.45392e-9,9.77349e-9,1,-2.15644e-8,1.38579e-8,1,-6.30428e-9,1.8977e-8,1,-8.63307e-9,5.40378e-7,1,0.00000114171,1.10852e-7,1,1.94058e-7,1.47634e-7,1,2.74235e-7,-0.430095,0,-0.902784,0.332928,0,0.942952,-0.155468,0,-0.987841,0,0,1,1,0,0,1,0,0,1,0,0,-3.31457e-7,-1,-6.24684e-7,-1.88262e-7,-1,-4.42427e-7,0,-1,0,-2.27477e-7,-1,-5.34224e-7,-3.86217e-7,-1,-7.33696e-7,-1.40089e-9,-1,4.54348e-8,0,-1,0,0,-1,0,5.13143e-8,-1,3.16914e-7,-3.52741e-8,-1,1.09406e-8,1.05839e-7,-1,3.00003e-7,2.75531e-7,-1,6.47057e-7,-3.11412e-8,-1,4.90784e-9,-5.40378e-7,-1,-0.00000114171,1.01484e-7,-1,3.03072e-7,-4.75679e-7,-1,-9.98808e-7,1.21751e-7,-1,2.93853e-7,4.85137e-7,-1,0.00000109554,-0.332758,0,-0.943012,0.430066,0,0.902798,3.44562e-8,-1,1.23883e-7,2.83957e-8,-1,1.80231e-7,0,-1,2.10966e-7,-8.82356e-9,-1,3.00895e-8,-4.0576e-9,-1,2.58022e-8,4.55856e-8,-1,1.52443e-7,4.13213e-15,-1,3.86096e-8,-9.5931e-9,-1,3.79701e-8,-2.76619e-9,-1,3.70459e-8,1.63881e-8,-1,1.03958e-7,2.85255e-8,-1,1.46867e-7,-2.02823e-9,-1,3.42362e-8,-2.30189e-9,-1,3.88556e-8,-9.04764e-9,-1,1.16105e-8,2.20644e-10,-1,5.55663e-8,0.448899,0,0.893583,5.12978e-8,1,1.95629e-7,2.21094e-8,1,7.66165e-9,-6.97694e-7,1,-0.00000150298,-1.82948e-13,1,-3.20504e-7,6.43057e-8,1,9.63576e-8,-1.73545e-8,1,-9.35235e-8,1.34174e-8,1,-1.61139e-7,6.86232e-8,1,1.07456e-7,9.77348e-9,1,-2.15645e-8,-2.30403e-8,1,-1.5742e-7,1.76371e-8,1,-5.47025e-9,-0.391772,0,-0.920062,0.253544,0,0.967324,0,-1,0,-1.97099e-7,-1,-4.6312e-7,-3.44848e-7,-1,-6.51341e-7,6.97664e-9,-1,6.15314e-8,0,-1,0,3.26013e-9,-1,2.98023e-8,2.49208e-7,-1,5.98806e-7,-7.7026e-9,-1,3.61459e-8,0,-1,0,-7.83753e-9,-1,3.38246e-8,3.6667e-8,-1,7.69718e-8,3.52359e-9,-1,2.86417e-8,-2.34658e-8,-1,9.32267e-8,-2.15936e-8,-1,3.51796e-8,1.27388e-8,-1,4.86012e-8,1.67233e-8,-1,4.73654e-8,-0.0457995,0,-0.998951,0.448883,0,0.893591,0,0,-1,0,0,1,0.4301,0,0.902781,-0.333009,0,-0.942923,0.155632,0,0.987815,-0.0446296,0,-0.999004,0.0445486,0,0.999007,-0.448878,0,-0.893593,0.0450295,0,0.998986,-0.430095,0,-0.902784,6.02103e-8,-1,3.81945e-7,1.65579e-7,-1,4.24542e-7,1.88293e-7,-1,5.31219e-7,-7.29038e-8,-1,-2.50245e-7,-3.73577e-8,-1,1.15867e-8,-8.90307e-8,-1,-1.82216e-7,0.391782,0,0.920058,-0.253644,0,-0.967298,9.71375e-9,1,1.11245e-9,1.99288e-8,1,3.85991e-9,-6.64634e-8,1,-1.77353e-7,-3.05372e-15,1,-2.85332e-8,-2.32503e-9,1,-5.29972e-8,9.70114e-9,1,-2.23863e-8,-1.1036e-9,1,-5.03617e-8,-2.15667e-9,1,-4.82755e-8,6.71821e-9,1,-2.22725e-8,-4.92195e-10,1,-4.52564e-8,-3.3872e-10,1,-4.5057e-8,-1.01903e-9,1,-4.96254e-8,-1.78189e-9,1,-4.62517e-8,-2.11519e-9,1,-4.61483e-8,-0.155718,0,-0.987802,0.155736,0,0.987799,0.333026,0,0.942918,0.253664,0,0.967292,-0.164399,0,0.986394,1,0,0,-0.164399,0,-0.986394,5.70813e-7,0,1,5.70813e-7,0,1,1.66789e-7,0,1,1.66789e-7,0,1,1.07023e-7,0,1,1.66789e-7,0,1,1.83594e-7,0,1,1.5088e-7,-3.63846e-7,1,1.26709e-7,0,1,1.83594e-7,0,1],"metadata":{"uvs":0,"generator":"io_three","faces":361,"vertices":236,"version":3,"normals":260,"type":"Geometry"},"uvs":[],"vertices":[13.5,4,-19,0.25,4,-19,0.25,4,-19,25.072,4,-19.516,13.5,-4,-19,0.25,-4,-19,0.25,-4,-19,31.4168,4,-19,36.8779,4,-19.8609,36.5675,4,-21.3284,25.072,-4,-19.516,31.4168,0.999999,-19,36.8779,0.999999,-19.8609,48.8158,4,-22.9912,48.3715,4,-24.4239,36.5675,-4,-21.3284,48.8158,0.999999,-22.9912,61.1032,4,-27.3307,60.5549,4,-28.7269,48.3715,-4,-24.4239,36.8779,-4,-19.8609,31.4168,-4,-19,61.1032,0.999999,-27.3307,73.7534,4,-32.7173,73.1323,4,-34.0827,60.5549,-4,-28.7269,48.8158,-4,-22.9912,36.8779,-1,-19.8609,31.4168,-1,-19,61.5227,0.999999,-19,64.0275,0.999999,-19.8843,73.7534,0.999999,-32.7173,86.7543,4,-38.911,86.0904,4,-40.2561,73.1323,-4,-34.0827,61.1032,-4,-27.3307,48.8158,-1,-22.9912,61.5227,4,-19,64.0275,4,-19.8843,77.0661,0.999999,-25.4354,86.7543,0.999998,-38.911,86.0904,-4,-40.2561,73.7534,-4,-32.7173,61.1032,-1,-27.3307,77.0661,4,-25.4354,90.2952,0.999999,-31.7373,113.754,4,-52.4739,113.09,4,-53.819,86.7543,-4,-38.911,73.7534,-1,-32.7173,64.0275,-1,-19.8843,61.5227,-1,-19,90.2952,4,-31.7373,113.754,0.999998,-52.4739,127.753,4,-59.141,127.132,4,-60.5063,113.09,-4,-53.819,86.7543,-1,-38.911,77.0661,-1,-25.4354,64.0275,-4,-19.8843,61.5227,-4,-19,117.295,0.999998,-45.3002,127.753,0.999997,-59.141,142.103,4,-65.2472,141.555,4,-66.6434,127.132,-4,-60.5063,113.754,-4,-52.4739,90.2952,-1,-31.7373,77.0661,-4,-25.4354,107.266,4,-19,117.295,4,-45.3002,131.066,0.999998,-51.8591,142.103,0.999997,-65.2472,156.816,4,-70.4378,156.371,4,-71.8705,141.555,-4,-66.6434,127.753,-4,-59.141,113.754,-1,-52.4739,90.2952,-4,-31.7373,107.266,0.999999,-19,125.705,4,-28.2627,131.066,4,-51.8591,145.027,0.999997,-57.8009,156.816,0.999997,-70.4378,171.878,4,-74.3812,171.567,4,-75.8488,156.371,-4,-71.8705,142.103,-4,-65.2472,127.753,-1,-59.141,117.295,-1,-45.3002,125.705,0.999999,-28.2627,138.934,4,-34.5646,145.027,4,-57.8009,159.186,0.999997,-62.7969,171.878,0.999997,-74.3812,187.224,4,-76.7956,187.072,4,-78.2878,171.567,-4,-75.8488,156.816,-4,-70.4378,142.103,-1,-65.2472,131.066,-1,-51.8591,117.295,-4,-45.3002,107.266,-4,-19,125.087,0.999999,-19,129.246,0.999999,-21.089,138.934,0.999999,-34.5646,151.973,4,-40.1157,159.186,4,-62.7969,173.534,0.999997,-66.5545,187.224,0.999997,-76.7956,202.5,4,-77.5,202.5,4,-79,187.072,-4,-78.2878,171.878,-4,-74.3812,156.816,-1,-70.4378,145.027,-1,-57.8009,131.066,-4,-51.8591,125.705,-4,-28.2627,107.266,-1,-19,125.087,4,-19,129.246,4,-21.089,142.247,0.999999,-27.2827,151.973,0.999998,-40.1157,164.814,4,-44.6497,173.534,4,-66.5545,188.036,0.999997,-68.8369,202.5,0.999997,-77.5,215.75,4,-77.5,215.75,4,-79,202.5,-4,-79,187.224,-4,-76.7956,171.878,-1,-74.3812,159.186,-1,-62.7969,145.027,-4,-57.8009,138.934,-4,-34.5646,125.705,-1,-28.2627,128.429,4,-19,129.91,4,-19.7439,142.247,4,-27.2827,154.897,0.999999,-32.6693,164.814,0.999998,-44.6497,177.466,4,-47.9659,188.036,4,-68.8369,202.5,0.999997,-69.5,215.75,0.999997,-77.5,215.75,0.999998,-42.5,215.75,4,-42.5,215.75,4,-41,215.75,-4,-41,215.75,-4,-42.5,215.75,-1,-42.5,215.75,-1,-50.5,215.75,-4,-50.5,215.75,-4,-69.5,215.75,-1,-69.5,215.75,-1,-77.5,215.75,-4,-77.5,215.75,-4,-79,215.75,0.999997,-69.5,215.75,4,-69.5,215.75,4,-50.5,215.75,0.999998,-50.5,202.5,-4,-77.5,187.224,-1,-76.7956,173.534,-1,-66.5545,159.186,-4,-62.7969,151.973,-4,-40.1157,138.934,-1,-34.5646,129.246,-1,-21.089,125.087,-1,-19,128.429,-4,-19,129.91,-4,-19.7439,142.868,4,-25.9173,154.897,4,-32.6693,167.184,0.999998,-37.0088,177.466,0.999998,-47.9659,189.964,4,-49.9349,202.5,4,-69.5,202.5,0.999998,-42.5,202.5,0.999998,-50.5,202.5,4,-42.5,202.5,4,-41,202.5,-4,-41,202.5,-4,-42.5,202.5,-1,-42.5,202.5,-1,-50.5,202.5,-4,-50.5,202.5,-4,-69.5,202.5,-1,-69.5,202.5,-1,-77.5,202.5,4,-50.5,188.036,-1,-68.8369,173.534,-4,-66.5545,164.814,-4,-44.6497,151.973,-1,-40.1157,142.247,-1,-27.2827,129.246,-4,-21.089,125.087,-4,-19,142.868,-4,-25.9173,155.445,4,-31.2731,167.184,4,-37.0088,179.122,0.999998,-40.1391,189.964,0.999998,-49.9349,190.776,0.999998,-41.9762,190.776,4,-41.9762,190.928,4,-40.484,190.928,-4,-40.484,190.776,-4,-41.9762,190.776,-1,-41.9762,189.964,-1,-49.9349,189.964,-4,-49.9349,188.036,-4,-68.8369,177.466,-4,-47.9659,164.814,-1,-44.6497,154.897,-1,-32.6693,142.247,-4,-27.2827,155.445,-4,-31.2731,167.629,4,-35.5761,179.122,4,-40.1391,179.433,4,-38.6716,179.433,-4,-38.6716,179.122,-4,-40.1391,179.122,-1,-40.1391,177.466,-1,-47.9659,167.184,-1,-37.0088,154.897,-4,-32.6693,167.629,-4,-35.5761,167.184,-4,-37.0088,215.75,-4,-53.5,215.75,4,-53.5,215.75,-4,-66.5,215.75,4,-66.5,206.75,4,-68,206.75,4,-52,206.75,-4,-52,206.75,-4,-68],"faces":[33,1,0,4,5,0,0,0,0,33,2,1,5,6,1,1,1,1,33,0,3,10,4,2,2,2,2,33,11,12,8,7,3,3,3,3,33,3,9,15,10,4,4,4,4,33,12,16,13,8,5,5,5,5,33,9,14,19,15,6,6,6,6,32,143,158,144,7,7,7,32,144,126,109,8,8,8,32,109,94,83,9,9,9,32,83,72,62,10,10,10,32,62,53,40,11,11,11,32,83,62,40,12,12,12,32,144,109,83,13,13,13,32,125,143,144,14,14,14,32,108,125,144,15,15,15,32,83,40,31,16,16,16,32,108,144,83,17,17,17,32,93,108,83,18,18,18,32,93,83,31,19,19,19,32,82,93,31,20,20,20,32,82,31,22,21,21,21,32,71,82,22,22,22,22,32,71,22,16,23,23,23,32,39,45,61,24,24,24,32,61,71,16,25,25,25,32,12,11,29,26,26,26,32,39,61,16,27,27,27,32,16,12,29,28,28,28,32,29,30,39,29,29,29,32,16,29,39,30,30,30,33,16,22,17,13,31,31,31,31,33,40,53,46,32,32,32,32,32,33,14,18,25,19,33,33,33,33,33,21,20,27,28,3,3,3,3,33,22,31,23,17,34,34,34,34,33,18,24,34,25,35,35,35,35,33,20,26,36,27,5,5,5,5,32,57,77,88,36,36,36,32,88,99,114,37,37,37,32,114,131,163,38,38,38,32,163,189,155,39,39,39,32,155,154,188,40,40,40,32,155,188,191,41,41,41,32,114,163,155,42,42,42,32,57,88,114,43,43,43,32,49,57,114,44,44,44,32,114,155,191,45,45,45,32,114,191,164,46,46,46,32,114,164,132,47,47,47,32,114,132,115,48,48,48,32,49,114,115,49,49,49,32,49,115,100,50,50,50,32,43,49,100,51,51,51,32,89,67,58,52,52,52,32,43,100,89,53,53,53,32,36,43,89,54,54,54,32,89,58,50,55,55,55,32,50,51,28,39,39,39,32,50,28,27,39,39,39,32,36,89,50,56,56,56,32,50,27,36,57,57,57,33,37,38,30,29,58,58,58,58,33,31,40,32,23,59,59,59,59,33,24,33,41,34,60,60,60,60,33,26,35,43,36,31,31,31,31,32,190,160,229,61,61,61,32,190,229,233,62,62,62,32,176,190,233,63,63,63,32,232,231,159,64,64,64,32,176,233,232,65,65,65,32,141,176,232,66,66,66,32,232,159,177,67,67,67,32,177,142,124,68,68,68,32,124,107,92,69,69,69,32,92,81,70,70,70,70,32,92,70,52,71,71,71,32,177,124,92,72,72,72,32,141,232,177,73,73,73,32,123,141,177,74,74,74,32,177,92,52,75,75,75,32,177,52,44,76,76,76,32,106,123,177,77,77,77,32,91,106,177,78,78,78,32,177,44,38,79,79,79,32,38,37,69,80,80,80,32,80,91,177,81,81,81,32,38,69,80,82,82,82,32,177,38,80,83,83,83,33,38,44,39,30,84,84,84,84,33,35,42,49,43,85,85,85,85,33,44,52,45,39,86,86,86,86,33,42,48,57,49,59,59,59,59,33,51,50,59,60,58,58,58,58,33,48,66,77,57,87,87,87,87,33,53,62,54,46,88,88,88,88,33,47,55,65,56,89,89,89,89,33,50,58,68,59,84,84,84,84,33,62,72,63,54,90,90,90,90,33,55,64,75,65,91,91,91,91,33,58,67,78,68,86,86,86,86,33,70,81,71,61,92,92,92,92,33,72,83,73,63,93,93,93,93,33,64,74,86,75,94,94,94,94,33,66,76,88,77,88,88,88,88,33,81,92,82,71,95,95,95,95,33,83,94,84,73,96,96,96,96,33,74,85,97,86,97,97,97,97,33,76,87,99,88,90,90,90,90,33,90,105,91,80,98,98,98,98,33,92,107,93,82,99,99,99,99,33,94,109,95,84,100,100,100,100,33,85,96,112,97,101,101,101,101,33,87,98,114,99,93,93,93,93,33,89,100,116,101,92,92,92,92,33,79,90,80,69,102,102,102,102,33,119,120,104,103,103,103,103,103,33,105,122,106,91,104,104,104,104,33,107,124,108,93,105,105,105,105,33,109,126,110,95,106,106,106,106,33,96,111,129,112,107,107,107,107,33,52,70,61,45,108,108,108,108,33,98,113,131,114,96,96,96,96,33,100,115,133,116,109,109,109,109,32,110,127,128,110,110,110,32,128,111,96,111,111,111,32,96,85,74,112,112,112,32,74,64,55,113,113,113,32,55,47,33,114,114,114,32,110,128,96,115,115,115,32,95,110,96,110,110,110,32,0,1,2,111,111,111,32,7,8,13,116,116,116,32,13,17,23,117,117,117,32,23,32,46,118,118,118,32,13,23,46,119,119,119,32,0,2,7,120,120,120,32,3,0,7,121,121,121,32,84,95,96,122,122,122,32,9,3,7,123,123,123,32,84,96,74,124,124,124,32,14,9,7,125,125,125,32,73,84,74,126,126,126,32,14,7,13,127,127,127,32,63,73,74,128,128,128,32,18,14,13,129,129,129,32,54,63,74,130,130,130,32,24,18,13,131,131,131,32,54,74,55,132,132,132,32,54,55,33,133,133,133,32,24,13,46,134,134,134,32,54,33,24,135,135,135,32,24,46,54,136,136,136,33,120,138,121,104,137,137,137,137,33,122,140,123,106,138,138,138,138,33,124,142,125,108,139,139,139,139,33,126,144,127,110,140,140,140,140,32,145,146,147,141,141,141,32,147,148,149,141,141,141,32,147,149,150,142,142,142,32,145,147,150,143,143,143,32,151,152,228,141,141,141,32,145,150,151,141,141,141,32,229,160,161,143,143,143,32,161,145,151,143,143,143,32,151,228,229,142,142,142,32,151,229,161,141,141,141,33,111,128,157,129,0,0,0,0,32,41,56,65,144,144,144,32,65,75,86,145,145,145,32,86,97,112,39,39,39,32,112,129,157,39,39,39,32,157,156,162,146,146,146,32,157,162,130,39,39,39,32,6,5,4,39,39,39,32,26,20,21,39,39,39,32,42,35,26,147,147,147,32,66,48,42,148,148,148,32,66,42,26,149,149,149,32,21,6,4,39,39,39,32,21,4,10,39,39,39,32,112,157,130,150,150,150,32,21,10,15,39,39,39,32,112,130,113,151,151,151,32,21,15,19,39,39,39,32,86,112,113,150,150,150,32,26,21,19,146,146,146,32,86,113,98,152,152,152,32,26,19,25,153,153,153,32,86,98,87,154,154,154,32,26,25,34,155,155,155,32,86,87,76,156,156,156,32,66,26,34,157,157,157,32,65,86,76,158,158,158,32,76,66,34,159,159,159,32,41,65,76,160,160,160,32,34,41,76,161,161,161,33,113,130,163,131,100,100,100,100,33,115,132,165,133,162,162,162,162,33,117,134,167,135,163,163,163,163,32,167,194,213,164,164,164,32,213,223,209,165,165,165,32,209,185,151,166,166,166,32,151,150,184,40,40,40,32,151,184,208,167,167,167,32,213,209,151,168,168,168,32,135,167,213,169,169,169,32,169,118,135,170,170,170,32,168,169,135,171,171,171,32,135,213,151,172,172,172,32,151,208,222,173,173,173,32,151,222,224,174,174,174,32,195,168,135,175,175,175,32,214,195,135,176,176,176,32,135,151,224,177,177,177,32,224,214,135,178,178,178,33,170,171,137,136,179,179,179,179,32,181,147,146,110,110,110,32,146,180,204,111,111,111,32,204,218,200,180,180,180,32,200,173,138,181,181,181,32,138,120,119,182,182,182,32,119,136,137,183,183,183,32,119,137,172,184,184,184,32,200,138,119,185,185,185,32,181,146,204,115,115,115,32,205,181,204,186,186,186,32,200,119,172,187,187,187,32,200,172,199,188,188,188,32,205,204,200,189,189,189,32,219,205,200,115,115,115,32,200,199,217,190,190,190,32,219,200,217,120,120,120,33,138,173,139,121,191,191,191,191,33,140,175,141,123,192,192,192,192,32,192,211,187,146,146,146,32,187,153,230,193,193,193,32,187,230,235,151,151,151,32,165,192,187,39,39,39,32,116,133,165,194,194,194,32,78,101,116,195,195,195,32,78,116,165,196,196,196,32,165,187,235,197,197,197,32,234,228,152,150,150,150,32,165,235,234,198,198,198,32,68,78,165,199,199,199,32,102,60,59,39,39,39,32,102,59,68,39,39,39,32,117,102,68,200,200,200,32,234,152,186,201,201,201,32,234,186,210,39,39,39,32,117,68,165,202,202,202,32,134,117,165,203,203,203,32,165,234,210,204,204,204,32,165,210,212,205,205,205,32,166,134,165,206,206,206,32,165,212,193,207,207,207,32,193,166,165,208,208,208,33,142,177,143,125,209,209,209,209,33,102,117,135,118,210,210,210,210,33,180,146,145,178,211,211,211,211,33,182,148,147,181,212,212,212,212,33,184,150,149,183,211,211,211,211,33,186,152,151,185,140,140,140,140,33,188,154,153,187,211,211,211,211,33,162,156,155,189,140,140,140,140,33,177,159,158,143,211,211,211,211,33,179,161,160,190,140,140,140,140,33,130,162,189,163,106,106,106,106,33,132,164,192,165,105,105,105,105,33,134,166,194,167,104,104,104,104,33,169,168,196,197,103,103,103,103,33,171,198,172,137,213,213,213,213,33,173,200,174,139,214,214,214,214,33,175,202,176,141,215,215,215,215,33,204,180,178,203,216,216,216,216,33,206,182,181,205,217,217,217,217,33,33,47,56,41,218,218,218,218,33,208,184,183,207,216,216,216,216,33,210,186,185,209,219,219,219,219,33,191,188,187,211,209,209,209,209,33,202,179,190,176,219,219,219,219,33,164,191,211,192,139,139,139,139,33,166,193,213,194,138,138,138,138,33,168,195,215,196,220,220,220,220,32,215,225,227,146,146,146,32,227,221,207,221,221,221,32,207,183,149,39,39,39,32,149,148,182,146,146,146,32,149,182,206,39,39,39,32,196,215,227,222,222,222,32,170,197,196,39,39,39,32,171,170,196,39,39,39,32,207,149,206,150,150,150,32,207,206,220,151,151,151,32,198,171,196,39,39,39,32,216,198,196,223,223,223,32,227,207,220,224,224,224,32,227,220,226,225,225,225,32,216,196,227,226,226,226,32,227,226,216,151,151,151,33,198,216,199,172,227,227,227,227,33,200,218,201,174,228,228,228,228,32,178,145,161,7,7,7,32,161,179,202,111,111,111,32,202,175,140,229,229,229,32,140,122,105,230,230,230,32,105,90,79,231,231,231,32,79,103,104,232,232,232,32,79,104,121,233,233,233,32,140,105,79,234,234,234,32,161,202,140,235,235,235,32,203,178,161,236,236,236,32,201,203,161,237,237,237,32,140,79,121,238,238,238,32,140,121,139,239,239,239,32,201,161,140,240,240,240,32,140,139,174,241,241,241,32,174,201,140,242,242,242,33,218,204,203,201,243,243,243,243,33,220,206,205,219,244,244,244,244,33,222,208,207,221,243,243,243,243,33,212,210,209,223,215,215,215,215,33,193,212,223,213,192,192,192,192,33,195,214,225,215,191,191,191,191,33,216,226,217,199,245,245,245,245,33,226,220,219,217,246,246,246,246,33,224,222,221,227,228,228,228,228,33,214,224,227,225,214,214,214,214,33,67,89,101,78,108,108,108,108,33,230,231,232,235,247,247,247,247,32,159,231,230,143,143,143,32,230,153,154,142,142,142,32,155,156,157,141,141,141,32,155,157,128,142,142,142,32,128,127,144,143,143,143,32,158,159,230,141,141,141,32,155,128,144,141,141,141,32,158,230,154,248,248,248,32,154,155,144,142,142,142,32,154,144,158,141,141,141,33,233,234,235,232,142,142,142,142,33,229,228,234,233,249,249,249,249,32,170,136,119,250,250,250,32,170,119,103,251,251,251,32,169,197,170,251,251,251,32,60,102,118,252,252,252,32,169,170,103,250,250,250,32,51,60,118,253,253,253,32,118,169,103,254,254,254,32,79,69,37,252,252,252,32,118,103,79,254,254,254,32,28,51,118,120,120,120,32,118,79,37,255,255,255,32,118,37,29,253,253,253,32,6,21,28,256,256,256,32,28,118,29,257,257,257,32,11,7,2,256,256,256,32,28,29,11,258,258,258,32,2,6,28,259,259,259,32,11,2,28,256,256,256]},"slope_curve_b":{"normals":[-0.707107,0,0.707107,-0.707107,0,-0.707107,0.707107,0,-0.707107,0.707107,0,0.707107,-1.18309e-9,-1,4.37736e-8,2.36614e-8,1,-6.62519e-8,-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534995,0,-0.844855,-0.492897,0,-0.870087,-0.449607,0,-0.893226,-0.405241,0,-0.91421,-0.359892,-5.54748e-8,-0.932994,-0.0967965,0.994604,0.0373383,-0.0948477,0.994604,0.0420427,-0.0926707,0.994604,0.0466462,-0.0902702,0.994604,0.0511372,-0.0876521,0.994604,0.0555049,-0.0848231,0.994604,0.0597388,-0.0817895,0.994604,0.0638289,-0.081864,0.994139,0.0706161,0,1,0,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575808,0,0.817585,0.534995,0,0.844855,0.492898,0,0.870087,0.449607,1.14887e-7,0.893226,0.405241,1.7233e-7,0.91421,0.35989,0,0.932995,-0.10954,0.993084,0.0422537,-0.107334,0.993084,0.0475776,-0.104871,0.993084,0.0527873,-0.102154,0.993084,0.0578695,-0.0991912,0.993084,0.062812,-0.0959898,0.993084,0.0676033,-0.0925568,0.993084,0.0722317,-0.0926294,0.992489,0.0799024,-1.08592e-8,1,-1.54259e-7,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449604,0,0.893228,0.405245,0,0.914208,0.35989,0,0.932995,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.689069,0,-0.724696,0.359893,0,0.932994,0.405241,0,0.91421,0.449607,4.96085e-7,0.893226,0.492896,4.96085e-7,0.870088,0.534996,0,0.844855,0.575808,0,0.817585,0.615229,0,0.788348,0.653171,0,0.757211,0.689147,-5.07059e-7,0.724622,0,1,0,-0.689144,0,-0.724624,-0.35989,0,-0.932995,-0.405244,0,-0.914208,-0.449605,0,-0.893227,-0.492901,0,-0.870086,-0.534994,0,-0.844856,-0.0948538,0.994819,0.0365882,-0.0929438,0.994819,0.041199,-0.0908105,0.994819,0.0457101,-0.0884583,0.994819,0.0501109,-0.085893,0.994819,0.0543904,-0.083121,0.994819,0.0585391,-0.0801483,0.994819,0.0625473,-0.0802225,0.994372,0.0691997,0.359893,0,0.932994,0.405241,0,0.91421,0.449608,0,0.893226,0.492896,0,0.870088,0.534996,0,0.844855,0.575808,0,0.817585,0.615229,0,0.788348,0.653171,0,0.757211,0.689147,0,0.724622,-0.102777,0.993914,0.0396451,-0.100708,0.993914,0.0446403,-0.0983964,0.993914,0.0495283,-0.0958475,0.993914,0.0542966,-0.0930675,0.993914,0.058934,-0.0900638,0.993914,0.0634298,-0.0868428,0.993914,0.0677724,-0.0869168,0.99339,0.0749746,1.36475e-7,1,-1.36475e-7,6.41432e-8,1,-2.79935e-7,0,1,0,-0.405242,0,-0.914209,-0.449606,0,-0.893227,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,-0.112134,0.992751,0.0432543,-0.109877,0.992751,0.0487039,-0.107355,0.992751,0.0540368,-0.104574,0.992751,0.0592397,-0.10154,0.992751,0.0642999,-0.0982635,0.992751,0.0692044,-0.0947494,0.992751,0.0739421,-0.0948209,0.992128,0.0817924,-0.449605,0,-0.893227,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-9.63357e-8,1,-9.63357e-8,0.581237,0,0.813734,-0.813734,0,-0.581237,0.707109,0,-0.707105,0.707107,0,-0.707107,0.707108,0,-0.707106,0.707107,0,-0.707107,0.707107,-0.0000216099,-0.707107,0.707109,0.0000081038,-0.707105,0.707107,0,0.707107,0.707092,0.0000107896,-0.707122,0.707109,-0.0000094147,-0.707105,0.707106,0.0000406412,-0.707108,0.313679,0,0.949529,0.266711,0,0.963777,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,0.0735638,0,0.99729,0.111157,0,0.993803,-0.313679,-5.54752e-8,-0.949529,-0.266711,0,-0.963777,-0.2191,0,-0.975702,-0.170958,0,-0.985278,-0.122409,0,-0.99248,-0.0735639,0,-0.99729,0,0,-1,0,1,-4.469e-8,-0.103468,0.994604,0.00763205,-0.102968,0.994604,0.0126997,-0.102221,0.994604,0.0177368,-0.101228,0.994604,0.0227312,-0.0999906,0.994604,0.0276709,-0.0985127,0.994604,0.032544,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.170958,0,-0.985278,-0.122409,0,-0.99248,-0.0735638,0,-0.99729,-0.117089,0.993084,0.00863681,-0.116524,0.993084,0.0143715,-0.115679,0.993084,0.0200718,-0.114555,0.993084,0.0257238,-0.113154,0.993084,0.0313137,-0.111482,0.993084,0.0368282,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,0.0735639,0,0.997291,0.307795,0,0.951453,-0.073564,0,-0.99729,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.2191,0,-0.975702,-0.266711,0,-0.963776,-0.313679,0,-0.949529,0.111157,0,0.993803,0.122409,0,0.99248,0.170958,0,0.985278,0.2191,0,0.975702,0.266711,0,0.963777,0.313679,0,0.949529,0,1,0,-0.101391,0.994819,0.00747886,-0.100902,0.994819,0.0124447,-0.10017,0.994819,0.0173807,-0.0991961,0.994819,0.0222748,-0.0979837,0.994819,0.0271152,-0.0965356,0.994819,0.0318902,-8.87912e-9,1,-1.0507e-7,-0.10986,0.993914,0.00810358,-0.10933,0.993914,0.0134843,-0.108537,0.993914,0.0188327,-0.107482,0.993914,0.0241357,-0.106168,0.993914,0.0293805,-0.104599,0.993914,0.0345546,0.130446,0,0.991455,0.073564,0,0.99729,0.122409,8.61654e-8,0.99248,0.170958,1.43609e-7,0.985278,0.2191,1.43609e-7,0.975702,0.266711,8.61655e-8,0.963777,0.31368,5.74439e-8,0.949529,-0.119863,0.992751,0.00884132,-0.119283,0.992751,0.0147119,-0.118419,0.992751,0.0205473,-0.117268,0.992751,0.0263332,-0.115834,0.992751,0.0320554,-0.114122,0.992751,0.0377007,-0.073564,0,-0.997291,-0.170958,0,-0.985278,-0.266711,0,-0.963777,-0.313679,0,-0.949529,-0.335866,0,-0.94191,1.41633e-7,1,-8.29734e-8,0,0,1,-3.35118e-8,1,-1.52488e-7,1.81322e-7,1,-4.47033e-8,3.51029e-8,1,-5.19632e-8,-0.335866,0,-0.94191,-1.15856e-8,1,-4.44326e-8,-0.214645,0,-0.976692,-5.45142e-9,1,-4.45831e-8,-0.113723,0,-0.993513,0.164399,0,-0.986394,-1,0,-8.34465e-7,0.164399,0,0.986394,-1,0,-0.00000299154,-1,0,-0.00000224443,-1,0,-0.00000299154,-1,0,-0.00000224443,-1,0.0000025017,-0.00000216002,-1,0,-0.00000237009,-1,0.00000157221,-0.00000224443,0,0,0,-1,0,-0.00000197629,-1,0,-0.00000471824,-1,0,-0.00000197629,-1,0,-0.00000471824,-1,-2.98027e-8,-0.00000199615,-1,-0.00000620944,-0.00000264645,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534995,0,-0.844855,-0.449607,-1.1095e-7,-0.893226,-0.405241,-1.66424e-7,-0.91421,-0.359892,0,-0.932994,0.0967965,-0.994604,-0.0373382,0.0948477,-0.994604,-0.0420427,0.0926707,-0.994604,-0.0466462,0.0902702,-0.994604,-0.0511372,0.0876521,-0.994604,-0.0555049,0.0848231,-0.994604,-0.0597388,0.0817895,-0.994604,-0.0638289,0.081864,-0.994139,-0.0706161,9.72248e-9,-1,7.30422e-8,0.575807,0,0.817585,0.534995,0,0.844855,0.449607,0,0.893226,0.405241,1.14887e-7,0.91421,0.35989,5.74434e-8,0.932995,0.10954,-0.993084,-0.0422536,0.107334,-0.993084,-0.0475776,0.104871,-0.993084,-0.0527873,0.102154,-0.993084,-0.0578695,0.0991912,-0.993084,-0.062812,0.0959898,-0.993084,-0.0676033,0.0925568,-0.993084,-0.0722317,0.0926294,-0.992489,-0.0799026,0,-1,0,0.615228,0,0.78835,0.449604,0,0.893228,0.405245,0,0.914208,-0.653173,0,-0.757209,-0.689069,0,-0.724696,0.449607,0,0.893226,0.534996,4.96085e-7,0.844855,0.689147,5.07059e-7,0.724622,-0.35989,0,-0.932995,0.0948538,-0.994819,-0.0365882,0.0929438,-0.994819,-0.041199,0.0908105,-0.994819,-0.0457101,0.0884583,-0.994819,-0.0501109,0.0858926,-0.994819,-0.054391,0.0831207,-0.994819,-0.0585397,0.0801483,-0.994819,-0.0625472,0.0802225,-0.994372,-0.0691997,0.359893,5.51205e-8,0.932994,0.449607,1.10241e-7,0.893226,0.534996,0,0.844854,0.575808,0,0.817585,0.615229,0,0.788348,0.102777,-0.993914,-0.0396451,0.100708,-0.993914,-0.0446403,0.0983964,-0.993914,-0.0495283,0.0958475,-0.993914,-0.0542966,0.0930676,-0.993914,-0.0589341,0.0900638,-0.993914,-0.0634297,0.0868428,-0.993914,-0.0677723,0.0869169,-0.99339,-0.0749746,0,-1,0,-6.23536e-8,-1,6.23536e-8,-1.95847e-8,-1,8.54718e-8,-0.405242,0,-0.914209,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,0.112134,-0.992751,-0.0432545,0.109877,-0.992751,-0.0487042,0.107355,-0.992751,-0.0540368,0.104574,-0.992751,-0.0592397,0.10154,-0.992751,-0.0642999,0.0982633,-0.992751,-0.0692043,0.0947494,-0.992751,-0.0739421,0.0948211,-0.992128,-0.0817925,1.82526e-7,-1,2.65144e-7,-0.449605,0,-0.893227,-0.534994,0,-0.844856,-0.615228,0,-0.788349,0,-1,0,0.581237,0,0.813734,-0.813734,0,-0.581237,0.707107,0.0000216101,-0.707107,0.707109,-0.0000081038,-0.707105,0.707106,-0.0000431584,-0.707108,-0.0311752,-0.999028,0.0311752,0.707108,0.00000802851,-0.707105,0.313679,1.10242e-7,0.949529,0.2191,0,0.975702,0.170958,0,0.985278,0.0735638,0,0.99729,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.122409,0,-0.99248,-0.0735638,0,-0.99729,0,0,-1,0,-1,4.469e-8,0.103468,-0.994604,-0.00763205,0.102968,-0.994604,-0.0126997,0.102221,-0.994604,-0.0177368,0.101228,-0.994604,-0.0227313,0.0999906,-0.994604,-0.0276709,0.0985127,-0.994603,-0.032544,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.122409,0,-0.99248,0.117089,-0.993084,-0.00863679,0.116524,-0.993084,-0.0143715,0.115679,-0.993084,-0.0200718,0.114555,-0.993084,-0.0257238,0.113154,-0.993084,-0.0313137,0.111482,-0.993084,-0.0368282,0.122409,0,0.99248,-0.122409,0,-0.99248,-0.2191,0,-0.975702,-0.266711,0,-0.963776,0.122409,0,0.99248,0.170958,0,0.985278,0.2191,0,0.975702,0,-1,0,0.101391,-0.994819,-0.00747889,0.100902,-0.994819,-0.0124448,0.10017,-0.994819,-0.0173808,0.099196,-0.994819,-0.022275,0.0979836,-0.994819,-0.0271155,0.0965356,-0.994819,-0.0318903,0.10986,-0.993914,-0.00810358,0.10933,-0.993914,-0.0134843,0.108537,-0.993914,-0.0188327,0.107482,-0.993914,-0.0241357,0.106168,-0.993914,-0.0293805,0.104599,-0.993914,-0.0345546,0.122409,0,0.99248,0.170958,0,0.985278,0.2191,2.87219e-8,0.975702,0.266711,8.61655e-8,0.963776,0.31368,5.74439e-8,0.949529,0.119863,-0.992751,-0.00884132,0.119283,-0.992751,-0.0147118,0.118419,-0.992751,-0.0205472,0.117268,-0.992751,-0.0263332,0.115834,-0.992751,-0.0320553,0.114122,-0.992751,-0.0377006,-0.122409,0,-0.99248,2.14232e-8,-1,1.62827e-7,1.0122e-7,-1,4.47036e-8,9.12048e-8,-1,4.57583e-8,-1.15059e-7,-1,4.75413e-8,5.45142e-9,-1,4.45831e-8,-0.113723,0,-0.993512,-8.92414e-9,-1,1.05602e-7,-1,0,-0.00000224443,-1,-0.00000157222,-0.00000224443,-1,-0.0000025017,-0.00000216002,-1,0.00000815845,-0.00000199615,-1,0.00000100553,-0.00000264645],"metadata":{"generator":"io_three","normals":399,"uvs":0,"vertices":504,"version":3,"faces":532,"type":"Geometry"},"uvs":[],"vertices":[181.019,-4,-24.3741,181.019,12,-24.3741,113.844,-4,-91.5492,113.844,12,-91.5492,191.626,-4,-34.9807,191.626,12,-34.9807,124.451,-4,-102.156,124.451,12,-102.156,156.808,20.5,-42.988,164.932,20.5,-50.7141,156.808,17.5,-42.988,79.1685,8.05,5.26306,89.9301,9.225,1.11191,100.475,10.4,-3.56231,110.778,11.575,-8.74826,120.814,12.75,-14.4335,130.559,13.925,-20.6044,139.989,15.1,-27.246,149.082,16.275,-34.3423,157.816,17.5,-41.8762,165.993,17.5,-49.6531,66.363,8.05,-30.5264,75.3838,9.225,-34.0061,84.223,10.4,-37.9243,92.8594,11.575,-42.2714,101.272,12.75,-47.0371,109.441,13.925,-52.2098,117.346,15.1,-57.7771,124.968,16.275,-63.7256,132.289,17.5,-70.0409,139.115,17.5,-76.5313,78.663,8.05,3.85031,89.3559,9.225,-0.274323,99.8334,10.4,-4.91869,110.07,11.575,-10.0715,120.042,12.75,-15.7205,129.725,13.925,-21.852,139.095,15.1,-28.4512,148.13,16.275,-35.5022,164.932,17.5,-50.7141,75.9671,8.05,-3.68433,86.2935,9.225,-7.66759,96.412,10.4,-12.1528,106.298,11.575,-17.129,115.928,12.75,-22.5844,125.279,13.925,-28.5057,134.328,15.1,-34.8788,143.054,16.275,-41.6881,151.434,17.5,-48.9174,159.274,17.5,-56.3727,69.5643,8.05,-21.5791,79.0204,9.225,-25.2266,88.286,10.4,-29.3338,97.339,11.575,-33.8906,106.157,12.75,-38.8862,114.72,13.925,-44.3084,123.006,15.1,-50.1443,130.997,16.275,-56.3798,138.671,17.5,-62.9997,145.835,17.5,-69.8117,66.8684,8.05,-29.1137,75.958,9.225,-32.6199,84.8645,10.4,-36.5679,93.5667,11.575,-40.9481,102.043,12.75,-45.7501,110.274,13.925,-50.9622,118.239,15.1,-56.5719,125.92,16.275,-62.5657,133.297,17.5,-68.9291,140.176,17.5,-75.4703,78.663,11.05,3.85031,89.3559,12.225,-0.274323,99.8334,13.4,-4.91869,110.07,14.575,-10.0715,120.042,15.75,-15.7205,129.725,16.925,-21.852,139.095,18.1,-28.4512,148.13,19.275,-35.5022,79.1685,11.05,5.26306,89.9301,12.225,1.11191,100.475,13.4,-3.56231,110.778,14.575,-8.74826,120.814,15.75,-14.4335,130.559,16.925,-20.6044,139.989,18.1,-27.246,149.082,19.275,-34.3423,157.816,20.5,-41.8762,165.993,20.5,-49.6531,75.9671,11.05,-3.68433,86.2935,12.225,-7.66759,96.412,13.4,-12.1528,106.298,14.575,-17.129,115.928,15.75,-22.5844,125.279,16.925,-28.5057,134.328,18.1,-34.8788,143.054,19.275,-41.6881,151.434,20.5,-48.9174,159.274,20.5,-56.3727,69.5643,11.05,-21.5791,79.0204,12.225,-25.2266,88.286,13.4,-29.3338,97.339,14.575,-33.8906,106.157,15.75,-38.8862,114.72,16.925,-44.3084,123.006,18.1,-50.1443,130.997,19.275,-56.3798,138.671,20.5,-62.9997,145.835,20.5,-69.8117,66.8684,11.05,-29.1137,75.958,12.225,-32.6199,84.8645,13.4,-36.5679,93.5667,14.575,-40.9481,102.043,15.75,-45.7501,110.274,16.925,-50.9622,118.239,18.1,-56.5719,125.92,19.275,-62.5657,133.297,20.5,-68.9291,140.176,20.5,-75.4703,66.363,11.05,-30.5264,75.3838,12.225,-34.0061,84.223,13.4,-37.9243,92.8594,14.575,-42.2714,101.272,15.75,-47.0371,109.441,16.925,-52.2098,117.346,18.1,-57.7771,124.968,19.275,-63.7256,132.289,20.5,-70.0409,139.115,20.5,-76.5313,164.226,20.5,-64.1488,153.265,20.5,-75.109,156.801,20.5,-58.8455,147.962,20.5,-67.6843,133.998,-37.5119,-77.7434,0.24996,1,19,11.5305,1,18.717,23.0336,2.175,17.8685,34.4812,3.35,16.4565,45.8457,4.525,14.4846,57.0998,5.7,11.9575,68.2164,6.875,8.88113,0.250039,0.999999,-19.0114,9.66539,0.999999,-19.2487,19.3078,2.175,-19.96,28.9038,3.35,-21.1435,38.4301,4.525,-22.7964,47.8638,5.7,-24.9148,57.1823,6.875,-27.4936,0.249963,1,17.4995,11.4568,1,17.2183,22.8865,2.175,16.3752,34.261,3.35,14.9723,45.553,4.525,13.013,56.7352,5.7,10.502,67.7808,6.875,7.44529,0.249979,1,9.49714,11.0642,1,9.22555,22.1021,2.175,8.41135,33.0868,3.35,7.05653,43.9918,4.525,5.16438,54.7908,5.7,2.7394,65.4578,6.875,-0.212545,0.250019,1,-9.50859,10.1317,1,-9.75728,20.2393,2.175,-10.5029,30.2982,3.35,-11.7435,40.284,4.525,-13.4762,50.1728,5.7,-15.6968,59.9408,6.875,-18.3999,0.250036,0.999999,-17.511,9.73901,0.999999,-17.7501,19.4549,2.175,-18.4667,29.124,3.35,-19.6593,38.7229,4.525,-21.3248,48.2284,5.7,-23.4593,57.6178,6.875,-26.0577,0.249963,4,17.4995,11.4568,4,17.2183,22.8865,5.175,16.3752,34.261,6.35,14.9723,45.553,7.525,13.013,56.7352,8.7,10.502,67.7808,9.875,7.44529,0.24996,4,19,11.5305,4,18.717,23.0336,5.175,17.8685,34.4812,6.35,16.4565,45.8457,7.525,14.4846,57.0998,8.7,11.9575,68.2164,9.875,8.88113,0.249979,4,9.49714,11.0642,4,9.22555,22.1021,5.175,8.41135,33.0868,6.35,7.05653,43.9918,7.525,5.16438,54.7908,8.7,2.7394,65.4578,9.875,-0.212545,0.250019,4,-9.50859,10.1317,4,-9.75728,20.2393,5.175,-10.5029,30.2982,6.35,-11.7435,40.284,7.525,-13.4762,50.1728,8.7,-15.6968,59.9408,9.875,-18.3999,0.250036,4,-17.511,9.73901,4,-17.7501,19.4549,5.175,-18.4667,29.124,6.35,-19.6593,38.7229,7.525,-21.3248,48.2284,8.7,-23.4593,57.6178,9.875,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,5.175,-19.96,28.9038,6.35,-21.1435,38.4301,7.525,-22.7964,47.8638,8.7,-24.9148,57.1823,9.875,-27.4936,8.99996,1,17.4995,8.99996,1,19,8.99998,1,9.49714,9.00002,1,-9.50859,9.00004,0.999999,-17.511,9.00004,0.999999,-19.0114,8.99996,4,17.4995,8.99996,4,19,8.99998,4,9.49714,9.00002,4,-9.50859,9.00004,4,-17.511,9.00004,4,-19.0114,9.25001,4,-8,9.24999,4,8,0.249993,4,6.5,0.25001,4,-6.5,192.513,-37.5119,-212.989,79.1685,7.05,5.26306,89.9301,8.225,1.11191,100.475,9.4,-3.56231,110.778,10.575,-8.74826,120.814,11.75,-14.4335,130.559,12.925,-20.6044,139.989,14.1,-27.246,149.082,15.275,-34.3423,157.816,16.5,-41.8762,165.993,16.5,-49.6531,66.363,7.05,-30.5264,75.3838,8.225,-34.0061,84.223,9.4,-37.9243,92.8594,10.575,-42.2714,101.272,11.75,-47.0371,109.441,12.925,-52.2098,117.346,14.1,-57.7771,124.968,15.275,-63.7256,132.289,16.5,-70.0409,139.115,16.5,-76.5313,156.808,12.5,-42.988,164.932,12.5,-50.7141,156.808,15.5,-42.988,79.1685,6.05,5.26306,89.9301,7.225,1.11191,100.475,8.4,-3.56231,110.778,9.575,-8.74826,120.814,10.75,-14.4335,130.559,11.925,-20.6044,139.989,13.1,-27.246,149.082,14.275,-34.3423,157.816,15.5,-41.8762,165.993,15.5,-49.6531,66.363,6.05,-30.5264,75.3838,7.225,-34.0061,84.223,8.4,-37.9243,92.8594,9.575,-42.2714,101.272,10.75,-47.0371,109.441,11.925,-52.2098,117.346,13.1,-57.7771,124.968,14.275,-63.7256,132.289,15.5,-70.0409,139.115,15.5,-76.5313,78.663,6.05,3.85031,89.3559,7.225,-0.274323,99.8334,8.4,-4.91869,110.07,9.575,-10.0715,120.042,10.75,-15.7205,129.725,11.925,-21.852,139.095,13.1,-28.4512,148.13,14.275,-35.5022,164.932,15.5,-50.7141,75.9671,6.05,-3.68433,86.2935,7.225,-7.66759,96.412,8.4,-12.1528,106.298,9.575,-17.129,115.928,10.75,-22.5844,125.279,11.925,-28.5057,134.328,13.1,-34.8788,143.054,14.275,-41.6881,151.434,15.5,-48.9174,159.274,15.5,-56.3727,69.5643,6.05,-21.5791,79.0204,7.225,-25.2266,88.286,8.4,-29.3338,97.339,9.575,-33.8906,106.157,10.75,-38.8862,114.72,11.925,-44.3084,123.006,13.1,-50.1443,130.997,14.275,-56.3798,138.671,15.5,-62.9997,145.835,15.5,-69.8117,66.8684,6.05,-29.1137,75.958,7.225,-32.6199,84.8645,8.4,-36.5679,93.5667,9.575,-40.9481,102.043,10.75,-45.7501,110.274,11.925,-50.9622,118.239,13.1,-56.5719,125.92,14.275,-62.5657,133.297,15.5,-68.9291,140.176,15.5,-75.4703,78.663,3.05,3.85031,89.3559,4.225,-0.274323,99.8334,5.4,-4.91869,110.07,6.575,-10.0715,120.042,7.75,-15.7205,129.725,8.925,-21.852,139.095,10.1,-28.4512,148.13,11.275,-35.5022,79.1685,3.05,5.26306,89.9301,4.225,1.11191,100.475,5.4,-3.56231,110.778,6.575,-8.74826,120.814,7.75,-14.4335,130.559,8.925,-20.6044,139.989,10.1,-27.246,149.082,11.275,-34.3423,157.816,12.5,-41.8762,165.993,12.5,-49.6531,75.9671,3.05,-3.68433,86.2935,4.225,-7.66759,96.412,5.4,-12.1528,106.298,6.575,-17.129,115.928,7.75,-22.5844,125.279,8.925,-28.5057,134.328,10.1,-34.8788,143.054,11.275,-41.6881,151.434,12.5,-48.9174,159.274,12.5,-56.3727,69.5643,3.05,-21.5791,79.0204,4.225,-25.2266,88.286,5.4,-29.3338,97.339,6.575,-33.8906,106.157,7.75,-38.8862,114.72,8.925,-44.3084,123.006,10.1,-50.1443,130.997,11.275,-56.3798,138.671,12.5,-62.9997,145.835,12.5,-69.8117,66.8684,3.05,-29.1137,75.958,4.225,-32.6199,84.8645,5.4,-36.5679,93.5667,6.575,-40.9481,102.043,7.75,-45.7501,110.274,8.925,-50.9622,118.239,10.1,-56.5719,125.92,11.275,-62.5657,133.297,12.5,-68.9291,140.176,12.5,-75.4703,66.363,3.05,-30.5264,75.3838,4.225,-34.0061,84.223,5.4,-37.9243,92.8594,6.575,-42.2714,101.272,7.75,-47.0371,109.441,8.925,-52.2098,117.346,10.1,-57.7771,124.968,11.275,-63.7256,132.289,12.5,-70.0409,139.115,12.5,-76.5313,164.226,12.5,-64.1488,153.265,12.5,-75.109,156.801,12.5,-58.8455,147.962,12.5,-67.6843,164.226,16.5,-64.1488,153.265,16.5,-75.109,156.801,16.5,-58.8455,147.962,16.5,-67.6843,133.998,37.5119,-77.7434,0.24996,8.30516e-7,19,11.5305,8.18144e-7,18.717,23.0336,1.175,17.8685,34.4812,2.35,16.4565,45.8457,3.525,14.4846,57.0998,4.7,11.9575,68.2164,5.875,8.88113,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,1.175,-19.96,28.9038,2.35,-21.1435,38.4301,3.525,-22.7964,47.8638,4.7,-24.9148,57.1823,5.875,-27.4936,0.24996,-0.999999,19,11.5305,-0.999999,18.717,23.0336,0.175001,17.8685,34.4812,1.35,16.4565,45.8457,2.525,14.4846,57.0998,3.7,11.9575,68.2164,4.875,8.88113,0.250039,-1,-19.0114,9.66539,-1,-19.2487,19.3078,0.174999,-19.96,28.9038,1.35,-21.1435,38.4301,2.525,-22.7964,47.8638,3.7,-24.9148,57.1823,4.875,-27.4936,0.249963,-0.999999,17.4995,11.4568,-0.999999,17.2183,22.8865,0.175001,16.3752,34.261,1.35,14.9723,45.553,2.525,13.013,56.7352,3.7,10.502,67.7808,4.875,7.44529,0.249979,-1,9.49714,11.0642,-1,9.22555,22.1021,0.175,8.41135,33.0868,1.35,7.05653,43.9918,2.525,5.16438,54.7908,3.7,2.7394,65.4578,4.875,-0.212545,0.250019,-1,-9.50859,10.1317,-1,-9.75728,20.2393,0.174999,-10.5029,30.2982,1.35,-11.7435,40.284,2.525,-13.4762,50.1728,3.7,-15.6968,59.9408,4.875,-18.3999,0.250036,-1,-17.511,9.73901,-1,-17.7501,19.4549,0.174999,-18.4667,29.124,1.35,-19.6593,38.7229,2.525,-21.3248,48.2284,3.7,-23.4593,57.6178,4.875,-26.0577,0.249963,-4,17.4995,11.4568,-4,17.2183,22.8865,-2.825,16.3752,34.261,-1.65,14.9723,45.553,-0.474999,13.013,56.7352,0.7,10.502,67.7808,1.875,7.44529,0.24996,-4,19,11.5305,-4,18.717,23.0336,-2.825,17.8685,34.4812,-1.65,16.4565,45.8457,-0.474999,14.4846,57.0998,0.7,11.9575,68.2164,1.875,8.88113,0.249979,-4,9.49714,11.0642,-4,9.22555,22.1021,-2.825,8.41135,33.0868,-1.65,7.05653,43.9918,-0.475,5.16438,54.7908,0.7,2.7394,65.4578,1.875,-0.212545,0.250019,-4,-9.50859,10.1317,-4,-9.75728,20.2393,-2.825,-10.5029,30.2982,-1.65,-11.7435,40.284,-0.475001,-13.4762,50.1728,0.699999,-15.6968,59.9408,1.875,-18.3999,0.250036,-4,-17.511,9.73901,-4,-17.7501,19.4549,-2.825,-18.4667,29.124,-1.65,-19.6593,38.7229,-0.475001,-21.3248,48.2284,0.699999,-23.4593,57.6178,1.875,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-2.825,-19.96,28.9038,-1.65,-21.1435,38.4301,-0.475001,-22.7964,47.8638,0.699999,-24.9148,57.1823,1.875,-27.4936,8.99996,8.30516e-7,19,9.00004,-8.31017e-7,-19.0114,8.99996,-0.999999,17.4995,8.99996,-0.999999,19,8.99998,-1,9.49714,9.00002,-1,-9.50859,9.00004,-1,-17.511,9.00004,-1,-19.0114,8.99996,-4,17.4995,8.99996,-4,19,8.99998,-4,9.49714,9.00002,-4,-9.50859,9.00004,-4,-17.511,9.00004,-4,-19.0114,9.25001,-4,-8,9.24999,-4,8,0.249993,-4,6.5,0.25001,-4,-6.5,9.25001,-3.49691e-7,-8,9.24999,3.49691e-7,8,0.249993,2.84124e-7,6.5,0.25001,-2.84124e-7,-6.5,192.513,37.5119,-212.989],"faces":[33,0,1,3,2,0,0,0,0,33,2,3,7,6,1,1,1,1,33,6,7,5,4,2,2,2,2,33,1,0,4,5,3,3,3,3,33,4,0,2,6,4,4,4,4,33,7,3,1,5,5,5,5,5,33,10,38,77,8,6,6,6,6,33,38,37,76,77,7,7,7,7,33,37,36,75,76,8,8,8,8,33,36,35,74,75,9,9,9,9,33,35,34,73,74,10,10,10,10,33,34,33,72,73,11,11,11,11,33,33,32,71,72,12,12,12,12,33,32,31,70,71,13,13,13,13,33,41,40,31,32,14,14,14,14,33,42,41,32,33,15,15,15,15,33,43,42,33,34,16,16,16,16,33,44,43,34,35,17,17,17,17,33,45,44,35,36,18,18,18,18,33,46,45,36,37,19,19,19,19,33,47,46,37,38,20,20,20,20,33,48,47,38,10,21,21,21,21,33,49,48,10,39,22,22,22,22,33,51,50,98,99,23,23,23,23,33,48,49,97,96,24,24,24,24,33,47,48,96,95,25,25,25,25,33,46,47,95,94,26,26,26,26,33,45,46,94,93,27,27,27,27,33,44,45,93,92,28,28,28,28,33,43,44,92,91,29,29,29,29,33,42,43,91,90,30,30,30,30,33,41,42,90,89,31,31,31,31,33,40,41,89,88,32,32,32,32,33,61,60,50,51,33,33,33,33,33,62,61,51,52,34,34,34,34,33,63,62,52,53,35,35,35,35,33,64,63,53,54,36,36,36,36,33,65,64,54,55,37,37,37,37,33,66,65,55,56,38,38,38,38,33,67,66,56,57,39,39,39,39,33,68,67,57,58,40,40,40,40,33,69,68,58,59,41,41,41,41,33,68,69,117,116,42,42,42,42,33,67,68,116,115,43,43,43,43,33,66,67,115,114,44,44,44,44,33,65,66,114,113,45,45,45,45,33,64,65,113,112,46,46,46,46,33,63,64,112,111,47,47,47,47,33,62,63,111,110,48,48,48,48,33,61,62,110,109,49,49,49,49,33,60,61,109,108,50,50,50,50,33,250,249,26,27,51,51,51,51,33,251,250,27,28,52,52,52,52,33,252,251,28,29,53,53,53,53,33,253,252,29,30,54,54,54,54,33,234,235,12,11,55,55,55,55,33,235,236,13,12,56,56,56,56,33,236,237,14,13,57,57,57,57,33,237,238,15,14,58,58,58,58,33,238,239,16,15,59,59,59,59,33,239,240,17,16,60,60,60,60,33,240,241,18,17,61,61,61,61,33,241,242,19,18,62,62,62,62,33,242,243,20,19,63,63,63,63,33,86,87,9,8,64,64,64,64,33,10,8,9,39,65,65,65,65,33,245,244,21,22,66,66,66,66,33,246,245,22,23,67,67,67,67,33,247,246,23,24,68,68,68,68,33,248,247,24,25,69,69,69,69,33,249,248,25,26,70,70,70,70,33,71,70,78,79,71,71,71,71,33,72,71,79,80,72,72,72,72,33,73,72,80,81,73,73,73,73,33,74,73,81,82,74,74,74,74,33,75,74,82,83,75,75,75,75,33,76,75,83,84,76,76,76,76,33,77,76,84,85,77,77,77,77,33,8,77,85,86,78,78,78,78,33,11,12,79,78,79,79,79,79,33,12,13,80,79,80,80,80,80,33,13,14,81,80,81,81,81,81,33,14,15,82,81,82,82,82,82,33,15,16,83,82,83,83,83,83,33,16,17,84,83,84,84,84,84,33,17,18,85,84,85,85,85,85,33,18,19,86,85,86,86,86,86,33,19,20,87,86,87,87,87,87,33,99,98,88,89,88,88,88,88,33,100,99,89,90,89,89,89,89,33,101,100,90,91,90,90,90,90,33,102,101,91,92,91,91,91,91,33,103,102,92,93,92,92,92,92,33,104,103,93,94,93,93,93,93,33,105,104,94,95,94,94,94,94,33,106,105,95,96,95,95,95,95,32,131,107,106,96,96,96,32,106,96,97,22,22,22,32,130,131,106,97,97,97,32,106,97,130,98,98,98,33,52,51,99,100,99,99,99,99,33,53,52,100,101,100,100,100,100,33,54,53,101,102,101,101,101,101,33,55,54,102,103,102,102,102,102,33,56,55,103,104,103,103,103,103,33,57,56,104,105,104,104,104,104,33,58,57,105,106,105,105,105,105,33,59,58,106,107,106,106,106,106,33,119,118,108,109,107,107,107,107,33,120,119,109,110,108,108,108,108,33,121,120,110,111,109,109,109,109,33,122,121,111,112,110,110,110,110,33,123,122,112,113,111,111,111,111,33,124,123,113,114,112,112,112,112,33,125,124,114,115,113,113,113,113,33,126,125,115,116,114,114,114,114,33,127,126,116,117,22,22,22,22,33,22,21,118,119,66,66,66,66,33,23,22,119,120,67,67,67,67,33,24,23,120,121,115,115,115,115,33,25,24,121,122,69,69,69,69,33,26,25,122,123,116,116,116,116,33,27,26,123,124,117,117,117,117,33,28,27,124,125,118,118,118,118,33,29,28,125,126,119,119,119,119,33,30,29,126,127,54,54,54,54,33,129,131,130,128,120,120,120,120,33,130,380,378,128,121,121,121,121,33,129,379,381,131,122,122,122,122,33,128,378,379,129,123,123,123,123,32,59,107,131,124,124,124,32,381,253,30,125,125,125,32,30,127,117,2,2,2,32,30,117,69,2,2,2,32,59,131,381,126,126,126,32,381,30,69,127,127,127,32,59,381,69,128,128,128,32,39,9,87,2,2,2,32,87,20,243,129,129,129,32,380,130,97,2,2,2,32,380,97,49,2,2,2,32,39,87,243,130,130,130,32,380,49,39,131,131,131,32,39,243,380,132,132,132,33,139,11,78,188,133,133,133,133,33,138,139,188,187,134,134,134,134,33,137,138,187,186,135,135,135,135,33,136,137,186,185,136,136,136,136,33,135,136,185,184,137,137,137,137,33,134,135,184,183,138,138,138,138,33,218,134,183,224,139,139,139,139,33,31,153,181,70,140,140,140,140,33,153,152,180,181,141,141,141,141,33,152,151,179,180,142,142,142,142,33,151,150,178,179,143,143,143,143,33,150,149,177,178,144,144,144,144,33,149,148,176,177,145,145,145,145,33,217,147,175,223,146,146,146,146,33,219,154,147,217,147,147,147,147,33,156,155,148,149,148,148,148,148,33,157,156,149,150,149,149,149,149,33,158,157,150,151,150,150,150,150,33,159,158,151,152,151,151,151,151,33,160,159,152,153,152,152,152,152,33,40,160,153,31,153,153,153,153,33,50,167,202,98,154,154,154,154,33,167,166,201,202,155,155,155,155,33,166,165,200,201,156,156,156,156,33,165,164,199,200,157,157,157,157,33,164,163,198,199,158,158,158,158,33,163,162,197,198,159,159,159,159,33,220,161,196,226,146,146,146,146,33,221,168,161,220,147,147,147,147,33,170,169,162,163,160,160,160,160,33,171,170,163,164,161,161,161,161,33,172,171,164,165,162,162,162,162,33,173,172,165,166,163,163,163,163,33,174,173,166,167,164,164,164,164,33,60,174,167,50,165,165,165,165,33,174,60,108,209,166,166,166,166,33,173,174,209,208,167,167,167,167,33,172,173,208,207,168,168,168,168,33,171,172,207,206,169,169,169,169,33,170,171,206,205,170,170,170,170,33,169,170,205,204,171,171,171,171,33,221,169,204,227,172,172,172,172,33,482,390,140,222,146,146,146,146,33,392,391,141,142,173,173,173,173,33,393,392,142,143,174,174,174,174,33,394,393,143,144,175,175,175,175,33,395,394,144,145,176,176,176,176,33,396,395,145,146,177,177,177,177,33,244,396,146,21,178,178,178,178,33,481,384,134,218,179,179,179,179,33,384,385,135,134,138,138,138,138,33,385,386,136,135,180,180,180,180,33,386,387,137,136,181,181,181,181,33,387,388,138,137,182,182,182,182,33,388,389,139,138,183,183,183,183,33,389,234,11,139,184,184,184,184,33,223,175,182,224,185,185,185,185,33,177,176,183,184,186,186,186,186,33,178,177,184,185,187,187,187,187,33,179,178,185,186,188,188,188,188,33,180,179,186,187,189,189,189,189,33,181,180,187,188,190,190,190,190,33,70,181,188,78,191,191,191,191,33,226,196,232,229,192,192,192,192,33,198,197,190,191,193,193,193,193,33,199,198,191,192,194,194,194,194,33,200,199,192,193,195,195,195,195,33,201,200,193,194,196,196,196,196,33,202,201,194,195,197,197,197,197,33,98,202,195,88,198,198,198,198,33,219,155,190,225,199,199,199,199,33,155,156,191,190,200,200,200,200,33,156,157,192,191,201,201,201,201,33,157,158,193,192,202,202,202,202,33,158,159,194,193,203,203,203,203,33,159,160,195,194,204,204,204,204,33,160,40,88,195,205,205,205,205,33,228,210,203,227,185,185,185,185,33,212,211,204,205,206,206,206,206,33,213,212,205,206,207,207,207,207,33,214,213,206,207,208,208,208,208,33,215,214,207,208,209,209,209,209,33,216,215,208,209,210,210,210,210,33,118,216,209,108,211,211,211,211,33,222,140,210,228,146,146,146,146,33,142,141,211,212,212,212,212,212,33,143,142,212,213,174,174,174,174,33,144,143,213,214,213,213,213,213,33,145,144,214,215,176,176,176,176,33,146,145,215,216,214,214,214,214,33,21,146,216,118,215,215,215,215,33,141,222,228,211,216,216,216,216,33,211,228,227,204,217,217,217,217,33,154,219,225,189,218,218,218,218,32,197,226,229,219,219,219,32,230,225,190,22,22,22,32,197,229,230,220,220,220,32,197,230,190,221,221,221,33,176,223,224,183,22,22,22,22,33,383,481,218,133,218,218,218,218,33,391,482,222,141,222,222,222,222,33,168,221,227,203,218,218,218,218,33,169,221,220,162,223,223,223,223,33,162,220,226,197,224,224,224,224,33,155,219,217,148,225,225,225,225,33,148,217,223,176,226,226,226,226,33,133,218,224,182,218,218,218,218,33,231,230,500,501,227,227,227,227,33,230,231,189,225,22,22,22,22,33,230,229,499,500,228,228,228,228,33,229,232,502,499,229,229,229,229,32,232,196,161,230,230,230,32,168,203,210,231,231,231,32,502,232,161,232,232,232,32,168,210,140,233,233,233,32,502,161,168,234,234,234,32,140,390,502,235,235,235,32,168,140,502,236,236,236,32,383,133,182,237,237,237,32,182,175,147,238,238,238,32,154,189,231,239,239,239,32,383,182,147,240,240,240,32,154,231,501,241,241,241,32,383,147,154,242,242,242,32,154,501,383,243,243,243,33,256,254,323,284,6,6,6,6,33,284,323,322,283,244,244,244,244,33,283,322,321,282,245,245,245,245,33,282,321,320,281,246,246,246,246,33,281,320,319,280,10,10,10,10,33,280,319,318,279,247,247,247,247,33,279,318,317,278,248,248,248,248,33,278,317,316,277,249,249,249,249,33,287,278,277,286,250,250,250,250,33,288,279,278,287,251,251,251,251,33,289,280,279,288,252,252,252,252,33,290,281,280,289,253,253,253,253,33,291,282,281,290,254,254,254,254,33,292,283,282,291,255,255,255,255,33,293,284,283,292,256,256,256,256,33,294,256,284,293,257,257,257,257,33,295,285,256,294,258,258,258,258,33,297,345,344,296,23,23,23,23,33,294,342,343,295,24,24,24,24,33,293,341,342,294,25,25,25,25,33,292,340,341,293,26,26,26,26,33,291,339,340,292,259,259,259,259,33,290,338,339,291,260,260,260,260,33,289,337,338,290,29,29,29,29,33,288,336,337,289,261,261,261,261,33,287,335,336,288,262,262,262,262,33,286,334,335,287,263,263,263,263,33,307,297,296,306,264,264,264,264,33,308,298,297,307,265,265,265,265,33,309,299,298,308,266,266,266,266,33,310,300,299,309,267,267,267,267,33,311,301,300,310,268,268,268,268,33,312,302,301,311,269,269,269,269,33,313,303,302,312,270,270,270,270,33,314,304,303,313,271,271,271,271,33,315,305,304,314,272,272,272,272,33,314,362,363,315,42,42,42,42,33,313,361,362,314,43,43,43,43,33,312,360,361,313,273,273,273,273,33,311,359,360,312,45,45,45,45,33,310,358,359,311,46,46,46,46,33,309,357,358,310,47,47,47,47,33,308,356,357,309,274,274,274,274,33,307,355,356,308,275,275,275,275,33,306,354,355,307,50,50,50,50,33,250,273,272,249,51,51,51,51,33,251,274,273,250,52,52,52,52,33,252,275,274,251,276,276,276,276,33,253,276,275,252,277,277,277,277,33,234,257,258,235,55,55,55,55,33,235,258,259,236,56,56,56,56,33,236,259,260,237,278,278,278,278,33,237,260,261,238,58,58,58,58,33,238,261,262,239,279,279,279,279,33,239,262,263,240,60,60,60,60,33,240,263,264,241,61,61,61,61,33,241,264,265,242,62,62,62,62,33,242,265,266,243,280,280,280,280,33,332,254,255,333,272,272,272,272,33,256,285,255,254,65,65,65,65,33,245,268,267,244,281,281,281,281,33,246,269,268,245,67,67,67,67,33,247,270,269,246,68,68,68,68,33,248,271,270,247,69,69,69,69,33,249,272,271,248,70,70,70,70,33,317,325,324,316,282,282,282,282,33,318,326,325,317,283,283,283,283,33,319,327,326,318,284,284,284,284,33,320,328,327,319,285,285,285,285,33,321,329,328,320,286,286,286,286,33,322,330,329,321,287,287,287,287,33,323,331,330,322,288,288,288,288,33,254,332,331,323,289,289,289,289,33,257,324,325,258,290,290,290,290,33,258,325,326,259,80,80,80,80,33,259,326,327,260,291,291,291,291,33,260,327,328,261,82,82,82,82,33,261,328,329,262,292,292,292,292,33,262,329,330,263,293,293,293,293,33,263,330,331,264,294,294,294,294,33,264,331,332,265,86,86,86,86,33,265,332,333,266,87,87,87,87,33,345,335,334,344,295,295,295,295,33,346,336,335,345,296,296,296,296,33,347,337,336,346,297,297,297,297,33,348,338,337,347,298,298,298,298,33,349,339,338,348,299,299,299,299,33,350,340,339,349,300,300,300,300,33,351,341,340,350,301,301,301,301,33,352,342,341,351,302,302,302,302,32,352,353,377,303,303,303,32,376,343,342,304,304,304,32,352,377,376,303,303,303,32,376,342,352,305,305,305,33,298,346,345,297,306,306,306,306,33,299,347,346,298,100,100,100,100,33,300,348,347,299,307,307,307,307,33,301,349,348,300,308,308,308,308,33,302,350,349,301,309,309,309,309,33,303,351,350,302,104,104,104,104,33,304,352,351,303,105,105,105,105,33,305,353,352,304,106,106,106,106,33,365,355,354,364,310,310,310,310,33,366,356,355,365,311,311,311,311,33,367,357,356,366,312,312,312,312,33,368,358,357,367,313,313,313,313,33,369,359,358,368,314,314,314,314,33,370,360,359,369,315,315,315,315,33,371,361,360,370,316,316,316,316,33,372,362,361,371,317,317,317,317,33,373,363,362,372,318,318,318,318,33,268,365,364,267,66,66,66,66,33,269,366,365,268,67,67,67,67,33,270,367,366,269,319,319,319,319,33,271,368,367,270,69,69,69,69,33,272,369,368,271,320,320,320,320,33,273,370,369,272,117,117,117,117,33,274,371,370,273,321,321,321,321,33,275,372,371,274,119,119,119,119,33,276,373,372,275,54,54,54,54,33,375,374,376,377,322,322,322,322,33,376,374,378,380,323,323,323,323,33,375,377,381,379,324,324,324,324,33,374,375,379,378,123,123,123,123,32,315,363,373,2,2,2,32,276,253,381,125,125,125,32,315,373,276,2,2,2,32,377,353,305,124,124,124,32,315,276,381,325,325,325,32,381,377,305,126,126,126,32,305,315,381,326,326,326,32,295,343,376,2,2,2,32,380,243,266,327,327,327,32,266,333,255,2,2,2,32,266,255,285,2,2,2,32,295,376,380,2,2,2,32,266,285,295,328,328,328,32,295,380,266,329,329,329,33,403,452,324,257,330,330,330,330,33,402,451,452,403,134,134,134,134,33,401,450,451,402,331,331,331,331,33,400,449,450,401,332,332,332,332,33,399,448,449,400,137,137,137,137,33,398,447,448,399,333,333,333,333,33,484,490,447,398,139,139,139,139,33,277,316,445,417,334,334,334,334,33,417,445,444,416,335,335,335,335,33,416,444,443,415,142,142,142,142,33,415,443,442,414,143,143,143,143,33,414,442,441,413,336,336,336,336,33,413,441,440,412,337,337,337,337,33,483,489,439,411,338,338,338,338,33,485,483,411,418,339,339,339,339,33,420,413,412,419,340,340,340,340,33,421,414,413,420,341,341,341,341,33,422,415,414,421,342,342,342,342,33,423,416,415,422,343,343,343,343,33,424,417,416,423,344,344,344,344,33,286,277,417,424,345,345,345,345,33,296,344,466,431,154,154,154,154,33,431,466,465,430,346,346,346,346,33,430,465,464,429,347,347,347,347,33,429,464,463,428,157,157,157,157,33,428,463,462,427,348,348,348,348,33,427,462,461,426,159,159,159,159,33,486,492,460,425,338,338,338,338,33,487,486,425,432,339,339,339,339,33,434,427,426,433,349,349,349,349,33,435,428,427,434,350,350,350,350,33,436,429,428,435,351,351,351,351,33,437,430,429,436,352,352,352,352,33,438,431,430,437,353,353,353,353,33,306,296,431,438,354,354,354,354,33,438,473,354,306,166,166,166,166,33,437,472,473,438,167,167,167,167,33,436,471,472,437,168,168,168,168,33,435,470,471,436,169,169,169,169,33,434,469,470,435,355,355,355,355,33,433,468,469,434,171,171,171,171,33,487,493,468,433,172,172,172,172,33,482,488,404,390,338,338,338,338,33,392,406,405,391,173,173,173,173,33,393,407,406,392,356,356,356,356,33,394,408,407,393,175,175,175,175,33,395,409,408,394,357,357,357,357,33,396,410,409,395,358,358,358,358,33,244,267,410,396,215,215,215,215,33,481,484,398,384,179,179,179,179,33,384,398,399,385,138,138,138,138,33,385,399,400,386,359,359,359,359,33,386,400,401,387,360,360,360,360,33,387,401,402,388,361,361,361,361,33,388,402,403,389,183,183,183,183,33,389,403,257,234,184,184,184,184,33,489,490,446,439,362,362,362,362,33,441,448,447,440,363,363,363,363,33,442,449,448,441,364,364,364,364,33,443,450,449,442,365,365,365,365,33,444,451,450,443,366,366,366,366,33,445,452,451,444,367,367,367,367,33,316,324,452,445,368,368,368,368,33,492,495,498,460,272,272,272,272,33,462,455,454,461,369,369,369,369,33,463,456,455,462,370,370,370,370,33,464,457,456,463,371,371,371,371,33,465,458,457,464,372,372,372,372,33,466,459,458,465,373,373,373,373,33,344,334,459,466,374,374,374,374,33,485,491,454,419,199,199,199,199,33,419,454,455,420,200,200,200,200,33,420,455,456,421,375,375,375,375,33,421,456,457,422,376,376,376,376,33,422,457,458,423,377,377,377,377,33,423,458,459,424,378,378,378,378,33,424,459,334,286,379,379,379,379,33,494,493,467,474,362,362,362,362,33,476,469,468,475,380,380,380,380,33,477,470,469,476,381,381,381,381,33,478,471,470,477,382,382,382,382,33,479,472,471,478,383,383,383,383,33,480,473,472,479,384,384,384,384,33,364,354,473,480,385,385,385,385,33,488,494,474,404,338,338,338,338,33,406,476,475,405,212,212,212,212,33,407,477,476,406,386,386,386,386,33,408,478,477,407,213,213,213,213,33,409,479,478,408,176,176,176,176,33,410,480,479,409,358,358,358,358,33,267,364,480,410,215,215,215,215,33,405,475,494,488,216,216,216,216,33,475,468,493,494,272,272,272,272,33,418,453,491,485,218,218,218,218,32,454,491,496,387,387,387,32,495,492,461,272,272,272,32,454,496,495,388,388,388,32,461,454,495,389,389,389,33,440,447,490,489,272,272,272,272,33,383,397,484,481,218,218,218,218,33,391,405,488,482,222,222,222,222,33,432,467,493,487,218,218,218,218,33,433,426,486,487,390,390,390,390,33,426,461,492,486,224,224,224,224,33,419,412,483,485,391,391,391,391,33,412,440,489,483,392,392,392,392,33,397,446,490,484,218,218,218,218,33,497,501,500,496,227,227,227,227,33,496,491,453,497,393,393,393,393,33,496,500,499,495,228,228,228,228,33,495,499,502,498,229,229,229,229,32,425,460,498,230,230,230,32,502,390,404,235,235,235,32,404,474,467,233,233,233,32,404,467,432,394,394,394,32,425,498,502,232,232,232,32,502,404,432,395,395,395,32,502,432,425,396,396,396,32,446,397,383,237,237,237,32,501,497,453,241,241,241,32,501,453,418,239,239,239,32,439,446,383,240,240,240,32,501,418,411,397,397,397,32,411,439,383,238,238,238,32,383,501,411,398,398,398]},"eight_L_ab":{"uvs":[],"metadata":{"generator":"io_three","uvs":0,"vertices":301,"version":3,"normals":326,"type":"Geometry","faces":422},"faces":[33,44,0,2,8,0,0,0,0,33,8,7,43,44,1,1,1,1,33,7,6,42,43,2,2,2,2,33,6,5,41,42,3,3,3,3,33,5,4,40,41,4,4,4,4,33,4,3,39,40,5,5,5,5,33,3,131,133,39,6,6,6,6,33,149,89,90,150,7,7,7,7,33,144,84,85,145,8,8,8,8,33,146,86,87,147,9,9,9,9,33,20,19,62,63,10,10,10,10,33,17,18,61,60,11,11,11,11,33,16,17,60,59,12,12,12,12,33,15,16,59,58,13,13,13,13,33,14,15,58,57,14,14,14,14,33,13,14,57,56,15,15,15,15,33,12,13,56,55,16,16,16,16,33,11,12,55,54,17,17,17,17,33,10,11,54,53,18,18,18,18,33,258,116,82,142,19,19,19,19,33,37,38,81,80,20,20,20,20,33,36,37,80,79,21,21,21,21,33,35,36,79,78,22,22,22,22,33,34,35,78,77,23,23,23,23,33,33,34,77,76,24,24,24,24,33,32,33,76,75,25,25,25,25,33,31,32,75,74,26,26,26,26,33,30,31,74,73,27,27,27,27,33,29,30,73,72,28,28,28,28,32,98,130,128,29,29,29,32,128,127,96,30,30,30,32,96,97,19,31,31,31,32,19,20,21,32,32,32,32,21,22,23,33,33,33,32,23,24,25,34,34,34,32,25,26,27,35,35,35,32,27,28,38,36,36,36,32,27,38,37,37,37,37,32,23,25,27,38,38,38,32,19,21,23,39,39,39,32,128,96,19,40,40,40,32,99,98,128,41,41,41,32,100,99,128,42,42,42,32,128,19,23,43,43,43,32,23,27,37,44,44,44,32,23,37,36,45,45,45,32,101,100,128,46,46,46,32,102,101,128,47,47,47,32,23,36,35,48,48,48,32,23,35,34,49,49,49,32,102,128,23,50,50,50,32,29,102,23,51,51,51,32,23,34,33,52,52,52,32,23,33,32,53,53,53,32,30,29,23,54,54,54,32,23,32,31,55,55,55,32,23,31,30,56,56,56,33,252,110,117,280,57,57,57,57,33,140,51,50,139,58,58,58,58,33,147,87,88,148,59,59,59,59,33,138,49,48,137,60,60,60,60,33,145,85,86,146,61,61,61,61,33,141,52,51,140,62,62,62,62,33,256,114,115,257,63,63,63,63,33,254,112,113,255,64,64,64,64,33,2,0,1,9,65,65,65,65,33,136,47,46,135,66,66,66,66,33,148,88,89,149,67,67,67,67,33,142,82,83,143,68,68,68,68,33,143,83,84,144,69,69,69,69,32,103,126,125,70,70,70,32,121,122,53,71,71,71,32,103,125,121,72,72,72,32,104,103,121,73,73,73,32,121,53,54,74,74,74,32,54,55,56,75,75,75,32,56,57,58,76,76,76,32,58,59,60,77,77,77,32,60,61,94,78,78,78,32,94,92,93,79,79,79,32,95,71,70,80,80,80,32,94,93,95,81,81,81,32,58,60,94,82,82,82,32,54,56,58,83,83,83,32,104,121,54,84,84,84,32,62,104,54,85,85,85,32,54,58,94,86,86,86,32,94,95,70,87,87,87,32,94,70,69,88,88,88,32,63,62,54,89,89,89,32,64,63,54,90,90,90,32,54,94,69,91,91,91,32,54,69,68,92,92,92,32,65,64,54,93,93,93,32,66,65,54,94,94,94,32,54,68,67,95,95,95,32,54,67,66,96,96,96,33,150,90,91,151,97,97,97,97,33,21,20,63,64,98,98,98,98,33,22,21,64,65,99,99,99,99,33,23,22,65,66,100,100,100,100,33,24,23,66,67,101,101,101,101,33,25,24,67,68,102,102,102,102,33,26,25,68,69,103,103,103,103,33,27,26,69,70,104,104,104,104,33,28,27,70,71,105,105,105,105,33,132,299,134,45,106,106,106,106,32,10,123,124,107,107,107,32,124,131,3,108,108,108,32,3,4,5,109,109,109,32,5,6,7,110,110,110,32,7,8,2,111,111,111,32,2,9,18,112,112,112,32,2,18,17,113,113,113,32,5,7,2,114,114,114,32,124,3,5,115,115,115,32,11,10,124,116,116,116,32,12,11,124,117,117,117,32,124,5,2,118,118,118,32,2,17,16,119,119,119,32,2,16,15,120,120,120,32,12,124,2,121,121,121,32,13,12,2,122,122,122,32,2,15,14,123,123,123,32,14,13,2,124,124,124,33,94,250,248,92,125,125,125,125,33,93,249,251,95,126,126,126,126,33,92,248,249,93,127,127,127,127,32,28,71,95,128,128,128,32,151,91,81,129,129,129,32,151,81,38,129,129,129,32,28,95,251,130,130,130,32,151,38,28,131,131,131,32,28,251,151,132,132,132,32,9,1,52,129,129,129,32,250,94,61,129,129,129,32,250,61,18,129,129,129,32,9,52,141,133,133,133,32,250,18,9,134,134,134,32,9,141,250,135,135,135,33,19,97,104,62,136,136,136,136,33,97,96,103,104,137,137,137,137,33,96,127,126,103,138,138,138,138,33,253,111,112,254,139,139,139,139,33,102,29,72,109,140,140,140,140,33,101,102,109,108,141,141,141,141,33,100,101,108,107,142,142,142,142,33,99,100,107,106,143,143,143,143,33,98,99,106,105,144,144,144,144,33,257,115,116,258,145,145,145,145,33,139,50,49,138,146,146,146,146,33,137,48,47,136,147,147,147,147,32,112,111,117,148,148,148,32,117,110,119,149,149,149,32,118,129,105,150,150,150,32,117,119,118,151,151,151,32,112,117,118,152,152,152,32,118,105,106,153,153,153,32,106,107,108,154,154,154,32,108,109,72,155,155,155,32,72,73,74,156,156,156,32,74,75,76,157,157,157,32,76,77,78,158,158,158,32,78,79,80,159,159,159,32,80,81,91,160,160,160,32,80,91,90,161,161,161,32,76,78,80,162,162,162,32,72,74,76,163,163,163,32,106,108,72,164,164,164,32,112,118,106,154,154,154,32,113,112,106,154,154,154,32,80,90,89,165,165,165,32,80,89,88,166,166,166,32,114,113,106,154,154,154,32,115,114,106,167,167,167,32,76,80,88,168,168,168,32,76,88,87,169,169,169,32,115,106,72,170,170,170,32,116,115,72,154,154,154,32,76,87,86,171,171,171,32,76,86,85,172,172,172,32,82,116,72,173,173,173,32,83,82,72,174,174,174,32,72,76,85,175,175,175,32,84,83,72,176,176,176,32,85,84,72,177,177,177,33,253,280,117,111,178,178,178,178,32,39,133,132,179,179,179,32,132,45,46,180,180,180,32,46,47,48,181,181,181,32,48,49,50,182,182,182,32,50,51,52,183,183,183,32,52,1,0,184,184,184,32,52,0,44,185,185,185,32,48,50,52,186,186,186,32,132,46,48,187,187,187,32,40,39,132,188,188,188,32,41,40,132,189,189,189,32,48,52,44,190,190,190,32,48,44,43,191,191,191,32,41,132,48,192,192,192,32,48,43,42,193,193,193,32,42,41,48,194,194,194,33,135,46,45,134,195,195,195,195,33,122,123,10,53,196,196,196,196,32,296,285,120,197,197,197,32,120,119,110,198,198,198,32,110,252,296,199,199,199,32,120,110,296,200,200,200,33,129,130,98,105,201,201,201,201,33,255,113,114,256,202,202,202,202,33,154,152,196,160,0,0,0,0,33,160,196,195,159,1,1,1,1,33,159,195,194,158,2,2,2,2,33,158,194,193,157,3,3,3,3,33,157,193,192,156,4,4,4,4,33,156,192,191,155,203,203,203,203,33,155,191,300,297,6,6,6,6,33,149,150,242,241,7,7,7,7,33,144,145,237,236,8,8,8,8,33,146,147,239,238,9,9,9,9,33,172,215,214,171,10,10,10,10,33,169,212,213,170,11,11,11,11,33,168,211,212,169,12,12,12,12,33,167,210,211,168,13,13,13,13,33,166,209,210,167,14,14,14,14,33,165,208,209,166,15,15,15,15,33,164,207,208,165,16,16,16,16,33,163,206,207,164,17,17,17,17,33,162,205,206,163,18,18,18,18,33,258,142,234,279,19,19,19,19,33,189,232,233,190,20,20,20,20,33,188,231,232,189,21,21,21,21,33,187,230,231,188,22,22,22,22,33,186,229,230,187,23,23,23,23,33,185,228,229,186,24,24,24,24,33,184,227,228,185,25,25,25,25,33,183,226,227,184,26,26,26,26,33,182,225,226,183,27,27,27,27,33,181,224,225,182,28,28,28,28,32,189,190,180,204,204,204,32,180,179,178,205,205,205,32,178,177,176,206,206,206,32,176,175,174,207,207,207,32,174,173,172,208,208,208,32,172,171,260,209,209,209,32,260,259,292,210,210,210,32,293,295,261,211,211,211,32,260,292,293,212,212,212,32,174,172,260,213,213,213,32,178,176,174,214,214,214,32,189,180,178,215,215,215,32,188,189,178,216,216,216,32,178,174,260,217,217,217,32,260,293,261,218,218,218,32,260,261,262,219,219,219,32,187,188,178,220,220,220,32,186,187,178,221,221,221,32,260,262,263,222,222,222,32,260,263,264,223,223,223,32,186,178,260,224,224,224,32,185,186,260,225,225,225,32,260,264,265,226,226,226,32,260,265,181,227,227,227,32,184,185,260,228,228,228,32,183,184,260,229,229,229,32,260,181,182,230,230,230,32,182,183,260,231,231,231,33,252,280,281,273,232,232,232,232,33,140,139,202,203,58,58,58,58,33,147,148,240,239,59,59,59,59,33,138,137,200,201,60,60,60,60,33,145,146,238,237,61,61,61,61,33,141,140,203,204,233,233,233,233,33,256,257,278,277,63,63,63,63,33,254,255,276,275,64,64,64,64,33,154,161,153,152,65,65,65,65,33,136,135,198,199,66,66,66,66,33,148,149,241,240,67,67,67,67,33,142,143,235,234,68,68,68,68,33,143,144,236,235,69,69,69,69,32,222,223,247,234,234,234,32,247,245,244,235,235,235,32,246,213,212,236,236,236,32,247,244,246,237,237,237,32,221,222,247,238,238,238,32,220,221,247,239,239,239,32,247,246,212,240,240,240,32,212,211,210,241,241,241,32,210,209,208,242,242,242,32,208,207,206,243,243,243,32,206,205,287,244,244,244,32,206,287,286,245,245,245,32,210,208,206,246,246,246,32,247,212,210,247,247,247,32,219,220,247,248,248,248,32,219,247,210,249,249,249,32,210,206,286,250,250,250,32,290,291,266,251,251,251,32,210,286,290,252,252,252,32,218,219,210,253,253,253,32,217,218,210,254,254,254,32,210,290,266,255,255,255,32,210,266,267,256,256,256,32,216,217,210,251,251,251,32,215,216,210,257,257,257,32,210,267,214,258,258,258,32,214,215,210,259,259,259,33,150,151,243,242,97,97,97,97,33,173,216,215,172,98,98,98,98,33,174,217,216,173,99,99,99,99,33,175,218,217,174,100,100,100,100,33,176,219,218,175,101,101,101,101,33,177,220,219,176,102,102,102,102,33,178,221,220,177,103,103,103,103,33,179,222,221,178,104,104,104,104,33,180,223,222,179,105,105,105,105,33,298,197,134,299,260,260,260,260,32,169,170,161,261,261,261,32,161,154,160,262,262,262,32,160,159,158,263,263,263,32,158,157,156,264,264,264,32,156,155,297,265,265,265,32,289,288,162,266,266,266,32,156,297,289,267,267,267,32,160,158,156,268,268,268,32,169,161,160,269,269,269,32,168,169,160,270,270,270,32,160,156,289,271,271,271,32,289,162,163,272,272,272,32,289,163,164,273,273,273,32,167,168,160,274,274,274,32,166,167,160,275,275,275,32,160,289,164,276,276,276,32,165,166,160,277,277,277,32,160,164,165,278,278,278,33,246,244,248,250,125,125,125,125,33,245,247,251,249,126,126,126,126,33,244,245,249,248,127,127,127,127,32,190,233,243,129,129,129,32,251,247,223,130,130,130,32,251,223,180,130,130,130,32,190,243,151,129,129,129,32,251,180,190,279,279,279,32,190,151,251,280,280,280,32,170,213,246,129,129,129,32,141,204,153,281,281,281,32,141,153,161,282,282,282,32,170,246,250,130,130,130,32,141,161,170,283,283,283,32,170,250,141,284,284,284,33,171,214,267,260,136,136,136,136,33,260,267,266,259,137,137,137,137,33,259,266,291,292,138,138,138,138,33,253,254,275,274,139,139,139,139,33,265,272,224,181,140,140,140,140,33,264,271,272,265,141,141,141,141,33,263,270,271,264,142,142,142,142,33,262,269,270,263,143,143,143,143,33,261,268,269,262,144,144,144,144,33,257,258,279,278,145,145,145,145,33,139,138,201,202,146,146,146,146,33,137,136,199,200,147,147,147,147,32,242,243,233,285,285,285,32,233,232,231,286,286,286,32,231,230,229,287,287,287,32,229,228,227,288,288,288,32,227,226,225,289,289,289,32,225,224,272,290,290,290,32,272,271,270,251,251,251,32,270,269,268,251,251,251,32,268,294,282,291,291,291,32,282,283,273,292,292,292,32,281,274,275,251,251,251,32,282,273,281,293,293,293,32,270,268,282,294,294,294,32,225,272,270,295,295,295,32,229,227,225,296,296,296,32,233,231,229,297,297,297,32,241,242,233,298,298,298,32,240,241,233,299,299,299,32,270,282,281,300,300,300,32,270,281,275,251,251,251,32,240,233,229,301,301,301,32,239,240,229,302,302,302,32,270,275,276,251,251,251,32,270,276,277,251,251,251,32,238,239,229,303,303,303,32,237,238,229,304,304,304,32,270,277,278,219,219,219,32,270,278,279,305,305,305,32,237,229,225,306,306,306,32,236,237,225,307,307,307,32,225,270,279,308,308,308,32,225,279,234,251,251,251,32,235,236,225,302,302,302,32,225,234,235,251,251,251,33,253,274,281,280,178,178,178,178,32,152,153,204,309,309,309,32,204,203,202,310,310,310,32,202,201,200,311,311,311,32,200,199,198,312,312,312,32,198,197,298,313,313,313,32,298,300,191,251,251,251,32,298,191,192,314,314,314,32,200,198,298,315,315,315,32,204,202,200,316,316,316,32,196,152,204,317,317,317,32,196,204,200,318,318,318,32,200,298,192,319,319,319,32,200,192,193,320,320,320,32,195,196,200,321,321,321,32,200,193,194,322,322,322,32,194,195,200,323,323,323,33,135,134,197,198,195,195,195,195,33,287,205,162,288,196,196,196,196,32,284,285,296,197,197,197,32,296,252,273,199,199,199,32,273,283,284,324,324,324,32,296,273,284,325,325,325,33,294,268,261,295,201,201,201,201,33,255,256,277,276,202,202,202,202],"vertices":[156.808,4,-42.988,164.932,4,-50.7141,156.808,0.999998,-42.988,99.8334,1,-4.91867,110.07,1,-10.0715,120.042,0.999999,-15.7205,129.725,0.999999,-21.852,139.095,0.999999,-28.4512,148.13,0.999998,-35.5022,164.932,0.999998,-50.7141,86.2935,1,-7.66759,96.412,0.999999,-12.1528,106.298,0.999999,-17.129,115.928,0.999999,-22.5844,125.279,0.999999,-28.5057,134.328,0.999998,-34.8788,143.054,0.999998,-41.6881,151.434,0.999998,-48.9174,159.274,0.999998,-56.3727,69.5643,0.999999,-21.5791,79.0204,0.999999,-25.2266,88.286,0.999999,-29.3338,97.339,0.999999,-33.8906,106.157,0.999998,-38.8862,114.72,0.999998,-44.3084,123.006,0.999998,-50.1443,130.997,0.999998,-56.3798,138.671,0.999997,-62.9997,145.835,0.999997,-69.8117,66.8684,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5679,93.5667,0.999998,-40.9481,102.043,0.999998,-45.7501,110.274,0.999998,-50.9622,118.239,0.999998,-56.5719,125.92,0.999997,-62.5657,133.297,0.999997,-68.9291,140.176,0.999997,-75.4703,99.8334,4,-4.91867,110.07,4,-10.0715,120.042,4,-15.7205,129.725,4,-21.852,139.095,4,-28.4512,148.13,4,-35.5022,100.475,4,-3.56229,110.778,4,-8.74826,120.814,4,-14.4335,130.559,4,-20.6044,139.989,4,-27.246,149.082,4,-34.3423,157.816,4,-41.8762,165.993,4,-49.6531,86.2935,4,-7.66759,96.412,4,-12.1528,106.298,4,-17.129,115.928,4,-22.5844,125.279,4,-28.5057,134.328,4,-34.8788,143.054,4,-41.6881,151.434,4,-48.9174,159.274,4,-56.3727,69.5643,4,-21.5791,79.0204,4,-25.2266,88.286,4,-29.3338,97.339,4,-33.8906,106.157,4,-38.8862,114.72,4,-44.3084,123.006,4,-50.1443,130.997,4,-56.3798,138.671,4,-62.9997,145.835,4,-69.8117,66.8684,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5679,93.5667,4,-40.9481,102.043,4,-45.7501,110.274,4,-50.9622,118.239,4,-56.5719,125.92,4,-62.5657,133.297,4,-68.9291,140.176,4,-75.4703,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9243,92.8594,4,-42.2714,101.272,4,-47.0371,109.441,4,-52.2098,117.346,4,-57.7771,124.968,4,-63.7256,132.289,4,-70.0409,139.115,4,-76.5313,164.226,4,-64.1488,153.265,4,-75.109,156.801,4,-58.8455,147.962,4,-67.6843,50.1728,0.999999,-15.6968,59.9408,0.999999,-18.3999,19.4549,0.999999,-18.4667,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,50.1728,4,-15.6968,59.9408,4,-18.3999,19.4549,4,-18.4667,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,9.00004,4,-19.0114,11.5313,4,-18.7169,0.250021,4,-19,0.250039,3.97706,-19,79.1696,4,-5.26265,79.6142,4,-5.09115,79.6142,1,-5.09115,89.9312,1,-1.11145,45.8467,4,-14.4845,45.2417,4,-14.5894,45.2417,0.999999,-14.5894,34.4821,1,-16.4564,17.1888,4,-18.2996,17.1888,0.999999,-18.2996,90.5878,1,-0.820387,92.4385,4,-0.00000619491,90.5878,4,-0.820387,100.475,-1.55712e-7,-3.56229,110.778,-3.82399e-7,-8.74826,120.814,-6.30909e-7,-14.4335,130.559,-9.00646e-7,-20.6044,139.989,-0.00000119096,-27.246,149.082,-0.00000150115,-34.3423,157.816,-0.00000183047,-41.8762,165.993,-0.00000217041,-49.6531,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9243,92.8594,-0.00000184774,-42.2714,101.272,-0.00000205606,-47.0371,109.441,-0.00000228216,-52.2098,117.346,-0.00000252552,-57.7771,124.968,-0.00000278553,-63.7256,132.289,-0.00000306158,-70.0409,139.115,-0.00000334529,-76.5313,156.808,-4,-42.988,164.932,-4,-50.7141,156.808,-1,-42.988,99.8334,-1,-4.91867,110.07,-1,-10.0715,120.042,-1,-15.7205,129.725,-1,-21.852,139.095,-1,-28.4512,148.13,-1,-35.5022,164.932,-1,-50.7141,86.2935,-1,-7.66759,96.412,-1,-12.1528,106.298,-1,-17.129,115.928,-1,-22.5844,125.279,-1,-28.5057,134.328,-1,-34.8788,143.054,-1,-41.6881,151.434,-1,-48.9174,159.274,-1,-56.3727,69.5643,-1,-21.5791,79.0204,-1,-25.2266,88.286,-1,-29.3338,97.339,-1,-33.8906,106.157,-1,-38.8862,114.72,-1,-44.3084,123.006,-1,-50.1443,130.997,-1,-56.3798,138.671,-1,-62.9997,145.835,-1,-69.8117,66.8684,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5679,93.5667,-1,-40.9481,102.043,-1,-45.7501,110.274,-1,-50.9622,118.239,-1,-56.5719,125.92,-1,-62.5657,133.297,-1,-68.9291,140.176,-1,-75.4703,99.8334,-4,-4.91867,110.07,-4,-10.0715,120.042,-4,-15.7205,129.725,-4,-21.852,139.095,-4,-28.4512,148.13,-4,-35.5022,100.475,-4,-3.56229,110.778,-4,-8.74826,120.814,-4,-14.4335,130.559,-4,-20.6044,139.989,-4,-27.246,149.082,-4,-34.3423,157.816,-4,-41.8762,165.993,-4,-49.6531,86.2935,-4,-7.66759,96.412,-4,-12.1528,106.298,-4,-17.129,115.928,-4,-22.5844,125.279,-4,-28.5057,134.328,-4,-34.8788,143.054,-4,-41.6881,151.434,-4,-48.9174,159.274,-4,-56.3727,69.5643,-4,-21.5791,79.0204,-4,-25.2266,88.286,-4,-29.3338,97.339,-4,-33.8906,106.157,-4,-38.8862,114.72,-4,-44.3084,123.006,-4,-50.1443,130.997,-4,-56.3798,138.671,-4,-62.9997,145.835,-4,-69.8117,66.8684,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5679,93.5667,-4,-40.9481,102.043,-4,-45.7501,110.274,-4,-50.9622,118.239,-4,-56.5719,125.92,-4,-62.5657,133.297,-4,-68.9291,140.176,-4,-75.4703,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9243,92.8594,-4,-42.2714,101.272,-4,-47.0371,109.441,-4,-52.2098,117.346,-4,-57.7771,124.968,-4,-63.7256,132.289,-4,-70.0409,139.115,-4,-76.5313,164.226,-4,-64.1488,153.265,-4,-75.109,156.801,-4,-58.8455,147.962,-4,-67.6843,164.226,-0.00000280403,-64.1488,153.265,-0.00000328312,-75.109,156.801,-0.00000257222,-58.8455,147.962,-0.00000295858,-67.6843,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,50.1728,-1,-15.6968,59.9408,-1,-18.3999,19.4549,-1,-18.4667,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,50.1728,-4,-15.6968,59.9408,-4,-18.3999,19.4549,-4,-18.4667,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,9.00004,-8.31017e-7,-19.0114,9.00004,-4,-19.0114,11.5313,-4,-18.7169,0.250021,-4,-19,0.250039,-3.97706,-19,0.250039,-8.30515e-7,-19,79.1696,-4,-5.26265,79.6142,-4,-5.09115,79.6142,-1,-5.09115,89.9312,-1,-1.11145,45.8467,-4,-14.4845,45.2417,-4,-14.5894,45.2417,-1,-14.5894,34.4821,-1,-16.4564,17.1888,-4,-18.2996,17.1888,-1,-18.2996,0.250039,-8.30515e-7,-19,90.5878,-1,-0.820387,92.4385,-4,-0.00000584522,92.4385,-2.70962e-13,-0.00000619888,90.5878,-4,-0.820387],"normals":[-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534995,0,-0.844855,-0.492897,0,-0.870087,-0.449609,0,-0.893226,-0.405239,0,-0.914211,-0.653173,0,-0.757209,-0.449607,0,-0.893227,-0.534994,0,-0.844856,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,0.492898,0,0.870087,0.449609,0,0.893226,0.40524,0,0.91421,-0.313679,0,-0.949529,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,8.49644e-9,1,-2.41404e-7,1.46437e-8,1,1.13842e-8,-5.83066e-8,1,-2.32744e-7,1.63048e-8,1,-6.75393e-9,-3.83177e-8,1,-1.15366e-7,-1.13559e-7,1,-2.12309e-7,-5.55477e-8,1,-1.09415e-7,7.87512e-10,1,-4.29216e-8,-7.05463e-9,1,-4.38681e-8,2.2505e-9,1,-3.89867e-8,4.48924e-9,1,-3.52794e-8,1.47958e-8,1,8.24397e-9,-1.1416e-8,1,-9.25599e-8,-5.3903e-9,1,-1.0264e-7,1.02052e-8,1,-2.31939e-8,-3.65502e-9,1,-4.69494e-8,1.24506e-8,1,-3.24003e-8,-1.95472e-8,1,-1.14972e-7,-1.86136e-8,1,-1.13139e-7,1.55113e-8,1,-2.98459e-8,2.79401e-9,1,-3.85337e-8,-1.58827e-8,1,-1.06559e-7,9.85105e-9,1,-9.18901e-9,-4.18241e-9,1,-4.09121e-8,2.63507e-9,1,-4.49983e-8,-1.54479e-9,1,-5.50044e-8,1.47233e-9,1,-3.78981e-8,8.84563e-10,1,-4.32966e-8,0,0,-1,0.65317,0,0.757211,-0.575806,0,-0.817586,0.575808,0,0.817585,-0.492901,0,-0.870086,0.689147,-1.26765e-7,0.724622,-0.2191,0,-0.975702,-0.122409,0,-0.99248,-0.689144,0,-0.724624,0.492896,0,0.870088,-0.615228,0,-0.788349,-0.35989,0,-0.932995,-0.405242,0,-0.914209,2.22295e-7,1,9.89931e-7,-2.68124e-7,1,-6.95096e-7,-3.45826e-8,1,7.32565e-8,-3.57444e-9,1,-1.29164e-8,-2.1565e-7,1,-5.39657e-7,1.90036e-8,1,-1.01573e-8,1.79162e-8,1,-1.19715e-8,3.03409e-7,1,3.18758e-7,-3.1408e-8,1,-6.50063e-8,6.04374e-10,1,-4.41107e-8,-3.75655e-8,1,-7.45052e-8,2.1729e-8,1,-4.87029e-8,4.30703e-9,1,-4.57009e-8,1.85047e-8,1,-1.10907e-8,-4.57578e-9,1,-1.14508e-8,4.15446e-9,1,-6.24185e-8,-1.06405e-8,1,-5.97167e-8,-9.04154e-9,1,-1.79325e-8,2.65025e-9,1,-6.89579e-8,2.71626e-9,1,-5.83223e-8,-1.52553e-8,1,-3.44155e-8,5.53192e-9,1,-3.88005e-8,-9.79205e-9,1,-5.07835e-8,4.34641e-9,1,-4.36863e-8,2.2374e-9,1,-4.37762e-8,-4.27186e-9,1,-4.69193e-8,-5.1168e-10,1,-4.47784e-8,-0.689069,0,-0.724696,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,0.405239,2.71221e-8,0.914211,-7.19584e-8,1,-2.32817e-7,0.00000114435,1,0.000002538,-8.15418e-8,1,-1.96699e-7,-3.94001e-8,1,-1.01104e-7,-4.51062e-8,1,-1.00065e-7,-1.73552e-9,1,-4.03986e-8,-1.19829e-10,1,-4.0101e-8,-1.0661e-8,1,-5.80933e-8,5.39992e-7,1,9.66114e-7,-8.28495e-8,1,-2.26774e-7,-9.30431e-8,1,-2.32757e-7,1.4473e-7,1,1.51428e-7,4.91326e-10,1,-4.06549e-8,2.24424e-10,1,-4.34791e-8,-1.00796e-7,1,-2.40679e-7,4.86147e-10,1,-4.28452e-8,-1.96843e-9,1,-4.95581e-8,8.37623e-9,1,-2.70368e-8,0.581237,0,0.813734,-0.813734,0,-0.581237,0.707109,0,-0.707105,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707109,-0.0000040519,-0.707105,0.707108,0.00000518324,-0.707106,0.707092,0.0000107896,-0.707122,0.707109,-0.0000094147,-0.707105,0.707106,0.0000406412,-0.707108,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.073564,0,-0.99729,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,-0.266711,0,-0.963776,0.615229,0,0.788348,0.534996,0,0.844855,-9.34612e-8,1,-0.00000126703,0,1,0,-2.10705e-8,1,-2.85648e-7,1.04971e-9,1,8.00465e-7,5.45101e-8,1,3.41018e-7,-1.89308e-8,1,-3.53413e-7,0,1,0,1.56451e-7,1,4.73588e-7,2.26161e-8,1,-9.36869e-9,2.45794e-7,1,4.33885e-7,2.0354e-8,1,-1.36003e-8,-2.87904e-7,1,-4.08697e-7,1.77653e-8,1,-1.77653e-8,1.87606e-8,1,-1.70035e-8,-4.96921e-8,1,-1.18432e-7,6.99435e-8,1,1.04891e-7,-2.43616e-8,1,-1.22476e-7,1.82766e-8,1,-1.65649e-8,1.79755e-8,1,-1.70469e-8,7.56977e-8,1,2.24552e-7,-1.05769e-7,1,-1.94043e-7,-1.12801e-7,1,-2.02991e-7,-4.72355e-8,1,-2.13794e-7,-6.38776e-8,1,-1.46966e-7,-5.7187e-8,1,-1.50977e-7,-2.66336e-8,1,-1.59234e-7,-5.72032e-8,1,-1.48296e-7,-8.17808e-8,1,-2.15905e-7,2.35089e-8,1,-7.81434e-9,4.27686e-8,1,3.0122e-8,-0.335866,0,-0.94191,1.28936e-8,1,-2.90874e-8,7.78102e-8,1,1.0861e-7,1.77352e-8,1,-1.06291e-8,1.66078e-8,1,-1.23165e-8,3.02709e-7,1,2.87634e-7,1.50423e-8,1,-1.50423e-8,1.79275e-8,1,-1.10662e-8,-4.92416e-8,1,-1.01104e-7,3.33888e-8,1,1.54874e-8,-4.55899e-9,1,-5.53264e-8,-3.52584e-7,1,-6.64604e-7,-1.72781e-7,1,-2.51802e-7,1.92491e-7,1,1.79028e-7,8.35312e-9,1,-3.08309e-8,1.73023e-8,1,-1.1561e-8,1.73023e-8,1,-1.1561e-8,0.449609,0,0.893225,0.35989,0,0.932995,0,0,0,-0.999998,-0.000780729,-0.00156354,-1,0,-0.00000259551,-1,-4.98244e-12,-0.00000259725,0.0735638,0,0.99729,-0.170958,0,-0.985278,-0.449609,0,-0.893226,-6.11165e-9,-1,4.82457e-8,1.53142e-7,-1,2.13551e-7,1.19139e-7,-1,2.10018e-7,-2.0184e-8,-1,1.20962e-8,-1.18417e-7,-1,-2.09097e-7,-1.10784e-8,-1,3.962e-9,-7.56902e-8,-1,-2.29411e-7,-2.81945e-9,-1,-3.82227e-8,1.34072e-8,-1,1.14289e-7,9.3359e-9,-1,6.10168e-8,1.12661e-8,-1,6.45676e-8,-6.92244e-9,-1,3.67281e-8,5.42816e-10,-1,3.80965e-8,1.00574e-8,-1,6.27586e-8,9.9111e-11,-1,-6.00388e-8,0,-1,0,-5.87807e-10,-1,3.90244e-8,-6.26768e-10,-1,4.1611e-8,-2.36743e-9,-1,5.79304e-8,-1.28904e-9,-1,5.01076e-8,-3.37305e-11,-1,4.38794e-8,-5.41978e-8,-1,-3.9845e-8,2.1006e-10,-1,4.66372e-8,2.30964e-9,-1,4.60003e-8,-2.68474e-8,-1,2.25775e-9,-2.44973e-8,-1,5.7624e-9,5.39979e-9,-1,4.79984e-8,1.03769e-8,-1,5.36046e-8,0,0,-1,0.689147,1.26765e-7,0.724622,0,-1,0,-1.20852e-8,-1,5.55914e-8,-3.11768e-8,-1,3.11768e-8,-1.49857e-8,-1,6.89336e-8,8.74091e-8,-1,1.73362e-7,-1.92274e-7,-1,-2.46378e-7,3.84212e-9,-1,5.01059e-8,-5.73505e-7,-1,-6.64856e-7,-5.05552e-7,-1,-7.1783e-7,-4.32755e-7,-1,-7.6392e-7,-5.50057e-7,-1,-0.00000124092,-1.35834e-8,-1,3.52139e-8,-1.85047e-8,-1,1.10907e-8,1.20059e-8,-1,4.85954e-8,0.0000188358,-1,0.0000268264,2.79038e-9,-1,4.47654e-8,-3.26615e-8,-1,-1.25287e-8,0,-1,0,6.21958e-10,-1,4.94602e-8,1.38217e-8,-1,2.1827e-8,2.67622e-9,-1,1.00176e-7,-6.07289e-8,-1,-2.16712e-7,1.6375e-7,-1,7.6812e-7,1.91982e-8,-1,1.59409e-7,-1.94591e-8,-1,-5.89043e-8,-1.57449e-8,-1,-4.08175e-8,0.405239,5.42442e-8,0.914211,-2.84467e-9,-1,4.49787e-8,-1.37806e-8,-1,3.17983e-8,1.05346e-7,-1,1.85708e-7,-1.78493e-8,-1,1.06972e-8,-4.42102e-8,-1,-4.1562e-8,-6.6697e-8,-1,-1.26639e-7,0.00000111494,-1,0.00000239957,9.96257e-9,-1,5.70987e-8,-3.01652e-9,-1,4.36876e-8,-5.51898e-9,-1,4.30713e-8,1.97886e-7,-1,3.38347e-7,-6.76756e-8,-1,-1.26096e-7,-9.59372e-8,-1,-1.42684e-7,1.67864e-9,-1,3.71644e-8,2.70834e-9,-1,5.99614e-8,-7.17712e-8,-1,-1.17991e-7,-6.43258e-9,-1,3.01062e-8,-3.35108e-9,-1,3.77879e-8,0.707109,-0.0000081038,-0.707105,0.707108,0.00000259162,-0.707106,0.707107,-0.0000107896,-0.707107,0.707086,0,-0.707127,0.707109,-0.0000471927,-0.707105,0.707106,-0.00000586876,-0.707108,-3.58083e-8,-1,3.58083e-8,6.77559e-7,-1,7.85482e-7,5.74403e-7,-1,8.15592e-7,4.91707e-7,-1,8.67981e-7,4.04292e-7,-1,9.12064e-7,-3.5901e-7,-1,-9.30712e-7,-4.21409e-8,-1,-5.71296e-7,4.22664e-8,-1,6.60852e-11,0,-1,0.00000161897,-4.96176e-8,-1,-3.34501e-7,6.06857e-8,-1,2.42272e-7,-2.16157e-8,-1,1.15528e-8,-1.70076e-8,-1,1.81619e-8,-2.99378e-7,-1,-3.47062e-7,0.00000293013,-1,0.00000383481,7.55031e-8,-1,9.70087e-7,-2.13289e-7,-1,-2.21318e-7,0,-1,0,-4.10183e-8,-1,2.74076e-8,-2.29968e-7,-1,-4.05947e-7,-1.73245e-7,-1,-4.4112e-7,-2.1615e-8,-1,1.15542e-8,-2.55966e-7,-1,-3.98833e-7,1.15332e-7,-1,4.22417e-7,-3.00845e-8,-1,3.00845e-8,-1.83382e-8,-1,4.20327e-8,4.85152e-7,-1,6.88863e-7,4.15267e-7,-1,7.33053e-7,3.41421e-7,-1,7.70239e-7,-1.91497e-7,-1,-2.87904e-7,-3.33888e-8,-1,-1.54874e-8,1.13107e-7,-1,1.87218e-7,-3.5855e-8,-1,2.21324e-8,-4.27127e-7,-1,-4.7178e-7,1.06619e-8,-1,6.60106e-8,-2.51626e-7,-1,-4.44182e-7,3.14089e-7,-1,4.02468e-7,-3.46046e-8,-1,2.3122e-8,-3.46045e-8,-1,2.3122e-8,-0.999998,0.000780721,-0.00156354,-1,4.98244e-12,-0.00000259725]},"autopoint_bc":{"normals":[-1.95303e-8,-1,-4.40598e-8,0,-1,0,0,-1,0,-2.39925e-7,-1,2.36083e-7,-1.46876e-7,-1,2.82011e-7,0.42997,3.65771e-8,-0.902843,0.448898,0,-0.893583,0.448898,0,-0.893583,0.448898,0,-0.893583,0.448858,-0.00000144126,-0.893603,0.44888,0,-0.893592,0.448857,0.00000115719,-0.893603,0.44888,0,-0.893592,0.448857,5.32629e-8,-0.893604,0.448857,0,-0.893604,-2.85382e-7,-0.0000034968,1,-0.448858,-4.15648e-7,0.893603,-0.429975,0,0.902841,-0.00000328516,1,0.00000701397,3.44699e-14,1,-1.20785e-7,-2.68951e-7,1,6.07274e-7,0.00000187272,1,-0.0000028895,-1.07242e-7,1,2.74271e-7,0,0,-1,-9.0728e-14,1,3.17891e-7,3.40342e-7,0,1,3.40342e-7,0,1,3.40342e-7,0,1,-1.66789e-7,0,1,3.40342e-7,0,1,-1.26709e-7,0,1,-1.66789e-7,0,1,0,-1,0,-5.70813e-7,0,1,-1.50032e-7,3.83246e-7,1,-1.07023e-7,0,1,-5.70813e-7,0,1,-5.70813e-7,0,1,-9.0728e-14,-1,3.17891e-7,-2.53662e-8,-1,-4.71339e-9,4.25253e-15,-1,-1.49012e-8,-1.73763e-8,-1,-8.61904e-8,4.7016e-7,-1,-0.000001149,2.12138e-15,-1,-4.85088e-8,3.2909e-7,-1,-8.66388e-7,-4.59055e-8,-1,9.56591e-8,8.50544e-15,-1,-7.94727e-8,0,-1,-7.79341e-8,-1.1576e-8,-1,-1.93064e-7,8.07293e-8,-1,-3.61171e-7,8.50533e-15,-1,-7.94727e-8,1.00699e-14,-1,-7.94727e-8,6.35734e-9,-1,-4.21695e-8,9.65994e-9,-1,-1.2569e-7,-6.98657e-9,-1,-1.99909e-7,-1.00841e-13,-1,6.85482e-7,-7.41594e-7,-1,0.0000165999,2.57047e-8,-1,1.2398e-7,7.85275e-8,-1,0.00000503258,-2.85382e-7,0.00000381469,1,0.00000111239,1,-0.0000248999,-6.96287e-14,1,5.49515e-7,5.58609e-9,1,3.41806e-7,-4.31752e-7,1,-0.00000312065,-1.03194e-8,1,-6.31431e-7,-3.82745e-14,1,3.57627e-7,1.39076e-13,1,-8.56853e-7,-1.55376e-8,1,1.82497e-7,-3.8274e-14,1,3.57627e-7,0,1,4.47035e-8,1.66337e-7,1,-3.00953e-7,-1.27576e-14,1,4.47036e-8,1.26931e-14,1,-1.18603e-7,-1.06069e-14,1,2.42544e-7,-5.57363e-9,1,2.23503e-8,-9.46995e-9,1,6.35559e-8,-4.37222e-7,1,0.0000012487,2.60803e-8,1,-8.69697e-9,-1.17926e-8,1,9.52851e-8,-0.00000706047,1,0.0000145172,-4.87984e-8,1,2.54013e-7,-0.429975,-1.77268e-7,0.902841,-0.448858,4.87935e-7,0.893603,-0.448898,0,0.893583,0,-1,0,0,-1,0,0.155718,0,-0.987801,-0.332928,0,0.942952,-5.2299e-14,-1,3.17891e-7,0.448869,0,-0.893598,-5.2299e-14,1,3.17891e-7,0,1,0,4.92108e-7,1,0.0000060847,1.6231e-7,0,-1,0.0446301,0,-0.999004,-8.74639e-8,-0.00000445048,1,0.429999,-3.14309e-7,-0.90283,0.391601,-4.62348e-8,-0.920135,0.391601,-1.38704e-7,-0.920135,0.429999,3.77171e-8,-0.90283,-8.74639e-8,0.00000476837,1,0.00000140305,-1,-0.00000329672,1.01089e-13,-1,-7.70521e-7,-2.22361e-8,-1,-6.73103e-8,-2.02179e-13,1,0.00000154104,0.00000140973,1,-0.00000313531,5.04854e-8,1,-5.55431e-8,-0.170958,0,-0.985278,-0.359896,-5.56107e-8,-0.932993,-0.359895,0,-0.932993,-0.359893,0,-0.932994,-0.359895,0,-0.932993,-0.359893,-1.75761e-7,-0.932994,-0.359896,-5.56107e-8,-0.932993,-0.122409,0,-0.99248,-0.40524,-2.81543e-8,-0.91421,-0.0735616,0,-0.997291,-0.0735639,0,-0.99729,-0.0735616,0,-0.997291,-0.0735639,0,-0.99729,-0.0735639,0,-0.99729,-0.0735639,0,-0.99729,-0.111152,0,-0.993803,-0.313682,0,-0.949528,-0.313679,-1.50924e-7,-0.949529,-0.313679,0,-0.949529,-0.313679,-1.13193e-7,-0.949529,-0.313679,0,-0.949529,-0.2191,0,-0.975702,-0.266711,-1.14891e-7,-0.963777,-0.266711,5.25958e-7,-0.963777,-0.266711,0,-0.963776,-0.266713,-8.32295e-7,-0.963776,-0.266711,0,-0.963777,-0.266712,0,-0.963776],"metadata":{"generator":"io_three","normals":135,"uvs":0,"vertices":96,"version":3,"faces":152,"type":"Geometry"},"uvs":[],"vertices":[199.14,-4,0.575707,210.91,-4,6.181,217.517,-4,9.49999,214.175,-4,9.49999,210.246,-4,7.52607,197.293,-4,1.35754,197.93,-4,1.11191,199.14,4,0.575707,210.91,4,6.181,233.443,4,17.5,236.429,4,19,236.429,-4,19,233.443,-4,17.5,233.443,-1,17.5,217.517,-1,9.5,217.517,4,9.49999,217.517,1,9.5,233.443,0.999999,17.5,214.175,-1,9.5,210.246,-1,7.52607,197.293,-1,1.35754,197.293,4,1.35754,210.246,4,7.52607,214.175,4,9.49999,197.93,4,1.11191,230.101,0.999999,17.5,230.101,4,17.5,233.087,4,19,117,-4,19,139.417,-4,19,139.417,-1,19,169.523,-1,19,169.523,-4,19,215.266,-4,19,215.266,-1,19,233.087,-1,19,233.087,-4,19,233.087,0.999999,19,215.266,0.999999,19,215.266,4,19,169.523,4,19,169.523,0.999999,19,139.417,0.999999,19,139.417,4,19,117,4,19,230.101,-4,17.5,230.101,-1,17.5,212.279,-1,17.5,165.274,-1,17.5,133.224,-1,18.0238,130.548,-1,17.9042,131.034,-1,17.8685,142.481,-1,16.4565,153.846,-1,14.4846,165.1,-1,11.9575,173.98,-1,9.5,195.787,-1,9.5,192.934,-1,8.14093,186.607,-1,5.44844,187.169,-1,5.26306,214.175,1,9.5,130.548,0.999999,17.9042,133.224,0.999999,18.0238,165.274,0.999999,17.5,212.279,0.999999,17.5,210.246,1,7.52607,197.293,1,1.35754,187.169,1,5.26306,186.607,1,5.44844,192.934,0.999999,8.14093,195.787,1,9.5,173.98,1,9.5,165.1,0.999999,11.9575,153.846,0.999999,14.4846,142.481,0.999998,16.4565,131.034,0.999998,17.8685,130.548,-4,17.9042,133.224,-4,18.0238,119.53,-4,18.717,165.274,-4,17.5,212.279,-4,17.5,212.279,4,17.5,165.274,4,17.5,133.224,4,18.0238,130.548,4,17.9042,119.53,4,18.717,173.98,-4,9.49998,195.787,-4,9.49999,192.934,-4,8.14093,186.607,-4,5.44844,186.607,4,5.44844,192.934,4,8.14093,195.787,4,9.49999,173.98,4,9.49998,176.216,-4,8.88113,176.216,4,8.88113],"faces":[32,6,0,1,0,0,0,32,1,2,3,1,1,1,32,4,5,6,2,2,2,32,1,3,4,3,3,3,32,1,4,6,4,4,4,33,1,0,7,8,5,5,5,5,32,17,9,10,6,6,6,32,10,11,12,7,7,7,32,10,12,13,8,8,8,32,17,10,13,7,7,7,32,14,2,1,9,9,9,32,17,13,14,10,10,10,32,8,15,16,11,11,11,32,16,17,14,12,12,12,32,14,1,8,13,13,13,32,14,8,16,14,14,14,33,14,18,3,2,15,15,15,15,33,18,19,4,3,16,16,16,16,33,5,4,19,20,17,17,17,17,32,24,21,22,18,18,18,32,22,23,15,19,19,19,32,15,8,7,20,20,20,32,7,24,22,21,21,21,32,22,15,7,22,22,22,33,17,25,26,9,23,23,23,23,33,26,27,10,9,24,24,24,24,32,44,28,29,25,25,25,32,44,29,30,26,26,26,32,42,43,44,27,27,27,32,39,40,41,28,28,28,32,42,44,30,29,29,29,32,38,39,41,28,28,28,32,41,42,30,30,30,30,32,31,32,33,31,31,31,32,41,30,31,30,30,30,32,37,38,41,32,32,32,32,41,31,33,31,31,31,32,41,33,34,31,31,31,32,10,27,37,33,33,33,32,37,41,34,34,34,34,32,35,36,11,33,33,33,32,37,34,35,35,35,35,32,11,10,37,36,36,36,32,35,11,37,37,37,37,33,12,11,36,45,38,38,38,38,33,12,45,46,13,23,23,23,23,32,59,20,19,39,39,39,32,18,14,13,40,40,40,32,59,19,18,41,41,41,32,57,58,59,42,42,42,32,54,55,56,43,43,43,32,56,57,59,44,44,44,32,59,18,13,45,45,45,32,46,35,34,46,46,46,32,59,13,46,47,47,47,32,53,54,56,48,48,48,32,56,59,46,49,49,49,32,46,34,47,50,50,50,32,48,31,30,51,51,51,32,46,47,48,32,32,32,32,53,56,46,52,52,52,32,52,53,46,53,53,53,32,48,30,49,54,54,54,32,52,46,48,55,55,55,32,49,50,51,56,56,56,32,51,52,48,57,57,57,32,48,49,51,58,58,58,33,15,23,60,16,59,59,59,59,32,75,61,62,60,60,60,32,62,42,41,61,61,61,32,62,41,63,62,62,62,32,74,75,62,63,63,63,32,74,62,63,64,64,64,32,64,38,37,65,65,65,32,74,63,64,66,66,66,32,73,74,64,67,67,67,32,64,37,25,68,68,68,32,25,17,16,69,69,69,32,60,65,66,70,70,70,32,25,16,60,71,71,71,32,73,64,25,72,72,72,32,70,71,72,73,73,73,32,72,73,25,74,74,74,32,25,60,66,75,75,75,32,67,68,69,76,76,76,32,25,66,67,77,77,77,32,70,72,25,78,78,78,32,67,69,70,79,79,79,32,25,67,70,80,80,80,33,66,65,22,21,81,81,81,81,33,23,22,65,60,82,82,82,82,33,25,37,27,26,83,83,83,83,32,78,76,77,84,84,84,32,77,29,28,85,85,85,32,77,28,78,32,32,32,33,29,77,49,30,86,86,86,86,33,79,32,31,48,87,87,87,87,33,32,79,80,33,88,88,88,88,33,47,34,33,80,89,89,89,89,33,45,36,35,46,83,83,83,83,33,81,39,38,64,89,89,89,89,33,82,40,39,81,90,90,90,90,33,63,41,40,82,87,87,87,87,33,42,62,83,43,86,86,86,86,32,43,83,84,91,91,91,32,84,85,44,92,92,92,32,84,44,43,91,91,91,33,80,79,48,47,93,93,93,93,33,50,49,77,76,94,94,94,94,33,86,87,56,55,95,95,95,95,33,87,88,57,56,96,96,96,96,33,58,57,88,89,97,97,97,97,33,84,83,62,61,94,94,94,94,33,64,63,82,81,93,93,93,93,33,90,91,69,68,98,98,98,98,33,70,69,91,92,99,99,99,99,33,71,70,92,93,100,100,100,100,32,89,88,87,101,101,101,32,87,86,94,102,102,102,32,87,94,89,103,103,103,32,95,93,92,104,104,104,32,92,91,90,105,105,105,32,92,90,95,106,106,106,33,53,52,74,73,107,107,107,107,32,21,24,6,108,108,108,32,6,5,20,109,109,109,32,20,59,67,110,110,110,32,66,21,6,111,111,111,32,20,67,66,112,112,112,32,6,20,66,113,113,113,33,52,51,75,74,114,114,114,114,33,0,6,24,7,115,115,115,115,32,61,75,51,116,116,116,32,50,76,78,117,117,117,32,61,51,50,118,118,118,32,85,84,61,119,119,119,32,50,78,85,120,120,120,32,50,85,61,121,121,121,33,78,28,44,85,122,122,122,122,32,68,67,59,123,123,123,32,58,89,94,124,124,124,32,68,59,58,123,123,123,32,95,90,68,125,125,125,32,58,94,95,126,126,126,32,58,95,68,127,127,127,33,54,53,73,72,128,128,128,128,32,93,95,94,129,129,129,32,94,86,55,130,130,130,32,55,54,72,131,131,131,32,71,93,94,132,132,132,32,55,72,71,133,133,133,32,94,55,71,134,134,134]},"turount_R_a":{"uvs":[],"normals":[-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534996,0,-0.844855,-1.12262e-14,1,-4.98865e-8,-2.01378e-9,1,-4.34445e-8,0,1,-4.98865e-8,-1.93861e-9,1,-4.48604e-8,1.80506e-10,1,-4.56916e-8,-2.06171e-9,1,-4.56455e-8,1.37714e-10,1,-4.43967e-8,-9.42067e-10,1,-4.02524e-8,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,3.37906e-9,1,-4.12318e-8,1.35172e-9,1,-4.13479e-8,-6.78548e-10,1,-4.13645e-8,2.51045e-9,1,-4.42373e-8,-4.72985e-9,1,-4.10987e-8,2.75902e-9,1,-4.29512e-8,6.48216e-10,1,-4.30349e-8,-1.62677e-9,1,-4.77945e-8,-3.05415e-9,1,-4.33853e-8,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.689069,0,-0.724696,0.575808,0,0.817585,0.615229,0,0.788348,0.65317,0,0.757211,0.689147,-5.07059e-7,0.724622,1.53516e-8,1,-1.46159e-8,-0.689144,0,-0.724624,-0.35989,0,-0.932995,-0.405242,0,-0.914209,-0.449607,0,-0.893227,-0.492901,0,-0.870086,-0.534994,0,-0.844856,2.3806e-8,1,-6.94077e-8,1.69538e-8,1,-1.19401e-8,-2.43728e-8,1,-8.17886e-8,-2.83562e-8,1,-8.04939e-8,0.575808,0,0.817585,0.615229,0,0.788348,0.653171,0,0.757211,0.689147,0,0.724622,-2.62771e-9,1,-8.01815e-8,-1.04234e-8,1,-5.2888e-8,9.81558e-10,1,-4.77594e-8,1.62811e-9,1,-4.48518e-8,0,1,-4.8034e-8,7.13915e-9,1,-5.39129e-8,-1.14e-9,1,-4.38361e-8,-3.28962e-9,1,-4.37273e-8,7.29344e-9,1,-4.5485e-8,5.0529e-9,1,-4.57882e-8,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,-1.71421e-8,1,-7.85686e-8,2.24578e-8,1,-9.95472e-9,2.19424e-8,1,-1.10446e-8,-2.84851e-8,1,-7.52021e-8,-6.42811e-8,1,-1.47428e-7,-7.14385e-8,1,-1.44097e-7,-7.84226e-8,1,-1.40419e-7,-2.40076e-8,1,-8.42456e-8,1.8261e-8,1,-1.73858e-8,-0.405242,0,-0.914209,-0.449607,0,-0.893226,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.813734,0,-0.581237,0.581237,0,0.813734,0.707109,0,-0.707104,0.707105,0,-0.707108,0.707108,0,-0.707106,0.707107,0,-0.707107,0.707105,0,-0.707108,0.707107,-0.0000165252,-0.707107,0.707109,0.0000121557,-0.707105,0.707107,0,0.707107,0.707105,0,-0.707108,0.707092,0.0000107896,-0.707122,0.707109,-0.0000134666,-0.707105,0.707105,0.000039978,-0.707108,-0.313679,0,-0.949529,0,1,0,2.65033e-9,1,-4.04452e-8,-1.69439e-9,1,-4.35346e-8,5.66244e-10,1,-4.15627e-8,-1.60987e-10,1,-3.94962e-8,0,1,-4.22264e-8,1.10567e-9,1,-4.28749e-8,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0,0,-1,-0.073564,0,-0.99729,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.2191,0,-0.975702,-0.266711,0,-0.963776,-0.313679,0,-0.949529,-2.01976e-14,1,-9.24436e-8,-1.44413e-8,1,-3.93227e-7,0,1,0,0,1,-2.48357e-7,8.87305e-9,1,-2.89678e-7,-5.42823e-9,1,-8.0233e-8,-9.35859e-9,1,-7.987e-8,-1.32662e-8,1,-7.93148e-8,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.335866,0,-0.94191,1.55275e-8,1,-9.17037e-7,-0.335866,0,-0.94191,-0.999994,0.00000982353,-0.00342704,-1,0,-0.00000259724,0.534996,0,0.844854,0.534996,0,0.844854,0.492898,0,0.870087,0.122409,0,0.99248,-5.60031e-8,1,-7.84047e-8,-3.92482e-8,1,-7.32504e-8,1.23404e-7,1,2.39221e-8,5.17879e-9,1,-2.95536e-8,-5.13503e-8,1,-9.95434e-9,1.05808e-8,1,-6.03808e-8,7.48412e-15,-1,3.32576e-8,-1.97224e-9,-1,3.71499e-8,0,-1,4.1799e-8,-1.82364e-9,-1,3.43507e-8,-1.80506e-10,-1,4.56916e-8,2.06171e-9,-1,4.56455e-8,-4.57433e-9,-1,4.3304e-8,-2.9771e-9,-1,4.39838e-8,4.89768e-9,-1,4.60248e-8,-1.35172e-9,-1,4.13479e-8,6.78548e-10,-1,4.13645e-8,1.16194e-9,-1,5.07199e-8,3.64912e-9,-1,5.06018e-8,6.12774e-9,-1,5.03618e-8,-7.2024e-10,-1,4.78166e-8,1.30142e-9,-1,3.82356e-8,-6.19593e-9,-1,4.70484e-8,0.689147,5.07059e-7,0.724622,-3.07033e-8,-1,2.92319e-8,0,-1,0,7.4569e-8,-1,1.41893e-7,8.14408e-8,-1,1.38062e-7,-3.14037e-8,-1,2.70887e-8,-1.58023e-8,-1,3.59186e-8,7.3317e-9,-1,3.40736e-8,-1.56263e-8,-1,6.78673e-8,9.14892e-9,-1,2.71325e-8,1.14e-9,-1,4.38361e-8,3.28962e-9,-1,4.37273e-8,5.43117e-9,-1,4.35133e-8,7.55968e-9,-1,4.31944e-8,0,-1,0,-4.38849e-8,-1,2.20892e-8,-4.15079e-8,-1,2.62846e-8,-3.87319e-8,-1,3.02262e-8,-3.65219e-8,-1,3.47717e-8,-0.534994,0,-0.844856,-0.575806,0,-0.817586,0,0,0,0.707109,-0.0000122749,-0.707105,0.707108,0.00000206432,-0.707106,0.707105,-0.0000431584,-0.707108,0.707107,0,-0.707107,0.707106,0,-0.707108,0.013,-0.999831,-0.0129999,0.707108,0.0000120428,-0.707105,0,-1,0,-2.65033e-9,-1,4.04452e-8,-3.31684e-10,-1,5.27921e-8,7.43291e-10,-1,5.15428e-8,2.49808e-9,-1,4.65707e-8,0,-1,4.62218e-8,1.08392e-9,-1,5.03428e-8,0,0,-1,0,-1,0,1.87172e-8,-1,1.5974e-7,2.65325e-8,-1,1.5863e-7,-0.266711,0,-0.963776,-0.999994,-0.00000982353,-0.00342704,0,-1,0,0,-1,0,1.84026e-7,-1,2.57468e-7,-8.68334e-9,-1,4.95528e-8,-1.40041e-7,-1,1.94647e-7],"metadata":{"generator":"io_three","normals":214,"uvs":0,"vertices":315,"version":3,"faces":328,"type":"Geometry"},"vertices":[156.808,4,-42.988,164.932,4,-50.7141,156.808,0.999998,-42.988,130.559,0.999999,-20.6044,139.989,0.999999,-27.246,149.082,0.999999,-34.3423,157.816,0.999998,-41.8762,165.993,0.999998,-49.6531,66.363,0.999999,-30.5264,75.3838,0.999999,-34.0061,84.223,0.999998,-37.9243,92.8594,0.999998,-42.2714,101.272,0.999998,-47.0371,109.441,0.999998,-52.2098,117.346,0.999997,-57.7771,124.968,0.999997,-63.7256,132.289,0.999997,-70.0409,139.115,0.999997,-76.5313,129.725,0.999999,-21.852,139.095,0.999999,-28.4512,148.13,0.999998,-35.5022,164.932,0.999998,-50.7141,115.928,0.999999,-22.5844,125.279,0.999999,-28.5057,134.328,0.999998,-34.8788,143.054,0.999998,-41.6881,151.434,0.999998,-48.9174,159.274,0.999998,-56.3727,69.5643,0.999999,-21.5791,79.0204,0.999999,-25.2266,88.286,0.999999,-29.3338,97.339,0.999999,-33.8906,106.157,0.999998,-38.8862,114.72,0.999998,-44.3084,123.006,0.999998,-50.1443,130.997,0.999998,-56.3798,138.671,0.999997,-62.9997,145.835,0.999997,-69.8117,66.8684,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5679,93.5667,0.999998,-40.9481,102.043,0.999998,-45.7501,110.274,0.999998,-50.9622,118.239,0.999998,-56.5719,125.92,0.999997,-62.5657,133.297,0.999997,-68.9291,140.176,0.999997,-75.4703,129.725,4,-21.852,139.095,4,-28.4512,148.13,4,-35.5022,130.559,4,-20.6044,139.989,4,-27.246,149.082,4,-34.3423,157.816,4,-41.8762,165.993,4,-49.6531,115.928,4,-22.5844,125.279,4,-28.5057,134.328,4,-34.8788,143.054,4,-41.6881,151.434,4,-48.9174,159.274,4,-56.3727,69.5643,4,-21.5791,79.0204,4,-25.2266,88.286,4,-29.3338,97.339,4,-33.8906,106.157,4,-38.8862,114.72,4,-44.3084,123.006,4,-50.1443,130.997,4,-56.3798,138.671,4,-62.9997,145.835,4,-69.8117,66.8684,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5679,93.5667,4,-40.9481,102.043,4,-45.7501,110.274,4,-50.9622,118.239,4,-56.5719,125.92,4,-62.5657,133.297,4,-68.9291,140.176,4,-75.4703,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9243,92.8594,4,-42.2714,101.272,4,-47.0371,109.441,4,-52.2098,117.346,4,-57.7771,124.968,4,-63.7256,132.289,4,-70.0409,139.115,4,-76.5313,151.851,4,-51.0673,140.184,4,-62.7346,157.154,4,-58.492,147.609,4,-68.0379,0.250039,0.999999,-19.0114,9.66539,0.999999,-19.2487,19.3078,0.999999,-19.96,28.9038,0.999999,-21.1435,38.4301,0.999999,-22.7964,47.8638,0.999999,-24.9148,57.1823,0.999999,-27.4936,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,9.00004,0.999999,-19.0114,9.00004,4,-19.0114,109.601,4,-19,125.221,0.999999,-19,118.077,0.999999,-19,109.601,0.999999,-19,128.025,0.999999,-19,128.025,4,-19,125.221,4,-19,105.298,4,-19,93.1735,4,-19,81.5995,4,-19,70.4871,4,-19,61.7573,0.999999,-19,59.7588,0.999999,-19,61.7573,4,-19,49.3454,0.999999,-19,39.1853,0.999999,-19,29.2218,0.999999,-19,23.7784,4,-19,19.4024,4,-19,23.7784,0.999999,-19,9.67761,4,-19,9.00004,4,-19,0.250039,4,-19,0.25,-8.30515e-7,-19,130.559,-9.00646e-7,-20.6044,139.989,-0.00000119096,-27.246,149.082,-0.00000150115,-34.3423,157.816,-0.00000183047,-41.8762,165.993,-0.00000217041,-49.6531,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9243,92.8594,-0.00000184774,-42.2714,101.272,-0.00000205606,-47.0371,109.441,-0.00000228216,-52.2098,117.346,-0.00000252552,-57.7771,124.968,-0.00000278553,-63.7256,132.289,-0.00000306158,-70.0409,139.115,-0.00000334529,-76.5313,156.808,-4,-42.988,164.932,-4,-50.7141,156.808,-1,-42.988,130.559,-1,-20.6044,139.989,-1,-27.246,149.082,-1,-34.3423,157.816,-1,-41.8762,165.993,-1,-49.6531,66.363,-1,-30.5264,75.3838,-1,-34.0061,84.223,-1,-37.9243,92.8594,-1,-42.2714,101.272,-1,-47.0371,109.441,-1,-52.2098,117.346,-1,-57.7771,124.968,-1,-63.7256,132.289,-1,-70.0409,139.115,-1,-76.5313,129.725,-1,-21.852,139.095,-1,-28.4512,148.13,-1,-35.5022,164.932,-1,-50.7141,115.928,-1,-22.5844,125.279,-1,-28.5057,134.328,-1,-34.8788,143.054,-1,-41.6881,151.434,-1,-48.9174,159.274,-1,-56.3727,69.5643,-1,-21.5791,79.0204,-1,-25.2266,88.286,-1,-29.3338,97.339,-1,-33.8906,106.157,-1,-38.8862,114.72,-1,-44.3084,123.006,-1,-50.1443,130.997,-1,-56.3798,138.671,-1,-62.9997,145.835,-1,-69.8117,66.8684,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5679,93.5667,-1,-40.9481,102.043,-1,-45.7501,110.274,-1,-50.9622,118.239,-1,-56.5719,125.92,-1,-62.5657,133.297,-1,-68.9291,140.176,-1,-75.4703,129.725,-4,-21.852,139.095,-4,-28.4512,148.13,-4,-35.5022,130.559,-4,-20.6044,139.989,-4,-27.246,149.082,-4,-34.3423,157.816,-4,-41.8762,165.993,-4,-49.6531,115.928,-4,-22.5844,125.279,-4,-28.5057,134.328,-4,-34.8788,143.054,-4,-41.6881,151.434,-4,-48.9174,159.274,-4,-56.3727,69.5643,-4,-21.5791,79.0204,-4,-25.2266,88.286,-4,-29.3338,97.339,-4,-33.8906,106.157,-4,-38.8862,114.72,-4,-44.3084,123.006,-4,-50.1443,130.997,-4,-56.3798,138.671,-4,-62.9997,145.835,-4,-69.8117,66.8684,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5679,93.5667,-4,-40.9481,102.043,-4,-45.7501,110.274,-4,-50.9622,118.239,-4,-56.5719,125.92,-4,-62.5657,133.297,-4,-68.9291,140.176,-4,-75.4703,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9243,92.8594,-4,-42.2714,101.272,-4,-47.0371,109.441,-4,-52.2098,117.346,-4,-57.7771,124.968,-4,-63.7256,132.289,-4,-70.0409,139.115,-4,-76.5313,151.851,-4,-51.0673,140.184,-4,-62.7346,157.154,-4,-58.492,147.609,-4,-68.0379,151.851,-0.00000223222,-51.0673,140.184,-0.00000274222,-62.7346,157.154,-0.00000255676,-58.492,147.609,-0.00000297403,-68.0379,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,0.250039,-1,-19.0114,9.66539,-1,-19.2487,19.3078,-1,-19.96,28.9038,-1,-21.1435,38.4301,-1,-22.7964,47.8638,-1,-24.9148,57.1823,-1,-27.4936,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,9.00004,-8.31017e-7,-19.0114,9.00004,-1,-19.0114,9.00004,-4,-19.0114,128.025,-8.30516e-7,-19,109.601,-4,-19,125.221,-1,-19,118.077,-1,-19,109.601,-1,-19,128.025,-1,-19,128.025,-4,-19,125.221,-4,-19,105.298,-4,-19,93.1735,-4,-19,81.5995,-4,-19,70.4871,-4,-19,61.7573,-1,-19,59.7588,-1,-19,61.7573,-4,-19,49.3454,-1,-19,39.1853,-1,-19,29.2218,-1,-19,23.7784,-4,-19,19.4024,-4,-19,23.7784,-1,-19,9.67761,-4,-19,9.00004,-4,-19,0.250039,-4,-19],"faces":[33,50,0,2,20,0,0,0,0,33,20,19,49,50,1,1,1,1,33,19,18,48,49,2,2,2,2,33,18,121,126,48,3,3,3,3,32,22,123,122,4,4,4,32,18,23,22,5,5,5,32,22,122,121,6,6,6,32,22,121,18,7,7,7,33,24,23,18,19,8,8,8,8,33,25,24,19,20,9,9,9,9,33,26,25,20,2,10,10,10,10,33,27,26,2,21,11,11,11,11,33,29,28,62,63,12,12,12,12,33,26,27,61,60,13,13,13,13,33,25,26,60,59,14,14,14,14,33,24,25,59,58,15,15,15,15,33,23,24,58,57,16,16,16,16,33,22,23,57,56,17,17,17,17,33,39,38,28,29,18,18,18,18,33,40,39,29,30,19,19,19,19,33,41,40,30,31,20,20,20,20,33,42,41,31,32,21,21,21,21,33,43,42,32,33,22,22,22,22,33,44,43,33,34,23,23,23,23,33,45,44,34,35,24,24,24,24,33,46,45,35,36,25,25,25,25,33,47,46,36,37,26,26,26,26,33,46,47,81,80,27,27,27,27,33,45,46,80,79,28,28,28,28,33,44,45,79,78,29,29,29,29,33,43,44,78,77,30,30,30,30,33,42,43,77,76,31,31,31,31,33,41,42,76,75,32,32,32,32,33,40,41,75,74,33,33,33,33,33,39,40,74,73,34,34,34,34,33,38,39,73,72,35,35,35,35,33,155,154,13,14,36,36,36,36,33,156,155,14,15,37,37,37,37,33,157,156,15,16,38,38,38,38,33,158,157,16,17,39,39,39,39,33,144,145,4,3,40,40,40,40,33,145,146,5,4,41,41,41,41,33,146,147,6,5,42,42,42,42,33,147,148,7,6,43,43,43,43,33,1,0,54,55,44,44,44,44,33,2,0,1,21,45,45,45,45,33,150,149,8,9,46,46,46,46,33,151,150,9,10,47,47,47,47,33,152,151,10,11,48,48,48,48,33,153,152,11,12,49,49,49,49,33,154,153,12,13,50,50,50,50,33,48,126,125,51,51,51,51,51,33,49,48,51,52,52,52,52,52,33,50,49,52,53,53,53,53,53,33,0,50,53,54,54,54,54,54,33,3,4,52,51,55,55,55,55,33,4,5,53,52,56,56,56,56,33,5,6,54,53,57,57,57,57,33,6,7,55,54,58,58,58,58,33,63,62,130,129,59,59,59,59,33,64,63,129,128,60,60,60,60,33,65,64,128,127,61,61,61,61,32,56,66,65,62,62,62,32,65,127,120,63,63,63,32,65,120,56,64,64,64,33,67,66,56,57,65,65,65,65,33,68,67,57,58,66,66,66,66,33,69,68,58,59,67,67,67,67,33,70,69,59,60,68,68,68,68,33,30,29,63,64,69,69,69,69,33,31,30,64,65,70,70,70,70,33,32,31,65,66,71,71,71,71,33,33,32,66,67,72,72,72,72,33,34,33,67,68,73,73,73,73,33,35,34,68,69,74,74,74,74,33,36,35,69,70,75,75,75,75,33,37,36,70,71,76,76,76,76,33,83,82,72,73,77,77,77,77,33,84,83,73,74,78,78,78,78,33,85,84,74,75,79,79,79,79,33,86,85,75,76,80,80,80,80,33,87,86,76,77,81,81,81,81,33,88,87,77,78,82,82,82,82,33,89,88,78,79,83,83,83,83,33,90,89,79,80,84,84,84,84,33,91,90,80,81,85,85,85,85,33,9,8,82,83,46,46,46,46,33,10,9,83,84,86,86,86,86,33,11,10,84,85,87,87,87,87,33,12,11,85,86,49,49,49,49,33,13,12,86,87,88,88,88,88,33,14,13,87,88,89,89,89,89,33,15,14,88,89,90,90,90,90,33,16,15,89,90,91,91,91,91,33,17,16,90,91,39,39,39,39,33,94,257,255,92,92,92,92,92,33,93,256,258,95,93,93,93,93,33,92,255,256,93,94,94,94,94,32,37,71,95,95,95,95,32,258,158,17,96,96,96,32,17,91,81,97,97,97,32,17,81,47,97,97,97,32,37,95,258,98,98,98,32,258,17,47,99,99,99,32,37,258,47,100,100,100,32,21,1,55,97,97,97,32,55,7,148,101,101,101,32,257,94,61,102,102,102,32,257,61,27,102,102,102,32,21,55,148,103,103,103,32,257,27,21,104,104,104,32,21,148,257,105,105,105,33,28,131,133,62,106,106,106,106,32,103,139,136,107,107,107,33,104,103,136,135,108,108,108,108,33,105,104,135,134,109,109,109,109,33,106,105,134,132,110,110,110,110,32,28,38,106,111,111,111,32,106,132,131,112,112,112,32,106,131,28,113,113,113,33,106,38,72,110,114,114,114,114,33,105,106,110,109,115,115,115,115,33,104,105,109,108,116,116,116,116,33,103,104,108,107,117,117,117,117,33,288,259,96,118,118,118,118,118,33,261,260,97,98,119,119,119,119,33,262,261,98,99,120,120,120,120,33,263,262,99,100,121,121,121,121,33,264,263,100,101,122,122,122,122,33,265,264,101,102,123,123,123,123,33,149,265,102,8,124,124,124,124,32,62,133,130,125,125,125,33,119,111,142,141,107,107,107,107,33,113,112,140,138,126,126,126,126,32,107,114,113,127,127,127,32,113,138,137,128,128,128,32,113,137,107,129,129,129,33,115,114,107,108,107,107,107,107,33,116,115,108,109,130,130,130,130,33,117,116,109,110,131,131,131,131,33,82,117,110,72,132,132,132,132,33,118,96,111,119,118,118,118,118,33,98,97,112,113,119,119,119,119,33,99,98,113,114,133,133,133,133,33,100,99,114,115,134,134,134,134,33,101,100,115,116,122,122,122,122,33,102,101,116,117,123,123,123,123,33,8,102,117,82,124,124,124,124,33,97,118,119,112,135,135,135,135,33,112,119,141,140,136,136,136,136,33,260,288,118,97,137,137,137,137,32,259,143,142,138,138,138,32,142,111,96,139,139,139,32,142,96,259,139,139,139,33,125,124,3,51,140,140,140,140,33,124,291,144,3,141,141,141,141,33,120,123,22,56,142,142,142,142,33,137,139,103,107,143,143,143,143,32,93,95,71,144,144,144,32,60,61,94,145,145,145,32,60,94,92,146,146,146,32,93,71,70,147,147,147,32,60,92,93,148,148,148,32,93,70,60,149,149,149,33,161,159,209,179,0,0,0,0,33,179,209,208,178,1,1,1,1,33,178,208,207,177,2,2,2,2,33,177,207,298,293,3,3,3,3,32,181,294,295,150,150,150,32,181,182,177,151,151,151,32,177,293,294,152,152,152,32,177,294,181,153,153,153,33,183,178,177,182,154,154,154,154,33,184,179,178,183,155,155,155,155,33,185,161,179,184,156,156,156,156,33,186,180,161,185,157,157,157,157,33,188,222,221,187,12,12,12,12,33,185,219,220,186,13,13,13,13,33,184,218,219,185,14,14,14,14,33,183,217,218,184,15,15,15,15,33,182,216,217,183,16,16,16,16,33,181,215,216,182,17,17,17,17,33,198,188,187,197,158,158,158,158,33,199,189,188,198,159,159,159,159,33,200,190,189,199,160,160,160,160,33,201,191,190,200,161,161,161,161,33,202,192,191,201,162,162,162,162,33,203,193,192,202,163,163,163,163,33,204,194,193,203,164,164,164,164,33,205,195,194,204,165,165,165,165,33,206,196,195,205,166,166,166,166,33,205,239,240,206,27,27,27,27,33,204,238,239,205,28,28,28,28,33,203,237,238,204,29,29,29,29,33,202,236,237,203,30,30,30,30,33,201,235,236,202,31,31,31,31,33,200,234,235,201,32,32,32,32,33,199,233,234,200,33,33,33,33,33,198,232,233,199,34,34,34,34,33,197,231,232,198,35,35,35,35,33,155,173,172,154,36,36,36,36,33,156,174,173,155,37,37,37,37,33,157,175,174,156,38,38,38,38,33,158,176,175,157,39,39,39,39,33,144,162,163,145,40,40,40,40,33,145,163,164,146,41,41,41,41,33,146,164,165,147,42,42,42,42,33,147,165,166,148,167,167,167,167,33,213,159,160,214,168,168,168,168,33,161,180,160,159,45,45,45,45,33,150,168,167,149,46,46,46,46,33,151,169,168,150,47,47,47,47,33,152,170,169,151,48,48,48,48,33,153,171,170,152,49,49,49,49,33,154,172,171,153,50,50,50,50,33,207,210,297,298,169,169,169,169,33,208,211,210,207,170,170,170,170,33,209,212,211,208,171,171,171,171,33,159,213,212,209,172,172,172,172,33,162,210,211,163,55,55,55,55,33,163,211,212,164,56,56,56,56,33,164,212,213,165,57,57,57,57,33,165,213,214,166,58,58,58,58,33,222,301,302,221,169,169,169,169,33,223,300,301,222,173,173,173,173,33,224,299,300,223,174,174,174,174,32,224,225,215,175,175,175,32,215,292,299,169,169,169,32,215,299,224,176,176,176,33,226,216,215,225,177,177,177,177,33,227,217,216,226,178,178,178,178,33,228,218,217,227,179,179,179,179,33,229,219,218,228,180,180,180,180,33,189,223,222,188,69,69,69,69,33,190,224,223,189,70,70,70,70,33,191,225,224,190,71,71,71,71,33,192,226,225,191,72,72,72,72,33,193,227,226,192,73,73,73,73,33,194,228,227,193,74,74,74,74,33,195,229,228,194,75,75,75,75,33,196,230,229,195,76,76,76,76,33,242,232,231,241,181,181,181,181,33,243,233,232,242,169,169,169,169,33,244,234,233,243,182,182,182,182,33,245,235,234,244,181,181,181,181,33,246,236,235,245,183,183,183,183,33,247,237,236,246,169,169,169,169,33,248,238,237,247,184,184,184,184,33,249,239,238,248,181,181,181,181,33,250,240,239,249,185,185,185,185,33,168,242,241,167,46,46,46,46,33,169,243,242,168,86,86,86,86,33,170,244,243,169,87,87,87,87,33,171,245,244,170,49,49,49,49,33,172,246,245,171,186,186,186,186,33,173,247,246,172,187,187,187,187,33,174,248,247,173,90,90,90,90,33,175,249,248,174,91,91,91,91,33,176,250,249,175,39,39,39,39,33,253,251,255,257,92,92,92,92,33,252,254,258,256,93,93,93,93,33,251,252,256,255,94,94,94,94,32,206,240,250,97,97,97,32,250,176,158,188,188,188,32,258,254,230,98,98,98,32,258,230,196,98,98,98,32,206,250,158,97,97,97,32,258,196,206,189,189,189,32,206,158,258,190,190,190,32,186,220,253,102,102,102,32,257,148,166,191,191,191,32,166,214,160,192,192,192,32,166,160,180,97,97,97,32,186,253,257,193,193,193,32,166,180,186,194,194,194,32,186,257,166,195,195,195,33,187,221,305,303,106,106,106,106,32,273,308,311,196,196,196,33,274,307,308,273,197,197,197,197,33,275,306,307,274,198,198,198,198,33,276,304,306,275,199,199,199,199,32,276,197,187,200,200,200,32,187,303,304,201,201,201,32,187,304,276,202,202,202,33,276,280,231,197,114,114,114,114,33,275,279,280,276,115,115,115,115,33,274,278,279,275,116,116,116,116,33,273,277,278,274,117,117,117,117,33,288,289,266,259,203,203,203,203,33,261,268,267,260,119,119,119,119,33,262,269,268,261,120,120,120,120,33,263,270,269,262,121,121,121,121,33,264,271,270,263,122,122,122,122,33,265,272,271,264,123,123,123,123,33,149,167,272,265,124,124,124,124,32,221,302,305,196,196,196,33,290,313,314,281,169,169,169,169,33,283,310,312,282,181,181,181,181,32,283,284,277,204,204,204,32,277,309,310,169,169,169,32,277,310,283,169,169,169,33,285,278,277,284,169,169,169,169,33,286,279,278,285,169,169,169,169,33,287,280,279,286,205,205,205,205,33,241,231,280,287,206,206,206,206,33,289,290,281,266,203,203,203,203,33,268,283,282,267,119,119,119,119,33,269,284,283,268,133,133,133,133,33,270,285,284,269,134,134,134,134,33,271,286,285,270,122,122,122,122,33,272,287,286,271,207,207,207,207,33,167,241,287,272,124,124,124,124,33,267,282,290,289,135,135,135,135,33,282,312,313,290,169,169,169,169,33,260,267,289,288,137,137,137,137,32,314,143,259,208,208,208,32,266,281,314,139,139,139,32,259,266,314,139,139,139,33,297,210,162,296,140,140,140,140,33,296,162,144,291,141,141,141,141,33,292,215,181,295,142,142,142,142,33,309,277,273,311,143,143,143,143,32,251,253,220,209,209,209,32,229,230,254,209,209,209,32,229,254,252,210,210,210,32,251,220,219,211,211,211,32,229,252,251,212,212,212,32,251,219,229,213,213,213]},"straight_f":{"vertices":[53.75,-4,19,53.75,-4,17.5,53.75,-4,9.50001,9.25002,-4,8.00001,53.75,-4,6.50001,53.75,-0.999999,17.5,53.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.50001,0.25,-1,9.49999,0.25,-0.999999,17.5,44.75,-4,8.00001,53.75,-4,-19,9.25002,-4,1.15241e-7,53.75,-4,-17.5,53.75,-4,-9.50001,9.25002,-4,-8.00001,53.75,-4,-6.50001,53.75,-1,-17.5,53.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.50001,0.25,-1,-9.49999,0.25,-1,-17.5,44.75,-4,-8.00001,44.75,-4,1.15241e-7,53.75,4,19,53.75,4,17.5,53.75,4,9.50001,9.25002,4,8.00001,53.75,4,6.50001,53.75,1,17.5,53.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.50001,0.25,1,9.49999,0.25,1,17.5,44.75,4,8.00001,53.75,8.30517e-7,19,9.25002,3.49691e-7,8.00001,0.25,8.30515e-7,19,0.25,2.84124e-7,6.50001,53.75,2.84124e-7,6.50001,44.75,3.49691e-7,8.00001,53.75,4,-19,9.25002,4,-2.3445e-7,53.75,4,-17.5,53.75,4,-9.50001,9.25002,4,-8.00001,53.75,4,-6.50001,53.75,0.999999,-17.5,53.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.50001,0.25,1,-9.49999,0.25,0.999999,-17.5,44.75,4,-8.00001,44.75,4,-2.3445e-7,53.75,-8.30517e-7,-19,9.25002,-2.6054e-15,-5.96046e-8,9.25002,-3.49691e-7,-8.00001,0.25,-8.30515e-7,-19,0.25,-2.84124e-7,-6.50001,53.75,-2.84124e-7,-6.50001,44.75,-2.6054e-15,-5.96046e-8,44.75,-3.49691e-7,-8.00001],"normals":[-1.96562e-14,-1,4.47036e-8,-6.41724e-7,0,1,-4.27816e-7,-0.00000349681,1,0,-1,0,6.41724e-7,0,-1,0.164399,0,-0.986394,0,-1,2.98023e-8,1.32455e-8,-1,7.94729e-8,-1.60122e-15,-1,2.98023e-8,-1.32456e-8,-1,7.94738e-8,-9.91665e-14,-1,1.58947e-7,-8.54004e-15,-1,1.58949e-7,-0.164399,0,-0.986394,1,0,0,1,0,0,1,0,0,-1,-1.19209e-7,-5.96046e-8,-1,0,0,-1,0,0,-1,0,0,-1,0,0,1.96562e-14,-1,4.47036e-8,-6.41724e-7,0,-1,-4.27816e-7,-0.00000349681,-1,6.41724e-7,0,1,0.164399,0,0.986394,0,-1,5.96046e-8,3.20244e-15,-1,5.96046e-8,0,-1,0,-0.164399,0,0.986394,1,0,0,-1,-1.19209e-7,5.96046e-8,-1,0,0,1.96562e-14,1,-4.47036e-8,-4.27816e-7,0.00000349681,1,0,1,0,0,1,-5.96046e-8,3.20244e-15,1,-5.96046e-8,0,1,0,0,1,0,1,0,0,1,0,0,-1,1.19209e-7,-5.96046e-8,-1.96562e-14,1,-4.47036e-8,-4.27816e-7,0.00000349681,-1,0,1,-2.98023e-8,1.32455e-8,1,-7.94729e-8,-1.60122e-15,1,-2.98023e-8,-1.32456e-8,1,-7.94738e-8,-9.91665e-14,1,-1.58947e-7,-8.54004e-15,1,-1.58949e-7,-1,1.19209e-7,5.96046e-8,-1,0,0],"uvs":[],"metadata":{"generator":"io_three","uvs":0,"vertices":74,"version":3,"normals":53,"type":"Geometry","faces":108},"faces":[33,5,12,11,6,0,0,0,0,33,7,0,44,46,1,1,1,1,33,6,11,9,2,2,2,2,2,33,0,7,8,1,3,3,3,3,33,1,8,12,5,4,4,4,4,33,45,3,10,47,5,5,5,5,32,3,15,29,6,6,6,32,13,4,2,7,7,7,32,3,29,13,8,8,8,32,9,10,3,9,9,9,32,13,2,9,10,10,10,32,13,9,3,11,11,11,33,48,4,13,49,12,12,12,12,32,44,0,1,13,13,13,32,44,1,5,14,14,14,32,2,4,48,14,14,14,32,44,5,6,13,13,13,32,6,2,48,14,14,14,32,6,48,44,15,15,15,33,3,45,67,15,16,16,16,16,33,29,72,49,13,13,13,13,13,32,12,8,7,17,17,17,32,47,10,9,18,18,18,32,47,9,11,19,19,19,32,12,7,46,20,20,20,32,47,11,12,19,19,19,32,46,47,12,17,17,17,33,20,21,26,27,21,21,21,21,33,66,14,22,69,22,22,22,22,33,21,17,24,26,23,23,23,23,33,14,16,23,22,3,3,3,3,33,16,20,27,23,24,24,24,24,33,68,70,25,18,25,25,25,25,32,29,15,18,26,26,26,32,18,25,24,3,3,3,32,17,19,28,3,3,3,32,28,29,18,27,27,27,32,18,24,17,3,3,3,32,18,17,28,28,28,28,33,71,73,28,19,29,29,29,29,32,16,14,66,14,14,14,32,71,19,17,13,13,13,32,71,17,21,14,14,14,32,20,16,66,14,14,14,32,71,21,20,13,13,13,32,66,71,20,30,30,30,33,18,15,67,68,31,31,31,31,33,29,28,73,72,13,13,13,13,32,22,23,27,20,20,20,32,26,24,25,17,17,17,32,69,22,27,19,19,19,32,26,25,70,20,20,20,32,69,27,26,19,19,19,32,26,70,69,32,32,32,33,35,36,41,42,33,33,33,33,33,44,30,37,46,1,1,1,1,33,36,32,39,41,34,34,34,34,33,30,31,38,37,35,35,35,35,33,31,35,42,38,4,4,4,4,33,45,47,40,33,5,5,5,5,32,65,51,33,36,36,36,32,33,40,39,35,35,35,32,32,34,43,35,35,35,32,43,65,33,37,37,37,32,33,39,32,38,38,38,32,33,32,43,39,39,39,33,48,49,43,34,12,12,12,12,32,31,30,44,40,40,40,32,48,34,32,13,13,13,32,48,32,36,40,40,40,32,35,31,44,13,13,13,32,48,36,35,13,13,13,32,44,48,35,41,41,41,33,33,51,67,45,42,42,42,42,33,65,43,49,72,40,40,40,40,32,37,38,42,17,17,17,32,41,39,40,17,17,17,32,46,37,42,17,17,17,32,41,40,47,17,17,17,32,46,42,41,17,17,17,32,41,47,46,19,19,19,33,56,63,62,57,43,43,43,43,33,66,69,58,50,22,22,22,22,33,57,62,60,53,44,44,44,44,33,50,58,59,52,38,38,38,38,33,52,59,63,56,24,24,24,24,33,68,54,61,70,25,25,25,25,32,54,51,65,45,45,45,32,64,55,53,46,46,46,32,54,65,64,47,47,47,32,60,61,54,48,48,48,32,64,53,60,49,49,49,32,64,60,54,50,50,50,33,71,55,64,73,29,29,29,29,32,66,50,52,13,13,13,32,66,52,56,40,40,40,32,53,55,71,40,40,40,32,66,56,57,13,13,13,32,57,53,71,13,13,13,32,57,71,66,30,30,30,33,54,68,67,51,51,51,51,51,33,65,72,73,64,14,14,14,14,32,63,59,58,17,17,17,32,70,61,60,52,52,52,32,70,60,62,17,17,17,32,63,58,69,17,17,17,32,70,62,63,17,17,17,32,69,70,63,32,32,32]},"straight_m":{"normals":[-1.96562e-14,-1,4.47036e-8,-6.41724e-7,0,1,-4.27816e-7,-0.00000349681,1,0,-1,0,6.41724e-7,0,-1,0.164399,0,0.986394,-5.2982e-9,-1,3.17891e-8,-4.24997e-14,-1,6.81196e-8,5.29819e-9,-1,3.17891e-8,-6.07145e-16,-1,6.81203e-8,0,-1,3.97364e-8,-3.54164e-16,-1,3.97364e-8,-0.164399,0,0.986394,1,0,0,1,0,0,-1,-1.19209e-7,-6.35782e-8,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,1.96562e-14,-1,4.47036e-8,-6.41724e-7,0,-1,-4.27816e-7,-0.00000349681,-1,6.41724e-7,0,1,0.164399,0,-0.986394,-1.05964e-8,-1,6.35782e-8,1.05964e-8,-1,6.35782e-8,0,-1,0,0,-1,7.94727e-8,7.08328e-16,-1,7.94727e-8,-0.164399,0,-0.986394,1,0,0,-1,-1.19209e-7,6.35782e-8,-1,0,0,-1,0,0,1.96562e-14,1,-4.47036e-8,-4.27816e-7,0.00000349681,1,0,1,0,-1.05964e-8,1,-6.35782e-8,0,1,0,1.05964e-8,1,-6.35782e-8,0,1,0,0,1,-7.94727e-8,7.08328e-16,1,-7.94727e-8,-1,1.19209e-7,-6.35782e-8,1,0,0,-1,0,0,-1.96562e-14,1,-4.47036e-8,-4.27816e-7,0.00000349681,-1,-5.2982e-9,1,-3.17891e-8,-4.24997e-14,1,-6.81196e-8,5.29819e-9,1,-3.17891e-8,-6.07145e-16,1,-6.81203e-8,0,1,-3.97364e-8,-3.54164e-16,1,-3.97364e-8,-1,1.19209e-7,6.35782e-8,1,0,0],"faces":[33,5,12,11,6,0,0,0,0,33,7,0,44,46,1,1,1,1,33,6,11,9,2,2,2,2,2,33,0,7,8,1,3,3,3,3,33,1,8,12,5,4,4,4,4,33,45,3,10,47,5,5,5,5,32,29,13,4,6,6,6,32,4,2,9,7,7,7,32,10,3,15,8,8,8,32,4,9,10,9,9,9,32,15,29,4,10,10,10,32,15,4,10,11,11,11,33,48,4,13,49,12,12,12,12,32,44,0,1,13,13,13,32,44,1,5,14,14,14,32,2,4,48,14,14,14,32,44,5,6,13,13,13,32,6,2,48,14,14,14,32,6,48,44,13,13,13,33,3,45,67,15,15,15,15,15,33,29,72,49,13,16,16,16,16,32,12,8,7,17,17,17,32,47,10,9,18,18,18,32,47,9,11,18,18,18,32,12,7,46,19,19,19,32,47,11,12,18,18,18,32,46,47,12,20,20,20,33,20,21,26,27,21,21,21,21,33,66,14,22,69,22,22,22,22,33,21,17,24,26,23,23,23,23,33,14,16,23,22,3,3,3,3,33,16,20,27,23,24,24,24,24,33,68,70,25,18,25,25,25,25,32,15,18,25,26,26,26,32,25,24,17,3,3,3,32,19,28,29,27,27,27,32,25,17,19,28,28,28,32,29,15,25,29,29,29,32,25,19,29,30,30,30,33,71,73,28,19,31,31,31,31,32,16,14,66,14,14,14,32,71,19,17,13,13,13,32,71,17,21,14,14,14,32,20,16,66,14,14,14,32,71,21,20,13,13,13,32,66,71,20,32,32,32,33,18,15,67,68,33,33,33,33,33,29,28,73,72,16,16,16,16,32,22,23,27,19,19,19,32,26,24,25,20,20,20,32,69,22,27,18,18,18,32,26,25,70,34,34,34,32,69,27,26,18,18,18,32,26,70,69,35,35,35,33,35,36,41,42,36,36,36,36,33,44,30,37,46,1,1,1,1,33,36,32,39,41,37,37,37,37,33,30,31,38,37,38,38,38,38,33,31,35,42,38,4,4,4,4,33,45,47,40,33,5,5,5,5,32,51,33,40,39,39,39,32,40,39,32,40,40,40,32,34,43,65,41,41,41,32,40,32,34,42,42,42,32,65,51,40,43,43,43,32,40,34,65,44,44,44,33,48,49,43,34,12,12,12,12,32,31,30,44,32,32,32,32,48,34,32,13,13,13,32,48,32,36,32,32,32,32,35,31,44,13,13,13,32,48,36,35,13,13,13,32,44,48,35,14,14,14,33,33,51,67,45,45,45,45,45,33,65,43,49,72,46,46,46,46,32,37,38,42,17,17,17,32,41,39,40,20,20,20,32,46,37,42,17,17,17,32,41,40,47,20,20,20,32,46,42,41,17,17,17,32,41,47,46,47,47,47,33,56,63,62,57,48,48,48,48,33,66,69,58,50,22,22,22,22,33,57,62,60,53,49,49,49,49,33,50,58,59,52,40,40,40,40,33,52,59,63,56,24,24,24,24,33,68,54,61,70,25,25,25,25,32,65,64,55,50,50,50,32,55,53,60,51,51,51,32,61,54,51,52,52,52,32,55,60,61,53,53,53,32,51,65,55,54,54,54,32,51,55,61,55,55,55,33,71,55,64,73,31,31,31,31,32,66,50,52,13,13,13,32,66,52,56,32,32,32,32,53,55,71,32,32,32,32,66,56,57,13,13,13,32,57,53,71,13,13,13,32,57,71,66,32,32,32,33,54,68,67,51,56,56,56,56,33,65,72,73,64,57,57,57,57,32,63,59,58,17,17,17,32,70,61,60,17,17,17,32,70,60,62,17,17,17,32,63,58,69,17,17,17,32,70,62,63,17,17,17,32,69,70,63,35,35,35],"uvs":[],"vertices":[53.75,-4,19,53.75,-4,17.5,53.75,-4,9.50001,-8.74998,-4,7.50001,53.75,-4,6.00001,53.75,-0.999999,17.5,53.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.00001,0.25,-1,9.49999,0.25,-0.999999,17.5,62.75,-4,7.50001,53.75,-4,-19,-8.74998,-4,1.15241e-7,53.75,-4,-17.5,53.75,-4,-9.50001,-8.74998,-4,-7.50001,53.75,-4,-6.00001,53.75,-1,-17.5,53.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.00001,0.25,-1,-9.49999,0.25,-1,-17.5,62.75,-4,-7.50001,62.75,-4,1.15241e-7,53.75,4,19,53.75,4,17.5,53.75,4,9.50001,-8.74998,4,7.50001,53.75,4,6.00001,53.75,1,17.5,53.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.00001,0.25,1,9.49999,0.25,1,17.5,62.75,4,7.50001,53.75,8.30517e-7,19,-8.74998,3.27836e-7,7.50001,0.25,8.30515e-7,19,0.25,2.62269e-7,6.00001,53.75,2.62269e-7,6.00001,62.75,3.27836e-7,7.50001,53.75,4,-19,-8.74998,4,-2.3445e-7,53.75,4,-17.5,53.75,4,-9.50001,-8.74998,4,-7.50001,53.75,4,-6.00001,53.75,0.999999,-17.5,53.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.00001,0.25,1,-9.49999,0.25,0.999999,-17.5,62.75,4,-7.50001,62.75,4,-2.3445e-7,53.75,-8.30517e-7,-19,-8.74998,-2.6054e-15,-5.96046e-8,-8.74998,-3.27836e-7,-7.50001,0.25,-8.30515e-7,-19,0.25,-2.62269e-7,-6.00001,53.75,-2.62269e-7,-6.00001,62.75,-2.6054e-15,-5.96046e-8,62.75,-3.27836e-7,-7.50001],"metadata":{"uvs":0,"generator":"io_three","normals":58,"vertices":74,"version":3,"faces":108,"type":"Geometry"}},"pier_4":{"normals":[-1,0,0,0,0,-1,1,0,0,0,0,1,0,-1,4.5174e-8,0,1,-4.01547e-8],"faces":[33,0,1,3,2,0,0,0,0,33,2,3,7,6,1,1,1,1,33,6,7,5,4,2,2,2,2,33,1,0,4,5,3,3,3,3,33,4,0,2,6,4,4,4,4,33,7,3,1,5,5,5,5,5],"uvs":[],"vertices":[-7.5,-4,47.5,-7.5,12,47.5,-7.5,-4,-47.5,-7.5,12,-47.5,7.5,-4,47.5,7.5,12,47.5,7.5,-4,-47.5,7.5,12,-47.5],"metadata":{"generator":"io_three","uvs":0,"vertices":8,"version":3,"normals":6,"type":"Geometry","faces":6}},"stop":{"normals":[-4.87984e-15,-1,4.47035e-8,-1.52153e-7,-1.65834e-13,1,-1.0621e-7,-0.00000349681,1,0,-1,0,0,-1,5.01934e-8,-1.91477e-14,-1,5.01934e-8,0,-1,0,-7.18021e-15,-1,5.01934e-8,1.59314e-7,0,-1,0.164399,0,-0.986394,0,-1,2.98023e-8,-5.29819e-9,-1,3.17891e-8,-1.0551e-14,-1,6.81196e-8,-1.32456e-8,-1,7.94738e-8,3.90529e-10,-1,4.03222e-8,1.63444e-9,-1,1.68756e-7,-0.164399,0,0.986394,1,0,0,1,0,0,-1,-1.19209e-7,-5.96046e-8,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-3.81469e-7,2.25554e-11,1,0.884918,0.00000257619,0.465746,-1.73889e-7,4.97501e-13,1,-0.884918,0.00000257619,0.465746,0,0,1,4.87984e-15,-1,4.47035e-8,-1.52153e-7,-1.65834e-13,-1,-1.0621e-7,-0.00000349681,-1,0,-1,0,1.59314e-7,0,1,0.164399,0,0.986394,0,-1,5.96046e-8,1.05964e-8,-1,6.35782e-8,2.84681e-9,-1,-1.70813e-8,-1.32296e-9,-1,8.14572e-8,-0.164399,0,-0.986394,1,0,0,-1,-1.19209e-7,5.96046e-8,-1,0,0,-1.90734e-7,1.12777e-11,-1,7.62939e-7,2.18279e-12,-1,-1.73889e-7,4.97501e-13,-1,-9.53674e-7,2.72848e-12,-1,-1.90735e-7,1.0914e-11,-1,4.87984e-15,1,-4.47035e-8,-1.52153e-7,1.65834e-13,1,-1.0621e-7,0.00000349681,1,0,1,0,0,1,0,0,1,9.53672e-7,0,1,0,-8.44683e-7,1,-0.00000115803,0,1,0,-1.36424e-13,1,9.53673e-7,0,1,-5.96046e-8,1.05964e-8,1,-6.35782e-8,2.84681e-9,1,1.70813e-8,-1.32296e-9,1,-8.14572e-8,-1,1.19209e-7,-5.96046e-8,1,0,0,-3.81469e-7,-2.25554e-11,1,0.884918,-0.00000257619,0.465746,-1.73889e-7,-4.97501e-13,1,-0.884918,-0.00000257619,0.465746,0,0,1,-4.87984e-15,1,-4.47035e-8,-1.52153e-7,1.65834e-13,-1,-1.0621e-7,0.00000349681,-1,0,1,-2.98023e-8,-5.29819e-9,1,-3.17891e-8,-1.0551e-14,1,-6.81196e-8,-1.32456e-8,1,-7.94738e-8,3.90529e-10,1,-4.03222e-8,1.63444e-9,1,-1.68756e-7,-1,1.19209e-7,5.96046e-8,1,0,0,-1,0,0,-1.90734e-7,-1.12777e-11,-1,7.62939e-7,-2.18279e-12,-1,-1.73889e-7,-4.97501e-13,-1,-9.53674e-7,-2.72848e-12,-1,-1.90735e-7,-1.0914e-11,-1,9.53675e-7,1,4.76837e-7,2.17982e-7,1,4.08717e-7,-5.48363e-7,1,4.76837e-7,0.00000165104,1,-8.94067e-7,1.7053e-13,1,-8.9407e-7,-2.86102e-7,1,-2.72478e-7,0,0,-1,0,0,1],"metadata":{"uvs":0,"generator":"io_three","faces":163,"vertices":112,"version":3,"normals":95,"type":"Geometry"},"uvs":[],"vertices":[215.75,-4,19,215.75,-4,17.5,215.75,-4,9.50001,9.25002,-4,8.00001,215.75,-4,6.00001,215.75,-0.999999,17.5,215.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.50001,0.25,-1,9.49999,0.25,-0.999999,17.5,224.75,-4,7.50001,108,-4,38,128,-4,19,88,-4,19,98,-4,38,118,-4,38,215.75,-4,-19,9.25002,-4,1.15241e-7,215.75,-4,-17.5,215.75,-4,-9.50001,9.25002,-4,-8.00001,215.75,-4,-6.00001,215.75,-1,-17.5,215.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.50001,0.25,-1,-9.49999,0.25,-1,-17.5,224.75,-4,-7.50001,224.75,-4,1.15241e-7,108,-4,-19,128,-4,-19,88,-4,-19,98,-4,-19,118,-4,-19,215.75,4,19,215.75,4,17.5,215.75,4,9.50001,9.25002,4,8.00001,215.75,4,6.00001,215.75,1,17.5,215.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.50001,0.25,1,9.49999,0.25,1,17.5,224.75,4,7.50001,215.75,8.30517e-7,19,9.25002,3.49691e-7,8.00001,0.25,2.84124e-7,6.50001,0.25,8.30515e-7,19,215.75,2.62269e-7,6.00001,224.75,3.27836e-7,7.50001,108,4,38,108,0.00000166103,38,128,4,19,128,8.30516e-7,19,88,4,19,88,8.30516e-7,19,98,4,38,98,0.00000166103,38,118,4,38,118,0.00000166103,38,215.75,4,-19,9.25002,4,-2.3445e-7,215.75,4,-17.5,215.75,4,-9.50001,9.25002,4,-8.00001,215.75,4,-6.00001,215.75,0.999999,-17.5,215.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.50001,0.25,1,-9.49999,0.25,0.999999,-17.5,224.75,4,-7.50001,224.75,4,-2.3445e-7,215.75,-8.30517e-7,-19,9.25002,-2.6054e-15,-5.96046e-8,9.25002,-3.49691e-7,-8.00001,0.25,-2.84124e-7,-6.50001,0.25,-8.30515e-7,-19,215.75,-2.62269e-7,-6.00001,224.75,-2.6054e-15,-5.96046e-8,224.75,-3.27836e-7,-7.50001,108,4,-19,108,-8.30517e-7,-19,128,4,-19,128,-8.30516e-7,-19,88,4,-19,88,-8.30516e-7,-19,98,4,-19,98,-8.30516e-7,-19,118,4,-19,118,-8.30517e-7,-19,98,4,23,98,3.99999,30,118,4.00001,30,118,4,23,98,14,23,98,14,30,118,14,30,118,14,23],"faces":[33,5,12,11,6,0,0,0,0,33,15,0,54,63,1,1,1,1,33,6,11,9,2,2,2,2,2,32,1,0,15,3,3,3,32,15,18,14,4,4,4,32,14,17,16,5,5,5,32,16,7,8,3,3,3,32,8,1,15,6,6,6,32,15,14,16,7,7,7,32,15,16,8,3,3,3,33,1,8,12,5,8,8,8,8,33,55,3,10,56,9,9,9,9,32,3,20,34,10,10,10,32,34,13,4,11,11,11,32,4,2,9,12,12,12,32,9,10,3,13,13,13,32,3,34,4,14,14,14,32,4,9,3,15,15,15,33,58,4,13,59,16,16,16,16,32,54,0,1,17,17,17,32,54,1,5,18,18,18,32,2,4,58,18,18,18,32,54,5,6,17,17,17,32,6,2,58,18,18,18,32,6,58,54,17,17,17,33,3,55,87,20,19,19,19,19,33,34,92,59,13,20,20,20,20,32,12,8,7,21,21,21,32,56,10,9,22,22,22,32,56,9,11,23,23,23,32,12,7,57,24,24,24,32,56,11,12,23,23,23,32,57,56,12,21,21,21,33,14,61,67,17,25,25,25,25,33,15,63,69,18,26,26,26,26,33,16,65,57,7,27,27,27,27,33,17,67,65,16,28,28,28,28,33,18,69,61,14,29,29,29,29,33,25,26,31,32,30,30,30,30,33,86,19,36,97,31,31,31,31,33,26,22,29,31,32,32,32,32,32,36,19,21,33,33,33,32,21,28,27,3,3,3,32,37,38,35,3,3,3,32,21,27,37,3,3,3,32,39,36,21,3,3,3,32,37,35,39,3,3,3,32,21,37,39,3,3,3,33,21,25,32,28,34,34,34,34,33,88,89,30,23,35,35,35,35,32,34,20,23,36,36,36,32,23,30,29,3,3,3,32,29,22,24,33,33,33,32,24,33,34,37,37,37,32,34,23,29,38,38,38,32,29,24,34,39,39,39,33,91,93,33,24,40,40,40,40,32,21,19,86,18,18,18,32,91,24,22,17,17,17,32,91,22,26,18,18,18,32,25,21,86,18,18,18,32,91,26,25,17,17,17,32,86,91,25,41,41,41,33,23,20,87,88,42,42,42,42,33,34,33,93,92,20,20,20,20,32,27,28,32,24,24,24,32,31,29,30,21,21,21,32,90,27,32,23,23,23,32,31,30,89,24,24,24,32,90,32,31,23,23,23,32,31,89,90,43,43,43,33,35,38,101,95,44,44,44,44,33,36,39,103,97,45,45,45,45,33,37,27,90,99,46,46,46,46,33,38,37,99,101,47,47,47,47,33,39,35,95,103,48,48,48,48,33,45,46,51,52,49,49,49,49,33,54,40,62,63,50,50,50,50,33,46,42,49,51,51,51,51,51,32,62,40,41,52,52,52,32,41,48,47,53,53,53,32,64,104,107,54,54,54,32,41,47,64,55,55,55,32,107,106,62,56,56,56,32,62,41,64,57,57,57,32,64,107,62,58,58,58,33,41,45,52,48,8,8,8,8,33,55,56,50,43,9,9,9,9,32,85,71,43,59,59,59,32,43,50,49,53,53,53,32,49,42,44,52,52,52,32,44,53,85,60,60,60,32,85,43,49,61,61,61,32,49,44,85,62,62,62,33,58,59,53,44,16,16,16,16,32,41,40,54,41,41,41,32,58,44,42,17,17,17,32,58,42,46,41,41,41,32,45,41,54,17,17,17,32,58,46,45,17,17,17,32,54,58,45,18,18,18,33,43,71,87,55,63,63,63,63,33,85,53,59,92,64,64,64,64,32,47,48,52,21,21,21,32,51,49,50,21,21,21,32,57,47,52,21,21,21,32,51,50,56,21,21,21,32,57,52,51,21,21,21,32,51,56,57,23,23,23,33,60,66,67,61,65,65,65,65,33,62,68,69,63,66,66,66,66,33,64,47,57,65,67,67,67,67,33,66,64,65,67,68,68,68,68,33,68,60,61,69,69,69,69,69,33,76,83,82,77,70,70,70,70,33,86,97,96,70,71,71,71,71,33,77,82,80,73,72,72,72,72,32,72,70,96,53,53,53,32,96,102,94,53,53,53,32,94,100,98,55,55,55,32,98,78,79,55,55,55,32,79,72,96,52,52,52,32,96,94,98,53,53,53,32,96,98,79,55,55,55,33,72,79,83,76,34,34,34,34,33,88,74,81,89,35,35,35,35,32,74,71,85,73,73,73,32,85,84,75,74,74,74,32,75,73,80,75,75,75,32,80,81,74,76,76,76,32,74,85,75,77,77,77,32,75,80,74,78,78,78,33,91,75,84,93,40,40,40,40,32,86,70,72,17,17,17,32,86,72,76,41,41,41,32,73,75,91,41,41,41,32,86,76,77,17,17,17,32,77,73,91,17,17,17,32,77,91,86,41,41,41,33,74,88,87,71,79,79,79,79,33,85,92,93,84,80,80,80,80,32,83,79,78,21,21,21,32,89,81,80,81,81,81,32,89,80,82,21,21,21,32,83,78,90,21,21,21,32,89,82,83,21,21,21,32,90,89,83,43,43,43,33,94,95,101,100,82,82,82,82,33,96,97,103,102,83,83,83,83,33,98,99,90,78,84,84,84,84,33,100,101,99,98,85,85,85,85,33,102,103,95,94,86,86,86,86,32,68,62,106,87,87,87,32,105,104,64,88,88,88,32,68,106,105,89,89,89,32,66,60,68,55,55,55,32,105,64,66,90,90,90,32,105,66,68,91,91,91,33,106,107,111,110,17,17,17,17,33,108,109,110,111,92,92,92,92,33,104,105,109,108,43,43,43,43,33,107,104,108,111,93,93,93,93,33,105,106,110,109,94,94,94,94]},"autopoint_ab":{"normals":[0,0,1,0,0,-1,-0.332687,0,0.943037,-0.332686,0,0.943038,-0.332682,0.00000507633,0.943039,-0.332687,-0.0000050764,0.943037,-0.332686,0,0.943038,-0.332685,0,0.943038,3.79465e-7,0,1,-0.253266,0,0.967397,-0.391548,0,0.920158,-0.391548,0,0.920158,-0.391548,-5.48457e-8,0.920158,-0.391548,0,0.920158,-0.391548,0,0.920158,-0.155401,0,0.987851,-0.430179,-4.03558e-8,0.902744,-0.429172,-5.38363e-8,0.903223,-0.430179,-4.48398e-8,0.902744,-0.430179,-4.48398e-8,0.902744,-0.429172,-2.75711e-8,0.903223,-0.430179,-2.69039e-8,0.902744,-0.046112,0,0.998936,-0.0461121,0,0.998936,-0.046112,0,0.998936,-0.046112,0,0.998936,0,0,-1,0,0,-1,-3.58797e-7,0,-1,0,0,-1,-3.58797e-7,0,-1,0,1,0,-2.70486e-7,-0.00000211255,-1,0,0,-1,0.534993,0,0.844856,0.534993,0,0.844856,0.534998,0,0.844853,0.534993,0,0.844856,0.534998,0,0.844853,0,-1,0,3.01586e-13,-1,7.94767e-7,-4.2768e-13,-1,-0.00000119198,1.4717e-8,-1,2.59794e-8,0,-1,5.96042e-7,0,-1,-2.13814e-7,0,-1,1.32897e-7,-2.40239e-7,-1,-5.16307e-7,-2.72331e-9,-1,3.42715e-8,1.52851e-9,-1,-3.21687e-9,-1.98925e-7,-1,-3.46067e-7,0,-1,5.96042e-7,-0.00000112933,-1,-0.00000321992,1.34818e-8,-1,2.34541e-8,7.49147e-8,-1,6.36375e-9,-1.4852e-8,-1,-8.18996e-9,-1.70293e-8,-1,2.00998e-8,-1.70821e-9,-1,-6.9236e-9,0,-1,5.96041e-7,0,-1,0,-7.76877e-7,-1,0.00000552494,-1.1599e-8,-1,2.51271e-7,3.17071e-8,-1,-1.3372e-7,2.91422e-8,-1,-4.33429e-8,0,1,0,0,1,0,-4.02115e-13,1,-0.00000105969,-4.79319e-8,1,0.00000144422,4.63958e-8,1,3.76176e-7,-2.3578e-8,-1,4.94791e-8,0,-1,-2.08167e-7,-0.00000307235,-1,-0.00000605778,2.14347e-7,-1,4.25946e-7,2.33376e-7,-1,4.16946e-7,1.98027e-8,1,1.10795e-7,4.2659e-8,1,2.79277e-8,7.7937e-8,1,4.36052e-7,-1.6725e-8,-1,3.93045e-8,0,-1,-8.34638e-8,-5.294e-8,-1,-3.79659e-7,1.1789e-8,1,-2.47395e-8,4.32321e-8,1,3.99141e-8,0,1,6.34329e-7,-2.36004e-7,1,-4.16822e-7,1.50401e-7,1,2.65632e-7,0.492899,0,0.870086,0.492899,0,0.870086,0.492895,0,0.870089,0.492899,0,0.870086,0.492895,0,0.870089,0.492899,0,0.870086,-0.534993,0,-0.844856,0.492894,0,0.870089,-0.449609,0,-0.893225,-0.405239,0,-0.914211,0.405239,0,0.914211,0.35989,0,0.932995,0.449609,0,0.893225,1.4852e-8,1,8.18996e-9,6.90456e-9,1,-4.40976e-8,1.5396e-8,1,1.12117e-9,-9.05342e-8,1,-9.07234e-9,8.82948e-9,1,-1.85823e-8,0,1,-1.32897e-7,1.85677e-7,1,4.20922e-7,8.42498e-7,1,-0.00000599096,0,1,6.62738e-9,3.9498e-7,1,8.18117e-7,0,1,-5.1657e-7,0,1,-7.45059e-9,0,1,-9.49568e-8,0,1,0,1.34786e-8,1,-8.12291e-7,-5.06999e-8,1,3.6663e-7,-4.81483e-8,1,-9.12133e-8,2.52913e-7,1,-7.01111e-8,-3.30395e-8,1,2.08324e-7,-2.82724e-15,1,-7.45059e-9,0.405238,-7.00456e-8,0.914211,-0.313678,0,-0.94953,-0.26671,0,-0.963777,-4.63958e-8,-1,-3.76176e-7,0.122408,0,0.99248,-0.534993,0,-0.844856,0.492894,0,0.870089,0.405239,0,0.914211,0.35989,0,0.932995,-0.313678,0,-0.94953,-0.26671,0,-0.963777,0.122408,0,0.99248],"metadata":{"generator":"io_three","normals":129,"uvs":0,"vertices":94,"version":3,"faces":152,"type":"Geometry"},"uvs":[],"vertices":[233.656,1,-17.5,230.852,1,-17.5,216.935,1,-9.49998,220.105,1,-9.49998,228.814,0.999999,-14.4335,233.656,4,-17.5,230.852,4,-17.5,216.935,4,-9.49998,220.105,4,-9.49998,174.348,1,-9.49998,198.427,1,-9.49998,214.953,1,-17.5,164.689,1,-17.5,167.629,1,-11.8704,182.445,4,-6.64343,174.348,4,-9.49998,167.629,-0.999999,-11.8704,174.348,-1,-9.49998,174.348,-4,-9.49998,182.445,-4,-6.64343,198.427,4,-9.49998,214.953,4,-17.5,164.689,4,-17.5,152.433,1,-15.8488,152.433,-0.999999,-15.8488,186.816,4,-4.78338,186.816,-4,-4.78338,186.816,-1,-4.78338,196.868,-1,-0.506286,196.868,1,-0.506286,186.816,1,-4.78338,164.689,-1,-17.5,214.953,-1,-17.5,198.427,-1,-9.49998,198.427,-4,-9.49998,136.928,0.999999,-18.2878,136.928,-1,-18.2878,199.14,4,0.575703,199.14,-4,0.575702,164.689,-4,-17.5,214.953,-4,-17.5,128.979,4,-18.6547,121.501,4,-19,121.501,-4,-19,128.979,-4,-18.6547,128.979,-1,-18.6547,128.979,0.999999,-18.6547,131.778,4,-19,131.778,0.999999,-19,169.757,0.999999,-19,169.757,4,-19,217.601,4,-19,217.601,0.999999,-19,233.221,0.999999,-19,233.221,4,-19,236.025,4,-19,236.025,-4,-19,233.221,-4,-19,233.221,-1,-19,217.601,-1,-19,217.601,-4,-19,169.757,-4,-19,169.757,-1,-19,131.778,-1,-19,131.778,-4,-19,233.656,-4,-17.5,230.852,-4,-17.5,167.941,-4,-18.3999,167.941,4,-18.3999,197.356,4,-0.274334,207.833,4,-4.91868,208.475,4,-3.5623,218.778,4,-8.74826,194.293,4,-7.6676,220.105,-4,-9.49998,218.778,-4,-8.74826,208.475,-4,-3.5623,216.935,-4,-9.49998,194.293,-4,-7.6676,197.356,-4,-0.274334,207.833,-4,-4.91868,216.935,-1,-9.49998,220.105,-1,-9.49998,230.852,-1,-17.5,233.656,-1,-17.5,228.814,-1,-14.4335,207.833,1,-4.91868,197.356,1,-0.274334,194.293,1,-7.6676,167.941,0.999999,-18.3999,207.833,-1,-4.91868,197.356,-1,-0.274334,194.293,-1,-7.6676,167.941,-1,-18.3999],"faces":[33,1,0,5,6,0,0,0,0,33,7,8,3,2,1,1,1,1,32,19,14,15,2,2,2,32,9,13,16,3,3,3,32,19,15,9,4,4,4,32,17,18,19,5,5,5,32,9,16,17,6,6,6,32,9,17,19,7,7,7,33,15,20,10,9,1,1,1,1,33,12,11,21,22,8,8,8,8,33,13,23,24,16,9,9,9,9,32,30,25,14,10,10,10,32,14,19,26,11,11,11,32,27,28,29,12,12,12,32,14,26,27,13,13,13,32,27,29,30,14,14,14,32,14,27,30,11,11,11,33,17,33,34,18,1,1,1,1,33,23,35,36,24,15,15,15,15,32,38,37,69,16,16,16,32,87,29,28,17,17,17,32,38,69,87,18,18,18,32,91,79,38,19,19,19,32,87,28,91,20,20,20,32,87,91,38,21,21,21,33,39,40,32,31,8,8,8,8,32,46,41,42,22,22,22,32,42,43,44,22,22,22,32,45,36,35,23,23,23,32,42,44,45,24,24,24,32,45,35,46,23,23,23,32,42,45,46,25,25,25,32,43,42,47,26,26,26,32,43,47,48,27,27,27,32,63,64,43,1,1,1,32,60,61,62,28,28,28,32,63,43,48,29,29,29,32,59,60,62,30,30,30,32,62,63,48,1,1,1,32,49,50,51,28,28,28,32,62,48,49,26,26,26,32,58,59,62,31,31,31,32,62,49,51,28,28,28,32,62,51,52,30,30,30,32,56,57,58,1,1,1,32,58,62,52,32,32,32,32,53,54,55,26,26,26,32,58,52,53,26,26,26,32,55,56,58,1,1,1,32,53,55,58,33,33,33,32,84,65,56,34,34,34,32,56,55,5,35,35,35,32,0,4,85,36,36,36,32,56,5,0,37,37,37,32,0,85,84,38,38,38,32,56,0,84,37,37,37,33,65,66,57,56,39,39,39,39,32,40,39,67,40,40,40,32,67,61,60,41,41,41,32,67,60,40,42,42,42,32,59,58,83,43,43,43,32,83,84,85,44,44,44,32,85,82,81,45,45,45,32,81,90,91,46,46,46,32,28,27,92,47,47,47,32,81,91,28,48,48,48,32,83,85,81,49,49,49,32,32,59,83,50,50,50,32,62,93,31,51,51,51,32,31,32,83,39,39,39,32,83,81,28,52,52,52,32,28,92,33,53,53,53,32,33,17,16,54,54,54,32,33,16,24,55,55,55,32,83,28,33,56,56,56,32,63,62,31,57,57,57,32,31,83,33,58,58,58,32,33,24,36,59,59,59,32,36,45,63,60,60,60,32,31,33,36,61,61,61,32,36,63,31,62,62,62,33,55,54,6,5,63,63,63,63,32,21,51,50,64,64,64,32,68,22,21,65,65,65,32,50,68,21,66,66,66,32,47,42,41,67,67,67,32,38,79,80,68,68,68,32,80,77,74,69,69,69,32,74,75,76,70,70,70,32,76,38,80,71,71,71,32,80,74,76,72,72,72,32,20,15,14,73,73,73,32,14,25,73,74,74,74,32,14,73,20,75,75,75,32,78,26,19,76,76,76,32,19,18,34,77,77,77,32,19,34,78,78,78,78,33,81,82,74,77,1,1,1,1,33,66,65,84,83,0,0,0,0,32,70,69,37,79,79,79,32,37,71,72,80,80,80,32,72,8,7,81,81,81,32,7,70,37,82,82,82,32,37,72,7,83,83,83,32,3,8,72,84,84,84,32,72,75,74,85,85,85,32,82,85,4,86,86,86,32,72,74,82,87,87,87,32,82,4,3,88,88,88,32,72,82,3,89,89,89,33,53,1,6,54,90,90,90,90,33,11,52,51,21,91,91,91,91,33,2,86,70,7,92,92,92,92,33,86,87,69,70,93,93,93,93,33,20,73,88,10,94,94,94,94,33,30,88,73,25,95,95,95,95,33,76,75,72,71,96,96,96,96,32,13,9,10,97,97,97,32,88,30,29,98,98,98,32,23,13,10,99,99,99,32,10,88,29,100,100,100,32,29,87,86,101,101,101,32,2,3,4,102,102,102,32,29,86,2,103,103,103,32,35,23,10,104,104,104,32,10,29,2,105,105,105,32,2,4,0,106,106,106,32,1,53,52,107,107,107,32,2,0,1,108,108,108,32,35,10,2,109,109,109,32,48,46,35,63,63,63,32,89,49,48,110,110,110,32,12,89,48,111,111,111,32,48,35,2,112,112,112,32,2,1,52,113,113,113,32,2,52,11,114,114,114,32,12,48,2,115,115,115,32,2,11,12,116,116,116,33,76,71,37,38,117,117,117,117,33,49,89,68,50,118,118,118,118,33,22,68,89,12,119,119,119,119,32,43,64,44,120,120,120,33,46,48,47,41,121,121,121,121,33,57,66,83,58,122,122,122,122,33,40,60,59,32,123,123,123,123,33,77,80,90,81,92,92,92,92,33,90,80,79,91,93,93,93,93,33,33,92,78,34,124,124,124,124,33,26,78,92,27,125,125,125,125,33,61,67,93,62,126,126,126,126,33,31,93,67,39,127,127,127,127,33,44,64,63,45,128,128,128,128]},"autopoint_decoration":{"normals":[5.81449e-14,1,-4.62033e-7,0,1,0,-1.63662e-9,1,-4.0771e-8,0,1,0,-2.25498e-8,1,8.43929e-9,1.30383e-7,1,-3.12294e-7,-1.94373e-9,1,-4.43854e-8,7.75433e-9,1,-3.68127e-8,-1.02859e-9,1,-5.60008e-8,-4.91442e-10,1,-4.42197e-8,-1.6125e-9,1,-4.51147e-8,-1.87501e-11,1,-3.88046e-8,3.36892e-10,1,-3.63598e-8,-0.486503,-0.0000772039,0.873679,0,0,1,0.044548,0,-0.999007,0.155736,0,-0.987799,0.253663,0,-0.967293,0.333026,0,-0.942918,0.391782,0,-0.920058,0.430101,0,-0.902781,0.448878,0,-0.893593,0.429969,0,-0.902843,0.391546,0,-0.920158,0.332686,0,-0.943038,0.253264,0,-0.967397,0.155403,0,-0.987851,0.0461111,0,-0.998936,0,-1,3.97364e-8,0,-1,0,2.29445e-7,-1,-5.38828e-7,3.88686e-7,-1,-7.38611e-7,1.94373e-9,-1,4.43854e-8,0,-1,0,-5.36337e-9,-1,3.89319e-8,-2.2217e-7,-1,5.37815e-7,2.98958e-9,-1,4.63352e-8,-2.79517e-9,-1,6.56882e-9,3.68328e-9,-1,8.07848e-8,1.25846e-7,0,-1,0,0,-1,0.00000339093,0.000197946,-1],"metadata":{"generator":"io_three","normals":42,"uvs":0,"vertices":33,"version":3,"faces":47,"type":"Geometry"},"uvs":[],"vertices":[121.5,1,19,121.5,-0.999999,19,117,-0.999999,19,0.249992,1,19,108,1,79,310.5,1,79,295.072,1,78.2879,279.568,1,75.8488,264.371,1,71.8705,249.555,1,66.6434,235.132,1,60.5063,221.09,1,53.819,194.09,1,40.2561,181.132,1,34.0827,168.555,1,28.7269,156.371,1,24.4239,144.567,1,21.3284,133.072,1,19.516,0.249992,-0.999999,19,133.072,-0.999999,19.516,144.567,-0.999999,21.3284,156.371,-0.999999,24.4239,168.555,-0.999999,28.7269,181.132,-0.999999,34.0827,194.09,-0.999998,40.2561,221.09,-0.999998,53.819,235.132,-0.999997,60.5063,249.555,-0.999997,66.6434,264.371,-0.999997,71.8705,279.568,-0.999997,75.8488,295.072,-0.999997,78.2879,310.5,-0.999997,79,108,-0.999997,79],"faces":[32,17,0,3,0,0,0,32,4,5,6,1,1,1,32,4,6,7,1,1,1,32,17,3,4,2,2,2,32,15,16,17,3,3,3,32,13,14,15,4,4,4,32,11,12,13,5,5,5,32,11,13,15,6,6,6,32,15,17,4,7,7,7,32,4,7,8,8,8,8,32,4,8,9,9,9,9,32,11,15,4,10,10,10,32,4,9,10,11,11,11,32,4,10,11,12,12,12,33,32,4,3,18,13,13,13,13,33,5,4,32,31,14,14,14,14,33,0,17,19,1,15,15,15,15,33,20,19,17,16,16,16,16,16,33,21,20,16,15,17,17,17,17,33,22,21,15,14,18,18,18,18,33,23,22,14,13,19,19,19,19,33,24,23,13,12,20,20,20,20,33,25,24,12,11,21,21,21,21,33,26,25,11,10,22,22,22,22,33,27,26,10,9,23,23,23,23,33,28,27,9,8,24,24,24,24,33,29,28,8,7,25,25,25,25,33,30,29,7,6,26,26,26,26,33,31,30,6,5,27,27,27,27,32,32,18,2,28,28,28,32,2,1,19,29,29,29,32,19,20,21,29,29,29,32,21,22,23,30,30,30,32,23,24,25,31,31,31,32,21,23,25,32,32,32,32,2,19,21,29,29,29,32,30,31,32,33,33,33,32,29,30,32,33,33,33,32,32,2,21,34,34,34,32,21,25,26,35,35,35,32,32,21,26,36,36,36,32,28,29,32,33,33,33,32,32,26,27,37,37,37,32,27,28,32,38,38,38,32,3,0,1,39,39,39,32,2,18,3,40,40,40,32,1,2,3,41,41,41]},"curve_8":{"normals":[-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534995,0,-0.844855,-0.492897,0,-0.870087,-0.449609,0,-0.893226,-0.405239,0,-0.914211,-0.359892,0,-0.932994,-2.40551e-9,1,-4.29933e-8,3.25209e-10,1,-4.49677e-8,-1.88163e-9,1,-4.49296e-8,5.20002e-10,1,-4.73912e-8,-2.04816e-9,1,-4.27968e-8,1.80506e-10,1,-4.56916e-8,-2.06171e-9,1,-4.56455e-8,1.37714e-10,1,-4.43967e-8,-9.42067e-10,1,-4.02524e-8,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,0.492898,0,0.870087,0.449609,0,0.893226,0.40524,0,0.91421,0.35989,5.74434e-8,0.932995,3.37906e-9,1,-4.12318e-8,1.35172e-9,1,-4.13479e-8,-6.78548e-10,1,-4.13645e-8,2.51045e-9,1,-4.42373e-8,-4.72985e-9,1,-4.10987e-8,2.75902e-9,1,-4.29512e-8,6.48216e-10,1,-4.30349e-8,-1.62677e-9,1,-4.77945e-8,-3.05415e-9,1,-4.33853e-8,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.689069,0,-0.724696,0.359893,0,0.932994,0.405239,0,0.914211,0.449609,0,0.893225,0.492896,0,0.870088,0.534996,0,0.844855,0.575808,0,0.817585,0.615229,0,0.788348,0.65317,0,0.757211,0.689147,-5.07059e-7,0.724622,1.53516e-8,1,-1.46159e-8,-0.689144,0,-0.724624,-0.35989,0,-0.932995,-0.405242,0,-0.914209,-0.449607,0,-0.893227,-0.492901,0,-0.870086,-0.534994,0,-0.844856,0,1,0,1.89574e-8,1,-8.40323e-9,1.85223e-8,1,-9.32331e-9,1.80425e-8,1,-1.02209e-8,1.75192e-8,1,-1.10939e-8,1.69538e-8,1,-1.19401e-8,-2.43728e-8,1,-8.17886e-8,-2.83562e-8,1,-8.04939e-8,0.359893,0,0.932994,0.405239,0,0.914211,0.449609,0,0.893225,0.492896,0,0.870088,0.575808,0,0.817585,0.615229,0,0.788348,0.653171,0,0.757211,0.689147,0,0.724622,-5.31508e-9,1,-4.50232e-8,-7.51796e-9,1,-4.47081e-8,3.16227e-9,1,-4.37368e-8,1.01225e-9,1,-4.38392e-8,-1.14e-9,1,-4.38361e-8,-3.28962e-9,1,-4.37273e-8,7.29344e-9,1,-4.5485e-8,5.0529e-9,1,-4.57882e-8,-3.75655e-8,1,-7.45052e-8,-9.6079e-9,1,-4.20829e-8,-9.04154e-9,1,-1.79325e-8,1.15993e-8,1,-1.08014e-7,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,-1.71421e-8,1,-7.85686e-8,2.24578e-8,1,-9.95472e-9,2.19424e-8,1,-1.10446e-8,-2.84851e-8,1,-7.52021e-8,-6.42811e-8,1,-1.47428e-7,-7.14385e-8,1,-1.44097e-7,-7.84226e-8,1,-1.40419e-7,-2.40076e-8,1,-8.42456e-8,1.8261e-8,1,-1.73858e-8,-0.405242,0,-0.914209,-0.449607,0,-0.893226,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,1.0035e-8,1,-4.61608e-8,0.581237,0,0.813734,-0.813734,0,-0.581237,0.707109,0,-0.707105,0.707107,0,-0.707107,0.707108,0,-0.707106,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707107,-0.0000216099,-0.707107,0.707109,0.0000081038,-0.707105,0.707106,0.0000431584,-0.707108,-0.00260037,0.999993,0.00260032,0.707108,-0.00000802852,-0.707105,0.313679,0,0.949529,0.266711,0,0.963777,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,0.0735638,0,0.99729,0.111157,0,0.993803,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.170958,0,-0.985278,-0.122409,0,-0.99248,-0.0735639,0,-0.99729,0,0,-1,0,1,-4.469e-8,-3.28856e-9,1,-4.45824e-8,6.9156e-10,1,-3.76205e-8,-1.15513e-9,1,-3.76091e-8,5.31244e-10,1,-4.5936e-8,-1.72335e-9,1,-4.59067e-8,4.73139e-9,1,-4.47193e-8,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.170958,0,-0.985278,-0.122409,0,-0.99248,-0.0735638,0,-0.99729,2.69243e-9,1,-4.50235e-8,-2.04004e-9,1,-4.10371e-8,1.85785e-9,1,-4.19129e-8,-2.01031e-10,1,-4.19535e-8,-2.25938e-9,1,-4.18931e-8,1.38239e-9,1,-4.3613e-8,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,0.0735639,0,0.99729,0.307795,0,0.951453,-0.073564,0,-0.99729,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.2191,0,-0.975702,-0.266711,0,-0.963776,-0.313679,0,-0.949529,0.111157,0,0.993803,0.122409,0,0.99248,0.170958,0,0.985278,0.2191,0,0.975702,0.266711,0,0.963777,0.313679,0,0.949529,0,1,0,1.12414e-9,1,-1.60289e-7,-6.74186e-9,1,-1.60151e-7,3.938e-8,1,-1.30091e-8,-8.87912e-9,1,-1.0507e-7,-3.69242e-9,1,-5.00574e-8,-6.14413e-9,1,-4.98159e-8,1.57223e-8,1,-4.09356e-8,4.09801e-9,1,-3.30723e-8,-1.00404e-8,1,-3.62814e-8,9.54564e-9,1,-4.27995e-8,0.130446,0,0.991455,0.073564,0,0.99729,0.122409,0,0.99248,0.170958,0,0.985278,0.2191,2.87219e-8,0.975702,0.266711,8.61655e-8,0.963776,0.31368,5.74439e-8,0.949529,-1.16927e-8,1,-1.58515e-7,2.46206e-9,1,-8.03787e-8,-5.42823e-9,1,-8.0233e-8,-9.35859e-9,1,-7.987e-8,-1.32662e-8,1,-7.93148e-8,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.335866,0,-0.94191,1.41633e-7,1,-8.29734e-8,0,0,1,-3.35118e-8,1,-1.52488e-7,1.81322e-7,1,-4.47033e-8,3.51029e-8,1,-5.19632e-8,-0.335866,0,-0.94191,-1.15856e-8,1,-4.44326e-8,-0.214645,0,-0.976692,-5.45142e-9,1,-4.45831e-8,-0.113723,0,-0.993513,0.164399,0,-0.986394,-1,0,-8.34465e-7,0.164399,0,0.986394,-1,0,-0.00000299154,-1,0,-0.00000224443,-1,0,-0.00000299154,-1,0,-0.00000224443,-1,0.0000025017,-0.00000216002,-1,0,-0.00000237009,-1,0.00000157221,-0.00000224443,0,0,0,-1,0,-0.00000197629,-1,0,-0.00000471824,-1,0,-0.00000197629,-1,0,-0.00000471824,-1,-2.98027e-8,-0.00000199615,-1,-0.00000620944,-0.00000264645,-0.449609,0,-0.893226,-2.53136e-9,-1,4.48976e-8,5.83898e-10,-1,4.04899e-8,-5.50637e-9,-1,3.61365e-8,-3.72656e-9,-1,3.63632e-8,-1.93786e-9,-1,3.65022e-8,-1.80506e-10,-1,4.56916e-8,2.06171e-9,-1,4.56455e-8,-4.57433e-9,-1,4.3304e-8,-2.9771e-9,-1,4.39838e-8,0.35989,0,0.932995,4.89768e-9,-1,4.60248e-8,-1.35172e-9,-1,4.13479e-8,6.78548e-10,-1,4.13645e-8,1.16194e-9,-1,5.07199e-8,3.64912e-9,-1,5.06018e-8,6.12774e-9,-1,5.03618e-8,-7.2024e-10,-1,4.78166e-8,1.30142e-9,-1,3.82356e-8,-6.19593e-9,-1,4.70484e-8,0.689147,5.07059e-7,0.724622,-3.07033e-8,-1,2.92319e-8,-1.9347e-8,-1,7.46276e-9,0,-1,0,-3.70445e-8,-1,1.86466e-8,-3.50384e-8,-1,2.21879e-8,7.4569e-8,-1,1.41893e-7,8.14408e-8,-1,1.38062e-7,-3.14037e-8,-1,2.70887e-8,0.492896,0,0.870088,-7.43398e-9,-1,4.32162e-8,-5.30444e-9,-1,4.35289e-8,-3.16227e-9,-1,4.37368e-8,-1.01225e-9,-1,4.38392e-8,1.14e-9,-1,4.38361e-8,3.28962e-9,-1,4.37273e-8,5.43117e-9,-1,4.35133e-8,7.55968e-9,-1,4.31944e-8,0,-1,0,-3.11768e-8,-1,3.11768e-8,1.80831e-8,-1,3.58649e-8,1.36101e-8,-1,5.53858e-8,0,-1,0,-4.38849e-8,-1,2.20892e-8,-4.15079e-8,-1,2.62846e-8,-3.87319e-8,-1,3.02262e-8,-3.65219e-8,-1,3.47717e-8,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-1.338e-8,-1,6.15477e-8,0.707109,-0.0000081038,-0.707105,0.707108,0.00000259162,-0.707106,0.707106,-0.0000431584,-0.707108,0.013,-0.999831,-0.0129999,0.707108,0.00000802852,-0.707105,-0.313679,-5.54751e-8,-0.949529,-0.170958,0,-0.985278,-0.122409,0,-0.99248,0,0,-1,0,-1,4.469e-8,-1.98856e-9,-1,4.49716e-8,2.20459e-10,-1,4.5015e-8,2.42887e-9,-1,4.495e-8,-5.31244e-10,-1,4.5936e-8,-1.82011e-9,-1,4.3022e-8,1.63667e-9,-1,3.86923e-8,3.28856e-9,-1,4.45824e-8,5.4721e-9,-1,4.43673e-8,-4.17545e-9,-1,4.60959e-8,-1.90852e-9,-1,4.62453e-8,3.6297e-10,-1,4.62832e-8,2.63343e-9,-1,4.62097e-8,3.37093e-9,-1,8.00754e-8,7.29617e-9,-1,7.98135e-8,1.12036e-8,-1,7.93594e-8,1.5084e-8,-1,7.8714e-8,3.69242e-9,-1,5.00574e-8,-5.78385e-9,-1,4.49654e-8,6.43573e-9,-1,3.70908e-8,8.24803e-9,-1,3.67304e-8,-2.0798e-8,-1,5.13254e-8,1.57446e-8,-1,4.76601e-8,0.122409,0,0.99248,0.2191,5.74437e-8,0.975702,0.266711,8.61655e-8,0.963777,1.87172e-8,-1,1.5974e-7,2.65325e-8,-1,1.5863e-7,-0.266711,0,-0.963776,2.14232e-8,-1,1.62827e-7,1.0122e-7,-1,4.47036e-8,9.12048e-8,-1,4.57583e-8,-1.15059e-7,-1,4.75413e-8,5.45142e-9,-1,4.45831e-8,-0.113723,0,-0.993512,-8.92414e-9,-1,1.05602e-7,-1,0,-0.00000224443,-1,-0.00000157222,-0.00000224443,-1,-0.0000025017,-0.00000216002,-1,0.00000815845,-0.00000199615,-1,0.00000100553,-0.00000264645],"faces":[33,69,0,2,30,0,0,0,0,33,30,29,68,69,1,1,1,1,33,29,28,67,68,2,2,2,2,33,28,27,66,67,3,3,3,3,33,27,26,65,66,4,4,4,4,33,26,25,64,65,5,5,5,5,33,25,24,63,64,6,6,6,6,33,24,23,62,63,7,7,7,7,33,33,32,23,24,8,8,8,8,33,34,33,24,25,9,9,9,9,33,35,34,25,26,10,10,10,10,33,36,35,26,27,11,11,11,11,33,37,36,27,28,12,12,12,12,33,38,37,28,29,13,13,13,13,33,39,38,29,30,14,14,14,14,33,40,39,30,2,15,15,15,15,33,41,40,2,31,16,16,16,16,33,43,42,90,91,17,17,17,17,33,40,41,89,88,18,18,18,18,33,39,40,88,87,19,19,19,19,33,38,39,87,86,20,20,20,20,33,37,38,86,85,21,21,21,21,33,36,37,85,84,22,22,22,22,33,35,36,84,83,23,23,23,23,33,34,35,83,82,24,24,24,24,33,33,34,82,81,25,25,25,25,33,32,33,81,80,26,26,26,26,33,53,52,42,43,27,27,27,27,33,54,53,43,44,28,28,28,28,33,55,54,44,45,29,29,29,29,33,56,55,45,46,30,30,30,30,33,57,56,46,47,31,31,31,31,33,58,57,47,48,32,32,32,32,33,59,58,48,49,33,33,33,33,33,60,59,49,50,34,34,34,34,33,61,60,50,51,35,35,35,35,33,60,61,109,108,36,36,36,36,33,59,60,108,107,37,37,37,37,33,58,59,107,106,38,38,38,38,33,57,58,106,105,39,39,39,39,33,56,57,105,104,40,40,40,40,33,55,56,104,103,41,41,41,41,33,54,55,103,102,42,42,42,42,33,53,54,102,101,43,43,43,43,33,52,53,101,100,44,44,44,44,33,242,241,18,19,45,45,45,45,33,243,242,19,20,46,46,46,46,33,244,243,20,21,47,47,47,47,33,245,244,21,22,48,48,48,48,33,226,227,4,3,49,49,49,49,33,227,228,5,4,50,50,50,50,33,228,229,6,5,51,51,51,51,33,229,230,7,6,52,52,52,52,33,230,231,8,7,53,53,53,53,33,231,232,9,8,54,54,54,54,33,232,233,10,9,55,55,55,55,33,233,234,11,10,56,56,56,56,33,234,235,12,11,57,57,57,57,33,1,0,78,79,58,58,58,58,33,2,0,1,31,59,59,59,59,33,237,236,13,14,60,60,60,60,33,238,237,14,15,61,61,61,61,33,239,238,15,16,62,62,62,62,33,240,239,16,17,63,63,63,63,33,241,240,17,18,64,64,64,64,33,63,62,70,71,65,65,65,65,33,64,63,71,72,66,66,66,66,33,65,64,72,73,67,67,67,67,33,66,65,73,74,68,68,68,68,33,67,66,74,75,69,69,69,69,33,68,67,75,76,70,70,70,70,33,69,68,76,77,71,71,71,71,33,0,69,77,78,72,72,72,72,33,3,4,71,70,73,73,73,73,33,4,5,72,71,74,74,74,74,33,5,6,73,72,75,75,75,75,33,6,7,74,73,76,76,76,76,33,7,8,75,74,53,53,53,53,33,8,9,76,75,77,77,77,77,33,9,10,77,76,78,78,78,78,33,10,11,78,77,79,79,79,79,33,11,12,79,78,80,80,80,80,33,91,90,80,81,81,81,81,81,33,92,91,81,82,82,82,82,82,33,93,92,82,83,83,83,83,83,33,94,93,83,84,84,84,84,84,33,95,94,84,85,85,85,85,85,33,96,95,85,86,86,86,86,86,33,97,96,86,87,87,87,87,87,33,98,97,87,88,88,88,88,88,32,123,99,98,89,89,89,32,98,88,89,90,90,90,32,122,123,98,91,91,91,32,98,89,122,92,92,92,33,44,43,91,92,93,93,93,93,33,45,44,92,93,94,94,94,94,33,46,45,93,94,95,95,95,95,33,47,46,94,95,96,96,96,96,33,48,47,95,96,97,97,97,97,33,49,48,96,97,98,98,98,98,33,50,49,97,98,99,99,99,99,33,51,50,98,99,100,100,100,100,33,111,110,100,101,101,101,101,101,33,112,111,101,102,102,102,102,102,33,113,112,102,103,103,103,103,103,33,114,113,103,104,104,104,104,104,33,115,114,104,105,105,105,105,105,33,116,115,105,106,106,106,106,106,33,117,116,106,107,107,107,107,107,33,118,117,107,108,108,108,108,108,33,119,118,108,109,109,109,109,109,33,14,13,110,111,60,60,60,60,33,15,14,111,112,110,110,110,110,33,16,15,112,113,111,111,111,111,33,17,16,113,114,63,63,63,63,33,18,17,114,115,112,112,112,112,33,19,18,115,116,113,113,113,113,33,20,19,116,117,114,114,114,114,33,21,20,117,118,115,115,115,115,33,22,21,118,119,48,48,48,48,33,121,123,122,120,116,116,116,116,33,122,372,370,120,117,117,117,117,33,121,371,373,123,118,118,118,118,33,120,370,371,121,119,119,119,119,32,51,99,123,120,120,120,32,373,245,22,121,121,121,32,22,119,109,122,122,122,32,22,109,61,122,122,122,32,51,123,373,123,123,123,32,373,22,61,124,124,124,32,51,373,61,125,125,125,32,31,1,79,122,122,122,32,12,235,372,126,126,126,32,31,79,12,122,122,122,32,122,89,41,122,122,122,32,41,31,12,127,127,127,32,372,122,41,122,122,122,32,12,372,41,128,128,128,33,131,3,70,180,129,129,129,129,33,130,131,180,179,130,130,130,130,33,129,130,179,178,131,131,131,131,33,128,129,178,177,132,132,132,132,33,127,128,177,176,133,133,133,133,33,126,127,176,175,134,134,134,134,33,210,126,175,216,135,135,135,135,33,23,145,173,62,136,136,136,136,33,145,144,172,173,137,137,137,137,33,144,143,171,172,138,138,138,138,33,143,142,170,171,139,139,139,139,33,142,141,169,170,140,140,140,140,33,141,140,168,169,141,141,141,141,33,209,139,167,215,142,142,142,142,33,211,146,139,209,143,143,143,143,33,148,147,140,141,144,144,144,144,33,149,148,141,142,145,145,145,145,33,150,149,142,143,146,146,146,146,33,151,150,143,144,147,147,147,147,33,152,151,144,145,148,148,148,148,33,32,152,145,23,149,149,149,149,33,42,159,194,90,150,150,150,150,33,159,158,193,194,151,151,151,151,33,158,157,192,193,152,152,152,152,33,157,156,191,192,153,153,153,153,33,156,155,190,191,154,154,154,154,33,155,154,189,190,155,155,155,155,33,212,153,188,218,142,142,142,142,33,213,160,153,212,143,143,143,143,33,162,161,154,155,156,156,156,156,33,163,162,155,156,157,157,157,157,33,164,163,156,157,158,158,158,158,33,165,164,157,158,159,159,159,159,33,166,165,158,159,160,160,160,160,33,52,166,159,42,161,161,161,161,33,166,52,100,201,162,162,162,162,33,165,166,201,200,163,163,163,163,33,164,165,200,199,164,164,164,164,33,163,164,199,198,165,165,165,165,33,162,163,198,197,166,166,166,166,33,161,162,197,196,167,167,167,167,33,213,161,196,219,168,168,168,168,33,474,382,132,214,142,142,142,142,33,384,383,133,134,169,169,169,169,33,385,384,134,135,170,170,170,170,33,386,385,135,136,171,171,171,171,33,387,386,136,137,172,172,172,172,33,388,387,137,138,173,173,173,173,33,236,388,138,13,174,174,174,174,33,473,376,126,210,175,175,175,175,33,376,377,127,126,134,134,134,134,33,377,378,128,127,176,176,176,176,33,378,379,129,128,177,177,177,177,33,379,380,130,129,178,178,178,178,33,380,381,131,130,179,179,179,179,33,381,226,3,131,180,180,180,180,33,215,167,174,216,181,181,181,181,33,169,168,175,176,65,65,65,65,33,170,169,176,177,182,182,182,182,33,171,170,177,178,183,183,183,183,33,172,171,178,179,65,65,65,65,33,173,172,179,180,181,181,181,181,33,62,173,180,70,184,184,184,184,33,218,188,224,221,185,185,185,185,33,190,189,182,183,186,186,186,186,33,191,190,183,184,187,187,187,187,33,192,191,184,185,188,188,188,188,33,193,192,185,186,189,189,189,189,33,194,193,186,187,190,190,190,190,33,90,194,187,80,191,191,191,191,33,211,147,182,217,192,192,192,192,33,147,148,183,182,193,193,193,193,33,148,149,184,183,194,194,194,194,33,149,150,185,184,195,195,195,195,33,150,151,186,185,196,196,196,196,33,151,152,187,186,197,197,197,197,33,152,32,80,187,198,198,198,198,33,220,202,195,219,181,181,181,181,33,204,203,196,197,199,199,199,199,33,205,204,197,198,200,200,200,200,33,206,205,198,199,65,65,65,65,33,207,206,199,200,201,201,201,201,33,208,207,200,201,202,202,202,202,33,110,208,201,100,203,203,203,203,33,214,132,202,220,142,142,142,142,33,134,133,203,204,169,169,169,169,33,135,134,204,205,204,204,204,204,33,136,135,205,206,205,205,205,205,33,137,136,206,207,172,172,172,172,33,138,137,207,208,173,173,173,173,33,13,138,208,110,174,174,174,174,33,133,214,220,203,206,206,206,206,33,203,220,219,196,207,207,207,207,33,146,211,217,181,208,208,208,208,32,189,218,221,209,209,209,32,222,217,182,65,65,65,32,189,221,222,210,210,210,32,189,222,182,211,211,211,33,168,215,216,175,65,65,65,65,33,375,473,210,125,208,208,208,208,33,383,474,214,133,212,212,212,212,33,160,213,219,195,208,208,208,208,33,161,213,212,154,213,213,213,213,33,154,212,218,189,214,214,214,214,33,147,211,209,140,215,215,215,215,33,140,209,215,168,216,216,216,216,33,125,210,216,174,208,208,208,208,33,223,222,492,493,217,217,217,217,33,222,223,181,217,65,65,65,65,33,222,221,491,492,218,218,218,218,33,221,224,494,491,219,219,219,219,32,224,188,153,220,220,220,32,160,195,202,221,221,221,32,494,224,153,222,222,222,32,160,202,132,223,223,223,32,494,153,160,224,224,224,32,132,382,494,225,225,225,32,160,132,494,226,226,226,32,375,125,174,227,227,227,32,174,167,139,228,228,228,32,146,181,223,229,229,229,32,375,174,139,230,230,230,32,146,223,493,231,231,231,32,375,139,146,232,232,232,32,146,493,375,233,233,233,33,248,246,315,276,0,0,0,0,33,276,315,314,275,1,1,1,1,33,275,314,313,274,2,2,2,2,33,274,313,312,273,3,3,3,3,33,273,312,311,272,4,4,4,4,33,272,311,310,271,234,234,234,234,33,271,310,309,270,6,6,6,6,33,270,309,308,269,7,7,7,7,33,279,270,269,278,235,235,235,235,33,280,271,270,279,236,236,236,236,33,281,272,271,280,237,237,237,237,33,282,273,272,281,238,238,238,238,33,283,274,273,282,239,239,239,239,33,284,275,274,283,240,240,240,240,33,285,276,275,284,241,241,241,241,33,286,248,276,285,242,242,242,242,33,287,277,248,286,243,243,243,243,33,289,337,336,288,17,17,17,17,33,286,334,335,287,18,18,18,18,33,285,333,334,286,19,19,19,19,33,284,332,333,285,20,20,20,20,33,283,331,332,284,21,21,21,21,33,282,330,331,283,22,22,22,22,33,281,329,330,282,23,23,23,23,33,280,328,329,281,24,24,24,24,33,279,327,328,280,25,25,25,25,33,278,326,327,279,244,244,244,244,33,299,289,288,298,245,245,245,245,33,300,290,289,299,246,246,246,246,33,301,291,290,300,247,247,247,247,33,302,292,291,301,248,248,248,248,33,303,293,292,302,249,249,249,249,33,304,294,293,303,250,250,250,250,33,305,295,294,304,251,251,251,251,33,306,296,295,305,252,252,252,252,33,307,297,296,306,253,253,253,253,33,306,354,355,307,36,36,36,36,33,305,353,354,306,37,37,37,37,33,304,352,353,305,38,38,38,38,33,303,351,352,304,39,39,39,39,33,302,350,351,303,40,40,40,40,33,301,349,350,302,41,41,41,41,33,300,348,349,301,42,42,42,42,33,299,347,348,300,43,43,43,43,33,298,346,347,299,44,44,44,44,33,242,265,264,241,45,45,45,45,33,243,266,265,242,46,46,46,46,33,244,267,266,243,47,47,47,47,33,245,268,267,244,48,48,48,48,33,226,249,250,227,49,49,49,49,33,227,250,251,228,50,50,50,50,33,228,251,252,229,51,51,51,51,33,229,252,253,230,52,52,52,52,33,230,253,254,231,53,53,53,53,33,231,254,255,232,54,54,54,54,33,232,255,256,233,55,55,55,55,33,233,256,257,234,56,56,56,56,33,234,257,258,235,254,254,254,254,33,324,246,247,325,255,255,255,255,33,248,277,247,246,59,59,59,59,33,237,260,259,236,60,60,60,60,33,238,261,260,237,61,61,61,61,33,239,262,261,238,62,62,62,62,33,240,263,262,239,63,63,63,63,33,241,264,263,240,64,64,64,64,33,309,317,316,308,256,256,256,256,33,310,318,317,309,257,257,257,257,33,311,319,318,310,258,258,258,258,33,312,320,319,311,257,257,257,257,33,313,321,320,312,259,259,259,259,33,314,322,321,313,260,260,260,260,33,315,323,322,314,261,261,261,261,33,246,324,323,315,262,262,262,262,33,249,316,317,250,73,73,73,73,33,250,317,318,251,74,74,74,74,33,251,318,319,252,75,75,75,75,33,252,319,320,253,263,263,263,263,33,253,320,321,254,53,53,53,53,33,254,321,322,255,77,77,77,77,33,255,322,323,256,78,78,78,78,33,256,323,324,257,79,79,79,79,33,257,324,325,258,80,80,80,80,33,337,327,326,336,264,264,264,264,33,338,328,327,337,265,265,265,265,33,339,329,328,338,266,266,266,266,33,340,330,329,339,267,267,267,267,33,341,331,330,340,268,268,268,268,33,342,332,331,341,269,269,269,269,33,343,333,332,342,270,270,270,270,33,344,334,333,343,271,271,271,271,32,344,345,369,272,272,272,32,368,335,334,273,273,273,32,344,369,368,274,274,274,32,368,334,344,275,275,275,33,290,338,337,289,93,93,93,93,33,291,339,338,290,94,94,94,94,33,292,340,339,291,95,95,95,95,33,293,341,340,292,96,96,96,96,33,294,342,341,293,97,97,97,97,33,295,343,342,294,98,98,98,98,33,296,344,343,295,99,99,99,99,33,297,345,344,296,100,100,100,100,33,357,347,346,356,276,276,276,276,33,358,348,347,357,257,257,257,257,33,359,349,348,358,277,277,277,277,33,360,350,349,359,276,276,276,276,33,361,351,350,360,278,278,278,278,33,362,352,351,361,257,257,257,257,33,363,353,352,362,279,279,279,279,33,364,354,353,363,276,276,276,276,33,365,355,354,364,280,280,280,280,33,260,357,356,259,60,60,60,60,33,261,358,357,260,110,110,110,110,33,262,359,358,261,111,111,111,111,33,263,360,359,262,63,63,63,63,33,264,361,360,263,281,281,281,281,33,265,362,361,264,282,282,282,282,33,266,363,362,265,114,114,114,114,33,267,364,363,266,115,115,115,115,33,268,365,364,267,48,48,48,48,33,367,366,368,369,283,283,283,283,33,368,366,370,372,117,117,117,117,33,367,369,373,371,118,118,118,118,33,366,367,371,370,119,119,119,119,32,307,355,365,122,122,122,32,365,268,245,227,227,227,32,373,369,345,123,123,123,32,373,345,297,123,123,123,32,307,365,245,122,122,122,32,373,297,307,284,284,284,32,307,245,373,285,285,285,32,287,335,368,122,122,122,32,372,235,258,286,286,286,32,258,325,247,123,123,123,32,258,247,277,122,122,122,32,287,368,372,123,123,123,32,258,277,287,287,287,287,32,287,372,258,288,288,288,33,395,444,316,249,129,129,129,129,33,394,443,444,395,130,130,130,130,33,393,442,443,394,131,131,131,131,33,392,441,442,393,132,132,132,132,33,391,440,441,392,133,133,133,133,33,390,439,440,391,134,134,134,134,33,476,482,439,390,135,135,135,135,33,269,308,437,409,289,289,289,289,33,409,437,436,408,137,137,137,137,33,408,436,435,407,138,138,138,138,33,407,435,434,406,290,290,290,290,33,406,434,433,405,291,291,291,291,33,405,433,432,404,141,141,141,141,33,475,481,431,403,292,292,292,292,33,477,475,403,410,293,293,293,293,33,412,405,404,411,294,294,294,294,33,413,406,405,412,295,295,295,295,33,414,407,406,413,296,296,296,296,33,415,408,407,414,297,297,297,297,33,416,409,408,415,298,298,298,298,33,278,269,409,416,299,299,299,299,33,288,336,458,423,150,150,150,150,33,423,458,457,422,151,151,151,151,33,422,457,456,421,152,152,152,152,33,421,456,455,420,153,153,153,153,33,420,455,454,419,154,154,154,154,33,419,454,453,418,155,155,155,155,33,478,484,452,417,292,292,292,292,33,479,478,417,424,293,293,293,293,33,426,419,418,425,300,300,300,300,33,427,420,419,426,301,301,301,301,33,428,421,420,427,302,302,302,302,33,429,422,421,428,303,303,303,303,33,430,423,422,429,304,304,304,304,33,298,288,423,430,305,305,305,305,33,430,465,346,298,162,162,162,162,33,429,464,465,430,163,163,163,163,33,428,463,464,429,164,164,164,164,33,427,462,463,428,165,165,165,165,33,426,461,462,427,166,166,166,166,33,425,460,461,426,167,167,167,167,33,479,485,460,425,168,168,168,168,33,474,480,396,382,292,292,292,292,33,384,398,397,383,169,169,169,169,33,385,399,398,384,170,170,170,170,33,386,400,399,385,171,171,171,171,33,387,401,400,386,172,172,172,172,33,388,402,401,387,173,173,173,173,33,236,259,402,388,174,174,174,174,33,473,476,390,376,175,175,175,175,33,376,390,391,377,134,134,134,134,33,377,391,392,378,176,176,176,176,33,378,392,393,379,177,177,177,177,33,379,393,394,380,178,178,178,178,33,380,394,395,381,179,179,179,179,33,381,395,249,226,180,180,180,180,33,481,482,438,431,276,276,276,276,33,433,440,439,432,257,257,257,257,33,434,441,440,433,257,257,257,257,33,435,442,441,434,306,306,306,306,33,436,443,442,435,307,307,307,307,33,437,444,443,436,308,308,308,308,33,308,316,444,437,309,309,309,309,33,484,487,490,452,257,257,257,257,33,454,447,446,453,310,310,310,310,33,455,448,447,454,311,311,311,311,33,456,449,448,455,312,312,312,312,33,457,450,449,456,313,313,313,313,33,458,451,450,457,314,314,314,314,33,336,326,451,458,315,315,315,315,33,477,483,446,411,192,192,192,192,33,411,446,447,412,193,193,193,193,33,412,447,448,413,316,316,316,316,33,413,448,449,414,195,195,195,195,33,414,449,450,415,317,317,317,317,33,415,450,451,416,318,318,318,318,33,416,451,326,278,198,198,198,198,33,486,485,459,466,276,276,276,276,33,468,461,460,467,257,257,257,257,33,469,462,461,468,257,257,257,257,33,470,463,462,469,257,257,257,257,33,471,464,463,470,257,257,257,257,33,472,465,464,471,319,319,319,319,33,356,346,465,472,320,320,320,320,33,480,486,466,396,292,292,292,292,33,398,468,467,397,169,169,169,169,33,399,469,468,398,204,204,204,204,33,400,470,469,399,205,205,205,205,33,401,471,470,400,172,172,172,172,33,402,472,471,401,321,321,321,321,33,259,356,472,402,174,174,174,174,33,397,467,486,480,206,206,206,206,33,467,460,485,486,257,257,257,257,33,410,445,483,477,208,208,208,208,32,446,483,488,322,322,322,32,487,484,453,257,257,257,32,446,488,487,323,323,323,32,453,446,487,324,324,324,33,432,439,482,481,257,257,257,257,33,375,389,476,473,208,208,208,208,33,383,397,480,474,212,212,212,212,33,424,459,485,479,208,208,208,208,33,425,418,478,479,325,325,325,325,33,418,453,484,478,214,214,214,214,33,411,404,475,477,326,326,326,326,33,404,432,481,475,327,327,327,327,33,389,438,482,476,208,208,208,208,33,489,493,492,488,217,217,217,217,33,488,483,445,489,328,328,328,328,33,488,492,491,487,218,218,218,218,33,487,491,494,490,219,219,219,219,32,417,452,490,220,220,220,32,494,382,396,225,225,225,32,396,466,459,223,223,223,32,396,459,424,329,329,329,32,417,490,494,222,222,222,32,494,396,424,330,330,330,32,494,424,417,331,331,331,32,438,389,375,227,227,227,32,493,489,445,231,231,231,32,493,445,410,229,229,229,32,431,438,375,230,230,230,32,493,410,403,332,332,332,32,403,431,375,228,228,228,32,375,493,403,333,333,333],"uvs":[],"vertices":[156.808,4,-42.988,164.932,4,-50.7141,156.808,0.999998,-42.988,79.1685,1,5.26306,89.9301,1,1.11191,100.475,1,-3.56229,110.778,1,-8.74826,120.814,0.999999,-14.4335,130.559,0.999999,-20.6044,139.989,0.999999,-27.246,149.082,0.999999,-34.3423,157.816,0.999998,-41.8762,165.993,0.999998,-49.6531,66.363,0.999999,-30.5264,75.3838,0.999999,-34.0061,84.223,0.999998,-37.9243,92.8594,0.999998,-42.2714,101.272,0.999998,-47.0371,109.441,0.999998,-52.2098,117.346,0.999997,-57.7771,124.968,0.999997,-63.7256,132.289,0.999997,-70.0409,139.115,0.999997,-76.5313,78.663,1,3.85031,89.3559,1,-0.274323,99.8334,1,-4.91867,110.07,1,-10.0715,120.042,0.999999,-15.7205,129.725,0.999999,-21.852,139.095,0.999999,-28.4512,148.13,0.999998,-35.5022,164.932,0.999998,-50.7141,75.9671,1,-3.68433,86.2935,1,-7.66759,96.412,0.999999,-12.1528,106.298,0.999999,-17.129,115.928,0.999999,-22.5844,125.279,0.999999,-28.5057,134.328,0.999998,-34.8788,143.054,0.999998,-41.6881,151.434,0.999998,-48.9174,159.274,0.999998,-56.3727,69.5643,0.999999,-21.5791,79.0204,0.999999,-25.2266,88.286,0.999999,-29.3338,97.339,0.999999,-33.8906,106.157,0.999998,-38.8862,114.72,0.999998,-44.3084,123.006,0.999998,-50.1443,130.997,0.999998,-56.3798,138.671,0.999997,-62.9997,145.835,0.999997,-69.8117,66.8684,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5679,93.5667,0.999998,-40.9481,102.043,0.999998,-45.7501,110.274,0.999998,-50.9622,118.239,0.999998,-56.5719,125.92,0.999997,-62.5657,133.297,0.999997,-68.9291,140.176,0.999997,-75.4703,78.663,4,3.85031,89.3559,4,-0.274323,99.8334,4,-4.91867,110.07,4,-10.0715,120.042,4,-15.7205,129.725,4,-21.852,139.095,4,-28.4512,148.13,4,-35.5022,79.1685,4,5.26306,89.9301,4,1.11191,100.475,4,-3.56229,110.778,4,-8.74826,120.814,4,-14.4335,130.559,4,-20.6044,139.989,4,-27.246,149.082,4,-34.3423,157.816,4,-41.8762,165.993,4,-49.6531,75.9671,4,-3.68433,86.2935,4,-7.66759,96.412,4,-12.1528,106.298,4,-17.129,115.928,4,-22.5844,125.279,4,-28.5057,134.328,4,-34.8788,143.054,4,-41.6881,151.434,4,-48.9174,159.274,4,-56.3727,69.5643,4,-21.5791,79.0204,4,-25.2266,88.286,4,-29.3338,97.339,4,-33.8906,106.157,4,-38.8862,114.72,4,-44.3084,123.006,4,-50.1443,130.997,4,-56.3798,138.671,4,-62.9997,145.835,4,-69.8117,66.8684,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5679,93.5667,4,-40.9481,102.043,4,-45.7501,110.274,4,-50.9622,118.239,4,-56.5719,125.92,4,-62.5657,133.297,4,-68.9291,140.176,4,-75.4703,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9243,92.8594,4,-42.2714,101.272,4,-47.0371,109.441,4,-52.2098,117.346,4,-57.7771,124.968,4,-63.7256,132.289,4,-70.0409,139.115,4,-76.5313,164.226,4,-64.1488,153.265,4,-75.109,156.801,4,-58.8455,147.962,4,-67.6843,133.998,-37.5119,-77.7434,0.24996,1,19,11.5305,1,18.717,23.0336,1,17.8685,34.4812,1,16.4565,45.8457,1,14.4846,57.0998,1,11.9575,68.2164,1,8.88113,0.250039,0.999999,-19.0114,9.66539,0.999999,-19.2487,19.3078,0.999999,-19.96,28.9038,0.999999,-21.1435,38.4301,0.999999,-22.7964,47.8638,0.999999,-24.9148,57.1823,0.999999,-27.4936,0.249963,1,17.4995,11.4568,1,17.2183,22.8865,1,16.3752,34.261,1,14.9723,45.553,1,13.013,56.7352,1,10.502,67.7808,1,7.44529,0.249979,1,9.49714,11.0642,1,9.22555,22.1021,1,8.41135,33.0868,1,7.05653,43.9918,1,5.16438,54.7908,1,2.7394,65.4578,1,-0.212544,0.250019,1,-9.50859,10.1317,1,-9.75728,20.2393,1,-10.5029,30.2982,0.999999,-11.7435,40.284,0.999999,-13.4762,50.1728,0.999999,-15.6968,59.9408,0.999999,-18.3999,0.250036,0.999999,-17.511,9.73901,0.999999,-17.7501,19.4549,0.999999,-18.4667,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,0.249963,4,17.4995,11.4568,4,17.2183,22.8865,4,16.3752,34.261,4,14.9723,45.553,4,13.013,56.7352,4,10.502,67.7808,4,7.44529,0.24996,4,19,11.5305,4,18.717,23.0336,4,17.8685,34.4812,4,16.4565,45.8457,4,14.4846,57.0998,4,11.9575,68.2164,4,8.88113,0.249979,4,9.49714,11.0642,4,9.22555,22.1021,4,8.41135,33.0868,4,7.05653,43.9918,4,5.16438,54.7908,4,2.7394,65.4578,4,-0.212545,0.250019,4,-9.50859,10.1317,4,-9.75728,20.2393,4,-10.5029,30.2982,4,-11.7435,40.284,4,-13.4762,50.1728,4,-15.6968,59.9408,4,-18.3999,0.250036,4,-17.511,9.73901,4,-17.7501,19.4549,4,-18.4667,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,8.99996,1,17.4995,8.99996,1,19,8.99998,1,9.49714,9.00002,1,-9.50859,9.00004,0.999999,-17.511,9.00004,0.999999,-19.0114,8.99996,4,17.4995,8.99996,4,19,8.99998,4,9.49714,9.00002,4,-9.50859,9.00004,4,-17.511,9.00004,4,-19.0114,9.25001,4,-8,9.24999,4,8,0.249993,4,6.5,0.25001,4,-6.5,192.513,-37.5119,-212.989,79.1685,2.30056e-7,5.26306,89.9301,4.8603e-8,1.11191,100.475,-1.55712e-7,-3.56229,110.778,-3.82399e-7,-8.74826,120.814,-6.30909e-7,-14.4335,130.559,-9.00646e-7,-20.6044,139.989,-0.00000119096,-27.246,149.082,-0.00000150115,-34.3423,157.816,-0.00000183047,-41.8762,165.993,-0.00000217041,-49.6531,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9243,92.8594,-0.00000184774,-42.2714,101.272,-0.00000205606,-47.0371,109.441,-0.00000228216,-52.2098,117.346,-0.00000252552,-57.7771,124.968,-0.00000278553,-63.7256,132.289,-0.00000306158,-70.0409,139.115,-0.00000334529,-76.5313,156.808,-4,-42.988,164.932,-4,-50.7141,156.808,-1,-42.988,79.1685,-1,5.26306,89.9301,-1,1.11191,100.475,-1,-3.56229,110.778,-1,-8.74826,120.814,-1,-14.4335,130.559,-1,-20.6044,139.989,-1,-27.246,149.082,-1,-34.3423,157.816,-1,-41.8762,165.993,-1,-49.6531,66.363,-1,-30.5264,75.3838,-1,-34.0061,84.223,-1,-37.9243,92.8594,-1,-42.2714,101.272,-1,-47.0371,109.441,-1,-52.2098,117.346,-1,-57.7771,124.968,-1,-63.7256,132.289,-1,-70.0409,139.115,-1,-76.5313,78.663,-1,3.85031,89.3559,-1,-0.274322,99.8334,-1,-4.91867,110.07,-1,-10.0715,120.042,-1,-15.7205,129.725,-1,-21.852,139.095,-1,-28.4512,148.13,-1,-35.5022,164.932,-1,-50.7141,75.9671,-1,-3.68433,86.2935,-1,-7.66759,96.412,-1,-12.1528,106.298,-1,-17.129,115.928,-1,-22.5844,125.279,-1,-28.5057,134.328,-1,-34.8788,143.054,-1,-41.6881,151.434,-1,-48.9174,159.274,-1,-56.3727,69.5643,-1,-21.5791,79.0204,-1,-25.2266,88.286,-1,-29.3338,97.339,-1,-33.8906,106.157,-1,-38.8862,114.72,-1,-44.3084,123.006,-1,-50.1443,130.997,-1,-56.3798,138.671,-1,-62.9997,145.835,-1,-69.8117,66.8684,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5679,93.5667,-1,-40.9481,102.043,-1,-45.7501,110.274,-1,-50.9622,118.239,-1,-56.5719,125.92,-1,-62.5657,133.297,-1,-68.9291,140.176,-1,-75.4703,78.663,-4,3.85031,89.3559,-4,-0.274322,99.8334,-4,-4.91867,110.07,-4,-10.0715,120.042,-4,-15.7205,129.725,-4,-21.852,139.095,-4,-28.4512,148.13,-4,-35.5022,79.1685,-4,5.26306,89.9301,-4,1.11191,100.475,-4,-3.56229,110.778,-4,-8.74826,120.814,-4,-14.4335,130.559,-4,-20.6044,139.989,-4,-27.246,149.082,-4,-34.3423,157.816,-4,-41.8762,165.993,-4,-49.6531,75.9671,-4,-3.68433,86.2935,-4,-7.66759,96.412,-4,-12.1528,106.298,-4,-17.129,115.928,-4,-22.5844,125.279,-4,-28.5057,134.328,-4,-34.8788,143.054,-4,-41.6881,151.434,-4,-48.9174,159.274,-4,-56.3727,69.5643,-4,-21.5791,79.0204,-4,-25.2266,88.286,-4,-29.3338,97.339,-4,-33.8906,106.157,-4,-38.8862,114.72,-4,-44.3084,123.006,-4,-50.1443,130.997,-4,-56.3798,138.671,-4,-62.9997,145.835,-4,-69.8117,66.8684,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5679,93.5667,-4,-40.9481,102.043,-4,-45.7501,110.274,-4,-50.9622,118.239,-4,-56.5719,125.92,-4,-62.5657,133.297,-4,-68.9291,140.176,-4,-75.4703,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9243,92.8594,-4,-42.2714,101.272,-4,-47.0371,109.441,-4,-52.2098,117.346,-4,-57.7771,124.968,-4,-63.7256,132.289,-4,-70.0409,139.115,-4,-76.5313,164.226,-4,-64.1488,153.265,-4,-75.109,156.801,-4,-58.8455,147.962,-4,-67.6843,164.226,-0.00000280403,-64.1488,153.265,-0.00000328312,-75.109,156.801,-0.00000257222,-58.8455,147.962,-0.00000295858,-67.6843,133.998,37.5119,-77.7434,0.24996,8.30516e-7,19,11.5305,8.18144e-7,18.717,23.0336,7.81055e-7,17.8685,34.4812,7.19338e-7,16.4565,45.8457,6.33144e-7,14.4846,57.0998,5.22678e-7,11.9575,68.2164,3.88207e-7,8.88113,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,0.24996,-0.999999,19,11.5305,-0.999999,18.717,23.0336,-0.999999,17.8685,34.4812,-0.999999,16.4565,45.8457,-0.999999,14.4846,57.0998,-0.999999,11.9575,68.2164,-1,8.88113,0.250039,-1,-19.0114,9.66539,-1,-19.2487,19.3078,-1,-19.96,28.9038,-1,-21.1435,38.4301,-1,-22.7964,47.8638,-1,-24.9148,57.1823,-1,-27.4936,0.249963,-0.999999,17.4995,11.4568,-0.999999,17.2183,22.8865,-0.999999,16.3752,34.261,-0.999999,14.9723,45.553,-0.999999,13.013,56.7352,-1,10.502,67.7808,-1,7.44529,0.249979,-1,9.49714,11.0642,-1,9.22555,22.1021,-1,8.41135,33.0868,-1,7.05653,43.9918,-1,5.16438,54.7908,-1,2.7394,65.4578,-1,-0.212544,0.250019,-1,-9.50859,10.1317,-1,-9.75728,20.2393,-1,-10.5029,30.2982,-1,-11.7435,40.284,-1,-13.4762,50.1728,-1,-15.6968,59.9408,-1,-18.3999,0.250036,-1,-17.511,9.73901,-1,-17.7501,19.4549,-1,-18.4667,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,0.249963,-4,17.4995,11.4568,-4,17.2183,22.8865,-4,16.3752,34.261,-4,14.9723,45.553,-4,13.013,56.7352,-4,10.502,67.7808,-4,7.44529,0.24996,-4,19,11.5305,-4,18.717,23.0336,-4,17.8685,34.4812,-4,16.4565,45.8457,-4,14.4846,57.0998,-4,11.9575,68.2164,-4,8.88113,0.249979,-4,9.49714,11.0642,-4,9.22555,22.1021,-4,8.41135,33.0868,-4,7.05653,43.9918,-4,5.16438,54.7908,-4,2.7394,65.4578,-4,-0.212544,0.250019,-4,-9.50859,10.1317,-4,-9.75728,20.2393,-4,-10.5029,30.2982,-4,-11.7435,40.284,-4,-13.4762,50.1728,-4,-15.6968,59.9408,-4,-18.3999,0.250036,-4,-17.511,9.73901,-4,-17.7501,19.4549,-4,-18.4667,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,8.99996,8.30516e-7,19,9.00004,-8.31017e-7,-19.0114,8.99996,-0.999999,17.4995,8.99996,-0.999999,19,8.99998,-1,9.49714,9.00002,-1,-9.50859,9.00004,-1,-17.511,9.00004,-1,-19.0114,8.99996,-4,17.4995,8.99996,-4,19,8.99998,-4,9.49714,9.00002,-4,-9.50859,9.00004,-4,-17.511,9.00004,-4,-19.0114,9.25001,-4,-8,9.24999,-4,8,0.249993,-4,6.5,0.25001,-4,-6.5,9.25001,-3.49691e-7,-8,9.24999,3.49691e-7,8,0.249993,2.84124e-7,6.5,0.25001,-2.84124e-7,-6.5,192.513,37.5119,-212.989],"metadata":{"generator":"io_three","normals":334,"uvs":0,"vertices":496,"version":3,"faces":526,"type":"Geometry"}},"curve_outer":{"uvs":[],"vertices":[0.249976,1,17.5,14.401,1,17.1465,28.7677,1,16.0868,43.0651,1,14.3233,57.2588,1,11.8605,71.3145,1,8.70423,85.1984,1,4.86203,98.8771,1,0.343235,112.318,1,-4.84133,125.487,1,-10.6791,138.355,0.999999,-17.1561,150.889,0.999999,-24.2567,163.06,0.999999,-31.9637,174.838,0.999998,-40.2587,186.195,0.999998,-49.1215,197.103,0.999997,-58.531,207.359,0.999997,-68.2875,0.249975,1,19,14.4746,1,18.6447,28.9147,1,17.5795,43.2852,1,15.8071,57.5514,1,13.3317,71.6789,1,10.1593,85.6338,1,6.29746,99.3824,1,1.75556,112.892,1,-3.4555,126.129,1,-9.32311,139.062,0.999999,-15.8332,151.66,0.999999,-22.9701,163.893,0.999999,-30.7165,175.731,0.999998,-39.0538,187.146,0.999998,-47.962,198.11,0.999997,-57.4195,208.42,0.999997,-67.2269,0.249985,1,9.5,14.0085,1,9.15613,27.9836,1,8.12528,41.8913,1,6.40991,55.6981,1,4.01422,69.3706,1,0.943973,82.8761,1,-2.79348,96.1819,1,-7.18911,109.256,0.999999,-12.2324,122.067,0.999999,-17.911,134.584,0.999999,-24.2115,146.776,0.999999,-31.1185,158.615,0.999998,-38.6155,170.072,0.999998,-46.6843,181.119,0.999998,-55.3056,191.73,0.999997,-64.4586,201.702,0.999997,-73.9444,0.250007,1,-9.5,13.0762,1,-9.82098,26.1212,1,-10.7832,39.1034,0.999999,-12.3844,51.9914,0.999999,-14.6207,64.7541,0.999999,-17.4866,77.3607,0.999999,-20.9754,89.781,0.999999,-25.0784,101.985,0.999999,-29.7861,113.943,0.999998,-35.0868,125.627,0.999998,-40.968,137.008,0.999998,-47.4153,148.06,0.999998,-54.4134,158.754,0.999997,-61.9453,169.066,0.999997,-69.9928,178.971,0.999997,-78.5366,188.267,0.999996,-87.3794,0.250017,0.999999,-17.5,12.6837,0.999999,-17.8113,25.3371,0.999999,-18.7447,37.9295,0.999999,-20.2978,50.4307,0.999999,-22.467,62.8102,0.999999,-25.2469,75.0385,0.999999,-28.6309,87.0859,0.999999,-32.6108,98.9236,0.999998,-37.1771,110.523,0.999998,-42.3187,121.856,0.999998,-48.0233,132.896,0.999998,-54.2772,143.615,0.999997,-61.0651,153.988,0.999997,-68.3709,163.991,0.999997,-76.1769,173.598,0.999996,-84.4643,182.61,0.999996,-93.0362,0.250019,0.999999,-19,12.6101,0.999999,-19.3095,25.1901,0.999999,-20.2375,37.7094,0.999999,-21.7816,50.138,0.999999,-23.9382,62.4458,0.999999,-26.7019,74.603,0.999999,-30.0663,86.5806,0.999999,-34.0231,98.3496,0.999998,-38.563,109.882,0.999998,-43.6747,121.149,0.999998,-49.3462,132.124,0.999998,-55.5638,142.782,0.999997,-62.3123,153.095,0.999997,-69.5757,163.039,0.999997,-77.3364,172.591,0.999996,-85.5757,181.55,0.999996,-94.0969,0.250017,0.999999,-17.5,12.6837,0.999999,-17.8113,25.3371,0.999999,-18.7447,37.9295,0.999999,-20.2978,50.4307,0.999999,-22.467,62.8102,0.999999,-25.2469,75.0385,0.999999,-28.6309,87.0859,0.999999,-32.6108,98.9236,0.999998,-37.1771,110.523,0.999998,-42.3187,121.856,0.999998,-48.0233,132.896,0.999998,-54.2772,143.615,0.999997,-61.0651,153.988,0.999997,-68.3709,163.991,0.999997,-76.1769,173.598,0.999996,-84.4643,182.61,0.999996,-93.0362,0.250019,0.999999,-19,12.6101,0.999999,-19.3095,25.1901,0.999999,-20.2375,37.7094,0.999999,-21.7816,50.138,0.999999,-23.9382,62.4458,0.999999,-26.7019,74.603,0.999999,-30.0663,86.5806,0.999999,-34.0231,98.3496,0.999998,-38.563,109.882,0.999998,-43.6747,121.149,0.999998,-49.3462,132.124,0.999998,-55.5638,142.782,0.999997,-62.3123,153.095,0.999997,-69.5757,163.039,0.999997,-77.3364,172.591,0.999996,-85.5757,181.55,0.999996,-94.0969,0.249976,4,17.5,14.401,4,17.1465,28.7677,4,16.0868,43.0651,4,14.3233,57.2588,4,11.8605,71.3145,4,8.70423,85.1984,4,4.86203,98.8771,4,0.343235,112.318,4,-4.84133,125.487,4,-10.6791,138.355,4,-17.1561,150.889,4,-24.2567,163.06,4,-31.9637,174.838,4,-40.2587,186.195,4,-49.1215,197.103,4,-58.531,207.359,4,-68.2875,0.249975,4,19,14.4746,4,18.6447,28.9147,4,17.5795,43.2852,4,15.8071,57.5514,4,13.3317,71.6789,4,10.1593,85.6338,4,6.29746,99.3824,4,1.75556,112.892,4,-3.4555,126.129,4,-9.32311,139.062,4,-15.8332,151.66,4,-22.9701,163.893,4,-30.7165,175.731,4,-39.0538,187.146,4,-47.962,198.11,4,-57.4195,208.42,4,-67.2269,0.249985,4,9.5,14.0085,4,9.15613,27.9836,4,8.12528,41.8913,4,6.40991,55.6981,4,4.01422,69.3706,4,0.943973,82.8761,4,-2.79348,96.1819,4,-7.18911,109.256,4,-12.2324,122.067,4,-17.911,134.584,4,-24.2115,146.776,4,-31.1185,158.615,4,-38.6155,170.072,4,-46.6843,181.119,4,-55.3056,191.73,4,-64.4586,201.702,4,-73.9444,0.250007,4,-9.5,13.0762,4,-9.82098,26.1212,4,-10.7832,39.1034,4,-12.3844,51.9914,4,-14.6207,64.7541,4,-17.4866,77.3607,4,-20.9754,89.781,4,-25.0784,101.985,4,-29.7861,113.943,4,-35.0868,125.627,4,-40.968,137.008,4,-47.4153,148.06,4,-54.4134,158.754,4,-61.9453,169.066,4,-69.9928,178.971,4,-78.5366,188.267,4,-87.3794,0.250017,4,-17.5,12.6837,4,-17.8113,25.3371,4,-18.7447,37.9295,4,-20.2978,50.4307,4,-22.467,62.8102,4,-25.2469,75.0385,4,-28.6309,87.0859,4,-32.6108,98.9236,4,-37.1771,110.523,4,-42.3187,121.856,4,-48.0233,132.896,4,-54.2772,143.615,4,-61.0651,153.988,4,-68.3709,163.991,4,-76.1769,173.598,4,-84.4643,182.61,4,-93.0362,0.250019,4,-19,12.6101,4,-19.3095,25.1901,4,-20.2375,37.7094,4,-21.7816,50.138,4,-23.9382,62.4458,4,-26.7019,74.603,4,-30.0663,86.5806,4,-34.0231,98.3496,4,-38.563,109.882,4,-43.6747,121.149,4,-49.3462,132.124,4,-55.5638,142.782,4,-62.3123,153.095,4,-69.5757,163.039,4,-77.3364,172.591,4,-85.5757,181.55,4,-94.0969,199.227,4,-76.4193,190.742,4,-84.9045,199.227,4,-76.4193,190.742,4,-84.9045,206.652,4,-81.7226,196.046,4,-92.3292,0.25,4,-6.5,0.249993,4,6.5,9.24999,4,8,9.25,4,-8,0.249975,8.30516e-7,19,14.4746,8.14985e-7,18.6447,28.9147,7.68426e-7,17.5795,43.2852,6.9095e-7,15.8071,57.5514,5.82747e-7,13.3317,71.6789,4.44076e-7,10.1593,85.6338,2.75271e-7,6.29746,99.3824,7.67379e-8,1.75556,112.892,-1.51045e-7,-3.4555,126.129,-4.07526e-7,-9.32311,139.062,-6.92092e-7,-15.8332,151.66,-0.00000100405,-22.9701,163.893,-0.00000134266,-30.7165,175.731,-0.0000017071,-39.0538,187.146,-0.00000209649,-47.962,198.11,-0.00000250989,-57.4195,208.42,-0.00000293858,-67.2269,0.249976,7.64949e-7,17.5,207.359,-0.00000298494,-68.2875,0.249985,4.15258e-7,9.5,201.702,-0.00000323221,-73.9444,0.250017,-7.64949e-7,-17.5,12.6837,-7.78558e-7,-17.8113,25.3371,-8.19358e-7,-18.7447,37.9295,-8.87247e-7,-20.2978,50.4307,-9.82063e-7,-22.467,62.8102,-0.00000110358,-25.2469,75.0385,-0.0000012515,-28.6309,87.0859,-0.00000142546,-32.6108,98.9236,-0.00000162506,-37.1771,110.523,-0.00000184981,-42.3187,121.856,-0.00000209917,-48.0233,132.896,-0.00000237253,-54.2772,143.615,-0.00000266924,-61.0651,153.988,-0.00000298859,-68.3709,163.991,-0.0000033298,-76.1769,173.598,-0.00000369205,-84.4643,182.61,-0.00000406674,-93.0362,0.250007,-4.15258e-7,-9.5,188.267,-0.00000381947,-87.3794,0.250019,-8.30516e-7,-19,12.6101,-8.44047e-7,-19.3095,25.1901,-8.84609e-7,-20.2375,37.7094,-9.52104e-7,-21.7816,50.138,-0.00000104637,-23.9382,62.4458,-0.00000116718,-26.7019,74.603,-0.00000131424,-30.0663,86.5806,-0.0000014872,-34.0231,98.3496,-0.00000168564,-38.563,109.882,-0.00000190908,-43.6747,121.149,-0.00000215699,-49.3462,132.124,-0.00000242877,-55.5638,142.782,-0.00000272376,-62.3123,153.095,-0.00000304125,-69.5757,163.039,-0.00000338048,-77.3364,172.591,-0.00000374063,-85.5757,181.55,-0.00000411311,-94.0969,0.250017,-7.64949e-7,-17.5,12.6837,-7.78558e-7,-17.8113,25.3371,-8.19358e-7,-18.7447,37.9295,-8.87247e-7,-20.2978,50.4307,-9.82063e-7,-22.467,62.8102,-0.00000110358,-25.2469,75.0385,-0.0000012515,-28.6309,87.0859,-0.00000142546,-32.6108,98.9236,-0.00000162506,-37.1771,110.523,-0.00000184981,-42.3187,121.856,-0.00000209917,-48.0233,132.896,-0.00000237253,-54.2772,143.615,-0.00000266924,-61.0651,153.988,-0.00000298859,-68.3709,163.991,-0.0000033298,-76.1769,173.598,-0.00000369205,-84.4643,182.61,-0.00000406674,-93.0362,0.250019,-8.30516e-7,-19,12.6101,-8.44047e-7,-19.3095,25.1901,-8.84609e-7,-20.2375,37.7094,-9.52104e-7,-21.7816,50.138,-0.00000104637,-23.9382,62.4458,-0.00000116718,-26.7019,74.603,-0.00000131424,-30.0663,86.5806,-0.0000014872,-34.0231,98.3496,-0.00000168564,-38.563,109.882,-0.00000190908,-43.6747,121.149,-0.00000215699,-49.3462,132.124,-0.00000242877,-55.5638,142.782,-0.00000272376,-62.3123,153.095,-0.00000304125,-69.5757,163.039,-0.00000338048,-77.3364,172.591,-0.00000374063,-85.5757,181.55,-0.00000411311,-94.0969,0.249976,-0.999999,17.5,14.401,-0.999999,17.1465,28.7677,-0.999999,16.0868,43.0651,-0.999999,14.3233,57.2588,-0.999999,11.8605,71.3145,-1,8.70423,85.1984,-1,4.86203,98.8771,-1,0.343236,112.318,-1,-4.84133,125.487,-1,-10.6791,138.355,-1,-17.1561,150.889,-1,-24.2567,163.06,-1,-31.9637,174.838,-1,-40.2587,186.195,-1,-49.1215,197.103,-1,-58.531,207.359,-1,-68.2875,0.249975,-0.999999,19,14.4746,-0.999999,18.6447,28.9147,-0.999999,17.5795,43.2852,-0.999999,15.8071,57.5514,-0.999999,13.3317,71.6789,-1,10.1593,85.6338,-1,6.29746,99.3824,-1,1.75556,112.892,-1,-3.4555,126.129,-1,-9.32311,139.062,-1,-15.8332,151.66,-1,-22.9701,163.893,-1,-30.7165,175.731,-1,-39.0538,187.146,-1,-47.962,198.11,-1,-57.4195,208.42,-1,-67.2269,0.249985,-1,9.5,14.0085,-1,9.15613,27.9836,-1,8.12528,41.8913,-1,6.40991,55.6981,-1,4.01422,69.3706,-1,0.943973,82.8761,-1,-2.79348,96.1819,-1,-7.18911,109.256,-1,-12.2324,122.067,-1,-17.911,134.584,-1,-24.2115,146.776,-1,-31.1185,158.615,-1,-38.6155,170.072,-1,-46.6843,181.119,-1,-55.3056,191.73,-1,-64.4586,201.702,-1,-73.9444,0.250007,-1,-9.5,13.0762,-1,-9.82098,26.1212,-1,-10.7832,39.1034,-1,-12.3844,51.9914,-1,-14.6207,64.7541,-1,-17.4866,77.3607,-1,-20.9754,89.781,-1,-25.0784,101.985,-1,-29.7861,113.943,-1,-35.0868,125.627,-1,-40.968,137.008,-1,-47.4153,148.06,-1,-54.4134,158.754,-1,-61.9453,169.066,-1,-69.9928,178.971,-1,-78.5366,188.267,-1,-87.3794,0.250017,-1,-17.5,12.6837,-1,-17.8113,25.3371,-1,-18.7447,37.9295,-1,-20.2978,50.4307,-1,-22.467,62.8102,-1,-25.2469,75.0385,-1,-28.6309,87.0859,-1,-32.6108,98.9236,-1,-37.1771,110.523,-1,-42.3187,121.856,-1,-48.0233,132.896,-1,-54.2772,143.615,-1,-61.0651,153.988,-1,-68.3709,163.991,-1,-76.1769,173.598,-1,-84.4643,182.61,-1,-93.0362,0.250019,-1,-19,12.6101,-1,-19.3095,25.1901,-1,-20.2375,37.7094,-1,-21.7816,50.138,-1,-23.9382,62.4458,-1,-26.7019,74.603,-1,-30.0663,86.5806,-1,-34.0231,98.3496,-1,-38.563,109.882,-1,-43.6747,121.149,-1,-49.3462,132.124,-1,-55.5638,142.782,-1,-62.3123,153.095,-1,-69.5757,163.039,-1,-77.3364,172.591,-1,-85.5757,181.55,-1,-94.0969,0.250017,-1,-17.5,12.6837,-1,-17.8113,25.3371,-1,-18.7447,37.9295,-1,-20.2978,50.4307,-1,-22.467,62.8102,-1,-25.2469,75.0385,-1,-28.6309,87.0859,-1,-32.6108,98.9236,-1,-37.1771,110.523,-1,-42.3187,121.856,-1,-48.0233,132.896,-1,-54.2772,143.615,-1,-61.0651,153.988,-1,-68.3709,163.991,-1,-76.1769,173.598,-1,-84.4643,182.61,-1,-93.0362,0.250019,-1,-19,12.6101,-1,-19.3095,25.1901,-1,-20.2375,37.7094,-1,-21.7816,50.138,-1,-23.9382,62.4458,-1,-26.7019,74.603,-1,-30.0663,86.5806,-1,-34.0231,98.3496,-1,-38.563,109.882,-1,-43.6747,121.149,-1,-49.3462,132.124,-1,-55.5638,142.782,-1,-62.3123,153.095,-1,-69.5757,163.039,-1,-77.3364,172.591,-1,-85.5757,181.55,-1,-94.0969,0.249976,-4,17.5,14.401,-4,17.1465,28.7677,-4,16.0868,43.0651,-4,14.3233,57.2588,-4,11.8605,71.3145,-4,8.70423,85.1984,-4,4.86203,98.8771,-4,0.343236,112.318,-4,-4.84133,125.487,-4,-10.6791,138.355,-4,-17.1561,150.889,-4,-24.2567,163.06,-4,-31.9637,174.838,-4,-40.2587,186.195,-4,-49.1215,197.103,-4,-58.531,207.359,-4,-68.2875,0.249975,-4,19,14.4746,-4,18.6447,28.9147,-4,17.5795,43.2852,-4,15.8071,57.5514,-4,13.3317,71.6789,-4,10.1593,85.6338,-4,6.29746,99.3824,-4,1.75556,112.892,-4,-3.4555,126.129,-4,-9.32311,139.062,-4,-15.8332,151.66,-4,-22.9701,163.893,-4,-30.7165,175.731,-4,-39.0538,187.146,-4,-47.962,198.11,-4,-57.4195,208.42,-4,-67.2269,0.249985,-4,9.5,14.0085,-4,9.15613,27.9836,-4,8.12528,41.8913,-4,6.40991,55.6981,-4,4.01422,69.3706,-4,0.943973,82.8761,-4,-2.79348,96.1819,-4,-7.18911,109.256,-4,-12.2324,122.067,-4,-17.911,134.584,-4,-24.2115,146.776,-4,-31.1185,158.615,-4,-38.6155,170.072,-4,-46.6843,181.119,-4,-55.3056,191.73,-4,-64.4586,201.702,-4,-73.9444,0.250007,-4,-9.5,13.0762,-4,-9.82098,26.1212,-4,-10.7832,39.1034,-4,-12.3844,51.9914,-4,-14.6207,64.7541,-4,-17.4866,77.3607,-4,-20.9754,89.781,-4,-25.0784,101.985,-4,-29.7861,113.943,-4,-35.0868,125.627,-4,-40.968,137.008,-4,-47.4153,148.06,-4,-54.4134,158.754,-4,-61.9453,169.066,-4,-69.9928,178.971,-4,-78.5366,188.267,-4,-87.3794,0.250017,-4,-17.5,12.6837,-4,-17.8113,25.3371,-4,-18.7447,37.9295,-4,-20.2978,50.4307,-4,-22.467,62.8102,-4,-25.2469,75.0385,-4,-28.6309,87.0859,-4,-32.6108,98.9236,-4,-37.1771,110.523,-4,-42.3187,121.856,-4,-48.0233,132.896,-4,-54.2772,143.615,-4,-61.0651,153.988,-4,-68.3709,163.991,-4,-76.1769,173.598,-4,-84.4643,182.61,-4,-93.0362,0.250019,-4,-19,12.6101,-4,-19.3095,25.1901,-4,-20.2375,37.7094,-4,-21.7816,50.138,-4,-23.9382,62.4458,-4,-26.7019,74.603,-4,-30.0663,86.5806,-4,-34.0231,98.3496,-4,-38.563,109.882,-4,-43.6747,121.149,-4,-49.3462,132.124,-4,-55.5638,142.782,-4,-62.3123,153.095,-4,-69.5757,163.039,-4,-77.3364,172.591,-4,-85.5757,181.55,-4,-94.0969,199.227,-0.00000334039,-76.4193,199.227,-4,-76.4193,190.742,-0.00000371129,-84.9045,190.742,-4,-84.9045,199.227,-4,-76.4193,199.227,-0.00000334039,-76.4193,190.742,-0.00000371129,-84.9045,190.742,-4,-84.9045,206.652,-4,-81.7226,206.652,-0.00000357221,-81.7226,196.046,-0.00000403584,-92.3292,196.046,-4,-92.3292,0.25,-2.84124e-7,-6.5,0.25,-4,-6.5,0.249993,-4,6.5,0.249992,2.84124e-7,6.5,9.24999,3.49691e-7,8,9.25,-3.49691e-7,-8,9.24999,-4,8,9.25,-4,-8],"faces":[33,32,33,169,168,0,0,0,0,33,31,32,168,167,1,1,1,1,33,30,31,167,166,2,2,2,2,33,29,30,166,165,3,3,3,3,33,28,29,165,164,4,4,4,4,33,27,28,164,163,5,5,5,5,33,26,27,163,162,6,6,6,6,33,25,26,162,161,7,7,7,7,33,24,25,161,160,8,8,8,8,33,23,24,160,159,9,9,9,9,33,22,23,159,158,10,10,10,10,33,21,22,158,157,11,11,11,11,33,20,21,157,156,12,12,12,12,33,19,20,156,155,13,13,13,13,33,18,19,155,154,14,14,14,14,33,17,18,154,153,15,15,15,15,33,16,15,151,152,16,16,16,16,33,15,14,150,151,17,17,17,17,33,14,13,149,150,18,18,18,18,33,13,12,148,149,19,19,19,19,33,12,11,147,148,20,20,20,20,33,11,10,146,147,21,21,21,21,33,10,9,145,146,22,22,22,22,33,9,8,144,145,23,23,23,23,33,0,1,35,34,24,24,24,24,33,1,2,36,35,25,25,25,25,33,2,3,37,36,26,26,26,26,33,3,4,38,37,27,27,27,27,33,4,5,39,38,28,28,28,28,33,5,6,40,39,29,29,29,29,33,6,7,41,40,30,30,30,30,33,7,8,42,41,31,31,31,31,33,8,9,43,42,32,32,32,32,33,9,10,44,43,33,33,33,33,33,10,11,45,44,34,34,34,34,33,11,12,46,45,35,35,35,35,33,12,13,47,46,36,36,36,36,33,13,14,48,47,37,37,37,37,33,14,15,49,48,38,38,38,38,33,15,16,50,49,39,39,39,39,33,67,66,202,203,40,40,40,40,33,66,65,201,202,41,41,41,41,33,65,64,200,201,42,42,42,42,33,64,63,199,200,43,43,43,43,33,63,62,198,199,44,44,44,44,33,62,61,197,198,45,45,45,45,33,61,60,196,197,46,46,46,46,33,60,59,195,196,47,47,47,47,33,59,58,194,195,48,48,48,48,33,58,57,193,194,49,49,49,49,33,57,56,192,193,50,50,50,50,33,56,55,191,192,51,51,51,51,33,55,54,190,191,52,52,52,52,33,54,53,189,190,53,53,53,53,33,53,52,188,189,54,54,54,54,33,52,51,187,188,55,55,55,55,33,69,68,51,52,56,56,56,56,33,70,69,52,53,57,57,57,57,33,71,70,53,54,58,58,58,58,33,72,71,54,55,59,59,59,59,33,73,72,55,56,60,60,60,60,33,74,73,56,57,61,61,61,61,33,75,74,57,58,62,62,62,62,33,76,75,58,59,63,63,63,63,33,77,76,59,60,64,64,64,64,33,78,77,60,61,65,65,65,65,33,79,78,61,62,66,66,66,66,33,80,79,62,63,67,67,67,67,33,81,80,63,64,68,68,68,68,33,82,81,64,65,69,69,69,69,33,83,82,65,66,70,70,70,70,33,84,83,66,67,71,71,71,71,33,101,100,236,237,72,72,72,72,33,100,99,235,236,73,73,73,73,33,99,98,234,235,74,74,74,74,33,98,97,233,234,75,75,75,75,33,97,96,232,233,76,76,76,76,33,96,95,231,232,77,77,77,77,33,95,94,230,231,78,78,78,78,33,94,93,229,230,79,79,79,79,33,93,92,228,229,80,80,80,80,33,92,91,227,228,81,81,81,81,33,91,90,226,227,82,82,82,82,33,90,89,225,226,83,83,83,83,33,89,88,224,225,84,84,84,84,33,88,87,223,224,85,85,85,85,33,87,86,222,223,86,86,86,86,33,85,86,120,119,87,87,87,87,33,86,87,121,120,87,87,87,87,33,87,88,122,121,87,87,87,87,33,88,89,123,122,87,87,87,87,33,89,90,124,123,87,87,87,87,33,90,91,125,124,87,87,87,87,33,91,92,126,125,87,87,87,87,33,92,93,127,126,87,87,87,87,33,93,94,128,127,87,87,87,87,33,94,95,129,128,87,87,87,87,33,95,96,130,129,87,87,87,87,33,96,97,131,130,87,87,87,87,33,97,98,132,131,87,87,87,87,33,98,99,133,132,87,87,87,87,33,99,100,134,133,87,87,87,87,33,100,101,135,134,87,87,87,87,33,69,68,102,103,87,87,87,87,33,70,69,103,104,87,87,87,87,33,71,70,104,105,87,87,87,87,33,72,71,105,106,87,87,87,87,33,73,72,106,107,87,87,87,87,33,74,73,107,108,87,87,87,87,33,75,74,108,109,87,87,87,87,33,76,75,109,110,87,87,87,87,33,77,76,110,111,87,87,87,87,33,78,77,111,112,87,87,87,87,33,79,78,112,113,87,87,87,87,33,80,79,113,114,87,87,87,87,33,81,80,114,115,87,87,87,87,33,82,81,115,116,87,87,87,87,33,83,82,116,117,87,87,87,87,33,84,83,117,118,87,87,87,87,33,248,249,18,17,88,88,88,88,33,249,250,19,18,89,89,89,89,33,250,251,20,19,90,90,90,90,33,251,252,21,20,91,91,91,91,33,252,253,22,21,92,92,92,92,33,253,254,23,22,93,93,93,93,33,254,255,24,23,94,94,94,94,33,328,327,124,125,95,95,95,95,33,255,256,25,24,96,96,96,96,33,329,328,125,126,97,97,97,97,33,330,329,126,127,80,80,80,80,33,256,257,26,25,7,7,7,7,33,331,330,127,128,98,98,98,98,33,332,331,128,129,78,78,78,78,33,257,258,27,26,6,6,6,6,33,333,332,129,130,99,99,99,99,33,334,333,130,131,100,100,100,100,33,258,259,28,27,101,101,101,101,33,335,334,131,132,102,102,102,102,33,336,335,132,133,74,74,74,74,33,259,260,29,28,4,4,4,4,33,337,336,133,134,103,103,103,103,33,338,337,134,135,72,72,72,72,33,260,261,30,29,104,104,104,104,33,261,262,31,30,2,2,2,2,33,262,263,32,31,105,105,105,105,33,263,264,33,32,0,0,0,0,32,264,266,268,106,106,106,32,268,577,238,107,107,107,32,238,186,50,107,107,107,32,16,152,169,108,108,108,32,268,238,50,107,107,107,32,16,169,33,108,108,108,32,268,50,16,109,109,109,32,33,264,268,110,110,110,32,268,16,33,111,111,111,33,323,322,119,120,112,112,112,112,33,324,323,120,121,86,86,86,86,33,325,324,121,122,113,113,113,113,33,326,325,122,123,114,114,114,114,33,327,326,123,124,115,115,115,115,33,153,154,137,136,116,116,116,116,33,154,155,138,137,117,117,117,117,33,155,156,139,138,118,118,118,118,33,156,157,140,139,119,119,119,119,33,157,158,141,140,119,119,119,119,33,158,159,142,141,120,120,120,120,33,159,160,143,142,121,121,121,121,33,160,161,144,143,122,122,122,122,33,161,162,145,144,123,123,123,123,33,162,163,146,145,124,124,124,124,33,163,164,147,146,125,125,125,125,33,164,165,148,147,126,126,126,126,33,165,166,149,148,127,127,127,127,33,166,167,150,149,128,128,128,128,33,167,168,151,150,129,129,129,129,33,168,169,152,151,130,130,130,130,33,1,0,136,137,131,131,131,131,33,2,1,137,138,132,132,132,132,33,3,2,138,139,133,133,133,133,33,4,3,139,140,134,134,134,134,33,5,4,140,141,135,135,135,135,33,6,5,141,142,136,136,136,136,33,7,6,142,143,49,49,49,49,33,8,7,143,144,137,137,137,137,33,171,172,189,188,138,138,138,138,33,172,173,190,189,139,139,139,139,33,173,174,191,190,140,140,140,140,33,174,175,192,191,141,141,141,141,33,175,176,193,192,142,142,142,142,33,176,177,194,193,143,143,143,143,33,177,178,195,194,144,144,144,144,33,178,179,196,195,145,145,145,145,33,179,180,197,196,146,146,146,146,33,180,181,198,197,147,147,147,147,33,181,182,199,198,148,148,148,148,33,182,183,200,199,149,149,149,149,33,183,184,201,200,150,150,150,150,33,184,185,202,201,151,151,151,151,32,202,185,186,152,152,152,32,238,239,203,153,153,153,32,202,186,238,154,154,154,32,238,203,202,155,155,155,33,34,35,171,170,156,156,156,156,33,35,36,172,171,157,157,157,157,33,36,37,173,172,158,158,158,158,33,37,38,174,173,159,159,159,159,33,38,39,175,174,160,160,160,160,33,39,40,176,175,161,161,161,161,33,40,41,177,176,162,162,162,162,33,41,42,178,177,163,163,163,163,33,42,43,179,178,164,164,164,164,33,43,44,180,179,165,165,165,165,33,44,45,181,180,166,166,166,166,33,45,46,182,181,167,167,167,167,33,46,47,183,182,168,168,168,168,33,47,48,184,183,169,169,169,169,33,48,49,185,184,170,170,170,170,33,49,50,186,185,171,171,171,171,33,204,205,222,221,172,172,172,172,33,205,206,223,222,173,173,173,173,33,206,207,224,223,174,174,174,174,33,207,208,225,224,119,119,119,119,33,208,209,226,225,175,175,175,175,33,209,210,227,226,176,176,176,176,33,210,211,228,227,177,177,177,177,33,211,212,229,228,178,178,178,178,33,212,213,230,229,179,179,179,179,33,213,214,231,230,180,180,180,180,33,214,215,232,231,181,181,181,181,33,215,216,233,232,182,182,182,182,33,216,217,234,233,183,183,183,183,33,217,218,235,234,184,184,184,184,33,218,219,236,235,185,185,185,185,33,219,220,237,236,186,186,186,186,33,68,69,205,204,187,187,187,187,33,69,70,206,205,188,188,188,188,33,70,71,207,206,189,189,189,189,33,71,72,208,207,190,190,190,190,33,72,73,209,208,191,191,191,191,33,73,74,210,209,192,192,192,192,33,74,75,211,210,193,193,193,193,33,75,76,212,211,194,194,194,194,33,76,77,213,212,195,195,195,195,33,77,78,214,213,196,196,196,196,33,78,79,215,214,197,197,197,197,33,79,80,216,215,4,4,4,4,33,80,81,217,216,198,198,198,198,33,81,82,218,217,199,199,199,199,33,82,83,219,218,200,200,200,200,33,83,84,220,219,201,201,201,201,33,86,85,221,222,202,202,202,202,32,203,239,579,203,203,203,32,579,287,285,204,204,204,32,67,203,579,205,205,205,32,237,220,84,206,206,206,32,84,67,579,207,207,207,32,285,304,338,87,87,87,32,135,101,237,87,87,87,32,285,338,135,206,206,206,32,84,579,285,208,208,208,32,135,237,84,206,206,206,32,285,135,84,206,206,206,33,241,240,242,243,209,209,209,209,33,239,238,240,241,87,87,87,87,33,238,577,582,240,87,87,87,87,33,579,239,241,583,87,87,87,87,33,242,586,587,243,210,210,210,210,33,240,582,586,242,211,211,211,211,33,583,241,243,587,212,212,212,212,32,267,265,248,213,213,213,32,17,153,136,214,214,214,32,267,248,17,214,214,214,32,245,592,267,215,215,215,32,34,170,245,216,216,216,32,17,136,0,217,217,217,32,34,245,267,218,218,218,32,267,17,0,217,217,217,32,0,34,267,217,217,217,32,286,589,244,219,219,219,32,244,187,51,220,220,220,32,68,204,221,221,221,221,32,286,244,51,220,220,220,32,286,51,68,222,222,222,32,322,288,269,87,87,87,32,269,286,68,223,223,223,32,221,85,119,87,87,87,32,119,322,269,224,224,224,32,269,68,221,225,225,225,32,221,119,269,226,226,226,33,593,246,247,594,227,227,227,227,33,244,589,594,247,228,228,228,228,32,245,170,171,229,229,229,32,188,187,244,230,230,230,32,188,244,247,231,231,231,32,246,245,171,232,232,232,32,188,247,246,233,233,233,32,171,188,246,234,234,234,33,592,245,246,593,235,235,235,235,33,288,289,323,322,87,87,87,87,33,289,290,324,323,87,87,87,87,33,290,291,325,324,87,87,87,87,33,291,292,326,325,87,87,87,87,33,292,293,327,326,87,87,87,87,33,293,294,328,327,87,87,87,87,33,294,295,329,328,87,87,87,87,33,295,296,330,329,87,87,87,87,33,296,297,331,330,87,87,87,87,33,297,298,332,331,87,87,87,87,33,298,299,333,332,87,87,87,87,33,299,300,334,333,87,87,87,87,33,300,301,335,334,87,87,87,87,33,301,302,336,335,87,87,87,87,33,302,303,337,336,87,87,87,87,33,303,304,338,337,87,87,87,87,33,270,269,305,306,87,87,87,87,33,271,270,306,307,87,87,87,87,33,272,271,307,308,87,87,87,87,33,273,272,308,309,87,87,87,87,33,274,273,309,310,87,87,87,87,33,275,274,310,311,87,87,87,87,33,276,275,311,312,87,87,87,87,33,277,276,312,313,87,87,87,87,33,278,277,313,314,87,87,87,87,33,279,278,314,315,87,87,87,87,33,280,279,315,316,87,87,87,87,33,281,280,316,317,87,87,87,87,33,282,281,317,318,87,87,87,87,33,283,282,318,319,87,87,87,87,33,284,283,319,320,87,87,87,87,33,285,284,320,321,87,87,87,87,33,371,507,508,372,0,0,0,0,33,370,506,507,371,1,1,1,1,33,369,505,506,370,2,2,2,2,33,368,504,505,369,3,3,3,3,33,367,503,504,368,4,4,4,4,33,366,502,503,367,5,5,5,5,33,365,501,502,366,6,6,6,6,33,364,500,501,365,236,236,236,236,33,363,499,500,364,237,237,237,237,33,362,498,499,363,9,9,9,9,33,361,497,498,362,238,238,238,238,33,360,496,497,361,11,11,11,11,33,359,495,496,360,12,12,12,12,33,358,494,495,359,13,13,13,13,33,357,493,494,358,239,239,239,239,33,356,492,493,357,15,15,15,15,33,355,491,490,354,16,16,16,16,33,354,490,489,353,17,17,17,17,33,353,489,488,352,18,18,18,18,33,352,488,487,351,19,19,19,19,33,351,487,486,350,20,20,20,20,33,350,486,485,349,21,21,21,21,33,349,485,484,348,22,22,22,22,33,348,484,483,347,23,23,23,23,33,339,373,374,340,240,240,240,240,33,340,374,375,341,241,241,241,241,33,341,375,376,342,242,242,242,242,33,342,376,377,343,243,243,243,243,33,343,377,378,344,244,244,244,244,33,344,378,379,345,245,245,245,245,33,345,379,380,346,246,246,246,246,33,346,380,381,347,247,247,247,247,33,347,381,382,348,248,248,248,248,33,348,382,383,349,249,249,249,249,33,349,383,384,350,250,250,250,250,33,350,384,385,351,251,251,251,251,33,351,385,386,352,252,252,252,252,33,352,386,387,353,253,253,253,253,33,353,387,388,354,254,254,254,254,33,354,388,389,355,255,255,255,255,33,406,542,541,405,40,40,40,40,33,405,541,540,404,41,41,41,41,33,404,540,539,403,42,42,42,42,33,403,539,538,402,43,43,43,43,33,402,538,537,401,44,44,44,44,33,401,537,536,400,45,45,45,45,33,400,536,535,399,46,46,46,46,33,399,535,534,398,256,256,256,256,33,398,534,533,397,48,48,48,48,33,397,533,532,396,49,49,49,49,33,396,532,531,395,50,50,50,50,33,395,531,530,394,257,257,257,257,33,394,530,529,393,52,52,52,52,33,393,529,528,392,53,53,53,53,33,392,528,527,391,54,54,54,54,33,391,527,526,390,55,55,55,55,33,408,391,390,407,258,258,258,258,33,409,392,391,408,259,259,259,259,33,410,393,392,409,260,260,260,260,33,411,394,393,410,261,261,261,261,33,412,395,394,411,262,262,262,262,33,413,396,395,412,263,263,263,263,33,414,397,396,413,264,264,264,264,33,415,398,397,414,265,265,265,265,33,416,399,398,415,266,266,266,266,33,417,400,399,416,267,267,267,267,33,418,401,400,417,268,268,268,268,33,419,402,401,418,269,269,269,269,33,420,403,402,419,270,270,270,270,33,421,404,403,420,271,271,271,271,33,422,405,404,421,272,272,272,272,33,423,406,405,422,273,273,273,273,33,440,576,575,439,72,72,72,72,33,439,575,574,438,73,73,73,73,33,438,574,573,437,74,74,74,74,33,437,573,572,436,75,75,75,75,33,436,572,571,435,274,274,274,274,33,435,571,570,434,77,77,77,77,33,434,570,569,433,78,78,78,78,33,433,569,568,432,79,79,79,79,33,432,568,567,431,80,80,80,80,33,431,567,566,430,81,81,81,81,33,430,566,565,429,82,82,82,82,33,429,565,564,428,83,83,83,83,33,428,564,563,427,84,84,84,84,33,427,563,562,426,85,85,85,85,33,426,562,561,425,86,86,86,86,33,424,458,459,425,87,87,87,87,33,425,459,460,426,87,87,87,87,33,426,460,461,427,87,87,87,87,33,427,461,462,428,87,87,87,87,33,428,462,463,429,87,87,87,87,33,429,463,464,430,87,87,87,87,33,430,464,465,431,87,87,87,87,33,431,465,466,432,87,87,87,87,33,432,466,467,433,87,87,87,87,33,433,467,468,434,87,87,87,87,33,434,468,469,435,87,87,87,87,33,435,469,470,436,87,87,87,87,33,436,470,471,437,87,87,87,87,33,437,471,472,438,87,87,87,87,33,438,472,473,439,87,87,87,87,33,439,473,474,440,87,87,87,87,33,408,442,441,407,87,87,87,87,33,409,443,442,408,87,87,87,87,33,410,444,443,409,87,87,87,87,33,411,445,444,410,87,87,87,87,33,412,446,445,411,87,87,87,87,33,413,447,446,412,87,87,87,87,33,414,448,447,413,87,87,87,87,33,415,449,448,414,87,87,87,87,33,416,450,449,415,87,87,87,87,33,417,451,450,416,87,87,87,87,33,418,452,451,417,87,87,87,87,33,419,453,452,418,87,87,87,87,33,420,454,453,419,87,87,87,87,33,421,455,454,420,87,87,87,87,33,422,456,455,421,87,87,87,87,33,423,457,456,422,87,87,87,87,33,248,356,357,249,88,88,88,88,33,249,357,358,250,89,89,89,89,33,250,358,359,251,90,90,90,90,33,251,359,360,252,91,91,91,91,33,252,360,361,253,92,92,92,92,33,253,361,362,254,93,93,93,93,33,254,362,363,255,9,9,9,9,33,328,464,463,327,95,95,95,95,33,255,363,364,256,96,96,96,96,33,329,465,464,328,97,97,97,97,33,330,466,465,329,80,80,80,80,33,256,364,365,257,7,7,7,7,33,331,467,466,330,98,98,98,98,33,332,468,467,331,78,78,78,78,33,257,365,366,258,6,6,6,6,33,333,469,468,332,99,99,99,99,33,334,470,469,333,100,100,100,100,33,258,366,367,259,101,101,101,101,33,335,471,470,334,102,102,102,102,33,336,472,471,335,74,74,74,74,33,259,367,368,260,4,4,4,4,33,337,473,472,336,103,103,103,103,33,338,474,473,337,72,72,72,72,33,260,368,369,261,104,104,104,104,33,261,369,370,262,2,2,2,2,33,262,370,371,263,105,105,105,105,33,263,371,372,264,0,0,0,0,32,266,264,372,208,208,208,32,372,508,491,108,108,108,32,372,491,355,108,108,108,32,268,266,372,275,275,275,32,578,577,268,107,107,107,32,389,525,578,107,107,107,32,268,372,355,276,276,276,32,389,578,268,107,107,107,32,355,389,268,109,109,109,33,323,459,458,322,112,112,112,112,33,324,460,459,323,86,86,86,86,33,325,461,460,324,113,113,113,113,33,326,462,461,325,114,114,114,114,33,327,463,462,326,115,115,115,115,33,492,475,476,493,277,277,277,277,33,493,476,477,494,277,277,277,277,33,494,477,478,495,278,278,278,278,33,495,478,479,496,279,279,279,279,33,496,479,480,497,278,278,278,278,33,497,480,481,498,280,280,280,280,33,498,481,482,499,281,281,281,281,33,499,482,483,500,278,278,278,278,33,500,483,484,501,282,282,282,282,33,501,484,485,502,283,283,283,283,33,502,485,486,503,284,284,284,284,33,503,486,487,504,285,285,285,285,33,504,487,488,505,286,286,286,286,33,505,488,489,506,287,287,287,287,33,506,489,490,507,288,288,288,288,33,507,490,491,508,289,289,289,289,33,340,476,475,339,290,290,290,290,33,341,477,476,340,132,132,132,132,33,342,478,477,341,133,133,133,133,33,343,479,478,342,134,134,134,134,33,344,480,479,343,135,135,135,135,33,345,481,480,344,136,136,136,136,33,346,482,481,345,49,49,49,49,33,347,483,482,346,137,137,137,137,33,510,527,528,511,291,291,291,291,33,511,528,529,512,292,292,292,292,33,512,529,530,513,293,293,293,293,33,513,530,531,514,294,294,294,294,33,514,531,532,515,295,295,295,295,33,515,532,533,516,296,296,296,296,33,516,533,534,517,297,297,297,297,33,517,534,535,518,298,298,298,298,33,518,535,536,519,299,299,299,299,33,519,536,537,520,300,300,300,300,33,520,537,538,521,301,301,301,301,33,521,538,539,522,302,302,302,302,33,522,539,540,523,303,303,303,303,33,523,540,541,524,304,304,304,304,32,525,524,541,305,305,305,32,541,542,580,306,306,306,32,578,525,541,307,307,307,32,541,580,578,308,308,308,33,373,509,510,374,156,156,156,156,33,374,510,511,375,309,309,309,309,33,375,511,512,376,310,310,310,310,33,376,512,513,377,159,159,159,159,33,377,513,514,378,311,311,311,311,33,378,514,515,379,161,161,161,161,33,379,515,516,380,312,312,312,312,33,380,516,517,381,163,163,163,163,33,381,517,518,382,164,164,164,164,33,382,518,519,383,165,165,165,165,33,383,519,520,384,166,166,166,166,33,384,520,521,385,313,313,313,313,33,385,521,522,386,168,168,168,168,33,386,522,523,387,169,169,169,169,33,387,523,524,388,170,170,170,170,33,388,524,525,389,171,171,171,171,33,543,560,561,544,277,277,277,277,33,544,561,562,545,277,277,277,277,33,545,562,563,546,278,278,278,278,33,546,563,564,547,278,278,278,278,33,547,564,565,548,314,314,314,314,33,548,565,566,549,315,315,315,315,33,549,566,567,550,278,278,278,278,33,550,567,568,551,316,316,316,316,33,551,568,569,552,317,317,317,317,33,552,569,570,553,318,318,318,318,33,553,570,571,554,319,319,319,319,33,554,571,572,555,320,320,320,320,33,555,572,573,556,278,278,278,278,33,556,573,574,557,321,321,321,321,33,557,574,575,558,322,322,322,322,33,558,575,576,559,323,323,323,323,33,407,543,544,408,324,324,324,324,33,408,544,545,409,188,188,188,188,33,409,545,546,410,189,189,189,189,33,410,546,547,411,190,190,190,190,33,411,547,548,412,191,191,191,191,33,412,548,549,413,192,192,192,192,33,413,549,550,414,193,193,193,193,33,414,550,551,415,194,194,194,194,33,415,551,552,416,325,325,325,325,33,416,552,553,417,196,196,196,196,33,417,553,554,418,197,197,197,197,33,418,554,555,419,4,4,4,4,33,419,555,556,420,198,198,198,198,33,420,556,557,421,326,326,326,326,33,421,557,558,422,200,200,200,200,33,422,558,559,423,201,201,201,201,33,425,561,560,424,202,202,202,202,33,577,582,583,579,87,87,87,87,32,579,580,542,327,327,327,32,579,542,406,205,205,205,32,287,579,406,328,328,328,32,423,559,576,206,206,206,32,287,406,423,109,109,109,32,338,304,285,87,87,87,32,285,287,423,109,109,109,32,576,440,474,87,87,87,32,474,338,285,206,206,206,32,285,423,576,206,206,206,32,576,474,285,206,206,206,33,584,588,585,581,329,329,329,329,33,580,584,581,578,87,87,87,87,33,578,581,582,577,87,87,87,87,33,579,583,584,580,87,87,87,87,33,585,588,587,586,330,330,330,330,33,581,585,586,582,211,211,211,211,33,583,587,588,584,331,331,331,331,32,265,267,592,332,332,332,32,592,591,509,333,333,333,32,592,509,373,334,334,334,32,356,248,265,214,214,214,32,265,592,373,335,335,335,32,339,475,492,217,217,217,32,265,373,339,217,217,217,32,492,356,265,214,214,214,32,265,339,492,217,217,217,32,590,589,286,219,219,219,32,269,288,322,87,87,87,32,458,424,560,87,87,87,32,269,322,458,224,224,224,32,390,526,590,220,220,220,32,560,543,407,221,221,221,32,390,590,286,220,220,220,32,458,560,407,226,226,226,32,407,390,286,222,222,222,32,286,269,458,336,336,336,32,286,458,407,337,337,337,33,593,594,596,595,227,227,227,227,33,590,596,594,589,228,228,228,228,32,510,509,591,338,338,338,32,510,591,595,339,339,339,32,590,526,527,278,278,278,32,510,595,596,340,340,340,32,596,590,527,278,278,278,32,596,527,510,341,341,341,33,592,593,595,591,235,235,235,235],"metadata":{"generator":"io_three","uvs":0,"vertices":597,"version":3,"normals":342,"type":"Geometry","faces":629},"normals":[0.689228,0,0.724544,0.653173,0,0.757208,0.615232,0,0.788346,0.575809,0,0.817585,0.534997,0,0.844854,0.492899,0,0.870087,0.449612,0,0.893224,0.40524,0,0.91421,0.359895,8.78191e-8,0.932993,0.313681,0,0.949528,0.266712,0,0.963776,0.2191,0,0.975702,0.170961,0,0.985278,0.122411,0,0.99248,0.0735635,0,0.997291,0.0249712,0,0.999688,-0.689226,0,-0.724546,-0.653173,0,-0.757208,-0.615231,0,-0.788347,-0.575809,0,-0.817584,-0.534998,0,-0.844853,-0.492899,0,-0.870087,-0.449612,0,-0.893224,-0.405239,0,-0.914211,-1.11701e-9,1,-4.4703e-8,-3.28951e-9,1,-4.45958e-8,2.85251e-9,1,-4.54076e-8,6.21083e-10,1,-4.54929e-8,-1.61182e-9,1,-4.54686e-8,-3.841e-9,1,-4.53347e-8,1.08261e-9,1,-4.3527e-8,2.24338e-9,1,-4.08058e-8,2.38619e-10,1,-4.08668e-8,1.97976e-9,1,-4.27152e-8,-1.18528e-10,1,-4.27609e-8,-2.21657e-9,1,-4.27036e-8,2.98072e-9,1,-4.31198e-8,8.61419e-10,1,-4.32141e-8,-1.26006e-9,1,-4.32043e-8,1.10025e-9,1,-4.22093e-8,-0.689193,0,-0.724577,-0.653174,0,-0.757208,-0.615231,0,-0.788347,-0.575809,0,-0.817584,-0.534997,0,-0.844854,-0.492898,0,-0.870087,-0.449613,0,-0.893223,-0.405238,0,-0.914211,-0.359897,0,-0.932992,-0.31368,0,-0.949529,-0.266712,0,-0.963776,-0.2191,0,-0.975702,-0.170961,0,-0.985278,-0.122411,0,-0.99248,-0.0735638,0,-0.99729,-0.0250177,0,-0.999687,-1.11904e-9,1,-4.4703e-8,1.32409e-9,1,-4.49361e-8,-8.82415e-10,1,-4.4947e-8,-1.70707e-10,1,-4.15734e-8,2.30344e-9,1,-4.25286e-8,-3.00931e-9,1,-4.55648e-8,-8.48676e-10,1,-4.68135e-8,3.54251e-10,1,-4.40711e-8,1.81639e-9,1,-4.15662e-8,-2.25476e-10,1,-4.16052e-8,1.75845e-9,1,-4.38242e-8,-3.93923e-10,1,-4.38577e-8,-2.54553e-9,1,-4.37855e-8,-1.0438e-9,1,-4.64541e-8,8.6346e-10,1,-4.50361e-8,-4.48702e-11,1,-4.11191e-8,-0.689181,0,-0.72459,-0.653174,0,-0.757208,-0.61523,0,-0.788348,-0.575809,0,-0.817584,-0.534998,0,-0.844853,-0.492899,0,-0.870087,-0.449612,0,-0.893224,-0.405239,0,-0.914211,-0.359897,0,-0.932992,-0.31368,0,-0.949529,-0.266712,0,-0.963776,-0.2191,0,-0.975702,-0.170961,0,-0.985278,-0.122409,0,-0.99248,-0.0735649,0,-0.99729,0,0,0,0.0249712,0,0.999688,0.0735635,0,0.99729,0.122411,0,0.99248,0.170961,0,0.985278,0.2191,0,0.975703,0.266712,0,0.963776,0.313681,0,0.949528,-0.266712,0,-0.963776,0.359895,0,0.932993,-0.31368,0,-0.949529,-0.405239,0,-0.914211,-0.492899,0,-0.870087,-0.534998,0,-0.844853,0.492899,0,0.870087,-0.575809,0,-0.817585,-0.653174,0,-0.757208,0.575809,0,0.817585,0.653173,0,0.757208,-1.22715e-8,1,-3.15554e-8,0.707105,0,-0.707109,0.707107,0,-0.707107,0.707106,0,-0.707108,0.707106,0,-0.707108,0.707107,-0.0000108084,-0.707107,-0.0250357,0,-0.999687,-0.122409,0,-0.99248,-0.170961,0,-0.985278,-0.2191,0,-0.975702,0,1,0,4.76728e-9,1,-1.59777e-7,-3.07873e-9,1,-1.59819e-7,0,1,0,-2.64952e-8,1,-1.57636e-7,-3.4198e-8,1,-1.56146e-7,1.54019e-8,1,-5.94113e-9,1.50919e-8,1,-6.68974e-9,1.47454e-8,1,-7.42221e-9,1.43635e-8,1,-8.13678e-9,2.78938e-8,1,-1.76635e-8,1.34967e-8,1,-9.50548e-9,2.60282e-8,1,-2.03125e-8,2.50001e-8,1,-2.15653e-8,-3.6542e-8,1,-7.49744e-8,-0.0249739,0,-0.999688,-0.0735624,0,-0.997291,-0.122411,0,-0.992479,-0.170962,0,-0.985278,-0.219099,0,-0.975703,-0.266712,0,-0.963776,-0.359896,0,-0.932992,-3.69353e-9,1,-5.00725e-8,-6.14609e-9,1,-4.98309e-8,1.85e-8,1,-4.77989e-8,-8.25049e-9,1,-3.67414e-8,6.91871e-9,1,-4.09863e-8,-5.42507e-9,1,-4.44755e-8,-7.60102e-9,1,-4.41556e-8,8.29986e-10,1,-4.1558e-8,3.82807e-9,1,-5.1111e-8,1.31556e-9,1,-5.12373e-8,-5.27695e-9,1,-4.12299e-8,3.51468e-9,1,-4.08571e-8,1.50577e-9,1,-4.09804e-8,-5.06905e-10,1,-4.10048e-8,8.37629e-9,1,-4.14627e-8,0.00909792,0.999917,-0.00909797,0,1,0,5.07843e-9,1,-4.8585e-8,0.0249856,0,0.999688,0.0735637,0,0.997291,0.122411,0,0.992479,0.170961,0,0.985278,0.219099,0,0.975703,0.266712,4.53707e-8,0.963776,0.313681,0,0.949529,0.359897,0,0.932992,0.405238,0,0.914211,0.449613,0,0.893223,0.492899,0,0.870087,0.534997,0,0.844854,0.575809,0,0.817584,0.615231,0,0.788347,0.653173,0,0.757209,0.689217,0,0.724555,7.62006e-9,1,-7.97076e-8,-1.16963e-8,1,-1.58562e-7,-3.79122e-10,1,-8.00523e-8,1.83879e-8,1,-4.1291e-9,-1.21212e-8,1,-7.91304e-8,-1.59892e-8,1,-7.84402e-8,1.75829e-8,1,-6.78246e-9,1.7229e-8,1,-7.63711e-9,1.68336e-8,1,-8.47335e-9,1.63974e-8,1,-9.28904e-9,1.59219e-8,1,-1.00824e-8,3.0816e-8,1,-2.17031e-8,1.4857e-8,1,-1.15945e-8,-3.05201e-8,1,-7.86601e-8,-3.39017e-8,1,-7.7488e-8,0.0250323,0,0.999687,0.0735649,0,0.99729,0.12241,0,0.99248,0.170961,0,0.985278,0.2191,0,0.975702,0.266712,0,0.963776,0.31368,0,0.949529,0.359897,0,0.932992,0.405238,0,0.914211,0.449612,0,0.893224,0.492899,0,0.870087,0.575808,0,0.817585,0.615231,0,0.788347,0.653174,0,0.757208,0.689182,0,0.724588,-0.0250357,0,-0.999686,0.707105,-0.0000053948,-0.707109,7.79445e-9,1,-5.13517e-8,0.707109,0,-0.707105,0.707102,0,-0.707112,0.707106,-0.0000154972,-0.707108,0.707107,0,-0.707107,-6.24399e-9,1,-4.37078e-8,0.707106,-0.00000273387,-0.707107,0.581239,0,0.813733,-0.813733,8.88437e-7,-0.581239,-1,0,-0.00000111262,-1,0,-0.00000110269,-1,8.56817e-8,-0.00000240405,-1,0,-0.0000025183,-1,0,-0.00000110269,-1,0,-0.0000025183,-1,0,-0.0000021855,-1,0,-0.0000021855,-1,0,-0.00000129143,-1,0,-0.00000124052,-1,0,-0.00000124052,-1,0,-0.00000129143,-1,0,-0.00000129143,-1,0,-0.00000129143,-1,0,-4.76837e-7,0.164399,0,0.986394,0,1,0,-1.98885e-9,1,-7.94729e-8,-3.35815e-8,1,-2.01489e-7,0,1,0,4.10366e-8,1,-4.47035e-8,1.23573e-8,1,-5.0861e-8,0.164399,0,-0.986394,0.40524,8.78192e-8,0.91421,0.359895,8.78191e-8,0.932993,0.266712,0,0.963776,0.0735635,0,0.997291,1.11701e-9,-1,4.4703e-8,-8.93851e-10,-1,4.49044e-8,1.31068e-9,-1,4.48941e-8,-6.21083e-10,-1,4.54929e-8,-1.25104e-9,-1,4.22922e-8,8.2573e-10,-1,4.23027e-8,-1.90522e-9,-1,4.77233e-8,1.67027e-9,-1,3.92961e-8,-4.07349e-9,-1,4.25667e-8,5.11796e-9,-1,4.74863e-8,1.18528e-10,-1,4.27609e-8,-5.31461e-9,-1,3.86512e-8,-3.41165e-9,-1,3.88654e-8,-1.50057e-9,-1,3.8986e-8,2.10591e-9,-1,4.73959e-8,4.0364e-9,-1,4.76093e-8,-0.405238,0,-0.914211,-0.2191,0,-0.975702,-8.3138e-9,-1,4.49345e-8,3.28957e-9,-1,4.45958e-8,-2.98873e-11,-1,3.75502e-8,1.81266e-9,-1,3.75064e-8,7.6991e-10,-1,4.56576e-8,-3.43706e-9,-1,3.96158e-8,-1.48913e-9,-1,3.97368e-8,-1.17122e-9,-1,4.83803e-8,1.20378e-9,-1,4.83796e-8,3.57636e-9,-1,4.82622e-8,5.94022e-9,-1,4.80286e-8,3.93923e-10,-1,4.38577e-8,-5.52816e-9,-1,4.0356e-8,-3.5414e-9,-1,4.05787e-8,-1.54596e-9,-1,4.07035e-8,4.48702e-11,-1,4.11191e-8,-0.534998,0,-0.844853,0.707106,-0.00000202656,-0.707108,0.707107,0.0000108084,-0.707107,0,-1,0,0,-1,0,-1.6265e-8,-1,2.82223e-9,-1.59101e-8,-1,4.40288e-9,-1.56749e-8,-1,5.17822e-9,-3.01837e-8,-1,1.33795e-8,5.67401e-8,-1,1.49439e-7,6.40046e-8,-1,1.46476e-7,-2.78938e-8,-1,1.76635e-8,-2.69935e-8,-1,1.9011e-8,8.48036e-8,-1,1.35498e-7,9.13506e-8,-1,1.31174e-7,-2.43328e-8,-1,2.31669e-8,-0.0249739,0,-0.999688,-5.54415e-9,-1,4.44608e-8,4.60957e-9,-1,3.73732e-8,6.43777e-9,-1,3.7102e-8,-1.61324e-8,-1,4.86491e-8,1.33912e-8,-1,4.83898e-8,-4.8993e-9,-1,4.12765e-8,-2.86786e-9,-1,4.14671e-8,-8.29986e-10,-1,4.1558e-8,1.21035e-9,-1,4.15486e-8,3.24757e-9,-1,4.14391e-8,-1.63075e-8,-1,4.0041e-8,7.29372e-9,-1,4.09213e-8,9.29276e-9,-1,4.05142e-8,-1.02558e-8,-1,4.20003e-8,-8.37629e-9,-1,4.14627e-8,-2.62872e-8,-1,2.62873e-8,0,-1,0,-6.55961e-9,-1,6.27554e-8,0.0735637,0,0.99729,0.122412,0,0.99248,0.219099,4.53707e-8,0.975703,0.313681,4.53707e-8,0.949529,0.534997,0,0.844854,0,-1,0,-3.63262e-8,-1,1.00528e-8,3.96383e-8,-1,1.55122e-7,4.72013e-8,-1,1.52991e-7,5.46519e-8,-1,1.5049e-7,6.19706e-8,-1,1.47628e-7,-3.18439e-8,-1,2.01649e-8,-2.9714e-8,-1,2.3189e-8,-2.85403e-8,-1,2.46191e-8,-2.78481e-8,-1,2.65139e-8,0.0250323,0,0.999687,0.405238,0,0.914211,0.615231,0,0.788347,0.707105,0.0000053948,-0.707109,0.707109,0,-0.707105,2.49759e-8,-1,2.49759e-8,0.707106,0.00000273387,-0.707107,-0.813733,-8.88437e-7,-0.581239,-7.27996e-9,-1,4.37114e-8,-1,-8.56817e-8,-0.0000025183,-1,0,-0.00000240405,-1,0.00000283935,-0.0000014576,-1,-7.63685e-8,-0.00000124052,-1,4.07299e-7,-0.00000129143,1.9863e-9,-1,7.94729e-8,-1.09451e-7,-1,6.56708e-7,3.92428e-8,-1,4.47035e-8,2.33707e-8,-1,4.91058e-8]},"double_turnout_L_ab":{"uvs":[],"normals":[7.40111e-8,0,-1,0,-0.0000038147,1,-1.51608e-7,1,-3.93033e-7,2.07632e-7,1,3.66523e-7,0,1,-5.2041e-8,1.66955e-9,1,-4.7569e-8,-2.88362e-8,1,-9.66328e-8,-2.24719e-7,1,-8.12033e-7,0,1,0,6.16733e-8,1,5.40497e-8,9.10059e-8,1,1.70734e-7,-2.42863e-7,1,-6.29603e-7,3.90571e-8,1,4.46223e-8,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,1.04082e-7,-4.15264e-7,-1,-7.33047e-7,-1.70711e-7,-1,-3.85121e-7,1.1236e-7,-1,4.06016e-7,0,-1,1.16036e-7,5.39531e-8,-1,1.6332e-7,-4.18842e-8,-1,-7.4103e-8,-3.30259e-8,-1,1.56201e-8,-4.48989e-8,-1,-5.85933e-8,4.92664e-8,-1,1.66608e-7,1.57999e-7,1,4.09602e-7,-1.10081e-14,1,-1.30113e-7,7.94728e-9,1,-4.76837e-8,-1.32022e-9,1,-6.81199e-8,-2.67083e-8,1,-1.06626e-7,-1.07483e-7,1,-8.71463e-7,-2.15483e-8,1,-2.92125e-7,-3.84672e-10,1,-1.98482e-8,-9.93411e-9,1,-5.96047e-8,7.98763e-9,1,-5.26507e-8,1.77783e-8,1,-5.96046e-8,-1.50433e-7,-0.00000301997,-1,0,0,1,-5.81655e-8,-0.00000429153,-1,7.58931e-8,0,1,0,0.0000038147,1,0,1,0,7.94676e-9,1,2.45649e-8,0,1,-4.46421e-8,-1.41634e-15,1,-4.46421e-8,8.3981e-10,1,-5.31783e-8,-1.30176e-9,1,-1.03267e-7,-1.4635e-9,1,-5.28845e-9,-4.94241e-10,1,-4.26192e-8,-4.85207e-15,1,-3.97363e-8,-3.39269e-15,1,-4.47036e-8,-4.91172e-10,1,-4.57182e-8,0,1,-3.88739e-8,2.0078e-9,1,-3.65656e-8,6.77491e-9,1,-1.72438e-8,8.59102e-9,1,-3.31619e-8,4.56913e-8,1,5.17432e-8,-1.34498e-14,1,-4.47036e-8,-2.18239e-9,1,-5.0549e-8,-2.28122e-8,1,-1.20559e-7,1.36331e-9,1,-4.23318e-8,8.60887e-8,1,1.94277e-7,0,1,-4.85089e-8,-5.65843e-8,1,-2.04471e-7,-1.16856e-10,1,-4.52101e-8,-1.05366e-10,1,-4.07641e-8,-4.27694e-10,1,-4.90756e-8,3.48976e-10,1,-3.55531e-8,2.63304e-9,1,-3.74333e-8,4.42583e-9,1,-3.4947e-8,0,1,-4.46876e-8,0,1,0,3.7228e-9,1,-4.15464e-8,-4.07229e-9,1,-4.91401e-8,0,1,0,-1.76744e-9,1,-5.79828e-8,1.0481e-9,1,-3.68289e-8,-1.50433e-7,0.00000301997,-1,-5.81655e-8,0.00000429153,-1,7.58931e-8,0,1,0,1,0,0.534994,0,0.844856,0.534995,0,0.844855,0.534994,0,0.844856,0.534995,0,0.844855,0.534995,0,0.844855,0.492896,-2.58934e-7,0.870088,0.492896,0,0.870088,0.492896,0,0.870088,0.492898,2.58926e-7,0.870087,0.492897,0,0.870088,0.449608,0,0.893226,0.2191,0,0.975703,0.405239,6.20109e-8,0.914211,0.313679,0,0.949529,0.164399,0,-0.986394,0.266712,0.00000107147,0.963776,0.266712,0,0.963776,0.266711,0,0.963776,0.266708,-0.0000010714,0.963777,0.266711,0,0.963776,0.266711,0,0.963777,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,0,0.99248,0.111157,0,0.993803,-0.534994,0,-0.844856,0.492894,0,0.870089,-0.449608,1.2479e-7,-0.893226,-0.405239,0,-0.914211,-0.359892,-5.5475e-8,-0.932994,0.405238,-5.27264e-8,0.914211,-0.313679,0,-0.949529,0.359892,0,0.932994,-0.266711,2.06319e-7,-0.963777,0.313679,5.74437e-8,0.949529,0.266711,5.74437e-8,0.963776,0.2191,2.87219e-8,0.975702,0.359892,0,0.932994,0.170958,0,0.985278,-8.10658e-8,0,-1,-8.10658e-8,0,-1,-7.97327e-8,0,-1,-7.97327e-8,0,-1,0,0,-1,0,0,-1,0,0,-1,-1.22107e-7,0,-1,-9.4011e-8,-2.19431e-7,-1,-8.88974e-8,0,-1,0.122409,0,0.99248,0.0735639,0,0.99729,0.130446,0,0.991455,0,0,1,-3.55814e-7,-1,-8.02711e-7,-1.37712e-7,-1,-4.16863e-7,3.22961e-8,-1,4.37832e-7,7.94729e-9,-1,4.76837e-8,1.71216e-9,-1,6.81754e-8,-2.14441e-8,-1,-1.07808e-7,5.5392e-8,-1,2.19719e-7,-9.9341e-9,-1,5.96046e-8,2.55712e-9,-1,6.58842e-8,3.68108e-9,-1,6.15742e-8,3.56333e-9,-1,5.96046e-8,-2.1798e-7,0,1,-1,-4.66916e-7,-0.00000256301,-1,0,-0.00000256301,-1,4.66911e-7,-0.00000149578,-1,0,-0.0000021628,-1,0,-0.0000022417,-1,0,-0.00000233627,-1,0,-0.00000233627,-1,0,-0.0000022417,0.164399,0,0.986394,0.122409,0,0.99248,9.70414e-15,-1,7.94727e-8,0,-1,3.88739e-8,9.53378e-15,-1,7.94727e-8,-2.25869e-7,-1,-6.83722e-7,4.66343e-15,-1,3.88739e-8,7.98245e-15,-1,7.94727e-8,2.95026e-15,-1,3.88739e-8,1.454e-14,-1,4.83272e-8,-9.4002e-8,-1,-1.60731e-7,2.34514e-8,-1,1.04149e-7,0,-1,4.85089e-8,-2.37094e-8,-1,-2.76579e-8,-4.05394e-10,-1,4.73511e-8,-4.64339e-9,-1,2.89099e-8,4.27694e-10,-1,4.90756e-8,-1.14714e-8,-1,-3.58855e-8,-3.30738e-15,-1,4.46876e-8,-1.22906e-8,-1,-9.34148e-8,0,-1,4.46876e-8,2.26448e-9,-1,5.44224e-8,2.25635e-9,-1,2.99678e-8,4.76479e-8,-1,6.45952e-7,2.94014e-9,-1,2.38384e-8,-2.2601e-9,-1,3.50035e-8,-7.19162e-10,-1,4.62172e-8,2.23968e-10,-1,4.58105e-8,-3.42055e-9,-1,8.73126e-8,0,-1,4.46421e-8,1.41634e-15,-1,4.46421e-8,2.78334e-9,-1,4.75421e-8,-1.89279e-9,-1,4.07298e-8,0,-1,4.46421e-8,2.20629e-9,-1,4.87193e-8,1.75777e-9,-1,4.67352e-8,6.13036e-9,-1,7.57476e-8,-2.52079e-9,-1,2.6706e-8,0.307795,0,0.951453,0.170958,0,0.985278,0.0735639,0,0.99729,0.2191,5.74437e-8,0.975702,0.0735638,0,0.99729,0.122409,0,0.99248,0.266711,5.74437e-8,0.963777,-0.266711,-2.06319e-7,-0.963777,0.359892,5.74437e-8,0.932994,-1,0,-0.00000404365,-1,0,-0.00000404365,-1,7.45058e-8,-0.00000198682,-1,0,-0.00000213583,-1,-7.45058e-8,-0.00000198682,-1,0,-0.00000213583,-1,0,-0.00000196812,-1,0,-0.00000196812,-0.313679,-5.5475e-8,-0.949529,0.405238,5.27264e-8,0.914211,-0.266711,0,-0.963776,-1,0,-8.90096e-7,-0.405239,-1.1095e-7,-0.914211,-0.313679,0,-0.949529,-0.449608,-1.2479e-7,-0.893226,0.170958,0,0.985278],"metadata":{"generator":"io_three","normals":221,"uvs":0,"vertices":178,"version":3,"faces":280,"type":"Geometry"},"vertices":[45.8457,-0.999999,14.4846,34.4812,-0.999999,16.4565,26.0211,-0.999999,17.5,0.249964,-0.999999,17.5,60.356,-1,9.5,65.98,-1,9.5,57.0998,-0.999999,11.9575,26.0211,-4,17.5,0.249963,-4,17.5,60.356,-4,9.49999,65.9801,-4,9.49999,0.24996,-4,19,9.00009,-4,19,9.00009,4,19,0.24996,4,19,23.0336,-4,17.8685,11.5305,-4,18.717,54.7908,-4,2.7394,43.9918,-4,5.16438,33.0868,-4,7.05653,22.1021,-4,8.41135,11.0642,-4,9.22555,8.99998,-4,9.49714,0.249979,-4,9.49714,0.249994,-4,6,-8.75,-4,7.5,0.250019,-4,-9.49998,90.4273,-4,-9.49999,86.2935,-4,-7.66759,75.9672,-4,-3.68433,65.4578,-4,-0.212544,-8.74999,-4,-7.5,0.25001,-4,-6,89.93,-4,1.11192,79.1686,-4,5.26305,68.2164,-4,8.88113,67.7808,-4,7.44529,78.6631,-4,3.8503,108.935,-4,-9.49999,112.105,-4,-9.49999,110.778,-4,-8.74818,100.475,-4,-3.56224,89.3558,-4,-0.274315,99.8333,-4,-4.91864,112.105,-1,-9.5,108.935,-1,-9.5,122.852,-1,-17.5,125.656,-1,-17.5,120.814,-1,-14.4334,122.852,-4,-17.5,125.656,-4,-17.5,90.4274,-1,-9.5,106.953,-1,-17.5,0.250017,-1,-9.5,56.6889,-1,-17.5,56.6889,-4,-17.5,106.953,-4,-17.5,128.025,-4,-19,125.221,-4,-19,125.221,-1,-19,109.601,-1,-19,109.601,-4,-19,61.7573,-4,-19,61.7573,-1,-19,23.7785,-1,-19,23.7785,-4,-19,0.250039,-4,-19,0.250039,4,-19,23.7785,4,-19,23.7785,0.999999,-19,61.7573,0.999999,-19,61.7573,4,-19,109.601,4,-19,109.601,0.999999,-19,125.221,0.999999,-19,125.221,4,-19,128.025,4,-19,59.9408,-4,-18.3999,19.4549,-4,-18.4667,9.73901,-4,-17.7501,9.00004,-4,-17.511,0.250036,-4,-17.511,34.4812,1,16.4565,45.8457,1,14.4846,57.0998,1,11.9575,65.98,1,9.5,60.356,1,9.5,0.249964,1,17.5,26.0211,1,17.5,65.9801,4,9.49999,60.356,4,9.49999,0.249963,4,17.5,26.0211,4,17.5,11.5305,4,18.717,23.0336,4,17.8685,68.2164,4,8.88113,79.1686,4,5.26305,89.93,4,1.11192,78.6631,4,3.8503,67.7808,4,7.44529,100.475,4,-3.56224,110.778,4,-8.74818,112.105,4,-9.49999,108.935,4,-9.49999,99.8333,4,-4.91864,89.3558,4,-0.274315,-8.75,4,7.5,0.249994,4,6,0.249979,4,9.49714,8.99998,4,9.49714,11.0642,4,9.22555,22.1021,4,8.41135,33.0868,4,7.05653,43.9918,4,5.16438,54.7908,4,2.7394,65.4578,4,-0.212545,75.9672,4,-3.68433,86.2935,4,-7.66759,90.4273,4,-9.49999,0.250019,4,-9.49998,0.25001,4,-6,-8.74999,4,-7.5,125.656,0.999999,-17.5,122.852,0.999999,-17.5,108.935,1,-9.5,112.105,1,-9.5,120.814,0.999999,-14.4334,125.656,4,-17.5,122.852,4,-17.5,106.953,0.999999,-17.5,90.4274,1,-9.5,56.6889,0.999999,-17.5,0.250017,1,-9.5,106.953,4,-17.5,56.6889,4,-17.5,59.9408,4,-18.3999,0.250036,4,-17.511,9.00004,4,-17.511,9.73901,4,-17.7501,19.4549,4,-18.4667,99.8333,1,-4.91864,89.3558,1,-0.274315,86.2935,1,-7.66759,78.6631,1,3.8503,75.9672,1,-3.68433,67.7808,1,7.44529,65.4578,1,-0.212544,54.7908,1,2.7394,43.9918,1,5.16438,33.0868,1,7.05653,22.1021,1,8.41135,11.0642,1,9.22555,8.99998,1,9.49714,0.249979,1,9.49714,0.249979,-1,9.49714,8.99998,-1,9.49714,11.0642,-1,9.22555,0.250036,0.999999,-17.511,22.1021,-1,8.41135,9.00004,0.999999,-17.511,0.250036,-1,-17.511,33.0868,-1,7.05653,9.73901,0.999999,-17.7501,9.00004,-1,-17.511,43.9918,-1,5.16438,19.4549,0.999999,-18.4667,9.73901,-1,-17.7501,54.7908,-1,2.7394,19.4549,-1,-18.4667,65.4578,-1,-0.212544,67.7808,-1,7.44529,75.9672,-1,-3.68433,78.6631,-1,3.8503,86.2935,-1,-7.66759,89.3558,-1,-0.274315,59.9408,0.999999,-18.3999,99.8333,-1,-4.91864,59.9408,-1,-18.3999],"faces":[33,7,8,3,2,0,0,0,0,33,5,4,9,10,1,1,1,1,32,96,97,100,2,2,2,32,100,101,102,3,3,3,32,102,103,104,4,4,4,32,102,104,105,5,5,5,32,96,100,102,6,6,6,32,89,95,96,7,7,7,32,99,90,89,8,8,8,32,98,99,89,9,9,9,32,89,96,102,10,10,10,32,105,98,89,11,11,11,32,102,105,89,12,12,12,32,16,12,11,13,13,13,32,11,8,7,14,14,14,32,7,15,16,15,15,15,32,11,7,16,16,16,16,32,43,38,39,17,17,17,32,39,40,41,18,18,18,32,41,33,34,19,19,19,32,34,35,10,20,20,20,32,10,9,36,21,21,21,32,10,36,37,22,22,22,32,41,34,10,23,23,23,32,43,39,41,24,24,24,32,10,37,42,25,25,25,32,42,43,41,14,14,14,32,41,10,42,26,26,26,32,113,114,115,8,8,8,32,115,116,117,27,27,27,32,117,118,119,28,28,28,32,120,121,106,29,29,29,32,117,119,120,30,30,30,32,113,115,117,31,31,31,32,111,112,113,32,32,32,32,108,109,110,8,8,8,32,110,111,113,33,33,33,32,113,117,120,34,34,34,32,120,106,107,35,35,35,32,107,108,110,8,8,8,32,110,113,120,36,36,36,32,120,107,110,37,37,37,33,39,38,45,44,38,38,38,38,33,47,46,49,50,39,39,39,39,33,27,26,53,51,40,40,40,40,33,52,54,55,56,41,41,41,41,33,50,49,58,57,13,13,13,13,32,61,56,55,13,13,13,32,77,62,61,13,13,13,32,55,77,61,13,13,13,32,81,66,65,13,13,13,32,65,78,79,13,13,13,32,79,80,81,13,13,13,32,65,79,81,13,13,13,33,89,90,86,85,42,42,42,42,33,88,87,91,92,0,0,0,0,32,94,92,91,43,43,43,32,91,14,13,8,8,8,32,93,94,91,43,43,43,32,91,13,93,8,8,8,32,165,162,159,44,44,44,32,159,157,132,45,45,45,32,159,132,130,46,46,46,32,70,69,165,8,8,8,32,165,159,130,47,47,47,32,175,70,165,48,48,48,32,131,175,165,49,49,49,32,131,165,130,50,50,50,32,74,73,129,51,51,51,32,129,131,130,52,52,52,32,74,129,130,53,53,53,32,126,122,123,54,54,54,32,123,74,130,55,55,55,32,123,130,142,56,56,56,32,125,126,123,57,57,57,32,141,140,124,58,58,58,32,124,125,123,59,59,59,32,123,142,144,60,60,60,32,123,144,146,61,61,61,32,141,124,123,62,62,62,32,145,143,141,63,63,63,32,84,85,86,64,64,64,32,86,145,141,65,65,65,32,141,123,146,66,66,66,32,141,146,147,67,67,67,32,83,84,86,68,68,68,32,86,141,147,69,69,69,32,86,147,148,70,70,70,32,82,83,86,71,71,71,32,87,88,82,8,8,8,32,152,153,87,72,72,72,32,150,151,152,73,73,73,32,86,148,149,74,74,74,32,150,152,87,75,75,75,32,86,149,150,76,76,76,32,87,82,86,77,77,77,32,150,87,86,78,78,78,33,127,128,123,122,39,39,39,39,33,125,124,103,102,79,79,79,79,33,130,132,119,118,80,80,80,80,33,133,134,131,129,81,81,81,81,33,76,75,128,127,8,8,8,8,32,133,72,71,82,82,82,32,135,134,133,8,8,8,32,71,135,133,73,73,73,32,139,68,67,82,82,82,32,67,136,137,8,8,8,32,138,139,67,43,43,43,32,67,137,138,8,8,8,32,122,126,48,83,83,83,32,47,50,57,84,84,84,32,122,48,47,85,85,85,32,76,127,122,86,86,86,32,47,57,76,87,87,87,32,122,47,76,84,84,84,32,125,102,101,88,88,88,32,101,40,39,89,89,89,32,44,48,126,90,90,90,32,101,39,44,91,91,91,32,44,126,125,90,90,90,32,101,44,125,92,92,92,33,40,101,100,41,93,93,93,93,33,83,0,6,84,94,94,94,94,33,97,33,41,100,95,95,95,95,33,96,95,35,34,96,96,96,96,33,31,121,120,32,97,97,97,97,32,5,10,35,98,98,98,32,35,95,89,99,99,99,32,85,84,6,100,100,100,32,35,89,85,101,101,101,32,85,6,5,102,102,102,32,35,85,5,103,103,103,32,88,92,94,104,104,104,32,94,15,7,105,105,105,32,2,1,82,106,106,106,32,94,7,2,107,107,107,32,2,82,88,106,106,106,32,94,2,88,108,108,108,33,93,13,12,16,109,109,109,109,33,74,123,128,75,110,110,110,110,33,129,73,72,133,111,111,111,111,33,124,140,104,103,112,112,112,112,33,140,141,105,104,113,113,113,113,33,141,143,98,105,114,114,114,114,33,118,117,142,130,115,115,115,115,33,143,145,99,98,116,116,116,116,33,144,142,117,116,117,117,117,117,33,90,99,145,86,118,118,118,118,33,146,144,116,115,119,119,119,119,33,147,146,115,114,120,120,120,120,33,148,147,114,113,121,121,121,121,33,96,34,33,97,122,122,122,122,33,149,148,113,112,123,123,123,123,32,65,66,67,124,124,124,32,67,68,69,125,125,125,32,70,71,72,126,126,126,32,70,72,73,127,127,127,32,74,75,76,128,128,128,32,69,70,73,13,13,13,32,74,76,57,129,129,129,32,69,73,74,8,8,8,32,57,58,59,130,130,130,32,60,61,62,127,127,127,32,74,57,59,130,130,130,32,60,62,63,126,126,126,32,74,59,60,131,131,131,32,69,74,60,132,132,132,32,60,63,64,8,8,8,32,69,60,64,133,133,133,32,64,65,67,125,125,125,32,67,69,64,125,125,125,33,150,149,112,111,134,134,134,134,33,151,150,111,110,135,135,135,135,33,152,151,110,109,136,136,136,136,33,153,152,109,108,137,137,137,137,32,32,26,27,13,13,13,32,27,28,29,138,138,138,32,29,30,17,139,139,139,32,17,18,19,13,13,13,32,19,20,21,140,140,140,32,21,22,23,13,13,13,32,24,25,31,141,141,141,32,21,23,24,142,142,142,32,17,19,21,143,143,143,32,27,29,17,144,144,144,32,24,31,32,145,145,145,32,32,27,17,146,146,146,32,17,21,24,147,147,147,32,17,24,32,148,148,148,33,13,14,11,12,149,149,149,149,32,53,26,32,150,150,150,32,32,120,119,151,151,151,32,32,119,132,152,152,152,32,53,32,132,153,153,153,32,157,136,67,154,154,154,32,53,132,157,155,155,155,32,66,81,160,154,154,154,32,160,53,157,156,156,156,32,157,67,66,157,157,157,32,157,66,160,157,157,157,33,154,23,22,155,137,137,137,137,33,155,22,21,156,136,136,136,136,33,156,21,20,158,135,135,135,135,33,24,107,106,25,158,158,158,158,33,157,159,137,136,137,137,137,137,33,158,20,19,161,159,159,159,159,32,52,60,59,160,160,160,32,46,47,48,161,161,161,32,52,59,46,162,162,162,32,63,177,54,163,163,163,32,52,46,48,164,164,164,32,64,63,54,165,165,165,32,54,52,48,166,166,166,32,48,44,45,167,167,167,32,45,176,174,168,168,168,32,174,172,170,169,169,169,32,4,5,6,170,170,170,32,174,170,4,171,171,171,32,54,48,45,172,172,172,32,45,174,4,173,173,173,32,4,6,0,174,174,174,32,0,1,2,175,175,175,32,2,3,154,176,176,176,32,155,156,158,177,177,177,32,2,154,155,178,178,178,32,4,0,2,179,179,179,32,64,54,45,180,180,180,32,163,166,168,181,181,181,32,168,64,45,182,182,182,32,45,4,2,183,183,183,32,2,155,158,184,184,184,32,2,158,161,185,185,185,32,163,168,45,186,186,186,32,53,160,163,187,187,187,32,51,53,163,188,188,188,32,2,161,164,189,189,189,32,2,164,167,190,190,190,32,51,163,45,191,191,191,32,173,51,45,13,13,13,32,45,2,167,192,192,192,32,45,167,169,193,193,193,32,171,173,45,194,194,194,32,45,169,171,195,195,195,33,159,162,138,137,196,196,196,196,33,160,81,80,163,137,137,137,137,33,161,19,18,164,197,197,197,197,33,162,165,139,138,198,198,198,198,33,163,80,79,166,196,196,196,196,33,164,18,17,167,199,199,199,199,33,94,93,16,15,200,200,200,200,33,68,139,165,69,201,201,201,201,33,166,79,78,168,198,198,198,198,33,167,17,30,169,202,202,202,202,33,64,168,78,65,201,201,201,201,33,169,30,29,171,119,119,119,119,33,4,170,36,9,203,203,203,203,33,171,29,28,173,204,204,204,204,32,108,107,24,205,205,205,32,24,23,154,206,206,206,32,3,8,11,207,207,207,32,3,11,14,208,208,208,32,14,91,87,209,209,209,32,153,108,24,206,206,206,32,3,14,87,210,210,210,32,153,24,154,205,205,205,32,154,3,87,211,211,211,32,154,87,153,212,212,212,33,172,37,36,170,213,213,213,213,33,51,173,28,27,214,214,214,214,33,174,42,37,172,114,114,114,114,33,134,135,175,131,215,215,215,215,33,25,106,121,31,216,216,216,216,33,176,43,42,174,217,217,217,217,33,70,175,135,71,218,218,218,218,33,54,177,77,55,215,215,215,215,33,38,43,176,45,219,219,219,219,33,62,77,177,63,218,218,218,218,33,58,49,46,59,110,110,110,110,33,56,61,60,52,111,111,111,111,33,0,83,82,1,220,220,220,220]},"turnout_R_a":{"uvs":[],"vertices":[156.808,4,-42.988,164.932,4,-50.7141,156.808,0.999998,-42.988,130.559,0.999999,-20.6044,139.989,0.999999,-27.246,149.082,0.999999,-34.3423,157.816,0.999998,-41.8762,165.993,0.999998,-49.6531,66.363,0.999999,-30.5264,75.3838,0.999999,-34.0061,84.223,0.999998,-37.9243,92.8594,0.999998,-42.2714,101.272,0.999998,-47.0371,109.441,0.999998,-52.2098,117.346,0.999997,-57.7771,124.968,0.999997,-63.7256,132.289,0.999997,-70.0409,139.115,0.999997,-76.5313,129.725,0.999999,-21.852,139.095,0.999999,-28.4512,148.13,0.999998,-35.5022,164.932,0.999998,-50.7141,115.928,0.999999,-22.5844,125.279,0.999999,-28.5057,134.328,0.999998,-34.8788,143.054,0.999998,-41.6881,151.434,0.999998,-48.9174,159.274,0.999998,-56.3727,69.5643,0.999999,-21.5791,79.0204,0.999999,-25.2266,88.286,0.999999,-29.3338,97.339,0.999999,-33.8906,106.157,0.999998,-38.8862,114.72,0.999998,-44.3084,123.006,0.999998,-50.1443,130.997,0.999998,-56.3798,138.671,0.999997,-62.9997,145.835,0.999997,-69.8117,66.8684,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5679,93.5667,0.999998,-40.9481,102.043,0.999998,-45.7501,110.274,0.999998,-50.9622,118.239,0.999998,-56.5719,125.92,0.999997,-62.5657,133.297,0.999997,-68.9291,140.176,0.999997,-75.4703,129.725,4,-21.852,139.095,4,-28.4512,148.13,4,-35.5022,130.559,4,-20.6044,139.989,4,-27.246,149.082,4,-34.3423,157.816,4,-41.8762,165.993,4,-49.6531,115.928,4,-22.5844,125.279,4,-28.5057,134.328,4,-34.8788,143.054,4,-41.6881,151.434,4,-48.9174,159.274,4,-56.3727,69.5643,4,-21.5791,79.0204,4,-25.2266,88.286,4,-29.3338,97.339,4,-33.8906,106.157,4,-38.8862,114.72,4,-44.3084,123.006,4,-50.1443,130.997,4,-56.3798,138.671,4,-62.9997,145.835,4,-69.8117,66.8684,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5679,93.5667,4,-40.9481,102.043,4,-45.7501,110.274,4,-50.9622,118.239,4,-56.5719,125.92,4,-62.5657,133.297,4,-68.9291,140.176,4,-75.4703,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9243,92.8594,4,-42.2714,101.272,4,-47.0371,109.441,4,-52.2098,117.346,4,-57.7771,124.968,4,-63.7256,132.289,4,-70.0409,139.115,4,-76.5313,151.851,4,-51.0673,140.184,4,-62.7346,157.154,4,-58.492,147.609,4,-68.0379,0.250039,0.999999,-19.0114,9.66539,0.999999,-19.2487,19.3078,0.999999,-19.96,28.9038,0.999999,-21.1435,38.4301,0.999999,-22.7964,47.8638,0.999999,-24.9148,57.1823,0.999999,-27.4936,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,9.00004,0.999999,-19.0114,9.00004,4,-19.0114,109.601,4,-19,125.221,0.999999,-19,118.077,0.999999,-19,109.601,0.999999,-19,128.025,0.999999,-19,128.025,4,-19,125.221,4,-19,105.298,4,-19,93.1735,4,-19,81.5995,4,-19,70.4871,4,-19,61.7573,0.999999,-19,59.7588,0.999999,-19,61.7573,4,-19,49.3454,0.999999,-19,39.1853,0.999999,-19,29.2218,0.999999,-19,23.7784,4,-19,19.4024,4,-19,23.7784,0.999999,-19,9.67761,4,-19,9.00004,4,-19,0.250039,4,-19,0.25,-8.30515e-7,-19,130.559,-9.00646e-7,-20.6044,139.989,-0.00000119096,-27.246,149.082,-0.00000150115,-34.3423,157.816,-0.00000183047,-41.8762,165.993,-0.00000217041,-49.6531,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9243,92.8594,-0.00000184774,-42.2714,101.272,-0.00000205606,-47.0371,109.441,-0.00000228216,-52.2098,117.346,-0.00000252552,-57.7771,124.968,-0.00000278553,-63.7256,132.289,-0.00000306158,-70.0409,139.115,-0.00000334529,-76.5313,156.808,-4,-42.988,164.932,-4,-50.7141,156.808,-1,-42.988,130.559,-1,-20.6044,139.989,-1,-27.246,149.082,-1,-34.3423,157.816,-1,-41.8762,165.993,-1,-49.6531,66.363,-1,-30.5264,75.3838,-1,-34.0061,84.223,-1,-37.9243,92.8594,-1,-42.2714,101.272,-1,-47.0371,109.441,-1,-52.2098,117.346,-1,-57.7771,124.968,-1,-63.7256,132.289,-1,-70.0409,139.115,-1,-76.5313,129.725,-1,-21.852,139.095,-1,-28.4512,148.13,-1,-35.5022,164.932,-1,-50.7141,115.928,-1,-22.5844,125.279,-1,-28.5057,134.328,-1,-34.8788,143.054,-1,-41.6881,151.434,-1,-48.9174,159.274,-1,-56.3727,69.5643,-1,-21.5791,79.0204,-1,-25.2266,88.286,-1,-29.3338,97.339,-1,-33.8906,106.157,-1,-38.8862,114.72,-1,-44.3084,123.006,-1,-50.1443,130.997,-1,-56.3798,138.671,-1,-62.9997,145.835,-1,-69.8117,66.8684,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5679,93.5667,-1,-40.9481,102.043,-1,-45.7501,110.274,-1,-50.9622,118.239,-1,-56.5719,125.92,-1,-62.5657,133.297,-1,-68.9291,140.176,-1,-75.4703,129.725,-4,-21.852,139.095,-4,-28.4512,148.13,-4,-35.5022,130.559,-4,-20.6044,139.989,-4,-27.246,149.082,-4,-34.3423,157.816,-4,-41.8762,165.993,-4,-49.6531,115.928,-4,-22.5844,125.279,-4,-28.5057,134.328,-4,-34.8788,143.054,-4,-41.6881,151.434,-4,-48.9174,159.274,-4,-56.3727,69.5643,-4,-21.5791,79.0204,-4,-25.2266,88.286,-4,-29.3338,97.339,-4,-33.8906,106.157,-4,-38.8862,114.72,-4,-44.3084,123.006,-4,-50.1443,130.997,-4,-56.3798,138.671,-4,-62.9997,145.835,-4,-69.8117,66.8684,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5679,93.5667,-4,-40.9481,102.043,-4,-45.7501,110.274,-4,-50.9622,118.239,-4,-56.5719,125.92,-4,-62.5657,133.297,-4,-68.9291,140.176,-4,-75.4703,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9243,92.8594,-4,-42.2714,101.272,-4,-47.0371,109.441,-4,-52.2098,117.346,-4,-57.7771,124.968,-4,-63.7256,132.289,-4,-70.0409,139.115,-4,-76.5313,151.851,-4,-51.0673,140.184,-4,-62.7346,157.154,-4,-58.492,147.609,-4,-68.0379,151.851,-0.00000223222,-51.0673,140.184,-0.00000274222,-62.7346,157.154,-0.00000255676,-58.492,147.609,-0.00000297403,-68.0379,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,0.250039,-1,-19.0114,9.66539,-1,-19.2487,19.3078,-1,-19.96,28.9038,-1,-21.1435,38.4301,-1,-22.7964,47.8638,-1,-24.9148,57.1823,-1,-27.4936,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,9.00004,-8.31017e-7,-19.0114,9.00004,-1,-19.0114,9.00004,-4,-19.0114,128.025,-8.30516e-7,-19,109.601,-4,-19,125.221,-1,-19,118.077,-1,-19,109.601,-1,-19,128.025,-1,-19,128.025,-4,-19,125.221,-4,-19,105.298,-4,-19,93.1735,-4,-19,81.5995,-4,-19,70.4871,-4,-19,61.7573,-1,-19,59.7588,-1,-19,61.7573,-4,-19,49.3454,-1,-19,39.1853,-1,-19,29.2218,-1,-19,23.7784,-4,-19,19.4024,-4,-19,23.7784,-1,-19,9.67761,-4,-19,9.00004,-4,-19,0.250039,-4,-19],"normals":[-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534996,0,-0.844855,-1.12262e-14,1,-4.98865e-8,-2.01378e-9,1,-4.34445e-8,0,1,-4.98865e-8,-1.93861e-9,1,-4.48604e-8,1.80506e-10,1,-4.56916e-8,-2.06171e-9,1,-4.56455e-8,1.37714e-10,1,-4.43967e-8,-9.42067e-10,1,-4.02524e-8,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,3.37906e-9,1,-4.12318e-8,1.35172e-9,1,-4.13479e-8,-6.78548e-10,1,-4.13645e-8,2.51045e-9,1,-4.42373e-8,-4.72985e-9,1,-4.10987e-8,2.75902e-9,1,-4.29512e-8,6.48216e-10,1,-4.30349e-8,-1.62677e-9,1,-4.77945e-8,-3.05415e-9,1,-4.33853e-8,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.689069,0,-0.724696,0.575808,0,0.817585,0.615229,0,0.788348,0.65317,0,0.757211,0.689147,-5.07059e-7,0.724622,1.53516e-8,1,-1.46159e-8,-0.689144,0,-0.724624,-0.35989,0,-0.932995,-0.405242,0,-0.914209,-0.449607,0,-0.893227,-0.492901,0,-0.870086,-0.534994,0,-0.844856,2.3806e-8,1,-6.94077e-8,1.69538e-8,1,-1.19401e-8,-2.43728e-8,1,-8.17886e-8,-2.83562e-8,1,-8.04939e-8,0.575808,0,0.817585,0.615229,0,0.788348,0.653171,0,0.757211,0.689147,0,0.724622,-2.62771e-9,1,-8.01815e-8,-1.04234e-8,1,-5.2888e-8,9.81558e-10,1,-4.77594e-8,1.62811e-9,1,-4.48518e-8,0,1,-4.8034e-8,7.13915e-9,1,-5.39129e-8,-1.14e-9,1,-4.38361e-8,-3.28962e-9,1,-4.37273e-8,7.29344e-9,1,-4.5485e-8,5.0529e-9,1,-4.57882e-8,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,-1.71421e-8,1,-7.85686e-8,2.24578e-8,1,-9.95472e-9,2.19424e-8,1,-1.10446e-8,-2.84851e-8,1,-7.52021e-8,-6.42811e-8,1,-1.47428e-7,-7.14385e-8,1,-1.44097e-7,-7.84226e-8,1,-1.40419e-7,-2.40076e-8,1,-8.42456e-8,1.8261e-8,1,-1.73858e-8,-0.405242,0,-0.914209,-0.449607,0,-0.893226,-0.534994,0,-0.844856,-0.575806,0,-0.817586,-0.615228,0,-0.788349,-0.653173,0,-0.757209,-0.813734,0,-0.581237,0.581237,0,0.813734,0.707109,0,-0.707104,0.707105,0,-0.707108,0.707108,0,-0.707106,0.707107,0,-0.707107,0.707105,0,-0.707108,0.707107,-0.0000165252,-0.707107,0.707109,0.0000121557,-0.707105,0.707107,0,0.707107,0.707105,0,-0.707108,0.707092,0.0000107896,-0.707122,0.707109,-0.0000134666,-0.707105,0.707105,0.000039978,-0.707108,-0.313679,0,-0.949529,0,1,0,2.65033e-9,1,-4.04452e-8,-1.69439e-9,1,-4.35346e-8,5.66244e-10,1,-4.15627e-8,-1.60987e-10,1,-3.94962e-8,0,1,-4.22264e-8,1.10567e-9,1,-4.28749e-8,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0,0,-1,-0.073564,0,-0.99729,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.2191,0,-0.975702,-0.266711,0,-0.963776,-0.313679,0,-0.949529,-2.01976e-14,1,-9.24436e-8,-1.44413e-8,1,-3.93227e-7,0,1,0,0,1,-2.48357e-7,8.87305e-9,1,-2.89678e-7,-5.42823e-9,1,-8.0233e-8,-9.35859e-9,1,-7.987e-8,-1.32662e-8,1,-7.93148e-8,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.335866,0,-0.94191,1.55275e-8,1,-9.17037e-7,-0.335866,0,-0.94191,-0.999994,0.00000982353,-0.00342704,-1,0,-0.00000259724,0.534996,0,0.844854,0.534996,0,0.844854,0.492898,0,0.870087,0.122409,0,0.99248,-5.60031e-8,1,-7.84047e-8,-3.92482e-8,1,-7.32504e-8,1.23404e-7,1,2.39221e-8,5.17879e-9,1,-2.95536e-8,-5.13503e-8,1,-9.95434e-9,1.05808e-8,1,-6.03808e-8,7.48412e-15,-1,3.32576e-8,-1.97224e-9,-1,3.71499e-8,0,-1,4.1799e-8,-1.82364e-9,-1,3.43507e-8,-1.80506e-10,-1,4.56916e-8,2.06171e-9,-1,4.56455e-8,-4.57433e-9,-1,4.3304e-8,-2.9771e-9,-1,4.39838e-8,4.89768e-9,-1,4.60248e-8,-1.35172e-9,-1,4.13479e-8,6.78548e-10,-1,4.13645e-8,1.16194e-9,-1,5.07199e-8,3.64912e-9,-1,5.06018e-8,6.12774e-9,-1,5.03618e-8,-7.2024e-10,-1,4.78166e-8,1.30142e-9,-1,3.82356e-8,-6.19593e-9,-1,4.70484e-8,0.689147,5.07059e-7,0.724622,-3.07033e-8,-1,2.92319e-8,0,-1,0,7.4569e-8,-1,1.41893e-7,8.14408e-8,-1,1.38062e-7,-3.14037e-8,-1,2.70887e-8,-1.58023e-8,-1,3.59186e-8,7.3317e-9,-1,3.40736e-8,-1.56263e-8,-1,6.78673e-8,9.14892e-9,-1,2.71325e-8,1.14e-9,-1,4.38361e-8,3.28962e-9,-1,4.37273e-8,5.43117e-9,-1,4.35133e-8,7.55968e-9,-1,4.31944e-8,0,-1,0,-4.38849e-8,-1,2.20892e-8,-4.15079e-8,-1,2.62846e-8,-3.87319e-8,-1,3.02262e-8,-3.65219e-8,-1,3.47717e-8,-0.534994,0,-0.844856,-0.575806,0,-0.817586,0,0,0,0.707109,-0.0000122749,-0.707105,0.707108,0.00000206432,-0.707106,0.707105,-0.0000431584,-0.707108,0.707107,0,-0.707107,0.707106,0,-0.707108,0.013,-0.999831,-0.0129999,0.707108,0.0000120428,-0.707105,0,-1,0,-2.65033e-9,-1,4.04452e-8,-3.31684e-10,-1,5.27921e-8,7.43291e-10,-1,5.15428e-8,2.49808e-9,-1,4.65707e-8,0,-1,4.62218e-8,1.08392e-9,-1,5.03428e-8,0,0,-1,0,-1,0,1.87172e-8,-1,1.5974e-7,2.65325e-8,-1,1.5863e-7,-0.266711,0,-0.963776,-0.999994,-0.00000982353,-0.00342704,0,-1,0,0,-1,0,1.84026e-7,-1,2.57468e-7,-8.68334e-9,-1,4.95528e-8,-1.40041e-7,-1,1.94647e-7],"metadata":{"generator":"io_three","normals":214,"uvs":0,"vertices":315,"version":3,"faces":328,"type":"Geometry"},"faces":[33,50,0,2,20,0,0,0,0,33,20,19,49,50,1,1,1,1,33,19,18,48,49,2,2,2,2,33,18,121,126,48,3,3,3,3,32,22,123,122,4,4,4,32,18,23,22,5,5,5,32,22,122,121,6,6,6,32,22,121,18,7,7,7,33,24,23,18,19,8,8,8,8,33,25,24,19,20,9,9,9,9,33,26,25,20,2,10,10,10,10,33,27,26,2,21,11,11,11,11,33,29,28,62,63,12,12,12,12,33,26,27,61,60,13,13,13,13,33,25,26,60,59,14,14,14,14,33,24,25,59,58,15,15,15,15,33,23,24,58,57,16,16,16,16,33,22,23,57,56,17,17,17,17,33,39,38,28,29,18,18,18,18,33,40,39,29,30,19,19,19,19,33,41,40,30,31,20,20,20,20,33,42,41,31,32,21,21,21,21,33,43,42,32,33,22,22,22,22,33,44,43,33,34,23,23,23,23,33,45,44,34,35,24,24,24,24,33,46,45,35,36,25,25,25,25,33,47,46,36,37,26,26,26,26,33,46,47,81,80,27,27,27,27,33,45,46,80,79,28,28,28,28,33,44,45,79,78,29,29,29,29,33,43,44,78,77,30,30,30,30,33,42,43,77,76,31,31,31,31,33,41,42,76,75,32,32,32,32,33,40,41,75,74,33,33,33,33,33,39,40,74,73,34,34,34,34,33,38,39,73,72,35,35,35,35,33,155,154,13,14,36,36,36,36,33,156,155,14,15,37,37,37,37,33,157,156,15,16,38,38,38,38,33,158,157,16,17,39,39,39,39,33,144,145,4,3,40,40,40,40,33,145,146,5,4,41,41,41,41,33,146,147,6,5,42,42,42,42,33,147,148,7,6,43,43,43,43,33,1,0,54,55,44,44,44,44,33,2,0,1,21,45,45,45,45,33,150,149,8,9,46,46,46,46,33,151,150,9,10,47,47,47,47,33,152,151,10,11,48,48,48,48,33,153,152,11,12,49,49,49,49,33,154,153,12,13,50,50,50,50,33,48,126,125,51,51,51,51,51,33,49,48,51,52,52,52,52,52,33,50,49,52,53,53,53,53,53,33,0,50,53,54,54,54,54,54,33,3,4,52,51,55,55,55,55,33,4,5,53,52,56,56,56,56,33,5,6,54,53,57,57,57,57,33,6,7,55,54,58,58,58,58,33,63,62,130,129,59,59,59,59,33,64,63,129,128,60,60,60,60,33,65,64,128,127,61,61,61,61,32,56,66,65,62,62,62,32,65,127,120,63,63,63,32,65,120,56,64,64,64,33,67,66,56,57,65,65,65,65,33,68,67,57,58,66,66,66,66,33,69,68,58,59,67,67,67,67,33,70,69,59,60,68,68,68,68,33,30,29,63,64,69,69,69,69,33,31,30,64,65,70,70,70,70,33,32,31,65,66,71,71,71,71,33,33,32,66,67,72,72,72,72,33,34,33,67,68,73,73,73,73,33,35,34,68,69,74,74,74,74,33,36,35,69,70,75,75,75,75,33,37,36,70,71,76,76,76,76,33,83,82,72,73,77,77,77,77,33,84,83,73,74,78,78,78,78,33,85,84,74,75,79,79,79,79,33,86,85,75,76,80,80,80,80,33,87,86,76,77,81,81,81,81,33,88,87,77,78,82,82,82,82,33,89,88,78,79,83,83,83,83,33,90,89,79,80,84,84,84,84,33,91,90,80,81,85,85,85,85,33,9,8,82,83,46,46,46,46,33,10,9,83,84,86,86,86,86,33,11,10,84,85,87,87,87,87,33,12,11,85,86,49,49,49,49,33,13,12,86,87,88,88,88,88,33,14,13,87,88,89,89,89,89,33,15,14,88,89,90,90,90,90,33,16,15,89,90,91,91,91,91,33,17,16,90,91,39,39,39,39,33,94,257,255,92,92,92,92,92,33,93,256,258,95,93,93,93,93,33,92,255,256,93,94,94,94,94,32,37,71,95,95,95,95,32,258,158,17,96,96,96,32,17,91,81,97,97,97,32,17,81,47,97,97,97,32,37,95,258,98,98,98,32,258,17,47,99,99,99,32,37,258,47,100,100,100,32,21,1,55,97,97,97,32,55,7,148,101,101,101,32,257,94,61,102,102,102,32,257,61,27,102,102,102,32,21,55,148,103,103,103,32,257,27,21,104,104,104,32,21,148,257,105,105,105,33,28,131,133,62,106,106,106,106,32,103,139,136,107,107,107,33,104,103,136,135,108,108,108,108,33,105,104,135,134,109,109,109,109,33,106,105,134,132,110,110,110,110,32,28,38,106,111,111,111,32,106,132,131,112,112,112,32,106,131,28,113,113,113,33,106,38,72,110,114,114,114,114,33,105,106,110,109,115,115,115,115,33,104,105,109,108,116,116,116,116,33,103,104,108,107,117,117,117,117,33,288,259,96,118,118,118,118,118,33,261,260,97,98,119,119,119,119,33,262,261,98,99,120,120,120,120,33,263,262,99,100,121,121,121,121,33,264,263,100,101,122,122,122,122,33,265,264,101,102,123,123,123,123,33,149,265,102,8,124,124,124,124,32,62,133,130,125,125,125,33,119,111,142,141,107,107,107,107,33,113,112,140,138,126,126,126,126,32,107,114,113,127,127,127,32,113,138,137,128,128,128,32,113,137,107,129,129,129,33,115,114,107,108,107,107,107,107,33,116,115,108,109,130,130,130,130,33,117,116,109,110,131,131,131,131,33,82,117,110,72,132,132,132,132,33,118,96,111,119,118,118,118,118,33,98,97,112,113,119,119,119,119,33,99,98,113,114,133,133,133,133,33,100,99,114,115,134,134,134,134,33,101,100,115,116,122,122,122,122,33,102,101,116,117,123,123,123,123,33,8,102,117,82,124,124,124,124,33,97,118,119,112,135,135,135,135,33,112,119,141,140,136,136,136,136,33,260,288,118,97,137,137,137,137,32,259,143,142,138,138,138,32,142,111,96,139,139,139,32,142,96,259,139,139,139,33,125,124,3,51,140,140,140,140,33,124,291,144,3,141,141,141,141,33,120,123,22,56,142,142,142,142,33,137,139,103,107,143,143,143,143,32,93,95,71,144,144,144,32,60,61,94,145,145,145,32,60,94,92,146,146,146,32,93,71,70,147,147,147,32,60,92,93,148,148,148,32,93,70,60,149,149,149,33,161,159,209,179,0,0,0,0,33,179,209,208,178,1,1,1,1,33,178,208,207,177,2,2,2,2,33,177,207,298,293,3,3,3,3,32,181,294,295,150,150,150,32,181,182,177,151,151,151,32,177,293,294,152,152,152,32,177,294,181,153,153,153,33,183,178,177,182,154,154,154,154,33,184,179,178,183,155,155,155,155,33,185,161,179,184,156,156,156,156,33,186,180,161,185,157,157,157,157,33,188,222,221,187,12,12,12,12,33,185,219,220,186,13,13,13,13,33,184,218,219,185,14,14,14,14,33,183,217,218,184,15,15,15,15,33,182,216,217,183,16,16,16,16,33,181,215,216,182,17,17,17,17,33,198,188,187,197,158,158,158,158,33,199,189,188,198,159,159,159,159,33,200,190,189,199,160,160,160,160,33,201,191,190,200,161,161,161,161,33,202,192,191,201,162,162,162,162,33,203,193,192,202,163,163,163,163,33,204,194,193,203,164,164,164,164,33,205,195,194,204,165,165,165,165,33,206,196,195,205,166,166,166,166,33,205,239,240,206,27,27,27,27,33,204,238,239,205,28,28,28,28,33,203,237,238,204,29,29,29,29,33,202,236,237,203,30,30,30,30,33,201,235,236,202,31,31,31,31,33,200,234,235,201,32,32,32,32,33,199,233,234,200,33,33,33,33,33,198,232,233,199,34,34,34,34,33,197,231,232,198,35,35,35,35,33,155,173,172,154,36,36,36,36,33,156,174,173,155,37,37,37,37,33,157,175,174,156,38,38,38,38,33,158,176,175,157,39,39,39,39,33,144,162,163,145,40,40,40,40,33,145,163,164,146,41,41,41,41,33,146,164,165,147,42,42,42,42,33,147,165,166,148,167,167,167,167,33,213,159,160,214,168,168,168,168,33,161,180,160,159,45,45,45,45,33,150,168,167,149,46,46,46,46,33,151,169,168,150,47,47,47,47,33,152,170,169,151,48,48,48,48,33,153,171,170,152,49,49,49,49,33,154,172,171,153,50,50,50,50,33,207,210,297,298,169,169,169,169,33,208,211,210,207,170,170,170,170,33,209,212,211,208,171,171,171,171,33,159,213,212,209,172,172,172,172,33,162,210,211,163,55,55,55,55,33,163,211,212,164,56,56,56,56,33,164,212,213,165,57,57,57,57,33,165,213,214,166,58,58,58,58,33,222,301,302,221,169,169,169,169,33,223,300,301,222,173,173,173,173,33,224,299,300,223,174,174,174,174,32,224,225,215,175,175,175,32,215,292,299,169,169,169,32,215,299,224,176,176,176,33,226,216,215,225,177,177,177,177,33,227,217,216,226,178,178,178,178,33,228,218,217,227,179,179,179,179,33,229,219,218,228,180,180,180,180,33,189,223,222,188,69,69,69,69,33,190,224,223,189,70,70,70,70,33,191,225,224,190,71,71,71,71,33,192,226,225,191,72,72,72,72,33,193,227,226,192,73,73,73,73,33,194,228,227,193,74,74,74,74,33,195,229,228,194,75,75,75,75,33,196,230,229,195,76,76,76,76,33,242,232,231,241,181,181,181,181,33,243,233,232,242,169,169,169,169,33,244,234,233,243,182,182,182,182,33,245,235,234,244,181,181,181,181,33,246,236,235,245,183,183,183,183,33,247,237,236,246,169,169,169,169,33,248,238,237,247,184,184,184,184,33,249,239,238,248,181,181,181,181,33,250,240,239,249,185,185,185,185,33,168,242,241,167,46,46,46,46,33,169,243,242,168,86,86,86,86,33,170,244,243,169,87,87,87,87,33,171,245,244,170,49,49,49,49,33,172,246,245,171,186,186,186,186,33,173,247,246,172,187,187,187,187,33,174,248,247,173,90,90,90,90,33,175,249,248,174,91,91,91,91,33,176,250,249,175,39,39,39,39,33,253,251,255,257,92,92,92,92,33,252,254,258,256,93,93,93,93,33,251,252,256,255,94,94,94,94,32,206,240,250,97,97,97,32,250,176,158,188,188,188,32,258,254,230,98,98,98,32,258,230,196,98,98,98,32,206,250,158,97,97,97,32,258,196,206,189,189,189,32,206,158,258,190,190,190,32,186,220,253,102,102,102,32,257,148,166,191,191,191,32,166,214,160,192,192,192,32,166,160,180,97,97,97,32,186,253,257,193,193,193,32,166,180,186,194,194,194,32,186,257,166,195,195,195,33,187,221,305,303,106,106,106,106,32,273,308,311,196,196,196,33,274,307,308,273,197,197,197,197,33,275,306,307,274,198,198,198,198,33,276,304,306,275,199,199,199,199,32,276,197,187,200,200,200,32,187,303,304,201,201,201,32,187,304,276,202,202,202,33,276,280,231,197,114,114,114,114,33,275,279,280,276,115,115,115,115,33,274,278,279,275,116,116,116,116,33,273,277,278,274,117,117,117,117,33,288,289,266,259,203,203,203,203,33,261,268,267,260,119,119,119,119,33,262,269,268,261,120,120,120,120,33,263,270,269,262,121,121,121,121,33,264,271,270,263,122,122,122,122,33,265,272,271,264,123,123,123,123,33,149,167,272,265,124,124,124,124,32,221,302,305,196,196,196,33,290,313,314,281,169,169,169,169,33,283,310,312,282,181,181,181,181,32,283,284,277,204,204,204,32,277,309,310,169,169,169,32,277,310,283,169,169,169,33,285,278,277,284,169,169,169,169,33,286,279,278,285,169,169,169,169,33,287,280,279,286,205,205,205,205,33,241,231,280,287,206,206,206,206,33,289,290,281,266,203,203,203,203,33,268,283,282,267,119,119,119,119,33,269,284,283,268,133,133,133,133,33,270,285,284,269,134,134,134,134,33,271,286,285,270,122,122,122,122,33,272,287,286,271,207,207,207,207,33,167,241,287,272,124,124,124,124,33,267,282,290,289,135,135,135,135,33,282,312,313,290,169,169,169,169,33,260,267,289,288,137,137,137,137,32,314,143,259,208,208,208,32,266,281,314,139,139,139,32,259,266,314,139,139,139,33,297,210,162,296,140,140,140,140,33,296,162,144,291,141,141,141,141,33,292,215,181,295,142,142,142,142,33,309,277,273,311,143,143,143,143,32,251,253,220,209,209,209,32,229,230,254,209,209,209,32,229,254,252,210,210,210,32,251,220,219,211,211,211,32,229,252,251,212,212,212,32,251,219,229,213,213,213]},"pier":{"vertices":[7.5,-4,-47.5,7.5,-4,47.5,-7.5,-4,47.5,-7.49999,-4,-47.5,7.5,61.5,-47.5,-7.5,61.5,-47.5,7.5,4,35.5,7.49999,56,35.5,7.5,56,-35.5,7.49999,61.5,47.5,7.5,4,-35.5,-7.5,61.5,47.5,-7.5,4,35.5,-7.5,4,-35.5,-7.5,56,-35.5,-7.5,56,35.5,-7.5,-4,19.5,-7.5,4,19.5,-7.5,-4,-19.5,-7.5,4,-19.5,7.5,-4,-19.5,7.5,4,-19.5,7.5,-4,19.5,7.5,4,19.5],"faces":[33,0,20,18,3,0,0,0,0,33,4,0,3,5,1,1,1,1,33,1,9,11,2,2,2,2,2,32,1,22,23,3,3,3,32,1,23,6,4,4,4,32,21,20,0,5,5,5,32,10,21,0,6,6,6,32,9,1,6,7,7,7,32,9,6,7,8,8,8,32,10,0,4,9,9,9,32,9,7,8,10,10,10,32,8,10,4,11,11,11,32,4,9,8,12,12,12,32,3,18,19,13,13,13,32,3,19,13,14,14,14,32,17,16,2,15,15,15,32,12,17,2,16,16,16,32,5,3,13,17,17,17,32,5,13,14,18,18,18,32,12,2,11,19,19,19,32,5,14,15,20,20,20,32,15,12,11,21,21,21,32,15,11,5,22,22,22,33,4,5,11,9,23,23,23,23,33,14,13,10,8,24,24,24,24,33,8,7,15,14,25,25,25,25,33,13,19,21,10,26,26,26,26,33,7,6,12,15,27,27,27,27,33,19,18,20,21,28,28,28,28,33,23,17,12,6,29,29,29,29,33,16,22,1,2,30,30,30,30,33,22,16,17,23,31,31,31,31],"uvs":[],"metadata":{"generator":"io_three","uvs":0,"vertices":24,"version":3,"normals":32,"type":"Geometry","faces":32},"normals":[-8.66186e-14,-1,1.36239e-7,0.00000152588,2.91198e-7,-1,-0.00000165304,-1.45599e-7,1,1,0,0,1,2.08616e-7,5.96046e-8,1,-1.19209e-7,1.6241e-14,1,-3.27825e-7,5.96047e-8,1,6.55196e-8,-3.57932e-8,1,1.83399e-8,1.90276e-7,1,-5.09597e-8,-1.24973e-7,1,3.16263e-7,5.37281e-8,1,0,1.1921e-7,1,-8.48731e-8,8.03095e-8,-1,-5.96047e-8,-3.40598e-8,-1,-7.45058e-8,-2.98023e-8,-1,0,-3.40598e-8,-1,1.19209e-7,-2.84217e-14,-1,-3.63998e-8,-5.52064e-8,-1,-2.75098e-8,-1.26087e-8,-1,-2.18399e-8,-9.4033e-8,-1,-8.79187e-8,-4.02961e-8,-1,-3.66798e-8,-2.29249e-8,-1,-1.00389e-8,-3.51354e-8,2.04238e-13,1,-8.03095e-8,0,0,1,0,-1,5.37281e-8,0,1,-1.19209e-7,0,0,-1,0,4.76837e-7,1,0,1,-2.38419e-7,-4.33093e-14,-1,1.36239e-7,6.35783e-8,-1.19209e-7,-1]},"eight_L_A":{"uvs":[],"metadata":{"generator":"io_three","uvs":0,"vertices":182,"version":3,"normals":229,"type":"Geometry","faces":312},"faces":[33,37,0,1,40,0,0,0,0,32,41,43,2,1,1,1,32,3,4,5,2,2,2,32,41,2,3,3,3,3,32,16,0,37,4,4,4,32,41,3,5,5,5,5,32,15,16,37,6,6,6,32,41,5,6,7,7,7,32,14,15,37,8,8,8,32,41,6,7,9,9,9,32,13,14,37,10,10,10,32,41,7,8,11,11,11,32,12,13,37,12,12,12,32,11,12,37,13,13,13,32,9,10,11,14,14,14,32,8,9,11,15,15,15,32,41,8,11,16,16,16,32,11,37,41,17,17,17,32,59,1,0,18,18,18,32,16,31,36,19,19,19,32,170,59,0,20,20,20,32,16,36,117,21,21,21,32,170,0,16,22,22,22,32,16,117,170,23,23,23,33,42,40,1,59,24,24,24,24,33,2,43,60,17,25,25,25,25,33,2,17,18,3,26,26,26,26,33,4,3,18,19,27,27,27,27,32,106,20,21,28,28,28,32,106,21,5,29,29,29,32,19,22,105,30,30,30,32,106,5,4,31,31,31,32,4,19,105,32,32,32,32,4,105,106,33,33,33,32,21,23,24,34,34,34,32,24,35,8,35,35,35,32,7,6,5,36,36,36,32,24,8,7,35,35,35,32,5,21,24,37,37,37,32,24,7,5,38,38,38,32,109,9,8,39,39,39,32,8,35,34,40,40,40,32,120,109,8,41,41,41,32,8,34,120,42,42,42,32,10,9,109,43,43,43,32,109,117,36,44,44,44,32,36,25,10,45,45,45,32,109,36,10,46,46,46,33,11,10,25,26,47,47,47,47,33,26,27,12,11,48,48,48,48,32,27,28,29,49,49,49,32,29,30,15,50,50,50,32,15,14,13,51,51,51,32,13,12,27,52,52,52,32,27,29,15,53,53,53,32,15,13,27,54,54,54,33,16,15,30,31,55,55,55,55,32,60,76,32,56,56,56,32,32,33,22,57,57,57,32,22,19,18,24,24,24,32,18,17,60,58,58,58,32,32,22,18,57,57,57,32,32,18,60,59,59,59,33,120,34,20,106,60,60,60,60,32,20,34,35,49,49,49,32,35,24,23,49,49,49,32,23,21,20,57,57,57,32,35,23,20,57,57,57,33,105,22,33,123,61,61,61,61,32,27,26,25,24,24,24,32,25,36,31,62,62,62,32,31,30,29,63,63,63,32,28,27,25,49,49,49,32,31,29,28,64,64,64,32,28,25,31,65,65,65,33,180,126,32,76,66,66,66,66,33,33,32,126,123,67,67,67,67,33,37,40,39,38,68,68,68,68,33,41,42,40,37,69,69,69,69,32,43,41,37,70,70,70,32,37,38,58,71,71,71,32,57,56,55,72,72,72,32,37,58,57,73,73,73,32,44,43,37,74,74,74,32,47,46,45,2,2,2,32,45,44,37,75,75,75,32,37,57,55,76,76,76,32,55,54,53,77,77,77,32,53,52,51,78,78,78,32,51,50,49,79,79,79,32,48,47,45,80,80,80,32,51,49,48,81,81,81,32,37,55,53,82,82,82,32,53,51,48,83,83,83,32,48,45,37,84,84,84,32,37,53,48,85,85,85,32,38,39,59,86,86,86,32,169,81,75,87,87,87,32,169,75,58,88,88,88,32,38,59,170,89,89,89,32,169,58,38,90,90,90,32,170,169,38,91,91,91,33,42,59,39,40,92,92,92,92,33,44,61,60,43,93,93,93,93,33,44,45,62,61,94,94,94,94,33,46,63,62,45,95,95,95,95,32,65,64,158,96,96,96,32,157,66,63,97,97,97,32,157,63,46,98,98,98,32,47,65,158,99,99,99,32,157,46,47,100,100,100,32,158,157,47,101,101,101,32,67,65,47,102,102,102,32,47,48,49,49,49,49,32,68,67,47,103,103,103,32,50,80,68,104,104,104,32,68,47,49,105,105,105,32,49,50,68,104,104,104,32,50,51,161,106,106,106,32,174,79,80,107,107,107,32,50,161,174,108,108,108,32,174,80,50,109,109,109,32,161,51,52,110,110,110,32,52,69,81,111,111,111,32,81,169,161,112,112,112,32,52,81,161,113,113,113,33,53,70,69,52,114,114,114,114,33,70,53,54,71,115,115,115,115,32,73,72,71,116,116,116,32,71,54,55,117,117,117,32,56,57,74,118,118,118,32,71,55,56,119,119,119,32,74,73,71,120,120,120,32,71,56,74,121,121,121,33,58,75,74,57,122,122,122,122,32,77,76,60,123,123,123,32,60,61,62,124,124,124,32,62,63,66,125,125,125,32,66,78,77,49,49,49,32,77,60,62,126,126,126,32,62,66,77,127,127,127,33,174,158,64,79,128,128,128,128,32,80,79,64,49,49,49,32,64,65,67,49,49,49,32,67,68,80,49,49,49,32,64,67,80,49,49,49,33,157,177,78,66,129,129,129,129,32,73,74,75,49,49,49,32,75,81,69,130,130,130,32,69,70,71,131,131,131,32,72,73,75,132,132,132,32,69,71,72,133,133,133,32,75,69,72,134,134,134,33,180,76,77,181,135,135,135,135,33,78,177,181,77,136,136,136,136,33,127,130,83,82,0,0,0,0,32,133,131,127,70,70,70,32,127,82,98,137,137,137,32,97,96,95,138,138,138,32,127,98,97,139,139,139,32,84,133,127,140,140,140,32,87,86,85,141,141,141,32,85,84,127,142,142,142,32,127,97,95,143,143,143,32,95,94,93,144,144,144,32,93,92,91,145,145,145,32,91,90,89,146,146,146,32,88,87,85,147,147,147,32,91,89,88,148,148,148,32,127,95,93,149,149,149,32,93,91,88,150,150,150,32,88,85,127,151,151,151,32,127,93,88,152,152,152,32,82,83,149,18,18,18,32,117,125,116,153,153,153,32,117,116,98,154,154,154,32,82,149,170,20,20,20,32,117,98,82,155,155,155,32,170,117,82,156,156,156,33,132,149,83,130,157,157,157,157,33,84,99,150,133,25,25,25,25,33,84,85,100,99,158,158,158,158,33,86,101,100,85,27,27,27,27,32,103,102,106,28,28,28,32,105,104,101,159,159,159,32,105,101,86,32,32,32,32,87,103,106,160,160,160,32,105,86,87,161,161,161,32,106,105,87,162,162,162,32,107,103,87,128,128,128,32,87,88,89,34,34,34,32,108,107,87,163,163,163,32,90,122,108,35,35,35,32,108,87,89,38,38,38,32,89,90,108,35,35,35,32,90,91,109,39,39,39,32,120,121,122,42,42,42,32,90,109,120,164,164,164,32,120,122,90,40,40,40,32,109,91,92,43,43,43,32,92,110,125,45,45,45,32,125,117,109,44,44,44,32,92,125,109,165,165,165,33,93,111,110,92,47,47,47,47,33,111,93,94,112,48,48,48,48,32,114,113,112,166,166,166,32,112,94,95,52,52,52,32,96,97,115,167,167,167,32,112,95,96,168,168,168,32,115,114,112,169,169,169,32,112,96,115,170,170,170,33,98,116,115,97,171,171,171,171,32,118,171,150,172,172,172,32,150,99,100,173,173,173,32,100,101,104,174,174,174,32,104,119,118,34,34,34,32,118,150,100,175,175,175,32,100,104,118,176,176,176,33,120,106,102,121,102,102,102,102,32,122,121,102,177,177,177,32,102,103,107,177,177,177,32,107,108,122,177,177,177,32,102,107,122,34,34,34,33,105,123,119,104,178,178,178,178,32,114,115,116,34,34,34,32,116,125,110,179,179,179,32,110,111,112,180,180,180,32,113,114,116,181,181,181,32,110,112,113,182,182,182,32,116,110,113,183,183,183,33,180,171,118,126,66,66,66,66,33,119,123,126,118,67,67,67,67,32,124,117,109,184,184,184,33,127,128,129,130,68,68,68,68,33,131,127,130,132,69,69,69,69,32,131,133,134,185,185,185,32,135,136,137,141,141,141,32,131,134,135,186,186,186,32,148,128,127,187,187,187,32,131,135,137,188,188,188,32,147,148,127,189,189,189,32,131,137,138,190,190,190,32,146,147,127,191,191,191,32,131,138,139,192,192,192,32,145,146,127,193,193,193,32,131,139,140,194,194,194,32,144,145,127,195,195,195,32,143,144,127,196,196,196,32,141,142,143,197,197,197,32,140,141,143,198,198,198,32,131,140,143,199,199,199,32,143,127,131,200,200,200,32,149,129,128,86,86,86,32,148,168,179,87,87,87,32,170,149,128,89,89,89,32,148,179,169,201,201,201,32,170,128,148,202,202,202,32,148,169,170,203,203,203,33,132,130,129,149,204,204,204,204,33,134,133,150,151,93,93,93,93,33,134,151,152,135,205,205,205,205,33,136,135,152,153,206,206,206,206,32,158,154,155,96,96,96,32,158,155,137,207,207,207,32,153,156,157,208,208,208,32,158,137,136,209,209,209,32,136,153,157,98,98,98,32,136,157,158,210,210,210,32,155,159,160,49,49,49,32,160,176,140,104,104,104,32,139,138,137,211,211,211,32,160,140,139,104,104,104,32,137,155,160,212,212,212,32,160,139,137,105,105,105,32,161,141,140,106,106,106,32,140,176,175,109,109,109,32,174,161,140,213,213,213,32,140,175,174,107,107,107,32,142,141,161,110,110,110,32,161,169,179,112,112,112,32,179,162,142,111,111,111,32,161,179,142,214,214,214,33,143,142,162,163,114,114,114,114,33,163,164,144,143,115,115,115,115,32,164,165,166,177,177,177,32,166,167,147,215,215,215,32,147,146,145,216,216,216,32,145,144,164,117,117,117,32,164,166,147,217,217,217,32,147,145,164,218,218,218,33,148,147,167,168,219,219,219,219,32,150,171,172,220,220,220,32,172,173,156,177,177,177,32,156,153,152,204,204,204,32,152,151,150,221,221,221,32,172,156,152,177,177,177,32,172,152,150,222,222,222,33,174,175,154,158,206,206,206,206,32,154,175,176,34,34,34,32,176,160,159,177,177,177,32,159,155,154,177,177,177,32,176,159,154,177,177,177,33,157,156,173,177,223,223,223,223,32,164,163,162,204,204,204,32,162,179,168,224,224,224,32,168,167,166,225,225,225,32,165,164,162,177,177,177,32,168,166,165,226,226,226,32,165,162,168,227,227,227,33,180,181,172,171,135,135,135,135,33,173,172,181,177,136,136,136,136,32,178,161,169,228,228,228],"vertices":[90.5878,1,0.820373,90.5878,4,0.820373,43.9918,1,5.16438,8.99998,1,9.49713,0.249979,1,9.49713,0.249964,1,17.511,0.25,1,17.511,9.73972,1,17.7501,17.1888,1,18.2996,34.4812,1,16.4565,45.2417,1,14.5894,41.4173,1,13.7306,45.553,1,13.013,56.7352,1,10.502,67.7808,1,7.4453,77.4427,1,4.25346,79.6142,1,5.09113,43.9918,4,5.16438,8.99998,4,9.49713,0.249979,4,9.49713,0.24996,4,19,0.249963,4,17.511,0.249997,4,6.50002,0.25,4,17.511,9.73972,4,17.7501,45.2417,4,14.5894,41.4173,4,13.7306,45.553,4,13.013,56.7352,4,10.502,67.7808,4,7.4453,77.4427,4,4.25346,79.6142,4,5.09113,9.24999,4,8,0.249993,4,6.5,8.99996,4,19,17.1888,4,18.2996,79.1685,4,5.26306,88.6447,1,-4.37114e-8,90.5878,1,-0.820374,90.5878,4,-0.820374,88.6447,4,-1.74846e-7,88.6447,1,-4.37114e-8,88.6447,4,-1.74846e-7,64.6898,1,-4.37114e-8,43.9918,1,-5.16438,8.99998,1,-9.49713,0.249979,1,-9.49713,0.249964,0.999999,-17.511,0.25,0.999999,-17.511,9.73972,0.999999,-17.7501,17.1888,0.999999,-18.2996,34.4812,0.999999,-16.4565,45.2417,0.999999,-14.5894,41.4173,0.999999,-13.7306,45.553,0.999999,-13.013,56.7352,1,-10.502,67.7808,1,-7.4453,77.4427,1,-4.25346,79.6142,1,-5.09113,92.4385,4,-1.74846e-7,64.6898,4,-1.74846e-7,43.9918,4,-5.16438,8.99998,4,-9.49713,0.249979,4,-9.49713,0.24996,4,-19,0.249963,4,-17.511,0.249997,4,-6.50002,0.25,4,-17.511,9.73972,4,-17.7501,45.2417,4,-14.5894,41.4173,4,-13.7306,45.553,4,-13.013,56.7352,4,-10.502,67.7808,4,-7.4453,77.4427,4,-4.25346,79.6142,4,-5.09113,9.25,4,-1.74846e-7,9.24999,4,-8,0.249993,4,-6.5,8.99996,4,-19,17.1888,4,-18.2996,79.1685,4,-5.26306,90.5878,-1,0.820374,90.5878,-4,0.820374,43.9918,-1,5.16438,8.99998,-1,9.49713,0.249979,-1,9.49713,0.249964,-0.999999,17.511,0.25,-0.999999,17.511,9.73972,-0.999999,17.7501,17.1888,-0.999999,18.2996,34.4812,-0.999999,16.4565,45.2417,-0.999999,14.5894,41.4173,-0.999999,13.7306,45.553,-0.999999,13.013,56.7352,-1,10.502,67.7808,-1,7.4453,77.4427,-1,4.25346,79.6142,-1,5.09113,43.9918,-4,5.16438,8.99998,-4,9.49713,0.249979,-4,9.49713,0.24996,-4,19,0.249963,-4,17.511,0.249997,-4,6.50002,0.25,2.84125e-7,6.50002,0.24996,8.30516e-7,19,0.25,-4,17.511,9.73972,-4,17.7501,34.4812,7.19338e-7,16.4565,45.2417,-4,14.5894,41.4173,-4,13.7306,45.553,-4,13.013,56.7352,-4,10.502,67.7808,-4,7.4453,77.4427,-4,4.25346,79.6142,-4,5.09113,79.1685,2.30056e-7,5.26306,9.24999,-4,8,0.249993,-4,6.5,8.99996,8.30516e-7,19,8.99996,-4,19,17.1888,-4,18.2996,0.249993,2.84124e-7,6.5,57.0998,5.22678e-7,11.9575,79.1685,-4,5.26306,9.24999,3.49691e-7,8,88.6447,-1,4.37114e-8,90.5878,-1,-0.820373,90.5878,-4,-0.820373,88.6447,-4,1.74846e-7,88.6447,-1,4.37114e-8,88.6447,-4,1.74846e-7,64.6898,-1,4.37114e-8,43.9918,-1,-5.16438,8.99998,-1,-9.49713,0.249979,-1,-9.49713,0.249964,-1,-17.511,0.25,-1,-17.511,9.73972,-1,-17.7501,17.1888,-1,-18.2996,34.4812,-1,-16.4565,45.2417,-1,-14.5894,41.4173,-1,-13.7306,45.553,-1,-13.013,56.7352,-1,-10.502,67.7808,-1,-7.4453,77.4427,-1,-4.25346,79.6142,-1,-5.09113,92.4385,-4,1.74846e-7,64.6898,-4,1.74846e-7,43.9918,-4,-5.16438,8.99998,-4,-9.49713,0.249979,-4,-9.49713,0.24996,-4,-19,0.249963,-4,-17.511,0.249997,-4,-6.50002,0.25,-2.84125e-7,-6.50002,0.24996,-8.30516e-7,-19,0.25,-4,-17.511,9.73972,-4,-17.7501,34.4812,-7.19338e-7,-16.4565,45.2417,-4,-14.5894,41.4173,-4,-13.7306,45.553,-4,-13.013,56.7352,-4,-10.502,67.7808,-4,-7.4453,77.4427,-4,-4.25346,79.6142,-4,-5.09113,79.1685,-2.30056e-7,-5.26306,92.4385,0,0,9.25,-4,1.74846e-7,9.24999,-4,-8,0.249993,-4,-6.5,8.99996,-8.30516e-7,-19,8.99996,-4,-19,17.1888,-4,-18.2996,0.249993,-2.84124e-7,-6.5,57.0998,-5.22678e-7,-11.9575,79.1685,-4,-5.26306,9.25,0,0,9.24999,-3.49691e-7,-8],"normals":[-0.388952,3.76793e-8,0.921258,0,1,-4.61659e-8,0,1,-4.46261e-8,3.2713e-8,1,2.36681e-7,1.13053e-8,1,-2.67773e-8,-9.55496e-10,1,-4.56694e-8,1.07257e-8,1,-2.78054e-8,0,1,-4.08461e-8,-4.75406e-8,1,-1.81256e-7,-1.02314e-8,1,-9.24939e-8,-1.11361e-8,1,-7.92405e-8,2.61151e-9,1,-3.54028e-8,1.46271e-9,1,-4.09602e-8,-1.86816e-8,1,-1.07666e-7,6.24947e-9,1,-2.78302e-8,3.06355e-9,1,-3.59368e-8,4.70801e-9,1,-2.72164e-8,0,-1,4.341e-8,0.40524,3.63274e-8,0.91421,0.359908,0,0.932988,0.40524,3.99614e-8,0.91421,0.359908,0,0.932988,0.361119,-0.0928731,0.927883,0.368672,-0.00449755,0.929549,0,1,0,0.242089,0,0.970254,0.122883,0,0.992421,0,0,1,-1,0,-0.00000197148,-1,-7.45058e-8,-0.00000217163,-1,-8.15839e-7,-0.00000580213,-1,2.27019e-7,-0.00000196913,-1,0,-0.00000689096,-1,-0.00001116,-0.00000316739,0,-1,0,0.0735656,0,-0.99729,0,1,-4.98564e-7,0.0251882,1.87666e-9,-0.999683,0.0251882,0,-0.999683,0.105981,0,0.994368,0.0852211,0,0.996362,0.0986573,-0.115616,0.988382,0.0852211,0,0.996362,0.170959,0,0.985278,0.242978,0,0.970032,0.265064,0,0.964231,0.100041,-0.994002,0.0441822,-0.219101,0,0.975702,-0.170959,0,-0.985278,0,1,0,-0.31368,0,-0.949529,-2.81545e-9,-1,2.88257e-8,-0.2191,0,-0.975702,-0.23575,0.242095,-0.941176,-0.278513,-0.26558,-0.922983,0.359895,0,-0.932993,0,1,-5.96046e-8,0,1,0,2.70517e-8,1,1.08418e-7,8.81337e-9,1,1.47179e-9,0,0,1,-0.952473,-3.88532e-7,0.304624,4.89062e-8,1,1.26779e-7,2.65849e-8,1,-6.89187e-8,1.43347e-7,1,5.17995e-7,6.2216e-8,1,1.74945e-7,-1,0,-8.34465e-7,0.164399,0,-0.986394,-0.388952,-3.76793e-8,-0.921258,0,4.37114e-8,1,0,0,0,6.23449e-9,1,-5.78887e-8,-3.60623e-8,1,7.18147e-8,5.57143e-9,1,-5.67126e-8,0,1,-4.61659e-8,-8.58615e-9,1,2.80725e-8,-8.31239e-9,1,-2.0148e-8,3.6239e-8,1,-2.08854e-7,3.66859e-9,1,-5.30667e-8,-1.40984e-9,1,-1.91125e-8,0,1,-4.46261e-8,-7.83437e-10,1,-3.10934e-8,4.97207e-9,1,-6.05117e-8,-4.27635e-10,1,-4.26439e-8,9.50922e-11,1,-4.47299e-8,-5.22234e-10,1,-4.16137e-8,0.40524,-3.63274e-8,-0.91421,0.359908,0,-0.932988,0.359908,0,-0.932988,0.40524,-3.99614e-8,-0.91421,0.362687,-0.00142386,-0.93191,0.367494,-0.0800054,-0.926578,0,1,0,0.242089,0,-0.970254,0.122883,0,-0.992421,0,0,-1,-1,0,0.00000197148,-1,-8.15839e-7,0.00000580213,-1,0,0.00000689096,-1,-7.45058e-8,0.00000217163,-1,-0.0000147513,0.00000196913,-1,-0.0000015572,0.00000316739,0,0,1,0.0251883,-3.05897e-7,0.999683,0.0735656,0,0.99729,0.0251882,0,0.999683,0.105981,0,-0.994368,0.0852211,0,-0.996362,0.0986573,-0.115616,-0.988382,0.0852211,0,-0.996362,0.170959,0,-0.985278,0.265064,0,-0.964231,0.242978,0,-0.970032,0.100041,-0.994002,-0.0441826,-0.219101,0,-0.975702,-0.170959,0,0.985278,9.28953e-8,1,-4.13683e-7,-0.2191,0,0.975702,-0.31368,0,0.949529,-0.262145,-0.184234,0.947279,-4.43657e-8,1,1.34298e-7,-0.261001,-0.170361,0.950187,0.359895,0,0.932993,0,1,-2.98023e-8,-2.1781e-9,1,-3.74365e-8,0,1,-7.95493e-8,1.91407e-8,1,-1.62447e-7,-2.58227e-8,1,-1.54938e-7,0,0,-1,-0.952473,-3.88532e-7,-0.304624,-4.89062e-8,1,1.26779e-7,-3.25203e-8,1,-1.44819e-7,5.52009e-8,1,-2.77471e-7,3.55379e-8,1,-1.58258e-7,1.00718e-8,1,-8.66501e-8,-1,0,8.34465e-7,0.164399,0,0.986394,6.23449e-9,-1,5.78887e-8,-3.60623e-8,-1,-7.18147e-8,5.57143e-9,-1,5.67126e-8,0,-1,4.61659e-8,0,-1,4.46261e-8,-8.58615e-9,-1,-2.80725e-8,-8.31239e-9,-1,2.0148e-8,3.6239e-8,-1,2.08854e-7,3.66859e-9,-1,5.30667e-8,-1.40984e-9,-1,1.91125e-8,0,-1,4.46261e-8,-7.83437e-10,-1,3.10934e-8,4.97207e-9,-1,6.05117e-8,-4.27635e-10,-1,4.26439e-8,9.50922e-11,-1,4.47299e-8,-5.22234e-10,-1,4.16137e-8,0.359908,0,0.932988,0.359908,0,0.932988,0.362687,0.00142386,0.93191,0.367494,0.0800054,0.926578,0,-1,0,0.122883,0,0.992421,-1,8.15839e-7,-0.00000580213,-1,7.45058e-8,-0.00000217163,-1,0.0000147513,-0.00000196913,-1,0.0000015572,-0.00000316739,0.0251883,3.05897e-7,-0.999683,0.0986573,0.115616,0.988382,0.100041,0.994002,0.0441826,9.28953e-8,-1,4.13683e-7,-0.31368,0,-0.949529,-0.262145,0.184234,-0.947279,-4.43657e-8,-1,-1.34298e-7,-0.261001,0.170361,-0.950187,0.359895,0,-0.932993,0,-1,2.98023e-8,-2.1781e-9,-1,3.74365e-8,0,-1,7.95493e-8,1.91407e-8,-1,1.62447e-7,-2.58227e-8,-1,1.54938e-7,0,-1,0,-0.952473,3.88532e-7,0.304624,-4.89062e-8,-1,-1.26779e-7,-3.25203e-8,-1,1.44819e-7,5.52009e-8,-1,2.77471e-7,3.55379e-8,-1,1.58258e-7,1.00718e-8,-1,8.66501e-8,0,1,-4.37114e-8,0,-1,4.61659e-8,3.2713e-8,-1,-2.36681e-7,1.13053e-8,-1,2.67773e-8,-9.55496e-10,-1,4.56694e-8,1.07257e-8,-1,2.78054e-8,0,-1,4.08461e-8,-4.75406e-8,-1,1.81256e-7,-1.02314e-8,-1,9.24939e-8,-1.11361e-8,-1,7.92405e-8,2.61151e-9,-1,3.54028e-8,1.46271e-9,-1,4.09602e-8,-1.86816e-8,-1,1.07666e-7,6.24947e-9,-1,2.78302e-8,3.06355e-9,-1,3.59368e-8,4.70801e-9,-1,2.72164e-8,0,1,-4.341e-8,0.359908,0,-0.932988,0.361119,0.0928731,-0.927883,0.368672,0.00449755,-0.929549,0,-1,0,0.122883,0,-0.992421,0,0,-1,-1,7.45058e-8,0.00000217163,-1,8.15839e-7,0.00000580213,-1,-2.27019e-7,0.00000196913,-1,0.00001116,0.00000316739,0,-1,4.98564e-7,0.0251882,-1.87666e-9,0.999683,0.0986573,0.115616,-0.988382,0.100041,0.994002,-0.0441822,-0.31368,0,0.949529,-2.81545e-9,1,-2.88257e-8,-0.23575,-0.242095,0.941176,-0.278513,0.26558,0.922983,0.359895,0,0.932993,0,-1,5.96046e-8,2.70517e-8,-1,-1.08418e-7,8.81337e-9,-1,-1.47179e-9,-0.952473,3.88532e-7,-0.304624,4.89062e-8,-1,-1.26779e-7,2.65849e-8,-1,6.89187e-8,1.43347e-7,-1,-5.17995e-7,6.2216e-8,-1,-1.74945e-7,4.36167e-15,1,-4.37114e-8]},"eight_L_B":{"uvs":[],"metadata":{"generator":"io_three","uvs":0,"vertices":319,"version":3,"normals":337,"type":"Geometry","faces":446},"faces":[33,0,1,2,3,0,0,0,0,33,1,7,8,2,1,1,1,1,33,5,4,12,13,2,2,2,2,33,7,15,16,8,3,3,3,3,33,18,12,4,11,4,4,4,4,33,14,5,13,19,5,5,5,5,33,15,23,24,16,6,6,6,6,32,45,58,74,7,7,7,32,74,88,100,8,8,8,32,100,89,75,9,9,9,32,75,59,46,10,10,10,32,46,35,25,11,11,11,32,25,17,9,12,12,12,32,9,10,3,13,13,13,32,9,3,2,13,13,13,32,46,25,9,14,14,14,32,100,75,46,15,15,15,32,45,74,100,16,16,16,32,45,100,46,17,17,17,32,9,2,8,18,18,18,32,9,8,16,19,19,19,32,34,45,46,20,20,20,32,24,34,46,21,21,21,32,46,9,16,22,22,22,32,16,24,46,23,23,23,33,309,301,116,125,24,24,24,24,33,22,14,19,28,25,25,25,25,33,257,239,59,75,26,26,26,26,33,30,31,21,20,27,27,27,27,33,23,33,34,24,28,28,28,28,32,132,137,136,29,29,29,32,136,130,129,30,30,30,32,129,135,131,31,31,31,32,131,121,112,32,32,32,32,112,97,84,33,33,33,32,84,69,55,34,34,34,32,55,54,64,29,29,29,32,64,78,91,35,35,35,32,91,105,115,29,29,29,32,115,124,133,29,29,29,32,133,139,141,29,29,29,32,141,142,140,13,13,13,32,141,140,138,29,29,29,32,115,133,141,13,13,13,32,64,91,115,36,36,36,32,84,55,64,37,37,37,32,131,112,84,38,38,38,32,136,129,131,39,39,39,32,132,136,131,29,29,29,32,115,141,138,13,13,13,32,115,138,134,13,13,13,32,132,131,84,40,40,40,32,122,132,84,41,41,41,32,115,134,125,29,29,29,32,115,125,116,42,42,42,32,113,122,84,43,43,43,32,98,113,84,44,44,44,32,64,115,116,45,45,45,32,64,116,106,46,46,46,32,85,98,84,29,29,29,32,71,85,84,47,47,47,32,64,106,92,48,48,48,32,64,92,79,49,49,49,32,71,84,64,50,50,50,32,64,79,70,42,42,42,32,64,70,71,42,42,42,33,37,30,20,26,51,51,51,51,33,32,22,28,38,52,52,52,52,32,81,94,107,53,53,53,32,107,118,119,29,29,29,32,107,119,108,54,54,54,32,81,107,108,55,55,55,32,109,102,101,29,29,29,32,81,108,109,56,56,56,32,66,81,109,29,29,29,32,109,101,93,54,54,54,32,80,65,50,57,57,57,32,109,93,80,58,58,58,32,51,66,109,59,59,59,32,39,51,109,60,60,60,32,109,80,50,61,61,61,32,50,38,28,62,62,62,32,28,19,13,63,63,63,32,13,12,18,64,64,64,32,13,18,27,65,65,65,32,50,28,13,66,66,66,32,39,109,50,67,67,67,32,29,39,50,68,68,68,32,50,13,27,69,69,69,32,61,60,47,29,29,29,32,50,27,61,70,70,70,32,21,29,50,29,29,29,32,20,21,50,71,71,71,32,50,61,47,72,72,72,32,50,47,36,73,73,73,32,26,20,50,74,74,74,32,50,36,26,75,75,75,33,31,40,29,21,76,76,76,76,33,276,262,79,92,77,77,77,77,33,33,44,45,34,78,78,78,78,33,9,169,170,10,79,79,79,79,33,48,37,26,36,80,80,80,80,33,43,32,38,50,81,81,81,81,33,40,52,39,29,82,82,82,82,33,288,276,92,106,83,83,83,83,33,42,41,54,55,84,84,84,84,33,44,57,58,45,85,85,85,85,33,193,181,17,25,86,86,86,86,33,298,306,122,113,87,87,87,87,33,62,48,36,47,88,88,88,88,33,41,49,64,54,89,89,89,89,33,56,43,50,65,90,90,90,90,33,52,67,51,39,91,91,91,91,33,89,100,256,271,92,92,92,92,33,53,42,55,69,93,93,93,93,33,315,309,125,134,94,94,94,94,33,57,73,74,58,95,95,95,95,32,56,72,86,96,96,96,32,86,99,87,97,97,97,32,87,73,57,98,98,98,32,57,44,33,99,99,99,32,33,23,15,100,100,100,32,15,7,1,101,101,101,32,1,0,6,102,102,102,32,6,11,4,103,103,103,32,6,4,5,104,104,104,32,15,1,6,105,105,105,32,57,33,15,106,106,106,32,86,87,57,107,107,107,32,56,86,57,108,108,108,32,57,15,6,109,109,109,32,6,5,14,110,110,110,32,6,14,22,111,111,111,32,43,56,57,112,112,112,32,6,22,32,113,113,113,32,32,43,57,114,114,114,32,57,6,32,115,115,115,33,76,62,47,60,116,116,116,116,33,49,63,78,64,117,117,117,117,33,72,56,65,80,118,118,118,118,33,207,193,25,35,119,119,119,119,33,67,82,66,51,120,120,120,120,33,68,53,69,84,121,121,121,121,33,262,249,70,79,122,122,122,122,33,73,87,88,74,123,123,123,123,33,63,77,91,78,124,124,124,124,33,318,315,134,138,125,125,125,125,33,86,72,80,93,126,126,126,126,33,82,95,81,66,127,127,127,127,33,83,68,84,97,128,128,128,128,32,256,100,88,129,129,129,32,256,88,87,130,130,130,32,101,102,255,130,130,130,32,256,87,99,131,131,131,32,99,101,255,132,132,132,32,99,255,256,133,133,133,33,77,90,105,91,134,134,134,134,33,270,284,98,85,135,135,135,135,33,99,86,93,101,136,136,136,136,33,95,110,94,81,137,137,137,137,33,96,83,97,112,138,138,138,138,33,250,270,85,71,139,139,139,139,33,284,298,113,98,140,140,140,140,33,249,250,71,70,141,141,141,141,33,102,109,272,255,142,142,142,142,33,90,103,115,105,143,143,143,143,33,306,311,132,122,144,144,144,144,33,110,117,107,94,145,145,145,145,33,109,108,280,272,146,146,146,146,33,111,96,112,121,147,147,147,147,33,181,169,9,17,148,148,148,148,33,103,114,124,115,149,149,149,149,33,224,207,35,46,150,150,150,150,33,310,304,136,137,151,151,151,151,33,117,127,118,107,152,152,152,152,32,119,118,127,153,153,153,32,128,129,130,129,129,129,32,295,119,127,154,154,154,32,128,130,294,155,155,155,32,295,127,128,156,156,156,32,128,294,295,157,157,157,33,108,119,295,280,158,158,158,158,33,120,111,121,131,159,159,159,159,33,133,124,114,123,160,160,160,160,33,304,294,130,136,161,161,161,161,32,111,120,126,162,162,162,32,126,128,127,163,163,163,32,127,117,110,164,164,164,32,110,95,82,165,165,165,32,82,67,52,166,166,166,32,52,40,31,167,167,167,32,31,30,37,168,168,168,32,37,48,62,169,169,169,32,62,76,104,170,170,170,32,104,123,114,171,171,171,32,104,114,103,172,172,172,32,37,62,104,173,173,173,32,52,31,37,174,174,174,32,110,82,52,175,175,175,32,126,127,110,176,176,176,32,111,126,110,177,177,177,32,110,52,37,178,178,178,32,37,104,103,179,179,179,32,37,103,90,180,180,180,32,96,111,110,181,181,181,32,83,96,110,182,182,182,32,37,90,77,183,183,183,32,37,77,63,184,184,184,32,83,110,37,185,185,185,32,68,83,37,186,186,186,32,37,63,49,187,187,187,32,37,49,41,188,188,188,32,53,68,37,189,189,189,32,37,41,42,190,190,190,32,37,42,53,191,191,191,33,126,120,131,135,192,192,192,192,33,128,126,135,129,193,193,193,193,33,317,318,138,140,194,194,194,194,33,271,257,75,89,195,195,195,195,33,301,288,106,116,196,196,196,196,33,239,224,46,59,197,197,197,197,33,316,317,140,142,198,198,198,198,33,311,310,137,132,199,199,199,199,33,143,146,145,144,0,0,0,0,33,144,145,151,150,200,200,200,200,33,148,156,155,147,2,2,2,2,33,150,151,159,158,3,3,3,3,33,161,154,147,155,4,4,4,4,33,157,162,156,148,5,5,5,5,33,158,159,167,166,6,6,6,6,32,145,146,153,201,201,201,32,153,152,160,202,202,202,32,160,168,180,203,203,203,32,180,192,206,204,204,204,32,223,238,252,205,205,205,32,180,206,223,206,206,206,32,153,160,180,207,207,207,32,151,145,153,208,208,208,32,159,151,153,209,209,209,32,180,223,252,210,210,210,32,252,237,222,211,211,211,32,222,205,191,212,212,212,32,252,222,191,213,213,213,32,159,153,180,214,214,214,32,167,159,180,215,215,215,32,180,252,191,216,216,216,32,179,167,180,217,217,217,32,180,191,179,218,218,218,33,309,287,275,301,24,24,24,24,33,165,173,162,157,25,25,25,25,33,257,223,206,239,26,26,26,26,33,175,163,164,176,219,219,219,219,33,166,167,179,178,28,28,28,28,32,303,305,297,220,220,220,32,292,293,303,221,221,221,32,296,302,292,221,221,221,32,268,282,296,222,222,222,32,233,247,268,223,223,223,32,202,217,233,221,221,221,32,212,201,202,224,224,224,32,241,227,212,225,225,225,32,274,260,241,221,221,221,32,299,286,274,221,221,221,32,313,308,299,221,221,221,32,312,314,313,221,221,221,32,307,312,313,221,221,221,32,313,299,274,215,215,215,32,274,241,212,226,226,226,32,212,202,233,227,227,227,32,233,268,296,228,228,228,32,296,292,303,229,229,229,32,296,303,297,230,230,230,32,307,313,274,215,215,215,32,300,307,274,215,215,215,32,233,296,297,231,231,231,32,233,297,283,232,232,232,32,287,300,274,221,221,221,32,275,287,274,233,233,233,32,233,283,269,234,234,234,32,233,269,248,235,235,235,32,275,274,212,236,236,236,32,261,275,212,237,237,237,32,233,248,234,238,238,238,32,233,234,219,221,221,221,32,242,261,212,239,239,239,32,228,242,212,215,215,215,32,212,233,219,240,240,240,32,218,228,212,233,233,233,32,219,218,212,241,241,241,33,183,171,163,175,242,242,242,242,33,177,184,173,165,52,52,52,52,32,194,208,209,221,221,221,32,172,161,155,215,215,215,32,194,209,172,243,243,243,32,182,194,172,244,244,244,32,172,155,156,221,221,221,32,156,162,173,245,245,245,32,173,184,197,246,246,246,32,197,213,229,247,247,247,32,229,243,253,221,221,221,32,253,254,265,248,248,248,32,264,279,278,249,249,249,32,229,253,265,229,229,229,32,264,278,263,250,250,250,32,229,265,264,251,251,251,32,173,197,229,252,252,252,32,172,156,173,253,253,253,32,171,182,172,254,254,254,32,163,171,172,255,255,255,32,172,173,229,256,256,256,32,264,263,244,221,221,221,32,172,229,264,257,257,257,32,164,163,172,258,258,258,32,174,164,172,259,259,259,32,172,264,244,260,260,260,32,172,244,230,261,261,261,32,185,174,172,262,262,262,32,198,185,172,263,263,263,32,172,230,214,264,264,264,32,198,172,214,265,265,265,33,176,164,174,186,76,76,76,76,33,276,242,228,262,266,266,266,266,33,178,179,191,190,78,78,78,78,33,152,153,170,169,267,267,267,267,33,195,182,171,183,80,80,80,80,33,189,197,184,177,81,81,81,81,33,186,174,185,199,82,82,82,82,33,288,261,242,276,268,268,268,268,33,188,202,201,187,269,269,269,269,33,190,191,205,204,85,85,85,85,33,193,168,160,181,86,86,86,86,33,298,269,283,306,87,87,87,87,33,210,194,182,195,88,88,88,88,33,187,201,212,196,89,89,89,89,33,203,213,197,189,90,90,90,90,33,199,185,198,215,91,91,91,91,33,238,271,256,252,92,92,92,92,33,200,217,202,188,270,270,270,270,33,315,300,287,309,94,94,94,94,33,204,205,222,221,95,95,95,95,32,235,220,203,271,271,271,32,236,251,235,272,272,272,32,204,221,236,273,273,273,32,178,190,204,274,274,274,32,158,166,178,275,275,275,32,144,150,158,276,276,276,32,149,143,144,277,277,277,32,147,154,149,278,278,278,32,148,147,149,279,279,279,32,149,144,158,280,280,280,32,158,178,204,281,281,281,32,204,236,235,282,282,282,32,204,235,203,283,283,283,32,149,158,204,284,284,284,32,157,148,149,285,285,285,32,165,157,149,286,286,286,32,204,203,189,287,287,287,32,177,165,149,288,288,288,32,204,189,177,289,289,289,32,177,149,204,290,290,290,33,225,208,194,210,291,291,291,291,33,196,212,227,211,292,292,292,292,33,220,229,213,203,118,118,118,118,33,207,180,168,193,119,119,119,119,33,215,198,214,231,120,120,120,120,33,216,233,217,200,121,121,121,121,33,262,228,218,249,122,122,122,122,33,221,222,237,236,123,123,123,123,33,211,227,241,226,293,293,293,293,33,318,307,300,315,125,125,125,125,33,235,243,229,220,294,294,294,294,33,231,214,230,245,127,127,127,127,33,232,247,233,216,295,295,295,295,32,237,252,256,129,129,129,32,255,254,253,130,130,130,32,255,253,251,132,132,132,32,236,237,256,155,155,155,32,255,251,236,296,296,296,32,256,255,236,297,297,297,33,226,241,260,240,134,134,134,134,33,270,234,248,284,135,135,135,135,33,251,253,243,235,136,136,136,136,33,245,230,244,266,137,137,137,137,33,246,268,247,232,138,138,138,138,33,250,219,234,270,139,139,139,139,33,284,248,269,298,140,140,140,140,33,249,218,219,250,298,298,298,298,33,254,255,272,265,299,299,299,299,33,240,260,274,258,143,143,143,143,33,306,283,297,311,144,144,144,144,33,266,244,263,277,145,145,145,145,33,265,272,280,264,146,146,146,146,33,267,282,268,246,147,147,147,147,33,181,160,152,169,148,148,148,148,33,258,274,286,273,149,149,149,149,33,224,192,180,207,150,150,150,150,33,310,305,303,304,151,151,151,151,33,277,263,278,290,161,161,161,161,32,290,278,279,300,300,300,32,294,293,292,155,155,155,32,294,292,291,129,129,129,32,290,279,295,154,154,154,32,294,291,290,129,129,129,32,295,294,290,301,301,301,33,264,280,295,279,158,158,158,158,33,281,296,282,267,302,302,302,302,33,299,285,273,286,160,160,160,160,33,304,303,293,294,161,161,161,161,32,273,285,259,303,303,303,32,259,225,210,304,304,304,32,210,195,183,305,305,305,32,183,175,176,306,306,306,32,176,186,199,307,307,307,32,199,215,231,308,308,308,32,231,245,266,309,309,309,32,266,277,290,310,310,310,32,290,291,289,311,311,311,32,289,281,267,312,312,312,32,290,289,267,313,313,313,32,231,266,290,314,314,314,32,176,199,231,315,315,315,32,210,183,176,316,316,316,32,273,259,210,317,317,317,32,258,273,210,318,318,318,32,210,176,231,319,319,319,32,231,290,267,320,320,320,32,231,267,246,321,321,321,32,240,258,210,322,322,322,32,226,240,210,323,323,323,32,231,246,232,324,324,324,32,231,232,216,325,325,325,32,211,226,210,326,326,326,32,196,211,210,327,327,327,32,210,231,216,328,328,328,32,210,216,200,329,329,329,32,187,196,210,330,330,330,32,210,200,188,331,331,331,32,188,187,210,332,332,332,33,289,302,296,281,333,333,333,333,33,291,292,302,289,334,334,334,334,33,317,312,307,318,194,194,194,194,33,271,238,223,257,195,195,195,195,33,301,275,261,288,196,196,196,196,33,239,206,192,224,197,197,197,197,33,316,314,312,317,335,335,335,335,33,311,297,305,310,336,336,336,336],"vertices":[90.5878,1,0.820389,99.8345,1,4.91922,99.8345,4,4.91922,90.5878,4,0.820389,86.2945,1,7.66806,96.413,1,12.1533,89.9301,1,1.11191,110.071,1,10.0721,110.071,4,10.0721,100.476,4,3.56284,92.4385,4,0.0000305176,79.6142,1,5.09113,86.2945,4,7.66806,96.413,4,12.1533,106.299,1,17.1296,120.043,1,15.7211,120.043,4,15.7211,110.779,4,8.74879,79.6142,4,5.09113,106.299,4,17.1296,79.0213,4,25.2271,88.287,4,29.3342,115.929,1,22.5849,129.726,1,21.8525,129.726,4,21.8525,120.815,4,14.4341,69.5653,4,21.5794,79.1685,4,5.26306,115.929,4,22.5849,97.3398,4,33.8911,79.0213,1,25.2271,88.287,1,29.3342,125.28,1,28.5063,139.096,1,28.4518,139.096,4,28.4518,130.559,4,20.6049,59.9418,4,18.4002,69.5653,1,21.5794,125.28,4,28.5063,106.158,4,38.8867,97.3398,1,33.8911,75.9589,1,32.6203,84.8654,1,36.5683,134.329,1,34.8793,148.131,1,35.5027,148.131,4,35.5027,139.99,4,27.2466,50.1738,4,15.697,59.9418,1,18.4002,66.8694,1,29.114,134.329,4,34.8793,114.721,4,44.3089,106.158,1,38.8867,93.5675,1,40.9486,75.9589,4,32.6203,84.8654,4,36.5683,143.054,1,41.6887,156.809,1,42.9886,156.809,4,42.9886,149.083,4,34.3428,45.2417,4,14.5895,45.8457,4,14.4847,50.1738,1,15.697,57.6188,1,26.058,66.8694,4,29.114,143.054,4,41.6887,123.007,4,50.1448,114.721,1,44.3089,102.044,1,45.7506,93.5675,4,40.9486,75.3847,4,34.0065,84.2239,4,37.9247,151.435,1,48.9179,158.745,1,44.527,158.745,4,44.527,157.817,4,41.8768,45.2417,1,14.5895,48.2293,1,23.4596,57.6188,4,26.058,66.3639,4,30.5268,151.435,4,48.9179,130.997,4,56.3803,123.007,1,50.1448,110.275,1,50.9627,102.044,4,45.7506,92.8602,4,42.2719,153.087,1,50.1855,164.932,1,50.7142,164.932,4,50.7142,159.806,4,43.466,38.7237,1,21.325,48.2293,4,23.4596,57.1832,4,27.4939,153.087,4,50.1855,138.671,4,63.0002,130.997,1,56.3803,118.24,1,56.5724,110.275,4,50.9627,101.273,4,47.0376,159.274,1,56.3727,165.993,4,49.6532,159.274,4,56.3727,157.154,4,58.492,29.1247,1,19.6595,34.4812,1,16.4566,38.7237,4,21.325,47.8648,4,24.9151,139.648,4,63.6245,140.537,4,62.3811,151.851,4,51.0674,138.671,1,63.0002,125.92,1,62.5662,118.24,4,56.5724,109.441,4,52.2103,19.4556,1,18.4668,29.1247,4,19.6595,38.431,4,22.7966,139.648,1,63.6245,145.835,4,69.8117,147.962,4,67.6844,133.297,1,68.9296,125.92,4,62.5662,117.346,4,57.7776,17.1889,1,18.2996,19.4556,4,18.4668,28.9046,4,21.1436,133.989,1,69.2831,145.835,1,69.8117,140.176,1,75.4703,140.176,4,75.4703,139.115,4,76.5312,133.297,4,68.9296,124.969,4,63.7261,17.1889,4,18.2996,19.3085,4,19.9601,133.989,4,69.2831,132.928,4,70.3441,132.29,4,70.0414,9.66609,4,19.2487,11.5305,4,18.717,0.249969,4,19.0115,8.99995,4,19,0.249969,4,19,90.5878,-1,0.820389,99.8345,-1,4.91922,99.8345,-4,4.91922,90.5878,-4,0.820389,86.2945,-1,7.66806,96.413,-1,12.1533,89.9301,-1,1.11191,110.071,-1,10.0721,110.071,-4,10.0721,100.476,-4,3.56284,92.4385,-4,0.0000305176,79.6142,-1,5.09113,86.2945,-4,7.66806,96.413,-4,12.1533,106.299,-0.999999,17.1296,120.043,-0.999999,15.7211,120.043,-4,15.7211,110.779,-4,8.74879,79.6142,-4,5.09113,106.299,-4,17.1296,79.0213,-4,25.2271,88.287,-4,29.3342,115.929,-0.999999,22.5849,129.726,-0.999999,21.8525,129.726,-4,21.8525,120.815,-4,14.4341,100.476,1.55736e-7,3.56284,92.4385,9.09495e-13,0.0000305176,69.5653,-4,21.5794,79.1685,-4,5.26306,115.929,-4,22.5849,97.3398,-4,33.8911,79.0213,-0.999999,25.2271,88.287,-0.999999,29.3342,125.28,-0.999999,28.5063,139.096,-0.999999,28.4518,139.096,-4,28.4518,130.559,-4,20.6049,110.779,3.82422e-7,8.74879,59.9418,-4,18.4002,69.5653,-0.999999,21.5794,125.28,-4,28.5063,106.158,-4,38.8867,97.3398,-0.999999,33.8911,75.9589,-0.999999,32.6203,84.8654,-0.999998,36.5683,134.329,-0.999998,34.8793,148.131,-0.999998,35.5027,148.131,-4,35.5027,139.99,-4,27.2466,120.815,6.30934e-7,14.4341,50.1738,-4,15.697,59.9418,-0.999999,18.4002,66.8694,-0.999999,29.114,134.329,-4,34.8793,114.721,-4,44.3089,106.158,-0.999998,38.8867,93.5675,-0.999998,40.9486,75.9589,-4,32.6203,84.8654,-4,36.5683,143.054,-0.999998,41.6887,156.809,-0.999998,42.9886,156.809,-4,42.9886,149.083,-4,34.3428,130.559,9.0067e-7,20.6049,45.2417,-4,14.5895,45.8457,-4,14.4847,50.1738,-0.999999,15.697,57.6188,-0.999999,26.058,66.8694,-4,29.114,143.054,-4,41.6887,123.007,-4,50.1448,114.721,-0.999998,44.3089,102.044,-0.999998,45.7506,93.5675,-4,40.9486,75.3847,-4,34.0065,84.2239,-4,37.9247,151.435,-0.999998,48.9179,158.745,-0.999998,44.527,158.745,-4,44.527,157.817,-4,41.8768,139.99,0.00000119099,27.2466,45.2417,-0.999999,14.5895,48.2293,-0.999999,23.4596,57.6188,-4,26.058,66.3639,-4,30.5268,151.435,-4,48.9179,130.997,-4,56.3803,123.007,-0.999998,50.1448,110.275,-0.999998,50.9627,102.044,-4,45.7506,92.8602,-4,42.2719,153.087,-0.999998,50.1855,164.932,-0.999998,50.7142,164.932,-4,50.7142,159.806,-4,43.466,149.083,0.00000150117,34.3428,38.7237,-0.999999,21.325,48.2293,-4,23.4596,57.1832,-4,27.4939,153.087,-4,50.1855,138.671,-4,63.0002,130.997,-0.999998,56.3803,118.24,-0.999997,56.5724,110.275,-4,50.9627,101.273,-4,47.0376,75.3847,0.00000148647,34.0065,84.2239,0.00000165774,37.9247,159.274,-0.999998,56.3727,165.993,-4,49.6532,159.274,-4,56.3727,157.154,-4,58.492,157.154,0.00000255677,58.492,165.993,0.00000217041,49.6532,157.817,0.00000183049,41.8768,29.1247,-0.999999,19.6595,34.4812,-0.999999,16.4566,38.7237,-4,21.325,47.8648,-4,24.9151,66.3639,0.00000133437,30.5268,139.648,-4,63.6245,140.537,-4,62.3811,151.851,-4,51.0674,138.671,-0.999997,63.0002,125.92,-0.999997,62.5662,118.24,-4,56.5724,109.441,-4,52.2103,92.8602,0.00000184776,42.2719,159.806,0.00000189996,43.466,151.851,0.00000223223,51.0674,19.4556,-0.999999,18.4668,29.1247,-4,19.6595,38.431,-4,22.7966,57.1832,0.00000120179,27.4939,139.648,-0.999997,63.6245,145.835,-4,69.8117,147.962,-4,67.6844,140.537,0.00000272676,62.3811,133.297,-0.999997,68.9296,125.92,-4,62.5662,117.346,-4,57.7776,101.273,0.00000205608,47.0376,17.1889,-0.999999,18.2996,19.4556,-4,18.4668,28.9046,-4,21.1436,47.8648,0.00000108907,24.9151,133.989,-0.999997,69.2831,145.835,-0.999997,69.8117,140.176,-0.999997,75.4703,140.176,-4,75.4703,139.115,-4,76.5312,139.115,0.00000334529,76.5312,147.962,0.00000295858,67.6844,133.297,-4,68.9296,124.969,-4,63.7261,109.441,0.00000228218,52.2103,17.1889,-4,18.2996,19.3085,-4,19.9601,38.431,9.96472e-7,22.7966,133.989,-4,69.2831,132.928,-4,70.3441,132.928,0.00000307484,70.3441,132.29,-4,70.0414,117.346,0.00000252554,57.7776,9.66609,-4,19.2487,11.5305,-4,18.717,28.9046,9.24217e-7,21.1436,132.29,0.00000306161,70.0414,124.969,0.00000278555,63.7261,0.249969,-4,19.0115,8.99995,-4,19,0.249969,-4,19,19.3085,8.72481e-7,19.9601,0.249969,8.30518e-7,19,0.249969,8.31019e-7,19.0115,9.66609,8.41389e-7,19.2487],"normals":[-0.405246,0,0.914208,-0.449615,0,0.893223,0.405242,0,-0.914209,-0.492899,0,0.870087,0.359903,0,-0.93299,0.449614,0,-0.893223,-0.534999,0,0.844853,6.42024e-7,1,-8.07983e-7,-3.85342e-8,1,-3.85342e-8,3.06014e-7,1,-3.83082e-7,-3.19657e-8,1,-2.6235e-8,-4.85121e-7,1,6.88815e-7,-4.15265e-7,1,7.33041e-7,0,1,0,-1.77565e-8,1,-1.06423e-8,-2.315e-8,1,-3.6977e-8,-1.68993e-7,1,1.45929e-7,-3.48958e-8,1,-2.33456e-8,-3.76228e-8,1,-1.77948e-8,2.51619e-7,1,-4.4417e-7,1.9557e-7,1,-2.50601e-7,1.49612e-7,1,-2.84687e-7,-1.77551e-8,1,-1.06446e-8,2.40275e-7,1,-4.57203e-7,-0.170966,0,0.985277,0.492897,0,-0.870087,0.653175,0,-0.757207,-0.405239,0,0.914211,-0.575813,0,0.817582,0,1,0,-3.85343e-8,1,-3.85343e-8,8.05603e-8,1,-1.57629e-7,-6.51545e-7,1,7.55318e-7,-5.74369e-7,1,8.15537e-7,-4.91616e-7,1,8.67818e-7,2.66025e-7,1,-9.61293e-7,4.87232e-8,1,-2.44948e-7,9.55808e-8,1,-2.30749e-7,-1.96869e-8,1,-1.45992e-8,-5.55309e-8,1,-1.45021e-8,1.63101e-7,1,-2.61059e-7,-0.00000446989,1,0.00000564745,0,1,0,2.68668e-7,1,-3.81478e-7,-4.23145e-8,1,-2.53616e-8,-4.9167e-8,1,1.45851e-7,-0.00000155497,1,0.00000692438,1.67856e-7,1,-4.43154e-7,-1.24447e-7,1,4.49698e-7,-4.6449e-8,1,-1.6619e-8,-1.9823e-7,1,3.90458e-7,-0.359901,0,0.932991,0.535,0,-0.844852,1.78237e-7,1,-2.78658e-7,0,1,0,-3.44661e-8,1,-2.46667e-8,-1.44085e-8,1,-5.65555e-8,-5.73505e-7,1,6.64852e-7,-1.39131e-7,1,-1.94898e-7,2.73764e-9,1,-8.55943e-8,-1.80227e-8,1,2.84609e-8,1.83318e-7,1,-2.5734e-7,-5.05562e-7,1,7.17835e-7,-4.32819e-7,1,7.64034e-7,-5.50092e-7,1,0.00000124098,-1.35827e-8,1,-3.52109e-8,-1.8505e-8,1,-1.10904e-8,7.40599e-9,1,-6.69286e-8,2.67644e-9,1,-1.00176e-7,-3.26489e-8,1,1.25071e-8,6.22178e-10,1,-4.94603e-8,1.91989e-8,1,-1.59411e-7,-6.08447e-8,1,2.17217e-7,1.63766e-7,1,-7.68175e-7,-1.57448e-8,1,4.0816e-8,-1.9459e-8,1,5.89025e-8,-0.449615,0,0.893222,-0.313683,0,0.949528,-0.615231,0,0.788347,0.405244,0,-0.914209,-0.313686,0,0.949527,0.575812,0,-0.817582,-0.492899,0,0.870086,-0.266711,0,0.963777,0.405249,0,-0.914206,-0.653173,0,0.757209,0.4929,0,-0.870086,-0.57581,0,0.817583,-0.266712,0,0.963776,0.359896,0,-0.932992,0.615232,0,-0.788346,-0.534999,0,0.844853,0.707107,0,-0.707107,0.44961,0,-0.893225,-0.122411,0,0.99248,-0.622114,0,0.782926,3.44216e-7,1,-4.48511e-7,-7.83333e-9,1,-4.99677e-8,2.23614e-7,1,-2.81416e-7,-2.41287e-8,1,-1.98022e-8,-1.73018e-8,1,-1.15619e-8,-1.83524e-8,1,-9.8093e-9,-1.28913e-8,1,-2.90855e-8,2.63384e-9,1,-5.30879e-8,4.95308e-10,1,-5.42738e-8,-2.52918e-8,1,3.17331e-9,4.22429e-8,1,-1.00676e-7,-8.3912e-9,1,-3.7468e-8,-5.278e-9,1,-3.58578e-8,-7.35144e-9,1,-3.38062e-8,2.1456e-8,1,-6.65809e-8,1.27888e-9,1,-4.59611e-8,-6.09599e-9,1,-2.72023e-8,-4.33891e-8,1,8.12201e-9,-4.94795e-9,1,-3.03848e-8,7.56842e-9,1,-5.76339e-8,-0.219106,0,0.975701,0.313685,0,-0.949527,0.653173,0,-0.757209,0.534999,0,-0.844853,-0.575815,0,0.81758,0.492901,0,-0.870085,-0.359896,0,0.932992,-0.707105,0,0.707109,0.266712,0,-0.963776,-0.0735681,0,0.99729,0.60883,0,-0.793301,-0.615233,0,0.788346,0.535,0,-0.844852,0.707107,0,0.707107,0.707107,0,0.707107,0.707103,-0.00000810377,0.707111,0.707107,0,0.707107,0.707104,0.000010376,0.707109,0.219103,0,-0.975702,-0.492897,0,0.870088,0.707108,0,-0.707105,-0.653171,0,0.75721,0.57581,0,-0.817583,-0.449618,0,0.893221,-0.534998,0,0.844853,-0.405246,0,0.914208,-0.813734,0,0.581237,0.17096,0,-0.985278,-0.615233,0,0.788345,-0.538831,0,0.842414,0.707105,0,0.707109,0.615234,0,-0.788345,0.449612,0,-0.893224,0.122419,0,-0.992478,0.57581,0,-0.817583,-0.428549,0,0.903519,-0.707107,0,0.707107,0.707097,0,0.707117,0.707097,0,0.707117,0.707107,0,0.707107,0.707107,0.0000431407,0.707107,0.707104,0.00000518324,0.707109,0.581237,0,-0.813734,0.653174,0,-0.757208,0.0735576,0,-0.997291,-0.707107,0,0.707107,4.69876e-8,1,-9.19386e-8,-7.83368e-9,1,-4.99678e-8,1.02592e-7,1,-1.60394e-7,-1.7477e-7,1,1.66592e-7,-1.9566e-8,1,-1.30725e-8,9.7407e-8,1,-2.19673e-7,7.54165e-8,1,-2.28188e-7,-1.12587e-8,1,-3.41622e-9,-4.28585e-9,1,-8.85471e-8,2.81952e-9,1,-3.82269e-8,3.80583e-9,1,-3.08546e-8,-1.69183e-9,1,-3.49538e-8,-1.59726e-8,1,-7.55584e-9,1.44225e-8,1,-6.39394e-8,-8.10067e-9,1,-4.39847e-8,1.25962e-9,1,-3.70086e-8,4.13339e-9,1,-5.00662e-8,-1.09389e-9,1,-3.90488e-8,6.1983e-10,1,-7.51454e-8,1.41558e-9,1,-4.15911e-8,3.07592e-9,1,-4.68686e-8,4.78212e-10,1,-5.79762e-8,1.17135e-9,1,-5.01106e-8,5.15133e-9,1,-5.17645e-8,-5.75934e-9,1,-3.66481e-8,2.4984e-9,1,-4.65708e-8,4.56428e-9,1,-4.58316e-8,-1.24852e-8,1,-2.76106e-8,7.74926e-9,1,-4.76759e-8,-1.51824e-8,1,-2.42682e-8,0.455086,0,-0.890447,0.707107,0,-0.707107,-0.0251875,0,0.999683,0.624133,0,-0.781318,-0.219107,0,0.975701,0.61523,0,-0.788347,-1,0,0,-0.653171,0,0.75721,-0.449615,0,0.893222,2.57839e-8,-1,5.81682e-8,4.96998e-7,-1,-9.87363e-7,4.50757e-7,-1,-7.11821e-7,5.18391e-7,-1,-6.64259e-7,-3.06014e-7,-1,3.83082e-7,-1.51173e-7,-1,2.38543e-7,3.33813e-8,-1,-1.54745e-8,-2.00631e-7,-1,3.98581e-7,0.00000254345,-1,-0.00000440541,-7.17045e-8,-1,1.36713e-7,3.85342e-8,-1,3.85342e-8,-6.42024e-7,-1,8.07983e-7,1.68993e-7,-1,-1.45929e-7,-1.52668e-7,-1,3.28734e-7,0,-1,0,4.27103e-7,-1,-4.71747e-7,3.46047e-8,-1,2.31223e-8,-3.14053e-7,-1,4.02422e-7,-0.405239,0,0.914211,-7.95598e-8,-1,1.67738e-7,0,-1,0,3.78383e-8,-1,3.10694e-8,5.74369e-7,-1,-8.15537e-7,-3.58945e-7,-1,9.30525e-7,3.12875e-7,-1,-9.47077e-7,-4.87232e-8,-1,2.44948e-7,1.17737e-7,-1,-2.20269e-7,-1.19068e-7,-1,2.22259e-7,0,-1,0,4.92206e-8,-1,1.28542e-8,1.18612e-7,-1,-9.8213e-8,0.00000446989,-1,-0.00000564745,0,-1,0,-2.68668e-7,-1,3.81478e-7,-1.7007e-7,-1,2.68569e-7,4.9167e-8,-1,-1.45851e-7,0.00000155497,-1,-0.00000692438,-1.14372e-7,-1,3.01952e-7,-7.81867e-8,-1,4.67444e-7,-1.76073e-7,-1,4.00934e-7,2.36105e-7,-1,-4.10939e-7,-0.359901,0,0.932991,-7.19818e-9,-1,2.56976e-8,-7.14916e-9,-1,2.58338e-8,4.32819e-7,-1,-7.64034e-7,5.05562e-7,-1,-7.17835e-7,3.33141e-8,-1,2.73391e-8,-9.37852e-8,-1,1.31213e-7,-9.3393e-8,-1,1.3075e-7,4.49202e-8,-1,3.21486e-8,-3.53091e-8,-1,6.83764e-9,-1.04813e-7,-1,1.95648e-7,-7.23403e-8,-1,1.81049e-7,-8.08297e-9,-1,2.44672e-8,3.19091e-8,-1,4.8005e-8,-3.46256e-8,-1,1.01011e-7,3.35664e-9,-1,3.8135e-8,-2.11057e-8,-1,4.76141e-8,-2.46413e-8,-1,4.89534e-8,1.02104e-8,-1,3.07711e-8,2.38825e-7,-1,-2.04835e-7,5.49657e-8,-1,-1.57625e-9,-5.4793e-8,-1,8.65273e-8,-1.39508e-7,-1,1.78763e-7,8.84884e-8,-1,-4.39345e-8,-0.313683,0,0.949528,0.405244,0,-0.914209,-0.266711,0,0.963777,0.405249,0,-0.914206,0.44961,0,-0.893225,-3.44216e-7,-1,4.48511e-7,-1.80014e-9,-1,4.03341e-8,-1.49076e-7,-1,1.87611e-7,2.41287e-8,-1,1.98022e-8,1.73018e-8,-1,1.15619e-8,-1.81461e-7,-1,3.83631e-7,1.28913e-8,-1,2.90855e-8,-2.63384e-9,-1,5.30879e-8,-9.95212e-9,-1,4.90298e-8,2.52918e-8,-1,-3.17331e-9,-4.22429e-8,-1,1.00676e-7,-1.44516e-9,-1,3.23803e-8,5.278e-9,-1,3.58578e-8,7.35144e-9,-1,3.38062e-8,3.37602e-9,-1,4.12041e-8,-1.27888e-9,-1,4.59611e-8,6.09599e-9,-1,2.72023e-8,-1.12612e-8,-1,5.80476e-8,-8.88417e-9,-1,6.87298e-8,6.62278e-9,-1,3.49699e-8,-0.219106,0,0.975701,0.313685,0,-0.949527,0.266712,0,-0.963776,0.608829,0,-0.793301,0.535,0,-0.844852,0.707103,-0.0000162075,0.707111,0.707104,0.0000048828,0.707109,-0.405246,0,0.914208,-0.813734,0,0.581237,0.707097,0,0.707117,0.707104,-0.0000329288,0.707109,0.653174,0,-0.757208,-2.81952e-9,-1,3.82269e-8,4.28585e-9,-1,8.85471e-8,1.12587e-8,-1,3.41622e-9,-7.54165e-8,-1,2.28188e-7,-9.7407e-8,-1,2.19673e-7,1.9566e-8,-1,1.30725e-8,-1.29303e-7,-1,2.03922e-7,-6.83947e-8,-1,1.06929e-7,-1.79989e-9,-1,4.03342e-8,-4.69876e-8,-1,9.19386e-8,-1.67369e-9,-1,3.7506e-8,6.8097e-8,-1,-3.66111e-8,-1.31363e-8,-1,6.20145e-8,-6.33088e-9,-1,6.14009e-8,4.49738e-9,-1,9.29175e-8,-2.2419e-9,-1,1.81755e-8,3.20432e-9,-1,3.4752e-8,-5.9983e-9,-1,4.93923e-8,-7.84102e-9,-1,4.98245e-8,3.746e-9,-1,4.99842e-8,-6.52978e-9,-1,2.90782e-8,3.75284e-9,-1,5.84232e-8,1.33386e-9,-1,2.07651e-8,3.9244e-9,-1,3.16969e-8,1.94558e-9,-1,3.31188e-8,-5.42072e-9,-1,5.2988e-8,1.53113e-7,-1,-2.2063e-7,2.40785e-8,-1,5.57747e-9,4.45273e-8,-1,-3.40305e-8,-1.64838e-8,-1,6.73803e-8,0.455086,0,-0.890447,0.707107,0,-0.707107,-1,0,0,-0.653171,0,0.75721]},"curve_4":{"uvs":[],"normals":[0.788345,0,0.615233,0.757206,0,0.653176,0.724245,0,0.689543,0.689538,0,0.72425,0.653171,0,0.75721,0.615228,0,0.788349,0.575806,0,0.817586,0.534995,0,0.844855,0.492896,0,0.870088,0.449608,0,0.893226,0.405239,0,0.914211,0.359892,0,0.932994,-0.99729,0,-0.0735675,0.313679,0,0.949529,-0.992479,0,-0.122412,0.266711,0,0.963777,-0.985277,0,-0.170963,0.2191,0,0.975702,-0.975701,0,-0.219105,0.170958,0,0.985278,-0.963776,0,-0.266713,0.122409,0,0.99248,-0.949527,0,-0.313684,0.0735638,0,0.99729,-0.932992,0,-0.359897,0.111157,0,0.993803,-0.914208,0,-0.405244,-0.893223,0,-0.449614,-0.870086,0,-0.4929,-0.844851,0,-0.535001,-0.817583,0,-0.575811,-0.788345,0,-0.615233,-0.757206,0,-0.653176,-0.724245,0,-0.689543,-0.689538,0,-0.72425,-0.653171,0,-0.75721,-0.615228,0,-0.788349,-0.575806,0,-0.817586,-0.534995,0,-0.844855,-0.492896,0,-0.870088,-0.449608,0,-0.893226,-0.405239,0,-0.914211,-0.359892,-5.5475e-8,-0.932994,-0.313679,-5.5475e-8,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.170958,0,-0.985278,-0.122409,0,-0.99248,-0.0735639,0,-0.99729,0,0,-1,0,1,-4.469e-8,-3.28856e-9,1,-4.45824e-8,6.9156e-10,1,-3.76205e-8,-1.15513e-9,1,-3.76091e-8,5.31244e-10,1,-4.5936e-8,-1.72335e-9,1,-4.59067e-8,4.73135e-9,1,-4.47193e-8,-2.40549e-9,1,-4.29933e-8,3.25331e-10,1,-4.49678e-8,-1.88151e-9,1,-4.49296e-8,5.20149e-10,1,-4.73912e-8,-2.04807e-9,1,-4.27969e-8,1.80646e-10,1,-4.56917e-8,-2.06146e-9,1,-4.56456e-8,1.37862e-10,1,-4.43967e-8,-1.38815e-9,1,-3.98276e-8,3.07886e-10,1,-4.35438e-8,2.71982e-9,1,-4.30765e-8,6.02834e-10,1,-4.3158e-8,-3.03781e-9,1,-4.74438e-8,-3.6303e-9,1,-4.30093e-8,3.35452e-9,1,-4.3711e-8,1.20565e-9,1,-4.38229e-8,-9.46043e-10,1,-4.38293e-8,1.33234e-9,1,-4.48578e-8,1.83697e-9,1,-4.11884e-8,4.10971e-9,1,-4.27852e-8,2.00539e-9,1,-4.29353e-8,-1.03772e-10,1,-4.2982e-8,1.8085e-9,1,-4.50949e-8,3.11418e-9,1,-4.22168e-8,1.06248e-9,1,-4.32779e-8,-0.914208,0,-0.405246,-0.893223,0,-0.449613,-0.870085,0,-0.492901,-0.844852,0,-0.535,-0.817582,0,-0.575811,-0.788345,0,-0.615233,-0.757207,0,-0.653175,-0.724245,0,-0.689543,-0.689538,0,-0.72425,-0.653171,0,-0.757211,-0.615228,0,-0.788349,-0.575807,0,-0.817586,-0.534994,0,-0.844856,-0.492897,0,-0.870088,-0.449608,0,-0.893226,-0.405238,0,-0.914211,-0.359892,0,-0.932994,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.170958,0,-0.985278,-0.122409,0,-0.99248,-0.0735638,0,-0.99729,0.999685,0,0.0251075,0.99729,0,0.0735672,0.992479,0,0.122414,0.985278,0,0.170963,0.975701,0,0.219105,0.963776,0,0.266712,0.949527,0,0.313686,0.932992,0,0.359896,0.914208,0,0.405245,0.893223,0,0.449613,0.870085,0,0.492901,0.844852,0,0.535,2.69243e-9,1,-4.50235e-8,-2.04004e-9,1,-4.10371e-8,1.85785e-9,1,-4.19129e-8,-2.01031e-10,1,-4.19535e-8,-2.25938e-9,1,-4.18931e-8,1.38233e-9,1,-4.3613e-8,3.3791e-9,1,-4.12318e-8,1.35188e-9,1,-4.13479e-8,-6.78551e-10,1,-4.13645e-8,2.51064e-9,1,-4.42373e-8,-4.72973e-9,1,-4.10988e-8,2.75919e-9,1,-4.29512e-8,6.48478e-10,1,-4.3035e-8,-1.62664e-9,1,-4.77944e-8,-3.57283e-9,1,-4.28913e-8,3.22787e-9,1,-4.66107e-8,-2.98037e-9,1,-4.21718e-8,-1.35642e-9,1,-4.67026e-8,-3.64637e-9,1,-4.65797e-8,-1.176e-9,1,-4.6885e-8,-1.71173e-9,1,-4.23257e-8,8.8915e-10,1,-4.31941e-8,-1.23132e-9,1,-4.31858e-8,-3.34887e-9,1,-4.30733e-8,-9.80458e-10,1,-4.45359e-8,1.2255e-9,1,-4.63304e-8,1.92847e-9,1,-4.25927e-8,-1.63791e-10,1,-4.26361e-8,1.80871e-9,1,-4.50966e-8,3.08837e-9,1,-4.18669e-8,1.05686e-9,1,-4.3049e-8,0.999683,0,0.0251866,0.99729,0,0.0735664,0.992479,0,0.122415,0.985277,0,0.170963,0.975701,0,0.219105,0.963777,0,0.266711,0.949526,0,0.313687,0.932993,0,0.359894,0.914207,0,0.405247,0.893224,0,0.449613,0.870085,0,0.492902,0.844853,0,0.534999,0.817582,0,0.575812,0.788346,0,0.615232,0.757206,0,0.653176,0.724245,0,0.689543,0.689537,0,0.72425,0.653171,0,0.757211,0.615228,0,0.78835,0.575807,0,0.817586,0.534994,0,0.844856,0.492897,0,0.870088,0.449608,0,0.893226,0.405238,0,0.914211,0.359892,0,0.932994,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,0.0735639,0,0.99729,0.307795,0,0.951453,-0.985277,0,-0.170963,0.492896,0,0.870088,-0.992479,0,-0.122414,0.534995,0,0.844855,-0.99729,0,-0.0735666,0.575806,0,0.817586,-0.999683,0,-0.0251908,0.615228,0,0.788349,0.689538,0,0.72425,0.724245,0,0.689543,0.757206,0,0.653176,0.817583,0,0.575811,0.844852,0,0.535001,0.870086,0,0.4929,0.893223,0,0.449614,0.914208,0,0.405244,0.932992,0,0.359897,0.949527,0,0.313684,0.963776,0,0.266714,0.975702,0,0.219104,0.985277,0,0.170963,0.992479,0,0.122413,0.99729,0,0.0735674,0.999685,-5.70441e-7,0.0250852,-7.81473e-8,1,-5.49694e-8,-0.999685,0,-0.0250881,-0.073564,0,-0.99729,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.2191,0,-0.975702,-0.266711,0,-0.963776,-0.313679,0,-0.949529,-0.359892,0,-0.932994,-0.405238,0,-0.914211,-0.449609,0,-0.893226,-0.492897,0,-0.870088,-0.534994,0,-0.844856,-0.575807,0,-0.817586,-0.615228,0,-0.788349,-0.653171,0,-0.757211,-0.689537,0,-0.72425,-0.724245,0,-0.689543,-0.757206,0,-0.653175,-0.788345,0,-0.615233,0.111157,0,0.993803,-0.817582,0,-0.575812,-0.844853,0,-0.534999,0.122409,0,0.99248,-0.870085,0,-0.492902,0.170958,0,0.985278,-0.893223,0,-0.449613,0.2191,0,0.975702,-0.914208,0,-0.405246,0.266711,0,0.963777,-0.932993,0,-0.359894,0.313679,0,0.949529,-0.949526,0,-0.313688,-0.963777,0,-0.26671,0.405239,0,0.914211,-0.975701,0,-0.219105,0.449608,0,0.893226,0,1,0,0,1,0,1.12414e-9,1,-1.60289e-7,-6.74186e-9,1,-1.60151e-7,3.93798e-8,1,-1.30092e-8,1.89575e-8,1,-8.40326e-9,1.85224e-8,1,-9.32333e-9,1.80426e-8,1,-1.0221e-8,1.75193e-8,1,-1.10939e-8,1.69539e-8,1,-1.19402e-8,-2.43725e-8,1,-8.17889e-8,-2.83565e-8,1,-8.04943e-8,1.50184e-8,1,-1.42986e-8,2.85974e-8,1,-3.00365e-8,1.35445e-8,1,-1.57018e-8,2.55155e-8,1,-3.26949e-8,2.38805e-8,1,-3.39075e-8,-5.05019e-8,1,-6.87968e-8,-5.38168e-8,1,-6.62359e-8,1.86469e-8,1,-3.70444e-8,1.68067e-8,1,-3.79148e-8,1.49261e-8,1,-3.86937e-8,1.30094e-8,1,-3.93795e-8,1.10614e-8,1,-3.99705e-8,9.08672e-9,1,-4.04651e-8,7.09039e-9,1,-4.08622e-8,5.07695e-9,1,-4.11609e-8,-7.54438e-8,1,-5.75472e-8,0.817583,0,0.575811,0.844852,0,0.535001,0.914208,0,0.405244,0.963776,0,0.266714,0.985278,0,0.170963,0.99729,0,0.0735674,0.999685,0,0.0250853,-8.87912e-9,1,-1.0507e-7,-3.69242e-9,1,-5.00574e-8,-6.14413e-9,1,-4.98159e-8,1.57223e-8,1,-4.09356e-8,4.09801e-9,1,-3.30723e-8,-1.00404e-8,1,-3.62814e-8,9.54559e-9,1,-4.27994e-8,-5.31508e-9,1,-4.50232e-8,-7.51785e-9,1,-4.47082e-8,3.16235e-9,1,-4.37368e-8,1.01241e-9,1,-4.38393e-8,-1.13985e-9,1,-4.38362e-8,-3.28948e-9,1,-4.37274e-8,7.29368e-9,1,-4.54851e-8,5.05299e-9,1,-4.57882e-8,-9.66993e-9,1,-4.27715e-8,5.40598e-10,1,-4.6063e-8,-1.72029e-9,1,-4.6034e-8,-3.97707e-9,1,-4.5894e-8,5.38018e-9,1,-5.12242e-8,-9.17138e-9,1,-3.24266e-8,3.33475e-10,1,-5.1505e-8,-1.64568e-9,1,-3.85944e-8,6.75526e-9,1,-4.62044e-8,4.47998e-9,1,-4.64803e-8,2.1939e-9,1,-4.66442e-8,2.95032e-9,1,-3.4185e-8,9.8548e-9,1,-4.38851e-8,7.68961e-9,1,-4.43158e-8,5.50589e-9,1,-4.46396e-8,3.30889e-9,1,-4.48563e-8,0,1,-4.82513e-8,2.16341e-9,1,-4.40363e-8,9.20485e-14,1,-4.82513e-8,-0.932993,0,-0.359895,-0.949527,0,-0.313686,-0.963776,0,-0.266712,-0.975701,0,-0.219104,-0.985278,0,-0.170962,-0.992479,0,-0.122415,-0.99729,0,-0.0735668,-0.999683,0,-0.0251615,0.130446,0,0.991455,0.073564,0,0.99729,0.122409,0,0.99248,0.170958,0,0.985278,0.2191,2.87219e-8,0.975702,0.266711,8.61655e-8,0.963776,0.313679,5.74437e-8,0.949529,0.359892,5.74437e-8,0.932994,0.405239,0,0.914211,0.492896,0,0.870088,0.534995,0,0.844855,0.575807,0,0.817586,0.615228,0,0.788349,0.653171,0,0.757211,0.689538,0,0.72425,0.724245,0,0.689543,0.757206,0,0.653176,0.788346,0,0.615233,0.817583,0,0.575811,-1.16927e-8,1,-1.58515e-7,2.46206e-9,1,-8.03787e-8,-5.42823e-9,1,-8.0233e-8,-9.35859e-9,1,-7.987e-8,-1.32662e-8,1,-7.93146e-8,-1.7142e-8,1,-7.85681e-8,2.24579e-8,1,-9.9548e-9,2.19425e-8,1,-1.10448e-8,-2.84849e-8,1,-7.52024e-8,-6.42809e-8,1,-1.47429e-7,-7.14378e-8,1,-1.44097e-7,-7.84217e-8,1,-1.40418e-7,-2.40076e-8,1,-8.42457e-8,1.77914e-8,1,-1.69388e-8,1.69389e-8,1,-1.77913e-8,3.20908e-8,1,-3.7202e-8,1.51134e-8,1,-1.93659e-8,-4.37583e-8,1,-7.58875e-8,-4.74294e-8,1,-7.36489e-8,-5.09859e-8,1,-7.12332e-8,-5.442e-8,1,-6.86454e-8,1.99098e-8,1,-4.49154e-8,8.84103e-9,1,-2.29192e-8,1.54116e-8,1,-4.66508e-8,1.31038e-8,1,-4.73508e-8,1.07645e-8,1,-4.79366e-8,4.19978e-9,1,-2.42035e-8,6.01434e-9,1,-4.87607e-8,3.61444e-9,1,-4.89976e-8,1.23755e-9,1,-5.04123e-8,-0.122409,0,-0.99248,-0.170958,0,-0.985278,-0.359892,0,-0.932994,-0.449609,0,-0.893226,-0.492897,0,-0.870088,-0.534994,0,-0.844856,-0.575807,0,-0.817586,-0.653171,0,-0.757211,-0.689537,0,-0.72425,-0.724245,0,-0.689543,-0.757207,0,-0.653176,-0.817582,0,-0.575812,-0.844853,0,-0.534999,-0.870085,0,-0.492902,-0.949526,0,-0.313688,-0.975701,0,-0.219105,-0.992479,0,-0.122414,-0.99729,0,-0.0735665,-0.999683,0,-0.0251908,-0.335866,0,-0.94191,1.41633e-7,1,-8.29734e-8,0,0,1,-3.35118e-8,1,-1.52488e-7,1.81322e-7,1,-4.47033e-8,3.51029e-8,1,-5.19632e-8,-0.335866,0,-0.94191,-1.15856e-8,1,-4.44326e-8,-0.214645,0,-0.976692,-5.45142e-9,1,-4.45831e-8,-0.113723,0,-0.993513,0.164399,0,-0.986394,-1,0,-8.34465e-7,0.164399,0,0.986394,-1,0,-0.00000299154,-1,0,-0.00000224443,-1,0,-0.00000299154,-1,0,-0.00000224443,-1,0.0000025017,-0.00000216002,-1,0,-0.00000237009,-1,0.00000157221,-0.00000224443,0,0,0,-1,0,-0.00000197629,-1,0,-0.00000471824,-1,0,-0.00000197629,-1,0,-0.00000471824,-1,-2.98027e-8,-0.00000199615,-1,-0.00000620944,-0.00000264645,4.33093e-14,1,-2.6491e-8,0.986394,0,0.164401,-0.986394,0,0.164401,0.00000196887,0,-1,0,0,-1,0.00000121959,0,-1,0,0,-1,0,-0.0000152588,-1,0.00000190677,0.0000057367,-1,-0.00000117375,0.0000457764,-1,0.00000436321,0,-1,0,0.0000305176,-1,0.00000436321,0,-1,0.00000190677,0.00000859052,-1,0.492896,0,0.870088,-0.975701,0,-0.219105,-0.949527,0,-0.313684,-0.932992,0,-0.359897,-0.914208,0,-0.405244,-0.575806,0,-0.817586,-0.449608,0,-0.893226,-0.405239,-1.1095e-7,-0.914211,-0.313679,0,-0.949529,-0.170958,0,-0.985278,-0.122409,0,-0.99248,0,0,-1,0,-1,4.469e-8,-1.98856e-9,-1,4.49716e-8,2.20459e-10,-1,4.5015e-8,2.42887e-9,-1,4.495e-8,-5.31244e-10,-1,4.5936e-8,-1.82011e-9,-1,4.3022e-8,1.63669e-9,-1,3.86923e-8,-2.53141e-9,-1,4.48976e-8,5.83791e-10,-1,4.04899e-8,-5.50648e-9,-1,3.61365e-8,-3.72668e-9,-1,3.63632e-8,-1.93795e-9,-1,3.65023e-8,-1.80646e-10,-1,4.56917e-8,2.06146e-9,-1,4.56456e-8,-4.57449e-9,-1,4.3304e-8,-2.44418e-9,-1,4.34763e-8,-3.07886e-10,-1,4.35438e-8,1.82911e-9,-1,4.35064e-8,3.96172e-9,-1,4.33642e-8,-3.05365e-9,-1,4.31537e-8,-9.32473e-10,-1,4.32515e-8,1.19088e-9,-1,4.32452e-8,-5.72271e-9,-1,4.45112e-8,5.4239e-9,-1,4.29202e-8,7.52337e-9,-1,4.26023e-8,8.70376e-10,-1,4.48692e-8,3.07098e-9,-1,4.47724e-8,5.26415e-9,-1,4.45677e-8,-8.00867e-10,-1,4.81955e-8,-5.1819e-9,-1,4.2013e-8,-3.11418e-9,-1,4.22168e-8,-1.06248e-9,-1,4.32779e-8,3.28856e-9,-1,4.45824e-8,5.4721e-9,-1,4.43673e-8,-4.17545e-9,-1,4.60959e-8,-1.90852e-9,-1,4.62453e-8,3.6297e-10,-1,4.62832e-8,2.63348e-9,-1,4.62097e-8,4.89768e-9,-1,4.60248e-8,-1.35188e-9,-1,4.13479e-8,6.78551e-10,-1,4.13645e-8,1.16173e-9,-1,5.072e-8,3.64896e-9,-1,5.06019e-8,6.12757e-9,-1,5.03619e-8,-7.20531e-10,-1,4.78167e-8,1.30131e-9,-1,3.82355e-8,-5.51114e-9,-1,4.63962e-8,5.04281e-9,-1,3.79238e-8,-9.36852e-10,-1,4.67129e-8,1.35642e-9,-1,4.67026e-8,3.64637e-9,-1,4.65797e-8,5.92757e-9,-1,4.63447e-8,-1.2443e-9,-1,4.75438e-8,-2.86846e-9,-1,3.88407e-8,-9.59208e-10,-1,3.89348e-8,-3.36437e-9,-1,5.01256e-8,2.86168e-9,-1,3.88414e-8,1.56507e-9,-1,5.0214e-8,6.65507e-9,-1,3.83737e-8,6.47938e-9,-1,4.98187e-8,2.25563e-9,-1,4.25766e-8,4.34203e-9,-1,4.2415e-8,6.39136e-9,-1,4.32366e-8,0.999685,5.70441e-7,0.0250852,-1.04038e-9,-1,4.23806e-8,0,-1,0,0,-1,0,3.37093e-9,-1,8.00754e-8,7.29617e-9,-1,7.98135e-8,1.12036e-8,-1,7.93594e-8,1.5084e-8,-1,7.87141e-8,-1.9347e-8,-1,7.46294e-9,-3.70447e-8,-1,1.86467e-8,-3.50386e-8,-1,2.21879e-8,7.4568e-8,-1,1.41892e-7,8.14402e-8,-1,1.38062e-7,-3.14038e-8,-1,2.7089e-8,-3.00368e-8,-1,2.85973e-8,-2.7089e-8,-1,3.14035e-8,-2.55155e-8,-1,3.26949e-8,-2.38805e-8,-1,3.39075e-8,-2.2188e-8,-1,3.50383e-8,-2.04421e-8,-1,3.60849e-8,-1.86469e-8,-1,3.70444e-8,-1.68067e-8,-1,3.79148e-8,-1.49261e-8,-1,3.86937e-8,-1.30094e-8,-1,3.93795e-8,-1.10614e-8,-1,3.99705e-8,-9.08672e-9,-1,4.04651e-8,-7.09039e-9,-1,4.08622e-8,-5.07695e-9,-1,4.11609e-8,-3.05106e-9,-1,4.13604e-8,0.893223,0,0.449614,0.932992,0,0.359897,0.949527,0,0.313684,0.975702,0,0.219104,3.69242e-9,-1,5.00574e-8,-5.78385e-9,-1,4.49654e-8,6.43573e-9,-1,3.70908e-8,8.24803e-9,-1,3.67304e-8,-2.0798e-8,-1,5.13254e-8,1.57446e-8,-1,4.76601e-8,-7.43406e-9,-1,4.32163e-8,-5.30458e-9,-1,4.3529e-8,-3.16235e-9,-1,4.37368e-8,-1.01241e-9,-1,4.38393e-8,1.13985e-9,-1,4.38362e-8,3.28948e-9,-1,4.37274e-8,5.431e-9,-1,4.35134e-8,7.55962e-9,-1,4.31945e-8,9.66993e-9,-1,4.27715e-8,-1.28382e-8,-1,4.98804e-8,-1.03752e-8,-1,5.04502e-8,1.58413e-8,-1,4.08896e-8,1.78285e-8,-1,4.00631e-8,-2.86023e-9,-1,5.14264e-8,-3.33475e-10,-1,5.1505e-8,2.19424e-9,-1,5.14591e-8,4.71654e-9,-1,5.12896e-8,3.61377e-9,-1,2.54982e-8,-1.41089e-8,-1,4.27079e-8,-1.19963e-8,-1,4.33488e-8,-9.8548e-9,-1,4.38851e-8,-7.68961e-9,-1,4.43158e-8,-5.50589e-9,-1,4.46396e-8,-3.30889e-9,-1,4.48563e-8,0,-1,4.82513e-8,-2.16341e-9,-1,4.40363e-8,-9.20485e-14,-1,4.82513e-8,0.122409,0,0.99248,0.2191,5.74437e-8,0.975702,0.266711,8.61655e-8,0.963777,0.359892,5.74437e-8,0.932994,0.405239,0,0.914211,0.449608,0,0.893226,0.492896,0,0.870088,1.87172e-8,-1,1.5974e-7,2.65325e-8,-1,1.58629e-7,-4.38849e-8,-1,2.20896e-8,-4.15083e-8,-1,2.62847e-8,-3.87321e-8,-1,3.02266e-8,-3.55828e-8,-1,3.38776e-8,-3.38777e-8,-1,3.55826e-8,-3.02268e-8,-1,3.87318e-8,-2.82898e-8,-1,4.01681e-8,1.21144e-7,-1,1.0579e-7,1.26188e-7,-1,9.97187e-8,-2.20897e-8,-1,4.38844e-8,-1.99098e-8,-1,4.49154e-8,-1.76821e-8,-1,4.58383e-8,-1.54116e-8,-1,4.66508e-8,-1.07645e-8,-1,4.79366e-8,-8.39957e-9,-1,4.8407e-8,-6.01434e-9,-1,4.87607e-8,-3.61444e-9,-1,4.89976e-8,-1.23755e-9,-1,5.04123e-8,-0.266711,0,-0.963776,-0.575807,0,-0.817586,-0.844853,0,-0.534999,2.14232e-8,-1,1.62827e-7,1.0122e-7,-1,4.47036e-8,9.12048e-8,-1,4.57583e-8,-1.15059e-7,-1,4.75413e-8,5.45142e-9,-1,4.45831e-8,-0.113723,0,-0.993512,-8.92414e-9,-1,1.05602e-7,-1,0,-0.00000224443,-1,-0.00000157222,-0.00000224443,-1,-0.0000025017,-0.00000216002,-1,0.00000815845,-0.00000199615,-1,0.00000100553,-0.00000264645,-8.66186e-14,-1,5.2982e-8,0,0,-1,0.00000190677,-0.0000057367,-1,0.00000121959,0.00000182994,-1,-0.00000117375,-0.0000457764,-1,0,-0.0000305176,-1,0.00000190677,-0.00000859052,-1],"faces":[33,21,22,250,249,0,0,0,0,33,20,21,249,248,1,1,1,1,33,19,20,248,247,2,2,2,2,33,18,19,247,246,3,3,3,3,33,17,18,246,245,4,4,4,4,33,16,17,245,244,5,5,5,5,33,15,16,244,243,6,6,6,6,33,14,15,243,242,7,7,7,7,33,13,14,242,241,8,8,8,8,33,12,13,241,240,9,9,9,9,33,11,12,240,239,10,10,10,10,33,10,11,239,238,11,11,11,11,33,230,0,2,99,12,12,12,12,33,9,10,238,237,13,13,13,13,33,99,98,229,230,14,14,14,14,33,8,9,237,236,15,15,15,15,33,98,97,228,229,16,16,16,16,33,7,8,236,235,17,17,17,17,33,97,96,227,228,18,18,18,18,33,6,7,235,234,19,19,19,19,33,96,95,226,227,20,20,20,20,33,5,6,234,233,21,21,21,21,33,95,94,225,226,22,22,22,22,33,4,5,233,232,23,23,23,23,33,94,93,224,225,24,24,24,24,33,397,4,232,403,25,25,25,25,33,93,92,223,224,26,26,26,26,33,92,91,222,223,27,27,27,27,33,91,90,221,222,28,28,28,28,33,90,89,220,221,29,29,29,29,33,89,88,219,220,30,30,30,30,33,88,87,218,219,31,31,31,31,33,87,86,217,218,32,32,32,32,33,86,85,216,217,33,33,33,33,33,85,84,215,216,34,34,34,34,33,84,83,214,215,35,35,35,35,33,83,82,213,214,36,36,36,36,33,82,81,212,213,37,37,37,37,33,81,80,211,212,38,38,38,38,33,80,79,210,211,39,39,39,39,33,79,78,209,210,40,40,40,40,33,78,77,208,209,41,41,41,41,33,77,76,207,208,42,42,42,42,33,76,75,206,207,43,43,43,43,33,75,74,205,206,44,44,44,44,33,74,73,204,205,45,45,45,45,33,73,72,203,204,46,46,46,46,33,72,71,202,203,47,47,47,47,33,71,70,201,202,48,48,48,48,33,396,69,200,402,49,49,49,49,33,398,101,69,396,50,50,50,50,33,103,102,70,71,51,51,51,51,33,104,103,71,72,52,52,52,52,33,105,104,72,73,53,53,53,53,33,106,105,73,74,54,54,54,54,33,107,106,74,75,55,55,55,55,33,108,107,75,76,56,56,56,56,33,109,108,76,77,57,57,57,57,33,110,109,77,78,58,58,58,58,33,111,110,78,79,59,59,59,59,33,112,111,79,80,60,60,60,60,33,113,112,80,81,61,61,61,61,33,114,113,81,82,62,62,62,62,33,115,114,82,83,63,63,63,63,33,116,115,83,84,64,64,64,64,33,117,116,84,85,65,65,65,65,33,118,117,85,86,66,66,66,66,33,119,118,86,87,67,67,67,67,33,120,119,87,88,68,68,68,68,33,121,120,88,89,69,69,69,69,33,122,121,89,90,70,70,70,70,33,123,122,90,91,71,71,71,71,33,124,123,91,92,72,72,72,72,33,125,124,92,93,73,73,73,73,33,126,125,93,94,74,74,74,74,33,127,126,94,95,75,75,75,75,33,128,127,95,96,76,76,76,76,33,129,128,96,97,77,77,77,77,33,130,129,97,98,78,78,78,78,33,131,130,98,99,79,79,79,79,33,132,131,99,2,80,80,80,80,33,133,132,2,100,81,81,81,81,33,158,157,320,321,82,82,82,82,33,157,156,319,320,83,83,83,83,33,156,155,318,319,84,84,84,84,33,155,154,317,318,85,85,85,85,33,154,153,316,317,86,86,86,86,33,153,152,315,316,87,87,87,87,33,152,151,314,315,88,88,88,88,33,151,150,313,314,89,89,89,89,33,150,149,312,313,90,90,90,90,33,149,148,311,312,91,91,91,91,33,148,147,310,311,92,92,92,92,33,147,146,309,310,93,93,93,93,33,146,145,308,309,94,94,94,94,33,145,144,307,308,95,95,95,95,33,144,143,306,307,96,96,96,96,33,143,142,305,306,97,97,97,97,33,142,141,304,305,98,98,98,98,33,141,140,303,304,99,99,99,99,33,140,139,302,303,100,100,100,100,33,139,138,301,302,101,101,101,101,33,138,137,300,301,102,102,102,102,33,137,136,299,300,103,103,103,103,33,136,135,298,299,104,104,104,104,33,399,134,297,405,49,49,49,49,33,132,133,296,295,105,105,105,105,33,131,132,295,294,106,106,106,106,33,130,131,294,293,107,107,107,107,33,129,130,293,292,108,108,108,108,33,128,129,292,291,109,109,109,109,33,127,128,291,290,110,110,110,110,33,126,127,290,289,111,111,111,111,33,125,126,289,288,112,112,112,112,33,124,125,288,287,113,113,113,113,33,123,124,287,286,114,114,114,114,33,122,123,286,285,115,115,115,115,33,121,122,285,284,116,116,116,116,33,400,167,134,399,50,50,50,50,33,169,168,135,136,117,117,117,117,33,170,169,136,137,118,118,118,118,33,171,170,137,138,119,119,119,119,33,172,171,138,139,120,120,120,120,33,173,172,139,140,121,121,121,121,33,174,173,140,141,122,122,122,122,33,175,174,141,142,123,123,123,123,33,176,175,142,143,124,124,124,124,33,177,176,143,144,125,125,125,125,33,178,177,144,145,126,126,126,126,33,179,178,145,146,127,127,127,127,33,180,179,146,147,128,128,128,128,33,181,180,147,148,129,129,129,129,33,182,181,148,149,130,130,130,130,33,183,182,149,150,131,131,131,131,33,184,183,150,151,132,132,132,132,33,185,184,151,152,133,133,133,133,33,186,185,152,153,134,134,134,134,33,187,186,153,154,135,135,135,135,33,188,187,154,155,136,136,136,136,33,189,188,155,156,137,137,137,137,33,190,189,156,157,138,138,138,138,33,191,190,157,158,139,139,139,139,33,192,191,158,159,140,140,140,140,33,193,192,159,160,141,141,141,141,33,194,193,160,161,142,142,142,142,33,195,194,161,162,143,143,143,143,33,196,195,162,163,144,144,144,144,33,197,196,163,164,145,145,145,145,33,198,197,164,165,146,146,146,146,33,199,198,165,166,147,147,147,147,33,198,199,362,361,148,148,148,148,33,197,198,361,360,149,149,149,149,33,196,197,360,359,150,150,150,150,33,195,196,359,358,151,151,151,151,33,194,195,358,357,152,152,152,152,33,193,194,357,356,153,153,153,153,33,192,193,356,355,154,154,154,154,33,191,192,355,354,155,155,155,155,33,190,191,354,353,156,156,156,156,33,189,190,353,352,157,157,157,157,33,188,189,352,351,158,158,158,158,33,187,188,351,350,159,159,159,159,33,186,187,350,349,160,160,160,160,33,185,186,349,348,161,161,161,161,33,184,185,348,347,162,162,162,162,33,183,184,347,346,163,163,163,163,33,182,183,346,345,164,164,164,164,33,181,182,345,344,165,165,165,165,33,180,181,344,343,166,166,166,166,33,179,180,343,342,167,167,167,167,33,178,179,342,341,168,168,168,168,33,177,178,341,340,169,169,169,169,33,176,177,340,339,170,170,170,170,33,175,176,339,338,171,171,171,171,33,174,175,338,337,172,172,172,172,33,173,174,337,336,173,173,173,173,33,172,173,336,335,174,174,174,174,33,171,172,335,334,175,175,175,175,33,170,171,334,333,176,176,176,176,33,169,170,333,332,177,177,177,177,33,168,169,332,331,178,178,178,178,33,400,168,331,406,179,179,179,179,33,479,478,64,65,180,180,180,180,33,427,428,14,13,181,181,181,181,33,480,479,65,66,182,182,182,182,33,428,429,15,14,183,183,183,183,33,481,480,66,67,184,184,184,184,33,429,430,16,15,185,185,185,185,33,482,481,67,68,186,186,186,186,33,430,431,17,16,187,187,187,187,33,431,432,18,17,4,4,4,4,33,432,433,19,18,188,188,188,188,33,433,434,20,19,189,189,189,189,33,434,435,21,20,190,190,190,190,33,435,436,22,21,0,0,0,0,33,436,437,23,22,191,191,191,191,33,437,438,24,23,192,192,192,192,33,438,439,25,24,193,193,193,193,33,439,440,26,25,194,194,194,194,33,440,441,27,26,195,195,195,195,33,441,442,28,27,196,196,196,196,33,442,443,29,28,197,197,197,197,33,443,444,30,29,198,198,198,198,33,444,445,31,30,199,199,199,199,33,445,446,32,31,200,200,200,200,33,446,447,33,32,201,201,201,201,33,447,448,34,33,202,202,202,202,33,448,449,35,34,203,203,203,203,33,1,0,262,263,204,204,204,204,33,2,0,1,100,205,205,205,205,33,880,450,36,401,49,49,49,49,33,452,451,37,38,206,206,206,206,33,453,452,38,39,207,207,207,207,33,454,453,39,40,208,208,208,208,33,455,454,40,41,209,209,209,209,33,456,455,41,42,210,210,210,210,33,457,456,42,43,211,211,211,211,33,458,457,43,44,212,212,212,212,33,459,458,44,45,213,213,213,213,33,460,459,45,46,214,214,214,214,33,461,460,46,47,215,215,215,215,33,462,461,47,48,216,216,216,216,33,463,462,48,49,217,217,217,217,33,464,463,49,50,218,218,218,218,33,465,464,50,51,219,219,219,219,33,466,465,51,52,220,220,220,220,33,467,466,52,53,221,221,221,221,33,468,467,53,54,222,222,222,222,33,469,468,54,55,223,223,223,223,33,879,418,4,397,224,224,224,224,33,470,469,55,56,225,225,225,225,33,418,419,5,4,23,23,23,23,33,471,470,56,57,226,226,226,226,33,419,420,6,5,227,227,227,227,33,472,471,57,58,228,228,228,228,33,420,421,7,6,229,229,229,229,33,473,472,58,59,230,230,230,230,33,421,422,8,7,231,231,231,231,33,474,473,59,60,232,232,232,232,33,422,423,9,8,233,233,233,233,33,475,474,60,61,234,234,234,234,33,423,424,10,9,235,235,235,235,33,476,475,61,62,236,236,236,236,33,424,425,11,10,11,11,11,11,33,477,476,62,63,237,237,237,237,33,425,426,12,11,238,238,238,238,33,478,477,63,64,239,239,239,239,33,426,427,13,12,240,240,240,240,33,402,200,231,403,241,241,241,241,33,202,201,232,233,242,242,242,242,33,203,202,233,234,243,243,243,243,33,204,203,234,235,244,244,244,244,33,205,204,235,236,242,242,242,242,33,206,205,236,237,241,241,241,241,33,207,206,237,238,245,245,245,245,33,208,207,238,239,242,242,242,242,33,209,208,239,240,246,246,246,246,33,210,209,240,241,247,247,247,247,33,211,210,241,242,248,248,248,248,33,212,211,242,243,249,249,249,249,33,213,212,243,244,250,250,250,250,33,214,213,244,245,251,251,251,251,33,215,214,245,246,252,252,252,252,33,216,215,246,247,253,253,253,253,33,217,216,247,248,254,254,254,254,33,218,217,248,249,255,255,255,255,33,219,218,249,250,256,256,256,256,33,220,219,250,251,257,257,257,257,33,221,220,251,252,258,258,258,258,33,222,221,252,253,259,259,259,259,33,223,222,253,254,260,260,260,260,33,224,223,254,255,261,261,261,261,33,225,224,255,256,262,262,262,262,33,226,225,256,257,263,263,263,263,33,227,226,257,258,264,264,264,264,33,228,227,258,259,265,265,265,265,33,229,228,259,260,266,266,266,266,33,230,229,260,261,267,267,267,267,33,0,230,261,262,268,268,268,268,33,22,23,251,250,269,269,269,269,33,23,24,252,251,270,270,270,270,33,24,25,253,252,193,193,193,193,33,25,26,254,253,194,194,194,194,33,26,27,255,254,271,271,271,271,33,27,28,256,255,196,196,196,196,33,28,29,257,256,197,197,197,197,33,29,30,258,257,272,272,272,272,33,30,31,259,258,199,199,199,199,33,31,32,260,259,273,273,273,273,33,32,33,261,260,201,201,201,201,33,33,34,262,261,274,274,274,274,33,34,35,263,262,275,275,275,275,33,405,297,411,408,276,276,276,276,33,299,298,265,266,277,277,277,277,33,300,299,266,267,278,278,278,278,33,301,300,267,268,279,279,279,279,33,302,301,268,269,280,280,280,280,33,303,302,269,270,281,281,281,281,33,304,303,270,271,282,282,282,282,33,305,304,271,272,283,283,283,283,33,306,305,272,273,284,284,284,284,33,307,306,273,274,285,285,285,285,33,308,307,274,275,286,286,286,286,33,309,308,275,276,287,287,287,287,33,310,309,276,277,288,288,288,288,33,311,310,277,278,289,289,289,289,33,312,311,278,279,290,290,290,290,33,313,312,279,280,291,291,291,291,33,314,313,280,281,292,292,292,292,33,315,314,281,282,293,293,293,293,33,316,315,282,283,294,294,294,294,33,317,316,283,284,295,295,295,295,33,318,317,284,285,296,296,296,296,33,319,318,285,286,297,297,297,297,33,320,319,286,287,298,298,298,298,33,321,320,287,288,299,299,299,299,33,322,321,288,289,300,300,300,300,33,323,322,289,290,301,301,301,301,33,324,323,290,291,302,302,302,302,33,325,324,291,292,303,303,303,303,33,326,325,292,293,304,304,304,304,33,327,326,293,294,305,305,305,305,33,328,327,294,295,306,306,306,306,32,415,329,328,307,307,307,32,328,295,296,308,308,308,32,296,414,415,242,242,242,32,328,296,415,309,309,309,33,159,158,321,322,310,310,310,310,33,160,159,322,323,311,311,311,311,33,161,160,323,324,312,312,312,312,33,162,161,324,325,313,313,313,313,33,163,162,325,326,314,314,314,314,33,164,163,326,327,315,315,315,315,33,165,164,327,328,316,316,316,316,33,166,165,328,329,317,317,317,317,33,398,102,265,404,318,318,318,318,33,102,103,266,265,319,319,319,319,33,103,104,267,266,320,320,320,320,33,104,105,268,267,321,321,321,321,33,105,106,269,268,322,322,322,322,33,106,107,270,269,323,323,323,323,33,107,108,271,270,324,324,324,324,33,108,109,272,271,325,325,325,325,33,109,110,273,272,326,326,326,326,33,110,111,274,273,240,240,240,240,33,111,112,275,274,327,327,327,327,33,112,113,276,275,328,328,328,328,33,113,114,277,276,329,329,329,329,33,114,115,278,277,330,330,330,330,33,115,116,279,278,331,331,331,331,33,116,117,280,279,332,332,332,332,33,117,118,281,280,333,333,333,333,33,118,119,282,281,334,334,334,334,33,119,120,283,282,335,335,335,335,33,120,121,284,283,336,336,336,336,33,407,363,330,406,241,241,241,241,33,365,364,331,332,337,337,337,337,33,366,365,332,333,338,338,338,338,33,367,366,333,334,242,242,242,242,33,368,367,334,335,339,339,339,339,33,369,368,335,336,340,340,340,340,33,370,369,336,337,341,341,341,341,33,371,370,337,338,342,342,342,342,33,372,371,338,339,343,343,343,343,33,373,372,339,340,344,344,344,344,33,374,373,340,341,345,345,345,345,33,375,374,341,342,346,346,346,346,33,376,375,342,343,347,347,347,347,33,377,376,343,344,348,348,348,348,33,378,377,344,345,349,349,349,349,33,379,378,345,346,350,350,350,350,33,380,379,346,347,351,351,351,351,33,381,380,347,348,352,352,352,352,33,382,381,348,349,353,353,353,353,33,383,382,349,350,354,354,354,354,33,384,383,350,351,355,355,355,355,33,385,384,351,352,356,356,356,356,33,386,385,352,353,357,357,357,357,33,387,386,353,354,358,358,358,358,33,388,387,354,355,359,359,359,359,33,389,388,355,356,360,360,360,360,33,390,389,356,357,361,361,361,361,33,391,390,357,358,362,362,362,362,33,392,391,358,359,363,363,363,363,33,393,392,359,360,364,364,364,364,33,394,393,360,361,365,365,365,365,33,395,394,361,362,366,366,366,366,33,401,36,363,407,49,49,49,49,33,38,37,364,365,206,206,206,206,33,39,38,365,366,367,367,367,367,33,40,39,366,367,368,368,368,368,33,41,40,367,368,209,209,209,209,33,42,41,368,369,210,210,210,210,33,43,42,369,370,211,211,211,211,33,44,43,370,371,369,369,369,369,33,45,44,371,372,213,213,213,213,33,46,45,372,373,370,370,370,370,33,47,46,373,374,371,371,371,371,33,48,47,374,375,372,372,372,372,33,49,48,375,376,373,373,373,373,33,50,49,376,377,218,218,218,218,33,51,50,377,378,374,374,374,374,33,52,51,378,379,375,375,375,375,33,53,52,379,380,376,376,376,376,33,54,53,380,381,377,377,377,377,33,55,54,381,382,223,223,223,223,33,56,55,382,383,378,378,378,378,33,57,56,383,384,379,379,379,379,33,58,57,384,385,380,380,380,380,33,59,58,385,386,230,230,230,230,33,60,59,386,387,232,232,232,232,33,61,60,387,388,234,234,234,234,33,62,61,388,389,381,381,381,381,33,63,62,389,390,237,237,237,237,33,64,63,390,391,382,382,382,382,33,65,64,391,392,180,180,180,180,33,66,65,392,393,383,383,383,383,33,67,66,393,394,384,384,384,384,33,68,67,394,395,385,385,385,385,33,37,401,407,364,386,386,386,386,33,364,407,406,331,387,387,387,387,33,101,398,404,264,388,388,388,388,32,298,405,408,389,389,389,32,409,404,265,242,242,242,32,298,408,409,390,390,390,32,298,409,265,391,391,391,33,201,402,403,232,242,242,242,242,33,417,879,397,3,388,388,388,388,33,451,880,401,37,392,392,392,392,33,167,400,406,330,388,388,388,388,33,168,400,399,135,393,393,393,393,33,135,399,405,298,394,394,394,394,33,102,398,396,70,395,395,395,395,33,70,396,402,201,396,396,396,396,33,3,397,403,231,388,388,388,388,33,410,409,898,899,397,397,397,397,33,409,410,264,404,242,242,242,242,33,409,408,897,898,398,398,398,398,33,408,411,900,897,399,399,399,399,32,411,297,134,400,400,400,32,167,330,363,401,401,401,32,900,411,134,402,402,402,32,167,363,36,403,403,403,32,900,134,167,404,404,404,32,36,450,900,405,405,405,32,167,36,900,406,406,406,32,417,3,231,407,407,407,32,231,200,69,408,408,408,32,101,264,410,409,409,409,32,417,231,69,410,410,410,32,101,410,899,411,411,411,32,417,69,101,412,412,412,32,101,899,417,413,413,413,33,413,415,414,412,414,414,414,414,33,414,907,905,412,415,415,415,415,33,413,906,908,415,416,416,416,416,33,412,905,906,413,417,417,417,417,32,166,329,415,418,418,418,32,908,482,68,419,419,419,32,68,395,362,418,418,418,32,68,362,199,420,420,420,32,166,415,908,420,420,420,32,908,68,199,421,421,421,32,166,908,199,422,422,422,32,100,1,263,418,418,418,32,35,449,907,423,423,423,32,100,263,35,420,420,420,32,414,296,133,424,424,424,32,100,35,907,425,425,425,32,907,414,133,426,426,426,32,100,907,133,427,427,427,33,504,732,733,505,0,0,0,0,33,503,731,732,504,1,1,1,1,33,502,730,731,503,2,2,2,2,33,501,729,730,502,3,3,3,3,33,500,728,729,501,4,4,4,4,33,499,727,728,500,5,5,5,5,33,498,726,727,499,6,6,6,6,33,497,725,726,498,7,7,7,7,33,496,724,725,497,428,428,428,428,33,495,723,724,496,9,9,9,9,33,494,722,723,495,10,10,10,10,33,493,721,722,494,11,11,11,11,33,485,483,713,582,12,12,12,12,33,492,720,721,493,13,13,13,13,33,582,713,712,581,14,14,14,14,33,491,719,720,492,15,15,15,15,33,581,712,711,580,16,16,16,16,33,490,718,719,491,17,17,17,17,33,580,711,710,579,429,429,429,429,33,489,717,718,490,19,19,19,19,33,579,710,709,578,20,20,20,20,33,488,716,717,489,21,21,21,21,33,578,709,708,577,430,430,430,430,33,487,715,716,488,23,23,23,23,33,577,708,707,576,431,431,431,431,33,882,888,715,487,25,25,25,25,33,576,707,706,575,432,432,432,432,33,575,706,705,574,27,27,27,27,33,574,705,704,573,28,28,28,28,33,573,704,703,572,29,29,29,29,33,572,703,702,571,30,30,30,30,33,571,702,701,570,31,31,31,31,33,570,701,700,569,32,32,32,32,33,569,700,699,568,33,33,33,33,33,568,699,698,567,34,34,34,34,33,567,698,697,566,35,35,35,35,33,566,697,696,565,36,36,36,36,33,565,696,695,564,433,433,433,433,33,564,695,694,563,38,38,38,38,33,563,694,693,562,39,39,39,39,33,562,693,692,561,434,434,434,434,33,561,692,691,560,435,435,435,435,33,560,691,690,559,42,42,42,42,33,559,690,689,558,436,436,436,436,33,558,689,688,557,44,44,44,44,33,557,688,687,556,45,45,45,45,33,556,687,686,555,437,437,437,437,33,555,686,685,554,438,438,438,438,33,554,685,684,553,48,48,48,48,33,881,887,683,552,439,439,439,439,33,883,881,552,584,440,440,440,440,33,586,554,553,585,441,441,441,441,33,587,555,554,586,442,442,442,442,33,588,556,555,587,443,443,443,443,33,589,557,556,588,444,444,444,444,33,590,558,557,589,445,445,445,445,33,591,559,558,590,446,446,446,446,33,592,560,559,591,447,447,447,447,33,593,561,560,592,448,448,448,448,33,594,562,561,593,449,449,449,449,33,595,563,562,594,450,450,450,450,33,596,564,563,595,451,451,451,451,33,597,565,564,596,452,452,452,452,33,598,566,565,597,453,453,453,453,33,599,567,566,598,454,454,454,454,33,600,568,567,599,455,455,455,455,33,601,569,568,600,456,456,456,456,33,602,570,569,601,457,457,457,457,33,603,571,570,602,458,458,458,458,33,604,572,571,603,459,459,459,459,33,605,573,572,604,460,460,460,460,33,606,574,573,605,461,461,461,461,33,607,575,574,606,462,462,462,462,33,608,576,575,607,463,463,463,463,33,609,577,576,608,464,464,464,464,33,610,578,577,609,465,465,465,465,33,611,579,578,610,466,466,466,466,33,612,580,579,611,467,467,467,467,33,613,581,580,612,468,468,468,468,33,614,582,581,613,469,469,469,469,33,615,485,582,614,470,470,470,470,33,616,583,485,615,471,471,471,471,33,641,804,803,640,82,82,82,82,33,640,803,802,639,83,83,83,83,33,639,802,801,638,84,84,84,84,33,638,801,800,637,85,85,85,85,33,637,800,799,636,86,86,86,86,33,636,799,798,635,87,87,87,87,33,635,798,797,634,88,88,88,88,33,634,797,796,633,89,89,89,89,33,633,796,795,632,90,90,90,90,33,632,795,794,631,91,91,91,91,33,631,794,793,630,92,92,92,92,33,630,793,792,629,93,93,93,93,33,629,792,791,628,94,94,94,94,33,628,791,790,627,95,95,95,95,33,627,790,789,626,96,96,96,96,33,626,789,788,625,97,97,97,97,33,625,788,787,624,98,98,98,98,33,624,787,786,623,99,99,99,99,33,623,786,785,622,100,100,100,100,33,622,785,784,621,101,101,101,101,33,621,784,783,620,102,102,102,102,33,620,783,782,619,103,103,103,103,33,619,782,781,618,104,104,104,104,33,884,890,780,617,439,439,439,439,33,615,778,779,616,105,105,105,105,33,614,777,778,615,106,106,106,106,33,613,776,777,614,107,107,107,107,33,612,775,776,613,108,108,108,108,33,611,774,775,612,109,109,109,109,33,610,773,774,611,110,110,110,110,33,609,772,773,610,111,111,111,111,33,608,771,772,609,112,112,112,112,33,607,770,771,608,113,113,113,113,33,606,769,770,607,114,114,114,114,33,605,768,769,606,115,115,115,115,33,604,767,768,605,116,116,116,116,33,885,884,617,650,440,440,440,440,33,652,619,618,651,472,472,472,472,33,653,620,619,652,473,473,473,473,33,654,621,620,653,474,474,474,474,33,655,622,621,654,475,475,475,475,33,656,623,622,655,476,476,476,476,33,657,624,623,656,477,477,477,477,33,658,625,624,657,478,478,478,478,33,659,626,625,658,479,479,479,479,33,660,627,626,659,480,480,480,480,33,661,628,627,660,481,481,481,481,33,662,629,628,661,482,482,482,482,33,663,630,629,662,483,483,483,483,33,664,631,630,663,484,484,484,484,33,665,632,631,664,485,485,485,485,33,666,633,632,665,486,486,486,486,33,667,634,633,666,487,487,487,487,33,668,635,634,667,488,488,488,488,33,669,636,635,668,489,489,489,489,33,670,637,636,669,490,490,490,490,33,671,638,637,670,491,491,491,491,33,672,639,638,671,492,492,492,492,33,673,640,639,672,493,493,493,493,33,674,641,640,673,494,494,494,494,33,675,642,641,674,495,495,495,495,33,676,643,642,675,496,496,496,496,33,677,644,643,676,497,497,497,497,33,678,645,644,677,498,498,498,498,33,679,646,645,678,499,499,499,499,33,680,647,646,679,500,500,500,500,33,681,648,647,680,501,501,501,501,33,682,649,648,681,502,502,502,502,33,681,844,845,682,148,148,148,148,33,680,843,844,681,149,149,149,149,33,679,842,843,680,150,150,150,150,33,678,841,842,679,151,151,151,151,33,677,840,841,678,152,152,152,152,33,676,839,840,677,153,153,153,153,33,675,838,839,676,154,154,154,154,33,674,837,838,675,155,155,155,155,33,673,836,837,674,156,156,156,156,33,672,835,836,673,157,157,157,157,33,671,834,835,672,158,158,158,158,33,670,833,834,671,159,159,159,159,33,669,832,833,670,160,160,160,160,33,668,831,832,669,161,161,161,161,33,667,830,831,668,162,162,162,162,33,666,829,830,667,163,163,163,163,33,665,828,829,666,164,164,164,164,33,664,827,828,665,165,165,165,165,33,663,826,827,664,166,166,166,166,33,662,825,826,663,167,167,167,167,33,661,824,825,662,168,168,168,168,33,660,823,824,661,169,169,169,169,33,659,822,823,660,170,170,170,170,33,658,821,822,659,171,171,171,171,33,657,820,821,658,172,172,172,172,33,656,819,820,657,173,173,173,173,33,655,818,819,656,174,174,174,174,33,654,817,818,655,175,175,175,175,33,653,816,817,654,176,176,176,176,33,652,815,816,653,177,177,177,177,33,651,814,815,652,178,178,178,178,33,885,891,814,651,179,179,179,179,33,479,548,547,478,180,180,180,180,33,427,496,497,428,181,181,181,181,33,480,549,548,479,182,182,182,182,33,428,497,498,429,183,183,183,183,33,481,550,549,480,184,184,184,184,33,429,498,499,430,185,185,185,185,33,482,551,550,481,186,186,186,186,33,430,499,500,431,187,187,187,187,33,431,500,501,432,4,4,4,4,33,432,501,502,433,188,188,188,188,33,433,502,503,434,189,189,189,189,33,434,503,504,435,190,190,190,190,33,435,504,505,436,0,0,0,0,33,436,505,506,437,191,191,191,191,33,437,506,507,438,192,192,192,192,33,438,507,508,439,193,193,193,193,33,439,508,509,440,194,194,194,194,33,440,509,510,441,195,195,195,195,33,441,510,511,442,196,196,196,196,33,442,511,512,443,197,197,197,197,33,443,512,513,444,198,198,198,198,33,444,513,514,445,199,199,199,199,33,445,514,515,446,200,200,200,200,33,446,515,516,447,201,201,201,201,33,447,516,517,448,202,202,202,202,33,448,517,518,449,503,503,503,503,33,745,483,484,746,504,504,504,504,33,485,583,484,483,205,205,205,205,33,880,886,519,450,439,439,439,439,33,452,521,520,451,206,206,206,206,33,453,522,521,452,207,207,207,207,33,454,523,522,453,208,208,208,208,33,455,524,523,454,209,209,209,209,33,456,525,524,455,210,210,210,210,33,457,526,525,456,211,211,211,211,33,458,527,526,457,212,212,212,212,33,459,528,527,458,213,213,213,213,33,460,529,528,459,214,214,214,214,33,461,530,529,460,215,215,215,215,33,462,531,530,461,216,216,216,216,33,463,532,531,462,217,217,217,217,33,464,533,532,463,218,218,218,218,33,465,534,533,464,219,219,219,219,33,466,535,534,465,220,220,220,220,33,467,536,535,466,221,221,221,221,33,468,537,536,467,222,222,222,222,33,469,538,537,468,223,223,223,223,33,879,882,487,418,224,224,224,224,33,470,539,538,469,225,225,225,225,33,418,487,488,419,23,23,23,23,33,471,540,539,470,226,226,226,226,33,419,488,489,420,227,227,227,227,33,472,541,540,471,228,228,228,228,33,420,489,490,421,229,229,229,229,33,473,542,541,472,230,230,230,230,33,421,490,491,422,231,231,231,231,33,474,543,542,473,232,232,232,232,33,422,491,492,423,233,233,233,233,33,475,544,543,474,234,234,234,234,33,423,492,493,424,235,235,235,235,33,476,545,544,475,236,236,236,236,33,424,493,494,425,11,11,11,11,33,477,546,545,476,237,237,237,237,33,425,494,495,426,238,238,238,238,33,478,547,546,477,239,239,239,239,33,426,495,496,427,240,240,240,240,33,887,888,714,683,505,505,505,505,33,685,716,715,684,506,506,506,506,33,686,717,716,685,506,506,506,506,33,687,718,717,686,507,507,507,507,33,688,719,718,687,508,508,508,508,33,689,720,719,688,509,509,509,509,33,690,721,720,689,510,510,510,510,33,691,722,721,690,511,511,511,511,33,692,723,722,691,506,506,506,506,33,693,724,723,692,512,512,512,512,33,694,725,724,693,506,506,506,506,33,695,726,725,694,513,513,513,513,33,696,727,726,695,514,514,514,514,33,697,728,727,696,515,515,515,515,33,698,729,728,697,516,516,516,516,33,699,730,729,698,517,517,517,517,33,700,731,730,699,505,505,505,505,33,701,732,731,700,518,518,518,518,33,702,733,732,701,519,519,519,519,33,703,734,733,702,520,520,520,520,33,704,735,734,703,521,521,521,521,33,705,736,735,704,522,522,522,522,33,706,737,736,705,523,523,523,523,33,707,738,737,706,524,524,524,524,33,708,739,738,707,525,525,525,525,33,709,740,739,708,526,526,526,526,33,710,741,740,709,527,527,527,527,33,711,742,741,710,528,528,528,528,33,712,743,742,711,529,529,529,529,33,713,744,743,712,530,530,530,530,33,483,745,744,713,531,531,531,531,33,505,733,734,506,269,269,269,269,33,506,734,735,507,270,270,270,270,33,507,735,736,508,193,193,193,193,33,508,736,737,509,532,532,532,532,33,509,737,738,510,195,195,195,195,33,510,738,739,511,533,533,533,533,33,511,739,740,512,534,534,534,534,33,512,740,741,513,272,272,272,272,33,513,741,742,514,535,535,535,535,33,514,742,743,515,273,273,273,273,33,515,743,744,516,201,201,201,201,33,516,744,745,517,274,274,274,274,33,517,745,746,518,275,275,275,275,33,890,893,896,780,506,506,506,506,33,782,749,748,781,536,536,536,536,33,783,750,749,782,537,537,537,537,33,784,751,750,783,538,538,538,538,33,785,752,751,784,539,539,539,539,33,786,753,752,785,540,540,540,540,33,787,754,753,786,541,541,541,541,33,788,755,754,787,542,542,542,542,33,789,756,755,788,543,543,543,543,33,790,757,756,789,544,544,544,544,33,791,758,757,790,545,545,545,545,33,792,759,758,791,546,546,546,546,33,793,760,759,792,547,547,547,547,33,794,761,760,793,548,548,548,548,33,795,762,761,794,549,549,549,549,33,796,763,762,795,550,550,550,550,33,797,764,763,796,551,551,551,551,33,798,765,764,797,552,552,552,552,33,799,766,765,798,553,553,553,553,33,800,767,766,799,554,554,554,554,33,801,768,767,800,555,555,555,555,33,802,769,768,801,556,556,556,556,33,803,770,769,802,557,557,557,557,33,804,771,770,803,558,558,558,558,33,805,772,771,804,559,559,559,559,33,806,773,772,805,560,560,560,560,33,807,774,773,806,561,561,561,561,33,808,775,774,807,562,562,562,562,33,809,776,775,808,563,563,563,563,33,810,777,776,809,564,564,564,564,33,811,778,777,810,565,565,565,565,32,811,812,904,566,566,566,32,904,903,779,506,506,506,32,779,778,811,567,567,567,32,904,779,811,568,568,568,33,642,805,804,641,310,310,310,310,33,643,806,805,642,311,311,311,311,33,644,807,806,643,312,312,312,312,33,645,808,807,644,313,313,313,313,33,646,809,808,645,314,314,314,314,33,647,810,809,646,315,315,315,315,33,648,811,810,647,316,316,316,316,33,649,812,811,648,317,317,317,317,33,883,889,748,585,318,318,318,318,33,585,748,749,586,319,319,319,319,33,586,749,750,587,569,569,569,569,33,587,750,751,588,321,321,321,321,33,588,751,752,589,570,570,570,570,33,589,752,753,590,571,571,571,571,33,590,753,754,591,324,324,324,324,33,591,754,755,592,572,572,572,572,33,592,755,756,593,573,573,573,573,33,593,756,757,594,574,574,574,574,33,594,757,758,595,575,575,575,575,33,595,758,759,596,328,328,328,328,33,596,759,760,597,329,329,329,329,33,597,760,761,598,330,330,330,330,33,598,761,762,599,331,331,331,331,33,599,762,763,600,332,332,332,332,33,600,763,764,601,333,333,333,333,33,601,764,765,602,334,334,334,334,33,602,765,766,603,335,335,335,335,33,603,766,767,604,336,336,336,336,33,892,891,813,846,505,505,505,505,33,848,815,814,847,506,506,506,506,33,849,816,815,848,506,506,506,506,33,850,817,816,849,506,506,506,506,33,851,818,817,850,506,506,506,506,33,852,819,818,851,576,576,576,576,33,853,820,819,852,577,577,577,577,33,854,821,820,853,505,505,505,505,33,855,822,821,854,506,506,506,506,33,856,823,822,855,578,578,578,578,33,857,824,823,856,506,506,506,506,33,858,825,824,857,579,579,579,579,33,859,826,825,858,506,506,506,506,33,860,827,826,859,580,580,580,580,33,861,828,827,860,505,505,505,505,33,862,829,828,861,581,581,581,581,33,863,830,829,862,582,582,582,582,33,864,831,830,863,506,506,506,506,33,865,832,831,864,583,583,583,583,33,866,833,832,865,584,584,584,584,33,867,834,833,866,585,585,585,585,33,868,835,834,867,586,586,586,586,33,869,836,835,868,587,587,587,587,33,870,837,836,869,588,588,588,588,33,871,838,837,870,589,589,589,589,33,872,839,838,871,590,590,590,590,33,873,840,839,872,506,506,506,506,33,874,841,840,873,591,591,591,591,33,875,842,841,874,592,592,592,592,33,876,843,842,875,593,593,593,593,33,877,844,843,876,594,594,594,594,33,878,845,844,877,595,595,595,595,33,886,892,846,519,439,439,439,439,33,521,848,847,520,206,206,206,206,33,522,849,848,521,367,367,367,367,33,523,850,849,522,368,368,368,368,33,524,851,850,523,209,209,209,209,33,525,852,851,524,596,596,596,596,33,526,853,852,525,211,211,211,211,33,527,854,853,526,369,369,369,369,33,528,855,854,527,213,213,213,213,33,529,856,855,528,370,370,370,370,33,530,857,856,529,371,371,371,371,33,531,858,857,530,372,372,372,372,33,532,859,858,531,597,597,597,597,33,533,860,859,532,218,218,218,218,33,534,861,860,533,374,374,374,374,33,535,862,861,534,375,375,375,375,33,536,863,862,535,376,376,376,376,33,537,864,863,536,377,377,377,377,33,538,865,864,537,223,223,223,223,33,539,866,865,538,378,378,378,378,33,540,867,866,539,598,598,598,598,33,541,868,867,540,380,380,380,380,33,542,869,868,541,230,230,230,230,33,543,870,869,542,232,232,232,232,33,544,871,870,543,234,234,234,234,33,545,872,871,544,381,381,381,381,33,546,873,872,545,237,237,237,237,33,547,874,873,546,382,382,382,382,33,548,875,874,547,180,180,180,180,33,549,876,875,548,383,383,383,383,33,550,877,876,549,384,384,384,384,33,551,878,877,550,385,385,385,385,33,520,847,892,886,386,386,386,386,33,847,814,891,892,506,506,506,506,33,584,747,889,883,388,388,388,388,32,748,889,894,599,599,599,32,893,890,781,506,506,506,32,748,894,893,600,600,600,32,781,748,893,601,601,601,33,684,715,888,887,506,506,506,506,33,417,486,882,879,388,388,388,388,33,451,520,886,880,392,392,392,392,33,650,813,891,885,388,388,388,388,33,651,618,884,885,602,602,602,602,33,618,781,890,884,394,394,394,394,33,585,553,881,883,603,603,603,603,33,553,684,887,881,604,604,604,604,33,486,714,888,882,388,388,388,388,33,895,899,898,894,397,397,397,397,33,894,889,747,895,605,605,605,605,33,894,898,897,893,398,398,398,398,33,893,897,900,896,399,399,399,399,32,617,780,896,400,400,400,32,900,450,519,405,405,405,32,519,846,813,403,403,403,32,519,813,650,606,606,606,32,617,896,900,402,402,402,32,900,519,650,607,607,607,32,900,650,617,608,608,608,32,714,486,417,407,407,407,32,899,895,747,411,411,411,32,899,747,584,409,409,409,32,683,714,417,410,410,410,32,899,584,552,609,609,609,32,552,683,417,408,408,408,32,417,899,552,610,610,610,33,902,901,903,904,611,611,611,611,33,903,901,905,907,415,415,415,415,33,902,904,908,906,416,416,416,416,33,901,902,906,905,417,417,417,417,32,682,845,878,439,439,439,32,878,551,482,407,407,407,32,908,904,812,439,439,439,32,908,812,649,439,439,439,32,682,878,482,612,612,612,32,908,649,682,613,613,613,32,682,482,908,614,614,614,32,616,779,903,424,424,424,32,907,449,518,615,615,615,32,518,746,484,439,439,439,32,518,484,583,439,439,439,32,616,903,907,426,426,426,32,907,518,583,616,616,616,32,583,616,907,617,617,617],"vertices":[233.218,3.99999,-204.542,233.5,3.99999,-215.75,233.218,0.999991,-204.542,0.24996,1,19,11.5305,1,18.717,23.0336,1,17.8685,34.4812,1,16.4565,45.8457,1,14.4846,57.0998,1,11.9575,68.2164,1,8.88113,79.1686,1,5.26305,89.93,1,1.11192,100.475,1,-3.56224,110.778,1,-8.74818,120.814,0.999999,-14.4334,130.558,0.999999,-20.6042,139.989,0.999999,-27.2458,149.082,0.999999,-34.3421,157.816,0.999998,-41.876,166.17,0.999998,-49.8293,174.123,0.999997,-58.183,181.657,0.999997,-66.917,188.753,0.999997,-76.0101,195.395,0.999996,-85.4404,201.566,0.999996,-95.1853,207.251,0.999995,-105.221,212.437,0.999995,-115.524,217.111,0.999995,-126.069,221.263,0.999994,-136.83,224.881,0.999994,-147.783,227.957,0.999993,-158.899,230.484,0.999993,-170.153,232.456,0.999992,-181.518,233.868,0.999992,-192.966,234.717,0.999991,-204.469,235,0.999991,-215.75,0.250039,0.999999,-19.0114,9.66539,0.999999,-19.2487,19.3078,0.999999,-19.96,28.9038,0.999999,-21.1435,38.4301,0.999999,-22.7964,47.8638,0.999999,-24.9148,57.1823,0.999999,-27.4936,66.363,0.999999,-30.5264,75.3838,0.999999,-34.0061,84.223,0.999998,-37.9242,92.8593,0.999998,-42.2713,101.272,0.999998,-47.037,109.44,0.999998,-52.2097,117.345,0.999997,-57.777,124.968,0.999997,-63.7254,132.289,0.999997,-70.0407,139.291,0.999997,-76.7076,145.958,0.999996,-83.7101,152.274,0.999996,-91.0313,158.222,0.999996,-98.6535,163.79,0.999995,-106.559,168.962,0.999995,-114.727,173.728,0.999995,-123.14,178.075,0.999994,-131.776,181.994,0.999994,-140.615,185.473,0.999993,-149.636,188.506,0.999993,-158.817,191.085,0.999993,-168.135,193.203,0.999992,-177.569,194.856,0.999992,-187.095,196.04,0.999991,-196.691,196.751,0.999991,-206.334,196.989,0.999991,-215.75,0.249963,1,17.4995,11.4568,1,17.2183,22.8865,1,16.3752,34.261,1,14.9723,45.553,1,13.013,56.7352,1,10.502,67.7808,1,7.44529,78.6631,1,3.8503,89.3558,1,-0.274315,99.8333,1,-4.91864,110.07,1,-10.0715,120.042,0.999999,-15.7204,129.725,0.999999,-21.8518,139.095,0.999999,-28.451,148.13,0.999998,-35.5019,156.808,0.999998,-42.9877,165.109,0.999998,-50.8903,173.011,0.999997,-59.1907,180.497,0.999997,-67.8688,187.548,0.999997,-76.9039,194.147,0.999996,-86.274,200.279,0.999996,-95.9567,205.928,0.999995,-105.928,211.081,0.999995,-116.166,215.725,0.999994,-126.643,219.85,0.999994,-137.336,223.445,0.999994,-148.218,226.502,0.999993,-159.264,229.013,0.999993,-170.446,230.972,0.999992,-181.738,232.375,0.999992,-193.113,233.5,0.999991,-215.75,0.249979,1,9.49714,11.0642,1,9.22555,22.1021,1,8.41135,33.0868,1,7.05653,43.9918,1,5.16438,54.7908,1,2.7394,65.4578,1,-0.212544,75.9672,1,-3.68433,86.2935,1,-7.66759,96.4119,0.999999,-12.1527,106.298,0.999999,-17.129,115.928,0.999999,-22.5843,125.279,0.999999,-28.5056,134.328,0.999998,-34.8786,143.053,0.999998,-41.6879,151.434,0.999998,-48.9171,159.45,0.999998,-56.5489,167.082,0.999997,-64.5648,174.311,0.999997,-72.9455,181.121,0.999996,-81.6709,187.494,0.999996,-90.7199,193.415,0.999996,-100.071,198.87,0.999995,-109.701,203.847,0.999995,-119.587,208.332,0.999994,-129.705,212.315,0.999994,-140.032,215.787,0.999993,-150.541,218.739,0.999993,-161.208,221.164,0.999992,-172.007,223.056,0.999992,-182.912,224.411,0.999992,-193.897,225.226,0.999991,-204.935,225.497,0.999991,-215.75,0.250019,1,-9.50859,10.1317,1,-9.75728,20.2393,1,-10.5029,30.2982,0.999999,-11.7435,40.284,0.999999,-13.4762,50.1728,0.999999,-15.6968,59.9408,0.999999,-18.3999,69.5644,0.999999,-21.5791,79.0203,0.999999,-25.2266,88.286,0.999999,-29.3337,97.3389,0.999999,-33.8905,106.157,0.999998,-38.8861,114.72,0.999998,-44.3083,123.006,0.999998,-50.1442,130.996,0.999998,-56.3796,138.671,0.999997,-62.9995,146.011,0.999997,-69.988,153,0.999997,-77.3283,159.62,0.999996,-85.0027,165.855,0.999996,-92.9927,171.691,0.999996,-101.279,177.113,0.999995,-109.842,182.109,0.999995,-118.66,186.666,0.999994,-127.713,190.773,0.999994,-136.979,194.421,0.999994,-146.435,197.6,0.999993,-156.058,200.303,0.999993,-165.826,202.524,0.999992,-175.715,204.256,0.999992,-185.701,205.497,0.999991,-195.76,206.243,0.999991,-205.868,206.491,0.999991,-215.75,0.250036,0.999999,-17.511,9.73901,0.999999,-17.7501,19.4549,0.999999,-18.4667,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,66.8685,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5678,93.5666,0.999998,-40.9481,102.043,0.999998,-45.75,110.274,0.999998,-50.9621,118.239,0.999998,-56.5718,125.92,0.999997,-62.5655,133.297,0.999997,-68.9289,140.352,0.999997,-75.6466,147.07,0.999996,-82.7024,153.434,0.999996,-90.0794,159.427,0.999996,-97.7597,165.037,0.999995,-105.725,170.249,0.999995,-113.956,175.051,0.999995,-122.432,179.432,0.999994,-131.135,183.38,0.999994,-140.041,186.886,0.999994,-149.131,189.942,0.999993,-158.381,192.54,0.999993,-167.771,194.675,0.999992,-177.276,196.341,0.999992,-186.875,197.533,0.999991,-196.544,198.25,0.999991,-206.26,198.489,0.999991,-215.75,0.249963,4,17.4995,11.4568,4,17.2183,22.8865,4,16.3752,34.261,4,14.9723,45.553,4,13.013,56.7352,4,10.502,67.7808,4,7.44529,78.6631,4,3.8503,89.3558,4,-0.274315,99.8333,4,-4.91864,110.07,4,-10.0715,120.042,4,-15.7204,129.725,4,-21.8518,139.095,4,-28.451,148.13,4,-35.5019,156.808,4,-42.9877,165.109,4,-50.8903,173.011,4,-59.1907,180.497,4,-67.8688,187.548,4,-76.9039,194.147,4,-86.274,200.279,4,-95.9567,205.928,4,-105.928,211.081,3.99999,-116.166,215.725,3.99999,-126.643,219.85,3.99999,-137.336,223.445,3.99999,-148.218,226.502,3.99999,-159.264,229.013,3.99999,-170.446,230.972,3.99999,-181.738,232.375,3.99999,-193.113,0.24996,4,19,11.5305,4,18.717,23.0336,4,17.8685,34.4812,4,16.4565,45.8457,4,14.4846,57.0998,4,11.9575,68.2164,4,8.88113,79.1686,4,5.26305,89.93,4,1.11192,100.475,4,-3.56224,110.778,4,-8.74818,120.814,4,-14.4334,130.558,4,-20.6042,139.989,4,-27.2458,149.082,4,-34.3421,157.816,4,-41.876,166.17,4,-49.8293,174.123,4,-58.183,181.657,4,-66.917,188.753,4,-76.0101,195.395,4,-85.4404,201.566,4,-95.1853,207.251,4,-105.221,212.437,3.99999,-115.524,217.111,3.99999,-126.069,221.263,3.99999,-136.83,224.881,3.99999,-147.783,227.957,3.99999,-158.899,230.484,3.99999,-170.153,232.456,3.99999,-181.518,233.868,3.99999,-192.966,234.717,3.99999,-204.469,235,3.99999,-215.75,0.249979,4,9.49714,11.0642,4,9.22555,22.1021,4,8.41135,33.0868,4,7.05653,43.9918,4,5.16438,54.7908,4,2.7394,65.4578,4,-0.212545,75.9672,4,-3.68433,86.2935,4,-7.66759,96.4119,4,-12.1527,106.298,4,-17.129,115.928,4,-22.5843,125.279,4,-28.5056,134.328,4,-34.8786,143.053,4,-41.6879,151.434,4,-48.9171,159.45,4,-56.5489,167.082,4,-64.5648,174.311,4,-72.9455,181.121,4,-81.6709,187.494,4,-90.7199,193.415,4,-100.071,198.87,4,-109.701,203.847,3.99999,-119.587,208.332,3.99999,-129.705,212.315,3.99999,-140.032,215.787,3.99999,-150.541,218.739,3.99999,-161.208,221.164,3.99999,-172.007,223.056,3.99999,-182.912,224.411,3.99999,-193.897,225.226,3.99999,-204.935,225.497,3.99999,-215.75,0.250019,4,-9.50859,10.1317,4,-9.75728,20.2393,4,-10.5029,30.2982,4,-11.7435,40.284,4,-13.4762,50.1728,4,-15.6968,59.9408,4,-18.3999,69.5644,4,-21.5791,79.0203,4,-25.2266,88.286,4,-29.3337,97.3389,4,-33.8905,106.157,4,-38.8861,114.72,4,-44.3083,123.006,4,-50.1442,130.996,4,-56.3796,138.671,4,-62.9995,146.011,4,-69.988,153,4,-77.3283,159.62,4,-85.0027,165.855,4,-92.9927,171.691,4,-101.279,177.113,4,-109.842,182.109,3.99999,-118.66,186.666,3.99999,-127.713,190.773,3.99999,-136.979,194.421,3.99999,-146.435,197.6,3.99999,-156.058,200.303,3.99999,-165.826,202.524,3.99999,-175.715,204.256,3.99999,-185.701,205.497,3.99999,-195.76,206.243,3.99999,-205.868,206.491,3.99999,-215.75,0.250036,4,-17.511,9.73901,4,-17.7501,19.4549,4,-18.4667,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,66.8685,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5678,93.5666,4,-40.9481,102.043,4,-45.75,110.274,4,-50.9621,118.239,4,-56.5718,125.92,4,-62.5655,133.297,4,-68.9289,140.352,4,-75.6466,147.07,4,-82.7024,153.434,4,-90.0794,159.427,4,-97.7597,165.037,4,-105.725,170.249,3.99999,-113.956,175.051,3.99999,-122.432,179.432,3.99999,-131.135,183.38,3.99999,-140.041,186.886,3.99999,-149.131,189.942,3.99999,-158.381,192.54,3.99999,-167.771,194.675,3.99999,-177.276,196.341,3.99999,-186.875,197.533,3.99999,-196.544,198.25,3.99999,-206.26,198.489,3.99999,-215.75,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9242,92.8593,4,-42.2713,101.272,4,-47.037,109.44,4,-52.2097,117.345,4,-57.777,124.968,4,-63.7254,132.289,4,-70.0407,139.291,4,-76.7076,145.958,4,-83.7101,152.274,4,-91.0313,158.222,4,-98.6535,163.79,4,-106.559,168.962,3.99999,-114.727,173.728,3.99999,-123.14,178.075,3.99999,-131.776,181.994,3.99999,-140.615,185.473,3.99999,-149.636,188.506,3.99999,-158.817,191.085,3.99999,-168.135,193.203,3.99999,-177.569,194.856,3.99999,-187.095,196.04,3.99999,-196.691,196.751,3.99999,-206.334,196.989,3.99999,-215.75,8.99996,1,17.4995,8.99996,1,19,8.99998,1,9.49714,9.00002,1,-9.50859,9.00004,0.999999,-17.511,9.00004,0.999999,-19.0114,8.99996,4,17.4995,8.99996,4,19,8.99998,4,9.49714,9.00002,4,-9.50859,9.00004,4,-17.511,9.00004,4,-19.0114,9.25001,4,-8,9.24999,4,8,0.249993,4,6.5,0.25001,4,-6.5,223.5,3.99999,-224.75,208,3.99999,-224.75,222,3.99999,-215.75,209.5,3.99999,-215.75,192.513,-37.5119,-212.989,0.24996,8.30516e-7,19,11.5305,8.18144e-7,18.717,23.0336,7.81055e-7,17.8685,34.4812,7.19338e-7,16.4565,45.8457,6.33144e-7,14.4846,57.0998,5.22678e-7,11.9575,68.2164,3.88207e-7,8.88113,79.1686,2.30055e-7,5.26305,89.93,4.86037e-8,1.11192,100.475,-1.5571e-7,-3.56224,110.778,-3.82395e-7,-8.74818,120.814,-6.30905e-7,-14.4334,130.558,-9.0064e-7,-20.6042,139.989,-0.00000119095,-27.2458,149.082,-0.00000150114,-34.3421,157.816,-0.00000183046,-41.876,166.17,-0.00000217811,-49.8293,174.123,-0.00000254326,-58.183,181.657,-0.00000292503,-66.917,188.753,-0.00000332251,-76.0101,195.395,-0.00000373472,-85.4404,201.566,-0.00000416068,-95.1853,207.251,-0.00000459936,-105.221,212.437,-0.00000504971,-115.524,217.111,-0.00000551064,-126.069,221.263,-0.00000598104,-136.83,224.881,-0.00000645978,-147.783,227.957,-0.0000069457,-158.899,230.484,-0.00000743764,-170.153,232.456,-0.0000079344,-181.518,233.868,-0.00000843479,-192.966,234.717,-0.00000893761,-204.469,235,-0.00000943073,-215.75,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9242,92.8593,-0.00000184774,-42.2713,101.272,-0.00000205605,-47.037,109.44,-0.00000228216,-52.2097,117.345,-0.00000252551,-57.777,124.968,-0.00000278553,-63.7254,132.289,-0.00000306157,-70.0407,139.291,-0.00000335299,-76.7076,145.958,-0.00000365908,-83.7101,152.274,-0.0000039791,-91.0313,158.222,-0.00000431228,-98.6535,163.79,-0.00000465782,-106.559,168.962,-0.00000501488,-114.727,173.728,-0.00000538261,-123.14,178.075,-0.00000576012,-131.776,181.994,-0.00000614649,-140.615,185.473,-0.0000065408,-149.636,188.506,-0.0000069421,-158.817,191.085,-0.00000734943,-168.135,193.203,-0.00000776179,-177.569,194.856,-0.0000081782,-187.095,196.04,-0.00000859766,-196.691,196.751,-0.00000901914,-206.334,196.989,-0.00000943073,-215.75,233.218,-4.00001,-204.542,233.5,-4.00001,-215.75,233.218,-1.00001,-204.542,0.24996,-0.999999,19,11.5305,-0.999999,18.717,23.0336,-0.999999,17.8685,34.4812,-0.999999,16.4565,45.8457,-0.999999,14.4846,57.0998,-0.999999,11.9575,68.2164,-1,8.88113,79.1686,-1,5.26305,89.93,-1,1.11192,100.475,-1,-3.56224,110.778,-1,-8.74818,120.814,-1,-14.4334,130.558,-1,-20.6042,139.989,-1,-27.2458,149.082,-1,-34.3421,157.816,-1,-41.876,166.17,-1,-49.8293,174.123,-1,-58.183,181.657,-1,-66.917,188.753,-1,-76.0101,195.395,-1,-85.4404,201.566,-1,-95.1853,207.251,-1,-105.221,212.437,-1.00001,-115.524,217.111,-1.00001,-126.069,221.263,-1.00001,-136.83,224.881,-1.00001,-147.783,227.957,-1.00001,-158.899,230.484,-1.00001,-170.153,232.456,-1.00001,-181.518,233.868,-1.00001,-192.966,234.717,-1.00001,-204.469,235,-1.00001,-215.75,0.250039,-1,-19.0114,9.66539,-1,-19.2487,19.3078,-1,-19.96,28.9038,-1,-21.1435,38.4301,-1,-22.7964,47.8638,-1,-24.9148,57.1823,-1,-27.4936,66.363,-1,-30.5264,75.3838,-1,-34.0061,84.223,-1,-37.9242,92.8593,-1,-42.2713,101.272,-1,-47.037,109.44,-1,-52.2097,117.345,-1,-57.777,124.968,-1,-63.7254,132.289,-1,-70.0407,139.291,-1,-76.7076,145.958,-1,-83.7101,152.274,-1,-91.0313,158.222,-1,-98.6535,163.79,-1,-106.559,168.962,-1.00001,-114.727,173.728,-1.00001,-123.14,178.075,-1.00001,-131.776,181.994,-1.00001,-140.615,185.473,-1.00001,-149.636,188.506,-1.00001,-158.817,191.085,-1.00001,-168.135,193.203,-1.00001,-177.569,194.856,-1.00001,-187.095,196.04,-1.00001,-196.691,196.751,-1.00001,-206.334,196.989,-1.00001,-215.75,0.249963,-0.999999,17.4995,11.4568,-0.999999,17.2183,22.8865,-0.999999,16.3752,34.261,-0.999999,14.9723,45.553,-0.999999,13.013,56.7352,-1,10.502,67.7808,-1,7.44529,78.6631,-1,3.8503,89.3558,-1,-0.274315,99.8333,-1,-4.91864,110.07,-1,-10.0715,120.042,-1,-15.7204,129.725,-1,-21.8518,139.095,-1,-28.451,148.13,-1,-35.5019,156.808,-1,-42.9877,165.109,-1,-50.8903,173.011,-1,-59.1907,180.497,-1,-67.8688,187.548,-1,-76.9039,194.147,-1,-86.274,200.279,-1,-95.9567,205.928,-1,-105.928,211.081,-1.00001,-116.166,215.725,-1.00001,-126.643,219.85,-1.00001,-137.336,223.445,-1.00001,-148.218,226.502,-1.00001,-159.264,229.013,-1.00001,-170.446,230.972,-1.00001,-181.738,232.375,-1.00001,-193.113,233.5,-1.00001,-215.75,0.249979,-1,9.49714,11.0642,-1,9.22555,22.1021,-1,8.41135,33.0868,-1,7.05653,43.9918,-1,5.16438,54.7908,-1,2.7394,65.4578,-1,-0.212544,75.9672,-1,-3.68433,86.2935,-1,-7.66759,96.4119,-1,-12.1527,106.298,-1,-17.129,115.928,-1,-22.5843,125.279,-1,-28.5056,134.328,-1,-34.8786,143.053,-1,-41.6879,151.434,-1,-48.9171,159.45,-1,-56.5489,167.082,-1,-64.5648,174.311,-1,-72.9455,181.121,-1,-81.6709,187.494,-1,-90.7199,193.415,-1,-100.071,198.87,-1,-109.701,203.847,-1.00001,-119.587,208.332,-1.00001,-129.705,212.315,-1.00001,-140.032,215.787,-1.00001,-150.541,218.739,-1.00001,-161.208,221.164,-1.00001,-172.007,223.056,-1.00001,-182.912,224.411,-1.00001,-193.897,225.226,-1.00001,-204.935,225.497,-1.00001,-215.75,0.250019,-1,-9.50859,10.1317,-1,-9.75728,20.2393,-1,-10.5029,30.2982,-1,-11.7435,40.284,-1,-13.4762,50.1728,-1,-15.6968,59.9408,-1,-18.3999,69.5644,-1,-21.5791,79.0203,-1,-25.2266,88.286,-1,-29.3337,97.3389,-1,-33.8905,106.157,-1,-38.8861,114.72,-1,-44.3083,123.006,-1,-50.1442,130.996,-1,-56.3796,138.671,-1,-62.9995,146.011,-1,-69.988,153,-1,-77.3283,159.62,-1,-85.0027,165.855,-1,-92.9927,171.691,-1,-101.279,177.113,-1,-109.842,182.109,-1.00001,-118.66,186.666,-1.00001,-127.713,190.773,-1.00001,-136.979,194.421,-1.00001,-146.435,197.6,-1.00001,-156.058,200.303,-1.00001,-165.826,202.524,-1.00001,-175.715,204.256,-1.00001,-185.701,205.497,-1.00001,-195.76,206.243,-1.00001,-205.868,206.491,-1.00001,-215.75,0.250036,-1,-17.511,9.73901,-1,-17.7501,19.4549,-1,-18.4667,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,66.8685,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5678,93.5666,-1,-40.9481,102.043,-1,-45.75,110.274,-1,-50.9621,118.239,-1,-56.5718,125.92,-1,-62.5655,133.297,-1,-68.9289,140.352,-1,-75.6466,147.07,-1,-82.7024,153.434,-1,-90.0794,159.427,-1,-97.7597,165.037,-1,-105.725,170.249,-1.00001,-113.956,175.051,-1.00001,-122.432,179.432,-1.00001,-131.135,183.38,-1.00001,-140.041,186.886,-1.00001,-149.131,189.942,-1.00001,-158.381,192.54,-1.00001,-167.771,194.675,-1.00001,-177.276,196.341,-1.00001,-186.875,197.533,-1.00001,-196.544,198.25,-1.00001,-206.26,198.489,-1.00001,-215.75,0.249963,-4,17.4995,11.4568,-4,17.2183,22.8865,-4,16.3752,34.261,-4,14.9723,45.553,-4,13.013,56.7352,-4,10.502,67.7808,-4,7.44529,78.6631,-4,3.8503,89.3558,-4,-0.274315,99.8333,-4,-4.91864,110.07,-4,-10.0715,120.042,-4,-15.7204,129.725,-4,-21.8518,139.095,-4,-28.451,148.13,-4,-35.5019,156.808,-4,-42.9877,165.109,-4,-50.8903,173.011,-4,-59.1907,180.497,-4,-67.8688,187.548,-4,-76.9039,194.147,-4,-86.274,200.279,-4,-95.9567,205.928,-4,-105.928,211.081,-4.00001,-116.166,215.725,-4.00001,-126.643,219.85,-4.00001,-137.336,223.445,-4.00001,-148.218,226.502,-4.00001,-159.264,229.013,-4.00001,-170.446,230.972,-4.00001,-181.738,232.375,-4.00001,-193.113,0.24996,-4,19,11.5305,-4,18.717,23.0336,-4,17.8685,34.4812,-4,16.4565,45.8457,-4,14.4846,57.0998,-4,11.9575,68.2164,-4,8.88113,79.1686,-4,5.26305,89.93,-4,1.11192,100.475,-4,-3.56224,110.778,-4,-8.74818,120.814,-4,-14.4334,130.558,-4,-20.6042,139.989,-4,-27.2458,149.082,-4,-34.3421,157.816,-4,-41.876,166.17,-4,-49.8293,174.123,-4,-58.183,181.657,-4,-66.917,188.753,-4,-76.0101,195.395,-4,-85.4404,201.566,-4,-95.1853,207.251,-4,-105.221,212.437,-4.00001,-115.524,217.111,-4.00001,-126.069,221.263,-4.00001,-136.83,224.881,-4.00001,-147.783,227.957,-4.00001,-158.899,230.484,-4.00001,-170.153,232.456,-4.00001,-181.518,233.868,-4.00001,-192.966,234.717,-4.00001,-204.469,235,-4.00001,-215.75,0.249979,-4,9.49714,11.0642,-4,9.22555,22.1021,-4,8.41135,33.0868,-4,7.05653,43.9918,-4,5.16438,54.7908,-4,2.7394,65.4578,-4,-0.212544,75.9672,-4,-3.68433,86.2935,-4,-7.66759,96.4119,-4,-12.1527,106.298,-4,-17.129,115.928,-4,-22.5843,125.279,-4,-28.5056,134.328,-4,-34.8786,143.053,-4,-41.6879,151.434,-4,-48.9171,159.45,-4,-56.5489,167.082,-4,-64.5648,174.311,-4,-72.9455,181.121,-4,-81.6709,187.494,-4,-90.7199,193.415,-4,-100.071,198.87,-4,-109.701,203.847,-4.00001,-119.587,208.332,-4.00001,-129.705,212.315,-4.00001,-140.032,215.787,-4.00001,-150.541,218.739,-4.00001,-161.208,221.164,-4.00001,-172.007,223.056,-4.00001,-182.912,224.411,-4.00001,-193.897,225.226,-4.00001,-204.935,225.497,-4.00001,-215.75,0.250019,-4,-9.50859,10.1317,-4,-9.75728,20.2393,-4,-10.5029,30.2982,-4,-11.7435,40.284,-4,-13.4762,50.1728,-4,-15.6968,59.9408,-4,-18.3999,69.5644,-4,-21.5791,79.0203,-4,-25.2266,88.286,-4,-29.3337,97.3389,-4,-33.8905,106.157,-4,-38.8861,114.72,-4,-44.3083,123.006,-4,-50.1442,130.996,-4,-56.3796,138.671,-4,-62.9995,146.011,-4,-69.988,153,-4,-77.3283,159.62,-4,-85.0027,165.855,-4,-92.9927,171.691,-4,-101.279,177.113,-4,-109.842,182.109,-4.00001,-118.66,186.666,-4.00001,-127.713,190.773,-4.00001,-136.979,194.421,-4.00001,-146.435,197.6,-4.00001,-156.058,200.303,-4.00001,-165.826,202.524,-4.00001,-175.715,204.256,-4.00001,-185.701,205.497,-4.00001,-195.76,206.243,-4.00001,-205.868,206.491,-4.00001,-215.75,0.250036,-4,-17.511,9.73901,-4,-17.7501,19.4549,-4,-18.4667,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,66.8685,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5678,93.5666,-4,-40.9481,102.043,-4,-45.75,110.274,-4,-50.9621,118.239,-4,-56.5718,125.92,-4,-62.5655,133.297,-4,-68.9289,140.352,-4,-75.6466,147.07,-4,-82.7024,153.434,-4,-90.0794,159.427,-4,-97.7597,165.037,-4,-105.725,170.249,-4,-113.956,175.051,-4.00001,-122.432,179.432,-4.00001,-131.135,183.38,-4.00001,-140.041,186.886,-4.00001,-149.131,189.942,-4.00001,-158.381,192.54,-4.00001,-167.771,194.675,-4.00001,-177.276,196.341,-4.00001,-186.875,197.533,-4.00001,-196.544,198.25,-4.00001,-206.26,198.489,-4.00001,-215.75,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9242,92.8593,-4,-42.2713,101.272,-4,-47.037,109.44,-4,-52.2097,117.345,-4,-57.777,124.968,-4,-63.7254,132.289,-4,-70.0407,139.291,-4,-76.7076,145.958,-4,-83.7101,152.274,-4,-91.0313,158.222,-4,-98.6535,163.79,-4,-106.559,168.962,-4.00001,-114.727,173.728,-4.00001,-123.14,178.075,-4.00001,-131.776,181.994,-4.00001,-140.615,185.473,-4.00001,-149.636,188.506,-4.00001,-158.817,191.085,-4.00001,-168.135,193.203,-4.00001,-177.569,194.856,-4.00001,-187.095,196.04,-4.00001,-196.691,196.751,-4.00001,-206.334,196.989,-4.00001,-215.75,8.99996,8.30516e-7,19,9.00004,-8.31017e-7,-19.0114,8.99996,-0.999999,17.4995,8.99996,-0.999999,19,8.99998,-1,9.49714,9.00002,-1,-9.50859,9.00004,-1,-17.511,9.00004,-1,-19.0114,8.99996,-4,17.4995,8.99996,-4,19,8.99998,-4,9.49714,9.00002,-4,-9.50859,9.00004,-4,-17.511,9.00004,-4,-19.0114,9.25001,-4,-8,9.24999,-4,8,0.249993,-4,6.5,0.25001,-4,-6.5,9.25001,-3.49691e-7,-8,9.24999,3.49691e-7,8,0.249993,2.84124e-7,6.5,0.25001,-2.84124e-7,-6.5,223.5,-4.00001,-224.75,208,-4.00001,-224.75,222,-4.00001,-215.75,209.5,-4.00001,-215.75,223.5,-0.00000982413,-224.75,208,-0.00000982413,-224.75,222,-0.00000943073,-215.75,209.5,-0.00000943073,-215.75,192.513,37.5119,-212.989],"metadata":{"uvs":0,"generator":"io_three","normals":618,"vertices":910,"version":3,"faces":942,"type":"Geometry"}},"straight_1":{"uvs":[],"metadata":{"generator":"io_three","normals":57,"uvs":0,"vertices":74,"version":3,"faces":108,"type":"Geometry"},"normals":[-4.87984e-15,-1,4.47035e-8,-1.59314e-7,0,1,-1.0621e-7,-0.00000349681,1,0,-1,0,1.59314e-7,0,-1,0.164399,0,-0.986394,0,-1,2.98023e-8,-5.29819e-9,-1,3.17891e-8,-1.0551e-14,-1,6.81196e-8,-1.32456e-8,-1,7.94738e-8,3.90529e-10,-1,4.03222e-8,1.63444e-9,-1,1.68756e-7,-0.164399,0,0.986394,1,0,0,1,0,0,-1,-1.19209e-7,-5.96046e-8,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,4.87984e-15,-1,4.47035e-8,-1.59314e-7,0,-1,-1.0621e-7,-0.00000349681,-1,1.59314e-7,0,1,0.164399,0,0.986394,0,-1,5.96046e-8,0,-1,0,1.05964e-8,-1,6.35782e-8,2.84681e-9,-1,-1.70813e-8,-1.32296e-9,-1,8.14572e-8,-0.164399,0,-0.986394,1,0,0,-1,-1.19209e-7,5.96046e-8,-1,0,0,4.87984e-15,1,-4.47035e-8,-1.0621e-7,0.00000349681,1,0,1,0,0,1,-5.96046e-8,0,1,0,1.05964e-8,1,-6.35782e-8,2.84681e-9,1,1.70813e-8,-1.32296e-9,1,-8.14572e-8,-1,1.19209e-7,-5.96046e-8,1,0,0,-4.87984e-15,1,-4.47035e-8,-1.0621e-7,0.00000349681,-1,0,1,0,0,1,-2.98023e-8,-5.29819e-9,1,-3.17891e-8,-1.0551e-14,1,-6.81196e-8,-1.32456e-8,1,-7.94738e-8,3.90529e-10,1,-4.03222e-8,1.63444e-9,1,-1.68756e-7,-1,1.19209e-7,5.96046e-8,1,0,0,-1,0,0],"vertices":[215.75,-4,19,215.75,-4,17.5,215.75,-4,9.50001,9.25002,-4,8.00001,215.75,-4,6.00001,215.75,-0.999999,17.5,215.75,-1,9.50001,0.25,-4,19,0.25,-4,17.5,0.25,-4,9.49997,0.25,-4,6.50001,0.25,-1,9.49999,0.25,-0.999999,17.5,224.75,-4,7.50001,215.75,-4,-19,9.25002,-4,1.15241e-7,215.75,-4,-17.5,215.75,-4,-9.50001,9.25002,-4,-8.00001,215.75,-4,-6.00001,215.75,-1,-17.5,215.75,-1,-9.50001,0.25,-4,-19,0.25,-4,-17.5,0.25,-4,-9.49997,0.25,-4,-6.50001,0.25,-1,-9.49999,0.25,-1,-17.5,224.75,-4,-7.50001,224.75,-4,1.15241e-7,215.75,4,19,215.75,4,17.5,215.75,4,9.50001,9.25002,4,8.00001,215.75,4,6.00001,215.75,1,17.5,215.75,1,9.50001,0.25,4,19,0.25,4,17.5,0.25,4,9.49997,0.25,4,6.50001,0.25,1,9.49999,0.25,1,17.5,224.75,4,7.50001,215.75,8.30517e-7,19,9.25002,3.49691e-7,8.00001,0.25,2.84124e-7,6.50001,0.25,8.30515e-7,19,215.75,2.62269e-7,6.00001,224.75,3.27836e-7,7.50001,215.75,4,-19,9.25002,4,-2.3445e-7,215.75,4,-17.5,215.75,4,-9.50001,9.25002,4,-8.00001,215.75,4,-6.00001,215.75,0.999999,-17.5,215.75,1,-9.50001,0.25,4,-19,0.25,4,-17.5,0.25,4,-9.49997,0.25,4,-6.50001,0.25,1,-9.49999,0.25,0.999999,-17.5,224.75,4,-7.50001,224.75,4,-2.3445e-7,215.75,-8.30517e-7,-19,9.25002,-2.6054e-15,-5.96046e-8,9.25002,-3.49691e-7,-8.00001,0.25,-2.84124e-7,-6.50001,0.25,-8.30515e-7,-19,215.75,-2.62269e-7,-6.00001,224.75,-2.6054e-15,-5.96046e-8,224.75,-3.27836e-7,-7.50001],"faces":[33,5,12,11,6,0,0,0,0,33,7,0,44,47,1,1,1,1,33,6,11,9,2,2,2,2,2,33,0,7,8,1,3,3,3,3,33,1,8,12,5,4,4,4,4,33,45,3,10,46,5,5,5,5,32,3,15,29,6,6,6,32,29,13,4,7,7,7,32,4,2,9,8,8,8,32,9,10,3,9,9,9,32,3,29,4,10,10,10,32,4,9,3,11,11,11,33,48,4,13,49,12,12,12,12,32,44,0,1,13,13,13,32,44,1,5,14,14,14,32,2,4,48,14,14,14,32,44,5,6,13,13,13,32,6,2,48,14,14,14,32,6,48,44,13,13,13,33,3,45,67,15,15,15,15,15,33,29,72,49,13,16,16,16,16,32,12,8,7,17,17,17,32,46,10,9,18,18,18,32,46,9,11,19,19,19,32,12,7,47,20,20,20,32,46,11,12,19,19,19,32,47,46,12,17,17,17,33,20,21,26,27,21,21,21,21,33,66,14,22,70,22,22,22,22,33,21,17,24,26,23,23,23,23,33,14,16,23,22,3,3,3,3,33,16,20,27,23,24,24,24,24,33,68,69,25,18,25,25,25,25,32,29,15,18,26,26,26,32,18,25,24,3,3,3,32,24,17,19,27,27,27,32,19,28,29,28,28,28,32,29,18,24,29,29,29,32,24,19,29,30,30,30,33,71,73,28,19,31,31,31,31,32,16,14,66,14,14,14,32,71,19,17,13,13,13,32,71,17,21,14,14,14,32,20,16,66,14,14,14,32,71,21,20,13,13,13,32,66,71,20,32,32,32,33,18,15,67,68,33,33,33,33,33,29,28,73,72,16,16,16,16,32,22,23,27,20,20,20,32,26,24,25,17,17,17,32,70,22,27,19,19,19,32,26,25,69,20,20,20,32,70,27,26,19,19,19,32,26,69,70,34,34,34,33,35,36,41,42,35,35,35,35,33,44,30,37,47,1,1,1,1,33,36,32,39,41,36,36,36,36,33,30,31,38,37,37,37,37,37,33,31,35,42,38,4,4,4,4,33,45,46,40,33,5,5,5,5,32,65,51,33,38,38,38,32,33,40,39,37,37,37,32,39,32,34,39,39,39,32,34,43,65,40,40,40,32,65,33,39,41,41,41,32,39,34,65,42,42,42,33,48,49,43,34,12,12,12,12,32,31,30,44,32,32,32,32,48,34,32,13,13,13,32,48,32,36,32,32,32,32,35,31,44,13,13,13,32,48,36,35,13,13,13,32,44,48,35,14,14,14,33,33,51,67,45,43,43,43,43,33,65,43,49,72,44,44,44,44,32,37,38,42,17,17,17,32,41,39,40,17,17,17,32,47,37,42,17,17,17,32,41,40,46,17,17,17,32,47,42,41,17,17,17,32,41,46,47,19,19,19,33,56,63,62,57,45,45,45,45,33,66,70,58,50,22,22,22,22,33,57,62,60,53,46,46,46,46,33,50,58,59,52,47,47,47,47,33,52,59,63,56,24,24,24,24,33,68,54,61,69,25,25,25,25,32,54,51,65,48,48,48,32,65,64,55,49,49,49,32,55,53,60,50,50,50,32,60,61,54,51,51,51,32,54,65,55,52,52,52,32,55,60,54,53,53,53,33,71,55,64,73,31,31,31,31,32,66,50,52,13,13,13,32,66,52,56,32,32,32,32,53,55,71,32,32,32,32,66,56,57,13,13,13,32,57,53,71,13,13,13,32,57,71,66,32,32,32,33,54,68,67,51,54,54,54,54,33,65,72,73,64,55,55,55,55,32,63,59,58,17,17,17,32,69,61,60,56,56,56,32,69,60,62,17,17,17,32,63,58,70,17,17,17,32,69,62,63,17,17,17,32,70,69,63,34,34,34]},"turnout_R_ab":{"uvs":[],"vertices":[125.221,0.999999,-19,122.852,1,-17.5,122.852,4,-17.5,125.221,4,-19,125.656,4,-17.5,128.025,4,-19,109.601,0.999999,-19,106.953,1,-17.5,125.656,1,-17.5,109.601,4,-19,106.953,4,-17.5,120.814,0.999999,-14.4335,112.105,1,-9.5,112.105,4,-9.5,110.778,4,-8.74826,100.475,4,-3.56229,89.9301,4,1.11191,108.935,4,-9.5,99.8334,4,-4.91867,61.7573,4,-19,59.9408,4,-18.3999,79.1685,4,5.26306,89.3559,4,-0.274323,108.935,1,-9.5,99.8334,1,-4.91867,61.7573,0.999999,-19,59.9408,0.999999,-18.3999,56.6889,4,-17.5,65.98,1,9.5,57.0998,1,11.9575,68.2164,4,8.88113,78.663,4,3.85031,89.3559,1,-0.274323,56.6889,1,-17.5,45.8457,1,14.4846,65.9801,4,9.49999,67.7808,4,7.44529,78.663,1,3.85031,90.4274,1,-9.5,86.2935,1,-7.66759,34.4812,1,16.4565,60.356,4,9.49999,67.7808,1,7.44529,75.9671,1,-3.68433,90.4274,4,-9.49999,86.2935,4,-7.66759,26.0211,1,17.5,60.356,1,9.5,65.4578,1,-0.212544,75.9671,4,-3.68433,26.0211,4,17.5,23.0336,4,17.8685,54.7908,1,2.7394,65.4578,4,-0.212545,23.7784,0.999999,-19,19.4549,0.999999,-18.4667,11.5305,4,18.717,54.7908,4,2.7394,43.9918,1,5.16438,23.7784,4,-19,19.4549,4,-18.4667,9.73901,0.999999,-17.7501,9.00015,4,19,43.9918,4,5.16438,33.0868,1,7.05653,9.73901,4,-17.7501,9.00004,0.999999,-17.511,33.0868,4,7.05653,22.1021,1,8.41135,9.00004,4,-17.511,0.250036,0.999999,-17.511,0.249963,4,17.5,0.24996,4,19,22.1021,4,8.41135,11.0642,1,9.22555,0.250036,4,-17.511,0.250039,4,-19,0.25001,4,-6,0.250019,4,-9.49998,0.250017,1,-9.5,0.249964,0.999999,17.5,0.249963,1,17.4995,0.249979,1,9.49714,0.249979,4,9.49714,0.249993,4,6,11.0642,4,9.22555,8.99998,1,9.49714,-8.74999,4,-7.5,8.99998,4,9.49714,-8.75001,4,7.5,125.221,-1,-19,122.852,-1,-17.5,122.852,-4,-17.5,125.221,-4,-19,125.656,-4,-17.5,128.025,-4,-19,109.601,-1,-19,106.953,-1,-17.5,125.656,-1,-17.5,109.601,-4,-19,106.953,-4,-17.5,120.814,-1,-14.4335,120.814,-6.30909e-7,-14.4335,128.025,-8.30516e-7,-19,110.778,-3.82399e-7,-8.74826,112.105,-1,-9.5,100.475,-1.55712e-7,-3.56229,112.105,-4,-9.5,110.778,-4,-8.74826,89.9301,4.8603e-8,1.11191,100.475,-4,-3.56229,79.1685,2.30056e-7,5.26306,89.9301,-4,1.11191,108.935,-4,-9.5,99.8334,-4,-4.91867,61.7573,-4,-19,59.9408,-4,-18.3999,68.2164,3.88207e-7,8.88113,79.1685,-4,5.26306,89.3559,-4,-0.274322,108.935,-1,-9.5,99.8334,-1,-4.91867,61.7573,-1,-19,59.9408,-1,-18.3999,56.6889,-4,-17.5,57.0998,5.22678e-7,11.9575,65.98,-0.999999,9.5,57.0998,-0.999999,11.9575,68.2164,-4,8.88113,78.663,-4,3.85031,89.3559,-1,-0.274322,56.6889,-1,-17.5,45.8457,6.33144e-7,14.4846,45.8457,-0.999999,14.4846,65.9801,-4,9.49999,67.7808,-4,7.44529,78.663,-1,3.85031,90.4274,-1,-9.5,86.2935,-1,-7.66759,34.4812,7.19338e-7,16.4565,34.4812,-0.999999,16.4565,60.356,-4,9.49999,67.7808,-1,7.44529,75.9671,-1,-3.68433,90.4274,-4,-9.49999,86.2935,-4,-7.66759,23.0336,7.81055e-7,17.8685,26.0211,-0.999998,17.5,60.356,-0.999999,9.5,65.4578,-1,-0.212544,75.9671,-4,-3.68433,11.5305,8.18144e-7,18.717,26.0211,-4,17.5,23.0336,-4,17.8685,54.7908,-1,2.7394,65.4578,-4,-0.212544,23.7784,-1,-19,19.4549,-1,-18.4667,9.00015,8.30515e-7,19,11.5305,-4,18.717,54.7908,-4,2.7394,43.9918,-1,5.16438,23.7784,-4,-19,19.4549,-4,-18.4667,9.73901,-1,-17.7501,9.00015,-4,19,43.9918,-4,5.16438,33.0868,-1,7.05653,9.73901,-4,-17.7501,9.00004,-1,-17.511,33.0868,-4,7.05653,22.1021,-1,8.41135,9.00004,-4,-17.511,0.250036,-1,-17.511,0.249963,-4,17.5,0.24996,-4,19,22.1021,-4,8.41135,11.0642,-1,9.22555,0.250036,-4,-17.511,0.250039,-4,-19,0.250039,-8.30515e-7,-19,0.25001,-2.62268e-7,-6,0.25001,-4,-6,0.250019,-4,-9.49998,0.250017,-1,-9.5,0.249964,-0.999998,17.5,0.249963,-0.999999,17.4995,0.249979,-1,9.49714,0.249979,-4,9.49714,0.249993,-4,6,0.249993,2.62268e-7,6,0.24996,8.30515e-7,19,11.0642,-4,9.22555,8.99998,-1,9.49714,-8.74999,-4,-7.5,-8.74999,-3.27835e-7,-7.5,8.99998,-4,9.49714,-8.75001,-4,7.5,-8.75001,3.27835e-7,7.5],"normals":[-0.534995,0,-0.844855,0.111157,0,0.993803,0,1,0,0.492896,8.4744e-7,0.870088,0.492896,0,0.870088,0.492895,0,0.870089,0.492896,-0.00000190559,0.870088,0.492898,0,0.870087,0.359893,0,0.932994,0.313679,0,0.949529,0,1,0,0,1,0,-0.449609,-3.11977e-7,-0.893226,-0.313679,0,-0.949529,-0.405239,0,-0.914211,-0.266711,0,-0.963777,0.2191,0,0.975702,-0.359892,0,-0.932994,0.449609,0,0.893225,0.170958,0,0.985278,0,1,0,-2.24718e-7,1,-8.1203e-7,-1.51608e-7,1,-3.93033e-7,2.07635e-7,1,3.66528e-7,0,1,-5.20414e-8,1.67115e-9,1,-4.75651e-8,-2.88375e-8,1,-9.66355e-8,5.03246e-8,1,4.4104e-8,3.91862e-8,1,-1.40205e-8,8.2554e-8,1,1.51878e-7,-0.313679,0,-0.949529,0.40524,3.86662e-7,0.91421,-0.266711,-4.12639e-8,-0.963777,0.35989,5.74434e-8,0.932995,0,1,-4.469e-8,-1.89797e-8,0.999995,0.00322308,-3.91239e-7,1,-0.00000231527,-2.03793e-7,1,-9.54707e-7,-4.5931e-7,1,-0.00000145668,2.23043e-14,1,-1.31534e-7,3.46846e-8,1,4.85011e-7,-4.07253e-9,1,-4.9143e-8,-6.89949e-9,1,-5.59403e-8,-7.53277e-9,1,-1.53462e-7,-9.34533e-8,1,-2.71173e-7,4.80487e-7,1,0.00000103263,0,1,-1.5706e-7,0,1,2.91563e-7,-8.73373e-14,1,-7.15254e-7,-8.58041e-14,1,-7.15254e-7,2.574e-7,1,4.62695e-7,8.07787e-9,1,3.00647e-8,1.43312e-8,1,1.08173e-8,1.38127e-8,1,1.66043e-8,6.71869e-9,1,2.65896e-8,0.0000017505,1,0.00000519956,7.94676e-9,1,2.45649e-8,0,1,-1.71128e-7,5.28776e-9,1,-1.65352e-7,-9.119e-10,1,-7.23403e-8,-2.10661e-8,1,-7.86435e-7,-2.12719e-8,1,1.04611e-7,1.43295e-8,1,1.46537e-8,1.50635e-8,1,1.40495e-8,2.14784e-15,1,1.49012e-8,1.36506e-7,1,5.68177e-7,-2.73892e-9,1,4.69816e-9,-9.37245e-8,1,-2.87867e-7,-2.22886e-7,1,-7.26195e-7,0.31368,5.74439e-8,0.949529,0.0735638,0,0.99729,0.266711,8.61655e-8,0.963776,0.122409,0,0.99248,0.2191,2.87219e-8,0.975702,7.94728e-9,1,-4.76837e-8,-9.93411e-9,1,-5.96047e-8,-7.20405e-15,1,-6.81199e-8,-3.86699e-7,1,-0.00000100249,-1.17089e-7,1,-4.2311e-7,1.92367e-7,1,8.56653e-7,3.30491e-10,1,-5.96046e-8,-4.78997e-9,1,-5.29058e-8,-2.1548e-8,1,-2.18783e-7,6.70923e-9,1,-2.24938e-8,9.02292e-9,1,-1.26879e-8,0,1,0,0.0735639,0,0.99729,0.170958,0,0.985278,0.307795,0,0.951453,0.122409,0,0.99248,0.405239,0,0.914211,0,0,1,-1,0,-0.00000224171,-1,0,-0.00000256301,-1,4.66912e-7,-0.0000020294,-1,0,-0.00000224171,-1,-6.0714e-7,-0.00000233627,-1,5.51298e-8,-0.00000227874,-1,0,-0.00000197688,-0.986871,-0.161512,-0.00000196273,-1,-7.45058e-8,-0.00000217556,-1,0,-0.00000404365,-1,2.36664e-7,-0.00000196812,-1,0,-0.00000404365,-1,-0.00000524216,-0.00000254466,0.073564,0,0.99729,0.164399,0,-0.986394,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,-1.11879e-7,0.99248,0.164399,0,0.986394,0.130446,0,0.991455,-1,0,-8.90096e-7,0,1,0,0.266712,0,0.963776,0.266711,0,0.963776,0.266711,-2.62115e-7,0.963777,0.266711,-2.06703e-7,0.963777,0.534996,0,0.844855,0.534997,0,0.844854,0.534996,-0.00000134076,0.844854,0.534997,0,0.844854,0,0.00000190735,-1,-7.93166e-8,0.00000333786,-1,1.51786e-7,0,1,-1.6957e-7,0.00000254313,1,1.48022e-7,0,-1,-0.534995,0,-0.844855,0,-1,0,0.492896,-8.4744e-7,0.870088,0.492896,0,0.870088,0.492896,0.00000165362,0.870088,0.492898,0,0.870087,0,-1,0,0,-1,0,-0.449609,3.11977e-7,-0.893226,-0.266711,0,-0.963777,0,-1,1.04083e-7,-4.1527e-7,-1,-7.33057e-7,-1.70711e-7,-1,-3.8512e-7,1.12359e-7,-1,4.06015e-7,-1.96762e-14,-1,1.16036e-7,5.3953e-8,-1,1.6332e-7,-4.18842e-8,-1,-7.4103e-8,-3.30261e-8,-1,1.56203e-8,-4.48977e-8,-1,-5.85904e-8,0,-1,0,4.92677e-8,-1,1.66611e-7,-0.313679,-5.54751e-8,-0.949529,0.40524,-3.86662e-7,0.91421,-0.266711,4.12639e-8,-0.963777,0.35989,0,0.932995,5.28777e-9,-1,-7.44035e-8,4.76479e-8,-1,6.45952e-7,0,-1,-1.48807e-8,-6.61553e-9,-1,5.23625e-8,0.00000158106,-1,0.00000478598,-6.7929e-14,-1,-5.56309e-7,-7.32463e-9,-1,-5.81058e-7,-6.67365e-14,-1,-5.56309e-7,-2.82085e-8,-1,2.23273e-7,0,-1,0,0,-1,3.49875e-7,0,-1,-4.83263e-8,2.92488e-7,-1,7.11181e-7,2.3451e-8,-1,1.04148e-7,2.4677e-14,-1,-1.45526e-7,-3.07164e-7,-1,-8.19867e-7,2.2847e-7,-1,5.01773e-7,-1.20875e-9,-1,8.7885e-8,-6.15996e-8,-1,-2.27146e-7,-4.0129e-7,-1,-0.00000228251,-1.90005e-8,-0.999994,0.00336321,0,-1,4.469e-8,-1.22906e-8,-1,-9.34148e-8,-9.29987e-10,-1,4.36732e-8,3.69955e-8,-1,5.99041e-7,3.91887e-7,-1,0.00000109295,1.50349e-14,-1,1.04308e-7,3.07136e-15,-1,1.04308e-7,1.80803e-9,-1,6.68838e-8,3.35707e-10,-1,4.67165e-8,5.40685e-9,-1,6.26621e-8,1.3409e-14,-1,2.60224e-7,-2.05218e-8,-1,6.65346e-9,-6.25059e-9,-1,2.13235e-8,-3.35578e-8,-1,-6.72447e-8,-4.59746e-8,-1,-1.25462e-7,-4.6328e-8,-1,-1.27026e-7,0.266711,8.61655e-8,0.963777,0.2191,5.74437e-8,0.975702,-7.94728e-9,-1,4.76837e-8,-3.55784e-7,-1,-8.02638e-7,-1.37709e-7,-1,-4.16853e-7,3.22962e-8,-1,4.37832e-7,9.93411e-9,-1,5.96047e-8,1.71216e-9,-1,6.81754e-8,-2.14441e-8,-1,-1.07808e-7,5.53928e-8,-1,2.19722e-7,2.31339e-9,-1,5.96046e-8,3.68108e-9,-1,6.15742e-8,4.22992e-9,-1,7.07548e-8,0.122409,0,0.99248,-1,-4.66914e-7,-0.00000256301,-1,0,-0.00000224171,-1,0,-0.0000021628,-1,-1.40796e-7,-0.00000233627,-1,4.05773e-7,-0.00000227874,-0.987922,0.154951,-0.00000197897,-1,7.45058e-8,-0.00000217556,-1,0.00000725842,-0.00000196812,-1,6.28157e-7,-0.00000254466,0.122409,0,0.99248,0.122409,0,0.99248,0.122409,8.26813e-8,0.99248,0.266711,0,0.963777,0.266711,2.62119e-7,0.963776,0.266711,2.07006e-7,0.963776,0.266711,0,0.963776,0.534997,0,0.844854,0.534996,0,0.844854,0.534996,0.0000019966,0.844855,0,-0.00000190735,-1,-7.93166e-8,-0.00000333786,-1,1.51786e-7,0,1,-1.6957e-7,-0.00000254313,1,1.48022e-7,0,-1],"metadata":{"generator":"io_three","normals":228,"uvs":0,"vertices":199,"version":3,"faces":288,"type":"Geometry"},"faces":[33,0,1,2,3,0,0,0,0,33,151,56,62,158,1,1,1,1,33,3,2,4,5,2,2,2,2,32,12,13,14,3,3,3,32,104,102,11,4,4,4,32,12,14,104,5,5,5,32,104,11,12,6,6,6,33,7,6,9,10,7,7,7,7,33,109,16,21,111,8,8,8,8,33,111,21,30,117,9,9,9,9,32,20,27,10,2,2,2,32,10,9,19,10,10,10,32,20,10,19,11,11,11,33,23,24,18,17,12,12,12,12,33,25,26,20,19,13,13,13,13,33,24,32,22,18,14,14,14,14,33,27,20,26,33,15,15,15,15,33,132,125,29,34,16,16,16,16,33,32,37,31,22,17,17,17,17,33,104,14,15,106,18,18,18,18,33,139,132,34,40,19,19,19,19,32,36,41,35,20,20,20,32,35,30,21,21,21,21,32,21,16,15,22,22,22,32,15,14,13,23,23,23,32,13,17,18,24,24,24,32,13,18,22,25,25,25,32,21,15,13,26,26,26,32,36,35,21,27,27,27,32,31,36,21,28,28,28,32,21,13,22,29,29,29,32,31,21,22,2,2,2,33,37,42,36,31,30,30,30,30,33,44,45,39,38,31,31,31,31,33,41,36,42,47,32,32,32,32,33,43,39,45,49,33,33,33,33,32,68,74,86,2,2,2,32,86,82,81,34,34,34,32,81,80,46,35,35,35,32,46,40,34,36,36,36,32,34,29,28,37,37,37,32,47,42,37,38,38,38,32,34,28,47,39,39,39,32,81,46,34,40,40,40,32,68,86,81,41,41,41,32,64,68,81,42,42,42,32,81,34,47,43,43,43,32,47,37,32,44,44,44,32,32,24,23,45,45,45,32,23,12,11,46,46,46,32,11,8,1,47,47,47,32,1,0,6,48,48,48,32,1,6,7,49,49,49,32,23,11,1,50,50,50,32,47,32,23,51,51,51,32,64,81,47,52,52,52,32,58,64,47,53,53,53,32,47,23,1,54,54,54,32,1,7,33,20,20,20,32,33,26,25,55,55,55,32,25,54,55,2,2,2,32,55,61,66,56,56,56,32,66,70,79,57,57,57,32,66,79,38,58,58,58,32,25,55,66,59,59,59,32,33,25,66,60,60,60,32,33,66,38,61,61,61,32,52,58,47,62,62,62,32,48,52,47,63,63,63,32,1,33,38,64,64,64,32,1,38,39,65,65,65,32,48,47,1,66,66,66,32,1,39,43,67,67,67,32,1,43,48,68,68,68,33,48,43,49,53,69,69,69,69,33,146,51,56,151,70,70,70,70,33,52,48,53,57,71,71,71,71,33,59,60,55,54,72,72,72,72,33,58,52,57,63,73,73,73,73,32,77,87,89,74,74,74,32,84,83,88,20,20,20,32,77,89,84,75,75,75,32,44,78,77,76,76,76,32,49,45,44,77,77,77,32,57,53,49,78,78,78,32,67,63,57,79,79,79,32,85,73,67,2,2,2,32,84,88,85,2,2,2,32,44,77,84,80,80,80,32,57,49,44,81,81,81,32,85,67,57,82,82,82,32,44,84,85,83,83,83,32,85,57,44,84,84,84,32,75,69,65,2,2,2,32,65,60,59,2,2,2,32,59,76,75,2,2,2,32,65,59,75,85,85,85,33,61,55,60,65,86,86,86,86,33,64,58,63,67,87,87,87,87,33,66,61,65,69,88,88,88,88,33,68,64,67,73,89,89,89,89,33,106,15,16,109,90,90,90,90,33,70,66,69,75,91,91,91,91,32,70,75,76,92,92,92,32,181,77,78,93,93,93,32,181,78,79,94,94,94,32,70,76,180,95,95,95,32,181,79,70,96,96,96,32,70,180,181,97,97,97,32,191,72,71,98,98,98,32,80,81,82,99,99,99,32,191,71,80,100,100,100,32,83,84,190,101,101,101,32,191,80,82,102,102,102,32,82,83,190,103,103,103,32,82,190,191,104,104,104,33,74,68,73,85,105,105,105,105,33,87,77,181,195,106,106,106,106,33,82,86,88,83,91,91,91,91,32,46,50,51,107,107,107,32,146,139,40,108,108,108,32,46,51,146,109,109,109,32,146,40,46,110,110,110,33,84,89,198,190,111,111,111,111,33,86,74,85,88,112,112,112,112,33,89,87,195,198,113,113,113,113,32,50,71,72,114,114,114,32,72,62,56,2,2,2,32,56,51,50,2,2,2,32,72,56,50,2,2,2,32,117,30,35,115,115,115,32,28,29,125,116,116,116,32,117,35,28,117,117,117,32,117,28,125,118,118,118,32,8,11,102,119,119,119,32,103,5,4,120,120,120,32,8,102,103,121,121,121,32,8,103,4,122,122,122,33,1,8,4,2,91,91,91,91,33,12,23,17,13,123,123,123,123,33,38,79,78,44,124,124,124,124,33,33,7,10,27,125,125,125,125,33,47,28,35,41,126,126,126,126,33,46,80,71,50,127,127,127,127,33,90,93,92,91,128,128,128,128,33,151,158,165,159,1,1,1,1,33,93,95,94,92,129,129,129,129,32,108,107,105,130,130,130,32,105,101,102,131,131,131,32,104,108,105,5,5,5,32,105,102,104,132,132,132,33,97,100,99,96,133,133,133,133,33,109,111,118,112,8,8,8,8,33,111,117,128,118,9,9,9,9,32,116,115,99,134,134,134,32,99,100,124,134,134,134,32,116,99,124,135,135,135,33,120,113,114,121,136,136,136,136,33,122,115,116,123,13,13,13,13,33,121,114,119,130,14,14,14,14,33,124,131,123,116,137,137,137,137,33,132,133,127,125,16,16,16,16,33,130,119,129,136,17,17,17,17,33,104,106,110,108,18,18,18,18,33,139,140,133,132,19,19,19,19,32,114,113,107,138,138,138,32,107,108,110,139,139,139,32,110,112,118,140,140,140,32,118,128,134,141,141,141,32,134,141,135,142,142,142,32,134,135,129,143,143,143,32,110,118,134,144,144,144,32,114,107,110,145,145,145,32,134,129,119,146,146,146,32,119,114,110,147,147,147,32,119,110,134,148,148,148,33,136,129,135,142,149,149,149,149,33,144,137,138,145,150,150,150,150,33,141,148,142,135,151,151,151,151,33,143,150,145,138,152,152,152,152,32,137,184,173,153,153,153,32,169,164,157,154,154,154,32,137,173,169,155,155,155,32,137,169,157,156,156,156,32,157,156,122,134,134,134,32,122,123,131,157,157,157,32,97,96,90,158,158,158,32,157,122,131,159,159,159,32,97,90,91,160,160,160,32,137,157,131,161,161,161,32,131,97,91,162,162,162,32,91,98,101,163,163,163,32,101,105,120,164,164,164,32,120,121,130,165,165,165,32,130,136,142,166,166,166,32,148,126,127,167,167,167,32,130,142,148,168,168,168,32,91,101,120,169,169,169,32,120,130,148,170,170,170,32,148,127,133,171,171,171,32,133,140,147,172,172,172,32,147,185,186,173,173,173,32,186,187,193,174,174,174,32,193,177,171,175,175,175,32,186,193,171,176,176,176,32,133,147,186,177,177,177,32,120,148,133,178,178,178,32,131,91,120,179,179,179,32,137,131,120,180,180,180,32,120,133,186,181,181,181,32,186,171,167,182,182,182,32,186,167,161,183,183,183,32,138,137,120,184,184,184,32,143,138,120,185,185,185,32,186,161,154,186,186,186,32,149,143,120,187,187,187,32,120,186,154,188,188,188,32,154,149,120,189,189,189,33,149,155,150,143,69,69,69,69,33,146,151,159,153,70,70,70,70,33,154,160,155,149,190,190,190,190,33,162,156,157,163,72,72,72,72,33,161,166,160,154,191,191,191,191,32,197,194,182,192,192,192,32,182,183,144,162,162,162,32,144,145,150,193,193,193,32,150,155,160,194,194,194,32,160,166,170,134,134,134,32,170,176,192,195,195,195,32,192,196,188,134,134,134,32,189,197,182,196,196,196,32,192,188,189,197,197,197,32,160,170,192,198,198,198,32,144,150,160,199,199,199,32,189,182,144,200,200,200,32,160,192,189,201,201,201,32,144,160,189,202,202,202,32,168,172,178,134,134,134,32,178,179,162,134,134,134,32,162,163,168,134,134,134,32,178,162,168,135,135,135,33,164,168,163,157,86,86,86,86,33,167,170,166,161,87,87,87,87,33,169,172,168,164,88,88,88,88,33,171,176,170,167,203,203,203,203,33,106,109,112,110,90,90,90,90,33,173,178,172,169,91,91,91,91,32,184,183,182,204,204,204,32,180,179,178,95,95,95,32,180,178,173,205,205,205,32,184,182,181,206,206,206,32,180,173,184,207,207,207,32,184,181,180,208,208,208,32,174,175,191,98,98,98,32,190,189,188,101,101,101,32,187,186,185,209,209,209,32,190,188,187,103,103,103,32,185,174,191,210,210,210,32,190,187,185,211,211,211,32,191,190,185,212,212,212,33,177,192,176,171,105,105,105,105,33,194,195,181,182,106,106,106,106,33,187,188,196,193,91,91,91,91,32,153,152,147,213,213,213,32,147,140,139,214,214,214,32,146,153,147,109,109,109,32,147,139,146,215,215,215,33,189,190,198,197,111,111,111,111,33,193,196,192,177,112,112,112,112,33,197,198,195,194,113,113,113,113,32,175,174,152,147,147,147,32,152,153,159,134,134,134,32,159,165,175,134,134,134,32,152,159,175,134,134,134,32,117,125,127,216,216,216,32,126,134,128,217,217,217,32,117,127,126,218,218,218,32,117,126,128,219,219,219,32,98,94,95,220,220,220,32,103,102,101,221,221,221,32,98,95,103,120,120,120,32,98,103,101,222,222,222,33,91,92,94,98,91,91,91,91,33,105,107,113,120,223,223,223,223,33,137,144,183,184,224,224,224,224,33,131,124,100,97,225,225,225,225,33,148,141,134,126,226,226,226,226,33,147,152,174,185,227,227,227,227]},"autopoint_abc":{"normals":[0,-1,0,-1.02081e-7,-1,2.1435e-7,1.0193e-7,-1,2.64251e-7,0,-1,0,1.23458e-7,-1,1.20928e-7,0,-1,-8.34642e-8,0,-1,0,-1.73717e-8,-1,-6.82215e-9,0,0,-1,0.04463,0,-0.999004,0,-0.00000508626,1,5.89901e-9,1,-0.00000190145,0,1,0,3.49348e-9,1,-0.00000112606,-3.8832e-8,1,0.00000302246,0.04463,0,-0.999004,0,0.00000508626,1,-3.02574e-7,1,0.00000102844,-1.35154e-8,1,2.94796e-7,2.64912e-8,1,1.58947e-7,-2.64656e-8,1,-1.59098e-7,-3.93266e-9,1,3.41494e-7,0,1,0,-9.29242e-9,1,-5.96047e-8,2.51576e-8,1,-8.55102e-8,-2.06716e-7,1,-9.20551e-7,2.57594e-7,1,0.00000173659,1.51469e-8,1,-3.14947e-8,0.170958,0,0.985278,-1.34211e-7,1,-4.88871e-7,-0.00000131379,1,-0.00000397695,-5.2535e-8,1,-4.60407e-8,-1.23993e-7,1,0.00000406729,-3.93266e-9,1,6.40494e-7,1.08509e-7,1,0.00000147104,2.34309e-9,1,0.00000115154,-6.98235e-7,-1,-0.0000094659,3.93266e-9,-1,-4.8037e-7,-1.73258e-8,-1,-0.00000100588,-1.95258e-9,-1,-9.5962e-7,0.359887,-2.78054e-8,0.932996,0.359893,0,0.932993,0.359887,-3.70739e-8,0.932996,0.359887,-3.70739e-8,0.932996,0.359893,0,0.932994,0.359887,0,0.932996,-2.64912e-8,-1,-1.58947e-7,-4.11975e-8,-1,1.57308e-7,-1.32586e-8,-1,-4.79108e-8,-1.92364e-7,-1,-8.56639e-7,-3.22973e-8,-1,-4.37843e-7,0,-1,0,1.32581e-8,-1,-7.95489e-8,1.60017e-9,-1,-3.27499e-7,-3.69073e-10,-1,-1.61469e-7,3.95992e-9,-1,2.98023e-8,6.98508e-10,-1,-4.28097e-8,4.29921e-8,-1,3.26591e-7,-2.00288e-9,-1,-1.50737e-8,-8.60466e-9,-1,-2.12505e-8,-3.07269e-8,-1,7.21987e-8,7.75323e-7,-1,0.00000241641,0,-1,-2.32073e-7,-1.03591e-7,-1,-3.22858e-7,0.0457989,0.00000182231,-0.998951,-2.00026e-14,0.0000101725,-1,0.155468,0,-0.987841,0.253347,4.28659e-8,-0.967375,0.332758,7.58552e-8,-0.943012,-0.391556,0,0.920154,-0.332696,1.49214e-7,0.943034,0,0.00000508626,-1,0.332685,0.0000014123,-0.943038,0.332685,0,-0.943038,0.332684,0,-0.943038,0.332686,-0.00000141228,-0.943038,0.332684,0,-0.943038,0.332685,0,-0.943038,0.253266,0,-0.967397,0.391546,0,-0.920158,0.391547,5.48457e-8,-0.920158,0.391546,0,-0.920158,0.391546,0,-0.920158,0.391547,0,-0.920158,0,-0.00000508626,-1,0.155402,0,-0.987851,0.440425,4.45937e-8,-0.897789,0.429966,4.03603e-8,-0.902845,0.429964,5.38138e-8,-0.902846,0.42997,4.48447e-8,-0.902843,0.429978,0.00000352874,-0.902839,0.429964,2.75915e-8,-0.902846,0.42997,2.69068e-8,-0.902843,-0.332696,-1.49214e-7,0.943034,-0.391556,0,0.920154,0.332758,7.58552e-8,-0.943012,0.253347,4.28659e-8,-0.967375,0.0457989,-0.00000182231,-0.998951,0,-0.0000101725,-1,0.0461122,0,-0.998936,0.0461108,0,-0.998936,0.0461122,0,-0.998936,0.0461122,0,-0.998936,0,0,-1,0.391599,0,-0.920136,-0.429969,-3.42744e-8,0.902844,-0.391546,-3.67916e-8,0.920158,-0.391546,-4.20475e-8,0.920158,-0.429969,-3.42744e-8,0.902844,-3.93268e-9,-1,0.00000126763,0,-1,-0.00000336964,-3.49348e-9,-1,0.00000112606,7.99522e-9,-1,0,7.99693e-8,1,-5.97551e-8,0,1,1.12125e-7,3.89439e-8,1,1.00958e-7,4.55077e-8,1,3.13452e-8,0,1,0,0,1,0,-1,0,-9.53674e-7,0,0,1,2.4583e-8,1,1.86852e-7,0,1,-4.469e-8,0,0.999993,0.00364581,-6.13606e-7,1,0.0000116707,-1.74906e-7,1,-8.26068e-7,-4.09108e-7,1,-0.00000136231,0,1,-1.19576e-7,-1.28955e-7,1,-8.69361e-7,1.37638e-8,1,1.56115e-7,2.16675e-8,1,1.5167e-7,-8.1054e-8,1,-3.55523e-7,-2.39198e-7,1,5.62042e-7,-5.54271e-8,1,-2.05427e-7,3.06017e-8,1,1.60126e-7,2.64246e-8,1,1.52292e-7,-4.84657e-8,1,-1.56167e-7,9.38028e-9,1,1.10161e-7,6.995e-9,1,-1.80085e-8,-6.5013e-8,1,-2.22198e-7,1.66459e-8,1,-3.49534e-8,3.20998e-8,1,8.5646e-8,7.00188e-9,1,-1.80907e-8,8.31976e-9,1,-4.74236e-8,-3.39393e-7,1,9.90046e-7,4.66939e-8,1,-1.09731e-7,-9.99344e-10,1,4.55745e-8,8.30697e-10,1,2.85528e-8,1.73559e-7,1,-4.07863e-7,0,1,5.029e-8,-2.74058e-7,1,0.00000110675,1.06489e-8,1,-2.30696e-7,0,1,-1.41367e-7,5.21466e-9,1,5.70436e-8,-6.61359e-8,1,1.12055e-7,-5.11165e-10,1,3.71088e-8,6.65263e-9,1,-1.45104e-7,9.09259e-10,1,4.64525e-8,-2.00433e-9,1,-1.28146e-7,-2.45068e-9,1,-1.25201e-7,0.122409,0,0.99248,-0.359896,3.74801e-8,-0.932993,0.359896,0,0.932992,0.164399,0,-0.986394,0.405245,-3.37851e-8,0.914208,0.266711,0,0.963776,0.266711,5.24236e-7,0.963776,0.266711,0,0.963776,0.266711,-5.24236e-7,0.963776,0.266711,0,0.963777,0.313679,0,0.949529,0.313678,0,0.949529,0.313679,0,0.949529,0.313679,0,0.949529,-1.22915e-8,-1,-9.34259e-8,0,-1,4.469e-8,0,-0.999995,-0.00312498,6.05401e-7,-1,-0.000011782,-5.11318e-9,-1,7.58499e-10,2.32677e-7,-1,0.00000108333,6.0695e-7,-1,0.00000196119,0,-1,1.43492e-7,1.17955e-7,-1,8.30435e-7,-1.17975e-8,-1,-1.27429e-7,-1.49619e-8,-1,-1.25649e-7,7.39976e-8,-1,3.58898e-7,1.79399e-7,-1,-4.21531e-7,1.94812e-8,-1,3.95955e-8,-9.42457e-9,-1,-1.20408e-7,-5.07324e-8,-1,-1.97882e-7,3.27487e-8,-1,1.30683e-7,-7.1766e-9,-1,-9.02182e-8,-4.99686e-9,-1,2.69066e-8,-1.66459e-8,-1,3.49534e-8,-2.91815e-8,-1,-9.25042e-8,-3.50094e-9,-1,9.04534e-9,2.78851e-9,-1,-7.20463e-9,-8.31976e-9,-1,4.74236e-8,2.11155e-7,-1,-6.40569e-7,-4.66939e-8,-1,1.09731e-7,3.80416e-9,-1,-5.35231e-8,8.26389e-9,-1,-9.50041e-8,-1.73559e-7,-1,4.07863e-7,0,-1,-5.029e-8,2.48888e-7,-1,-9.95623e-7,-4.76468e-8,-1,-6.45943e-7,0,-1,1.56247e-7,0,-1,1.56247e-7,1.95232e-9,-1,-1.03374e-7,6.37234e-8,-1,-1.09802e-7,-1.70416e-9,-1,-3.14458e-8,-1.15828e-8,-1,1.62754e-7,1.56476e-9,-1,-9.94245e-9,9.60345e-9,-1,9.2901e-8,4.26684e-9,-1,1.28102e-7,0.0735638,0,0.99729,0.0735638,0,0.997291,0.0735632,0,0.997291,0.0735638,0,0.99729,-1,-2.58703e-11,-0.00000254316,-1,0,-0.00000254316,-1,2.58696e-11,-0.00000254309,-1,0,-0.00000254313,-1,0,0,-1,0,-0.00000285709,-1,0,0,-1,0,-0.00000285709,-1,0,0,-1,0,0,0.111158,0,0.993803,-0.313679,0,-0.949529,-0.26671,2.68216e-7,-0.963777,0.266711,-6.17239e-8,0.963777,0.219101,-2.87219e-8,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,0.0735647,0,0.99729,0.13044,0,0.991456,0,0,1,0.2191,0,0.975703,-1,0,-0.00000509113,-1,0,-0.00000509113,-1,-0.000522994,-0.00000190675,-1,0,0,-1,0,0,-1,0,0,-1,4.36426e-10,-0.00000190677,-1,0,-0.00000190666,0.307799,0,0.951451,0.0735633,0,0.99729,0.307799,0,0.951451,0.219101,-2.87219e-8,0.975702,0.122405,0,0.99248,0.266711,-6.17239e-8,0.963777,0.122405,0,0.99248,-0.26671,-2.68216e-7,-0.963777,-0.313679,0,-0.949529,0.359896,0,0.932992,0.164399,0,0.986394],"metadata":{"generator":"io_three","normals":259,"uvs":0,"vertices":188,"version":3,"faces":302,"type":"Geometry"},"uvs":[],"vertices":[197.355,-4,-0.274109,196.247,-4,0.859039,195.377,-4,0.489013,197.356,-4,-0.273712,197.293,-4,1.35753,197.93,-4,1.11191,199.14,-4,0.575699,184.808,-4,-4.00856,186.816,-4,-4.78339,181.897,-4,-5.24725,182.445,-4,-6.64345,174.348,-4,-9.49998,169.842,-4,-9.49998,0.249962,-1,17.5,121.5,-1,17.5,121.5,-4,17.5,0.249962,-4,17.5,0.249962,-0.999999,17.4995,168.356,-1,9.5,173.98,-1,9.5,165.1,-1,11.9575,153.846,-0.999999,14.4846,142.481,-0.999999,16.4565,131.034,-0.999999,17.8685,130.548,-1,17.9042,130.548,-4,17.9042,168.356,-4,9.49998,173.98,-4,9.49998,117,4,19,119.53,4,18.717,121.5,4,17.5,130.548,4,17.9042,0.249962,4,19,0.249962,4,17.5,121.5,0.999999,17.5,0.249962,0.999999,17.5,130.548,1,17.9042,131.034,1,17.8685,142.481,1,16.4565,153.846,1,14.4846,165.1,1,11.9575,173.98,1,9.5,168.356,1,9.5,0.249962,1,17.4995,173.98,4,9.49998,168.356,4,9.49998,0.250008,4,-6.5,9.25001,4,-8,0.250015,4,-9.49997,9.24999,4,8,119.064,4,9.22556,130.102,4,8.41135,175.781,4,7.4453,141.087,4,7.05653,135.964,4,-8.83687,121.501,4,-9.49997,151.992,4,5.16438,150.466,4,-6.55447,0.249977,4,9.49713,117,4,9.49713,0.249992,4,6.5,162.791,4,2.7394,164.814,4,-2.79686,186.607,4,5.44844,184.518,4,4.55907,176.216,4,8.88113,172.718,4,-0.00784284,128.979,4,-18.6547,121.5,4,-19,0.250038,4,-19,0.250038,4,-17.511,117,4,-17.511,117.739,4,-17.7501,127.455,4,-18.4667,128.979,-4,-18.6547,127.455,-4,-18.4667,117.739,-4,-17.7501,121.5,-4,-19,117,-4,-17.511,0.250038,-4,-19,0.250038,-4,-17.511,135.964,-4,-8.83687,141.087,-4,7.05653,130.102,-4,8.41135,121.501,-4,-9.49997,119.064,-4,9.22556,9.24999,-4,8,9.25001,-4,-8,0.250015,-4,-9.49997,0.250008,-4,-6.5,186.607,-4,5.44844,176.216,-4,8.88113,184.518,-4,4.55907,175.781,-4,7.4453,0.249977,-4,9.49713,0.249992,-4,6.5,117,-4,9.49713,151.992,-4,5.16438,150.466,-4,-6.55447,162.791,-4,2.73939,172.718,-4,-0.00784319,164.814,-4,-2.79686,135.964,1,-8.83687,121.5,1,-9.5,0.250015,1,-9.5,150.466,1,-6.55447,164.814,1,-2.79686,172.718,1,-0.00784297,184.808,1,-4.00856,181.897,1,-5.24725,169.842,1,-9.5,174.348,1,-9.5,167.629,1,-11.8704,184.808,4,-4.00856,181.897,4,-5.24725,169.842,4,-9.49998,174.348,4,-9.49998,182.445,4,-6.64345,174.348,-1,-9.5,167.629,-0.999999,-11.8704,152.433,-0.999999,-15.8488,152.433,1,-15.8488,186.816,4,-4.78339,186.816,1,-4.78339,196.868,1,-0.506317,196.868,-1,-0.506317,186.816,-1,-4.78339,169.842,-1,-9.5,181.897,-1,-5.24725,184.808,-1,-4.00856,172.718,-1,-0.00784306,164.814,-1,-2.79686,150.466,-1,-6.55447,135.964,-1,-8.83687,121.5,-1,-9.5,0.250015,-1,-9.5,136.928,-1,-18.2878,136.928,0.999999,-18.2878,197.355,4,-0.274109,197.356,4,-0.273712,199.14,4,0.575699,197.355,-1,-0.274109,197.355,1,-0.274109,128.979,0.999999,-18.6547,128.979,-1,-18.6547,186.607,1,5.44844,184.518,1,4.55907,197.293,1,1.35753,196.247,1,0.859039,195.377,1,0.489014,187.169,1,5.26306,197.293,4,1.35753,196.247,4,0.859039,195.377,4,0.489014,196.247,-1,0.859039,195.377,-1,0.489014,197.293,-1,1.35753,187.169,-1,5.26306,186.607,-1,5.44844,184.518,-1,4.55907,119.53,-4,18.717,117,-4,19,0.249962,-4,19,197.93,4,1.11191,175.781,1,7.4453,162.791,1,2.7394,151.992,1,5.16438,141.087,1,7.05653,130.102,1,8.41135,119.064,1,9.22556,117,1,9.49713,0.249977,1,9.49713,0.249977,-1,9.49713,117,-1,9.49713,119.064,-1,9.22556,0.250038,0.999999,-17.511,130.102,-1,8.41135,117,0.999999,-17.511,0.250038,-1,-17.511,141.087,-1,7.05653,117.739,0.999999,-17.7501,117,-1,-17.511,151.992,-1,5.16438,127.455,0.999999,-18.4667,117.739,-1,-17.7501,162.791,-1,2.7394,127.455,-1,-18.4667,175.781,-1,7.4453],"faces":[32,2,0,3,0,0,0,32,3,6,5,1,1,1,32,5,4,1,2,2,2,32,1,2,3,3,3,3,32,3,5,1,4,4,4,32,12,11,10,5,5,5,32,10,8,7,6,6,6,32,9,12,10,7,7,7,32,10,7,9,6,6,6,33,13,14,15,16,8,8,8,8,33,25,15,14,24,9,9,9,9,33,19,18,26,27,10,10,10,10,32,31,30,33,11,11,11,32,33,32,28,12,12,12,32,29,31,33,13,13,13,32,33,28,29,14,14,14,33,33,30,34,35,8,8,8,8,33,36,34,30,31,15,15,15,15,33,44,45,42,41,16,16,16,16,32,66,62,57,17,17,17,32,57,54,55,18,18,18,32,48,46,47,19,19,19,32,49,60,58,20,20,20,32,55,48,47,21,21,21,32,49,58,59,22,22,22,32,55,47,49,23,23,23,32,66,57,55,24,24,24,32,56,61,66,25,25,25,32,51,53,56,26,26,26,32,49,59,50,12,12,12,32,50,51,56,12,12,12,32,56,66,55,27,27,27,32,55,49,50,12,12,12,32,55,50,56,12,12,12,33,38,22,21,39,28,28,28,28,32,63,64,52,29,29,29,32,52,45,44,22,22,22,32,44,65,63,30,30,30,32,52,44,63,31,31,31,32,73,67,68,32,32,32,32,68,69,70,33,33,33,32,70,71,72,12,12,12,32,72,73,68,34,34,34,32,68,70,72,35,35,35,32,74,75,76,36,36,36,32,76,78,80,3,3,3,32,80,79,77,37,37,37,32,77,74,76,38,38,38,32,76,80,77,39,39,39,32,5,163,151,40,40,40,32,147,150,157,41,41,41,32,5,151,147,42,42,42,32,156,4,5,43,43,43,32,147,157,156,44,44,44,32,147,156,5,45,45,45,32,87,89,88,46,46,46,32,88,84,81,0,0,0,32,81,98,101,47,47,47,32,101,100,99,48,48,48,32,99,97,82,49,49,49,32,82,83,85,50,50,50,32,85,96,94,51,51,51,32,94,95,86,52,52,52,32,87,88,81,53,53,53,32,85,94,86,54,54,54,32,86,87,81,55,55,55,32,81,101,99,56,56,56,32,99,82,85,57,57,57,32,85,86,81,58,58,58,32,81,99,85,59,59,59,32,93,92,90,60,60,60,32,90,91,27,61,61,61,32,27,26,93,62,62,62,32,93,90,27,63,63,63,33,55,54,102,103,64,64,64,64,33,48,55,103,104,65,65,65,65,33,54,57,105,102,66,66,66,66,33,57,62,106,105,67,67,67,67,33,107,106,62,66,68,68,68,68,33,109,108,113,114,69,69,69,69,33,110,109,114,115,70,70,70,70,33,111,110,115,116,71,71,71,71,32,111,116,117,72,72,72,32,117,10,11,73,73,73,32,118,119,112,74,74,74,32,117,11,118,75,75,75,32,118,112,111,76,76,76,32,117,118,111,77,77,77,33,112,119,120,121,78,78,78,78,32,10,117,122,79,79,79,32,123,124,125,80,80,80,32,10,122,123,81,81,81,32,126,8,10,82,82,82,32,123,125,126,83,83,83,32,123,126,10,79,79,79,33,11,12,127,118,84,84,84,84,33,137,121,120,136,85,85,85,85,32,142,138,139,86,86,86,32,139,140,6,87,87,87,32,6,3,0,3,3,3,32,141,125,124,88,88,88,32,6,0,141,89,89,89,32,142,139,6,90,90,90,32,141,124,142,91,91,91,32,6,141,142,92,92,92,33,12,9,128,127,93,93,93,93,33,9,7,129,128,94,94,94,94,33,100,101,131,130,95,95,95,95,33,132,131,101,98,96,96,96,96,33,133,132,98,81,66,66,66,66,33,134,133,81,84,97,97,97,97,33,135,134,84,88,98,98,98,98,32,77,68,67,99,99,99,32,143,137,136,100,100,100,32,77,67,143,101,101,101,32,144,74,77,101,101,101,32,143,136,144,100,100,100,32,143,144,77,102,102,102,33,77,79,69,68,103,103,103,103,33,64,63,145,146,104,104,104,104,33,151,152,148,147,105,105,105,105,33,149,148,152,153,106,106,106,106,33,2,1,154,155,107,107,107,107,33,156,154,1,4,108,108,108,108,33,159,158,90,92,104,104,104,104,32,16,15,25,109,109,109,32,160,161,162,110,110,110,32,16,25,160,111,111,111,32,160,162,16,112,112,112,32,122,117,116,113,113,113,32,116,115,114,114,114,114,32,114,113,122,115,115,115,32,116,114,122,116,116,116,32,163,140,139,117,117,117,32,139,138,153,118,118,118,32,152,151,163,12,12,12,32,139,153,152,12,12,12,32,139,152,163,12,12,12,33,86,49,47,87,119,119,119,119,33,162,161,28,32,120,120,120,120,32,168,169,170,121,121,121,32,170,171,43,122,122,122,32,43,35,34,123,123,123,32,34,36,37,124,124,124,32,37,38,39,12,12,12,32,39,40,41,125,125,125,32,42,164,146,126,126,126,32,39,41,42,127,127,127,32,34,37,39,128,128,128,32,170,43,34,129,129,129,32,168,170,34,130,130,130,32,34,39,42,131,131,131,32,146,145,150,132,132,132,32,34,42,146,133,133,133,32,167,168,34,134,134,134,32,166,167,34,135,135,135,32,146,150,147,136,136,136,32,166,34,146,137,137,137,32,165,166,146,138,138,138,32,146,147,148,139,139,139,32,149,142,124,140,140,140,32,146,148,149,141,141,141,32,107,165,146,142,142,142,32,107,146,149,12,12,12,32,149,124,123,143,143,143,32,108,109,110,144,144,144,32,149,123,108,145,145,145,32,106,107,149,146,146,146,32,105,106,149,147,147,147,32,149,108,110,148,148,148,32,110,111,112,149,149,149,32,112,121,137,150,150,150,32,137,143,183,151,151,151,32,183,180,177,12,12,12,32,177,175,104,152,152,152,32,177,104,103,152,152,152,32,137,183,177,153,153,153,32,110,112,137,154,154,154,32,105,149,110,155,155,155,32,177,103,102,156,156,156,32,102,105,110,157,157,157,32,110,137,177,158,158,158,32,110,177,102,159,159,159,33,37,23,22,38,160,160,160,160,33,142,149,153,138,161,161,161,161,33,108,123,122,113,162,162,162,162,33,95,60,49,86,163,163,163,163,33,163,5,6,140,164,164,164,164,32,41,40,20,165,165,165,32,19,27,91,166,166,166,32,41,20,19,167,167,167,32,65,44,41,168,168,168,32,19,91,65,169,169,169,32,19,65,41,169,169,169,32,65,91,90,170,170,170,32,158,157,150,171,171,171,32,65,90,158,172,172,172,32,145,63,65,173,173,173,32,158,150,145,171,171,171,32,158,145,65,173,173,173,32,173,174,176,174,174,174,32,17,172,173,175,175,175,32,14,13,17,176,176,176,32,23,24,14,177,177,177,32,21,22,23,178,178,178,32,19,20,21,179,179,179,32,159,187,18,180,180,180,32,18,19,21,181,181,181,32,21,23,14,182,182,182,32,14,17,173,183,183,183,32,14,173,176,184,184,184,32,18,21,14,185,185,185,32,157,158,159,186,186,186,32,159,18,14,187,187,187,32,14,176,179,188,188,188,32,14,179,182,189,189,189,32,156,157,159,190,190,190,32,159,14,182,191,191,191,32,159,182,185,192,192,192,32,154,156,159,6,6,6,32,125,141,155,193,193,193,32,155,154,159,194,194,194,32,159,185,130,195,195,195,32,155,159,130,196,196,196,32,126,125,155,197,197,197,32,127,128,129,198,198,198,32,129,126,155,199,199,199,32,155,130,131,200,200,200,32,155,131,132,201,201,201,32,127,129,155,202,202,202,32,119,118,127,203,203,203,32,136,120,119,204,204,204,32,186,144,136,0,0,0,32,181,184,186,205,205,205,32,135,178,181,206,206,206,32,134,135,181,207,207,207,32,181,186,136,208,208,208,32,136,119,127,209,209,209,32,127,155,132,210,210,210,32,133,134,181,211,211,211,32,127,132,133,212,212,212,32,181,136,127,213,213,213,32,133,181,127,214,214,214,32,31,29,160,215,215,215,32,160,25,24,216,216,216,32,24,23,37,217,217,217,32,36,31,160,216,216,216,32,24,37,36,217,217,217,32,160,24,36,218,218,218,32,135,88,89,219,219,219,32,89,46,48,220,220,220,32,89,48,104,221,221,221,32,135,89,104,222,222,222,32,175,70,69,223,223,223,32,135,104,175,224,224,224,32,79,80,178,225,225,225,32,178,135,175,226,226,226,32,175,69,79,227,227,227,32,175,79,178,228,228,228,33,29,28,161,160,229,229,229,229,33,146,164,52,64,230,230,230,230,33,45,52,164,42,231,231,231,231,33,66,61,165,107,232,232,232,232,33,166,165,61,56,233,233,233,233,33,167,166,56,53,234,234,234,234,33,168,167,53,51,235,235,235,235,33,169,168,51,50,236,236,236,236,33,170,169,50,59,237,237,237,237,33,171,170,59,58,238,238,238,238,33,39,21,20,40,239,239,239,239,33,172,94,96,173,238,238,238,238,33,173,96,85,174,237,237,237,237,32,58,60,95,240,240,240,32,95,94,172,241,241,241,32,171,58,95,241,241,241,32,35,43,171,242,242,242,32,32,33,35,223,223,223,32,16,162,32,243,243,243,32,13,16,32,244,244,244,32,13,32,35,245,245,245,32,17,13,35,225,225,225,32,171,95,172,240,240,240,32,172,17,35,246,246,246,32,172,35,171,247,247,247,33,174,85,83,176,236,236,236,236,33,175,177,71,70,238,238,238,238,33,176,83,82,179,235,235,235,235,33,177,180,72,71,248,248,248,248,33,178,80,78,181,238,238,238,238,33,179,82,97,182,234,234,234,234,33,180,183,73,72,249,249,249,249,33,181,78,76,184,250,250,250,250,33,182,97,99,185,251,251,251,251,33,67,73,183,143,252,252,252,252,33,184,76,75,186,249,249,249,249,33,130,185,99,100,253,253,253,253,33,144,186,75,74,254,254,254,254,33,18,187,93,26,255,255,255,255,33,92,93,187,159,256,256,256,256,33,0,2,155,141,161,161,161,161,33,7,8,126,129,257,257,257,257,33,87,47,46,89,258,258,258,258]},"turnout_L_b":{"normals":[-5.29267e-9,1,4.47035e-8,-0.2173,0.913796,-0.343158,-4.02558e-9,1,-1.52085e-7,-2.68937e-8,1,2.8797e-7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1.90536e-7,0,1,-8.74127e-8,0.00000301997,-1,0,0,-1,-1.07264e-8,1,-8.46932e-9,-0.266718,0.000006783,-0.963775,-2.98023e-8,1,-5.96046e-8,-0.266712,0,-0.963776,-0.26671,0,-0.963777,-0.266712,-0.00000409272,-0.963776,-0.164399,0,-0.986394,-5.29823e-9,1,3.17891e-8,-9.20132e-9,1,6.81199e-8,6.62271e-9,1,3.97363e-8,6.3676e-9,1,6.81199e-8,-0.0110048,0.999384,-0.0333122,5.21617e-9,1,1.88484e-8,-8.24284e-9,1,3.97363e-8,1.48278e-7,1,-0.00000100688,7.88812e-9,1,1.55671e-7,-0.0019304,0.999989,-0.00435488,9.83016e-9,1,-2.04254e-7,2.77211e-10,1,4.65246e-8,-7.97221e-11,1,5.08274e-8,-0.164401,0,0.986394,0,0,1,2.51326e-9,1,-1.49011e-8,3.1838e-9,1,-3.52311e-7,1.00661e-8,1,9.19979e-8,6.69923e-8,1,0.0000015143,2.46268e-9,1,-1.67169e-7,4.4254e-9,1,0,5.02689e-9,1,-0.00000190032,-0.0441647,0.799732,-0.59873,3.04696e-8,1,0.00000374174,8.89046e-9,1,1.20526e-7,-1.68165e-7,0,1,2.0106e-7,0,-1,-0.492902,2.41203e-7,-0.870085,-0.492896,0,-0.870088,-0.492902,0,-0.870085,-0.492897,-0.00000959098,-0.870088,-0.219099,0,-0.975703,-0.40524,0,-0.91421,-0.405244,3.63274e-8,-0.914209,-0.405239,7.2655e-8,-0.914211,-0.40524,0,-0.91421,-0.40524,-0.00000391356,-0.91421,-0.313679,0,-0.949529,-0.313678,0,-0.949529,-0.313682,-0.00000968444,-0.949528,-0.449608,0,-0.893226,-0.535003,0,-0.84485,-0.534997,0,-0.844854,-0.534998,-0.0000122842,-0.844853,-0.535003,0,-0.84485,-0.534989,0.0000456737,-0.844859,-0.025081,0,-0.999685,-0.0735641,0,-0.99729,-0.0735679,0,-0.99729,-0.0735627,-0.00000402435,-0.997291,-0.170959,0,-0.985278,-0.359892,3.70739e-8,-0.932994,-0.359892,0,-0.932994,-0.359892,0,-0.932994,-0.12241,0,-0.99248,-0.122407,0,-0.99248,-0.12241,0,-0.99248,-0.122408,-0.00000768935,-0.99248,0.122408,0.00000745465,0.99248,-5.29268e-9,-1,-4.47035e-8,-4.60067e-9,-1,-2.49753e-7,-0.217972,-0.913237,-0.344219,-2.93152e-8,-1,2.25833e-7,1,0,0,1,0,0,-8.74127e-8,-0.00000301997,-1,0,0,-1,-1.07264e-8,-1,-8.46932e-9,-0.266712,0.000003657,-0.963776,-0.266718,-0.000006783,-0.963775,-0.266712,0.00000402235,-0.963776,5.29823e-9,-1,-3.17891e-8,6.3676e-9,-1,-6.81199e-8,-0.0104337,-0.999447,-0.0315836,8.69361e-9,-1,3.1414e-8,-6.62271e-9,-1,-3.97363e-8,-9.20134e-9,-1,-6.81199e-8,2.95753e-8,-1,-0.00000121642,7.30415e-9,-1,-3.97363e-8,-2.85209e-9,-1,-1.40427e-7,-1.01485e-9,-1,-4.799e-8,0.0019304,-0.999989,0.00435488,-1.29952e-8,-1,-2.63427e-7,-1.13269e-9,-1,-5.35626e-8,0,0,1,2.51328e-9,-1,-9.68575e-8,6.85833e-8,-1,0.00000147007,2.78582e-9,-1,-4.26512e-7,7.2688e-10,-1,-2.9808e-7,9.30355e-9,-1,-5.74008e-9,4.4254e-9,-1,0,-0.0456476,-0.784195,-0.618833,3.85846e-8,-1,0.00000490762,5.02702e-9,-1,-0.00000254734,1.01605e-8,-1,1.37744e-7,-1.68165e-7,0,1,2.0106e-7,0,-1,-0.492902,-2.41203e-7,-0.870085,-0.492897,0,-0.870088,-0.492896,0.0000110524,-0.870088,-0.40524,0,-0.91421,-0.405239,5.44912e-8,-0.914211,-0.40524,0.00000372817,-0.91421,-0.313682,0.00000968444,-0.949528,-1,0,0,-0.534998,0,-0.844853,-0.535003,0,-0.84485,-0.534989,0.0000318312,-0.844859,-0.535003,0,-0.84485,-0.534997,-0.0000201114,-0.844854,-0.0735627,0.00000402435,-0.997291,-0.359892,0,-0.932994,-0.12241,0,-0.99248,-0.122408,0,-0.99248,-0.122407,0.0000104048,-0.99248,0.122408,-0.00000745465,0.99248],"uvs":[],"vertices":[215.75,1,-17.5,125.656,1,-17.5,120.814,0.999999,-14.4335,112.105,1,-9.50002,215.75,1,-9.50002,215.75,4,-19,215.75,4,-17.5,215.75,4,-9.50002,215.75,4,-6.00003,125.656,4,-17.5,112.105,4,-9.5,128.025,4,-19,110.778,4,-8.74826,100.475,4,-3.5623,92.4385,4,-0.000017945,224.75,4,-7.50003,224.75,4,7.50001,89.9301,4,1.1119,79.1685,4,5.26304,68.2164,4,8.88112,65.9801,4,9.49998,215.75,4,9.49998,215.75,4,6,215.75,0.999999,9.49998,65.98,1,9.49998,215.75,4,19,215.75,0.999999,17.5,215.75,4,17.5,57.0998,1,11.9575,45.8457,1,14.4846,34.4812,1,16.4565,26.0212,1,17.5,26.0212,4,17.5,23.0336,4,17.8684,11.5305,4,18.7169,0.25,4,19,89.9301,1,1.1119,100.475,1,-3.5623,26.0311,0.738152,17.4987,123.372,0.999993,-16.0534,71.1734,4,7.90423,14.6363,3.99999,18.4878,215.75,-0.999999,-17.5,125.656,-0.999999,-17.5,120.814,-0.999998,-14.4335,112.105,-0.999999,-9.50002,215.75,-1,-9.50002,215.75,-4,-19,215.75,-4,-17.5,215.75,-4,-9.50002,215.75,-4,-6.00003,215.75,2.6227e-7,-6.00003,215.75,8.30517e-7,-19,125.656,-4,-17.5,112.105,-4,-9.5,128.025,8.30517e-7,-19,128.025,-4,-19,110.778,-4,-8.74826,100.475,-4,-3.5623,92.4385,-4,-0.0000182947,224.75,-4,-7.50003,224.75,3.27837e-7,-7.50003,224.75,-4,7.50001,89.9301,-4,1.1119,79.1685,-4,5.26304,68.2164,-4,8.88112,65.9801,-4,9.49998,215.75,-4,9.49998,215.75,-4,6,215.75,-2.62268e-7,6,224.75,-3.27836e-7,7.50001,215.75,-1,9.49998,65.98,-1,9.49998,215.75,-4,19,215.75,-8.30516e-7,19,215.75,-1,17.5,215.75,-4,17.5,57.0998,-1,11.9575,45.8457,-1,14.4846,34.4812,-1,16.4565,26.0212,-1,17.5,26.0212,-4,17.5,23.0336,-4,17.8684,11.5305,-4,18.7169,0.25,-4,19,0.25,-8.30515e-7,19,79.1685,-2.30055e-7,5.26304,89.9301,-1,1.1119,89.9301,-4.86029e-8,1.1119,68.2164,-3.88206e-7,8.88112,100.475,-0.999999,-3.5623,100.475,1.55713e-7,-3.5623,57.0998,-5.22677e-7,11.9575,110.778,3.82399e-7,-8.74826,45.8457,-6.33143e-7,14.4846,120.814,6.3091e-7,-14.4335,34.4812,-7.19338e-7,16.4565,23.0336,-7.81054e-7,17.8684,11.5305,-8.18144e-7,18.7169,26.0311,-0.738154,17.4987,59.9902,-4.87714e-7,11.1576,123.372,-0.999992,-16.0534,71.1734,-4,7.90423,14.6363,-3.99999,18.4878],"faces":[32,4,0,1,0,0,0,32,1,39,2,1,1,1,32,2,3,4,2,2,2,32,1,2,4,3,3,3,32,52,5,6,4,4,4,32,52,6,0,5,5,5,32,7,8,51,6,6,6,32,52,0,4,7,7,7,32,4,7,51,7,7,7,32,4,51,52,8,8,8,33,1,0,6,9,9,9,9,9,33,4,3,10,7,10,10,10,10,33,52,55,11,5,11,11,11,11,33,5,11,9,6,12,12,12,12,32,24,20,19,13,13,13,32,89,100,92,14,14,14,32,92,28,24,15,15,15,32,24,19,89,16,16,16,32,24,89,92,17,17,17,33,51,8,15,61,18,18,18,18,32,22,16,15,19,19,19,32,8,7,10,20,20,20,32,22,15,8,21,21,21,32,20,21,22,22,22,22,32,18,40,19,23,23,23,32,19,20,22,24,24,24,32,22,8,10,25,25,25,32,22,10,12,26,26,26,32,18,19,22,27,27,27,32,13,14,17,28,28,28,32,17,18,22,29,29,29,32,22,12,13,30,30,30,32,13,17,22,31,31,31,33,69,70,16,22,32,32,32,32,33,23,21,20,24,33,33,33,33,32,27,25,74,5,5,5,32,69,22,21,4,4,4,32,69,21,23,5,5,5,32,26,27,74,7,7,7,32,69,23,26,7,7,7,32,74,69,26,7,7,7,32,31,26,23,34,34,34,32,23,24,28,35,35,35,32,23,28,29,36,36,36,32,30,31,23,37,37,37,32,23,29,30,38,38,38,32,35,25,27,39,39,39,32,27,32,33,40,40,40,32,33,41,34,41,41,41,32,34,35,27,42,42,42,32,27,33,34,43,43,43,33,74,25,35,85,44,44,44,44,33,32,27,26,31,45,45,45,45,32,12,10,3,46,46,46,32,3,2,95,47,47,47,32,93,12,3,48,48,48,32,3,95,93,49,49,49,33,28,92,94,29,50,50,50,50,32,91,88,36,51,51,51,32,36,17,14,52,52,52,32,14,13,37,53,53,53,32,37,91,36,54,54,54,32,36,14,37,55,55,55,32,86,89,19,56,56,56,32,40,18,86,57,57,57,32,19,40,86,58,58,58,32,91,37,13,7,7,7,32,13,12,93,59,59,59,32,13,93,91,59,59,59,33,15,16,70,61,5,5,5,5,32,1,9,11,60,60,60,32,55,95,2,61,61,61,32,55,2,39,62,62,62,32,1,11,55,63,63,63,32,1,55,39,64,64,64,33,98,85,35,34,65,65,65,65,32,33,97,98,66,66,66,32,98,34,41,67,67,67,32,98,41,33,68,68,68,33,29,94,96,30,69,69,69,69,32,18,17,36,70,70,70,32,36,88,86,71,71,71,32,36,86,18,72,72,72,32,33,32,31,73,73,73,32,31,30,96,74,74,74,32,97,33,31,75,75,75,32,31,96,97,76,76,76,33,30,31,38,96,77,77,77,77,32,19,24,20,13,13,13,32,43,42,46,78,78,78,32,46,45,44,79,79,79,32,44,101,43,80,80,80,32,46,44,43,81,81,81,32,48,47,52,82,82,82,32,51,50,49,82,82,82,32,51,49,46,83,83,83,32,42,48,52,83,83,83,32,51,46,42,83,83,83,32,52,51,42,6,6,6,33,48,42,43,53,9,9,9,9,33,46,49,54,45,84,84,84,84,33,52,47,56,55,85,85,85,85,33,47,48,53,56,86,86,86,86,32,72,77,92,15,15,15,32,72,92,100,87,87,87,32,65,66,72,88,88,88,32,72,100,89,89,89,89,32,72,89,65,16,16,16,33,51,61,60,50,18,18,18,18,32,60,62,68,90,90,90,32,68,67,66,91,91,91,32,65,102,64,92,92,92,32,68,66,65,93,93,93,32,50,60,68,94,94,94,32,54,49,50,95,95,95,32,57,54,50,96,96,96,32,50,68,65,97,97,97,32,50,65,64,98,98,98,32,58,57,50,99,99,99,32,63,59,58,100,100,100,32,50,64,63,101,101,101,32,63,58,50,102,102,102,33,69,68,62,70,32,32,32,32,33,71,72,66,67,103,103,103,103,32,74,73,76,7,7,7,32,74,76,75,83,83,83,32,67,68,69,4,4,4,32,74,75,71,83,83,83,32,71,67,69,83,83,83,32,71,69,74,4,4,4,32,71,75,80,104,104,104,32,71,80,79,105,105,105,32,77,72,71,106,106,106,32,71,79,78,107,107,107,32,78,77,71,108,108,108,32,76,73,84,109,109,109,32,83,103,82,110,110,110,32,76,84,83,111,111,111,32,82,81,76,112,112,112,32,83,82,76,113,113,113,33,74,85,84,73,114,114,114,114,33,81,80,75,76,115,115,115,115,32,45,54,57,116,116,116,32,93,95,44,117,117,117,32,45,57,93,48,48,48,32,93,44,45,118,118,118,33,77,78,94,92,50,50,50,50,32,87,88,91,119,119,119,32,91,90,58,7,7,7,32,59,63,87,52,52,52,32,91,58,59,120,120,120,32,91,59,87,121,121,121,32,65,89,86,56,56,56,32,86,64,102,57,57,57,32,86,102,65,122,122,122,32,58,90,91,123,123,123,32,91,93,57,59,59,59,32,91,57,58,59,59,59,33,60,61,70,62,7,7,7,7,32,101,44,95,124,124,124,32,55,56,53,125,125,125,32,43,101,95,126,126,126,32,55,53,43,127,127,127,32,43,95,55,128,128,128,33,98,83,84,85,65,65,65,65,32,98,97,82,66,66,66,32,103,83,98,67,67,67,32,82,103,98,129,129,129,33,78,79,96,94,69,69,69,69,32,87,63,64,70,70,70,32,64,86,88,72,72,72,32,64,88,87,130,130,130,32,80,81,82,131,131,131,32,97,96,79,132,132,132,32,80,82,97,75,75,75,32,97,79,80,133,133,133,33,79,96,99,80,134,134,134,134,32,65,66,72,88,88,88],"metadata":{"generator":"io_three","normals":135,"uvs":0,"vertices":104,"version":3,"faces":178,"type":"Geometry"}},"single_double_L_a":{"faces":[33,1,0,4,5,0,0,0,0,33,2,1,5,6,1,1,1,1,33,0,3,10,4,2,2,2,2,33,11,12,8,7,3,3,3,3,33,3,9,15,10,4,4,4,4,33,12,16,13,8,5,5,5,5,33,9,14,19,15,6,6,6,6,32,143,158,144,7,7,7,32,144,126,109,8,8,8,32,109,94,83,9,9,9,32,83,72,62,10,10,10,32,62,53,40,11,11,11,32,83,62,40,12,12,12,32,144,109,83,13,13,13,32,125,143,144,14,14,14,32,108,125,144,15,15,15,32,83,40,31,16,16,16,32,108,144,83,17,17,17,32,93,108,83,18,18,18,32,93,83,31,19,19,19,32,82,93,31,20,20,20,32,82,31,22,21,21,21,32,71,82,22,22,22,22,32,71,22,16,23,23,23,32,39,45,61,24,24,24,32,61,71,16,25,25,25,32,12,11,29,26,26,26,32,39,61,16,27,27,27,32,16,12,29,28,28,28,32,29,30,39,29,29,29,32,16,29,39,30,30,30,33,16,22,17,13,31,31,31,31,33,40,53,46,32,32,32,32,32,33,14,18,25,19,33,33,33,33,33,21,20,27,28,3,3,3,3,33,22,31,23,17,34,34,34,34,33,18,24,34,25,35,35,35,35,33,20,26,36,27,5,5,5,5,32,57,77,88,36,36,36,32,88,99,114,37,37,37,32,114,131,163,38,38,38,32,163,189,155,39,39,39,32,155,154,188,40,40,40,32,155,188,191,41,41,41,32,114,163,155,42,42,42,32,57,88,114,43,43,43,32,49,57,114,44,44,44,32,114,155,191,45,45,45,32,114,191,164,46,46,46,32,114,164,132,47,47,47,32,114,132,115,48,48,48,32,49,114,115,49,49,49,32,49,115,100,50,50,50,32,43,49,100,51,51,51,32,89,67,58,52,52,52,32,43,100,89,53,53,53,32,36,43,89,54,54,54,32,89,58,50,55,55,55,32,50,51,28,39,39,39,32,50,28,27,39,39,39,32,36,89,50,56,56,56,32,50,27,36,57,57,57,33,37,38,30,29,58,58,58,58,33,31,40,32,23,59,59,59,59,33,24,33,41,34,60,60,60,60,33,26,35,43,36,31,31,31,31,32,190,160,229,61,61,61,32,229,233,232,62,62,62,32,231,159,177,61,61,61,32,229,232,231,63,63,63,32,176,190,229,64,64,64,32,141,176,229,65,65,65,32,229,231,177,66,66,66,32,177,142,124,67,67,67,32,124,107,92,68,68,68,32,92,81,70,69,69,69,32,92,70,52,70,70,70,32,177,124,92,71,71,71,32,141,229,177,72,72,72,32,123,141,177,73,73,73,32,177,92,52,74,74,74,32,177,52,44,75,75,75,32,106,123,177,76,76,76,32,91,106,177,77,77,77,32,177,44,38,78,78,78,32,38,37,69,79,79,79,32,80,91,177,80,80,80,32,38,69,80,81,81,81,32,177,38,80,82,82,82,33,38,44,39,30,83,83,83,83,33,35,42,49,43,84,84,84,84,33,44,52,45,39,85,85,85,85,33,42,48,57,49,59,59,59,59,33,51,50,59,60,58,58,58,58,33,48,66,77,57,86,86,86,86,33,53,62,54,46,87,87,87,87,33,47,55,65,56,88,88,88,88,33,50,58,68,59,83,83,83,83,33,62,72,63,54,89,89,89,89,33,55,64,75,65,90,90,90,90,33,58,67,78,68,85,85,85,85,33,70,81,71,61,91,91,91,91,33,72,83,73,63,92,92,92,92,33,64,74,86,75,93,93,93,93,33,66,76,88,77,87,87,87,87,33,81,92,82,71,94,94,94,94,33,83,94,84,73,95,95,95,95,33,74,85,97,86,96,96,96,96,33,76,87,99,88,89,89,89,89,33,90,105,91,80,97,97,97,97,33,92,107,93,82,98,98,98,98,33,94,109,95,84,99,99,99,99,33,85,96,112,97,100,100,100,100,33,87,98,114,99,92,92,92,92,33,89,100,116,101,91,91,91,91,33,79,90,80,69,101,101,101,101,33,119,120,104,103,102,102,102,102,33,105,122,106,91,103,103,103,103,33,107,124,108,93,104,104,104,104,33,109,126,110,95,105,105,105,105,33,96,111,129,112,106,106,106,106,33,52,70,61,45,107,107,107,107,33,98,113,131,114,95,95,95,95,33,100,115,133,116,108,108,108,108,32,110,127,128,109,109,109,32,128,111,96,110,110,110,32,96,85,74,111,111,111,32,74,64,55,112,112,112,32,55,47,33,113,113,113,32,110,128,96,114,114,114,32,95,110,96,109,109,109,32,0,1,2,110,110,110,32,7,8,13,115,115,115,32,13,17,23,116,116,116,32,23,32,46,117,117,117,32,13,23,46,118,118,118,32,0,2,7,119,119,119,32,3,0,7,120,120,120,32,84,95,96,121,121,121,32,9,3,7,122,122,122,32,84,96,74,123,123,123,32,14,9,7,124,124,124,32,73,84,74,125,125,125,32,14,7,13,126,126,126,32,63,73,74,127,127,127,32,18,14,13,128,128,128,32,54,63,74,129,129,129,32,24,18,13,130,130,130,32,54,74,55,131,131,131,32,54,55,33,132,132,132,32,24,13,46,133,133,133,32,54,33,24,134,134,134,32,24,46,54,135,135,135,33,120,138,121,104,136,136,136,136,33,122,140,123,106,137,137,137,137,33,124,142,125,108,138,138,138,138,33,126,144,127,110,139,139,139,139,32,145,146,147,140,140,140,32,147,148,149,140,140,140,32,147,149,150,141,141,141,32,145,147,150,142,142,142,32,151,152,228,140,140,140,32,145,150,151,140,140,140,32,229,160,161,142,142,142,32,161,145,151,142,142,142,32,151,228,229,141,141,141,32,151,229,161,140,140,140,33,111,128,157,129,0,0,0,0,32,41,56,65,143,143,143,32,65,75,86,144,144,144,32,86,97,112,39,39,39,32,112,129,157,39,39,39,32,157,156,162,145,145,145,32,157,162,130,39,39,39,32,6,5,4,39,39,39,32,26,20,21,39,39,39,32,42,35,26,146,146,146,32,66,48,42,147,147,147,32,66,42,26,148,148,148,32,21,6,4,39,39,39,32,21,4,10,39,39,39,32,112,157,130,149,149,149,32,21,10,15,39,39,39,32,112,130,113,150,150,150,32,21,15,19,39,39,39,32,86,112,113,149,149,149,32,26,21,19,145,145,145,32,86,113,98,151,151,151,32,26,19,25,152,152,152,32,86,98,87,153,153,153,32,26,25,34,154,154,154,32,86,87,76,155,155,155,32,66,26,34,156,156,156,32,65,86,76,157,157,157,32,76,66,34,158,158,158,32,41,65,76,159,159,159,32,34,41,76,160,160,160,33,113,130,163,131,99,99,99,99,33,115,132,165,133,161,161,161,161,33,117,134,167,135,162,162,162,162,32,167,194,213,163,163,163,32,213,223,209,164,164,164,32,209,185,151,165,165,165,32,151,150,184,40,40,40,32,151,184,208,166,166,166,32,213,209,151,167,167,167,32,135,167,213,168,168,168,32,169,118,135,169,169,169,32,168,169,135,170,170,170,32,135,213,151,171,171,171,32,151,208,222,172,172,172,32,151,222,224,173,173,173,32,195,168,135,174,174,174,32,214,195,135,175,175,175,32,135,151,224,176,176,176,32,224,214,135,177,177,177,33,170,171,137,136,178,178,178,178,32,181,147,146,109,109,109,32,146,180,204,110,110,110,32,204,218,200,179,179,179,32,200,173,138,180,180,180,32,138,120,119,181,181,181,32,119,136,137,182,182,182,32,119,137,172,183,183,183,32,200,138,119,184,184,184,32,181,146,204,114,114,114,32,205,181,204,185,185,185,32,200,119,172,186,186,186,32,200,172,199,187,187,187,32,205,204,200,188,188,188,32,219,205,200,114,114,114,32,200,199,217,189,189,189,32,219,200,217,119,119,119,33,138,173,139,121,190,190,190,190,33,140,175,141,123,191,191,191,191,32,192,211,187,145,145,145,32,187,153,230,149,149,149,32,230,235,234,192,192,192,32,228,152,186,39,39,39,32,230,234,228,193,193,193,32,192,187,230,194,194,194,32,133,165,192,195,195,195,32,101,116,133,196,196,196,32,78,101,133,197,197,197,32,133,192,230,198,198,198,32,230,228,186,199,199,199,32,230,186,210,200,200,200,32,78,133,230,201,201,201,32,68,78,230,202,202,202,32,230,210,212,203,203,203,32,230,212,193,204,204,204,32,59,68,230,205,205,205,32,102,60,59,39,39,39,32,117,102,59,206,206,206,32,59,230,193,207,207,207,32,59,193,166,208,208,208,32,134,117,59,209,209,209,32,166,134,59,210,210,210,33,142,177,143,125,211,211,211,211,33,102,117,135,118,212,212,212,212,33,180,146,145,178,213,213,213,213,33,182,148,147,181,214,214,214,214,33,184,150,149,183,213,213,213,213,33,186,152,151,185,139,139,139,139,33,188,154,153,187,213,213,213,213,33,162,156,155,189,139,139,139,139,33,177,159,158,143,213,213,213,213,33,179,161,160,190,139,139,139,139,33,130,162,189,163,105,105,105,105,33,132,164,192,165,104,104,104,104,33,134,166,194,167,103,103,103,103,33,169,168,196,197,102,102,102,102,33,171,198,172,137,215,215,215,215,33,173,200,174,139,216,216,216,216,33,175,202,176,141,217,217,217,217,33,204,180,178,203,218,218,218,218,33,206,182,181,205,219,219,219,219,33,33,47,56,41,220,220,220,220,33,208,184,183,207,218,218,218,218,33,210,186,185,209,221,221,221,221,33,191,188,187,211,211,211,211,211,33,202,179,190,176,221,221,221,221,33,164,191,211,192,138,138,138,138,33,166,193,213,194,137,137,137,137,33,168,195,215,196,222,222,222,222,32,215,225,227,145,145,145,32,227,221,207,223,223,223,32,207,183,149,39,39,39,32,149,148,182,145,145,145,32,149,182,206,39,39,39,32,196,215,227,224,224,224,32,170,197,196,39,39,39,32,171,170,196,39,39,39,32,207,149,206,149,149,149,32,207,206,220,150,150,150,32,198,171,196,39,39,39,32,216,198,196,225,225,225,32,227,207,220,226,226,226,32,227,220,226,227,227,227,32,216,196,227,228,228,228,32,227,226,216,150,150,150,33,198,216,199,172,229,229,229,229,33,200,218,201,174,230,230,230,230,32,178,145,161,7,7,7,32,161,179,202,110,110,110,32,202,175,140,231,231,231,32,140,122,105,232,232,232,32,105,90,79,233,233,233,32,79,103,104,234,234,234,32,79,104,121,235,235,235,32,140,105,79,236,236,236,32,161,202,140,237,237,237,32,203,178,161,238,238,238,32,201,203,161,239,239,239,32,140,79,121,240,240,240,32,140,121,139,241,241,241,32,201,161,140,242,242,242,32,140,139,174,243,243,243,32,174,201,140,244,244,244,33,218,204,203,201,245,245,245,245,33,220,206,205,219,246,246,246,246,33,222,208,207,221,245,245,245,245,33,212,210,209,223,217,217,217,217,33,193,212,223,213,191,191,191,191,33,195,214,225,215,190,190,190,190,33,216,226,217,199,247,247,247,247,33,226,220,219,217,248,248,248,248,33,224,222,221,227,230,230,230,230,33,214,224,227,225,216,216,216,216,33,67,89,101,78,107,107,107,107,33,230,231,232,235,249,249,249,249,32,159,231,230,142,142,142,32,230,153,154,141,141,141,32,155,156,157,140,140,140,32,155,157,128,141,141,141,32,128,127,144,142,142,142,32,158,159,230,140,140,140,32,155,128,144,140,140,140,32,158,230,154,250,250,250,32,154,155,144,141,141,141,32,154,144,158,140,140,140,33,233,234,235,232,141,141,141,141,33,229,228,234,233,251,251,251,251,32,170,136,119,252,252,252,32,170,119,103,253,253,253,32,169,197,170,253,253,253,32,60,102,118,254,254,254,32,169,170,103,252,252,252,32,51,60,118,255,255,255,32,118,169,103,256,256,256,32,79,69,37,254,254,254,32,118,103,79,256,256,256,32,28,51,118,119,119,119,32,118,79,37,257,257,257,32,118,37,29,255,255,255,32,6,21,28,258,258,258,32,28,118,29,259,259,259,32,11,7,2,258,258,258,32,28,29,11,260,260,260,32,2,6,28,261,261,261,32,11,2,28,258,258,258],"metadata":{"generator":"io_three","uvs":0,"vertices":236,"version":3,"normals":262,"type":"Geometry","faces":361},"uvs":[],"vertices":[13.5,4,-19,0.25,4,-19,0.25,4,-19,25.072,4,-19.516,13.5,-4,-19,0.25,-4,-19,0.25,-4,-19,31.4168,4,-19,36.8779,4,-19.8609,36.5675,4,-21.3284,25.072,-4,-19.516,31.4168,0.999999,-19,36.8779,0.999999,-19.8609,48.8158,4,-22.9912,48.3715,4,-24.4239,36.5675,-4,-21.3284,48.8158,0.999999,-22.9912,61.1032,4,-27.3307,60.5549,4,-28.7269,48.3715,-4,-24.4239,36.8779,-4,-19.8609,31.4168,-4,-19,61.1032,0.999999,-27.3307,73.7534,4,-32.7173,73.1323,4,-34.0827,60.5549,-4,-28.7269,48.8158,-4,-22.9912,36.8779,-1,-19.8609,31.4168,-1,-19,61.5227,0.999999,-19,64.0275,0.999999,-19.8843,73.7534,0.999999,-32.7173,86.7543,4,-38.911,86.0904,4,-40.2561,73.1323,-4,-34.0827,61.1032,-4,-27.3307,48.8158,-1,-22.9912,61.5227,4,-19,64.0275,4,-19.8843,77.0661,0.999999,-25.4354,86.7543,0.999998,-38.911,86.0904,-4,-40.2561,73.7534,-4,-32.7173,61.1032,-1,-27.3307,77.0661,4,-25.4354,90.2952,0.999999,-31.7373,113.754,4,-52.4739,113.09,4,-53.819,86.7543,-4,-38.911,73.7534,-1,-32.7173,64.0275,-1,-19.8843,61.5227,-1,-19,90.2952,4,-31.7373,113.754,0.999998,-52.4739,127.753,4,-59.141,127.132,4,-60.5063,113.09,-4,-53.819,86.7543,-1,-38.911,77.0661,-1,-25.4354,64.0275,-4,-19.8843,61.5227,-4,-19,117.295,0.999998,-45.3002,127.753,0.999997,-59.141,142.103,4,-65.2472,141.555,4,-66.6434,127.132,-4,-60.5063,113.754,-4,-52.4739,90.2952,-1,-31.7373,77.0661,-4,-25.4354,107.266,4,-19,117.295,4,-45.3002,131.066,0.999998,-51.8591,142.103,0.999997,-65.2472,156.816,4,-70.4378,156.371,4,-71.8705,141.555,-4,-66.6434,127.753,-4,-59.141,113.754,-1,-52.4739,90.2952,-4,-31.7373,107.266,0.999999,-19,125.705,4,-28.2627,131.066,4,-51.8591,145.027,0.999997,-57.8009,156.816,0.999997,-70.4378,171.878,4,-74.3812,171.567,4,-75.8488,156.371,-4,-71.8705,142.103,-4,-65.2472,127.753,-1,-59.141,117.295,-1,-45.3002,125.705,0.999999,-28.2627,138.934,4,-34.5646,145.027,4,-57.8009,159.186,0.999997,-62.7969,171.878,0.999997,-74.3812,187.224,4,-76.7956,187.072,4,-78.2878,171.567,-4,-75.8488,156.816,-4,-70.4378,142.103,-1,-65.2472,131.066,-1,-51.8591,117.295,-4,-45.3002,107.266,-4,-19,125.087,0.999999,-19,129.246,0.999999,-21.089,138.934,0.999999,-34.5646,151.973,4,-40.1157,159.186,4,-62.7969,173.534,0.999997,-66.5545,187.224,0.999997,-76.7956,202.5,4,-77.5,202.5,4,-79,187.072,-4,-78.2878,171.878,-4,-74.3812,156.816,-1,-70.4378,145.027,-1,-57.8009,131.066,-4,-51.8591,125.705,-4,-28.2627,107.266,-1,-19,125.087,4,-19,129.246,4,-21.089,142.247,0.999999,-27.2827,151.973,0.999998,-40.1157,164.814,4,-44.6497,173.534,4,-66.5545,188.036,0.999997,-68.8369,202.5,0.999997,-77.5,215.75,4,-77.5,215.75,4,-79,202.5,-4,-79,187.224,-4,-76.7956,171.878,-1,-74.3812,159.186,-1,-62.7969,145.027,-4,-57.8009,138.934,-4,-34.5646,125.705,-1,-28.2627,128.429,4,-19,129.91,4,-19.7439,142.247,4,-27.2827,154.897,0.999999,-32.6693,164.814,0.999998,-44.6497,177.466,4,-47.9659,188.036,4,-68.8369,202.5,0.999997,-69.5,215.75,0.999997,-77.5,215.75,0.999998,-42.5,215.75,4,-42.5,215.75,4,-41,215.75,-4,-41,215.75,-4,-42.5,215.75,-1,-42.5,215.75,-1,-50.5,215.75,-4,-50.5,215.75,-4,-69.5,215.75,-1,-69.5,215.75,-1,-77.5,215.75,-4,-77.5,215.75,-4,-79,215.75,0.999997,-69.5,215.75,4,-69.5,215.75,4,-50.5,215.75,0.999998,-50.5,202.5,-4,-77.5,187.224,-1,-76.7956,173.534,-1,-66.5545,159.186,-4,-62.7969,151.973,-4,-40.1157,138.934,-1,-34.5646,129.246,-1,-21.089,125.087,-1,-19,128.429,-4,-19,129.91,-4,-19.7439,142.868,4,-25.9173,154.897,4,-32.6693,167.184,0.999998,-37.0088,177.466,0.999998,-47.9659,189.964,4,-49.9349,202.5,4,-69.5,202.5,0.999998,-42.5,202.5,0.999998,-50.5,202.5,4,-42.5,202.5,4,-41,202.5,-4,-41,202.5,-4,-42.5,202.5,-1,-42.5,202.5,-1,-50.5,202.5,-4,-50.5,202.5,-4,-69.5,202.5,-1,-69.5,202.5,-1,-77.5,202.5,4,-50.5,188.036,-1,-68.8369,173.534,-4,-66.5545,164.814,-4,-44.6497,151.973,-1,-40.1157,142.247,-1,-27.2827,129.246,-4,-21.089,125.087,-4,-19,142.868,-4,-25.9173,155.445,4,-31.2731,167.184,4,-37.0088,179.122,0.999998,-40.1391,189.964,0.999998,-49.9349,190.776,0.999998,-41.9762,190.776,4,-41.9762,190.928,4,-40.484,190.928,-4,-40.484,190.776,-4,-41.9762,190.776,-1,-41.9762,189.964,-1,-49.9349,189.964,-4,-49.9349,188.036,-4,-68.8369,177.466,-4,-47.9659,164.814,-1,-44.6497,154.897,-1,-32.6693,142.247,-4,-27.2827,155.445,-4,-31.2731,167.629,4,-35.5761,179.122,4,-40.1391,179.433,4,-38.6716,179.433,-4,-38.6716,179.122,-4,-40.1391,179.122,-1,-40.1391,177.466,-1,-47.9659,167.184,-1,-37.0088,154.897,-4,-32.6693,167.629,-4,-35.5761,167.184,-4,-37.0088,215.75,-4,-54,215.75,4,-54,215.75,-4,-66,215.75,4,-66,224.75,4,-67.5,224.75,4,-52.5,224.75,-4,-52.5,224.75,-4,-67.5],"normals":[0,0,-1,-1,0,0,-0.0445486,0,-0.999007,0.155718,0,0.987801,-0.155736,0,-0.987799,0.253644,0,0.967297,-0.253664,0,-0.967292,0,1,-4.47035e-8,0,1,-8.46131e-8,-8.14258e-9,1,-7.6445e-8,-5.92875e-9,1,-6.27385e-8,4.72257e-8,1,5.44613e-8,1.1424e-8,1,-1.80965e-8,1.31926e-9,1,-3.11904e-8,2.24156e-9,1,-4.09909e-8,-6.98805e-9,1,-7.05171e-8,-3.75876e-8,1,-1.27014e-7,-3.04131e-10,1,-4.47376e-8,1.89593e-10,1,-4.68631e-8,-1.01887e-9,1,-4.64883e-8,-6.56412e-7,1,-0.00000190795,-3.02055e-9,1,-5.13552e-8,7.1915e-9,1,-2.3228e-8,1.21781e-7,1,3.03618e-7,-5.63625e-8,1,-1.56149e-7,-2.77311e-9,1,-5.12607e-8,-8.77279e-15,1,-6.92356e-8,7.09665e-10,1,-4.05701e-8,-9.60341e-10,1,-4.17442e-8,5.0574e-8,1,7.5841e-8,2.69361e-10,1,-4.56591e-8,0.33301,0,0.942923,0.448878,0,0.893593,-0.333026,0,-0.942918,0.391771,0,0.920063,-0.391782,0,-0.920058,-8.89178e-8,-1,-1.33064e-7,-1.42174e-8,-1,5.6339e-9,-7.54731e-9,-1,1.40254e-9,0,-1,0,0,-1,4.47035e-8,2.21797e-9,-1,4.8377e-8,1.05009e-9,-1,4.25226e-8,9.03344e-9,-1,6.54495e-8,-5.58271e-8,-1,-7.86895e-8,1.46171e-9,-1,4.59577e-8,8.59902e-10,-1,5.76939e-8,3.65253e-9,-1,4.56714e-8,-2.9184e-10,-1,4.68948e-8,2.30254e-9,-1,4.9315e-8,-5.38174e-9,-1,2.74804e-8,1.03396e-9,-1,4.66897e-8,-1.18014e-7,-1,-1.90986e-7,-9.81745e-9,-1,1.57379e-8,2.87717e-8,-1,1.36409e-7,1.56263e-8,-1,7.96536e-8,-1.22058e-9,-1,4.43453e-8,3.30025e-11,-1,3.82077e-8,-0.332928,0,-0.942952,0.430095,0,0.902784,-0.430101,0,-0.902781,0,1,-6.81196e-8,5.29819e-9,1,-3.17891e-8,-6.62274e-9,1,-3.97364e-8,-3.70227e-9,1,-8.21353e-8,-0.0000155111,1,-0.0000984507,-7.49744e-9,1,-3.97364e-8,-6.75794e-9,1,-1.474e-7,-4.84757e-8,1,-1.85098e-7,-1.30259e-7,1,-3.46192e-7,9.6865e-8,1,1.57674e-7,8.16515e-9,1,-6.46645e-10,-9.21426e-10,1,-4.53579e-8,1.04077e-8,1,-3.21876e-8,-1.77051e-9,1,-4.9456e-8,7.29561e-9,1,-2.25177e-8,3.50621e-9,1,-4.26538e-8,-9.10971e-9,1,-6.43473e-8,6.73916e-10,1,-4.1367e-8,-4.49661e-14,1,-2.69599e-7,-3.55381e-8,1,-1.12435e-7,-4.28666e-9,1,-6.00129e-8,-3.23615e-9,1,-5.22795e-8,-0.391717,0,-0.920086,0.391771,0,0.920063,-0.430066,0,-0.902798,0.448878,0,0.893593,0.429975,0,0.902841,-0.42997,0,-0.902843,0.391555,0,0.920155,-0.391547,0,-0.920158,-0.430001,0,-0.902829,0.332696,0,0.943034,-0.332685,0,-0.943038,-0.3916,0,-0.920136,0.253277,0,0.967394,-0.253265,0,-0.967397,0.430066,0,0.902798,-0.332758,0,-0.943012,0.155412,0,0.98785,-0.155402,0,-0.987851,0.448882,0,0.893591,-0.448897,0,-0.893584,0.391717,0,0.920086,-0.253347,0,-0.967375,0.0460657,0,0.998938,-0.046112,0,-0.998936,-0.448878,0,-0.893593,-0.3916,0,-0.920136,0,1,0,0,1,0,-2.36216e-8,1,-1.50157e-7,1.39595e-8,1,-6.043e-9,-1.56654e-7,1,-3.64592e-7,0,1,0,1.09466e-7,1,4.17461e-7,2.21095e-8,1,7.66205e-9,-1.31505e-7,1,-3.14528e-7,1.40089e-9,1,-4.54348e-8,0,1,0,4.91841e-13,1,-4.62014e-7,0,1,0,-2.47888e-8,1,-1.5723e-7,4.15281e-8,1,1.61517e-7,-6.39491e-8,1,-2.43856e-7,1.46402e-8,1,-4.54072e-9,1.27928e-8,1,-3.9678e-9,1.46067e-8,1,-4.53034e-9,1.76371e-8,1,-5.47029e-9,1.55706e-8,1,-2.45392e-9,9.77349e-9,1,-2.15644e-8,1.38579e-8,1,-6.30428e-9,1.8977e-8,1,-8.63307e-9,5.40378e-7,1,0.00000114171,1.10852e-7,1,1.94058e-7,1.47634e-7,1,2.74235e-7,-0.430095,0,-0.902784,0.332928,0,0.942952,-0.155468,0,-0.987841,0,0,1,1,0,0,1,0,0,1,0,0,-3.31457e-7,-1,-6.24684e-7,-1.88262e-7,-1,-4.42427e-7,0,-1,0,-2.27477e-7,-1,-5.34224e-7,-3.86217e-7,-1,-7.33696e-7,-1.40089e-9,-1,4.54348e-8,0,-1,0,0,-1,0,5.13143e-8,-1,3.16914e-7,-3.52741e-8,-1,1.09406e-8,1.05839e-7,-1,3.00003e-7,2.75531e-7,-1,6.47057e-7,-3.11412e-8,-1,4.90784e-9,-5.40378e-7,-1,-0.00000114171,1.01484e-7,-1,3.03072e-7,-4.75679e-7,-1,-9.98808e-7,1.21751e-7,-1,2.93853e-7,4.85137e-7,-1,0.00000109554,-0.332758,0,-0.943012,0.430066,0,0.902798,3.44562e-8,-1,1.23883e-7,2.83957e-8,-1,1.80231e-7,0,-1,2.10966e-7,-8.82356e-9,-1,3.00895e-8,-4.0576e-9,-1,2.58022e-8,4.55856e-8,-1,1.52443e-7,4.13213e-15,-1,3.86096e-8,-9.5931e-9,-1,3.79701e-8,-2.76619e-9,-1,3.70459e-8,1.63881e-8,-1,1.03958e-7,2.85255e-8,-1,1.46867e-7,-2.02823e-9,-1,3.42362e-8,-2.30189e-9,-1,3.88556e-8,-9.04764e-9,-1,1.16105e-8,2.20644e-10,-1,5.55663e-8,0.448899,0,0.893583,5.12978e-8,1,1.95629e-7,2.21094e-8,1,7.66165e-9,-6.97694e-7,1,-0.00000150298,-1.82948e-13,1,-3.20504e-7,6.43057e-8,1,9.63576e-8,-1.73545e-8,1,-9.35235e-8,1.34174e-8,1,-1.61139e-7,6.86232e-8,1,1.07456e-7,9.77348e-9,1,-2.15645e-8,-2.30403e-8,1,-1.5742e-7,1.76371e-8,1,-5.47025e-9,-0.391772,0,-0.920062,0.253544,0,0.967324,5.29819e-9,-1,3.17891e-8,-6.62274e-9,-1,3.97364e-8,0,-1,0,9.69514e-8,-1,3.70197e-7,2.90708e-7,-1,6.83072e-7,-1.31181e-8,-1,9.04302e-9,-6.86111e-10,-1,5.22388e-8,1.04964e-8,-1,3.97364e-8,1.44225e-9,-1,3.19966e-8,-3.30489e-9,-1,2.96503e-8,2.1707e-8,-1,1.21233e-7,-4.48092e-8,-1,-4.22415e-8,3.12474e-8,-1,1.19215e-7,-4.39445e-8,-1,-1.03219e-7,-1.0117e-9,-1,4.94655e-8,3.65778e-9,-1,5.33944e-8,-3.11212e-8,-1,-8.81446e-8,-1.08152e-8,-1,-2.27034e-8,1.93989e-8,-1,1.31465e-7,-0.0457995,0,-0.998951,0.448883,0,0.893591,0,0,-1,0,0,1,0.4301,0,0.902781,-0.333009,0,-0.942923,0.155632,0,0.987815,-0.0446296,0,-0.999004,0.0445486,0,0.999007,-0.448878,0,-0.893593,0.0450295,0,0.998986,-0.430095,0,-0.902784,6.02103e-8,-1,3.81945e-7,1.65579e-7,-1,4.24542e-7,1.88293e-7,-1,5.31219e-7,-7.29038e-8,-1,-2.50245e-7,-3.73577e-8,-1,1.15867e-8,-8.90307e-8,-1,-1.82216e-7,0.391782,0,0.920058,-0.253644,0,-0.967298,9.71375e-9,1,1.11245e-9,1.99288e-8,1,3.85991e-9,-6.64634e-8,1,-1.77353e-7,-3.05372e-15,1,-2.85332e-8,-2.32503e-9,1,-5.29972e-8,9.70114e-9,1,-2.23863e-8,-1.1036e-9,1,-5.03617e-8,-2.15667e-9,1,-4.82755e-8,6.71821e-9,1,-2.22725e-8,-4.92195e-10,1,-4.52564e-8,-3.3872e-10,1,-4.5057e-8,-1.01903e-9,1,-4.96254e-8,-1.78189e-9,1,-4.62517e-8,-2.11519e-9,1,-4.61483e-8,-0.155718,0,-0.987802,0.155736,0,0.987799,0.333026,0,0.942918,0.253664,0,0.967292,-0.164399,0,-0.986394,1,0,0,-0.164399,0,0.986394,5.70813e-7,0,1,5.70813e-7,0,1,1.66789e-7,0,1,1.66789e-7,0,1,1.07023e-7,0,1,1.66789e-7,0,1,1.83594e-7,0,1,1.5088e-7,-3.63846e-7,1,1.26709e-7,0,1,1.83594e-7,0,1]},"double_turnout_L_b":{"uvs":[],"normals":[-5.70954e-15,-1,4.47035e-8,-1.68678e-15,-1,4.69663e-8,-1.06014e-10,-1,4.35162e-8,5.06085e-7,1,7.99196e-7,-7.73778e-15,1,-6.63412e-8,-1.09959e-8,1,-1.94107e-8,4.71079e-15,1,-4.03677e-8,1.39766e-8,1,5.05052e-8,-4.04011e-9,1,-5.40004e-8,-3.87055e-9,1,-5.97396e-8,-2.45412e-8,1,-2.06081e-7,0,1,0,1.2772e-7,0,-1,-7.78152e-8,-0.00000111262,1,-0.111152,0,-0.993803,0,-1,0,-0.405239,-6.20109e-8,-0.914211,-8.04385e-8,0,1,0,1,0,-0.164399,0,-0.986394,-7.78152e-8,0.00000111262,1,5.70954e-15,1,-4.47035e-8,1.68678e-15,1,-4.69663e-8,1.06014e-10,1,-4.35162e-8,-8.86652e-8,-7.94729e-7,-1,-0.164399,0,0.986394,1,0,0,4.36474e-15,-1,4.47035e-8,0,-1,0,1,0,0,1,0,0,1,0,0,1.48026e-7,0,1,-0.359892,0,-0.932994,-8.86652e-8,7.94729e-7,-1,-4.36474e-15,1,-4.47035e-8,-0.65317,0,-0.757211,-0.653173,-0.00000168497,-0.757209,-0.653173,-4.51332e-8,-0.757209,-0.65317,0,-0.757211,-0.653174,0.00000168497,-0.757208,-0.653173,0,-0.757209,-0.615231,0,-0.788347,-0.615227,0,-0.78835,-0.615227,0,-0.78835,-0.615227,0,-0.78835,-0.615227,0,-0.78835,-0.689541,0,-0.724247,-0.724246,0,-0.689542,-0.724248,0.00000109599,-0.68954,-0.724246,-0.000001096,-0.689542,-0.724263,0,-0.689524,-0.724247,0,-0.689541,-0.724263,0,-0.689524,-0.724245,0,-0.689542,-0.724245,0,-0.689542,-0.757204,0,-0.653179,-5.9585e-15,-1,5.07397e-8,1.00876e-10,-1,5.79415e-8,4.3456e-8,-1,1.2837e-7,-2.42607e-15,-1,4.85088e-8,5.31584e-11,-1,3.05335e-8,-5.96262e-11,-1,4.69054e-8,-3.07074e-10,-1,4.30661e-8,1.17433e-7,0,-1,1.32455e-8,1,-7.94729e-8,-1.4666e-14,1,-1.13718e-7,8.25008e-15,1,-6.8914e-8,-1.95216e-9,1,-1.70659e-7,-5.1136e-10,1,-4.47034e-8,-1.5829e-8,1,9.49742e-8,-5.08434e-9,1,-2.922e-8,-0.122409,0,-0.99248,-0.122409,0,-0.99248,-0.122409,0,-0.99248,-0.122409,0,-0.99248,-0.313679,0,-0.949529,-8.3355e-8,-0.00000445048,1,0,-1,0,-0.266711,0,-0.963777,-0.266711,-1.54052e-7,-0.963776,-0.266711,0,-0.963776,-0.266711,1.54052e-7,-0.963776,-0.266711,0,-0.963776,-0.449608,0,-0.893226,1.32455e-8,-1,7.94729e-8,-1.90283e-14,-1,1.58946e-7,5.1136e-10,-1,4.47034e-8,-1.95942e-9,-1,6.66425e-8,-2.98627e-10,-1,4.74459e-8,-8.33587e-8,0,1,0,1,0,1.17433e-7,0,-1,5.16731e-15,1,-1.03319e-7,-1.06576e-9,1,-5.236e-8,-1.56082e-7,1,-3.52119e-7,-1.05584e-9,1,-5.18729e-8,8.0088e-10,1,-5.58385e-8,-2.10326e-10,1,-3.52526e-8,-8.3355e-8,0.00000445048,1,-0.0735638,0,-0.99729,1.94707e-7,-1,3.42804e-7,-5.49449e-15,-1,4.70833e-8,-4.98303e-9,-1,-1.80065e-8,9.3918e-10,-1,5.27295e-8,-1.04549e-8,-1,7.11775e-8,1.07989e-9,-1,6.91652e-8,4.79774e-9,-1,1.08236e-8,9.3457e-10,-1,5.98575e-8,-1.13958e-7,0,-1,-1.0326e-7,0,-1,-0.170958,0,-0.985278,-8.16452e-8,-0.00000333786,-1,-8.16452e-8,0.00000333786,-1,-0.492896,0,-0.870088,-0.492896,-4.41377e-7,-0.870088,-0.492896,0,-0.870088,-0.492894,4.41357e-7,-0.870089,-0.492895,0,-0.870089,7.35902e-14,-1,0.00000157735,5.92024e-15,-1,3.88739e-8,-2.82837e-9,-1,4.33344e-8,-2.51679e-7,-1,-2.91774e-7,-7.00034e-10,-1,2.91913e-8,0,1,0,-2.25468e-15,1,-4.83272e-8,1.6909e-10,1,-3.86069e-8,-3.32512e-7,1,-4.72156e-7,-3.44631e-10,1,-4.60797e-8,-0.2191,0,-0.975703,1.52293e-7,0,1,0.615233,0,0.788346,0.575808,4.87319e-8,0.817585,0.575788,0,0.817599,0.575809,0.00000233913,0.817584,0.575808,-0.00000233913,0.817585,0.575808,0,0.817585,0.653162,0,0.757218,0.653173,0,0.757209,0.653173,0,0.757209,0.653162,0,0.757218,0.653173,0,0.757209,0.534998,0,0.844853,0.4929,0,0.870086,0.492899,0,0.870087,0.492899,-4.41407e-7,0.870086,0.4929,4.4141e-7,0.870086,0.492899,0,0.870087,0.4929,0,0.870086,0.449612,0,0.893224,0.405238,0,0.914211,0.40524,0,0.91421,0.40524,0,0.91421,0.40524,0,0.91421,0.40524,0,0.91421,-0.534995,0,-0.844855,-0.534993,0,-0.844857,-0.534995,0,-0.844855,-0.534993,0,-0.844857,-0.534993,0,-0.844857],"metadata":{"generator":"io_three","normals":160,"uvs":0,"vertices":130,"version":3,"faces":210,"type":"Geometry"},"vertices":[269.75,-0.999999,17.5,180.147,-0.999999,17.5,187.146,-0.999999,12.0382,190.088,-1,9.5,269.75,-1,9.50001,269.75,-4,19,269.75,-4,17.5,269.75,-4,9.50001,269.75,-4,6.50001,180.147,-4,17.5,190.088,-4,9.5,178.225,-4,19,260.75,-4,8.00001,198.11,-4,2.58069,269.75,4,19,269.75,4,6.50001,269.75,4,9.50001,269.75,1,9.50001,269.75,1,17.5,269.75,4,17.5,178.225,4,19,210.593,-4,-9.5,269.75,-4,-9.50001,269.75,-4,-6.50001,260.75,-4,-8.00001,208.596,-4,-7.40343,260.75,4,8.00001,180.147,4,17.5,190.088,4,9.5,198.11,4,2.58069,190.088,1,9.5,187.146,1,12.0382,180.147,1,17.5,210.593,-1,-9.5,269.75,-1,-9.50001,269.75,-4,-19,269.75,-1,-17.5,269.75,-4,-17.5,260.75,4,-8.00001,269.75,4,-6.50001,269.75,4,-9.50001,210.593,4,-9.5,208.596,4,-7.40343,218.209,-1,-17.5,218.209,-4,-17.5,218.581,-4,-17.8901,219.538,-4,-19,269.75,4,-19,269.75,4,-17.5,269.75,0.999999,-17.5,269.75,1,-9.50001,210.593,1,-9.5,219.538,4,-19,218.581,4,-17.8901,218.209,4,-17.5,218.209,0.999999,-17.5,107.232,-0.999999,17.5,26.0211,-0.999999,17.5,34.4812,-0.999999,16.4565,45.8457,-0.999999,14.4846,57.0998,-0.999999,11.9575,65.9801,-1,9.5,123.186,-1,9.5,121.149,-1,10.6538,109.882,-0.999999,16.3253,107.232,-4,17.5,26.0211,-4,17.5,23.0336,-4,17.8685,68.2164,-4,8.88113,65.9801,-4,9.49998,123.186,-4,9.49999,103.848,-4,19,8.99996,-4,19,11.5305,-4,18.717,23.0336,4,17.8685,26.0211,4,17.5,26.0211,1,17.5,34.4812,1,16.4565,45.8457,1,14.4846,57.0998,1,11.9575,65.9801,1,9.5,65.9801,4,9.49998,68.2164,4,8.88113,79.1686,-4,5.26305,132.124,-4,4.43623,89.93,-4,1.11192,11.5305,4,18.717,107.232,4,17.5,8.99996,4,19,103.848,4,19,107.232,1,17.5,123.186,1,9.5,109.882,1,16.3253,121.149,1,10.6538,123.186,4,9.49999,132.124,4,4.43623,89.93,4,1.11192,79.1686,4,5.26305,100.475,-4,-3.56224,112.105,-4,-9.49999,152.987,-4,-9.49999,142.782,-4,-2.31235,110.778,-4,-8.74818,142.782,4,-2.31235,152.987,4,-9.49999,112.105,4,-9.49999,110.778,4,-8.74818,100.475,4,-3.56224,120.814,-1,-14.4334,112.105,-1,-9.5,152.987,-1,-9.5,152.987,1,-9.5,112.105,1,-9.5,120.814,0.999999,-14.4334,128.025,-4,-19,125.656,-4,-17.5,125.656,-1,-17.5,163.229,-1,-17.5,163.039,-1,-17.3363,153.095,-1,-9.57558,163.229,0.999999,-17.5,125.656,0.999999,-17.5,153.095,1,-9.57558,163.039,0.999999,-17.3363,125.656,4,-17.5,128.025,4,-19,164.968,-4,-19,163.229,-4,-17.5,163.229,4,-17.5,164.968,4,-19],"faces":[32,4,0,1,0,0,0,32,2,3,4,1,1,1,32,1,2,4,2,2,2,32,94,95,103,3,3,3,32,103,104,105,4,4,4,32,103,105,106,5,5,5,32,81,94,103,6,6,6,32,82,81,103,7,7,7,32,103,106,107,8,8,8,32,103,107,96,9,9,9,32,97,82,103,10,10,10,32,103,96,97,11,11,11,33,1,0,6,9,12,12,12,12,33,10,7,4,3,13,13,13,13,33,88,86,73,72,14,14,14,14,33,5,11,9,6,15,15,15,15,33,85,96,107,98,16,16,16,16,33,89,88,72,71,17,17,17,17,33,14,19,27,20,18,18,18,18,33,12,26,15,8,19,19,19,19,33,30,17,16,28,20,20,20,20,32,32,18,17,21,21,21,32,17,30,31,22,22,22,32,17,31,32,23,23,23,33,27,19,18,32,12,12,12,12,33,33,34,22,21,24,24,24,24,33,23,39,38,24,25,25,25,25,33,12,24,38,26,26,26,26,26,33,36,34,33,43,27,27,27,27,32,46,35,37,28,28,28,32,37,44,45,15,15,15,32,37,45,46,15,15,15,32,19,14,5,29,29,29,32,5,6,0,30,30,30,32,4,7,8,26,26,26,32,4,8,15,30,30,30,32,15,16,17,29,29,29,32,18,19,5,26,26,26,32,4,15,17,26,26,26,32,18,5,0,31,31,31,32,0,4,17,30,30,30,32,0,17,18,26,26,26,33,37,36,43,44,32,32,32,32,33,97,96,85,83,33,33,33,33,33,41,40,50,51,34,34,34,34,32,48,47,52,18,18,18,32,53,54,48,11,11,11,32,52,53,48,11,11,11,33,48,54,55,49,32,32,32,32,33,49,55,51,50,35,35,35,35,32,2,31,30,36,36,36,32,30,28,29,37,37,37,32,29,13,10,38,38,38,32,3,2,30,39,39,39,32,29,10,3,40,40,40,32,30,29,3,41,41,41,32,31,2,1,42,42,42,32,1,9,11,43,43,43,32,11,20,27,44,44,44,32,32,31,1,42,42,42,32,11,27,32,45,45,45,32,1,11,32,46,46,46,33,29,42,25,13,47,47,47,47,32,25,42,41,48,48,48,32,25,41,51,49,49,49,32,33,21,25,50,50,50,32,45,44,43,51,51,51,32,33,25,51,52,52,52,32,53,45,43,53,53,53,32,43,33,51,54,54,54,32,55,54,53,51,51,51,32,43,51,55,55,55,55,32,55,53,43,53,53,53,33,53,52,46,45,56,56,56,56,32,64,56,57,57,57,57,32,64,57,58,58,58,58,32,62,63,64,59,59,59,32,60,61,62,60,60,60,32,64,58,59,61,61,61,32,59,60,62,62,62,62,32,59,62,64,63,63,63,33,57,56,65,66,64,64,64,64,32,38,39,40,65,65,65,32,40,41,42,66,66,66,32,29,28,16,67,67,67,32,38,40,42,68,68,68,32,16,15,26,18,18,18,32,26,38,42,69,69,69,32,29,16,26,70,70,70,32,26,42,29,71,71,71,32,66,67,74,72,72,72,32,74,75,76,73,73,73,32,76,77,58,74,74,74,32,57,66,74,75,75,75,32,76,58,57,74,74,74,32,74,76,57,75,75,75,33,82,97,83,68,76,76,76,76,33,69,70,62,61,77,77,77,77,32,65,71,72,15,15,15,32,72,73,67,15,15,15,32,67,66,65,78,78,78,32,72,67,65,15,15,15,32,61,60,79,79,79,79,32,80,81,82,80,80,80,32,61,79,80,81,81,81,32,68,69,61,82,82,82,32,80,82,68,83,83,83,32,80,68,61,83,83,83,33,107,106,102,98,84,84,84,84,32,25,21,22,15,15,15,32,22,23,24,15,15,15,32,12,8,7,85,85,85,32,25,22,24,28,28,28,32,12,7,10,86,86,86,32,25,24,12,87,87,87,32,12,10,13,88,88,88,32,12,13,25,89,89,89,33,5,14,20,11,90,90,90,90,32,35,47,48,26,26,26,32,35,48,49,29,29,29,32,36,37,35,26,26,26,32,23,22,34,30,30,30,32,36,35,49,30,30,30,32,39,23,34,30,30,30,32,34,36,49,30,30,30,32,50,40,39,26,26,26,32,34,49,50,26,26,26,32,50,39,34,29,29,29,32,89,87,75,91,91,91,32,74,86,88,11,11,11,32,89,75,74,18,18,18,32,74,88,89,11,11,11,33,75,87,90,76,92,92,92,92,32,93,91,80,93,93,93,32,93,80,79,94,94,94,32,90,92,93,95,95,95,32,77,76,90,11,11,11,32,93,79,78,96,96,96,32,78,77,90,97,97,97,32,78,90,93,98,98,98,33,80,91,94,81,99,99,99,99,33,86,74,67,73,100,100,100,100,32,102,99,100,15,15,15,32,100,101,84,101,101,101,32,84,70,69,102,102,102,32,84,69,68,103,103,103,32,102,100,84,104,104,104,32,98,102,84,105,105,105,32,84,68,83,106,106,106,32,85,98,84,107,107,107,32,84,83,85,108,108,108,33,46,52,47,35,109,109,109,109,33,114,125,129,126,110,110,110,110,33,77,78,59,58,111,111,111,111,33,109,110,100,99,112,112,112,112,33,105,104,111,112,113,113,113,113,32,99,102,106,114,114,114,32,106,105,112,115,115,115,32,112,113,108,116,116,116,32,109,99,106,117,117,117,32,112,108,109,116,116,116,32,106,112,109,118,118,118,32,119,110,109,119,119,119,32,108,116,117,120,120,120,32,119,109,108,121,121,121,32,117,118,119,122,122,122,32,108,117,119,123,123,123,32,123,120,121,124,124,124,32,113,112,111,125,125,125,32,123,121,113,126,126,126,32,111,122,123,127,127,127,32,113,111,123,128,128,128,33,78,79,60,59,129,129,129,129,33,127,115,114,126,15,15,15,15,33,117,116,115,127,130,130,130,130,33,128,124,121,120,130,130,130,130,33,129,125,124,128,11,11,11,11,33,119,118,123,122,131,131,131,131,32,103,101,100,132,132,132,32,110,119,122,133,133,133,32,103,100,110,134,134,134,32,111,104,103,135,135,135,32,110,122,111,133,133,133,32,110,111,103,136,136,136,32,123,118,117,137,137,137,32,117,127,126,138,138,138,32,126,129,128,139,139,139,32,120,123,117,140,140,140,32,126,128,120,138,138,138,32,117,126,120,141,141,141,33,103,95,84,101,142,142,142,142,32,84,95,94,143,143,143,32,91,93,63,144,144,144,32,84,94,91,145,145,145,32,62,70,84,146,146,146,32,91,63,62,147,147,147,32,91,62,84,148,148,148,33,93,92,64,63,149,149,149,149,32,64,92,90,150,150,150,32,90,87,89,151,151,151,32,89,71,65,152,152,152,32,56,64,90,150,150,150,32,89,65,56,153,153,153,32,90,89,56,154,154,154,32,116,108,113,155,155,155,32,121,124,125,156,156,156,32,116,113,121,157,157,157,32,114,115,116,158,158,158,32,121,125,114,159,159,159,32,121,114,116,159,159,159]},"double_turnout_L_2":{"uvs":[],"normals":[-4.25988e-15,-1,4.47035e-8,-4.3323e-10,-1,3.16964e-8,0,-1,0,3.0038e-11,-1,4.83306e-8,1.90432e-10,-1,5.72133e-8,-0.164399,0,0.986394,9.52919e-8,0,-1,-5.84811e-8,-0.0000038147,1,1,0,0,1,0,0,1,0,0,1,0,0,0,-1,0,0,-1,0,0,1,0,0,1,0,0,1,0,1.32455e-8,-1,7.94729e-8,0,-1,0,-1.85908e-14,-1,1.58947e-7,-4.39362e-10,-1,4.47034e-8,-3.98686e-9,-1,7.22717e-8,-6.9924e-10,-1,7.19204e-8,1.34278e-9,-1,3.48102e-9,-4.95769e-10,-1,5.09924e-8,-5.84811e-8,0.0000038147,1,4.25988e-15,1,-4.47035e-8,0,1,-1.8082e-7,4.83952e-10,1,-3.54217e-8,2.03976e-9,1,1.65378e-8,2.83479e-10,1,-4.65238e-8,-9.31908e-8,-0.00000190735,-1,0,1,0,0,1,0,-3.05594e-9,1,-9.94271e-8,-6.48449e-10,1,-5.96046e-8,9.91537e-10,1,-1.01985e-7,0,1,0,-0.1644,0,-0.986394,5.33968e-15,-1,4.47035e-8,3.00706e-15,-1,5.64686e-8,2.52085e-9,-1,4.44996e-9,-1.41548e-7,0,1,1.19447e-7,0,1,-9.31908e-8,0.00000190735,-1,1.19447e-7,0,1,-5.33968e-15,1,-4.47035e-8,-3.00706e-15,1,-5.64686e-8,-2.52085e-9,1,-4.44996e-9,-0.0249712,0,-0.999688,-0.0735636,0,-0.99729,-0.122394,0,-0.992482,-0.122412,0,-0.992479,-0.122394,0,-0.992482,-0.122394,0,-0.992482,-0.122394,0,-0.992482,-0.170961,0,-0.985278,-0.219099,0,-0.975703,-0.26671,0,-0.963777,-0.266712,-0.00000192677,-0.963776,-0.266712,0,-0.963776,-0.26671,0,-0.963777,-0.266713,0.00000192674,-0.963776,-0.266712,0,-0.963776,-0.313681,-2.30525e-7,-0.949528,-0.359895,-2.30525e-7,-0.932993,-0.40524,0,-0.91421,-0.449609,0,-0.893225,-0.449612,0,-0.893224,-0.44965,0.00000226379,-0.893205,-0.449609,-0.00000226397,-0.893225,-0.449612,0,-0.893224,-0.449625,0,-0.893218,-0.492896,0,-0.870089,-0.492898,0,-0.870087,-0.492898,0,-0.870087,-0.492896,0,-0.870089,-0.492898,0,-0.870087,-1.52469e-7,0,-1],"metadata":{"generator":"io_three","normals":79,"uvs":0,"vertices":68,"version":3,"faces":110,"type":"Geometry"},"vertices":[269.75,-0.999997,77.5,29.5597,-0.999997,77.5,43.2852,-0.999997,75.8071,57.5514,-0.999997,73.3317,71.6789,-0.999997,70.1593,74.0613,-0.999997,69.5,269.75,-0.999997,69.5,269.75,-4,79,269.75,-4,77.5,269.75,-4,69.5,269.75,-4,66.5,29.5597,-4,77.5,74.0613,-4,69.5,0.250891,-4,79,14.4746,-4,78.6447,28.9147,-4,77.5795,260.75,-4,68,85.6338,-4,66.2975,99.3824,-4,61.7556,269.75,4,79,269.75,4,66.5,269.75,4,69.5,269.75,1,69.5,269.75,1,77.5,269.75,4,77.5,0.250891,4,79,126.48,-4,50.5,269.75,-4,50.5,269.75,-4,53.5,260.75,-4,52,112.892,-4,56.5445,126.129,-4,50.6769,260.75,4,68,29.5597,4,77.5,28.9147,4,77.5795,14.4746,4,78.6447,74.0613,4,69.5,99.3824,4,61.7556,85.6338,4,66.2975,74.0613,1,69.5,71.6789,1,70.1593,57.5514,1,73.3317,43.2852,1,75.8071,29.5597,1,77.5,126.48,-0.999998,50.5,269.75,-0.999998,50.5,269.75,-4,41,269.75,-0.999998,42.5,269.75,-4,42.5,260.75,4,52,269.75,4,53.5,269.75,4,50.5,126.48,4,50.5,126.129,4,50.6769,112.892,4,56.5445,139.062,-0.999998,44.1668,142.004,-0.999998,42.5,142.004,-4,42.5,144.652,-4,41,269.75,4,41,269.75,4,42.5,269.75,1,42.5,269.75,1,50.5,126.48,1,50.5,144.652,4,41,142.004,4,42.5,142.004,1,42.5,139.062,1,44.1668],"faces":[32,6,0,1,0,0,0,32,6,1,2,1,1,1,32,4,5,6,2,2,2,32,6,2,3,3,3,3,32,3,4,6,4,4,4,33,28,50,49,29,5,5,5,5,33,1,0,8,11,6,6,6,6,33,12,9,6,5,7,7,7,7,32,24,19,7,8,8,8,32,7,8,0,9,9,9,32,6,9,10,10,10,10,32,6,10,20,9,9,9,32,20,21,22,8,8,8,32,23,24,7,10,10,10,32,6,20,22,10,10,10,32,23,7,0,11,11,11,32,0,6,22,9,9,9,32,0,22,23,10,10,10,32,8,7,13,12,12,12,32,8,13,14,2,2,2,32,15,11,8,13,13,13,32,14,15,8,2,2,2,33,29,49,32,16,10,10,10,10,32,25,19,24,14,14,14,32,24,33,34,15,15,15,32,35,25,24,16,16,16,32,24,34,35,16,16,16,32,31,26,27,2,2,2,32,27,28,29,2,2,2,32,16,10,9,17,17,17,32,31,27,29,18,18,18,32,16,9,12,19,19,19,32,31,29,16,20,20,20,32,30,31,16,21,21,21,32,16,12,17,22,22,22,32,18,30,16,23,23,23,32,16,17,18,24,24,24,33,39,22,21,36,25,25,25,25,32,43,23,22,26,26,26,32,22,39,40,27,27,27,32,22,40,41,28,28,28,32,42,43,22,29,29,29,32,22,41,42,30,30,30,33,33,24,23,43,6,6,6,6,33,44,45,27,26,31,31,31,31,32,49,50,51,32,32,32,32,51,52,53,16,16,16,32,51,53,54,16,16,16,32,49,51,54,33,33,33,32,49,54,37,34,34,34,32,21,20,32,15,15,15,32,32,49,37,35,35,35,32,38,36,21,16,16,16,32,32,37,38,36,36,36,32,32,38,21,37,37,37,32,46,59,60,10,10,10,32,46,60,61,8,8,8,32,47,48,46,10,10,10,32,28,27,45,9,9,9,32,47,46,61,9,9,9,32,50,28,45,9,9,9,32,45,47,61,9,9,9,32,62,51,50,10,10,10,32,45,61,62,10,10,10,32,62,50,45,8,8,8,33,16,32,20,10,38,38,38,38,32,56,47,45,39,39,39,32,45,44,55,40,40,40,32,45,55,56,41,41,41,33,46,48,57,58,2,2,2,2,33,7,19,25,13,42,42,42,42,33,48,47,56,57,43,43,43,43,33,52,51,62,63,44,44,44,44,33,59,64,65,60,16,16,16,16,33,60,65,66,61,45,45,45,45,32,62,61,66,46,46,46,32,67,63,62,47,47,47,32,66,67,62,48,48,48,33,14,13,25,35,49,49,49,49,33,35,34,15,14,50,50,50,50,32,15,34,33,51,51,51,32,43,42,2,52,52,52,32,15,33,43,53,53,53,32,1,11,15,54,54,54,32,43,2,1,52,52,52,32,43,1,15,55,55,55,33,42,41,3,2,56,56,56,56,33,41,40,4,3,57,57,57,57,32,4,40,39,58,58,58,32,39,36,38,59,59,59,32,38,17,12,60,60,60,32,5,4,39,61,61,61,32,38,12,5,62,62,62,32,39,38,5,63,63,63,33,38,37,18,17,64,64,64,64,33,37,54,30,18,65,65,65,65,33,54,53,31,30,66,66,66,66,32,31,53,52,67,67,67,32,63,67,55,68,68,68,32,31,52,63,69,69,69,32,44,26,31,70,70,70,32,63,55,44,71,71,71,32,63,44,31,72,72,72,32,55,67,66,73,73,73,32,66,65,64,74,74,74,32,64,58,57,75,75,75,32,56,55,66,76,76,76,32,64,57,56,77,77,77,32,66,64,56,75,75,75,33,58,64,59,46,78,78,78,78]},"double_turnout_L_1":{"uvs":[],"normals":[0.893225,0,0.44961,6.38891e-7,1,2.11152e-7,9.56354e-9,1,-3.15234e-8,6.67655e-7,1,8.24242e-8,-6.62864e-7,1,-1.14938e-7,0,1,-3.3521e-8,1.6535e-9,1,-3.36541e-8,7.25866e-9,1,-4.89374e-8,1.71921e-7,1,1.77269e-8,1.55293e-8,1,-2.90521e-8,1.82996e-8,1,-2.73917e-8,8.04951e-8,1,2.10451e-8,0,1,-4.41289e-8,-2.1189e-8,1,-5.85232e-8,3.47295e-8,1,-1.64136e-8,3.24966e-9,1,-6.61411e-8,5.99957e-7,1,4.06469e-8,-1.27375e-7,1,-1.36158e-7,1.58725e-8,1,-2.93069e-8,7.26633e-9,1,-4.89361e-8,-5.85919e-7,1,-1.35261e-7,1.70223e-8,1,-2.83998e-8,1.70222e-8,1,-2.83998e-8,1.60907e-8,1,-6.42363e-8,8.04536e-9,1,-3.21181e-8,1.55286e-8,1,-2.90524e-8,1.41563e-8,1,-2.99316e-8,6.67901e-9,1,-3.26535e-8,2.83132e-8,1,-5.98646e-8,-0.00000281061,1,-0.00000104944,-5.48171e-7,1,-2.46933e-7,0.870088,0,0.492897,0,-1,6.73908e-8,6.97381e-7,-1,8.44629e-8,-6.70963e-7,-1,-4.95738e-8,-8.00561e-9,-1,3.19545e-8,-6.48313e-7,-1,-1.79489e-7,-1.40697e-8,-1,2.97867e-8,-1.69364e-8,-1,2.8255e-8,-1.96251e-8,-1,2.64582e-8,0,-1,4.83904e-8,-2.12046e-8,-1,2.58377e-8,-1.83232e-8,-1,2.74237e-8,1.39287e-7,-1,1.02319e-7,1.56571e-7,-1,7.31789e-8,-2.14763e-7,-1,3.92616e-8,-3.24559e-9,-1,3.2951e-8,-2.10052e-8,-1,2.55946e-8,-2.22474e-8,-1,2.48172e-8,-3.24559e-9,-1,3.2951e-8,-1.81652e-9,-1,3.32799e-8,-1.83375e-8,-1,2.74144e-8,-1.44119e-8,-1,3.00528e-8,0.00000293385,-1,6.25615e-7,-6.11744e-7,-1,-6.95219e-8,-1.56082e-8,-1,2.92008e-8,-9.61151e-9,-1,3.16847e-8,-9.61152e-9,-1,3.16847e-8,-1.69931e-8,-1,2.8675e-8,5.47323e-7,-1,2.82084e-7,-0.00000278482,-1,-0.00000110888,0.914211,0,0.405239,0.932992,0,0.359898,0.949529,0,0.313679,0.963776,0,0.266712,0.975702,0,0.219104,0.985278,0,0.170961,0.992479,0,0.122411,0.99729,0,0.0735636,0.999688,0,0.0249726,0,0,-1,0,0,-1,0,0,-1,-0.00000190735,-0.00000572205,-1,-0.00000190735,0.00000572205,-1,-0.00000138716,0,-1,-0.999688,0,-0.0249732,-0.99729,0,-0.0735646,-0.992479,0,-0.122412,-0.985278,0,-0.170962,-0.975702,0,-0.219101,-0.963776,0,-0.266713,-0.949529,0,-0.313681,-0.932991,0,-0.359899,-0.914211,0,-0.405238,-0.893225,0,-0.44961,-0.870087,0,-0.492899,-0.844854,0,-0.534997,-0.817583,0,-0.57581,-0.788347,0,-0.615231,-0.757209,0,-0.653172,0.757209,0,0.653173,0.757209,0,0.653173,0.788347,0,0.61523,0.817583,0,0.575811,0.844854,0,0.534998,-0.985278,0,-0.170962,0,-1,4.5242e-8,1.51335e-10,-1,4.50692e-8,-2.60547e-8,-1,2.1654e-8,1.19482e-7,-1,1.24635e-7,-1.6624e-7,-1,-4.66206e-8,-1.58554e-8,-1,3.82312e-8,-1.20147e-8,-1,3.96058e-8,-8.07513e-9,-1,4.05927e-8,-1.72245e-7,-1,2.87824e-8,8.0336e-14,-1,4.21192e-8,-2.12555e-9,-1,4.32678e-8,3.53342e-8,-1,4.92273e-8,-1.39648e-8,-1,3.90143e-8,-1.9173e-8,-1,3.19883e-8,3.22319e-9,-1,4.5676e-8,3.22511e-9,-1,4.56806e-8,2.19702e-9,-1,4.4797e-8,-2.1452e-9,-1,4.36678e-8,1.56969e-8,-1,4.38085e-8,4.09671e-9,-1,4.45054e-8,7.16907e-9,-1,4.48166e-8,8.4923e-9,-1,4.39047e-8,5.5523e-9,-1,4.4134e-8,-2.65995e-8,-1,3.38175e-8,6.0416e-8,-1,6.85061e-8,4.20526e-9,-1,4.45385e-8,4.02749e-9,-1,4.52482e-8,-1.69152e-8,-1,3.57576e-8,2.34057e-8,-1,5.69025e-8,5.34996e-9,-1,4.65634e-8,9.65312e-9,-1,4.93136e-8,0.999688,0,0.0249872,0,-1,0,-1.64208e-8,-1,3.46999e-8,5.02196e-7,-1,4.78135e-7,-2.02751e-8,-1,2.73408e-8,-1.74998e-8,-1,2.91953e-8,-6.48568e-7,-1,-2.50267e-7,-1.1467e-8,-1,3.20486e-8,6.60105e-7,-1,2.17982e-7,-4.99466e-9,-1,3.36698e-8,7.21631e-7,-1,8.73506e-8,0,-1,5.29819e-8,0,-1,5.2982e-8,-1.19741e-8,-1,5.09862e-8,8.24553e-8,-1,3.92394e-8,0,-1,5.09062e-8,-1.78404e-7,-1,7.94695e-9,-1.76538e-7,-1,-2.70148e-8,-1.89329e-8,-1,2.83363e-8,-2.56556e-9,-1,2.7737e-8,-4.12396e-9,-1,4.45853e-8,2.01695e-8,-1,5.44637e-8,7.05178e-9,-1,4.48364e-8,1.818e-7,-1,8.65163e-8,-4.75516e-7,-1,-2.19191e-8,-3.34219e-9,-1,4.36327e-8,-1.94472e-9,-1,4.32179e-8,-1.18681e-8,-1,4.61743e-8,1.6747e-8,-1,3.99045e-8,-8.12785e-10,-1,4.32484e-8,-4.68804e-9,-1,4.01795e-8,1.47419e-8,-1,4.06723e-8,1.36096e-8,-1,4.15904e-8,-8.32759e-9,-1,3.71794e-8,-9.76373e-9,-1,3.5897e-8,1.32519e-8,-1,4.27696e-8,-1.03494e-8,-1,3.52882e-8,2.74994e-8,-1,8.87523e-8,-0.986394,0,0.164399,0,1,0,2.15949e-8,1,-2.63109e-8,-5.4807e-7,1,-4.27615e-7,1.60458e-8,1,-3.00189e-8,1.30392e-8,1,-3.14422e-8,-6.48606e-7,1,-2.50107e-7,6.63987e-9,1,-3.33843e-8,-6.84918e-7,1,-1.18763e-7,0,1,-3.46567e-8,6.94673e-7,1,-1.68761e-7,-1.65299e-7,1,-6.7585e-8,-1.48931e-7,1,-9.85323e-8,1.70651e-7,1,5.26188e-8,-8.35933e-9,1,-5.08936e-8,-2.53554e-8,1,-8.23628e-8,1.83005e-8,1,-3.86962e-8,1.10065e-7,1,-2.67387e-8,0,1,-5.2982e-8,0,1,-3.96564e-8,-1.91568e-8,1,-6.85728e-8,-1.77194e-8,1,-6.34276e-8,-7.44365e-7,1,7.1079e-8,-2.39362e-8,1,-3.77748e-8,-1.97909e-8,1,-1.54449e-8,1.19728e-9,1,-4.37443e-8,-2.18839e-8,1,-3.81673e-8,7.44235e-8,1,-6.42813e-8,4.88756e-9,1,-4.504e-8,7.58702e-8,1,4.89606e-9,8.94355e-9,1,-3.54468e-8,8.86034e-9,1,-3.53723e-8,5.01901e-8,1,-1.34645e-8,-1.27313e-7,1,-1.45707e-7,8.86032e-9,1,-3.53722e-8,8.82197e-9,1,-3.54774e-8,7.98802e-9,1,-3.63349e-8,8.60626e-9,1,-3.57524e-8,1.97255e-8,1,-2.65934e-8,1.63764e-7,1,5.47286e-8,1.76786e-8,1,-3.7423e-8,1.3944e-8,1,-3.89684e-8,1.00562e-8,1,-4.01478e-8,6.07191e-9,1,-4.09403e-8,1.57151e-7,1,-3.81934e-8,-8.26281e-14,1,-4.33209e-8,1.25826e-9,1,-4.25578e-8,-4.19157e-8,1,-4.80586e-8,1.20292e-8,1,-3.96536e-8,-1.86402e-8,1,-5.46004e-8,2.54465e-9,1,-3.93355e-8,-2.02014e-8,1,-6.44756e-8,5.77249e-9,1,-4.15515e-8,-3.88546e-9,1,-4.42965e-8,-7.71111e-9,1,-4.38084e-8,-1.24057e-8,1,-5.56399e-8,-6.94838e-9,1,-4.85863e-8,-6.3855e-9,1,-4.42786e-8,-6.24278e-9,1,-4.49961e-8,-5.46267e-9,1,-4.54674e-8,-6.27558e-9,1,-4.42508e-8,-7.62807e-9,1,-4.62446e-8,-1.20609e-8,1,-4.87804e-8,9.64049e-9,1,-4.34247e-8,-3.44138e-8,1,-5.54179e-8,-1.41618e-8,1,-4.98086e-8,2.89353e-8,1,-3.37015e-8,6.71477e-8,1,-1.9688e-8,0.724244,0,0.689544,0.757209,0,0.653172,0.788346,0,0.615232,0.817585,0,0.575808,0.844854,0,0.534997,0.870086,0,0.4929,0.893226,0,0.449607,0.914211,0,0.405239,0.932992,0,0.359898,0.949528,0,0.313681,0.963776,0,0.266712,0.975702,0,0.219101,0.985278,0,0.170961,0.992479,0,0.122411,0.99729,0,0.0735637,-0.689542,0,-0.724245,-0.724245,0,-0.689543,-0.757208,0,-0.653174,-0.788347,0,-0.615231,-0.817585,0,-0.575808,-0.844854,0,-0.534998,-0.870087,0,-0.492898,-0.893225,0,-0.44961,-0.914211,0,-0.405238,-0.932992,0,-0.359898,-0.949529,0,-0.31368,-0.963777,0,-0.26671,-0.975702,0,-0.219103,-0.985278,0,-0.170961,-0.992479,0,-0.122411,-0.99729,0,-0.0735636,-0.999687,0,-0.0250195,0,0.0000038147,-1,0.00000508626,0,-1,0,-0.0000038147,-1,-0.00000190735,0.0000209808,-1,-0.00000190735,-0.0000209808,-1,0,0,-1,0.986394,0,0.164396,0.986394,-0.00000815271,0.164396,0.986393,0.00000815273,0.164403,0.844854,0,0.534997,0.870086,0,0.4929,-0.997291,0,-0.0735636,-0.932992,0,-0.359898,-0.914211,0,-0.405238,-0.893225,0,-0.44961,-0.788347,0,-0.615231,-0.757208,0,-0.653174,-0.724245,0,-0.689543,-5.46019e-14,-1,4.36341e-8,1.29869e-9,-1,4.22414e-8,8.68812e-8,-1,1.33052e-7,1.23282e-7,-1,1.42451e-7,-2.02613e-8,-1,3.03179e-8,-1.71893e-8,-1,3.21593e-8,-1.87285e-7,-1,-3.31722e-8,-1.32326e-8,-1,4.36183e-8,1.74095e-7,-1,7.64566e-8,-1.88801e-7,-1,2.26265e-8,8.8634e-14,-1,4.64697e-8,1.3019e-8,-1,3.86756e-8,-6.0265e-9,-1,4.06281e-8,2.91214e-8,-1,5.64661e-8,-1.87695e-8,-1,3.13147e-8,-2.81262e-8,-1,1.81935e-8,-1.38678e-8,-1,3.86882e-8,2.48836e-8,-1,5.86892e-8,-3.51181e-9,-1,4.04598e-8,-2.15992e-8,-1,3.83181e-8,1.25594e-8,-1,4.80317e-8,1.39675e-8,-1,4.90565e-8,2.26425e-9,-1,4.47336e-8,1.18109e-7,-1,1.39844e-7,-2.02588e-8,-1,3.46285e-8,5.84369e-8,-1,6.12701e-8,3.3818e-8,-1,6.97848e-8,1.77782e-8,-1,5.57415e-8,9.7767e-9,-1,4.61773e-8,6.2884e-8,-1,5.6397e-8,1.22259e-8,-1,5.01195e-8,1.05549e-8,-1,4.73876e-8,-2.1366e-8,-1,4.24167e-8,1.11802e-8,-1,4.60656e-8,1.39836e-8,-1,4.56754e-8,0.999687,0,0.0250341,-2.28236e-7,-1,-1.84903e-7,5.00242e-7,-1,5.79924e-7,-2.52427e-8,-1,2.78583e-8,-2.23924e-8,-1,3.01968e-8,-1.93271e-8,-1,3.22449e-8,-1.60556e-8,-1,3.3993e-8,-1.26617e-8,-1,3.53972e-8,-9.13511e-9,-1,3.64667e-8,-5.51455e-9,-1,3.71868e-8,-7.59826e-7,-1,1.9322e-8,0,-1,3.85779e-8,5.12542e-7,-1,1.13614e-7,1.92626e-7,-1,6.65781e-8,-1.09267e-8,-1,3.6018e-8,-1.77389e-8,-1,3.31968e-8,-2.38789e-8,-1,2.90944e-8,-1.60354e-8,-1,1.60356e-8,-2.67375e-8,-1,2.67379e-8,-9.13277e-7,-1,-4.28856e-8,-8.69759e-9,-1,3.70152e-8,-2.77994e-8,-1,2.59425e-8,-2.38722e-8,-1,2.90999e-8,-7.37681e-9,-1,3.70864e-8,-7.37682e-9,-1,3.70864e-8,-2.00238e-8,-1,3.23236e-8,-2.10073e-8,-1,3.14406e-8,-6.13042e-9,-1,3.75257e-8,-1.09189e-8,-1,3.60203e-8,-2.10073e-8,-1,3.14405e-8,-2.22005e-8,-1,3.08692e-8,-1.57558e-8,-1,3.46061e-8,-1.44703e-8,-1,3.49346e-8,-1.77635e-8,-1,3.31836e-8,-1.44706e-8,-1,3.49355e-8,-1.33447e-8,-1,3.56031e-8,-0.999686,0,-0.0250375,2.65821e-8,1,-2.6583e-8,2.38539e-8,1,-2.90563e-8,2.08863e-8,1,-3.12576e-8,1.7722e-8,1,-3.31542e-8,1.44036e-8,1,-3.47252e-8,1.09155e-8,1,-3.5974e-8,-7.39908e-7,1,-2.04671e-7,3.68688e-9,1,-3.74123e-8,0,1,-3.83495e-8,1.89266e-9,1,-3.85305e-8,1.96372e-7,1,-1.84344e-8,1.26835e-8,1,-3.54377e-8,1.93506e-8,1,-3.22837e-8,2.52758e-8,1,-2.78893e-8,-1.72592e-7,1,-2.72601e-7,-2.19264e-7,1,-2.303e-7,1.85517e-9,1,-3.77673e-8,5.55144e-10,1,-3.80195e-8,2.90357e-8,1,-2.45498e-8,2.52803e-8,1,-2.78853e-8,-9.17004e-7,1,-1.83588e-7,5.56744e-7,1,1.98702e-8,2.15818e-8,1,-3.13058e-8,2.25248e-8,1,-3.03718e-8,9.18791e-9,1,-3.66797e-8,9.18789e-9,1,-3.66796e-8,2.25248e-8,1,-3.03719e-8,2.36871e-8,1,-2.97435e-8,7.9589e-9,1,-3.71819e-8,1.26645e-8,1,-3.54445e-8,1.93487e-8,1,-3.22849e-8,1.50637e-8,1,-3.49122e-8,1.74183e-8,1,-3.37974e-8,1.61671e-8,1,-3.41824e-8,1.61675e-8,1,-3.41833e-8,0.999687,0,0.0250341,5.23048e-14,1,-4.17984e-8,-1.16144e-7,1,-1.48329e-7,2.17206e-8,1,-2.92901e-8,1.87458e-8,1,-3.12776e-8,-1.50324e-7,1,-1.16478e-7,-1.60985e-7,1,-1.01172e-7,-1.70161e-7,1,-8.49135e-8,1.89687e-7,1,-1.33345e-8,-1.59722e-8,1,-4.68695e-8,-9.14324e-14,1,-4.79369e-8,1.72407e-8,1,-3.64125e-8,-4.6643e-8,1,-4.83908e-8,1.19229e-8,1,-3.9304e-8,-2.26806e-8,1,-5.61076e-8,-1.41895e-8,1,-5.59229e-8,-1.3946e-9,1,-4.52509e-8,-6.19162e-10,1,-4.15276e-8,1.02463e-9,1,-4.34369e-8,-4.17774e-9,1,-4.41881e-8,-1.86331e-8,1,-4.9632e-8,5.43858e-8,1,-2.8707e-8,-1.65367e-9,1,-4.04931e-8,1.44942e-8,1,-3.713e-8,-1.00761e-8,1,-4.53643e-8,5.10221e-8,1,-3.66902e-8,1.20522e-8,1,-3.82664e-8,-7.12106e-8,1,-8.46279e-8,3.81765e-8,1,-3.81786e-8,-8.18243e-10,1,-3.98503e-8,2.03829e-8,1,-3.05021e-8,1.12888e-8,1,-3.73351e-8,4.7953e-10,1,-4.00964e-8,4.35651e-9,1,-4.94562e-8,1.36647e-8,1,-3.54526e-8,1.42828e-8,1,-3.48853e-8,0.65317,0,0.757211,0.689541,0,0.724247,0.724243,0,0.689545,0.75721,0,0.653172,0.788348,0,0.61523,0.817584,0,0.57581,0.844854,0,0.534997,0.870087,0,0.492899,0.893225,0,0.449611,0.914211,0,0.405238,0.932992,0,0.359897,0.949528,0,0.313681,0.963776,0,0.266712,0.975702,0,0.219102,0.985278,0,0.170958,0.992479,0,0.122413,0.997291,0,0.0735623,-0.65317,0,-0.757211,-0.65317,0,-0.757211,-0.65317,0,-0.757211,-0.68954,0,-0.724247,-0.724243,0,-0.689545,-0.757209,0,-0.653173,-0.817585,0,-0.575808,-0.844854,0,-0.534996,-0.870087,0,-0.492899,-0.893224,0,-0.449611,-0.914211,0,-0.405239,-0.932993,0,-0.359896,-0.949528,0,-0.313683,-0.963776,0,-0.266711,-0.975702,0,-0.2191,-0.985278,0,-0.17096,-0.992479,0,-0.122413,-0.997291,0,-0.0735622,0.817584,0,0.57581,0.844854,0,0.534997,0.992479,0,0.122413,0.997291,0,0.0735623,0,0,1,0,0,1,0,0,1,5.63744e-7,0,1,-0.00000125136,0.0000654141,1,5.63744e-7,0,1,5.63744e-7,-0.00000733648,1,0,0,1,0,0,1,0,0,1,-0.00000125136,0.00000287288,1,5.63744e-7,-0.0000234272,1,0,1,0,0,1,0,3.14691e-7,1,4.35396e-7,0,1,-9.07104e-8,-6.24377e-7,1,-0.00000104787,3.27495e-7,1,4.56423e-7,-1.39481e-7,1,-2.56203e-7,-0.615229,0,-0.788348,-0.575806,0,-0.817586,-0.534998,0,-0.844853,-0.492901,0,-0.870086,-0.00000112376,0.00000762939,1,2.11337e-7,6.42951e-7,1,0,0.0000305176,1,7.12763e-7,-0.0000193563,1,0.492901,0,0.870085,0.492901,0,0.870085,0.534997,0,0.844854,0.575807,0,0.817586,0.615231,0,0.788347,0.615231,0,0.788347,0,1,-4.53552e-8,2.0641e-8,1,-1.38071e-8,0,1,0,2.66915e-9,1,-4.62031e-8,1.83679e-10,1,-4.44237e-8,-2.25318e-9,1,-5.02248e-8,2.9965e-9,1,-4.29709e-8,1.35275e-8,1,-1.0639e-8,-0.00000112376,-0.00000762939,1,2.11337e-7,0.00000573923,1,7.12763e-7,-0.0000530506,1,0.449614,0,0.893223,0,1,-9.14971e-8,3.70995e-7,1,5.85862e-7,5.46674e-9,1,-2.39838e-8,-2.15938e-7,1,-0.0000010217,-8.64662e-9,1,-1.09464e-7,1.71173e-8,1,5.18151e-8,1.41323e-8,1,3.66364e-8,-0.266712,0,-0.963776,1.71676e-8,1,-6.13994e-9,1.64818e-8,1,-7.79591e-9,1.10045e-10,1,-6.2118e-8,1.68648e-8,1,-6.98605e-9,-1.0481e-9,1,-6.09972e-8,3.28118e-9,1,-3.97799e-8,-1.43011e-8,1,-6.31801e-8,-1.64555e-9,1,-5.02105e-8,3.96064e-9,1,-4.79165e-8,-2.93287e-9,1,-4.58254e-8,0.122411,0,0.99248,1.567e-7,1,9.03085e-7,2.75631e-7,1,7.14542e-7,0,1,0,-4.65954e-8,1,-1.8602e-7,8.37523e-9,1,-4.00314e-7,-1.35958e-7,1,-5.32064e-7,-2.93852e-8,1,-3.32678e-7,2.80171e-7,1,8.91185e-7,-0.999653,0,0.026358,0,-1,0,1.65851e-7,-1,2.92686e-7,0,-1,6.00534e-8,-1.91808e-8,-1,1.14965e-8,-1.41999e-8,-1,8.51105e-9,-2.6595e-8,-1,1.97247e-8,-7.84035e-8,-1,-7.28681e-8,0.575809,0,0.817585,0.534999,0,0.844853,0.492897,0,0.870088,4.68792e-8,-1,3.80086e-7,8.39065e-8,-1,3.73655e-7,1.20116e-7,-1,3.636e-7,0,-1,6.23663e-8,-3.66381e-8,-1,1.51761e-8,-9.00452e-9,-1,2.73152e-9,-8.15554e-9,-1,1.4608e-8,-3.3279e-8,-1,-2.69822e-7,0,-1,0,6.79792e-8,-1,2.66032e-7,-1.85431e-8,-1,3.68839e-9,-9.0046e-9,-1,2.73129e-9,-9.12718e-8,-1,-2.58949e-7,-1.79331e-9,-1,4.46217e-8,2.28586e-8,-1,1.12775e-7,2.07923e-8,-1,9.18857e-8,-2.28512e-7,-1,-4.03299e-7,0,-1,4.67747e-8,-1.72784e-9,-1,3.46799e-8,2.03166e-8,-1,9.07373e-8,-5.42138e-10,-1,3.74791e-8,-2.60546e-10,-1,4.17222e-8,9.77996e-10,-1,4.71291e-8,-3.22698e-10,-1,5.16749e-8,7.533e-10,-1,4.72095e-8,-2.1719e-9,-1,5.15326e-8,-5.07258e-8,-1,-5.50255e-8,4.28084e-7,-1,7.07818e-7,3.57585e-11,-1,4.06104e-8,2.78599e-8,-1,9.11801e-8,-1.38278e-9,-1,4.70603e-8,7.93491e-10,-1,4.67686e-8,2.27472e-10,-1,4.37393e-8,0,-1,3.43114e-8,-2.83821e-9,-1,3.81379e-8,6.657e-8,-1,1.51528e-7,2.69034e-7,-1,4.25117e-7,-5.53311e-14,-1,4.99929e-8,-7.24731e-9,-1,3.62581e-8,1.9477e-8,-1,7.36071e-8,-1.1764e-9,-1,4.15213e-8,-0.492974,0,-0.870044,-0.449614,0,-0.893223,-0.405238,0,-0.914211,-0.359896,0,-0.932992,-0.313681,0,-0.949529,0.40524,0,0.91421,0.359897,0,0.932992,0.31368,0,0.949529,0.266712,0,0.963776,0.2191,0,0.975702,0.170961,0,0.985278,-0.405241,0,-0.91421,-0.405241,0,-0.91421,-0.359897,0,-0.932992,-0.31368,0,-0.949529,-0.266712,0,-0.963776,-0.219099,0,-0.975703,-0.170963,0,-0.985278,-0.122409,0,-0.99248,-0.073565,0,-0.99729,-0.0250357,0,-0.999687,0.266712,0,0.963776,0.2191,0,0.975702,0.170961,0,0.985278,-0.405238,0,-0.914211,-0.359896,0,-0.932992,-0.31368,0,-0.949529,0.534999,0,0.844853,2.05153e-7,-5.00029e-7,-1,0.00000110678,0.0000643632,-1,2.05153e-7,-7.5915e-7,-1,0,-0.0000152588,-1,0.00000110678,0.0000026976,-1],"metadata":{"generator":"io_three","normals":623,"uvs":0,"vertices":496,"version":3,"faces":768,"type":"Geometry"},"vertices":[260.167,4,-76.9381,260.167,-4,-76.9381,266.677,-4,-89.8714,266.677,4,-89.8714,272.544,4,-103.108,277.755,3.99999,-116.617,282.297,3.99999,-130.366,286.159,3.99999,-144.321,289.332,3.99999,-158.448,291.807,3.99999,-172.715,293.579,3.99999,-187.085,294.645,3.99999,-201.525,295,3.99999,-215.75,293.5,3.99999,-215.75,293.146,3.99999,-201.599,292.087,3.99999,-187.232,290.323,3.99999,-172.935,287.86,3.99999,-158.741,284.704,3.99999,-144.685,280.862,3.99999,-130.801,276.343,3.99999,-117.123,271.159,4,-103.682,265.321,4,-90.5128,258.844,4,-77.6452,251.743,4,-65.1109,244.036,4,-52.9402,235.741,4,-41.1623,226.879,4,-29.8056,217.558,4,-19,219.538,4,-19,228.038,4,-28.854,236.946,4,-40.2688,245.284,4,-52.1069,253.03,4,-64.3398,253.03,-4,-64.3398,276.343,-4.00001,-117.123,280.862,-4.00001,-130.801,284.704,-4.00001,-144.685,287.86,-4.00001,-158.741,290.323,-4.00001,-172.935,292.087,-4.00001,-187.232,293.146,-4.00001,-201.599,293.5,-4.00001,-215.75,295,-4.00001,-215.75,294.645,-4.00001,-201.525,293.579,-4.00001,-187.085,291.807,-4.00001,-172.715,289.332,-4.00001,-158.448,286.159,-4.00001,-144.321,282.297,-4.00001,-130.366,277.755,-4.00001,-116.617,272.544,-4,-103.108,245.284,-4,-52.1069,236.946,-4,-40.2688,228.038,-4,-28.854,219.538,-4,-19,217.558,-4,-19,226.879,-4,-29.8056,235.741,-4,-41.1623,244.036,-4,-52.9402,251.743,-4,-65.1109,258.844,-4,-77.6452,265.321,-4,-90.5128,271.159,-4,-103.682,293.5,-1.00001,-215.75,285.5,-1.00001,-215.75,285.5,-4.00001,-215.75,282.5,-4.00001,-215.75,282.5,-0.00000943074,-215.75,282.5,3.99999,-215.75,285.5,3.99999,-215.75,285.5,0.999991,-215.75,293.5,0.999991,-215.75,293.146,0.999991,-201.599,292.087,0.999992,-187.232,290.323,0.999992,-172.935,287.86,0.999993,-158.741,284.704,0.999994,-144.685,280.862,0.999994,-130.801,276.343,0.999995,-117.123,271.159,0.999995,-103.682,265.321,0.999996,-90.5128,258.844,0.999997,-77.6452,251.743,0.999997,-65.1109,244.036,0.999998,-52.9402,235.741,0.999998,-41.1623,226.879,0.999999,-29.8056,217.558,0.999999,-19,219.538,-8.30519e-7,-19,276.343,-1.00001,-117.123,271.159,-1,-103.682,280.862,-1.00001,-130.801,284.704,-1.00001,-144.685,287.86,-1.00001,-158.741,290.323,-1.00001,-172.935,292.087,-1.00001,-187.232,293.146,-1.00001,-201.599,217.558,-1,-19,226.879,-1,-29.8056,235.741,-1,-41.1623,244.036,-1,-52.9402,251.743,-1,-65.1109,258.844,-1,-77.6452,265.321,-1,-90.5128,206.524,-1,-19,211.542,-1,-24.2699,220.694,-1,-34.8807,229.316,-1,-45.9279,237.385,-1,-57.3848,244.882,-1,-69.2238,251.789,-1,-81.4164,258.089,-1,-93.9332,263.768,-1,-106.744,268.811,-1.00001,-119.818,273.206,-1.00001,-133.124,276.944,-1.00001,-146.629,280.014,-1.00001,-160.302,282.41,-1.00001,-174.109,284.125,-1.00001,-188.016,285.156,-1.00001,-201.991,285.156,-4.00001,-201.991,179.457,-4,-19,188.444,-4,-27.556,197.463,-4,-37.0295,206.007,-4,-46.9342,214.055,-4,-57.2462,221.587,-4,-67.9406,228.585,-4,-78.9917,235.032,-4,-90.3729,240.913,-4,-102.057,246.214,-4,-114.015,250.922,-4.00001,-126.219,255.025,-4.00001,-138.639,258.513,-4.00001,-151.246,261.379,-4.00001,-164.008,263.616,-4.00001,-176.896,265.217,-4.00001,-189.879,266.179,-4.00001,-202.924,266.5,-4.00001,-215.75,269.5,-4.00001,-215.75,268,-4.00001,-206.75,284,-4.00001,-206.75,284.125,-4.00001,-188.016,282.41,-4.00001,-174.109,280.014,-4.00001,-160.302,276.944,-4.00001,-146.629,273.206,-4.00001,-133.124,268.811,-4.00001,-119.818,263.768,-4,-106.744,258.089,-4,-93.9332,251.789,-4,-81.4164,244.882,-4,-69.2238,237.385,-4,-57.3848,229.316,-4,-45.9279,220.694,-4,-34.8807,211.542,-4,-24.2699,206.524,-4,-19,284,3.99999,-206.75,206.524,4,-19,211.542,4,-24.2699,220.694,4,-34.8807,229.316,4,-45.9279,237.385,4,-57.3848,244.882,4,-69.2238,251.789,4,-81.4164,258.089,4,-93.9332,263.768,4,-106.744,268.811,3.99999,-119.818,273.206,3.99999,-133.124,276.944,3.99999,-146.629,280.014,3.99999,-160.302,282.41,3.99999,-174.109,284.125,3.99999,-188.016,285.156,3.99999,-201.991,268,3.99999,-206.75,269.5,3.99999,-215.75,266.5,3.99999,-215.75,266.179,3.99999,-202.924,265.217,3.99999,-189.879,263.616,3.99999,-176.896,261.379,3.99999,-164.008,258.513,3.99999,-151.246,255.025,3.99999,-138.639,250.922,3.99999,-126.219,246.214,3.99999,-114.015,240.913,4,-102.057,235.032,4,-90.3729,228.585,4,-78.9917,221.587,4,-67.9406,214.055,4,-57.2462,206.007,4,-46.9342,197.463,4,-37.0295,188.444,4,-27.556,179.457,4,-19,285.156,0.999991,-201.991,284.125,0.999992,-188.016,282.41,0.999992,-174.109,280.014,0.999993,-160.302,276.944,0.999994,-146.629,273.206,0.999994,-133.124,268.811,0.999995,-119.818,263.768,0.999995,-106.744,258.089,0.999996,-93.9332,251.789,0.999996,-81.4164,244.882,0.999997,-69.2238,237.385,0.999997,-57.3848,229.316,0.999998,-45.9279,220.694,0.999998,-34.8807,211.542,0.999999,-24.2699,206.524,0.999999,-19,179.457,-1,-19,188.444,-1,-27.556,197.463,-1,-37.0295,206.007,-1,-46.9342,214.055,-1,-57.2462,221.587,-1,-67.9406,228.585,-1,-78.9917,235.032,-1,-90.3729,240.913,-1,-102.057,246.214,-1.00001,-114.015,250.922,-1.00001,-126.219,255.025,-1.00001,-138.639,258.513,-1.00001,-151.246,261.379,-1.00001,-164.008,263.616,-1.00001,-176.896,265.217,-1.00001,-189.879,266.179,-1.00001,-202.924,266.5,-1.00001,-215.75,258.5,-1.00001,-215.75,258.5,-4.00001,-215.75,257,-4.00001,-215.75,257,3.99999,-215.75,258.5,3.99999,-215.75,258.5,0.999991,-215.75,266.5,0.999991,-215.75,269.5,-0.00000943074,-215.75,266.179,0.999991,-202.924,265.217,0.999992,-189.879,263.616,0.999992,-176.896,261.379,0.999993,-164.008,258.513,0.999993,-151.246,255.025,0.999994,-138.639,250.922,0.999995,-126.219,246.214,0.999995,-114.015,240.913,0.999996,-102.057,235.032,0.999996,-90.3729,228.585,0.999997,-78.9917,221.587,0.999997,-67.9406,214.055,0.999997,-57.2462,206.007,0.999998,-46.9342,197.463,0.999998,-37.0295,188.444,0.999999,-27.556,179.457,0.999999,-19,167.264,-1,-19,173.598,-1,-24.4641,182.787,-1,-33.2129,191.536,-1,-42.402,199.823,-1,-52.0093,207.629,-1,-62.0118,214.935,-1,-72.3851,221.723,-1,-83.1045,227.977,-1,-94.1441,233.681,-1,-105.477,238.823,-1.00001,-117.076,243.389,-1.00001,-128.914,247.369,-1.00001,-140.961,250.753,-1.00001,-153.19,253.533,-1.00001,-165.569,255.702,-1.00001,-178.07,257.255,-1.00001,-190.663,258.189,-1.00001,-203.316,258.189,-4.00001,-203.316,164.968,-4,-19,172.591,-4,-25.5755,181.726,-4,-34.2735,190.424,-4,-43.4093,198.664,-4,-52.9609,206.424,-4,-62.9053,213.688,-4,-73.2185,220.436,-4,-83.8757,226.654,-4,-94.8512,232.325,-4,-106.119,237.437,-4.00001,-117.65,241.977,-4.00001,-129.419,245.934,-4.00001,-141.397,249.298,-4.00001,-153.554,252.062,-4.00001,-165.862,254.218,-4.00001,-178.29,255.762,-4.00001,-190.81,256.69,-4.00001,-203.39,257.255,-4.00001,-190.663,255.702,-4.00001,-178.07,253.533,-4.00001,-165.569,250.753,-4.00001,-153.19,247.369,-4.00001,-140.961,243.389,-4.00001,-128.914,238.823,-4.00001,-117.076,233.681,-4,-105.477,227.977,-4,-94.1441,221.723,-4,-83.1045,214.935,-4,-72.3851,207.629,-4,-62.0118,199.823,-4,-52.0093,191.536,-4,-42.402,182.787,-4,-33.2129,173.598,-4,-24.4641,167.264,-4,-19,256.69,3.99999,-203.39,167.264,4,-19,173.598,4,-24.4641,182.787,4,-33.2129,191.536,4,-42.402,199.823,4,-52.0093,207.629,4,-62.0118,214.935,4,-72.3851,221.723,4,-83.1045,227.977,4,-94.1441,233.681,4,-105.477,238.823,3.99999,-117.076,243.389,3.99999,-128.914,247.369,3.99999,-140.961,250.753,3.99999,-153.19,253.533,3.99999,-165.569,255.702,3.99999,-178.07,257.255,3.99999,-190.663,258.189,3.99999,-203.316,255.762,3.99999,-190.81,254.218,3.99999,-178.29,252.062,3.99999,-165.862,249.298,3.99999,-153.554,245.934,3.99999,-141.397,241.977,3.99999,-129.419,237.437,3.99999,-117.65,232.325,4,-106.119,226.654,4,-94.8512,220.436,4,-83.8757,213.688,4,-73.2185,206.424,4,-62.9053,198.664,4,-52.9609,190.424,4,-43.4093,181.726,4,-34.2735,172.591,4,-25.5755,164.968,4,-19,258.189,0.999991,-203.316,257.255,0.999992,-190.663,255.702,0.999992,-178.07,253.533,0.999993,-165.569,250.753,0.999993,-153.19,247.369,0.999994,-140.961,243.389,0.999994,-128.914,238.823,0.999995,-117.076,233.681,0.999995,-105.477,227.977,0.999996,-94.1441,221.723,0.999996,-83.1045,214.935,0.999997,-72.3851,207.629,0.999997,-62.0118,199.823,0.999998,-52.0093,191.536,0.999998,-42.402,182.787,0.999999,-33.2129,173.598,0.999999,-24.4641,167.264,0.999999,-19,164.968,-8.30518e-7,-19,175.788,4,19,174.838,4,19.7415,163.06,4,28.0362,150.889,4,35.7433,141.61,4,41,144.652,4,41,151.66,4,37.0299,163.893,4,29.2834,175.731,4,20.9463,178.225,4,19,175.788,1,19,174.838,1,19.7415,163.06,1,28.0362,150.889,1,35.7433,141.61,1,41,144.652,0.00000179217,41,124.23,1,41,124.23,4,41,70.2226,4,41,70.2226,1,41,27.4067,1,41,27.4067,4,41,0.250019,0.00000179217,41,144.652,-4,41,151.66,-4,37.0299,163.893,-4,29.2834,175.731,-4,20.9463,178.225,-4,19,178.225,8.30514e-7,19,162.001,1,19,158.615,1,21.3845,146.776,1,28.8815,134.584,1,35.7885,27.4067,-4,41,27.4067,-0.999998,41,70.2226,-0.999998,41,70.2226,-4,41,124.23,-4,41,124.23,-0.999998,41,141.61,-0.999998,41,141.61,-4,41,134.584,4,35.7885,146.776,4,28.8815,158.615,4,21.3845,162.001,4,19,125.684,4,19,125.627,4,19.032,113.943,4,24.9131,101.985,4,30.2139,89.781,4,34.9215,77.3607,4,39.0246,77.3607,1,39.0246,89.781,1,34.9215,101.985,1,30.2139,113.943,1,24.9131,125.627,1,19.032,125.684,1,19,107.548,1,19,98.9236,1,22.8228,87.0859,1,27.3892,75.0385,1,31.3691,62.8102,1,34.7531,50.4306,1,37.533,37.9295,1,39.7021,37.9295,4,39.7021,50.4306,4,37.533,62.8102,4,34.7531,75.0385,4,31.3691,87.0859,4,27.3892,98.9236,4,22.8228,107.548,4,19,103.848,4,19,98.3496,4,21.437,86.5806,4,25.9769,74.6031,4,29.9337,62.4457,4,33.298,50.138,4,36.0618,37.7094,4,38.2184,25.1901,4,39.7625,12.6101,4,40.6904,0.250019,4,41,150.889,-4,35.7433,163.06,-4,28.0362,174.838,-4,19.7415,175.788,-4,19,0.250019,-4,41,12.6101,-4,40.6904,25.1901,-4,39.7625,37.7094,-4,38.2184,50.138,-4,36.0618,62.4457,-4,33.298,74.6031,-4,29.9337,86.5806,-4,25.9769,98.3496,-4,21.437,103.848,-4,19,107.548,-4,19,98.9236,-4,22.8228,87.0859,-4,27.3892,75.0385,-4,31.3691,62.8102,-4,34.7531,50.4306,-4,37.533,37.9295,-4,39.7021,37.9295,-0.999998,39.7021,50.4306,-0.999998,37.533,62.8102,-0.999998,34.7531,75.0385,-0.999999,31.3691,87.0859,-0.999999,27.3892,98.9236,-0.999999,22.8228,107.548,-0.999999,19,125.684,-0.999999,19,125.627,-0.999999,19.032,113.943,-0.999999,24.9131,101.985,-0.999999,30.2139,89.781,-0.999998,34.9215,77.3607,-0.999998,39.0246,77.3607,-4,39.0246,89.781,-4,34.9215,101.985,-4,30.2139,113.943,-4,24.9131,125.627,-4,19.032,125.684,-4,19,162.001,-4,19,158.615,-4,21.3845,146.776,-4,28.8815,134.584,-4,35.7885,134.584,-0.999998,35.7885,146.776,-0.999999,28.8815,158.615,-0.999999,21.3845,162.001,-0.999999,19,175.788,-0.999999,19,174.838,-0.999999,19.7415,163.06,-0.999999,28.0362,150.889,-0.999998,35.7433,103.848,8.30514e-7,19],"faces":[33,0,1,2,3,0,0,0,0,32,3,4,5,1,1,1,32,5,6,7,2,2,2,32,7,8,9,3,3,3,32,9,10,11,4,4,4,32,11,12,13,5,5,5,32,11,13,14,6,6,6,32,7,9,11,7,7,7,32,3,5,7,8,8,8,32,33,0,3,9,9,9,32,31,32,33,10,10,10,32,29,30,31,11,11,11,32,27,28,29,12,12,12,32,26,27,29,13,13,13,32,29,31,33,14,14,14,32,11,14,15,15,15,15,32,11,15,16,16,16,16,32,26,29,33,17,17,17,32,25,26,33,18,18,18,32,7,11,16,19,19,19,32,7,16,17,20,20,20,32,24,25,33,21,21,21,32,23,24,33,22,22,22,32,7,17,18,23,23,23,32,7,18,19,24,24,24,32,23,33,3,25,25,25,32,22,23,3,26,26,26,32,7,19,20,27,27,27,32,21,22,3,28,28,28,32,3,7,20,29,29,29,32,20,21,3,30,30,30,33,1,0,33,34,31,31,31,31,32,41,42,43,32,32,32,32,43,44,45,33,33,33,32,45,46,47,34,34,34,32,47,48,49,35,35,35,32,49,50,51,36,36,36,32,51,2,1,37,37,37,32,1,34,52,38,38,38,32,52,53,54,39,39,39,32,54,55,56,40,40,40,32,54,56,57,41,41,41,32,1,52,54,42,42,42,32,49,51,1,43,43,43,32,45,47,49,44,44,44,32,41,43,45,45,45,45,32,40,41,45,46,46,46,32,54,57,58,47,47,47,32,54,58,59,48,48,48,32,39,40,45,49,49,49,32,38,39,45,50,50,50,32,1,54,59,51,51,51,32,1,59,60,52,52,52,32,38,45,49,53,53,53,32,37,38,49,54,54,54,32,1,60,61,55,55,55,32,1,61,62,55,55,55,32,36,37,49,56,56,56,32,35,36,49,57,57,57,32,1,62,63,58,58,58,32,63,35,49,59,59,59,32,49,1,63,60,60,60,33,4,3,2,51,61,61,61,61,33,4,51,50,5,62,62,62,62,33,6,5,50,49,63,63,63,63,33,7,6,49,48,64,64,64,64,33,7,48,47,8,65,65,65,65,33,8,47,46,9,66,66,66,66,33,9,46,45,10,67,67,67,67,33,11,10,45,44,68,68,68,68,33,11,44,43,12,69,69,69,69,32,13,12,43,70,70,70,32,43,42,64,70,70,70,32,65,66,67,70,70,70,32,65,67,68,70,70,70,32,68,69,70,71,71,71,32,68,70,71,72,72,72,32,64,65,68,73,73,73,32,72,13,43,71,71,71,32,68,71,72,74,74,74,32,72,43,64,70,70,70,32,64,68,72,75,75,75,33,72,73,14,13,76,76,76,76,33,73,74,15,14,77,77,77,77,33,74,75,16,15,78,78,78,78,33,75,76,17,16,79,79,79,79,33,76,77,18,17,80,80,80,80,33,77,78,19,18,81,81,81,81,33,78,79,20,19,82,82,82,82,33,79,80,21,20,83,83,83,83,33,80,81,22,21,84,84,84,84,33,81,82,23,22,85,85,85,85,33,82,83,24,23,86,86,86,86,33,83,84,25,24,87,87,87,87,33,84,85,26,25,88,88,88,88,33,85,86,27,26,89,89,89,89,33,28,27,86,87,90,90,90,90,32,88,55,54,91,91,91,32,54,30,29,92,92,92,32,54,29,88,91,91,91,33,30,54,53,31,93,93,93,93,33,31,53,52,32,94,94,94,94,33,32,52,34,33,95,95,95,95,33,89,35,63,90,83,83,83,83,33,91,36,35,89,82,82,82,82,33,92,37,36,91,81,81,81,81,33,93,38,37,92,80,80,80,80,33,94,39,38,93,96,96,96,96,33,95,40,39,94,78,78,78,78,33,96,41,40,95,77,77,77,77,33,64,42,41,96,76,76,76,76,33,97,98,57,56,90,90,90,90,33,99,58,57,98,89,89,89,89,33,100,59,58,99,88,88,88,88,33,101,60,59,100,87,87,87,87,33,102,61,60,101,86,86,86,86,33,103,62,61,102,85,85,85,85,33,90,63,62,103,84,84,84,84,32,97,104,105,97,97,97,32,97,105,106,98,98,98,32,99,98,97,99,99,99,32,101,100,99,100,100,100,32,103,102,101,101,101,101,32,89,90,103,102,102,102,32,92,91,89,103,103,103,32,94,93,92,104,104,104,32,96,95,94,105,105,105,32,65,64,96,106,106,106,32,119,65,96,107,107,107,32,96,94,92,108,108,108,32,92,89,103,109,109,109,32,103,101,99,110,110,110,32,99,97,106,111,111,111,32,99,106,107,112,112,112,32,92,103,99,113,113,113,32,119,96,92,114,114,114,32,118,119,92,115,115,115,32,99,107,108,116,116,116,32,99,108,109,117,117,117,32,117,118,92,118,118,118,32,116,117,92,119,119,119,32,99,109,110,120,120,120,32,99,110,111,121,121,121,32,115,116,92,122,122,122,32,114,115,92,123,123,123,32,92,99,111,124,124,124,32,92,111,112,125,125,125,32,113,114,92,126,126,126,32,112,113,92,127,127,127,33,119,120,66,65,128,128,128,128,32,156,121,122,129,129,129,32,156,122,123,130,130,130,32,154,155,156,131,131,131,32,152,153,154,132,132,132,32,150,151,152,133,133,133,32,148,149,150,134,134,134,32,146,147,148,135,135,135,32,144,145,146,136,136,136,32,142,143,144,137,137,137,32,66,120,142,138,138,138,32,141,67,66,139,139,139,32,138,139,140,140,140,140,32,141,66,142,141,141,141,32,137,138,140,142,142,142,32,140,141,142,143,143,143,32,142,144,146,144,144,144,32,146,148,150,145,145,145,32,150,152,154,146,146,146,32,154,156,123,147,147,147,32,154,123,124,148,148,148,32,146,150,154,149,149,149,32,140,142,146,150,150,150,32,136,137,140,151,151,151,32,135,136,140,152,152,152,32,154,124,125,153,153,153,32,154,125,126,154,154,154,32,135,140,146,155,155,155,32,134,135,146,156,156,156,32,146,154,126,157,157,157,32,146,126,127,158,158,158,32,133,134,146,159,159,159,32,132,133,146,160,160,160,32,146,127,128,161,161,161,32,146,128,129,162,162,162,32,131,132,146,163,163,163,32,146,129,130,164,164,164,32,130,131,146,165,165,165,32,68,67,141,166,166,166,32,141,157,69,166,166,166,32,141,69,68,166,166,166,32,193,158,159,167,167,167,32,159,160,161,168,168,168,32,161,162,163,169,169,169,32,163,164,165,170,170,170,32,165,166,167,171,171,171,32,167,168,169,172,172,172,32,169,170,171,173,173,173,32,171,172,173,174,174,174,32,173,70,69,175,175,175,32,173,69,157,176,176,176,32,169,171,173,177,177,177,32,165,167,169,178,178,178,32,161,163,165,179,179,179,32,193,159,161,180,180,180,32,192,193,161,181,181,181,32,161,165,169,182,182,182,32,169,173,157,183,183,183,32,174,175,176,184,184,184,32,169,157,174,185,185,185,32,191,192,161,186,186,186,32,190,191,161,187,187,187,32,169,174,176,188,188,188,32,169,176,177,189,189,189,32,189,190,161,190,190,190,32,188,189,161,191,191,191,32,169,177,178,192,192,192,32,169,178,179,193,193,193,32,188,161,169,194,194,194,32,187,188,169,195,195,195,32,169,179,180,196,196,196,32,169,180,181,197,197,197,32,186,187,169,198,198,198,32,185,186,169,199,199,199,32,169,181,182,200,200,200,32,169,182,183,201,201,201,32,184,185,169,202,202,202,32,169,183,184,203,203,203,33,194,71,70,173,128,128,128,128,32,209,87,86,12,12,12,32,86,85,84,204,204,204,32,84,83,82,205,205,205,32,82,81,80,206,206,206,32,80,79,78,207,207,207,32,78,77,76,208,208,208,32,76,75,74,209,209,209,32,74,73,72,210,210,210,32,72,71,194,211,211,211,32,72,194,195,212,212,212,32,76,74,72,213,213,213,32,80,78,76,214,214,214,32,84,82,80,215,215,215,32,209,86,84,216,216,216,32,208,209,84,217,217,217,32,84,80,76,218,218,218,32,76,72,195,219,219,219,32,76,195,196,220,220,220,32,207,208,84,221,221,221,32,206,207,84,222,222,222,32,76,196,197,223,223,223,32,76,197,198,224,224,224,32,205,206,84,225,225,225,32,204,205,84,226,226,226,32,76,198,199,227,227,227,32,76,199,200,228,228,228,32,203,204,84,229,229,229,32,202,203,84,230,230,230,32,84,76,200,231,231,231,32,201,202,84,232,232,232,32,84,200,201,233,233,233,33,156,155,105,104,234,234,234,234,33,105,155,154,106,235,235,235,235,33,106,154,153,107,236,236,236,236,33,107,153,152,108,237,237,237,237,33,108,152,151,109,238,238,238,238,33,109,151,150,110,239,239,239,239,33,110,150,149,111,240,240,240,240,33,111,149,148,112,241,241,241,241,33,112,148,147,113,242,242,242,242,33,113,147,146,114,243,243,243,243,33,114,146,145,115,244,244,244,244,33,115,145,144,116,245,245,245,245,33,116,144,143,117,246,246,246,246,33,117,143,142,118,247,247,247,247,33,118,142,120,119,248,248,248,248,33,210,211,122,121,249,249,249,249,33,212,123,122,211,250,250,250,250,33,213,124,123,212,251,251,251,251,33,214,125,124,213,252,252,252,252,33,215,126,125,214,253,253,253,253,33,216,127,126,215,254,254,254,254,33,217,128,127,216,255,255,255,255,33,218,129,128,217,256,256,256,256,33,219,130,129,218,257,257,257,257,33,220,131,130,219,258,258,258,258,33,221,132,131,220,259,259,259,259,33,222,133,132,221,260,260,260,260,33,223,134,133,222,261,261,261,261,33,224,135,134,223,262,262,262,262,33,225,136,135,224,263,263,263,263,33,226,137,136,225,264,264,264,264,33,227,138,137,226,265,265,265,265,32,235,139,138,266,266,266,32,235,138,227,267,267,267,32,176,175,235,268,268,268,32,234,176,235,267,267,267,32,235,227,228,269,269,269,32,228,229,230,70,70,70,32,230,231,232,71,71,71,32,233,234,235,270,270,270,32,230,232,233,72,72,72,32,233,235,228,70,70,70,32,228,230,233,271,271,271,32,175,174,140,272,272,272,32,140,139,235,273,273,273,32,140,235,175,274,274,274,33,141,140,174,157,271,271,271,271,33,209,208,159,158,234,234,234,234,33,208,207,160,159,235,235,235,235,33,207,206,161,160,236,236,236,236,33,206,205,162,161,237,237,237,237,33,205,204,163,162,275,275,275,275,33,204,203,164,163,276,276,276,276,33,203,202,165,164,240,240,240,240,33,202,201,166,165,241,241,241,241,33,201,200,167,166,242,242,242,242,33,200,199,168,167,243,243,243,243,33,199,198,169,168,244,244,244,244,33,198,197,170,169,245,245,245,245,33,197,196,171,170,246,246,246,246,33,196,195,172,171,247,247,247,247,33,195,194,173,172,248,248,248,248,33,234,236,177,176,265,265,265,265,33,236,237,178,177,277,277,277,277,33,237,238,179,178,263,263,263,263,33,238,239,180,179,262,262,262,262,33,239,240,181,180,261,261,261,261,33,240,241,182,181,260,260,260,260,33,241,242,183,182,259,259,259,259,33,242,243,184,183,278,278,278,278,33,243,244,185,184,279,279,279,279,33,244,245,186,185,280,280,280,280,33,245,246,187,186,255,255,255,255,33,246,247,188,187,254,254,254,254,33,247,248,189,188,253,253,253,253,33,248,249,190,189,281,281,281,281,33,249,250,191,190,282,282,282,282,33,250,251,192,191,283,283,283,283,33,193,192,251,252,249,249,249,249,32,210,253,254,284,284,284,32,210,254,255,285,285,285,32,212,211,210,286,286,286,32,214,213,212,287,287,287,32,216,215,214,288,288,288,32,218,217,216,289,289,289,32,220,219,218,290,290,290,32,222,221,220,291,291,291,32,224,223,222,292,292,292,32,226,225,224,293,293,293,32,228,227,226,294,294,294,32,270,228,226,295,295,295,32,226,224,222,296,296,296,32,222,220,218,297,297,297,32,218,216,214,298,298,298,32,214,212,210,299,299,299,32,210,255,256,300,300,300,32,210,256,257,301,301,301,32,218,214,210,302,302,302,32,226,222,218,303,303,303,32,269,270,226,304,304,304,32,268,269,226,305,305,305,32,218,210,257,306,306,306,32,218,257,258,307,307,307,32,267,268,226,308,308,308,32,266,267,226,309,309,309,32,218,258,259,310,310,310,32,218,259,260,311,311,311,32,266,226,218,312,312,312,32,265,266,218,313,313,313,32,218,260,261,314,314,314,32,218,261,262,315,315,315,32,264,265,218,316,316,316,32,218,262,263,317,317,317,32,263,264,218,318,318,318,33,270,271,229,228,319,319,319,319,32,306,272,273,129,129,129,32,306,273,274,320,320,320,32,304,305,306,321,321,321,32,302,303,304,322,322,322,32,300,301,302,323,323,323,32,298,299,300,324,324,324,32,296,297,298,325,325,325,32,294,295,296,326,326,326,32,292,293,294,327,327,327,32,290,291,292,328,328,328,32,229,271,290,329,329,329,32,289,230,229,330,330,330,32,288,289,229,331,331,331,32,229,290,292,332,332,332,32,292,294,296,333,333,333,32,296,298,300,334,334,334,32,300,302,304,335,335,335,32,304,306,274,336,336,336,32,304,274,275,337,337,337,32,288,229,292,338,338,338,32,287,288,292,339,339,339,32,304,275,276,340,340,340,32,300,304,276,341,341,341,32,286,287,292,342,342,342,32,285,286,292,343,343,343,32,300,276,277,344,344,344,32,300,277,278,345,345,345,32,284,285,292,346,346,346,32,284,292,296,347,347,347,32,300,278,279,348,348,348,32,300,279,280,349,349,349,32,283,284,296,350,350,350,32,282,283,296,351,351,351,32,296,300,280,352,352,352,32,281,282,296,353,353,353,32,280,281,296,354,354,354,33,231,230,289,307,355,355,355,355,32,342,308,309,167,167,167,32,309,310,311,356,356,356,32,311,312,313,357,357,357,32,313,314,315,358,358,358,32,315,316,317,359,359,359,32,317,318,319,360,360,360,32,319,320,321,361,361,361,32,321,322,323,362,362,362,32,323,324,325,363,363,363,32,325,232,231,364,364,364,32,325,231,307,365,365,365,32,321,323,325,366,366,366,32,317,319,321,367,367,367,32,313,315,317,368,368,368,32,309,311,313,369,369,369,32,341,342,309,370,370,370,32,340,341,309,371,371,371,32,325,307,326,372,372,372,32,325,326,327,373,373,373,32,339,340,309,374,374,374,32,339,309,313,375,375,375,32,321,325,327,376,376,376,32,321,327,328,377,377,377,32,338,339,313,378,378,378,32,337,338,313,379,379,379,32,321,328,329,380,380,380,32,321,329,330,381,381,381,32,336,337,313,382,382,382,32,335,336,313,383,383,383,32,321,330,331,384,384,384,32,317,321,331,385,385,385,32,335,313,317,386,386,386,32,334,335,317,387,387,387,32,317,331,332,388,388,388,32,333,334,317,389,389,389,32,317,332,333,390,390,390,33,343,233,232,325,391,391,391,391,32,360,252,251,392,392,392,32,251,250,249,393,393,393,32,249,248,247,394,394,394,32,247,246,245,395,395,395,32,245,244,243,396,396,396,32,243,242,241,397,397,397,32,241,240,239,398,398,398,32,239,238,237,399,399,399,32,237,236,234,400,400,400,32,234,233,343,401,401,401,32,234,343,344,402,402,402,32,239,237,234,403,403,403,32,243,241,239,404,404,404,32,247,245,243,405,405,405,32,251,249,247,406,406,406,32,359,360,251,407,407,407,32,358,359,251,408,408,408,32,251,247,243,409,409,409,32,243,239,234,410,410,410,32,234,344,345,411,411,411,32,234,345,346,412,412,412,32,357,358,251,413,413,413,32,356,357,251,414,414,414,32,243,234,346,415,415,415,32,243,346,347,416,416,416,32,355,356,251,417,417,417,32,354,355,251,418,418,418,32,243,347,348,419,419,419,32,243,348,349,420,420,420,32,354,251,243,421,421,421,32,353,354,243,422,422,422,32,243,349,350,423,423,423,32,243,350,351,424,424,424,32,352,353,243,425,425,425,32,243,351,352,426,426,426,33,306,305,254,253,427,427,427,427,33,254,305,304,255,428,428,428,428,33,255,304,303,256,429,429,429,429,33,256,303,302,257,430,430,430,430,33,257,302,301,258,431,431,431,431,33,258,301,300,259,432,432,432,432,33,259,300,299,260,433,433,433,433,33,260,299,298,261,434,434,434,434,33,261,298,297,262,435,435,435,435,33,262,297,296,263,436,436,436,436,33,263,296,295,264,437,437,437,437,33,264,295,294,265,438,438,438,438,33,265,294,293,266,439,439,439,439,33,266,293,292,267,440,440,440,440,33,267,292,291,268,441,441,441,441,33,268,291,290,269,442,442,442,442,33,269,290,271,270,443,443,443,443,32,342,341,273,444,444,444,32,273,272,361,445,445,445,32,273,361,342,446,446,446,33,340,274,273,341,447,447,447,447,33,339,275,274,340,448,448,448,448,33,276,275,339,338,449,449,449,449,33,276,338,337,277,281,281,281,281,33,337,336,278,277,450,450,450,450,33,335,279,278,336,451,451,451,451,33,334,280,279,335,452,452,452,452,33,333,281,280,334,453,453,453,453,33,332,282,281,333,454,454,454,454,33,331,283,282,332,455,455,455,455,33,330,284,283,331,456,456,456,456,33,329,285,284,330,457,457,457,457,33,329,328,286,285,458,458,458,458,33,328,327,287,286,459,459,459,459,33,327,326,288,287,460,460,460,460,33,288,326,307,289,461,461,461,461,33,360,359,309,308,427,427,427,427,33,359,358,310,309,428,428,428,428,33,358,357,311,310,429,429,429,429,33,357,356,312,311,430,430,430,430,33,356,355,313,312,431,431,431,431,33,355,354,314,313,462,462,462,462,33,354,353,315,314,463,463,463,463,33,353,352,316,315,434,434,434,434,33,352,351,317,316,435,435,435,435,33,351,350,318,317,436,436,436,436,33,350,349,319,318,437,437,437,437,33,349,348,320,319,438,438,438,438,33,348,347,321,320,439,439,439,439,33,347,346,322,321,440,440,440,440,33,346,345,323,322,441,441,441,441,33,345,344,324,323,464,464,464,464,33,344,343,325,324,465,465,465,465,32,361,272,306,466,466,466,32,361,306,253,467,467,467,32,56,55,88,467,467,467,32,97,56,88,466,466,466,32,88,361,253,468,468,468,32,210,121,156,469,469,469,32,88,253,210,470,470,470,32,104,97,88,467,467,467,32,210,156,104,471,471,471,32,210,104,88,472,472,472,32,88,29,28,473,473,473,32,88,28,87,474,474,474,32,308,342,361,475,475,475,32,360,308,361,474,474,474,32,361,88,87,467,467,467,32,209,158,193,471,471,471,32,361,87,209,474,474,474,32,252,360,361,476,476,476,32,209,193,252,469,469,469,32,209,252,361,477,477,477,32,371,362,363,478,478,478,32,371,363,364,479,479,479,32,369,370,371,167,167,167,32,367,368,369,480,480,480,32,365,366,367,481,481,481,32,371,364,365,482,482,482,32,367,369,371,483,483,483,32,365,367,371,484,484,484,33,372,373,363,362,485,485,485,485,33,373,374,364,363,486,486,486,486,33,374,375,365,364,487,487,487,487,33,366,365,375,376,488,488,488,488,32,377,367,366,474,474,474,32,377,366,376,474,474,474,32,383,442,384,489,489,489,32,382,383,384,474,474,474,32,384,377,376,490,490,490,32,378,379,380,474,474,474,32,384,376,378,491,491,491,32,381,382,384,492,492,492,32,378,380,381,474,474,474,32,378,381,384,491,491,491,32,377,385,386,493,493,493,32,386,368,367,494,494,494,32,386,367,377,493,493,493,33,368,386,387,369,495,495,495,495,33,369,387,388,370,496,496,496,496,32,371,370,388,497,497,497,32,388,389,390,498,498,498,32,388,390,371,498,498,498,32,378,376,375,499,499,499,32,375,374,373,500,500,500,32,373,372,391,501,501,501,32,373,391,392,502,502,502,32,378,375,373,503,503,503,32,394,378,373,504,504,504,32,373,392,393,505,505,505,32,373,393,394,506,506,506,32,384,447,395,507,507,507,32,384,395,396,467,467,467,32,402,385,377,467,467,467,32,401,402,377,466,466,466,32,377,384,396,508,508,508,32,397,398,399,466,466,466,32,377,396,397,509,509,509,32,400,401,377,467,467,467,32,397,399,400,467,467,467,32,397,400,377,467,467,467,33,378,394,403,379,510,510,510,510,32,380,379,403,511,511,511,32,403,404,405,512,512,512,32,405,406,407,501,501,501,32,405,407,408,478,478,478,32,380,403,405,513,513,513,32,412,380,405,514,514,514,32,405,408,409,478,478,478,32,405,409,410,515,515,515,32,411,412,405,516,516,516,32,405,410,411,517,517,517,33,380,412,413,381,518,518,518,518,32,382,381,413,167,167,167,32,413,414,415,519,519,519,32,415,416,417,520,520,520,32,417,418,419,501,501,501,32,417,419,420,521,521,521,32,413,415,417,522,522,522,32,425,382,413,167,167,167,32,424,425,413,523,523,523,32,413,417,420,524,524,524,32,413,420,421,525,525,525,32,423,424,413,526,526,526,32,413,421,422,527,527,527,32,413,422,423,528,528,528,33,382,425,426,383,529,529,529,529,32,383,426,427,530,530,530,32,427,428,429,167,167,167,32,429,430,431,531,531,531,32,431,432,433,501,501,501,32,431,433,434,532,532,532,32,427,429,431,533,533,533,32,441,442,383,167,167,167,32,440,441,383,534,534,534,32,431,434,435,478,478,478,32,431,435,436,535,535,535,32,440,383,427,536,536,536,32,439,440,427,479,479,479,32,427,431,436,537,537,537,32,427,436,437,532,532,532,32,438,439,427,167,167,167,32,427,437,438,532,532,532,32,442,447,384,538,538,538,32,446,389,388,539,539,539,32,388,387,386,540,540,540,32,386,385,402,541,541,541,32,386,402,443,542,542,542,32,445,446,388,539,539,539,32,386,443,444,543,543,543,32,444,445,388,544,544,544,32,388,386,444,545,545,545,33,406,405,392,391,546,546,546,546,33,393,392,405,404,547,547,547,547,33,394,393,404,403,548,548,548,548,32,395,447,448,129,129,129,32,395,448,449,129,129,129,32,462,463,395,549,549,549,32,460,461,462,550,550,550,32,458,459,460,551,551,551,32,456,457,458,552,552,552,32,455,456,458,553,553,553,32,458,460,462,554,554,554,32,462,395,449,555,555,555,32,462,449,450,556,556,556,32,454,455,458,557,557,557,32,453,454,458,558,558,558,32,462,450,451,559,559,559,32,462,451,452,129,129,129,32,453,458,462,560,560,560,32,452,453,462,561,561,561,33,395,463,464,396,529,529,529,529,32,397,396,464,129,129,129,32,397,464,465,562,562,562,32,475,476,397,563,563,563,32,473,474,475,564,564,564,32,471,472,473,565,565,565,32,469,470,471,566,566,566,32,468,469,471,567,567,567,32,471,473,475,568,568,568,32,475,397,465,569,569,569,32,475,465,466,570,570,570,32,468,471,475,571,571,571,32,475,466,467,572,572,572,32,467,468,475,573,573,573,33,397,476,477,398,518,518,518,518,32,399,398,477,129,129,129,32,399,477,478,574,574,574,32,485,486,399,575,575,575,32,483,484,485,576,576,576,32,481,482,483,129,129,129,32,480,481,483,577,577,577,32,483,485,399,578,578,578,32,399,478,479,579,579,579,32,479,480,483,580,580,580,32,479,483,399,581,581,581,33,399,486,487,400,510,510,510,510,32,401,400,487,582,582,582,32,401,487,488,583,583,583,32,493,494,401,584,584,584,32,491,492,493,585,585,585,32,489,490,491,586,586,586,32,401,488,489,587,587,587,32,491,493,401,588,588,588,32,489,491,401,589,589,589,33,401,494,443,402,488,488,488,488,33,418,417,408,407,590,590,590,590,33,417,416,409,408,591,591,591,591,33,416,415,410,409,592,592,592,592,33,415,414,411,410,593,593,593,593,33,414,413,412,411,594,594,594,594,33,432,431,420,419,595,595,595,595,33,421,420,431,430,596,596,596,596,33,422,421,430,429,597,597,597,597,33,423,422,429,428,598,598,598,598,33,424,423,428,427,599,599,599,599,33,425,424,427,426,600,600,600,600,32,455,434,433,601,601,601,32,495,456,455,602,602,602,32,433,495,455,602,602,602,33,434,455,454,435,603,603,603,603,33,436,435,454,453,604,604,604,604,33,436,453,452,437,605,605,605,605,33,437,452,451,438,606,606,606,606,33,438,451,450,439,607,607,607,607,33,440,439,450,449,608,608,608,608,33,441,440,449,448,609,609,609,609,33,441,448,447,442,610,610,610,610,33,493,444,443,494,487,487,487,487,33,492,445,444,493,486,486,486,486,33,446,445,492,491,485,485,485,485,33,470,469,458,457,595,595,595,595,33,468,459,458,469,596,596,596,596,33,467,460,459,468,597,597,597,597,33,466,461,460,467,611,611,611,611,33,465,462,461,466,612,612,612,612,33,464,463,462,465,613,613,613,613,33,482,481,472,471,590,590,590,590,33,472,481,480,473,591,591,591,591,33,473,480,479,474,614,614,614,614,33,474,479,478,475,615,615,615,615,33,475,478,477,476,616,616,616,616,33,490,489,484,483,546,546,546,546,33,488,485,484,489,617,617,617,617,33,487,486,485,488,548,548,548,548,32,390,389,446,70,70,70,32,390,446,491,70,70,70,32,457,456,495,70,70,70,32,470,457,495,70,70,70,32,495,390,491,618,618,618,32,490,483,482,70,70,70,32,495,491,490,619,619,619,32,471,470,495,70,70,70,32,490,482,471,70,70,70,32,490,471,495,70,70,70,32,495,433,432,71,71,71,32,495,432,419,72,72,72,32,362,371,390,70,70,70,32,372,362,390,71,71,71,32,390,495,419,620,620,620,32,418,407,406,71,71,71,32,390,419,418,621,621,621,32,391,372,390,622,622,622,32,418,406,391,72,72,72,32,418,391,390,621,621,621]},"eight_R_b":{"uvs":[],"normals":[-0.405246,0,0.914208,-0.449615,0,0.893223,0.405242,0,-0.914209,-0.492899,0,0.870087,0.359903,0,-0.93299,0.449614,0,-0.893223,-0.534999,0,0.844853,6.42024e-7,1,-8.07983e-7,-3.85342e-8,1,-3.85342e-8,3.06014e-7,1,-3.83082e-7,-3.19657e-8,1,-2.6235e-8,-4.85121e-7,1,6.88815e-7,-4.15265e-7,1,7.33041e-7,0,1,0,-1.77565e-8,1,-1.06423e-8,-2.315e-8,1,-3.6977e-8,-1.68993e-7,1,1.45929e-7,-3.48958e-8,1,-2.33456e-8,-3.76228e-8,1,-1.77948e-8,2.51619e-7,1,-4.4417e-7,1.9557e-7,1,-2.50601e-7,1.49612e-7,1,-2.84687e-7,-1.77551e-8,1,-1.06446e-8,2.40275e-7,1,-4.57203e-7,-0.170966,0,0.985277,0.492897,0,-0.870087,0.653175,0,-0.757207,-0.405239,0,0.914211,-0.575813,0,0.817582,0,1,0,-3.85343e-8,1,-3.85343e-8,8.05603e-8,1,-1.57629e-7,-6.51545e-7,1,7.55318e-7,-5.74369e-7,1,8.15537e-7,-4.91616e-7,1,8.67818e-7,2.66025e-7,1,-9.61293e-7,4.87232e-8,1,-2.44948e-7,9.55808e-8,1,-2.30749e-7,-1.96869e-8,1,-1.45992e-8,-5.55309e-8,1,-1.45021e-8,1.63101e-7,1,-2.61059e-7,-0.00000446989,1,0.00000564745,0,1,0,2.68668e-7,1,-3.81478e-7,-4.23145e-8,1,-2.53616e-8,-4.9167e-8,1,1.45851e-7,-0.00000155497,1,0.00000692438,1.67856e-7,1,-4.43154e-7,-1.24447e-7,1,4.49698e-7,-4.6449e-8,1,-1.6619e-8,-1.9823e-7,1,3.90458e-7,-0.359901,0,0.932991,0.535,0,-0.844852,1.78237e-7,1,-2.78658e-7,0,1,0,-3.44661e-8,1,-2.46667e-8,-1.44085e-8,1,-5.65555e-8,-5.73505e-7,1,6.64852e-7,-1.39131e-7,1,-1.94898e-7,2.73764e-9,1,-8.55943e-8,-1.80227e-8,1,2.84609e-8,1.83318e-7,1,-2.5734e-7,-5.05562e-7,1,7.17835e-7,-4.32819e-7,1,7.64034e-7,-5.50092e-7,1,0.00000124098,-1.35827e-8,1,-3.52109e-8,-1.8505e-8,1,-1.10904e-8,7.40599e-9,1,-6.69286e-8,2.67644e-9,1,-1.00176e-7,-3.26489e-8,1,1.25071e-8,6.22178e-10,1,-4.94603e-8,1.91989e-8,1,-1.59411e-7,-6.08447e-8,1,2.17217e-7,1.63766e-7,1,-7.68175e-7,-1.57448e-8,1,4.0816e-8,-1.9459e-8,1,5.89025e-8,-0.449615,0,0.893222,-0.313683,0,0.949528,-0.615231,0,0.788347,0.405244,0,-0.914209,-0.313686,0,0.949527,0.575812,0,-0.817582,-0.492899,0,0.870086,-0.266711,0,0.963777,0.405249,0,-0.914206,-0.653173,0,0.757209,0.4929,0,-0.870086,-0.57581,0,0.817583,-0.266712,0,0.963776,0.359896,0,-0.932992,0.615232,0,-0.788346,-0.534999,0,0.844853,0.707107,0,-0.707107,0.44961,0,-0.893225,-0.122411,0,0.99248,-0.622114,0,0.782926,3.44216e-7,1,-4.48511e-7,-7.83333e-9,1,-4.99677e-8,2.23614e-7,1,-2.81416e-7,-2.41287e-8,1,-1.98022e-8,-1.73018e-8,1,-1.15619e-8,-1.83524e-8,1,-9.8093e-9,-1.28913e-8,1,-2.90855e-8,2.63384e-9,1,-5.30879e-8,4.95308e-10,1,-5.42738e-8,-2.52918e-8,1,3.17331e-9,4.22429e-8,1,-1.00676e-7,-8.3912e-9,1,-3.7468e-8,-5.278e-9,1,-3.58578e-8,-7.35144e-9,1,-3.38062e-8,2.1456e-8,1,-6.65809e-8,1.27888e-9,1,-4.59611e-8,-6.09599e-9,1,-2.72023e-8,-4.33891e-8,1,8.12201e-9,-4.94795e-9,1,-3.03848e-8,7.56842e-9,1,-5.76339e-8,-0.219106,0,0.975701,0.313685,0,-0.949527,0.653173,0,-0.757209,0.534999,0,-0.844853,-0.575815,0,0.81758,0.492901,0,-0.870085,-0.359896,0,0.932992,-0.707105,0,0.707109,0.266712,0,-0.963776,-0.0735681,0,0.99729,0.60883,0,-0.793301,-0.615233,0,0.788346,0.535,0,-0.844852,0.707107,0,0.707107,0.707107,0,0.707107,0.707103,-0.00000810377,0.707111,0.707107,0,0.707107,0.707104,0.000010376,0.707109,0.219103,0,-0.975702,-0.492897,0,0.870088,0.707108,0,-0.707105,-0.653171,0,0.75721,0.57581,0,-0.817583,-0.449618,0,0.893221,-0.534998,0,0.844853,-0.405246,0,0.914208,-0.813734,0,0.581237,0.17096,0,-0.985278,-0.615233,0,0.788345,-0.538831,0,0.842414,0.707105,0,0.707109,0.615234,0,-0.788345,0.449612,0,-0.893224,0.122419,0,-0.992478,0.57581,0,-0.817583,-0.428549,0,0.903519,-0.707107,0,0.707107,0.707097,0,0.707117,0.707097,0,0.707117,0.707107,0,0.707107,0.707107,0.0000431407,0.707107,0.707104,0.00000518324,0.707109,0.581237,0,-0.813734,0.653174,0,-0.757208,0.0735576,0,-0.997291,-0.707107,0,0.707107,4.69876e-8,1,-9.19386e-8,-7.83368e-9,1,-4.99678e-8,1.02592e-7,1,-1.60394e-7,-1.7477e-7,1,1.66592e-7,-1.9566e-8,1,-1.30725e-8,9.7407e-8,1,-2.19673e-7,7.54165e-8,1,-2.28188e-7,-1.12587e-8,1,-3.41622e-9,-4.28585e-9,1,-8.85471e-8,2.81952e-9,1,-3.82269e-8,3.80583e-9,1,-3.08546e-8,-1.69183e-9,1,-3.49538e-8,-1.59726e-8,1,-7.55584e-9,1.44225e-8,1,-6.39394e-8,-8.10067e-9,1,-4.39847e-8,1.25962e-9,1,-3.70086e-8,4.13339e-9,1,-5.00662e-8,-1.09389e-9,1,-3.90488e-8,6.1983e-10,1,-7.51454e-8,1.41558e-9,1,-4.15911e-8,3.07592e-9,1,-4.68686e-8,4.78212e-10,1,-5.79762e-8,1.17135e-9,1,-5.01106e-8,5.15133e-9,1,-5.17645e-8,-5.75934e-9,1,-3.66481e-8,2.4984e-9,1,-4.65708e-8,4.56428e-9,1,-4.58316e-8,-1.24852e-8,1,-2.76106e-8,7.74926e-9,1,-4.76759e-8,-1.51824e-8,1,-2.42682e-8,0.455086,0,-0.890447,0.707107,0,-0.707107,-0.0251875,0,0.999683,0.624133,0,-0.781318,-0.219107,0,0.975701,0.61523,0,-0.788347,-1,0,0,-0.653171,0,0.75721,-0.449615,0,0.893222,2.57839e-8,-1,5.81682e-8,4.96998e-7,-1,-9.87363e-7,4.50757e-7,-1,-7.11821e-7,5.18391e-7,-1,-6.64259e-7,-3.06014e-7,-1,3.83082e-7,-1.51173e-7,-1,2.38543e-7,3.33813e-8,-1,-1.54745e-8,-2.00631e-7,-1,3.98581e-7,0.00000254345,-1,-0.00000440541,-7.17045e-8,-1,1.36713e-7,3.85342e-8,-1,3.85342e-8,-6.42024e-7,-1,8.07983e-7,1.68993e-7,-1,-1.45929e-7,-1.52668e-7,-1,3.28734e-7,0,-1,0,4.27103e-7,-1,-4.71747e-7,3.46047e-8,-1,2.31223e-8,-3.14053e-7,-1,4.02422e-7,-0.405239,0,0.914211,-7.95598e-8,-1,1.67738e-7,0,-1,0,3.78383e-8,-1,3.10694e-8,5.74369e-7,-1,-8.15537e-7,-3.58945e-7,-1,9.30525e-7,3.12875e-7,-1,-9.47077e-7,-4.87232e-8,-1,2.44948e-7,1.17737e-7,-1,-2.20269e-7,-1.19068e-7,-1,2.22259e-7,0,-1,0,4.92206e-8,-1,1.28542e-8,1.18612e-7,-1,-9.8213e-8,0.00000446989,-1,-0.00000564745,0,-1,0,-2.68668e-7,-1,3.81478e-7,-1.7007e-7,-1,2.68569e-7,4.9167e-8,-1,-1.45851e-7,0.00000155497,-1,-0.00000692438,-1.14372e-7,-1,3.01952e-7,-7.81867e-8,-1,4.67444e-7,-1.76073e-7,-1,4.00934e-7,2.36105e-7,-1,-4.10939e-7,-0.359901,0,0.932991,-7.19818e-9,-1,2.56976e-8,-7.14916e-9,-1,2.58338e-8,4.32819e-7,-1,-7.64034e-7,5.05562e-7,-1,-7.17835e-7,3.33141e-8,-1,2.73391e-8,-9.37852e-8,-1,1.31213e-7,-9.3393e-8,-1,1.3075e-7,4.49202e-8,-1,3.21486e-8,-3.53091e-8,-1,6.83764e-9,-1.04813e-7,-1,1.95648e-7,-7.23403e-8,-1,1.81049e-7,-8.08297e-9,-1,2.44672e-8,3.19091e-8,-1,4.8005e-8,-3.46256e-8,-1,1.01011e-7,3.35664e-9,-1,3.8135e-8,-2.11057e-8,-1,4.76141e-8,-2.46413e-8,-1,4.89534e-8,1.02104e-8,-1,3.07711e-8,2.38825e-7,-1,-2.04835e-7,5.49657e-8,-1,-1.57625e-9,-5.4793e-8,-1,8.65273e-8,-1.39508e-7,-1,1.78763e-7,8.84884e-8,-1,-4.39345e-8,-0.313683,0,0.949528,0.405244,0,-0.914209,-0.266711,0,0.963777,0.405249,0,-0.914206,0.44961,0,-0.893225,-3.44216e-7,-1,4.48511e-7,-1.80014e-9,-1,4.03341e-8,-1.49076e-7,-1,1.87611e-7,2.41287e-8,-1,1.98022e-8,1.73018e-8,-1,1.15619e-8,-1.81461e-7,-1,3.83631e-7,1.28913e-8,-1,2.90855e-8,-2.63384e-9,-1,5.30879e-8,-9.95212e-9,-1,4.90298e-8,2.52918e-8,-1,-3.17331e-9,-4.22429e-8,-1,1.00676e-7,-1.44516e-9,-1,3.23803e-8,5.278e-9,-1,3.58578e-8,7.35144e-9,-1,3.38062e-8,3.37602e-9,-1,4.12041e-8,-1.27888e-9,-1,4.59611e-8,6.09599e-9,-1,2.72023e-8,-1.12612e-8,-1,5.80476e-8,-8.88417e-9,-1,6.87298e-8,6.62278e-9,-1,3.49699e-8,-0.219106,0,0.975701,0.313685,0,-0.949527,0.266712,0,-0.963776,0.608829,0,-0.793301,0.535,0,-0.844852,0.707103,-0.0000162075,0.707111,0.707104,0.0000048828,0.707109,-0.405246,0,0.914208,-0.813734,0,0.581237,0.707097,0,0.707117,0.707104,-0.0000329288,0.707109,0.653174,0,-0.757208,-2.81952e-9,-1,3.82269e-8,4.28585e-9,-1,8.85471e-8,1.12587e-8,-1,3.41622e-9,-7.54165e-8,-1,2.28188e-7,-9.7407e-8,-1,2.19673e-7,1.9566e-8,-1,1.30725e-8,-1.29303e-7,-1,2.03922e-7,-6.83947e-8,-1,1.06929e-7,-1.79989e-9,-1,4.03342e-8,-4.69876e-8,-1,9.19386e-8,-1.67369e-9,-1,3.7506e-8,6.8097e-8,-1,-3.66111e-8,-1.31363e-8,-1,6.20145e-8,-6.33088e-9,-1,6.14009e-8,4.49738e-9,-1,9.29175e-8,-2.2419e-9,-1,1.81755e-8,3.20432e-9,-1,3.4752e-8,-5.9983e-9,-1,4.93923e-8,-7.84102e-9,-1,4.98245e-8,3.746e-9,-1,4.99842e-8,-6.52978e-9,-1,2.90782e-8,3.75284e-9,-1,5.84232e-8,1.33386e-9,-1,2.07651e-8,3.9244e-9,-1,3.16969e-8,1.94558e-9,-1,3.31188e-8,-5.42072e-9,-1,5.2988e-8,1.53113e-7,-1,-2.2063e-7,2.40785e-8,-1,5.57747e-9,4.45273e-8,-1,-3.40305e-8,-1.64838e-8,-1,6.73803e-8,0.455086,0,-0.890447,0.707107,0,-0.707107,-1,0,0,-0.653171,0,0.75721],"faces":[33,0,1,2,3,0,0,0,0,33,1,7,8,2,1,1,1,1,33,5,4,12,13,2,2,2,2,33,7,15,16,8,3,3,3,3,33,18,12,4,11,4,4,4,4,33,14,5,13,19,5,5,5,5,33,15,23,24,16,6,6,6,6,32,45,58,74,7,7,7,32,74,88,100,8,8,8,32,100,89,75,9,9,9,32,75,59,46,10,10,10,32,46,35,25,11,11,11,32,25,17,9,12,12,12,32,9,10,3,13,13,13,32,9,3,2,13,13,13,32,46,25,9,14,14,14,32,100,75,46,15,15,15,32,45,74,100,16,16,16,32,45,100,46,17,17,17,32,9,2,8,18,18,18,32,9,8,16,19,19,19,32,34,45,46,20,20,20,32,24,34,46,21,21,21,32,46,9,16,22,22,22,32,16,24,46,23,23,23,33,309,301,116,125,24,24,24,24,33,22,14,19,28,25,25,25,25,33,257,239,59,75,26,26,26,26,33,30,31,21,20,27,27,27,27,33,23,33,34,24,28,28,28,28,32,132,137,136,29,29,29,32,136,130,129,30,30,30,32,129,135,131,31,31,31,32,131,121,112,32,32,32,32,112,97,84,33,33,33,32,84,69,55,34,34,34,32,55,54,64,29,29,29,32,64,78,91,35,35,35,32,91,105,115,29,29,29,32,115,124,133,29,29,29,32,133,139,141,29,29,29,32,141,142,140,13,13,13,32,141,140,138,29,29,29,32,115,133,141,13,13,13,32,64,91,115,36,36,36,32,84,55,64,37,37,37,32,131,112,84,38,38,38,32,136,129,131,39,39,39,32,132,136,131,29,29,29,32,115,141,138,13,13,13,32,115,138,134,13,13,13,32,132,131,84,40,40,40,32,122,132,84,41,41,41,32,115,134,125,29,29,29,32,115,125,116,42,42,42,32,113,122,84,43,43,43,32,98,113,84,44,44,44,32,64,115,116,45,45,45,32,64,116,106,46,46,46,32,85,98,84,29,29,29,32,71,85,84,47,47,47,32,64,106,92,48,48,48,32,64,92,79,49,49,49,32,71,84,64,50,50,50,32,64,79,70,42,42,42,32,64,70,71,42,42,42,33,37,30,20,26,51,51,51,51,33,32,22,28,38,52,52,52,52,32,81,94,107,53,53,53,32,107,118,119,29,29,29,32,107,119,108,54,54,54,32,81,107,108,55,55,55,32,109,102,101,29,29,29,32,81,108,109,56,56,56,32,66,81,109,29,29,29,32,109,101,93,54,54,54,32,80,65,50,57,57,57,32,109,93,80,58,58,58,32,51,66,109,59,59,59,32,39,51,109,60,60,60,32,109,80,50,61,61,61,32,50,38,28,62,62,62,32,28,19,13,63,63,63,32,13,12,18,64,64,64,32,13,18,27,65,65,65,32,50,28,13,66,66,66,32,39,109,50,67,67,67,32,29,39,50,68,68,68,32,50,13,27,69,69,69,32,61,60,47,29,29,29,32,50,27,61,70,70,70,32,21,29,50,29,29,29,32,20,21,50,71,71,71,32,50,61,47,72,72,72,32,50,47,36,73,73,73,32,26,20,50,74,74,74,32,50,36,26,75,75,75,33,31,40,29,21,76,76,76,76,33,276,262,79,92,77,77,77,77,33,33,44,45,34,78,78,78,78,33,9,169,170,10,79,79,79,79,33,48,37,26,36,80,80,80,80,33,43,32,38,50,81,81,81,81,33,40,52,39,29,82,82,82,82,33,288,276,92,106,83,83,83,83,33,42,41,54,55,84,84,84,84,33,44,57,58,45,85,85,85,85,33,193,181,17,25,86,86,86,86,33,298,306,122,113,87,87,87,87,33,62,48,36,47,88,88,88,88,33,41,49,64,54,89,89,89,89,33,56,43,50,65,90,90,90,90,33,52,67,51,39,91,91,91,91,33,89,100,256,271,92,92,92,92,33,53,42,55,69,93,93,93,93,33,315,309,125,134,94,94,94,94,33,57,73,74,58,95,95,95,95,32,56,72,86,96,96,96,32,86,99,87,97,97,97,32,87,73,57,98,98,98,32,57,44,33,99,99,99,32,33,23,15,100,100,100,32,15,7,1,101,101,101,32,1,0,6,102,102,102,32,6,11,4,103,103,103,32,6,4,5,104,104,104,32,15,1,6,105,105,105,32,57,33,15,106,106,106,32,86,87,57,107,107,107,32,56,86,57,108,108,108,32,57,15,6,109,109,109,32,6,5,14,110,110,110,32,6,14,22,111,111,111,32,43,56,57,112,112,112,32,6,22,32,113,113,113,32,32,43,57,114,114,114,32,57,6,32,115,115,115,33,76,62,47,60,116,116,116,116,33,49,63,78,64,117,117,117,117,33,72,56,65,80,118,118,118,118,33,207,193,25,35,119,119,119,119,33,67,82,66,51,120,120,120,120,33,68,53,69,84,121,121,121,121,33,262,249,70,79,122,122,122,122,33,73,87,88,74,123,123,123,123,33,63,77,91,78,124,124,124,124,33,318,315,134,138,125,125,125,125,33,86,72,80,93,126,126,126,126,33,82,95,81,66,127,127,127,127,33,83,68,84,97,128,128,128,128,32,256,100,88,129,129,129,32,256,88,87,130,130,130,32,101,102,255,130,130,130,32,256,87,99,131,131,131,32,99,101,255,132,132,132,32,99,255,256,133,133,133,33,77,90,105,91,134,134,134,134,33,270,284,98,85,135,135,135,135,33,99,86,93,101,136,136,136,136,33,95,110,94,81,137,137,137,137,33,96,83,97,112,138,138,138,138,33,250,270,85,71,139,139,139,139,33,284,298,113,98,140,140,140,140,33,249,250,71,70,141,141,141,141,33,102,109,272,255,142,142,142,142,33,90,103,115,105,143,143,143,143,33,306,311,132,122,144,144,144,144,33,110,117,107,94,145,145,145,145,33,109,108,280,272,146,146,146,146,33,111,96,112,121,147,147,147,147,33,181,169,9,17,148,148,148,148,33,103,114,124,115,149,149,149,149,33,224,207,35,46,150,150,150,150,33,310,304,136,137,151,151,151,151,33,117,127,118,107,152,152,152,152,32,119,118,127,153,153,153,32,128,129,130,129,129,129,32,295,119,127,154,154,154,32,128,130,294,155,155,155,32,295,127,128,156,156,156,32,128,294,295,157,157,157,33,108,119,295,280,158,158,158,158,33,120,111,121,131,159,159,159,159,33,133,124,114,123,160,160,160,160,33,304,294,130,136,161,161,161,161,32,111,120,126,162,162,162,32,126,128,127,163,163,163,32,127,117,110,164,164,164,32,110,95,82,165,165,165,32,82,67,52,166,166,166,32,52,40,31,167,167,167,32,31,30,37,168,168,168,32,37,48,62,169,169,169,32,62,76,104,170,170,170,32,104,123,114,171,171,171,32,104,114,103,172,172,172,32,37,62,104,173,173,173,32,52,31,37,174,174,174,32,110,82,52,175,175,175,32,126,127,110,176,176,176,32,111,126,110,177,177,177,32,110,52,37,178,178,178,32,37,104,103,179,179,179,32,37,103,90,180,180,180,32,96,111,110,181,181,181,32,83,96,110,182,182,182,32,37,90,77,183,183,183,32,37,77,63,184,184,184,32,83,110,37,185,185,185,32,68,83,37,186,186,186,32,37,63,49,187,187,187,32,37,49,41,188,188,188,32,53,68,37,189,189,189,32,37,41,42,190,190,190,32,37,42,53,191,191,191,33,126,120,131,135,192,192,192,192,33,128,126,135,129,193,193,193,193,33,317,318,138,140,194,194,194,194,33,271,257,75,89,195,195,195,195,33,301,288,106,116,196,196,196,196,33,239,224,46,59,197,197,197,197,33,316,317,140,142,198,198,198,198,33,311,310,137,132,199,199,199,199,33,143,146,145,144,0,0,0,0,33,144,145,151,150,200,200,200,200,33,148,156,155,147,2,2,2,2,33,150,151,159,158,3,3,3,3,33,161,154,147,155,4,4,4,4,33,157,162,156,148,5,5,5,5,33,158,159,167,166,6,6,6,6,32,145,146,153,201,201,201,32,153,152,160,202,202,202,32,160,168,180,203,203,203,32,180,192,206,204,204,204,32,223,238,252,205,205,205,32,180,206,223,206,206,206,32,153,160,180,207,207,207,32,151,145,153,208,208,208,32,159,151,153,209,209,209,32,180,223,252,210,210,210,32,252,237,222,211,211,211,32,222,205,191,212,212,212,32,252,222,191,213,213,213,32,159,153,180,214,214,214,32,167,159,180,215,215,215,32,180,252,191,216,216,216,32,179,167,180,217,217,217,32,180,191,179,218,218,218,33,309,287,275,301,24,24,24,24,33,165,173,162,157,25,25,25,25,33,257,223,206,239,26,26,26,26,33,175,163,164,176,219,219,219,219,33,166,167,179,178,28,28,28,28,32,303,305,297,220,220,220,32,292,293,303,221,221,221,32,296,302,292,221,221,221,32,268,282,296,222,222,222,32,233,247,268,223,223,223,32,202,217,233,221,221,221,32,212,201,202,224,224,224,32,241,227,212,225,225,225,32,274,260,241,221,221,221,32,299,286,274,221,221,221,32,313,308,299,221,221,221,32,312,314,313,221,221,221,32,307,312,313,221,221,221,32,313,299,274,215,215,215,32,274,241,212,226,226,226,32,212,202,233,227,227,227,32,233,268,296,228,228,228,32,296,292,303,229,229,229,32,296,303,297,230,230,230,32,307,313,274,215,215,215,32,300,307,274,215,215,215,32,233,296,297,231,231,231,32,233,297,283,232,232,232,32,287,300,274,221,221,221,32,275,287,274,233,233,233,32,233,283,269,234,234,234,32,233,269,248,235,235,235,32,275,274,212,236,236,236,32,261,275,212,237,237,237,32,233,248,234,238,238,238,32,233,234,219,221,221,221,32,242,261,212,239,239,239,32,228,242,212,215,215,215,32,212,233,219,240,240,240,32,218,228,212,233,233,233,32,219,218,212,241,241,241,33,183,171,163,175,242,242,242,242,33,177,184,173,165,52,52,52,52,32,194,208,209,221,221,221,32,172,161,155,215,215,215,32,194,209,172,243,243,243,32,182,194,172,244,244,244,32,172,155,156,221,221,221,32,156,162,173,245,245,245,32,173,184,197,246,246,246,32,197,213,229,247,247,247,32,229,243,253,221,221,221,32,253,254,265,248,248,248,32,264,279,278,249,249,249,32,229,253,265,229,229,229,32,264,278,263,250,250,250,32,229,265,264,251,251,251,32,173,197,229,252,252,252,32,172,156,173,253,253,253,32,171,182,172,254,254,254,32,163,171,172,255,255,255,32,172,173,229,256,256,256,32,264,263,244,221,221,221,32,172,229,264,257,257,257,32,164,163,172,258,258,258,32,174,164,172,259,259,259,32,172,264,244,260,260,260,32,172,244,230,261,261,261,32,185,174,172,262,262,262,32,198,185,172,263,263,263,32,172,230,214,264,264,264,32,198,172,214,265,265,265,33,176,164,174,186,76,76,76,76,33,276,242,228,262,266,266,266,266,33,178,179,191,190,78,78,78,78,33,152,153,170,169,267,267,267,267,33,195,182,171,183,80,80,80,80,33,189,197,184,177,81,81,81,81,33,186,174,185,199,82,82,82,82,33,288,261,242,276,268,268,268,268,33,188,202,201,187,269,269,269,269,33,190,191,205,204,85,85,85,85,33,193,168,160,181,86,86,86,86,33,298,269,283,306,87,87,87,87,33,210,194,182,195,88,88,88,88,33,187,201,212,196,89,89,89,89,33,203,213,197,189,90,90,90,90,33,199,185,198,215,91,91,91,91,33,238,271,256,252,92,92,92,92,33,200,217,202,188,270,270,270,270,33,315,300,287,309,94,94,94,94,33,204,205,222,221,95,95,95,95,32,235,220,203,271,271,271,32,236,251,235,272,272,272,32,204,221,236,273,273,273,32,178,190,204,274,274,274,32,158,166,178,275,275,275,32,144,150,158,276,276,276,32,149,143,144,277,277,277,32,147,154,149,278,278,278,32,148,147,149,279,279,279,32,149,144,158,280,280,280,32,158,178,204,281,281,281,32,204,236,235,282,282,282,32,204,235,203,283,283,283,32,149,158,204,284,284,284,32,157,148,149,285,285,285,32,165,157,149,286,286,286,32,204,203,189,287,287,287,32,177,165,149,288,288,288,32,204,189,177,289,289,289,32,177,149,204,290,290,290,33,225,208,194,210,291,291,291,291,33,196,212,227,211,292,292,292,292,33,220,229,213,203,118,118,118,118,33,207,180,168,193,119,119,119,119,33,215,198,214,231,120,120,120,120,33,216,233,217,200,121,121,121,121,33,262,228,218,249,122,122,122,122,33,221,222,237,236,123,123,123,123,33,211,227,241,226,293,293,293,293,33,318,307,300,315,125,125,125,125,33,235,243,229,220,294,294,294,294,33,231,214,230,245,127,127,127,127,33,232,247,233,216,295,295,295,295,32,237,252,256,129,129,129,32,255,254,253,130,130,130,32,255,253,251,132,132,132,32,236,237,256,155,155,155,32,255,251,236,296,296,296,32,256,255,236,297,297,297,33,226,241,260,240,134,134,134,134,33,270,234,248,284,135,135,135,135,33,251,253,243,235,136,136,136,136,33,245,230,244,266,137,137,137,137,33,246,268,247,232,138,138,138,138,33,250,219,234,270,139,139,139,139,33,284,248,269,298,140,140,140,140,33,249,218,219,250,298,298,298,298,33,254,255,272,265,299,299,299,299,33,240,260,274,258,143,143,143,143,33,306,283,297,311,144,144,144,144,33,266,244,263,277,145,145,145,145,33,265,272,280,264,146,146,146,146,33,267,282,268,246,147,147,147,147,33,181,160,152,169,148,148,148,148,33,258,274,286,273,149,149,149,149,33,224,192,180,207,150,150,150,150,33,310,305,303,304,151,151,151,151,33,277,263,278,290,161,161,161,161,32,290,278,279,300,300,300,32,294,293,292,155,155,155,32,294,292,291,129,129,129,32,290,279,295,154,154,154,32,294,291,290,129,129,129,32,295,294,290,301,301,301,33,264,280,295,279,158,158,158,158,33,281,296,282,267,302,302,302,302,33,299,285,273,286,160,160,160,160,33,304,303,293,294,161,161,161,161,32,273,285,259,303,303,303,32,259,225,210,304,304,304,32,210,195,183,305,305,305,32,183,175,176,306,306,306,32,176,186,199,307,307,307,32,199,215,231,308,308,308,32,231,245,266,309,309,309,32,266,277,290,310,310,310,32,290,291,289,311,311,311,32,289,281,267,312,312,312,32,290,289,267,313,313,313,32,231,266,290,314,314,314,32,176,199,231,315,315,315,32,210,183,176,316,316,316,32,273,259,210,317,317,317,32,258,273,210,318,318,318,32,210,176,231,319,319,319,32,231,290,267,320,320,320,32,231,267,246,321,321,321,32,240,258,210,322,322,322,32,226,240,210,323,323,323,32,231,246,232,324,324,324,32,231,232,216,325,325,325,32,211,226,210,326,326,326,32,196,211,210,327,327,327,32,210,231,216,328,328,328,32,210,216,200,329,329,329,32,187,196,210,330,330,330,32,210,200,188,331,331,331,32,188,187,210,332,332,332,33,289,302,296,281,333,333,333,333,33,291,292,302,289,334,334,334,334,33,317,312,307,318,194,194,194,194,33,271,238,223,257,195,195,195,195,33,301,275,261,288,196,196,196,196,33,239,206,192,224,197,197,197,197,33,316,314,312,317,335,335,335,335,33,311,297,305,310,336,336,336,336],"vertices":[90.5878,1,0.820389,99.8345,1,4.91922,99.8345,4,4.91922,90.5878,4,0.820389,86.2945,1,7.66806,96.413,1,12.1533,89.9301,1,1.11191,110.071,1,10.0721,110.071,4,10.0721,100.476,4,3.56284,92.4385,4,0.0000305176,79.6142,1,5.09113,86.2945,4,7.66806,96.413,4,12.1533,106.299,1,17.1296,120.043,1,15.7211,120.043,4,15.7211,110.779,4,8.74879,79.6142,4,5.09113,106.299,4,17.1296,79.0213,4,25.2271,88.287,4,29.3342,115.929,1,22.5849,129.726,1,21.8525,129.726,4,21.8525,120.815,4,14.4341,69.5653,4,21.5794,79.1685,4,5.26306,115.929,4,22.5849,97.3398,4,33.8911,79.0213,1,25.2271,88.287,1,29.3342,125.28,1,28.5063,139.096,1,28.4518,139.096,4,28.4518,130.559,4,20.6049,59.9418,4,18.4002,69.5653,1,21.5794,125.28,4,28.5063,106.158,4,38.8867,97.3398,1,33.8911,75.9589,1,32.6203,84.8654,1,36.5683,134.329,1,34.8793,148.131,1,35.5027,148.131,4,35.5027,139.99,4,27.2466,50.1738,4,15.697,59.9418,1,18.4002,66.8694,1,29.114,134.329,4,34.8793,114.721,4,44.3089,106.158,1,38.8867,93.5675,1,40.9486,75.9589,4,32.6203,84.8654,4,36.5683,143.054,1,41.6887,156.809,1,42.9886,156.809,4,42.9886,149.083,4,34.3428,45.2417,4,14.5895,45.8457,4,14.4847,50.1738,1,15.697,57.6188,1,26.058,66.8694,4,29.114,143.054,4,41.6887,123.007,4,50.1448,114.721,1,44.3089,102.044,1,45.7506,93.5675,4,40.9486,75.3847,4,34.0065,84.2239,4,37.9247,151.435,1,48.9179,158.745,1,44.527,158.745,4,44.527,157.817,4,41.8768,45.2417,1,14.5895,48.2293,1,23.4596,57.6188,4,26.058,66.3639,4,30.5268,151.435,4,48.9179,130.997,4,56.3803,123.007,1,50.1448,110.275,1,50.9627,102.044,4,45.7506,92.8602,4,42.2719,153.087,1,50.1855,164.932,1,50.7142,164.932,4,50.7142,159.806,4,43.466,38.7237,1,21.325,48.2293,4,23.4596,57.1832,4,27.4939,153.087,4,50.1855,138.671,4,63.0002,130.997,1,56.3803,118.24,1,56.5724,110.275,4,50.9627,101.273,4,47.0376,159.274,1,56.3727,165.993,4,49.6532,159.274,4,56.3727,157.154,4,58.492,29.1247,1,19.6595,34.4812,1,16.4566,38.7237,4,21.325,47.8648,4,24.9151,139.648,4,63.6245,140.537,4,62.3811,151.851,4,51.0674,138.671,1,63.0002,125.92,1,62.5662,118.24,4,56.5724,109.441,4,52.2103,19.4556,1,18.4668,29.1247,4,19.6595,38.431,4,22.7966,139.648,1,63.6245,145.835,4,69.8117,147.962,4,67.6844,133.297,1,68.9296,125.92,4,62.5662,117.346,4,57.7776,17.1889,1,18.2996,19.4556,4,18.4668,28.9046,4,21.1436,133.989,1,69.2831,145.835,1,69.8117,140.176,1,75.4703,140.176,4,75.4703,139.115,4,76.5312,133.297,4,68.9296,124.969,4,63.7261,17.1889,4,18.2996,19.3085,4,19.9601,133.989,4,69.2831,132.928,4,70.3441,132.29,4,70.0414,9.66609,4,19.2487,11.5305,4,18.717,0.249969,4,19.0115,8.99995,4,19,0.249969,4,19,90.5878,-1,0.820389,99.8345,-1,4.91922,99.8345,-4,4.91922,90.5878,-4,0.820389,86.2945,-1,7.66806,96.413,-1,12.1533,89.9301,-1,1.11191,110.071,-1,10.0721,110.071,-4,10.0721,100.476,-4,3.56284,92.4385,-4,0.0000305176,79.6142,-1,5.09113,86.2945,-4,7.66806,96.413,-4,12.1533,106.299,-0.999999,17.1296,120.043,-0.999999,15.7211,120.043,-4,15.7211,110.779,-4,8.74879,79.6142,-4,5.09113,106.299,-4,17.1296,79.0213,-4,25.2271,88.287,-4,29.3342,115.929,-0.999999,22.5849,129.726,-0.999999,21.8525,129.726,-4,21.8525,120.815,-4,14.4341,100.476,1.55736e-7,3.56284,92.4385,9.09495e-13,0.0000305176,69.5653,-4,21.5794,79.1685,-4,5.26306,115.929,-4,22.5849,97.3398,-4,33.8911,79.0213,-0.999999,25.2271,88.287,-0.999999,29.3342,125.28,-0.999999,28.5063,139.096,-0.999999,28.4518,139.096,-4,28.4518,130.559,-4,20.6049,110.779,3.82422e-7,8.74879,59.9418,-4,18.4002,69.5653,-0.999999,21.5794,125.28,-4,28.5063,106.158,-4,38.8867,97.3398,-0.999999,33.8911,75.9589,-0.999999,32.6203,84.8654,-0.999998,36.5683,134.329,-0.999998,34.8793,148.131,-0.999998,35.5027,148.131,-4,35.5027,139.99,-4,27.2466,120.815,6.30934e-7,14.4341,50.1738,-4,15.697,59.9418,-0.999999,18.4002,66.8694,-0.999999,29.114,134.329,-4,34.8793,114.721,-4,44.3089,106.158,-0.999998,38.8867,93.5675,-0.999998,40.9486,75.9589,-4,32.6203,84.8654,-4,36.5683,143.054,-0.999998,41.6887,156.809,-0.999998,42.9886,156.809,-4,42.9886,149.083,-4,34.3428,130.559,9.0067e-7,20.6049,45.2417,-4,14.5895,45.8457,-4,14.4847,50.1738,-0.999999,15.697,57.6188,-0.999999,26.058,66.8694,-4,29.114,143.054,-4,41.6887,123.007,-4,50.1448,114.721,-0.999998,44.3089,102.044,-0.999998,45.7506,93.5675,-4,40.9486,75.3847,-4,34.0065,84.2239,-4,37.9247,151.435,-0.999998,48.9179,158.745,-0.999998,44.527,158.745,-4,44.527,157.817,-4,41.8768,139.99,0.00000119099,27.2466,45.2417,-0.999999,14.5895,48.2293,-0.999999,23.4596,57.6188,-4,26.058,66.3639,-4,30.5268,151.435,-4,48.9179,130.997,-4,56.3803,123.007,-0.999998,50.1448,110.275,-0.999998,50.9627,102.044,-4,45.7506,92.8602,-4,42.2719,153.087,-0.999998,50.1855,164.932,-0.999998,50.7142,164.932,-4,50.7142,159.806,-4,43.466,149.083,0.00000150117,34.3428,38.7237,-0.999999,21.325,48.2293,-4,23.4596,57.1832,-4,27.4939,153.087,-4,50.1855,138.671,-4,63.0002,130.997,-0.999998,56.3803,118.24,-0.999997,56.5724,110.275,-4,50.9627,101.273,-4,47.0376,75.3847,0.00000148647,34.0065,84.2239,0.00000165774,37.9247,159.274,-0.999998,56.3727,165.993,-4,49.6532,159.274,-4,56.3727,157.154,-4,58.492,157.154,0.00000255677,58.492,165.993,0.00000217041,49.6532,157.817,0.00000183049,41.8768,29.1247,-0.999999,19.6595,34.4812,-0.999999,16.4566,38.7237,-4,21.325,47.8648,-4,24.9151,66.3639,0.00000133437,30.5268,139.648,-4,63.6245,140.537,-4,62.3811,151.851,-4,51.0674,138.671,-0.999997,63.0002,125.92,-0.999997,62.5662,118.24,-4,56.5724,109.441,-4,52.2103,92.8602,0.00000184776,42.2719,159.806,0.00000189996,43.466,151.851,0.00000223223,51.0674,19.4556,-0.999999,18.4668,29.1247,-4,19.6595,38.431,-4,22.7966,57.1832,0.00000120179,27.4939,139.648,-0.999997,63.6245,145.835,-4,69.8117,147.962,-4,67.6844,140.537,0.00000272676,62.3811,133.297,-0.999997,68.9296,125.92,-4,62.5662,117.346,-4,57.7776,101.273,0.00000205608,47.0376,17.1889,-0.999999,18.2996,19.4556,-4,18.4668,28.9046,-4,21.1436,47.8648,0.00000108907,24.9151,133.989,-0.999997,69.2831,145.835,-0.999997,69.8117,140.176,-0.999997,75.4703,140.176,-4,75.4703,139.115,-4,76.5312,139.115,0.00000334529,76.5312,147.962,0.00000295858,67.6844,133.297,-4,68.9296,124.969,-4,63.7261,109.441,0.00000228218,52.2103,17.1889,-4,18.2996,19.3085,-4,19.9601,38.431,9.96472e-7,22.7966,133.989,-4,69.2831,132.928,-4,70.3441,132.928,0.00000307484,70.3441,132.29,-4,70.0414,117.346,0.00000252554,57.7776,9.66609,-4,19.2487,11.5305,-4,18.717,28.9046,9.24217e-7,21.1436,132.29,0.00000306161,70.0414,124.969,0.00000278555,63.7261,0.249969,-4,19.0115,8.99995,-4,19,0.249969,-4,19,19.3085,8.72481e-7,19.9601,0.249969,8.30518e-7,19,0.249969,8.31019e-7,19.0115,9.66609,8.41389e-7,19.2487],"metadata":{"generator":"io_three","normals":337,"uvs":0,"vertices":319,"version":3,"faces":446,"type":"Geometry"}},"double_turnout_L_a":{"uvs":[],"normals":[0.817583,0,0.575811,-0.788345,0,-0.615233,-0.757206,0,-0.653176,-0.335866,0,-0.94191,-0.817583,0,-0.575811,-0.99729,0,-0.0735666,-0.724245,0,-0.689543,2.64815e-7,-1,5.49165e-8,-6.90791e-9,-1,4.65523e-8,-2.42485e-7,-1,-1.82879e-8,-2.39521e-7,-1,-4.19666e-8,-1.50905e-8,-1,3.1908e-8,1.84379e-7,-1,1.58523e-7,-2.10281e-8,-1,2.8349e-8,1.57806e-7,-1,1.82726e-7,1.3914e-7,-1,1.97318e-7,1.19136e-7,-1,2.10015e-7,-2.01835e-8,-1,1.20971e-8,-1.18412e-7,-1,-2.09086e-7,-3.11503e-8,-1,-4.80728e-8,0,-1,0,-1.29523e-9,-1,6.41097e-8,4.53958e-9,-1,5.0876e-8,1.12663e-8,-1,6.45684e-8,-2.08245e-8,-1,2.08232e-8,2.85733e-8,-1,6.51361e-8,4.07319e-8,-1,5.83103e-8,5.01753e-8,-1,5.50199e-8,-7.95966e-14,-1,4.17441e-8,1.07998e-8,-1,3.79579e-8,1.67246e-8,-1,4.83661e-8,1.32482e-8,-1,5.48962e-8,8.59936e-9,-1,6.0577e-8,-3.18313e-10,-1,5.44304e-8,1.14129e-9,-1,5.00023e-8,-4.79903e-9,-1,4.8724e-8,-3.59923e-9,-1,3.65426e-8,3.22752e-9,-1,4.87787e-8,6.29969e-9,-1,5.03313e-8,1.09957e-8,-1,5.1584e-8,-2.08443e-8,-1,3.29419e-8,-1.09335e-9,-1,4.26229e-8,-2.47385e-7,-1,-5.27902e-7,4.39742e-9,-1,4.46266e-8,-1.10247e-7,-1,2.02751e-8,1.84122e-8,-1,9.10099e-8,4.9978e-9,-1,5.84727e-8,2.52045e-8,-1,4.69866e-8,-4.11632e-8,-1,3.65816e-8,7.72166e-10,-1,4.69628e-8,-6.27018e-10,-1,4.16109e-8,-2.93103e-9,-1,3.88541e-8,-3.99951e-9,-1,3.90835e-8,-5.88044e-10,-1,3.90244e-8,5.42744e-10,-1,3.80964e-8,-4.34436e-9,-1,3.97286e-8,-3.83056e-9,-1,4.10239e-8,-1.75769e-8,-1,3.47751e-8,2.04086e-8,-1,5.3221e-8,-4.11908e-9,-1,4.06431e-8,-9.79725e-8,-1,-2.41019e-8,-3.06404e-8,-1,2.20482e-8,-3.59091e-8,-1,1.85403e-8,-0.844851,0,-0.535001,0.788346,0,0.615233,-0.724245,0,-0.689543,-0.689538,0,-0.72425,0.724245,0,0.689543,0.757206,0,0.653176,0.870086,0,0.4929,0.615228,0,0.788349,-0.870086,0,-0.4929,0.817583,0,0.575811,-0.653171,0,-0.75721,0.724245,0,0.689543,-9.34612e-8,1,-0.00000126703,0,1,0,1.54232e-7,1,8.8888e-7,-1.09276e-7,1,-4.86633e-7,-1.56448e-7,1,-4.73578e-7,2.2129e-8,1,-1.04676e-8,-2.45845e-7,1,-4.33978e-7,1.96621e-8,1,-1.4583e-8,3.62056e-7,1,3.44791e-7,-3.44784e-7,1,-3.62054e-7,1.45839e-8,1,-1.96613e-8,4.46558e-7,1,2.24848e-7,2.0932e-8,1,-4.42592e-8,-4.5715e-7,1,-2.02572e-7,1.18983e-8,1,-4.74917e-8,-4.87833e-7,1,-1.09486e-7,-2.40828e-8,1,-5.08545e-8,0,1,-5.06407e-8,1.07305e-8,1,-4.86604e-8,-1.27163e-7,1,-5.59845e-8,-1.069e-7,1,-7.72491e-8,-8.97781e-8,1,-9.66217e-8,1.15849e-7,1,5.54421e-8,-5.54422e-8,1,-1.1585e-7,7.50059e-8,1,1.01332e-7,1.17271e-8,1,-3.55716e-9,0,1,0,1.93471e-10,1,-2.49258e-7,2.26808e-7,1,-2.08945e-8,2.423e-7,1,-1.98052e-8,-1.31531e-8,1,-1.87104e-7,0,1,0,4.81215e-9,1,-2.41922e-8,9.6243e-9,1,-4.83844e-8,2.41925e-8,1,-4.81213e-9,8.21417e-8,1,-1.99037e-8,0.00000353509,1,9.27108e-7,-3.22446e-8,1,-1.48513e-7,9.47913e-7,1,0.00000342534,2.415e-7,1,2.78431e-8,9.43948e-9,1,-2.27886e-8,-5.05121e-8,1,-2.31515e-7,1.88789e-8,1,-4.55771e-8,2.17337e-7,1,8.17922e-8,2.27887e-8,1,-9.43934e-9,2.30975e-8,1,-8.95816e-9,-1.72803e-7,1,-1.41e-7,2.84558e-8,1,-4.05613e-8,-8.696e-8,1,-2.01687e-7,-9.47057e-8,1,-2.17208e-7,-1.20582e-7,1,-1.05545e-7,-1.02544e-7,1,-1.32541e-7,-6.45257e-8,1,-1.4799e-7,-7.10128e-8,1,-1.43656e-7,-4.13619e-8,1,-7.3578e-8,-0.00000275306,1,-0.0000021798,-1.19845e-7,1,-1.94325e-7,-8.95459e-9,1,-5.15552e-8,2.12471e-7,1,1.18149e-7,1.74418e-8,1,-1.74416e-8,1.71158e-8,1,-1.79106e-8,1.74418e-8,1,-1.74417e-8,0.975702,0,0.219104,0.893223,0,0.449614,-0.893223,0,-0.449614,0.844852,0,0.535,-0.788345,0,-0.615233,-0.615228,0,-0.788349,0.534995,0,0.844856,0.689538,0,0.72425,-0.757207,0,-0.653175,1.67557e-8,-1,4.26887e-8,-6.0678e-9,-1,4.09053e-8,-1.00492e-8,-1,4.01132e-8,-1.39316e-8,-1,3.89354e-8,-1.76804e-8,-1,3.73826e-8,-2.12578e-8,-1,3.54706e-8,-2.46338e-8,-1,3.3215e-8,6.10207e-7,-1,5.80969e-7,-3.06403e-8,-1,2.77713e-8,4.85154e-7,-1,6.88869e-7,0,-1,0,1.09658e-7,-1,1.82568e-7,1.43166e-7,-1,1.57664e-7,-1.95172e-8,-1,3.65139e-8,-1.20187e-8,-1,3.96199e-8,5.18687e-10,-1,4.18823e-8,0,-1,4.25459e-8,-9.70371e-9,-1,4.10033e-8,-3.46048e-8,-1,2.31221e-8,3.14073e-7,-1,4.02451e-7,-1.75855e-8,-1,4.00894e-8,-9.36275e-9,-1,4.07665e-8,-4.3405e-7,-1,-4.79947e-7,-2.86947e-8,-1,3.04335e-8,-8.11942e-9,-1,4.08189e-8,-8.11941e-9,-1,4.08188e-8,-2.9429e-8,-1,2.94288e-8,-6.94966e-9,-1,4.12467e-8,-1.20189e-8,-1,3.96198e-8,-4.16994e-7,-1,-3.04757e-7,-5.19359e-7,-1,-3.86059e-7,-1.71361e-8,-1,3.81566e-8,-1.59269e-8,-1,3.84505e-8,-2.22064e-8,-1,3.54464e-8,-2.31222e-8,-1,3.46045e-8,-1.59269e-8,-1,3.84505e-8,-1.48646e-8,-1,3.90974e-8,-2.31222e-8,-1,3.46044e-8,-1.95178e-8,-1,3.65136e-8,-2.42523e-8,-1,3.40796e-8,-0.914208,0,-0.405244,0.870085,0,0.492901,-0.817582,0,-0.575811,-0.817582,0,-0.575812,0.844852,0,0.535001,-0.534994,0,-0.844856,-0.575806,0,-0.817586,0.00000184955,0,-1,0.653171,0,0.757211,-0.724245,0,-0.689543,0.757206,0,0.653176,-8.40709e-14,-1,4.40906e-8,1.6988e-8,-1,4.29723e-8,-2.16498e-7,-1,1.52185e-8,-1.01147e-8,-1,4.03708e-8,-1.40209e-8,-1,3.91857e-8,-2.07143e-7,-1,-5.76882e-8,1.63042e-7,-1,1.40181e-7,1.48526e-7,-1,1.55494e-7,-2.0963e-8,-1,2.31272e-8,-2.31284e-8,-1,2.09618e-8,1.05353e-7,-1,1.85719e-7,5.10416e-15,-1,4.18009e-8,-1.61443e-9,-1,3.04086e-8,1.14855e-8,-1,5.91526e-8,1.94998e-8,-1,5.98008e-8,-1.71873e-8,-1,3.2155e-8,-1.20958e-8,-1,3.98745e-8,-5.27506e-8,-1,3.95083e-8,-1.28895e-9,-1,4.31046e-8,-7.9189e-10,-1,4.33113e-8,5.81824e-9,-1,4.53087e-8,-8.5816e-9,-1,3.67548e-8,-2.25179e-9,-1,4.24136e-8,-3.82969e-8,-1,-2.02133e-8,4.93471e-9,-1,4.51325e-8,1.76564e-8,-1,4.679e-8,2.27777e-8,-1,8.84581e-8,-1.50659e-8,-1,1.57083e-8,4.94543e-9,-1,4.5266e-8,7.01248e-10,-1,4.48959e-8,-1.89665e-9,-1,4.72708e-8,-2.30523e-9,-1,4.44392e-8,-1.46019e-9,-1,4.48903e-8,1.54363e-8,-1,4.0587e-8,-1.27083e-9,-1,4.34048e-8,1.27469e-9,-1,4.37722e-8,1.07534e-8,-1,5.18923e-8,1.22391e-8,-1,5.43933e-8,6.20472e-9,-1,4.58292e-8,1.67326e-8,-1,5.13058e-8,-1.18615e-8,-1,3.0417e-8,-1.27654e-7,-1,-2.98425e-8,1.23257e-8,-1,5.07248e-8,-0.788345,0,-0.615233,-0.932992,0,-0.359897,0.986394,0,0.164401,0.893223,0,0.449613,-0.844852,0,-0.535,0.788346,0,0.615232,-0.534995,0,-0.844855,0.615228,0,0.788349,-0.689538,0,-0.72425,0.757206,0,0.653176,-0.949527,0,-0.313684,0.914208,0,0.405245,-0.870085,0,-0.492901,0.817582,0,0.575812,0.575807,0,0.817586,-0.653171,0,-0.757211,0.724245,0,0.689543,-0.914208,0,-0.405244,0.914208,0,0.405244,-0.963776,0,-0.266713,0.932992,0,0.359896,-0.893223,0,-0.449613,0.844853,0,0.534999,0.534995,0,0.844855,-0.575806,0,-0.817586,-0.615228,0,-0.788349,0.689537,0,0.72425,0.999685,0,0.0250853,-0.932992,0,-0.359897,0.963776,0,0.266714,-0.975701,0,-0.219105,0.00000509111,0,-1,0,0,-1,0.00000190677,0,-1,0,0,-1,0,0,-1,0,0,-1,0.949527,0,0.313686,-0.914208,0,-0.405246,0.870085,0,0.492902,-0.405238,0,-0.914211,0.492897,0,0.870088,-0.575807,0,-0.817586,0.653171,0,0.75721,0.653171,0,0.757211,-0.949527,0,-0.313684,0.992479,0,0.122413,-0.985277,0,-0.170963,0.963776,0,0.266712,-0.932993,0,-0.359895,0.893224,0,0.449613,-1,0,-0.00000259767,-0.534994,0,-0.844856,-4.22213e-9,-1,4.28882e-8,-8.4075e-9,-1,4.22675e-8,-1.25104e-8,-1,4.12398e-8,-1.64913e-8,-1,3.98154e-8,-2.03169e-8,-1,3.80059e-8,-2.39445e-8,-1,3.58314e-8,-6.92145e-7,-1,-5.40157e-7,-3.04745e-8,-1,3.04721e-8,-5.7348e-7,-1,-6.64827e-7,-5.05558e-7,-1,-7.17841e-7,-1.73282e-8,-1,1.28517e-8,-1.84425e-7,-1,-1.23479e-7,-2.21821e-8,-1,3.70089e-8,-1.45357e-8,-1,4.06254e-8,-6.33079e-9,-1,4.26805e-8,-2.2447e-13,-1,4.40907e-8,-1.04178e-7,-1,7.03449e-8,-1.0535e-8,-1,4.20569e-8,2.15974e-8,-1,6.32495e-8,8.08876e-10,-1,3.73068e-8,-8.6715e-8,-1,-2.24802e-7,-5.16308e-9,-1,4.34025e-8,0,-1,5.29819e-8,3.44713e-8,-1,4.91189e-8,9.47263e-8,-1,3.29801e-7,-1.96697e-8,-1,-3.90773e-8,0,-1,0,-2.30929e-9,-1,4.70057e-8,3.47299e-8,-1,1.56759e-7,-2.25314e-9,-1,4.71264e-8,-1.99837e-9,-1,4.74041e-8,1.24819e-8,-1,9.94311e-8,1.58945e-8,-1,2.03671e-8,-1.33467e-9,-1,4.79198e-8,1.2753e-10,-1,4.88516e-8,-2.08617e-9,-1,6.9612e-8,3.46102e-8,-1,3.63526e-8,3.27611e-9,-1,5.06312e-8,-3.47261e-7,-1,-1.33954e-7,-1.62893e-8,-1,4.94527e-8,-1.45922e-8,-1,4.95463e-8,1.46962e-7,-1,1.16608e-7,9.93709e-8,-1,9.28438e-8,-1.23256e-8,-1,5.00604e-8,1.43446e-7,-1,1.01027e-7,-7.57477e-8,-1,1.45436e-8,-4.12156e-8,-1,2.95881e-8,-4.90521e-8,-1,2.6285e-8,0.615228,0,0.78835,-6.09162e-15,1,-4.98878e-8,-2.10941e-8,1,-7.51124e-8,-4.50992e-8,1,-1.00057e-7,-5.46899e-8,1,-9.51552e-8,1.03357e-7,1,4.10789e-8,2.02336e-8,1,-3.02778e-8,1.11844e-7,1,1.55408e-8,1.59271e-8,1,-3.84504e-8,1.20801e-8,1,-3.98269e-8,8.11886e-9,1,-4.0819e-8,1.09786e-7,1,-3.36205e-8,8.11255e-14,1,-4.25459e-8,2.16342e-9,1,-4.40363e-8,-1.99142e-8,1,-4.63952e-8,1.40376e-8,1,-3.92331e-8,-3.321e-9,1,-4.60166e-8,-1.82907e-8,1,-5.87557e-8,-3.83265e-9,1,-4.97732e-8,-2.30665e-9,1,-4.39073e-8,2.03009e-9,1,-4.3881e-8,6.20909e-9,1,-3.65503e-8,-9.5129e-10,1,-4.45962e-8,2.11874e-9,1,-4.31268e-8,1.29841e-9,1,-4.31039e-8,-1.80561e-9,1,-4.60808e-8,-9.2068e-9,1,-5.1898e-8,2.08742e-9,1,-4.31515e-8,2.75333e-9,1,-4.32485e-8,-2.98445e-9,1,-4.6446e-8,1.47651e-8,1,-2.3542e-8,3.20189e-9,1,-4.34364e-8,3.29076e-9,1,-4.37912e-8,-1.61307e-9,1,-4.61505e-8,1.00801e-9,1,-4.18031e-8,9.05598e-9,1,-3.67094e-8,-7.92051e-9,1,-4.92321e-8,-1.03144e-9,1,-4.86231e-8,-1.90276e-9,1,-4.74483e-8,1.53072e-9,1,-4.34223e-8,-5.61906e-8,1,-6.61427e-8,-1.44543e-8,1,-4.73987e-8,2.91863e-8,1,-3.35414e-8,-1.31628e-9,1,-4.40716e-8,-0.992479,0,-0.122412,0.975701,0,0.219105,-0.949527,0,-0.313686,0.914207,0,0.405247,-0.492897,0,-0.870088,0.575807,0,0.817586,0.932992,0,0.359897,-0.757206,0,-0.653175,-0.975701,0,-0.219105,-0.073564,0,-0.99729,-0.99729,0,-0.0735675,0.985278,0,0.170963,-0.963776,0,-0.266712,0.932993,0,0.359894,-0.949526,0,-0.313688,-0.844853,0,-0.534999,-0.449608,0,-0.893226,0.534994,0,0.844856,0.575806,0,0.817586,-0.999685,0,-0.0250881,0,0,1,1.19599e-7,0,1,0,0,1,1.19599e-7,0,1,0,0,0,1.22107e-7,0,1,8.1066e-8,0,1,8.1066e-8,0,1,1.50664e-7,-7.43125e-7,1,1.33346e-7,0,1,8.1066e-8,0,1,0.999685,0,0.0251075,0.992479,0,0.122414,-0.975701,0,-0.219104,0.949526,0,0.313687,-0.893223,0,-0.449613,0.492897,0,0.870088,-0.405238,0,-0.914211,-1.10561e-14,1,-9.24431e-8,1.41089e-7,1,1.8254e-7,-2.35493e-7,1,-3.71787e-7,1.5966e-8,1,-1.44706e-8,3.46906e-7,1,2.70798e-7,2.56716e-8,1,-3.4615e-8,-3.59822e-7,1,-2.53354e-7,1.84253e-8,1,-3.89581e-8,1.45182e-8,1,-4.05765e-8,1.04727e-8,1,-4.18037e-8,6.32384e-9,1,-4.2629e-8,-1.83133e-8,1,-4.45506e-8,2.69736e-13,1,-5.29819e-8,0,1,-5.29819e-8,8.00739e-8,1,-3.96618e-8,-3.44713e-8,1,-4.91189e-8,6.86174e-14,1,-3.70996e-8,8.41807e-9,1,-4.23183e-8,1.65113e-8,1,-3.98633e-8,1.1226e-7,1,2.96034e-8,-5.85612e-8,1,-9.66992e-8,-1.36053e-8,1,-7.26036e-8,-1.49476e-9,1,-6.92393e-8,-1.06848e-8,1,-2.41047e-8,3.03622e-8,1,-7.77525e-9,-5.1033e-9,1,-4.88165e-8,4.55106e-9,1,-4.30875e-8,-3.49153e-8,1,-4.97516e-8,-6.81751e-8,1,-5.58132e-8,-2.84574e-9,1,-4.76098e-8,1.5256e-9,1,-4.92905e-8,-1.1898e-10,1,-4.79362e-8,9.5874e-9,1,-4.38301e-8,1.40886e-8,1,-4.53063e-8,-2.27471e-9,1,-4.75629e-8,-5.13188e-9,1,-4.81408e-8,1.37552e-8,1,-4.51306e-8,-5.26304e-9,1,-2.58646e-8,-9.04327e-9,1,-4.98244e-8,4.66555e-8,1,-1.79434e-8,1.74653e-9,1,-4.89719e-8,1.58434e-9,1,-4.98158e-8,-3.76029e-8,1,-7.36116e-8,-5.9997e-8,1,-8.96031e-8,9.0993e-10,1,-5.10597e-8,3.35151e-8,1,-9.46581e-9,1.44816e-7,1,6.2786e-8,-7.58106e-7,1,-6.21474e-7,-1.87856e-8,1,-6.47149e-8,6.00041e-8,1,1.01536e-8,4.29655e-9,1,-4.18441e-8,-7.32885e-8,1,-1.09161e-7,-0.986394,0,0.1644,0.99729,0,0.0735674,-0.870085,0,-0.492902,-0.963777,0,-0.26671,0,0,-1,0,0,-1,-0.999683,0,-0.0251615,-0.689537,0,-0.72425,0.99729,0,0.0735672,-0.985278,0,-0.170962,0.963777,0,0.266711,-0.932993,0,-0.359894,-0.914208,0,-0.405246,0.449608,0,0.893226,-0.359892,0,-0.932994,-0.615228,0,-0.788349,0.999683,0,0.0251866,-0.99729,0,-0.0735668,-0.992479,0,-0.122415,0.975701,0,0.219105,0.405238,0,0.914211,-0.313679,0,-0.949529,-0.999683,0,-0.0251908,0,1,-8.36017e-8,7.0764e-7,1,9.68878e-7,-2.43177e-7,1,-3.45203e-7,-2.75851e-7,1,-3.19714e-7,-3.05845e-7,1,-2.91124e-7,3.67394e-7,1,2.08186e-7,1.94947e-8,1,-3.64694e-8,1.58252e-8,1,-3.8205e-8,1.20035e-8,1,-3.95724e-8,8.06688e-9,1,-4.05584e-8,4.05373e-9,1,-4.11537e-8,0,1,-6.34024e-8,-1.56806e-7,1,-4.64812e-8,6.07505e-9,1,-4.09546e-8,1.39482e-8,1,-3.89825e-8,-7.17331e-8,1,-8.5232e-8,2.08542e-8,1,-2.30073e-8,3.84665e-8,1,-2.01721e-9,-5.76229e-8,1,-1.17947e-7,1.55991e-7,1,1.32258e-7,-1.55452e-7,1,-7.4046e-8,8.2378e-10,1,-4.18197e-8,-6.76787e-8,1,-1.40247e-7,1.54187e-8,1,-1.39748e-8,6.07586e-9,1,-4.09545e-8,1.13519e-8,1,-4.0258e-8,1.54187e-8,1,-1.39747e-8,2.16673e-7,1,1.48844e-7,1.01124e-8,1,-4.03713e-8,1.01124e-8,1,-4.03714e-8,2.08509e-8,1,-2.30102e-8,2.05246e-7,1,1.49574e-7,8.96675e-9,1,-4.08554e-8,1.3949e-8,1,-3.89822e-8,2.47923e-8,1,-3.34283e-8,2.47923e-8,1,-3.34283e-8,1.89877e-8,1,-3.72698e-8,1.77945e-8,1,-3.76227e-8,2.58925e-8,1,-3.28501e-8,1.77945e-8,1,-3.76226e-8,-2.58589e-7,1,-1.9723e-7,2.30475e-7,1,1.06654e-7,-6.44581e-9,1,-6.57334e-8,1.59537e-8,1,-7.54607e-9,7.9263e-8,1,9.21931e-8,9.26431e-8,1,8.04759e-8,2.17944e-8,1,-1.97531e-8,1.1051e-7,1,5.64933e-8,2.10281e-8,1,-2.8349e-8,1.22429e-7,1,2.8801e-8,1.24668e-7,1,1.66652e-8,1.38728e-8,1,-3.87723e-8,1.26961e-7,1,-1.36815e-8,-1.12054e-7,1,-6.12253e-8,-1.93607e-8,1,-4.27072e-8,8.38348e-14,1,-4.39668e-8,1.28802e-9,1,-4.28483e-8,2.89997e-8,1,-4.03017e-8,-1.62853e-8,1,-4.95631e-8,1.80476e-8,1,-3.37632e-8,-1.68343e-9,1,-4.51931e-8,2.61193e-9,1,-4.09179e-8,2.75302e-9,1,-3.54569e-8,9.15696e-10,1,-4.5324e-8,-5.64025e-9,1,-1.04081e-7,-5.35436e-9,1,-5.06249e-8,1.40361e-9,1,-4.26597e-8,7.08593e-9,1,-4.24735e-8,8.68737e-10,1,-4.30438e-8,-6.58791e-10,1,-4.35808e-8,3.04775e-9,1,-1.43516e-8,1.56235e-9,1,-4.02325e-8,-4.73035e-9,1,-4.48313e-8,-3.75926e-9,1,-4.47373e-8,1.35549e-9,1,-3.49056e-8,3.55533e-9,1,-4.17827e-8,-3.88568e-10,1,-4.45438e-8,1.47455e-9,1,-4.46162e-8,1.86604e-9,1,-4.1083e-8,-8.3016e-10,1,-4.24724e-8,-6.80193e-9,1,-4.19688e-8,-4.04005e-9,1,-4.86365e-8,1.58777e-9,1,-4.02352e-8,-1.60932e-7,1,-3.33736e-7,-2.09013e-10,1,-4.12019e-8,-2.36e-9,1,-4.35266e-8,3.19308e-8,1,1.61171e-8,2.96272e-9,1,-3.82944e-8,-9.74061e-9,1,-5.0106e-8,-1.56969e-8,1,-5.33896e-8,-6.71453e-9,1,-5.83264e-8,-4.31827e-9,1,-5.18401e-8,-7.78315e-10,1,-4.5447e-8,5.02208e-9,1,-4.26448e-8,-3.23987e-9,1,-3.88942e-8,-8.31566e-9,1,-4.75724e-8,4.3807e-9,1,-4.65147e-8,0.99729,0,0.0735664,0.985277,0,0.170963,-2.0932e-8,-1,4.42592e-8,8.42781e-7,-1,5.33687e-7,-2.91678e-8,-1,3.93226e-8,-7.55332e-7,-1,-6.51559e-7,6.51558e-7,-1,7.55341e-7,5.7441e-7,-1,8.15602e-7,4.91689e-7,-1,8.67956e-7,4.04227e-7,-1,9.11929e-7,-3.58992e-7,-1,-9.3066e-7,-2.26436e-8,-1,9.37954e-9,-2.03789e-8,-1,1.36166e-8,-1.73313e-8,-1,1.73302e-8,-2.27835e-7,-1,-1.0802e-7,-1.94823e-8,-1,4.49449e-8,-9.61205e-7,-1,-2.65999e-7,-9.55155e-9,-1,4.80187e-8,-4.78828e-9,-1,4.87248e-8,0,-1,5.02478e-8,-2.48474e-9,-1,5.05781e-8,-7.19144e-9,-1,4.84881e-8,-2.00106e-7,-1,-3.51206e-8,-2.42065e-9,-1,4.92734e-8,-1.31367e-9,-1,4.9529e-8,-7.19507e-9,-1,4.84876e-8,-1.31257e-8,-1,4.77768e-8,3.75769e-8,-1,3.20697e-7,-1.19867e-8,-1,4.78539e-8,9.97159e-8,-1,3.01847e-7,1.67921e-7,-1,4.35323e-7,4.3213e-7,-1,1.94699e-7,0.000006698,-1,0.00000263655,-2.26439e-8,-1,9.37887e-9,-1.89079e-7,-1,-4.26559e-7,0.00000262775,-1,0.00000105571,-2.43416e-8,-1,4.31556e-8,-4.35077e-8,-1,2.32552e-8,-2.32554e-8,-1,4.35071e-8,-1.90846e-7,-1,-2.41507e-7,0.00000381344,-1,0.00000611433,3.62262e-7,-1,2.86273e-7,-1.04361e-7,-1,-7.71256e-9,-2.68655e-7,-1,-3.81461e-7,-3.81348e-8,-1,3.12962e-8,-3.22917e-8,-1,3.75785e-8,-3.12963e-8,-1,3.81345e-8,-3.60725e-7,-1,-3.07362e-7,-0.00000525203,-1,-0.00000493228,1.99637e-7,-1,2.343e-7,0.359892,0,0.932994,0.992479,0,0.122415,0.313679,0,0.949529,-0.313679,0,-0.949529,-0.170958,0,-0.985278,-0.492897,0,-0.870088,0.266711,0,0.963776,-0.359892,0,-0.932994,0.689538,0,0.72425,-0.449609,0,-0.893226,0.788345,0,0.615233,-0.985277,0,-0.170963,-0.975701,0,-0.219105,0.2191,0,0.975702,-0.575807,0,-0.817586,0.170958,0,0.985278,0.122409,0,0.99248,-0.266711,0,-0.963776,-0.2191,0,-0.975702,0.949527,0,0.313684,-0.653171,0,-0.757211,-0.122409,0,-0.99248,-0.992479,0,-0.122414,0.985277,0,0.170963],"metadata":{"generator":"io_three","normals":669,"uvs":0,"vertices":534,"version":3,"faces":808,"type":"Geometry"},"vertices":[188.753,4,-76.0101,181.657,4,-66.917,174.123,4,-58.183,195.395,4,-85.4404,187.548,4,-76.9039,180.497,4,-67.8688,166.17,4,-49.8293,173.011,4,-59.1907,201.566,4,-95.1853,194.147,4,-86.274,187.548,0.999997,-76.9039,180.497,0.999997,-67.8688,157.816,4,-41.876,165.109,4,-50.8903,173.011,0.999997,-59.1907,181.657,-4,-66.917,188.753,-4,-76.0101,207.251,4,-105.221,200.279,4,-95.9567,194.147,0.999996,-86.274,181.121,0.999996,-81.6709,174.311,0.999997,-72.9455,149.082,4,-34.3421,156.808,4,-42.9877,165.109,0.999998,-50.8903,174.123,-4,-58.183,167.082,0.999997,-64.5648,187.548,-4,-76.9039,180.497,-4,-67.8688,195.395,-4,-85.4404,212.437,3.99999,-115.524,205.928,4,-105.928,200.279,0.999996,-95.9567,187.494,0.999996,-90.7199,181.121,4,-81.6709,174.311,4,-72.9455,139.989,4,-27.2458,148.13,4,-35.5019,156.808,0.999998,-42.9877,166.17,-4,-49.8293,159.45,0.999998,-56.5489,173.011,-4,-59.1907,167.082,4,-64.5648,187.548,-1,-76.9039,180.497,-1,-67.8688,194.147,-4,-86.274,201.566,-4,-95.1853,217.111,3.99999,-126.069,211.081,3.99999,-116.166,205.928,0.999995,-105.928,193.415,0.999996,-100.071,187.494,4,-90.7199,165.855,4,-92.9927,159.62,4,-85.0027,130.558,4,-20.6042,139.095,4,-28.451,148.13,0.999998,-35.5019,157.816,-4,-41.876,151.434,0.999998,-48.9171,165.109,-4,-50.8903,159.45,4,-56.5489,173.011,-1,-59.1907,153,4,-77.3283,181.121,-1,-81.6709,174.311,-1,-72.9455,194.147,-1,-86.274,200.279,-4,-95.9567,207.251,-4,-105.221,221.263,3.99999,-136.83,215.725,3.99999,-126.643,211.081,0.999995,-116.166,198.87,0.999995,-109.701,193.415,4,-100.071,171.691,4,-101.279,165.855,0.999996,-92.9927,159.62,0.999996,-85.0027,128.025,4,-19,129.725,4,-21.8518,139.095,0.999999,-28.451,149.082,-4,-34.3421,143.053,0.999998,-41.6879,156.808,-4,-42.9877,151.434,4,-48.9171,165.109,-1,-50.8903,146.011,4,-69.988,167.082,-1,-64.5648,153,0.999997,-77.3283,174.311,-4,-72.9455,181.121,-4,-81.6709,187.494,-1,-90.7199,200.279,-1,-95.9567,205.928,-4,-105.928,212.437,-4.00001,-115.524,224.881,3.99999,-147.783,219.85,3.99999,-137.336,215.725,0.999994,-126.643,203.847,0.999995,-119.587,198.87,4,-109.701,177.113,4,-109.842,171.691,0.999996,-101.279,159.427,0.999996,-97.7597,153.434,0.999996,-90.0794,125.221,4,-19,129.725,0.999999,-21.8518,139.989,-4,-27.2458,134.328,0.999998,-34.8786,148.13,-4,-35.5019,143.053,4,-41.6879,156.808,-1,-42.9877,138.671,4,-62.9995,159.45,-1,-56.5489,146.011,0.999997,-69.988,167.082,-4,-64.5648,147.07,0.999996,-82.7024,165.855,-4,-92.9927,159.62,-4,-85.0027,187.494,-4,-90.7199,193.415,-1,-100.071,205.928,-1,-105.928,211.081,-4.00001,-116.166,217.111,-4.00001,-126.069,227.957,3.99999,-158.899,223.445,3.99999,-148.218,219.85,0.999994,-137.336,208.332,0.999994,-129.705,203.847,3.99999,-119.587,182.109,3.99999,-118.66,177.113,0.999995,-109.842,165.037,0.999995,-105.725,159.427,4,-97.7597,153.434,4,-90.0794,125.221,0.999999,-19,130.558,-4,-20.6042,125.279,0.999999,-28.5056,139.095,-4,-28.451,134.328,4,-34.8786,148.13,-1,-35.5019,130.996,4,-56.3796,151.434,-1,-48.9171,138.671,0.999997,-62.9995,159.45,-4,-56.5489,140.352,0.999997,-75.6466,153,-4,-77.3283,147.07,4,-82.7024,165.855,-1,-92.9927,159.62,-1,-85.0027,171.691,-4,-101.279,193.415,-4,-100.071,198.87,-1,-109.701,211.081,-1.00001,-116.166,215.725,-4.00001,-126.643,221.263,-4.00001,-136.83,230.484,3.99999,-170.153,226.502,3.99999,-159.264,223.445,0.999994,-148.218,212.315,0.999994,-140.032,208.332,3.99999,-129.705,186.666,3.99999,-127.713,182.109,0.999995,-118.66,170.249,0.999995,-113.956,165.037,4,-105.725,158.222,4,-98.6535,152.274,4,-91.0313,128.025,-4,-19,115.928,0.999999,-22.5843,129.725,-4,-21.8518,125.279,4,-28.5056,139.095,-1,-28.451,123.006,4,-50.1442,143.053,-1,-41.6879,130.996,0.999998,-56.3796,151.434,-4,-48.9171,133.297,0.999997,-68.9289,146.011,-4,-69.988,140.352,4,-75.6466,153,-1,-77.3283,145.958,4,-83.7101,159.427,-1,-97.7597,153.434,-1,-90.0794,171.691,-1,-101.279,177.113,-4,-109.842,198.87,-4,-109.701,203.847,-1.00001,-119.587,215.725,-1.00001,-126.643,219.85,-4.00001,-137.336,224.881,-4.00001,-147.783,232.456,3.99999,-181.518,229.013,3.99999,-170.446,226.502,0.999993,-159.264,215.787,0.999993,-150.541,212.315,3.99999,-140.032,190.773,3.99999,-136.979,186.666,0.999994,-127.713,175.051,0.999995,-122.432,170.249,3.99999,-113.956,163.79,4,-106.559,125.221,-4,-19,115.928,4,-22.5843,109.601,0.999999,-19,129.725,-1,-21.8518,114.72,4,-44.3083,134.328,-1,-34.8786,123.006,0.999998,-50.1442,143.053,-4,-41.6879,125.92,0.999997,-62.5655,138.671,-4,-62.9995,133.297,4,-68.9289,146.011,-1,-69.988,139.291,4,-76.7076,147.07,-1,-82.7024,153.434,-4,-90.0794,159.427,-4,-97.7597,165.037,-1,-105.725,177.113,-1,-109.842,182.109,-4.00001,-118.66,203.847,-4.00001,-119.587,208.332,-1.00001,-129.705,219.85,-1.00001,-137.336,223.445,-4.00001,-148.218,227.957,-4.00001,-158.899,233.868,3.99999,-192.966,230.972,3.99999,-181.738,229.013,0.999993,-170.446,218.739,0.999993,-161.208,215.787,3.99999,-150.541,194.421,3.99999,-146.435,190.773,0.999994,-136.979,179.432,0.999994,-131.135,175.051,3.99999,-122.432,168.962,3.99999,-114.727,125.221,-1,-19,109.601,4,-19,106.157,4,-38.8861,125.279,-1,-28.5056,114.72,0.999998,-44.3083,134.328,-4,-34.8786,118.239,0.999998,-56.5718,130.996,-4,-56.3796,125.92,4,-62.5655,138.671,-1,-62.9995,132.289,4,-70.0407,140.352,-1,-75.6466,147.07,-4,-82.7024,158.222,-4,-98.6535,152.274,-4,-91.0313,165.037,-4,-105.725,170.249,-1.00001,-113.956,182.109,-1.00001,-118.66,186.666,-4.00001,-127.713,208.332,-4.00001,-129.705,212.315,-1.00001,-140.032,223.445,-1.00001,-148.218,226.502,-4.00001,-159.264,230.484,-4.00001,-170.153,234.717,3.99999,-204.469,232.375,3.99999,-193.113,230.972,0.999992,-181.738,221.164,0.999992,-172.007,218.739,3.99999,-161.208,197.6,3.99999,-156.058,194.421,0.999994,-146.435,183.38,0.999994,-140.041,179.432,3.99999,-131.135,173.728,3.99999,-123.14,115.928,-1,-22.5843,97.3389,4,-33.8905,106.157,0.999998,-38.8861,125.279,-4,-28.5056,110.274,0.999998,-50.9621,123.006,-4,-50.1442,118.239,4,-56.5718,130.996,-1,-56.3796,124.968,4,-63.7254,133.297,-1,-68.9289,140.352,-4,-75.6466,145.958,-4,-83.7101,163.79,-4,-106.559,170.249,-4,-113.956,175.051,-1.00001,-122.432,186.666,-1.00001,-127.713,190.773,-4.00001,-136.979,212.315,-4.00001,-140.032,215.787,-1.00001,-150.541,226.502,-1.00001,-159.264,229.013,-4.00001,-170.446,232.456,-4.00001,-181.518,235,3.99999,-215.75,233.218,3.99999,-204.542,232.375,0.999992,-193.113,223.056,0.999992,-182.912,221.164,3.99999,-172.007,200.303,3.99999,-165.826,197.6,0.999993,-156.058,186.886,0.999994,-149.131,183.38,3.99999,-140.041,178.075,3.99999,-131.776,109.601,-1,-19,115.928,-4,-22.5843,97.3389,0.999999,-33.8905,88.286,4,-29.3337,102.043,0.999998,-45.75,114.72,-4,-44.3083,110.274,4,-50.9621,123.006,-1,-50.1442,117.345,4,-57.777,125.92,-1,-62.5655,133.297,-4,-68.9289,139.291,-4,-76.7076,168.962,-4.00001,-114.727,175.051,-4.00001,-122.432,179.432,-1.00001,-131.135,190.773,-1.00001,-136.979,194.421,-4.00001,-146.435,215.787,-4.00001,-150.541,218.739,-1.00001,-161.208,229.013,-1.00001,-170.446,230.972,-4.00001,-181.738,233.868,-4.00001,-192.966,233.5,0.999991,-215.75,233.5,3.99999,-215.75,222.5,3.99999,-215.75,225.497,3.99999,-215.75,225.497,0.999991,-215.75,233.218,0.999991,-204.542,224.411,0.999992,-193.897,223.056,3.99999,-182.912,202.524,3.99999,-175.715,200.303,0.999993,-165.826,189.942,0.999993,-158.381,186.886,3.99999,-149.131,181.994,3.99999,-140.615,109.601,-4,-19,106.157,-4,-38.8861,93.5666,0.999998,-40.9481,88.286,0.999999,-29.3337,79.0203,4,-25.2266,102.043,4,-45.75,114.72,-1,-44.3083,109.44,4,-52.2097,118.239,-1,-56.5718,125.92,-4,-62.5655,132.289,-4,-70.0407,173.728,-4.00001,-123.14,179.432,-4.00001,-131.135,183.38,-1.00001,-140.041,194.421,-1.00001,-146.435,197.6,-4.00001,-156.058,218.739,-4.00001,-161.208,221.164,-1.00001,-172.007,230.972,-1.00001,-181.738,232.375,-4.00001,-193.113,234.717,-4.00001,-204.469,225.226,0.999991,-204.935,233.5,-1.00001,-215.75,225.497,-1.00001,-215.75,225.497,-4.00001,-215.75,222.5,-4.00001,-215.75,235,-4.00001,-215.75,233.5,-4.00001,-215.75,224,3.99999,-206.75,206.491,3.99999,-215.75,206.243,3.99999,-205.868,225.226,3.99999,-204.935,209,3.99999,-215.75,224.411,3.99999,-193.897,204.256,3.99999,-185.701,202.524,0.999992,-175.715,192.54,0.999993,-167.771,189.942,3.99999,-158.381,185.473,3.99999,-149.636,97.3389,-4,-33.8905,106.157,-1,-38.8861,93.5666,4,-40.9481,84.8645,0.999998,-36.5678,79.0203,0.999999,-25.2266,69.5644,4,-21.5791,101.272,4,-47.037,110.274,-1,-50.9621,118.239,-4,-56.5718,124.968,-4,-63.7254,178.075,-4.00001,-131.776,183.38,-4.00001,-140.041,186.886,-1.00001,-149.131,197.6,-1.00001,-156.058,200.303,-4.00001,-165.826,221.164,-4.00001,-172.007,223.056,-1.00001,-182.912,232.375,-1.00001,-193.113,233.218,-4.00001,-204.542,233.218,-1.00001,-204.542,225.226,-1.00001,-204.935,225.226,-4.00001,-204.935,206.491,-4.00001,-215.75,209,-4.00001,-215.75,206.243,-4.00001,-205.868,224,-4.00001,-206.75,207.5,3.99999,-206.75,206.491,0.999991,-215.75,196.989,3.99999,-215.75,198.489,3.99999,-215.75,198.489,0.999991,-215.75,206.243,0.999991,-205.868,205.497,3.99999,-195.76,204.256,0.999992,-185.701,194.675,0.999992,-177.276,192.54,3.99999,-167.771,188.506,3.99999,-158.817,88.286,-4,-29.3337,97.3389,-1,-33.8905,102.043,-1,-45.75,84.8645,4,-36.5678,92.8593,4,-42.2713,75.958,0.999999,-32.6199,69.5644,0.999999,-21.5791,61.7573,4,-19,110.274,-4,-50.9621,117.345,-4,-57.777,181.994,-4.00001,-140.615,186.886,-4.00001,-149.131,189.942,-1.00001,-158.381,200.303,-1.00001,-165.826,202.524,-4.00001,-175.715,223.056,-4.00001,-182.912,224.411,-1.00001,-193.897,224.411,-4.00001,-193.897,206.491,-1.00001,-215.75,206.243,-1.00001,-205.868,198.489,-1.00001,-215.75,198.489,-4.00001,-215.75,196.989,-4.00001,-215.75,207.5,-4.00001,-206.75,205.497,-4.00001,-195.76,198.25,0.999991,-206.26,196.751,3.99999,-206.334,198.25,3.99999,-206.26,205.497,0.999991,-195.76,196.341,0.999992,-186.875,194.675,3.99999,-177.276,191.085,3.99999,-168.135,79.0203,-4,-25.2266,88.286,-1,-29.3337,93.5666,-1,-40.9481,102.043,-4,-45.75,75.958,4,-32.6199,84.223,4,-37.9242,66.8685,0.999999,-29.1137,61.7573,0.999999,-19,109.44,-4,-52.2097,185.473,-4.00001,-149.636,189.942,-4.00001,-158.381,192.54,-1.00001,-167.771,202.524,-1.00001,-175.715,204.256,-4.00001,-185.701,198.25,-1.00001,-206.26,205.497,-1.00001,-195.76,198.25,-4.00001,-206.26,196.751,-4.00001,-206.334,197.533,0.999991,-196.544,196.04,3.99999,-196.691,197.533,3.99999,-196.544,196.341,3.99999,-186.875,193.203,3.99999,-177.569,69.5644,-4,-21.5791,79.0203,-1,-25.2266,84.8645,-1,-36.5678,93.5666,-4,-40.9481,101.272,-4,-47.037,66.8685,4,-29.1137,75.3838,4,-34.0061,57.6178,0.999999,-26.0577,188.506,-4.00001,-158.817,192.54,-4.00001,-167.771,194.675,-1.00001,-177.276,204.256,-1.00001,-185.701,197.533,-1.00001,-196.544,197.533,-4.00001,-196.544,196.04,-4.00001,-196.691,194.856,3.99999,-187.095,61.7573,-4,-19,69.5644,-1,-21.5791,75.958,-1,-32.6199,84.8645,-4,-36.5678,92.8593,-4,-42.2713,57.6178,4,-26.0577,66.363,4,-30.5264,48.2284,0.999999,-23.4593,191.085,-4.00001,-168.135,194.675,-4.00001,-177.276,196.341,-1.00001,-186.875,196.341,-4.00001,-186.875,194.856,-4.00001,-187.095,61.7573,-1,-19,66.8685,-1,-29.1137,75.958,-4,-32.6199,84.223,-4,-37.9242,48.2284,4,-23.4593,57.1823,4,-27.4936,38.7229,0.999999,-21.3248,193.203,-4.00001,-177.569,57.6178,-1,-26.0577,66.8685,-4,-29.1137,75.3838,-4,-34.0061,38.7229,4,-21.3248,47.8638,4,-24.9148,29.124,0.999999,-19.6593,48.2284,-1,-23.4593,57.6178,-4,-26.0577,66.363,-4,-30.5264,29.124,4,-19.6593,38.4301,4,-22.7964,23.7784,0.999999,-19,38.7229,-1,-21.3248,48.2284,-4,-23.4593,57.1823,-4,-27.4936,23.7784,4,-19,28.9038,4,-21.1435,29.124,-1,-19.6593,38.7229,-4,-21.3248,47.8638,-4,-24.9148,19.3078,4,-19.96,23.7784,-1,-19,29.124,-4,-19.6593,38.4301,-4,-22.7964,9.66539,4,-19.2487,23.7784,-4,-19,28.9038,-4,-21.1435,9.00004,4,-19.0114,19.3078,-4,-19.96,0.250039,4,-19.0114,0.250039,4,-19,9.66539,-4,-19.2487,9.00004,-4,-19.0114,0.250039,-4,-19.0114,0.250039,-4,-19],"faces":[33,0,16,29,3,0,0,0,0,33,10,11,5,4,1,1,1,1,33,11,14,7,5,2,2,2,2,33,526,523,530,531,3,3,3,3,33,19,10,4,9,4,4,4,4,33,456,476,458,433,5,5,5,5,33,14,24,13,7,6,6,6,6,32,425,426,454,7,7,7,32,454,473,451,8,8,8,32,451,420,383,9,9,9,32,383,345,311,10,10,10,32,311,279,247,11,11,11,32,247,213,179,12,12,12,32,179,144,145,13,13,13,32,145,175,207,14,14,14,32,207,239,271,15,15,15,32,271,303,337,16,16,16,32,337,371,408,17,17,17,32,408,440,463,18,18,18,32,463,479,491,19,19,19,32,491,520,516,20,20,20,32,491,516,511,21,21,21,32,408,463,491,22,22,22,32,271,337,408,23,23,23,32,145,207,271,24,24,24,32,247,179,145,25,25,25,32,383,311,247,26,26,26,32,454,451,383,27,27,27,32,427,425,454,28,28,28,32,453,427,454,29,29,29,32,454,383,247,30,30,30,32,247,145,271,31,31,31,32,271,408,491,32,32,32,32,491,511,505,33,33,33,32,491,505,499,34,34,34,32,474,453,454,35,35,35,32,488,474,454,36,36,36,32,491,499,492,37,37,37,32,491,492,480,38,38,38,32,472,488,454,39,39,39,32,450,472,454,40,40,40,32,271,491,480,41,41,41,32,271,480,464,42,42,42,32,450,454,247,43,43,43,32,419,450,247,44,44,44,32,271,464,441,45,45,45,32,271,441,409,46,46,46,32,382,419,247,47,47,47,32,344,382,247,48,48,48,32,271,409,377,49,49,49,32,271,377,339,50,50,50,32,310,344,247,51,51,51,32,278,310,247,52,52,52,32,271,339,305,53,53,53,32,271,305,273,54,54,54,32,246,278,247,55,55,55,32,212,246,247,56,56,56,32,271,273,241,57,57,57,32,271,241,209,58,58,58,32,212,247,271,59,59,59,32,177,212,271,60,60,60,32,271,209,178,61,61,61,32,271,178,177,62,62,62,33,32,19,9,18,63,63,63,63,33,21,20,34,35,64,64,64,64,33,176,275,307,208,65,65,65,65,33,24,38,23,13,66,66,66,66,33,6,39,25,2,67,67,67,67,33,26,21,35,42,68,68,68,68,33,43,27,28,44,1,1,1,1,33,17,8,46,67,69,69,69,69,33,36,104,79,22,70,70,70,70,33,49,32,18,31,71,71,71,71,33,20,33,51,34,72,72,72,72,33,38,56,37,23,73,73,73,73,33,40,26,42,60,74,74,74,74,33,44,28,41,61,2,2,2,2,32,519,523,526,75,75,75,32,526,528,529,76,76,76,32,514,508,502,77,77,77,32,502,495,483,78,78,78,32,483,467,443,79,79,79,32,443,410,372,80,80,80,32,372,336,302,81,81,81,32,302,270,238,82,82,82,32,238,206,174,83,83,83,32,174,143,130,84,84,84,32,130,129,160,85,85,85,32,160,194,228,86,86,86,32,228,262,294,87,87,87,32,294,329,368,88,88,88,32,368,405,437,89,89,89,32,437,460,459,90,90,90,32,459,434,399,91,91,91,32,399,398,433,92,92,92,32,399,433,458,93,93,93,32,437,459,399,94,94,94,32,294,368,437,95,95,95,32,160,228,294,96,96,96,32,174,130,160,97,97,97,32,302,238,174,98,98,98,32,443,372,302,99,99,99,32,502,483,443,100,100,100,32,526,529,514,101,101,101,32,519,526,514,102,102,102,32,437,399,458,103,103,103,32,437,458,477,104,104,104,32,519,514,502,105,105,105,32,515,519,502,106,106,106,32,437,477,461,107,107,107,32,437,461,438,108,108,108,32,509,515,502,106,106,106,32,503,509,502,109,109,109,32,294,437,438,110,110,110,32,294,438,406,111,111,111,32,503,502,443,112,112,112,32,496,503,443,113,113,113,32,294,406,369,114,114,114,32,294,369,330,115,115,115,32,484,496,443,116,116,116,32,468,484,443,101,101,101,32,294,330,295,117,117,117,32,294,295,263,118,118,118,32,444,468,443,119,119,119,32,411,444,443,120,120,120,32,160,294,263,121,121,121,32,160,263,229,122,122,122,32,411,443,302,123,123,123,32,376,411,302,124,124,124,32,160,229,195,125,125,125,32,160,195,161,126,126,126,32,338,376,302,127,127,127,32,304,338,302,128,128,128,32,174,160,161,129,129,129,32,174,161,162,130,130,130,32,304,302,174,131,131,131,32,272,304,174,132,132,132,32,174,162,176,133,133,133,32,174,176,208,134,134,134,32,240,272,174,135,135,135,32,174,208,240,136,136,136,33,65,45,27,43,4,4,4,4,33,121,219,253,152,137,137,137,137,33,30,17,67,92,138,138,138,138,33,70,49,31,48,139,139,139,139,33,33,50,72,51,140,140,140,140,33,74,75,53,52,141,141,141,141,33,56,78,55,37,142,142,142,142,33,54,76,163,132,143,143,143,143,33,58,40,60,82,144,144,144,144,33,61,41,59,83,6,6,6,6,33,75,86,62,53,145,145,145,145,33,64,87,88,63,64,64,64,64,33,90,66,45,65,63,63,63,63,32,357,351,317,146,146,146,32,317,285,253,147,147,147,32,253,219,185,148,148,148,32,185,151,120,149,149,149,32,120,92,67,150,150,150,32,67,46,29,151,151,151,32,29,16,15,152,152,152,32,15,25,39,153,153,153,32,39,57,79,154,154,154,32,79,104,132,155,155,155,32,132,163,196,156,156,156,32,132,196,165,156,156,156,32,39,79,132,157,157,157,32,29,15,39,158,158,158,32,120,67,29,159,159,159,32,253,185,120,160,160,160,32,357,317,253,161,161,161,32,388,358,357,162,162,162,32,350,388,357,163,163,163,32,132,165,134,164,164,164,32,132,134,106,165,165,165,32,350,357,253,166,166,166,32,316,350,253,167,167,167,32,39,132,106,168,168,168,32,39,106,81,169,169,169,32,284,316,253,170,170,170,32,252,284,253,171,171,171,32,39,81,59,172,172,172,32,39,59,41,156,156,156,32,218,252,253,173,173,173,32,218,253,120,174,174,174,32,39,41,28,175,175,175,32,29,39,28,176,176,176,32,184,218,120,177,177,177,32,150,184,120,178,178,178,32,29,28,27,179,179,179,32,29,27,45,180,180,180,32,119,150,120,181,181,181,32,91,119,120,182,182,182,32,29,45,66,183,183,183,32,91,120,29,184,184,184,32,29,66,91,185,185,185,33,95,70,48,69,186,186,186,186,33,50,71,97,72,187,187,187,187,33,99,74,52,73,188,188,188,188,33,195,276,243,161,189,189,189,189,33,3,29,46,8,190,190,190,190,33,376,338,447,466,191,191,191,191,33,78,103,77,55,192,192,192,192,33,395,430,396,359,193,193,193,193,33,80,58,82,107,194,194,194,194,33,83,59,81,108,66,66,66,66,33,86,111,84,62,195,195,195,195,33,85,112,87,64,68,68,68,68,33,1,2,25,15,196,196,196,196,33,63,88,116,89,72,72,72,72,33,118,91,66,90,71,71,71,71,32,390,354,353,197,197,197,32,353,389,387,198,198,198,32,387,349,315,199,199,199,32,315,283,251,200,200,200,32,251,217,183,201,201,201,32,183,149,118,202,202,202,32,118,90,65,203,203,203,32,65,43,44,204,204,204,32,44,61,83,205,205,205,32,83,108,136,206,206,206,32,136,167,199,207,207,207,32,199,230,296,208,208,208,32,199,296,264,209,209,209,32,83,136,199,210,210,210,32,65,44,83,211,211,211,32,183,118,65,212,212,212,32,315,251,183,213,213,213,32,353,387,315,214,214,214,32,423,390,353,215,215,215,32,386,423,353,216,216,216,32,353,315,183,217,217,217,32,183,65,83,218,218,218,32,83,199,264,219,219,219,32,83,264,233,220,220,220,32,386,353,183,221,221,221,32,348,386,183,222,222,222,32,83,233,201,223,223,223,32,83,201,169,224,224,224,32,314,348,183,225,225,225,32,282,314,183,226,226,226,32,83,169,138,227,227,227,32,83,138,110,228,228,228,32,250,282,183,229,229,229,32,216,250,183,230,230,230,32,83,110,85,231,231,231,32,83,85,64,232,232,232,32,182,216,183,233,233,233,32,148,182,183,234,234,234,32,83,64,63,235,235,235,32,83,63,89,236,236,236,32,117,148,183,237,237,237,32,83,89,117,238,238,238,32,117,183,83,239,239,239,33,162,161,243,244,240,240,240,240,33,123,95,69,94,241,241,241,241,33,430,393,363,396,242,242,242,242,33,71,96,125,97,243,243,243,243,33,127,99,73,98,244,244,244,244,33,101,100,129,130,245,245,245,245,33,102,77,103,131,246,246,246,246,33,105,80,107,135,247,247,247,247,33,108,81,106,136,73,73,73,73,33,111,139,109,84,248,248,248,248,33,110,140,112,85,74,74,74,74,33,113,101,130,143,249,249,249,249,33,144,114,115,145,141,141,141,141,33,89,116,147,117,140,140,140,140,33,149,119,91,118,139,139,139,139,33,154,123,94,122,250,250,250,250,33,96,124,156,125,251,251,251,251,33,158,127,98,126,252,252,252,252,33,100,128,160,129,253,253,253,253,33,133,105,135,166,254,254,254,254,33,136,106,134,167,142,142,142,142,33,139,170,137,109,255,255,255,255,33,138,171,140,110,144,144,144,144,33,141,113,143,174,256,256,256,256,33,145,115,142,175,145,145,145,145,33,179,146,114,144,188,188,188,188,33,117,147,181,148,187,187,187,187,33,183,150,119,149,257,257,257,257,33,30,92,120,47,258,258,258,258,33,188,154,122,153,259,259,259,259,33,124,155,190,156,260,260,260,260,33,192,158,126,157,261,261,261,261,33,128,159,194,160,262,262,262,262,33,164,133,166,197,263,263,263,263,33,167,134,165,199,264,264,264,264,33,170,202,168,137,265,265,265,265,33,169,203,171,138,194,194,194,194,33,172,141,174,206,266,266,266,266,33,175,142,173,207,195,195,195,195,33,254,351,357,286,267,267,267,267,33,178,210,211,177,245,245,245,245,33,213,180,146,179,244,244,244,244,33,148,181,215,182,243,243,243,243,33,217,184,150,183,268,268,268,268,33,93,185,219,121,269,269,269,269,33,222,188,153,187,270,270,270,270,32,354,355,356,271,271,271,32,356,320,321,271,271,271,32,356,321,322,271,271,271,32,354,356,322,271,271,271,32,318,319,286,272,272,272,32,354,322,318,273,273,273,32,357,358,353,274,274,274,32,353,354,318,273,273,273,32,318,286,357,275,275,275,32,353,318,357,276,276,276,33,155,189,224,190,277,277,277,277,33,226,192,157,191,278,278,278,278,33,159,193,228,194,279,279,279,279,33,444,494,501,468,280,280,280,280,33,230,199,165,196,246,246,246,246,33,198,164,197,231,281,281,281,281,33,202,234,200,168,282,282,282,282,33,201,235,203,169,247,247,247,247,33,12,22,79,57,283,283,283,283,33,204,172,206,238,284,284,284,284,33,207,173,205,239,248,248,248,248,33,209,242,210,178,249,249,249,249,33,177,211,245,212,253,253,253,253,33,247,214,180,213,252,252,252,252,33,182,215,249,216,251,251,251,251,33,251,218,184,217,285,285,285,285,33,186,285,317,220,286,286,286,286,33,256,222,187,221,287,287,287,287,33,189,223,258,224,288,288,288,288,33,260,226,191,225,289,289,289,289,33,193,227,262,228,290,290,290,290,33,528,532,533,529,291,291,291,291,33,234,266,232,200,292,292,292,292,33,233,267,235,201,254,254,254,254,32,391,424,422,293,293,293,32,422,385,347,294,294,294,32,347,313,281,295,295,295,32,281,249,215,296,296,296,32,215,181,147,297,297,297,32,147,116,88,298,298,298,32,88,87,112,299,299,299,32,112,140,171,300,300,300,32,171,203,235,301,301,301,32,235,267,297,302,302,302,32,297,331,478,156,156,156,32,297,478,462,156,156,156,32,171,235,297,303,303,303,32,88,112,171,304,304,304,32,215,147,88,305,305,305,32,347,281,215,306,306,306,32,391,422,347,307,307,307,32,356,355,391,308,308,308,32,395,356,391,309,309,309,32,391,347,215,310,310,310,32,215,88,171,311,311,311,32,171,297,462,312,312,312,32,171,462,439,313,313,313,32,391,215,171,314,314,314,32,430,395,391,20,20,20,32,392,393,430,315,315,315,32,394,392,430,316,316,316,32,171,439,407,317,317,317,32,171,407,370,318,318,318,32,394,430,391,319,319,319,32,431,394,391,320,320,320,32,171,370,332,321,321,321,32,171,332,301,156,156,156,32,452,431,391,322,322,322,32,421,452,391,323,323,323,32,171,301,269,324,324,324,32,171,269,237,325,325,325,32,384,421,391,326,326,326,32,346,384,391,327,327,327,32,171,237,205,328,328,328,32,171,205,173,329,329,329,32,312,346,391,330,330,330,32,280,312,391,331,331,331,32,171,173,142,332,332,332,32,171,142,115,333,333,333,32,248,280,391,334,334,334,32,248,391,171,335,335,335,32,171,115,114,336,336,336,32,171,114,146,337,337,337,32,214,248,171,338,338,338,32,171,146,180,339,339,339,32,171,180,214,340,340,340,33,236,204,238,270,341,341,341,341,33,239,205,237,271,255,255,255,255,33,241,274,242,209,256,256,256,256,33,212,245,277,246,262,262,262,262,33,279,248,214,247,261,261,261,261,33,216,249,281,250,260,260,260,260,33,283,252,218,251,259,259,259,259,32,164,198,131,342,342,342,32,131,103,78,343,343,343,32,78,56,38,344,344,344,32,38,24,14,345,345,345,32,14,11,10,346,346,346,32,10,19,32,347,347,347,32,32,49,70,348,348,348,32,70,95,123,349,349,349,32,123,154,188,350,350,350,32,188,222,256,351,351,351,32,256,288,323,352,352,352,32,323,318,322,353,353,353,32,323,322,352,354,354,354,32,188,256,323,355,355,355,32,70,123,188,356,356,356,32,10,32,70,357,357,357,32,38,14,10,358,358,358,32,131,78,38,359,359,359,32,133,164,131,360,360,360,32,105,133,131,361,361,361,32,131,38,10,362,362,362,32,10,70,188,363,363,363,32,188,323,352,364,364,364,32,188,352,324,365,365,365,32,80,105,131,366,366,366,32,58,80,131,367,367,367,32,188,324,289,368,368,368,32,188,289,257,369,369,369,32,58,131,10,370,370,370,32,40,58,10,371,371,371,32,188,257,223,372,372,372,32,188,223,189,373,373,373,32,26,40,10,374,374,374,32,21,26,10,375,375,375,32,188,189,155,376,376,376,32,188,155,124,377,377,377,32,20,21,10,378,378,378,32,33,20,10,379,379,379,32,10,188,124,380,380,380,32,10,124,96,381,381,381,32,50,33,10,382,382,382,32,10,96,71,383,383,383,32,10,71,50,384,384,384,33,288,256,221,255,385,385,385,385,33,223,257,290,258,386,386,386,386,33,292,260,225,259,387,387,387,387,33,227,261,294,262,388,388,388,388,33,264,297,267,233,263,263,263,263,33,266,298,265,232,389,389,389,389,33,268,236,270,302,390,390,390,390,33,271,237,269,303,265,265,265,265,33,273,306,274,241,266,266,266,266,33,68,47,120,151,391,391,391,391,33,176,162,244,275,392,392,392,392,33,246,277,309,278,279,279,279,279,33,311,280,248,279,278,278,278,278,33,250,281,313,282,277,277,277,277,33,315,284,252,283,393,393,393,393,33,523,519,527,530,394,394,394,394,33,323,288,255,287,395,395,395,395,33,257,289,325,290,396,396,396,396,33,327,292,259,291,397,397,397,397,33,261,293,329,294,398,398,398,398,33,406,470,448,369,399,399,399,399,33,195,229,308,276,400,400,400,400,33,331,297,264,296,281,281,281,281,33,298,334,299,265,401,401,401,401,33,300,268,302,336,402,402,402,402,33,303,269,301,337,282,282,282,282,33,305,340,306,273,284,284,284,284,33,54,132,104,36,403,403,403,403,33,278,309,343,310,290,290,290,290,33,345,312,280,311,289,289,289,289,33,282,313,347,314,288,288,288,288,33,349,316,284,315,287,287,287,287,33,323,287,319,318,404,404,404,404,32,196,163,76,405,405,405,32,76,102,131,405,405,405,32,198,231,414,406,406,406,32,196,76,131,407,407,407,32,198,414,446,408,408,408,32,230,196,131,409,409,409,32,478,331,296,406,406,406,32,296,230,131,410,410,410,32,198,446,510,101,101,101,32,296,131,198,410,410,410,32,491,478,296,408,408,408,32,533,524,520,411,411,411,32,491,296,198,406,406,406,32,529,533,520,412,412,412,32,520,491,198,413,413,413,32,510,514,529,411,411,411,32,520,198,510,414,414,414,32,510,529,520,415,415,415,33,352,322,321,362,416,416,416,416,33,289,324,364,325,417,417,417,417,33,366,327,291,326,418,418,418,418,33,293,328,368,329,419,419,419,419,33,263,295,380,342,420,420,420,420,33,337,301,332,371,292,292,292,292,33,333,300,336,372,421,421,421,421,33,334,374,335,299,422,422,422,422,32,375,414,231,423,423,423,32,231,197,166,424,424,424,32,166,135,107,425,425,425,32,107,82,60,426,426,426,32,60,42,35,427,427,427,32,35,34,51,428,428,428,32,51,72,97,429,429,429,32,97,125,156,430,430,430,32,156,190,224,431,431,431,32,224,258,290,432,432,432,32,290,325,364,433,433,433,32,364,362,321,434,434,434,32,321,320,359,435,435,435,32,396,363,360,436,436,436,32,364,321,359,437,437,437,32,396,360,361,438,438,438,32,364,359,396,439,439,439,32,224,290,364,440,440,440,32,97,156,224,441,441,441,32,35,51,97,442,442,442,32,107,60,35,443,443,443,32,231,166,107,444,444,444,32,335,375,231,445,445,445,32,299,335,231,446,446,446,32,231,107,35,447,447,447,32,35,97,224,448,448,448,32,224,364,396,449,449,449,32,396,361,402,450,450,450,32,396,402,365,451,451,451,32,231,35,224,452,452,452,32,265,299,231,453,453,453,32,232,265,231,454,454,454,32,224,396,365,455,455,455,32,224,365,326,456,456,456,32,200,232,231,457,457,457,32,168,200,231,458,458,458,32,224,326,291,459,459,459,32,224,291,259,460,460,460,32,137,168,231,461,461,461,32,109,137,231,462,462,462,32,224,259,225,463,463,463,32,224,225,191,464,464,464,32,84,109,231,465,465,465,32,62,84,231,466,466,466,32,224,191,157,467,467,467,32,224,157,126,468,468,468,32,53,62,231,469,469,469,32,52,53,231,470,470,470,32,224,126,98,471,471,471,32,224,98,73,472,472,472,32,52,231,224,473,473,473,32,224,73,52,474,474,474,33,356,395,359,320,475,475,475,475,33,220,317,351,254,476,476,476,476,33,339,378,340,305,341,341,341,341,33,263,342,308,229,477,477,477,477,33,310,343,381,344,388,388,388,388,33,383,346,312,345,387,387,387,387,33,314,347,385,348,386,386,386,386,33,387,350,316,349,385,385,385,385,33,389,353,358,388,404,404,404,404,33,390,391,355,354,416,416,416,416,33,438,486,470,406,478,478,478,478,32,427,428,429,274,274,274,32,429,398,399,276,276,276,32,429,399,400,479,479,479,32,427,429,400,480,480,480,32,397,360,363,272,272,272,32,427,400,397,273,273,273,32,393,392,425,274,274,274,32,425,427,397,273,273,273,32,397,363,393,479,479,479,32,425,397,393,272,272,272,33,397,401,361,360,481,481,481,481,33,208,307,341,240,482,482,482,482,33,324,352,362,364,483,483,483,483,33,403,366,326,365,484,484,484,484,33,328,367,405,368,485,485,485,485,33,369,448,417,330,486,486,486,486,33,330,417,380,295,487,487,487,487,33,371,332,370,408,389,389,389,389,33,373,333,372,410,488,488,488,488,33,374,413,375,335,489,489,489,489,33,377,415,378,339,390,390,390,390,33,304,272,379,416,490,490,490,490,33,344,381,418,382,398,398,398,398,33,420,384,346,383,397,397,397,397,33,348,385,422,386,396,396,396,396,33,389,388,350,387,395,395,395,395,33,423,424,391,390,483,483,483,483,33,425,392,394,426,481,481,481,481,33,432,400,399,434,491,491,491,491,33,401,435,402,361,492,492,492,492,33,435,403,365,402,493,493,493,493,33,367,404,437,405,494,494,494,494,33,408,370,407,440,401,401,401,401,33,409,442,415,377,402,402,402,402,33,412,373,410,443,495,495,495,495,33,414,375,413,446,496,496,496,496,33,398,429,456,433,497,497,497,497,33,382,418,449,419,419,419,419,419,33,451,421,384,420,418,418,418,418,33,386,422,424,423,417,417,417,417,33,426,394,431,454,492,492,492,492,33,453,455,428,427,491,491,491,491,32,77,102,76,498,498,498,32,76,54,36,499,499,499,32,36,22,12,500,500,500,32,12,6,2,501,501,501,32,2,1,0,502,502,502,32,0,3,8,503,503,503,32,8,17,30,504,504,504,32,30,47,68,505,505,505,32,68,93,121,506,506,506,32,121,152,186,507,507,507,32,186,220,254,508,508,508,32,254,286,319,509,509,509,32,254,319,287,510,510,510,32,121,186,254,511,511,511,32,30,68,121,512,512,512,32,0,8,30,513,513,513,32,12,2,0,514,514,514,32,76,36,12,515,515,515,32,55,77,76,516,516,516,32,37,55,76,517,517,517,32,254,287,255,518,518,518,32,254,255,221,519,519,519,32,37,76,12,520,520,520,32,23,37,12,521,521,521,32,121,254,221,522,522,522,32,121,221,187,523,523,523,32,13,23,12,524,524,524,32,7,13,12,525,525,525,32,121,187,153,526,526,526,32,121,153,122,527,527,527,32,7,12,0,528,528,528,32,5,7,0,529,529,529,32,121,122,94,530,530,530,32,30,121,94,531,531,531,32,4,5,0,532,532,532,32,9,4,0,533,533,533,32,30,94,69,534,534,534,32,30,69,48,535,535,535,32,18,9,0,536,536,536,32,30,48,31,537,537,537,32,18,0,30,538,538,538,32,31,18,30,539,539,539,32,504,510,446,101,101,101,32,446,413,374,540,540,540,32,374,334,298,541,541,541,32,298,266,234,542,542,542,32,234,202,170,543,543,543,32,170,139,111,544,544,544,32,111,86,75,545,545,545,32,75,74,99,546,546,546,32,99,127,158,547,547,547,32,158,192,226,548,548,548,32,226,260,292,549,549,549,32,292,327,366,550,550,550,32,366,403,435,551,551,551,32,435,401,397,552,552,552,32,397,400,432,553,553,553,32,397,432,457,554,554,554,32,366,435,397,555,555,555,32,226,292,366,556,556,556,32,99,158,226,557,557,557,32,111,75,99,558,558,558,32,234,170,111,559,559,559,32,374,298,234,560,560,560,32,504,446,374,561,561,561,32,497,504,374,562,562,562,32,374,234,111,563,563,563,32,111,99,226,564,564,564,32,226,366,397,565,565,565,32,397,457,436,566,566,566,32,397,436,404,567,567,567,32,485,497,374,568,568,568,32,469,485,374,569,569,569,32,226,397,404,570,570,570,32,226,404,367,571,571,571,32,445,469,374,572,572,572,32,412,445,374,573,573,573,32,226,367,328,574,574,574,32,226,328,293,575,575,575,32,373,412,374,576,576,576,32,333,373,374,577,577,577,32,226,293,261,578,578,578,32,226,261,227,579,579,579,32,333,374,111,580,580,580,32,300,333,111,581,581,581,32,226,227,193,582,582,582,32,226,193,159,583,583,583,32,268,300,111,584,584,584,32,236,268,111,585,585,585,32,111,226,159,586,586,586,32,111,159,128,587,587,587,32,204,236,111,588,588,588,32,172,204,111,589,589,589,32,111,128,100,590,590,590,32,111,100,101,591,591,591,32,141,172,111,592,592,592,32,111,101,113,593,593,593,32,113,141,111,594,594,594,33,457,432,434,459,595,595,595,595,33,404,436,460,437,596,596,596,596,32,381,343,309,597,597,597,32,309,277,245,598,598,598,32,245,211,210,599,599,599,32,210,242,274,600,600,600,32,274,306,340,601,601,601,32,340,378,415,602,602,602,32,415,442,465,603,603,603,32,465,481,493,604,604,604,32,493,500,506,605,605,605,32,506,512,517,156,156,156,32,517,521,524,156,156,156,32,524,533,532,156,156,156,32,531,530,527,156,156,156,32,524,532,531,156,156,156,32,506,517,524,20,20,20,32,465,493,506,606,606,606,32,340,415,465,607,607,607,32,210,274,340,608,608,608,32,309,245,210,609,609,609,32,418,381,309,610,610,610,32,471,449,418,611,611,611,32,489,487,471,612,612,612,32,455,475,489,613,613,613,32,429,428,455,614,614,614,32,456,429,455,615,615,615,32,455,489,471,616,616,616,32,471,418,309,617,617,617,32,524,531,527,156,156,156,32,524,527,525,156,156,156,32,476,456,455,618,618,618,32,490,476,455,619,619,619,32,506,524,525,156,156,156,32,506,525,522,156,156,156,32,490,455,471,620,620,620,32,498,490,471,621,621,621,32,506,522,518,156,156,156,32,506,518,513,622,622,622,32,486,498,471,623,623,623,32,470,486,471,319,319,319,32,506,513,507,624,624,624,32,506,507,501,625,625,625,32,448,470,471,626,626,626,32,417,448,471,627,627,627,32,465,506,501,628,628,628,32,465,501,494,629,629,629,32,417,471,309,630,630,630,32,380,417,309,631,631,631,32,465,494,482,632,632,632,32,465,482,466,156,156,156,32,342,380,309,633,633,633,32,308,342,309,319,319,319,32,340,465,466,634,634,634,32,340,466,447,635,635,635,32,308,309,210,636,636,636,32,276,308,210,637,637,637,32,340,447,416,638,638,638,32,340,416,379,639,639,639,32,243,276,210,640,640,640,32,244,243,210,641,641,641,32,340,379,341,20,20,20,32,340,341,307,642,642,642,32,275,244,210,319,319,319,32,340,307,275,643,643,643,32,210,340,275,644,644,644,33,440,407,439,463,422,422,422,422,33,441,465,442,409,421,421,421,421,33,445,412,443,467,645,645,645,645,33,419,449,471,450,485,485,485,485,33,473,452,421,451,484,484,484,484,33,454,431,452,473,493,493,493,493,33,474,475,455,453,595,595,595,595,33,528,526,531,532,274,274,274,274,33,436,457,459,460,646,646,646,646,33,463,439,462,479,489,489,489,489,33,464,481,465,441,488,488,488,488,33,469,445,467,483,647,647,647,647,33,496,484,507,513,648,648,648,648,33,509,522,525,515,649,649,649,649,33,450,471,487,472,494,494,494,494,33,488,489,475,474,646,646,646,646,33,491,479,462,478,496,496,496,496,33,480,493,481,464,495,495,495,495,33,376,466,482,411,650,650,650,650,33,485,469,483,495,651,651,651,651,33,468,501,507,484,652,652,652,652,33,6,12,57,39,653,653,653,653,33,444,411,482,494,654,654,654,654,33,0,1,15,16,655,655,655,655,33,472,487,489,488,596,596,596,596,33,461,477,490,498,656,656,656,656,33,498,486,438,461,657,657,657,657,33,492,500,493,480,645,645,645,645,33,497,485,495,502,658,658,658,658,33,304,416,447,338,659,659,659,659,33,499,506,500,492,647,647,647,647,33,504,497,502,508,660,660,660,660,33,505,512,506,499,651,651,651,651,33,510,504,508,514,661,661,661,661,33,496,513,518,503,662,662,662,662,33,511,517,512,505,658,658,658,658,33,516,521,517,511,660,660,660,660,33,503,518,522,509,663,663,663,663,33,524,521,516,520,661,661,661,661,33,68,151,185,93,664,664,664,664,33,240,341,379,272,665,665,665,665,33,515,525,527,519,666,666,666,666,33,458,476,490,477,667,667,667,667,33,186,152,253,285,668,668,668,668]},"eight_R_a":{"uvs":[],"normals":[-0.65317,0,-0.757211,-0.615231,0,-0.788347,-0.575807,0,-0.817585,-0.534995,0,-0.844855,-0.492897,0,-0.870087,-0.449609,0,-0.893226,-0.405239,0,-0.914211,-0.653173,0,-0.757209,-0.449607,0,-0.893227,-0.534994,0,-0.844856,-0.359892,0,-0.932994,0.68913,0,0.724637,0.65317,0,0.757211,0.615229,0,0.788348,0.575807,0,0.817585,0.534995,0,0.844855,0.492898,0,0.870087,0.449609,0,0.893226,0.40524,0,0.91421,-0.313679,0,-0.949529,0.689072,0,0.724693,0.653172,0,0.75721,0.615228,0,0.78835,0.575807,0,0.817586,0.534995,0,0.844855,0.4929,0,0.870086,0.449606,0,0.893227,0.405243,0,0.914209,0.35989,0,0.932995,8.49644e-9,1,-2.41404e-7,1.46437e-8,1,1.13842e-8,-5.83066e-8,1,-2.32744e-7,1.63048e-8,1,-6.75393e-9,-3.83177e-8,1,-1.15366e-7,-1.13559e-7,1,-2.12309e-7,-5.55477e-8,1,-1.09415e-7,7.87512e-10,1,-4.29216e-8,-7.05463e-9,1,-4.38681e-8,2.2505e-9,1,-3.89867e-8,4.48924e-9,1,-3.52794e-8,1.47958e-8,1,8.24397e-9,-1.1416e-8,1,-9.25599e-8,-5.3903e-9,1,-1.0264e-7,1.02052e-8,1,-2.31939e-8,-3.65502e-9,1,-4.69494e-8,1.24506e-8,1,-3.24003e-8,-1.95472e-8,1,-1.14972e-7,-1.86136e-8,1,-1.13139e-7,1.55113e-8,1,-2.98459e-8,2.79401e-9,1,-3.85337e-8,-1.58827e-8,1,-1.06559e-7,9.85105e-9,1,-9.18901e-9,-4.18241e-9,1,-4.09121e-8,2.63507e-9,1,-4.49983e-8,-1.54479e-9,1,-5.50044e-8,1.47233e-9,1,-3.78981e-8,8.84563e-10,1,-4.32966e-8,0,0,-1,0.65317,0,0.757211,-0.575806,0,-0.817586,0.575808,0,0.817585,-0.492901,0,-0.870086,0.689147,-1.26765e-7,0.724622,-0.2191,0,-0.975702,-0.122409,0,-0.99248,-0.689144,0,-0.724624,0.492896,0,0.870088,-0.615228,0,-0.788349,-0.35989,0,-0.932995,-0.405242,0,-0.914209,2.22295e-7,1,9.89931e-7,-2.68124e-7,1,-6.95096e-7,-3.45826e-8,1,7.32565e-8,-3.57444e-9,1,-1.29164e-8,-2.1565e-7,1,-5.39657e-7,1.90036e-8,1,-1.01573e-8,1.79162e-8,1,-1.19715e-8,3.03409e-7,1,3.18758e-7,-3.1408e-8,1,-6.50063e-8,6.04374e-10,1,-4.41107e-8,-3.75655e-8,1,-7.45052e-8,2.1729e-8,1,-4.87029e-8,4.30703e-9,1,-4.57009e-8,1.85047e-8,1,-1.10907e-8,-4.57578e-9,1,-1.14508e-8,4.15446e-9,1,-6.24185e-8,-1.06405e-8,1,-5.97167e-8,-9.04154e-9,1,-1.79325e-8,2.65025e-9,1,-6.89579e-8,2.71626e-9,1,-5.83223e-8,-1.52553e-8,1,-3.44155e-8,5.53192e-9,1,-3.88005e-8,-9.79205e-9,1,-5.07835e-8,4.34641e-9,1,-4.36863e-8,2.2374e-9,1,-4.37762e-8,-4.27186e-9,1,-4.69193e-8,-5.1168e-10,1,-4.47784e-8,-0.689069,0,-0.724696,-0.40524,0,-0.91421,-0.449608,0,-0.893226,-0.492899,0,-0.870087,-0.534995,0,-0.844855,-0.575809,0,-0.817584,-0.615228,0,-0.788349,-0.653171,0,-0.75721,-0.68909,0,-0.724675,0.405239,2.71221e-8,0.914211,-7.19584e-8,1,-2.32817e-7,0.00000114435,1,0.000002538,-8.15418e-8,1,-1.96699e-7,-3.94001e-8,1,-1.01104e-7,-4.51062e-8,1,-1.00065e-7,-1.73552e-9,1,-4.03986e-8,-1.19829e-10,1,-4.0101e-8,-1.0661e-8,1,-5.80933e-8,5.39992e-7,1,9.66114e-7,-8.28495e-8,1,-2.26774e-7,-9.30431e-8,1,-2.32757e-7,1.4473e-7,1,1.51428e-7,4.91326e-10,1,-4.06549e-8,2.24424e-10,1,-4.34791e-8,-1.00796e-7,1,-2.40679e-7,4.86147e-10,1,-4.28452e-8,-1.96843e-9,1,-4.95581e-8,8.37623e-9,1,-2.70368e-8,0.581237,0,0.813734,-0.813734,0,-0.581237,0.707109,0,-0.707105,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707107,0,-0.707107,0.707109,-0.0000040519,-0.707105,0.707108,0.00000518324,-0.707106,0.707092,0.0000107896,-0.707122,0.707109,-0.0000094147,-0.707105,0.707106,0.0000406412,-0.707108,-0.313679,0,-0.949529,-0.266711,0,-0.963776,-0.2191,0,-0.975702,-0.073564,0,-0.99729,0.313679,0,0.949529,0.266711,0,0.963776,0.2191,0,0.975702,0.170958,0,0.985278,0.122409,0,0.99248,-0.266711,0,-0.963776,0.615229,0,0.788348,0.534996,0,0.844855,-9.34612e-8,1,-0.00000126703,0,1,0,-2.10705e-8,1,-2.85648e-7,1.04971e-9,1,8.00465e-7,5.45101e-8,1,3.41018e-7,-1.89308e-8,1,-3.53413e-7,0,1,0,1.56451e-7,1,4.73588e-7,2.26161e-8,1,-9.36869e-9,2.45794e-7,1,4.33885e-7,2.0354e-8,1,-1.36003e-8,-2.87904e-7,1,-4.08697e-7,1.77653e-8,1,-1.77653e-8,1.87606e-8,1,-1.70035e-8,-4.96921e-8,1,-1.18432e-7,6.99435e-8,1,1.04891e-7,-2.43616e-8,1,-1.22476e-7,1.82766e-8,1,-1.65649e-8,1.79755e-8,1,-1.70469e-8,7.56977e-8,1,2.24552e-7,-1.05769e-7,1,-1.94043e-7,-1.12801e-7,1,-2.02991e-7,-4.72355e-8,1,-2.13794e-7,-6.38776e-8,1,-1.46966e-7,-5.7187e-8,1,-1.50977e-7,-2.66336e-8,1,-1.59234e-7,-5.72032e-8,1,-1.48296e-7,-8.17808e-8,1,-2.15905e-7,2.35089e-8,1,-7.81434e-9,4.27686e-8,1,3.0122e-8,-0.335866,0,-0.94191,1.28936e-8,1,-2.90874e-8,7.78102e-8,1,1.0861e-7,1.77352e-8,1,-1.06291e-8,1.66078e-8,1,-1.23165e-8,3.02709e-7,1,2.87634e-7,1.50423e-8,1,-1.50423e-8,1.79275e-8,1,-1.10662e-8,-4.92416e-8,1,-1.01104e-7,3.33888e-8,1,1.54874e-8,-4.55899e-9,1,-5.53264e-8,-3.52584e-7,1,-6.64604e-7,-1.72781e-7,1,-2.51802e-7,1.92491e-7,1,1.79028e-7,8.35312e-9,1,-3.08309e-8,1.73023e-8,1,-1.1561e-8,1.73023e-8,1,-1.1561e-8,0.449609,0,0.893225,0.35989,0,0.932995,0,0,0,-0.999998,-0.000780729,-0.00156354,-1,0,-0.00000259551,-1,-4.98244e-12,-0.00000259725,0.0735638,0,0.99729,-0.170958,0,-0.985278,-0.449609,0,-0.893226,-6.11165e-9,-1,4.82457e-8,1.53142e-7,-1,2.13551e-7,1.19139e-7,-1,2.10018e-7,-2.0184e-8,-1,1.20962e-8,-1.18417e-7,-1,-2.09097e-7,-1.10784e-8,-1,3.962e-9,-7.56902e-8,-1,-2.29411e-7,-2.81945e-9,-1,-3.82227e-8,1.34072e-8,-1,1.14289e-7,9.3359e-9,-1,6.10168e-8,1.12661e-8,-1,6.45676e-8,-6.92244e-9,-1,3.67281e-8,5.42816e-10,-1,3.80965e-8,1.00574e-8,-1,6.27586e-8,9.9111e-11,-1,-6.00388e-8,0,-1,0,-5.87807e-10,-1,3.90244e-8,-6.26768e-10,-1,4.1611e-8,-2.36743e-9,-1,5.79304e-8,-1.28904e-9,-1,5.01076e-8,-3.37305e-11,-1,4.38794e-8,-5.41978e-8,-1,-3.9845e-8,2.1006e-10,-1,4.66372e-8,2.30964e-9,-1,4.60003e-8,-2.68474e-8,-1,2.25775e-9,-2.44973e-8,-1,5.7624e-9,5.39979e-9,-1,4.79984e-8,1.03769e-8,-1,5.36046e-8,0,0,-1,0.689147,1.26765e-7,0.724622,0,-1,0,-1.20852e-8,-1,5.55914e-8,-3.11768e-8,-1,3.11768e-8,-1.49857e-8,-1,6.89336e-8,8.74091e-8,-1,1.73362e-7,-1.92274e-7,-1,-2.46378e-7,3.84212e-9,-1,5.01059e-8,-5.73505e-7,-1,-6.64856e-7,-5.05552e-7,-1,-7.1783e-7,-4.32755e-7,-1,-7.6392e-7,-5.50057e-7,-1,-0.00000124092,-1.35834e-8,-1,3.52139e-8,-1.85047e-8,-1,1.10907e-8,1.20059e-8,-1,4.85954e-8,0.0000188358,-1,0.0000268264,2.79038e-9,-1,4.47654e-8,-3.26615e-8,-1,-1.25287e-8,0,-1,0,6.21958e-10,-1,4.94602e-8,1.38217e-8,-1,2.1827e-8,2.67622e-9,-1,1.00176e-7,-6.07289e-8,-1,-2.16712e-7,1.6375e-7,-1,7.6812e-7,1.91982e-8,-1,1.59409e-7,-1.94591e-8,-1,-5.89043e-8,-1.57449e-8,-1,-4.08175e-8,0.405239,5.42442e-8,0.914211,-2.84467e-9,-1,4.49787e-8,-1.37806e-8,-1,3.17983e-8,1.05346e-7,-1,1.85708e-7,-1.78493e-8,-1,1.06972e-8,-4.42102e-8,-1,-4.1562e-8,-6.6697e-8,-1,-1.26639e-7,0.00000111494,-1,0.00000239957,9.96257e-9,-1,5.70987e-8,-3.01652e-9,-1,4.36876e-8,-5.51898e-9,-1,4.30713e-8,1.97886e-7,-1,3.38347e-7,-6.76756e-8,-1,-1.26096e-7,-9.59372e-8,-1,-1.42684e-7,1.67864e-9,-1,3.71644e-8,2.70834e-9,-1,5.99614e-8,-7.17712e-8,-1,-1.17991e-7,-6.43258e-9,-1,3.01062e-8,-3.35108e-9,-1,3.77879e-8,0.707109,-0.0000081038,-0.707105,0.707108,0.00000259162,-0.707106,0.707107,-0.0000107896,-0.707107,0.707086,0,-0.707127,0.707109,-0.0000471927,-0.707105,0.707106,-0.00000586876,-0.707108,-3.58083e-8,-1,3.58083e-8,6.77559e-7,-1,7.85482e-7,5.74403e-7,-1,8.15592e-7,4.91707e-7,-1,8.67981e-7,4.04292e-7,-1,9.12064e-7,-3.5901e-7,-1,-9.30712e-7,-4.21409e-8,-1,-5.71296e-7,4.22664e-8,-1,6.60852e-11,0,-1,0.00000161897,-4.96176e-8,-1,-3.34501e-7,6.06857e-8,-1,2.42272e-7,-2.16157e-8,-1,1.15528e-8,-1.70076e-8,-1,1.81619e-8,-2.99378e-7,-1,-3.47062e-7,0.00000293013,-1,0.00000383481,7.55031e-8,-1,9.70087e-7,-2.13289e-7,-1,-2.21318e-7,0,-1,0,-4.10183e-8,-1,2.74076e-8,-2.29968e-7,-1,-4.05947e-7,-1.73245e-7,-1,-4.4112e-7,-2.1615e-8,-1,1.15542e-8,-2.55966e-7,-1,-3.98833e-7,1.15332e-7,-1,4.22417e-7,-3.00845e-8,-1,3.00845e-8,-1.83382e-8,-1,4.20327e-8,4.85152e-7,-1,6.88863e-7,4.15267e-7,-1,7.33053e-7,3.41421e-7,-1,7.70239e-7,-1.91497e-7,-1,-2.87904e-7,-3.33888e-8,-1,-1.54874e-8,1.13107e-7,-1,1.87218e-7,-3.5855e-8,-1,2.21324e-8,-4.27127e-7,-1,-4.7178e-7,1.06619e-8,-1,6.60106e-8,-2.51626e-7,-1,-4.44182e-7,3.14089e-7,-1,4.02468e-7,-3.46046e-8,-1,2.3122e-8,-3.46045e-8,-1,2.3122e-8,-0.999998,0.000780721,-0.00156354,-1,4.98244e-12,-0.00000259725],"faces":[33,44,0,2,8,0,0,0,0,33,8,7,43,44,1,1,1,1,33,7,6,42,43,2,2,2,2,33,6,5,41,42,3,3,3,3,33,5,4,40,41,4,4,4,4,33,4,3,39,40,5,5,5,5,33,3,131,133,39,6,6,6,6,33,149,89,90,150,7,7,7,7,33,144,84,85,145,8,8,8,8,33,146,86,87,147,9,9,9,9,33,20,19,62,63,10,10,10,10,33,17,18,61,60,11,11,11,11,33,16,17,60,59,12,12,12,12,33,15,16,59,58,13,13,13,13,33,14,15,58,57,14,14,14,14,33,13,14,57,56,15,15,15,15,33,12,13,56,55,16,16,16,16,33,11,12,55,54,17,17,17,17,33,10,11,54,53,18,18,18,18,33,258,116,82,142,19,19,19,19,33,37,38,81,80,20,20,20,20,33,36,37,80,79,21,21,21,21,33,35,36,79,78,22,22,22,22,33,34,35,78,77,23,23,23,23,33,33,34,77,76,24,24,24,24,33,32,33,76,75,25,25,25,25,33,31,32,75,74,26,26,26,26,33,30,31,74,73,27,27,27,27,33,29,30,73,72,28,28,28,28,32,98,130,128,29,29,29,32,128,127,96,30,30,30,32,96,97,19,31,31,31,32,19,20,21,32,32,32,32,21,22,23,33,33,33,32,23,24,25,34,34,34,32,25,26,27,35,35,35,32,27,28,38,36,36,36,32,27,38,37,37,37,37,32,23,25,27,38,38,38,32,19,21,23,39,39,39,32,128,96,19,40,40,40,32,99,98,128,41,41,41,32,100,99,128,42,42,42,32,128,19,23,43,43,43,32,23,27,37,44,44,44,32,23,37,36,45,45,45,32,101,100,128,46,46,46,32,102,101,128,47,47,47,32,23,36,35,48,48,48,32,23,35,34,49,49,49,32,102,128,23,50,50,50,32,29,102,23,51,51,51,32,23,34,33,52,52,52,32,23,33,32,53,53,53,32,30,29,23,54,54,54,32,23,32,31,55,55,55,32,23,31,30,56,56,56,33,252,110,117,280,57,57,57,57,33,140,51,50,139,58,58,58,58,33,147,87,88,148,59,59,59,59,33,138,49,48,137,60,60,60,60,33,145,85,86,146,61,61,61,61,33,141,52,51,140,62,62,62,62,33,256,114,115,257,63,63,63,63,33,254,112,113,255,64,64,64,64,33,2,0,1,9,65,65,65,65,33,136,47,46,135,66,66,66,66,33,148,88,89,149,67,67,67,67,33,142,82,83,143,68,68,68,68,33,143,83,84,144,69,69,69,69,32,103,126,125,70,70,70,32,121,122,53,71,71,71,32,103,125,121,72,72,72,32,104,103,121,73,73,73,32,121,53,54,74,74,74,32,54,55,56,75,75,75,32,56,57,58,76,76,76,32,58,59,60,77,77,77,32,60,61,94,78,78,78,32,94,92,93,79,79,79,32,95,71,70,80,80,80,32,94,93,95,81,81,81,32,58,60,94,82,82,82,32,54,56,58,83,83,83,32,104,121,54,84,84,84,32,62,104,54,85,85,85,32,54,58,94,86,86,86,32,94,95,70,87,87,87,32,94,70,69,88,88,88,32,63,62,54,89,89,89,32,64,63,54,90,90,90,32,54,94,69,91,91,91,32,54,69,68,92,92,92,32,65,64,54,93,93,93,32,66,65,54,94,94,94,32,54,68,67,95,95,95,32,54,67,66,96,96,96,33,150,90,91,151,97,97,97,97,33,21,20,63,64,98,98,98,98,33,22,21,64,65,99,99,99,99,33,23,22,65,66,100,100,100,100,33,24,23,66,67,101,101,101,101,33,25,24,67,68,102,102,102,102,33,26,25,68,69,103,103,103,103,33,27,26,69,70,104,104,104,104,33,28,27,70,71,105,105,105,105,33,132,299,134,45,106,106,106,106,32,10,123,124,107,107,107,32,124,131,3,108,108,108,32,3,4,5,109,109,109,32,5,6,7,110,110,110,32,7,8,2,111,111,111,32,2,9,18,112,112,112,32,2,18,17,113,113,113,32,5,7,2,114,114,114,32,124,3,5,115,115,115,32,11,10,124,116,116,116,32,12,11,124,117,117,117,32,124,5,2,118,118,118,32,2,17,16,119,119,119,32,2,16,15,120,120,120,32,12,124,2,121,121,121,32,13,12,2,122,122,122,32,2,15,14,123,123,123,32,14,13,2,124,124,124,33,94,250,248,92,125,125,125,125,33,93,249,251,95,126,126,126,126,33,92,248,249,93,127,127,127,127,32,28,71,95,128,128,128,32,151,91,81,129,129,129,32,151,81,38,129,129,129,32,28,95,251,130,130,130,32,151,38,28,131,131,131,32,28,251,151,132,132,132,32,9,1,52,129,129,129,32,250,94,61,129,129,129,32,250,61,18,129,129,129,32,9,52,141,133,133,133,32,250,18,9,134,134,134,32,9,141,250,135,135,135,33,19,97,104,62,136,136,136,136,33,97,96,103,104,137,137,137,137,33,96,127,126,103,138,138,138,138,33,253,111,112,254,139,139,139,139,33,102,29,72,109,140,140,140,140,33,101,102,109,108,141,141,141,141,33,100,101,108,107,142,142,142,142,33,99,100,107,106,143,143,143,143,33,98,99,106,105,144,144,144,144,33,257,115,116,258,145,145,145,145,33,139,50,49,138,146,146,146,146,33,137,48,47,136,147,147,147,147,32,112,111,117,148,148,148,32,117,110,119,149,149,149,32,118,129,105,150,150,150,32,117,119,118,151,151,151,32,112,117,118,152,152,152,32,118,105,106,153,153,153,32,106,107,108,154,154,154,32,108,109,72,155,155,155,32,72,73,74,156,156,156,32,74,75,76,157,157,157,32,76,77,78,158,158,158,32,78,79,80,159,159,159,32,80,81,91,160,160,160,32,80,91,90,161,161,161,32,76,78,80,162,162,162,32,72,74,76,163,163,163,32,106,108,72,164,164,164,32,112,118,106,154,154,154,32,113,112,106,154,154,154,32,80,90,89,165,165,165,32,80,89,88,166,166,166,32,114,113,106,154,154,154,32,115,114,106,167,167,167,32,76,80,88,168,168,168,32,76,88,87,169,169,169,32,115,106,72,170,170,170,32,116,115,72,154,154,154,32,76,87,86,171,171,171,32,76,86,85,172,172,172,32,82,116,72,173,173,173,32,83,82,72,174,174,174,32,72,76,85,175,175,175,32,84,83,72,176,176,176,32,85,84,72,177,177,177,33,253,280,117,111,178,178,178,178,32,39,133,132,179,179,179,32,132,45,46,180,180,180,32,46,47,48,181,181,181,32,48,49,50,182,182,182,32,50,51,52,183,183,183,32,52,1,0,184,184,184,32,52,0,44,185,185,185,32,48,50,52,186,186,186,32,132,46,48,187,187,187,32,40,39,132,188,188,188,32,41,40,132,189,189,189,32,48,52,44,190,190,190,32,48,44,43,191,191,191,32,41,132,48,192,192,192,32,48,43,42,193,193,193,32,42,41,48,194,194,194,33,135,46,45,134,195,195,195,195,33,122,123,10,53,196,196,196,196,32,296,285,120,197,197,197,32,120,119,110,198,198,198,32,110,252,296,199,199,199,32,120,110,296,200,200,200,33,129,130,98,105,201,201,201,201,33,255,113,114,256,202,202,202,202,33,154,152,196,160,0,0,0,0,33,160,196,195,159,1,1,1,1,33,159,195,194,158,2,2,2,2,33,158,194,193,157,3,3,3,3,33,157,193,192,156,4,4,4,4,33,156,192,191,155,203,203,203,203,33,155,191,300,297,6,6,6,6,33,149,150,242,241,7,7,7,7,33,144,145,237,236,8,8,8,8,33,146,147,239,238,9,9,9,9,33,172,215,214,171,10,10,10,10,33,169,212,213,170,11,11,11,11,33,168,211,212,169,12,12,12,12,33,167,210,211,168,13,13,13,13,33,166,209,210,167,14,14,14,14,33,165,208,209,166,15,15,15,15,33,164,207,208,165,16,16,16,16,33,163,206,207,164,17,17,17,17,33,162,205,206,163,18,18,18,18,33,258,142,234,279,19,19,19,19,33,189,232,233,190,20,20,20,20,33,188,231,232,189,21,21,21,21,33,187,230,231,188,22,22,22,22,33,186,229,230,187,23,23,23,23,33,185,228,229,186,24,24,24,24,33,184,227,228,185,25,25,25,25,33,183,226,227,184,26,26,26,26,33,182,225,226,183,27,27,27,27,33,181,224,225,182,28,28,28,28,32,189,190,180,204,204,204,32,180,179,178,205,205,205,32,178,177,176,206,206,206,32,176,175,174,207,207,207,32,174,173,172,208,208,208,32,172,171,260,209,209,209,32,260,259,292,210,210,210,32,293,295,261,211,211,211,32,260,292,293,212,212,212,32,174,172,260,213,213,213,32,178,176,174,214,214,214,32,189,180,178,215,215,215,32,188,189,178,216,216,216,32,178,174,260,217,217,217,32,260,293,261,218,218,218,32,260,261,262,219,219,219,32,187,188,178,220,220,220,32,186,187,178,221,221,221,32,260,262,263,222,222,222,32,260,263,264,223,223,223,32,186,178,260,224,224,224,32,185,186,260,225,225,225,32,260,264,265,226,226,226,32,260,265,181,227,227,227,32,184,185,260,228,228,228,32,183,184,260,229,229,229,32,260,181,182,230,230,230,32,182,183,260,231,231,231,33,252,280,281,273,232,232,232,232,33,140,139,202,203,58,58,58,58,33,147,148,240,239,59,59,59,59,33,138,137,200,201,60,60,60,60,33,145,146,238,237,61,61,61,61,33,141,140,203,204,233,233,233,233,33,256,257,278,277,63,63,63,63,33,254,255,276,275,64,64,64,64,33,154,161,153,152,65,65,65,65,33,136,135,198,199,66,66,66,66,33,148,149,241,240,67,67,67,67,33,142,143,235,234,68,68,68,68,33,143,144,236,235,69,69,69,69,32,222,223,247,234,234,234,32,247,245,244,235,235,235,32,246,213,212,236,236,236,32,247,244,246,237,237,237,32,221,222,247,238,238,238,32,220,221,247,239,239,239,32,247,246,212,240,240,240,32,212,211,210,241,241,241,32,210,209,208,242,242,242,32,208,207,206,243,243,243,32,206,205,287,244,244,244,32,206,287,286,245,245,245,32,210,208,206,246,246,246,32,247,212,210,247,247,247,32,219,220,247,248,248,248,32,219,247,210,249,249,249,32,210,206,286,250,250,250,32,290,291,266,251,251,251,32,210,286,290,252,252,252,32,218,219,210,253,253,253,32,217,218,210,254,254,254,32,210,290,266,255,255,255,32,210,266,267,256,256,256,32,216,217,210,251,251,251,32,215,216,210,257,257,257,32,210,267,214,258,258,258,32,214,215,210,259,259,259,33,150,151,243,242,97,97,97,97,33,173,216,215,172,98,98,98,98,33,174,217,216,173,99,99,99,99,33,175,218,217,174,100,100,100,100,33,176,219,218,175,101,101,101,101,33,177,220,219,176,102,102,102,102,33,178,221,220,177,103,103,103,103,33,179,222,221,178,104,104,104,104,33,180,223,222,179,105,105,105,105,33,298,197,134,299,260,260,260,260,32,169,170,161,261,261,261,32,161,154,160,262,262,262,32,160,159,158,263,263,263,32,158,157,156,264,264,264,32,156,155,297,265,265,265,32,289,288,162,266,266,266,32,156,297,289,267,267,267,32,160,158,156,268,268,268,32,169,161,160,269,269,269,32,168,169,160,270,270,270,32,160,156,289,271,271,271,32,289,162,163,272,272,272,32,289,163,164,273,273,273,32,167,168,160,274,274,274,32,166,167,160,275,275,275,32,160,289,164,276,276,276,32,165,166,160,277,277,277,32,160,164,165,278,278,278,33,246,244,248,250,125,125,125,125,33,245,247,251,249,126,126,126,126,33,244,245,249,248,127,127,127,127,32,190,233,243,129,129,129,32,251,247,223,130,130,130,32,251,223,180,130,130,130,32,190,243,151,129,129,129,32,251,180,190,279,279,279,32,190,151,251,280,280,280,32,170,213,246,129,129,129,32,141,204,153,281,281,281,32,141,153,161,282,282,282,32,170,246,250,130,130,130,32,141,161,170,283,283,283,32,170,250,141,284,284,284,33,171,214,267,260,136,136,136,136,33,260,267,266,259,137,137,137,137,33,259,266,291,292,138,138,138,138,33,253,254,275,274,139,139,139,139,33,265,272,224,181,140,140,140,140,33,264,271,272,265,141,141,141,141,33,263,270,271,264,142,142,142,142,33,262,269,270,263,143,143,143,143,33,261,268,269,262,144,144,144,144,33,257,258,279,278,145,145,145,145,33,139,138,201,202,146,146,146,146,33,137,136,199,200,147,147,147,147,32,242,243,233,285,285,285,32,233,232,231,286,286,286,32,231,230,229,287,287,287,32,229,228,227,288,288,288,32,227,226,225,289,289,289,32,225,224,272,290,290,290,32,272,271,270,251,251,251,32,270,269,268,251,251,251,32,268,294,282,291,291,291,32,282,283,273,292,292,292,32,281,274,275,251,251,251,32,282,273,281,293,293,293,32,270,268,282,294,294,294,32,225,272,270,295,295,295,32,229,227,225,296,296,296,32,233,231,229,297,297,297,32,241,242,233,298,298,298,32,240,241,233,299,299,299,32,270,282,281,300,300,300,32,270,281,275,251,251,251,32,240,233,229,301,301,301,32,239,240,229,302,302,302,32,270,275,276,251,251,251,32,270,276,277,251,251,251,32,238,239,229,303,303,303,32,237,238,229,304,304,304,32,270,277,278,219,219,219,32,270,278,279,305,305,305,32,237,229,225,306,306,306,32,236,237,225,307,307,307,32,225,270,279,308,308,308,32,225,279,234,251,251,251,32,235,236,225,302,302,302,32,225,234,235,251,251,251,33,253,274,281,280,178,178,178,178,32,152,153,204,309,309,309,32,204,203,202,310,310,310,32,202,201,200,311,311,311,32,200,199,198,312,312,312,32,198,197,298,313,313,313,32,298,300,191,251,251,251,32,298,191,192,314,314,314,32,200,198,298,315,315,315,32,204,202,200,316,316,316,32,196,152,204,317,317,317,32,196,204,200,318,318,318,32,200,298,192,319,319,319,32,200,192,193,320,320,320,32,195,196,200,321,321,321,32,200,193,194,322,322,322,32,194,195,200,323,323,323,33,135,134,197,198,195,195,195,195,33,287,205,162,288,196,196,196,196,32,284,285,296,197,197,197,32,296,252,273,199,199,199,32,273,283,284,324,324,324,32,296,273,284,325,325,325,33,294,268,261,295,201,201,201,201,33,255,256,277,276,202,202,202,202],"vertices":[156.808,4,-42.988,164.932,4,-50.7141,156.808,0.999998,-42.988,99.8334,1,-4.91867,110.07,1,-10.0715,120.042,0.999999,-15.7205,129.725,0.999999,-21.852,139.095,0.999999,-28.4512,148.13,0.999998,-35.5022,164.932,0.999998,-50.7141,86.2935,1,-7.66759,96.412,0.999999,-12.1528,106.298,0.999999,-17.129,115.928,0.999999,-22.5844,125.279,0.999999,-28.5057,134.328,0.999998,-34.8788,143.054,0.999998,-41.6881,151.434,0.999998,-48.9174,159.274,0.999998,-56.3727,69.5643,0.999999,-21.5791,79.0204,0.999999,-25.2266,88.286,0.999999,-29.3338,97.339,0.999999,-33.8906,106.157,0.999998,-38.8862,114.72,0.999998,-44.3084,123.006,0.999998,-50.1443,130.997,0.999998,-56.3798,138.671,0.999997,-62.9997,145.835,0.999997,-69.8117,66.8684,0.999999,-29.1137,75.958,0.999999,-32.6199,84.8645,0.999998,-36.5679,93.5667,0.999998,-40.9481,102.043,0.999998,-45.7501,110.274,0.999998,-50.9622,118.239,0.999998,-56.5719,125.92,0.999997,-62.5657,133.297,0.999997,-68.9291,140.176,0.999997,-75.4703,99.8334,4,-4.91867,110.07,4,-10.0715,120.042,4,-15.7205,129.725,4,-21.852,139.095,4,-28.4512,148.13,4,-35.5022,100.475,4,-3.56229,110.778,4,-8.74826,120.814,4,-14.4335,130.559,4,-20.6044,139.989,4,-27.246,149.082,4,-34.3423,157.816,4,-41.8762,165.993,4,-49.6531,86.2935,4,-7.66759,96.412,4,-12.1528,106.298,4,-17.129,115.928,4,-22.5844,125.279,4,-28.5057,134.328,4,-34.8788,143.054,4,-41.6881,151.434,4,-48.9174,159.274,4,-56.3727,69.5643,4,-21.5791,79.0204,4,-25.2266,88.286,4,-29.3338,97.339,4,-33.8906,106.157,4,-38.8862,114.72,4,-44.3084,123.006,4,-50.1443,130.997,4,-56.3798,138.671,4,-62.9997,145.835,4,-69.8117,66.8684,4,-29.1137,75.958,4,-32.6199,84.8645,4,-36.5679,93.5667,4,-40.9481,102.043,4,-45.7501,110.274,4,-50.9622,118.239,4,-56.5719,125.92,4,-62.5657,133.297,4,-68.9291,140.176,4,-75.4703,66.363,4,-30.5264,75.3838,4,-34.0061,84.223,4,-37.9243,92.8594,4,-42.2714,101.272,4,-47.0371,109.441,4,-52.2098,117.346,4,-57.7771,124.968,4,-63.7256,132.289,4,-70.0409,139.115,4,-76.5313,164.226,4,-64.1488,153.265,4,-75.109,156.801,4,-58.8455,147.962,4,-67.6843,50.1728,0.999999,-15.6968,59.9408,0.999999,-18.3999,19.4549,0.999999,-18.4667,29.124,0.999999,-19.6593,38.7229,0.999999,-21.3248,48.2284,0.999999,-23.4593,57.6178,0.999999,-26.0577,50.1728,4,-15.6968,59.9408,4,-18.3999,19.4549,4,-18.4667,29.124,4,-19.6593,38.7229,4,-21.3248,48.2284,4,-23.4593,57.6178,4,-26.0577,0.250039,4,-19.0114,9.66539,4,-19.2487,19.3078,4,-19.96,28.9038,4,-21.1435,38.4301,4,-22.7964,47.8638,4,-24.9148,57.1823,4,-27.4936,9.00004,4,-19.0114,11.5313,4,-18.7169,0.250021,4,-19,0.250039,3.97706,-19,79.1696,4,-5.26265,79.6142,4,-5.09115,79.6142,1,-5.09115,89.9312,1,-1.11145,45.8467,4,-14.4845,45.2417,4,-14.5894,45.2417,0.999999,-14.5894,34.4821,1,-16.4564,17.1888,4,-18.2996,17.1888,0.999999,-18.2996,90.5878,1,-0.820387,92.4385,4,-0.00000619491,90.5878,4,-0.820387,100.475,-1.55712e-7,-3.56229,110.778,-3.82399e-7,-8.74826,120.814,-6.30909e-7,-14.4335,130.559,-9.00646e-7,-20.6044,139.989,-0.00000119096,-27.246,149.082,-0.00000150115,-34.3423,157.816,-0.00000183047,-41.8762,165.993,-0.00000217041,-49.6531,66.363,-0.00000133435,-30.5264,75.3838,-0.00000148645,-34.0061,84.223,-0.00000165772,-37.9243,92.8594,-0.00000184774,-42.2714,101.272,-0.00000205606,-47.0371,109.441,-0.00000228216,-52.2098,117.346,-0.00000252552,-57.7771,124.968,-0.00000278553,-63.7256,132.289,-0.00000306158,-70.0409,139.115,-0.00000334529,-76.5313,156.808,-4,-42.988,164.932,-4,-50.7141,156.808,-1,-42.988,99.8334,-1,-4.91867,110.07,-1,-10.0715,120.042,-1,-15.7205,129.725,-1,-21.852,139.095,-1,-28.4512,148.13,-1,-35.5022,164.932,-1,-50.7141,86.2935,-1,-7.66759,96.412,-1,-12.1528,106.298,-1,-17.129,115.928,-1,-22.5844,125.279,-1,-28.5057,134.328,-1,-34.8788,143.054,-1,-41.6881,151.434,-1,-48.9174,159.274,-1,-56.3727,69.5643,-1,-21.5791,79.0204,-1,-25.2266,88.286,-1,-29.3338,97.339,-1,-33.8906,106.157,-1,-38.8862,114.72,-1,-44.3084,123.006,-1,-50.1443,130.997,-1,-56.3798,138.671,-1,-62.9997,145.835,-1,-69.8117,66.8684,-1,-29.1137,75.958,-1,-32.6199,84.8645,-1,-36.5679,93.5667,-1,-40.9481,102.043,-1,-45.7501,110.274,-1,-50.9622,118.239,-1,-56.5719,125.92,-1,-62.5657,133.297,-1,-68.9291,140.176,-1,-75.4703,99.8334,-4,-4.91867,110.07,-4,-10.0715,120.042,-4,-15.7205,129.725,-4,-21.852,139.095,-4,-28.4512,148.13,-4,-35.5022,100.475,-4,-3.56229,110.778,-4,-8.74826,120.814,-4,-14.4335,130.559,-4,-20.6044,139.989,-4,-27.246,149.082,-4,-34.3423,157.816,-4,-41.8762,165.993,-4,-49.6531,86.2935,-4,-7.66759,96.412,-4,-12.1528,106.298,-4,-17.129,115.928,-4,-22.5844,125.279,-4,-28.5057,134.328,-4,-34.8788,143.054,-4,-41.6881,151.434,-4,-48.9174,159.274,-4,-56.3727,69.5643,-4,-21.5791,79.0204,-4,-25.2266,88.286,-4,-29.3338,97.339,-4,-33.8906,106.157,-4,-38.8862,114.72,-4,-44.3084,123.006,-4,-50.1443,130.997,-4,-56.3798,138.671,-4,-62.9997,145.835,-4,-69.8117,66.8684,-4,-29.1137,75.958,-4,-32.6199,84.8645,-4,-36.5679,93.5667,-4,-40.9481,102.043,-4,-45.7501,110.274,-4,-50.9622,118.239,-4,-56.5719,125.92,-4,-62.5657,133.297,-4,-68.9291,140.176,-4,-75.4703,66.363,-4,-30.5264,75.3838,-4,-34.0061,84.223,-4,-37.9243,92.8594,-4,-42.2714,101.272,-4,-47.0371,109.441,-4,-52.2098,117.346,-4,-57.7771,124.968,-4,-63.7256,132.289,-4,-70.0409,139.115,-4,-76.5313,164.226,-4,-64.1488,153.265,-4,-75.109,156.801,-4,-58.8455,147.962,-4,-67.6843,164.226,-0.00000280403,-64.1488,153.265,-0.00000328312,-75.109,156.801,-0.00000257222,-58.8455,147.962,-0.00000295858,-67.6843,0.250039,-8.31017e-7,-19.0114,9.66539,-8.41387e-7,-19.2487,19.3078,-8.72478e-7,-19.96,28.9038,-9.24212e-7,-21.1435,38.4301,-9.96464e-7,-22.7964,47.8638,-0.00000108906,-24.9148,57.1823,-0.00000120178,-27.4936,50.1728,-1,-15.6968,59.9408,-1,-18.3999,19.4549,-1,-18.4667,29.124,-1,-19.6593,38.7229,-1,-21.3248,48.2284,-1,-23.4593,57.6178,-1,-26.0577,50.1728,-4,-15.6968,59.9408,-4,-18.3999,19.4549,-4,-18.4667,29.124,-4,-19.6593,38.7229,-4,-21.3248,48.2284,-4,-23.4593,57.6178,-4,-26.0577,0.250039,-4,-19.0114,9.66539,-4,-19.2487,19.3078,-4,-19.96,28.9038,-4,-21.1435,38.4301,-4,-22.7964,47.8638,-4,-24.9148,57.1823,-4,-27.4936,9.00004,-8.31017e-7,-19.0114,9.00004,-4,-19.0114,11.5313,-4,-18.7169,0.250021,-4,-19,0.250039,-3.97706,-19,0.250039,-8.30515e-7,-19,79.1696,-4,-5.26265,79.6142,-4,-5.09115,79.6142,-1,-5.09115,89.9312,-1,-1.11145,45.8467,-4,-14.4845,45.2417,-4,-14.5894,45.2417,-1,-14.5894,34.4821,-1,-16.4564,17.1888,-4,-18.2996,17.1888,-1,-18.2996,0.250039,-8.30515e-7,-19,90.5878,-1,-0.820387,92.4385,-4,-0.00000584522,92.4385,-2.70962e-13,-0.00000619888,90.5878,-4,-0.820387],"metadata":{"generator":"io_three","normals":326,"uvs":0,"vertices":301,"version":3,"faces":422,"type":"Geometry"}}}

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(3);
const ModelManager_1 = __webpack_require__(8);
// 生のオブジェクトをビューが扱う代わりに
// こいつがシーンとのやりとりを中継する
// また、ポイントの方向などの状態も持たせておく。
// レールとしての意味はRailオブジェクトに考えさせて、
// こいつは糊をやっていく
// * ビューの要求でシーンにオブジェクトを追加・削除する
// * 
class Model {
    // temporary, move to other module
    static pointToVec3(p) {
        const d = 60;
        const l = 54;
        const h = 66 / 4;
        let [sx, sy] = p.single.toReal();
        let [dx, dy] = p.double.toReal();
        let x = l * sx + d * dx;
        let y = l * sy + d * dy;
        let z = h * p.up;
        // convert coordinate system to three.js style
        return new THREE.Vector3(x, z, -y);
    }
    setupMesh(mesh, origin) {
        // set position
        mesh.position.copy(Model.pointToVec3(origin.point));
        // rotate along Y-axis 
        let rad = Math.PI / 4 * origin.dir.dir;
        mesh.rotateY(rad);
    }
}
exports.Model = Model;
class RailModel extends Model {
    constructor(models, rail) {
        super();
        this.models = models;
        this.rail = rail;
        models.forEach(m => this.setupMeshWithRail(m, rail));
    }
    setupMeshWithRail(mesh, rail) {
        super.setupMesh(mesh, rail.instance.origin);
        // rotate along X-axis if the rail is flipped
        if (rail.instance.flip.isYes()) {
            mesh.rotateX(Math.PI);
        }
    }
    addToScene(scene) {
        let mat = new THREE.MeshBasicMaterial();
        let geo = new THREE.SphereGeometry(10, 8, 8);
        let msh = new THREE.Mesh(geo, mat);
        msh.position.copy(Model.pointToVec3(this.rail.ends()[0].point));
        scene.add(msh);
        this.models.forEach(m => scene.add(m));
    }
    removeFromScene(scene) {
        this.models.forEach(m => scene.remove(m));
    }
}
exports.RailModel = RailModel;
class StraightModel extends RailModel {
    constructor(rail) {
        super([ModelManager_1.ModelManager.create('straight_1')], rail);
    }
}
exports.StraightModel = StraightModel;
class CurveModel extends RailModel {
    constructor(rail) {
        super([ModelManager_1.ModelManager.create('curve_8')], rail);
    }
}
exports.CurveModel = CurveModel;
class SlopeModel extends RailModel {
    constructor(rail) {
        super([ModelManager_1.ModelManager.create('slope')], rail);
    }
}
exports.SlopeModel = SlopeModel;
class TurnoutModel extends RailModel {
    constructor(rail) {
        var models = [];
        if (rail.instance.origin.pole.isPlus()) {
            models = ['turnout_L_a', 'turnout_L_b', 'turnout_L_ab'];
        }
        else {
            models = ['turnout_R_a', 'turnout_R_b', 'turnout_R_ab'];
        }
        super(models.map(name => ModelManager_1.ModelManager.create(name)), rail);
    }
}
exports.TurnoutModel = TurnoutModel;
/*
export class PierModel extends Model {
    public constructor(private pier: Pier) {
        super();
        models.forEach(m =>
            this.setupMeshWithRail(m, rail)
        );
    }

    constructor(rail: Pier) {
        super([ModelManager.create('pier_4')], rail);
    }
}
*/ 


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const librail_1 = __webpack_require__(6);
class FrontierManager {
    constructor() {
        this.observer_ = null;
        this.frontiers_ = [new librail_1.End(librail_1.Point.zero(), librail_1.Dir.West, librail_1.Pole.Minus)];
    }
    get observer() {
        return this.observer_;
    }
    set observer(ob) {
        this.observer_ = ob;
    }
    get frontiers() {
        return this.frontiers_;
    }
    get selection() {
        console.log(this.frontiers);
        return this.frontiers[this.frontiers.length - 1];
    }
    notifySelectionChanged() {
        if (this.observer) {
            if (this.observer.selectionChanged) {
                this.observer.selectionChanged(this, this.selection);
            }
        }
    }
    selectNext() {
        let e = this.selection;
        this.frontiers_.splice(this.frontiers.length - 1, 1);
        this.frontiers_.splice(0, 0, e);
        this.notifySelectionChanged();
    }
    toggleOpenEnd(end) {
        let i = this.frontiers_.findIndex(e => end.match(e));
        if (i >= 0) {
            this.frontiers_.splice(i, 1);
        }
        else {
            this.frontiers_.push(end);
        }
    }
    addEnd(end) {
        this.toggleOpenEnd(end);
        this.notifySelectionChanged();
    }
    removeEnd(end) {
        this.toggleOpenEnd(end);
        this.notifySelectionChanged();
    }
}
exports.FrontierManager = FrontierManager;


/***/ })
/******/ ]);
//# sourceMappingURL=bundle.js.map